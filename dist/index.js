/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 417:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Game = void 0;
const THREE = __importStar(__webpack_require__(578));
const ammojs_typed_1 = __importDefault(__webpack_require__(736));
const VRButton_js_1 = __webpack_require__(652);
const pika_1 = __webpack_require__(443);
class Game {
    ammo;
    camera;
    scene;
    renderer;
    physicsWorld;
    pikas = [];
    constructor(ammo) {
        this.ammo = ammo;
        this.renderer = new THREE.WebGLRenderer();
        this.scene = new THREE.Scene();
        this.setUpCamera();
        this.setUpLight();
        this.setUpPhysics();
        this.setUpTank();
        this.setUpRenderer();
        this.setUpAnimation();
    }
    static async make() {
        return new Promise((resolve) => {
            (0, ammojs_typed_1.default)().then((lib) => {
                resolve(new Game(lib));
            });
        });
    }
    setUpPhysics() {
        // Physics configuration
        const collisionConfiguration = new this.ammo.btDefaultCollisionConfiguration();
        const dispatcher = new this.ammo.btCollisionDispatcher(collisionConfiguration);
        const broadphase = new this.ammo.btDbvtBroadphase();
        const solver = new this.ammo.btSequentialImpulseConstraintSolver();
        this.physicsWorld = new this.ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);
        this.physicsWorld.setGravity(new this.ammo.btVector3(0, -9.8, 0));
    }
    setUpCamera() {
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, /*near=*/ 0.1, 
        /*far=*/ 100);
        this.camera.position.set(0, 1.7, 3);
        this.camera.lookAt(0, 0, 0);
        this.scene.add(this.camera);
    }
    setUpLight() {
        const light = new THREE.DirectionalLight(0xffffff, 1.0);
        light.castShadow = true;
        light.shadow.mapSize.width = 1024;
        light.shadow.mapSize.height = 1024;
        light.shadow.camera.near = 50;
        light.shadow.camera.far = 120;
        light.position.set(50, 100, 0);
        light.target.position.set(0, 0, 0);
        this.scene.add(light);
        const ambient = new THREE.AmbientLight(0xddddff, 0.2);
        this.scene.add(ambient);
    }
    setUpRenderer() {
        this.renderer.shadowMap.enabled = true;
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(this.renderer.domElement);
        document.body.appendChild(VRButton_js_1.VRButton.createButton(this.renderer));
        this.renderer.xr.enabled = true;
    }
    addPika() {
        const pika = new pika_1.Pika(new THREE.Vector3(0.01 * (Math.random() - 0.5), 0.5, 0.01 * (Math.random() - 0.5)), this.ammo, this.physicsWorld);
        this.scene.add(pika);
        this.pikas.push(pika);
    }
    setUpAnimation() {
        const clock = new THREE.Clock();
        this.renderer.setAnimationLoop(() => {
            const deltaS = clock.getDelta();
            if (clock.elapsedTime > this.pikas.length && this.pikas.length < 100) {
                this.addPika();
            }
            this.physicsWorld.stepSimulation(deltaS, /*substeps=*/ 10);
            for (const p of this.pikas) {
                p.updatePositionFromPhysics(clock.elapsedTime);
            }
            this.renderer.render(this.scene, this.camera);
        });
    }
    addPlane(normal, offset) {
        const shape = new this.ammo.btStaticPlaneShape(normal, offset);
        shape.setMargin(0.01);
        const ammoTransform = new this.ammo.btTransform();
        ammoTransform.setIdentity();
        const mass = 0; // Zero mass tells Ammo that this object does not move.
        const localInertia = new this.ammo.btVector3(0, 0, 0);
        const motionState = new this.ammo.btDefaultMotionState(ammoTransform);
        shape.calculateLocalInertia(mass, localInertia);
        const body = new this.ammo.btRigidBody(new this.ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia));
        body.setRestitution(0.8);
        // body.setLinearVelocity(new this.ammo.btVector3(0, 0, 0));
        this.physicsWorld.addRigidBody(body);
    }
    setUpTank() {
        this.addPlane(new this.ammo.btVector3(0, 1, 0), 0);
        this.addPlane(new this.ammo.btVector3(-1, 0, 0), -10);
        this.addPlane(new this.ammo.btVector3(1, 0, 0), -10);
        this.addPlane(new this.ammo.btVector3(0, 0, -1), -0.5);
        this.addPlane(new this.ammo.btVector3(0, 0, 1), -0.5);
        let floorGeometry = new THREE.BoxGeometry(10, 0.01, 1);
        let floorMesh = new THREE.Mesh(floorGeometry, new THREE.MeshStandardMaterial({ color: 0x776655, roughness: 0.5 }));
        floorMesh.receiveShadow = true;
        floorMesh.position.set(0, -0.03, 0);
        this.scene.add(floorMesh);
    }
}
exports.Game = Game;
//# sourceMappingURL=game.js.map

/***/ }),

/***/ 443:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pika = void 0;
const THREE = __importStar(__webpack_require__(578));
const BufferGeometryUtils = __importStar(__webpack_require__(58));
class Pika extends THREE.Group {
    ammo;
    physicsWorld;
    btV1;
    btV2;
    btV3;
    btTx;
    btQ;
    v1 = new THREE.Vector3();
    v2 = new THREE.Vector3();
    constructor(position, ammo, physicsWorld) {
        super();
        this.ammo = ammo;
        this.physicsWorld = physicsWorld;
        this.btV1 = new this.ammo.btVector3();
        this.btV2 = new this.ammo.btVector3();
        this.btV3 = new this.ammo.btVector3();
        this.btTx = new this.ammo.btTransform();
        this.btQ = new this.ammo.btQuaternion(1, 0, 0, 0);
        this.position.copy(position);
        this.rotateY(Math.PI / 2);
        this.setGeometry();
        this.addToPhysics();
    }
    updatePositionFromPhysics(elapsedS) {
        const physicsObject = this.userData['physicsObject'];
        // Set position and rotation to match Physics.
        const worldTransform = physicsObject.getWorldTransform();
        const position = worldTransform.getOrigin();
        this.position.set(position.x(), position.y(), position.z());
        const rotation = worldTransform.getRotation();
        this.quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());
        this.updateMatrixWorld();
        // Apply force if neccessary (i.e. walking)
        const velocity = physicsObject.getLinearVelocity().length();
        if (velocity < 0.5) {
            // TODO: Also confirm that Pika is touching the ground.
            const force = 0.5 * (Math.cos(elapsedS * 4 * Math.PI) + 1);
            this.v1.set(0, force * 0.1, force);
            this.v1.applyMatrix4(this.matrixWorld);
            this.getWorldPosition(this.v2);
            this.v1.sub(this.v2);
            this.btV1.setValue(this.v1.x, this.v1.y, this.v1.z);
            physicsObject.setLinearVelocity(this.btV1);
        }
    }
    // Forward is in the positive Z direction.
    static kRadius = 0.05;
    static kLength = 0.20;
    static kDenseRadius = 0.005;
    setGeometry() {
        { // Body
            let ballGeometry = new THREE.IcosahedronBufferGeometry(Pika.kRadius, 3);
            ballGeometry.scale(1, 1, Pika.kLength / (2 * Pika.kRadius));
            ballGeometry.translate(0, 0, 0);
            ballGeometry = BufferGeometryUtils.mergeVertices(ballGeometry, 0.001);
            ballGeometry.computeVertexNormals();
            const ballMesh = new THREE.Mesh(ballGeometry, new THREE.MeshStandardMaterial({ color: 0xffdd33, roughness: 0.5 }));
            ballMesh.castShadow = true;
            ballMesh.receiveShadow = true;
            this.add(ballMesh);
        }
        { // Head
            let ballGeometry = new THREE.IcosahedronBufferGeometry(Pika.kRadius, 3);
            ballGeometry.translate(0, Pika.kRadius / 2, Pika.kLength / 2);
            ballGeometry = BufferGeometryUtils.mergeVertices(ballGeometry, 0.001);
            ballGeometry.computeVertexNormals();
            const ballMesh = new THREE.Mesh(ballGeometry, new THREE.MeshStandardMaterial({ color: 0xffdd33, roughness: 0.5 }));
            ballMesh.castShadow = true;
            ballMesh.receiveShadow = true;
            this.add(ballMesh);
        }
    }
    addToPhysics() {
        // Capsule
        const capsule = new this.ammo.btCapsuleShapeZ(Pika.kRadius, Pika.kLength);
        const outerShell = new this.ammo.btCompoundShape();
        this.btTx.setIdentity();
        this.btV1.setValue(0, Pika.kRadius, 0);
        this.btTx.setOrigin(this.btV1);
        outerShell.addChildShape(this.btTx, capsule);
        outerShell.setMargin(0.01);
        const outerBody = this.makeRigidBody(outerShell, 0.002 /*kg*/, 0, 0);
        outerBody.setFriction(0.9);
        outerBody.setRestitution(0.1);
        this.physicsWorld.addRigidBody(outerBody);
        this.userData['physicsObject'] = outerBody;
    }
    makeRigidBody(shape, mass, offsetY, offsetZ) {
        this.btTx.setIdentity();
        this.btV1.setValue(this.position.x, this.position.y + offsetY, this.position.z + offsetZ);
        this.btTx.setOrigin(this.btV1);
        this.btQ.setValue(this.quaternion.x, this.quaternion.y, this.quaternion.z, this.quaternion.w);
        this.btTx.setRotation(this.btQ);
        const motionState = new this.ammo.btDefaultMotionState(this.btTx);
        this.btV1.setValue(0, 0, 0);
        shape.calculateLocalInertia(mass, this.btV1);
        const body = new this.ammo.btRigidBody(new this.ammo.btRigidBodyConstructionInfo(mass, motionState, shape, this.btV1));
        body.setRestitution(0.8);
        return body;
    }
}
exports.Pika = Pika;
//# sourceMappingURL=pika.js.map

/***/ }),

/***/ 736:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __filename = "/index.js";
var __dirname = "/";

// This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.

var Ammo = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Ammo) {
  Ammo = Ammo || {};


var b;b||(b=typeof Ammo !== 'undefined' ? Ammo : {});
var Promise=function(){function a(){}function c(v,J){return function(){v.apply(J,arguments)}}function d(v){if(!(this instanceof d))throw new TypeError("Promises must be constructed via new");if("function"!==typeof v)throw new TypeError("not a function");this.m=0;this.ia=!1;this.o=void 0;this.s=[];ma(v,this)}function e(v,J){for(;3===v.m;)v=v.o;0===v.m?v.s.push(J):(v.ia=!0,d.ja(function(){var ba=1===v.m?J.Vc:J.Wc;if(null===ba)(1===v.m?g:n)(J.Y,v.o);else{try{var za=ba(v.o)}catch(ub){n(J.Y,ub);return}g(J.Y,
za)}}))}function g(v,J){try{if(J===v)throw new TypeError("A promise cannot be resolved with itself.");if(J&&("object"===typeof J||"function"===typeof J)){var ba=J.then;if(J instanceof d){v.m=3;v.o=J;D(v);return}if("function"===typeof ba){ma(c(ba,J),v);return}}v.m=1;v.o=J;D(v)}catch(za){n(v,za)}}function n(v,J){v.m=2;v.o=J;D(v)}function D(v){2===v.m&&0===v.s.length&&d.ja(function(){v.ia||d.ka(v.o)});for(var J=0,ba=v.s.length;J<ba;J++)e(v,v.s[J]);v.s=null}function Y(v,J,ba){this.Vc="function"===typeof v?
v:null;this.Wc="function"===typeof J?J:null;this.Y=ba}function ma(v,J){var ba=!1;try{v(function(za){ba||(ba=!0,g(J,za))},function(za){ba||(ba=!0,n(J,za))})}catch(za){ba||(ba=!0,n(J,za))}}d.prototype["catch"]=function(v){return this.then(null,v)};d.prototype.then=function(v,J){var ba=new this.constructor(a);e(this,new Y(v,J,ba));return ba};d.all=function(v){return new d(function(J,ba){function za(Cc,Ub){try{if(Ub&&("object"===typeof Ub||"function"===typeof Ub)){var Dc=Ub.then;if("function"===typeof Dc){Dc.call(Ub,
function(rc){za(Cc,rc)},ba);return}}ub[Cc]=Ub;0===--wC&&J(ub)}catch(rc){ba(rc)}}if(!Array.isArray(v))return ba(new TypeError("Promise.all accepts an array"));var ub=Array.prototype.slice.call(v);if(0===ub.length)return J([]);for(var wC=ub.length,dc=0;dc<ub.length;dc++)za(dc,ub[dc])})};d.resolve=function(v){return v&&"object"===typeof v&&v.constructor===d?v:new d(function(J){J(v)})};d.reject=function(v){return new d(function(J,ba){ba(v)})};d.race=function(v){return new d(function(J,ba){if(!Array.isArray(v))return ba(new TypeError("Promise.race accepts an array"));
for(var za=0,ub=v.length;za<ub;za++)d.resolve(v[za]).then(J,ba)})};d.ja="function"===typeof setImmediate&&function(v){setImmediate(v)}||function(v){setTimeout(v,0)};d.ka=function(v){"undefined"!==typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",v)};return d}(),aa;b.ready=new Promise(function(a){aa=a});var ca={},da;for(da in b)b.hasOwnProperty(da)&&(ca[da]=b[da]);var ea=!1,fa=!1,ha=!1,ia=!1;ea="object"===typeof window;fa="function"===typeof importScripts;
ha="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node;ia=!ea&&!ha&&!fa;var ja="",ka,la,na,oa;
if(ha)ja=fa?__webpack_require__(920).dirname(ja)+"/":__dirname+"/",ka=function(a,c){var d=pa(a);if(d)return c?d:d.toString();na||(na=__webpack_require__(412));oa||(oa=__webpack_require__(920));a=oa.normalize(a);return na.readFileSync(a,c?null:"utf8")},la=function(a){a=ka(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a},1<process.argv.length&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",function(a){throw a;}),process.on("unhandledRejection",qa),b.inspect=function(){return"[Emscripten Module object]"};
else if(ia)"undefined"!=typeof read&&(ka=function(a){var c=pa(a);return c?ra(c):read(a)}),la=function(a){var c;if(c=pa(a))return c;if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));c=read(a,"binary");assert("object"===typeof c);return c},"undefined"!==typeof print&&("undefined"===typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!==typeof printErr?printErr:print);else if(ea||fa)fa?ja=self.location.href:document.currentScript&&(ja=document.currentScript.src),
_scriptDir&&(ja=_scriptDir),ja=0!==ja.indexOf("blob:")?ja.substr(0,ja.lastIndexOf("/")+1):"",ka=function(a){try{var c=new XMLHttpRequest;c.open("GET",a,!1);c.send(null);return c.responseText}catch(d){if(a=pa(a))return ra(a);throw d;}},fa&&(la=function(a){try{var c=new XMLHttpRequest;c.open("GET",a,!1);c.responseType="arraybuffer";c.send(null);return new Uint8Array(c.response)}catch(d){if(a=pa(a))return a;throw d;}});var sa=b.print||console.log.bind(console),ta=b.printErr||console.warn.bind(console);
for(da in ca)ca.hasOwnProperty(da)&&(b[da]=ca[da]);ca=null;var ua;b.wasmBinary&&(ua=b.wasmBinary);var noExitRuntime;b.noExitRuntime&&(noExitRuntime=b.noExitRuntime);function va(){return{buffer:new ArrayBuffer(wa/65536*65536),grow:function(a){return xa(a)}}}function ya(){return{exports:(
// EMSCRIPTEN_START_ASM
function a(asmLibraryArg,wasmMemory,wasmTable){var scratchBuffer=new ArrayBuffer(8);var b=new Int32Array(scratchBuffer);var c=new Float32Array(scratchBuffer);var d=new Float64Array(scratchBuffer);function e(index,value){b[index]=value}function f(){return d[0]}function g(value){c[0]=value}function h(index){return b[index]}function i(){return c[0]}function j(global,env,buffer){var k=env.memory;var l=wasmTable;var m=new global.Int8Array(buffer);var n=new global.Int16Array(buffer);var o=new global.Int32Array(buffer);var p=new global.Uint8Array(buffer);var q=new global.Uint16Array(buffer);var r=new global.Uint32Array(buffer);var s=new global.Float32Array(buffer);var t=new global.Float64Array(buffer);var u=global.Math.imul;var v=global.Math.fround;var w=global.Math.abs;var x=global.Math.clz32;var y=global.Math.min;var z=global.Math.max;var A=global.Math.floor;var B=global.Math.ceil;var C=global.Math.sqrt;var D=env.abort;var E=global.NaN;var F=global.Infinity;var G=env.emscripten_asm_const_iii;var H=env.gettimeofday;var I=env.emscripten_asm_const_dii;var J=env.emscripten_memcpy_big;var K=env.emscripten_resize_heap;var L=env.abort;var M=5274432;var N=0;
// EMSCRIPTEN_START_FUNCS
function Ly(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=v(0),i=0,j=0,k=0,n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=0,y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=0,F=v(0),G=v(0),H=0,I=0,J=v(0),K=0,L=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0);d=M-176|0;M=d;o[d+152>>2]=0;o[d+156>>2]=0;o[d+144>>2]=0;o[d+148>>2]=0;o[d+136>>2]=1065353216;o[d+140>>2]=0;o[d+128>>2]=1065353216;o[d+132>>2]=1065353216;o[d+120>>2]=0;o[d+124>>2]=0;o[d+112>>2]=1065353216;o[d+116>>2]=0;a:{if(c&256){o[7720]=1805;o[7721]=0;k=o[a+1112>>2];if((k|0)<1){break a}while(1){E=I<<2;if(p[o[E+o[a+1120>>2]>>2]+377|0]){e=tL(o[7720],o[7721],1284865837,1481765933)+1|0;i=N;i=e>>>0<1?i+1|0:i;o[7720]=e;o[7721]=i;k=i>>>1|0;e=tL(o[7720],o[7721],1284865837,1481765933)+1|0;i=N;i=e>>>0<1?i+1|0:i;o[7720]=e;o[7721]=i;x=i>>>1|0;e=tL(o[7720],o[7721],1284865837,1481765933)+1|0;j=N;j=e>>>0<1?j+1|0:j;o[7720]=e;o[7721]=j;f=v(v(j>>>1|0)*v(4.656612873077393e-10));h=v(v(k|0)*v(4.656612873077393e-10));n=v(v(x|0)*v(4.656612873077393e-10));g=v(v(1)/v(C(v(v(f*f)+v(v(h*h)+v(n*n))))));s[d+168>>2]=v(f*g)*v(.75);s[d+164>>2]=v(n*g)*v(.75);s[d+160>>2]=v(h*g)*v(.75);o[d+172>>2]=0;e=o[o[E+o[a+1120>>2]>>2]+24>>2];b:{if((e|0)<=0){x=0;break b}k=0;o[7717]=o[7717]+1;x=l[o[6606]](e<<4,16)|0;while(1){H=o[d+52>>2];i=(k<<4)+x|0;j=i;o[j>>2]=o[d+48>>2];o[j+4>>2]=H;j=o[d+60>>2];o[i+8>>2]=o[d+56>>2];o[i+12>>2]=j;k=k+1|0;if((e|0)!=(k|0)){continue}break}k=0;if((e|0)<1){break b}while(1){i=o[o[o[E+o[a+1120>>2]>>2]+32>>2]+(k<<2)>>2];H=o[i+12>>2];j=(k<<4)+x|0;o[j>>2]=o[i+8>>2];o[j+4>>2]=H;H=o[i+20>>2];o[j+8>>2]=o[i+16>>2];o[j+12>>2]=H;k=k+1|0;if((e|0)!=(k|0)){continue}break}}H=0;o[d+60>>2]=0;m[d+64|0]=1;m[d+84|0]=1;o[d+52>>2]=0;o[d+56>>2]=0;o[d+80>>2]=0;m[d+104|0]=1;o[d+72>>2]=0;o[d+76>>2]=0;o[d+100>>2]=0;o[d+92>>2]=0;o[d+96>>2]=0;lf(d+48|0,x,e);i=o[d+92>>2];if((i|0)>0){while(1){E=o[d+80>>2]+u(o[o[d+100>>2]+(H<<2)>>2],12)|0;e=u(o[E+4>>2],12)+E|0;k=u(o[e>>2],12)+e|0;if((k|0)!=(E|0)){i=o[e+8>>2];e=o[E+8>>2];while(1){j=o[d+60>>2];K=j+(i<<4)|0;L=(e<<4)+j|0;i=j;j=o[k+8>>2];l[o[o[b>>2]+28>>2]](b,K,L,i+(j<<4)|0,d+160|0,v(1));i=e;e=j;j=u(o[k+4>>2],12)+k|0;k=u(o[j>>2],12)+j|0;if((E|0)!=(k|0)){continue}break}i=o[d+92>>2]}H=H+1|0;if((H|0)<(i|0)){continue}break}}e=o[d+100>>2];if(e){if(p[d+104|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[d+100>>2]=0}o[d+100>>2]=0;m[d+104|0]=1;o[d+92>>2]=0;o[d+96>>2]=0;e=o[d+80>>2];if(e){if(p[d+84|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[d+80>>2]=0}o[d+80>>2]=0;m[d+84|0]=1;o[d+72>>2]=0;o[d+76>>2]=0;e=o[d+60>>2];if(e){if(p[d+64|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[d+60>>2]=0}if(x){if(x){o[7718]=o[7718]+1;l[o[6607]](x)}}k=o[a+1112>>2]}I=I+1|0;if((I|0)<(k|0)){continue}break}break a}c:{if(!(c&1)){break c}i=o[a+712>>2];if((i|0)<1){break c}while(1){j=o[a+720>>2]+u(e,104)|0;if(m[o[j+4>>2]+16|0]&1){g=s[j+8>>2];i=o[j+16>>2];o[d+52>>2]=o[j+12>>2];o[d+56>>2]=i;o[d+60>>2]=0;s[d+48>>2]=g+v(-.10000000149011612);g=s[j+8>>2];f=s[j+12>>2];h=s[j+16>>2];o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=g+v(.10000000149011612);o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=1065353216;o[d+36>>2]=0;l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);g=s[j+12>>2];i=o[j+8>>2];x=o[j+16>>2];o[d+60>>2]=0;o[d+56>>2]=x;o[d+48>>2]=i;s[d+52>>2]=g+v(-.10000000149011612);g=s[j+8>>2];f=s[j+12>>2];h=s[j+16>>2];o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=f+v(.10000000149011612);s[d+160>>2]=g+v(0);o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);g=s[j+16>>2];i=o[j+12>>2];x=o[j+8>>2];o[d+60>>2]=0;o[d+48>>2]=x;o[d+52>>2]=i;s[d+56>>2]=g+v(-.10000000149011612);g=s[j+8>>2];f=s[j+12>>2];h=s[j+16>>2];o[d+172>>2]=0;s[d+168>>2]=h+v(.10000000149011612);s[d+164>>2]=f+v(0);s[d+160>>2]=g+v(0);o[d+40>>2]=1065353216;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);i=o[a+712>>2]}e=e+1|0;if((e|0)<(i|0)){continue}break}}d:{if(!(c&2)){break d}i=o[a+732>>2];if((i|0)<1){break d}while(1){e=o[a+740>>2]+u(k,52)|0;if(m[o[e+4>>2]+16|0]&1){l[o[o[b>>2]+8>>2]](b,o[e+8>>2]+8|0,o[e+12>>2]+8|0,d+144|0);i=o[a+732>>2]}k=k+1|0;if((k|0)<(i|0)){continue}break}}e:{if(!(c&16)){break e}i=o[a+712>>2];if((i|0)<1){break e}e=0;while(1){j=o[a+720>>2]+u(e,104)|0;if(m[o[j+4>>2]+16|0]&1){g=s[j+72>>2];f=s[j+76>>2];h=s[j+80>>2];n=s[j+8>>2];q=s[j+12>>2];r=s[j+16>>2];o[d+60>>2]=0;h=v(h*v(.5));s[d+56>>2]=r+h;f=v(f*v(.5));s[d+52>>2]=q+f;g=v(g*v(.5));s[d+48>>2]=n+g;i=j+8|0;l[o[o[b>>2]+8>>2]](b,i,d+48|0,d+128|0);n=s[j+8>>2];q=s[j+12>>2];r=s[j+16>>2];o[d+60>>2]=0;s[d+56>>2]=r-h;s[d+52>>2]=q-f;s[d+48>>2]=n-g;o[d+172>>2]=0;s[d+168>>2]=s[d+136>>2]*v(.5);s[d+164>>2]=s[d+132>>2]*v(.5);s[d+160>>2]=s[d+128>>2]*v(.5);l[o[o[b>>2]+8>>2]](b,i,d+48|0,d+160|0);i=o[a+712>>2]}e=e+1|0;if((e|0)<(i|0)){continue}break}}f:{if(!(c&32)){break f}g:{if(m[30816]&1){break g}if(!da(30816)){break g}o[7693]=0;o[7694]=0;o[7692]=1065353216;o[7695]=0;o[7696]=0;o[7698]=0;o[7699]=0;o[7697]=1065353216;o[7700]=0;o[7701]=0;o[7702]=1065353216;o[7703]=0;ca(30816)}if(o[a+812>>2]<1){break f}e=0;while(1){i=o[a+820>>2]+u(e,104)|0;w=s[i+20>>2];g=s[i+12>>2];j=o[i+24>>2];f=s[j+16>>2];h=s[i+8>>2];n=s[j+12>>2];q=s[i+4>>2];r=s[j+8>>2];o[d+60>>2]=0;J=q;q=v(w+v(v(v(r*q)+v(n*h))+v(f*g)));r=v(r-v(J*q));s[d+48>>2]=r;w=v(n-v(h*q));s[d+52>>2]=w;q=v(f-v(g*q));s[d+56>>2]=q;g=s[i+4>>2];f=s[i+12>>2];h=s[i+8>>2];j=(g<h?(g<f^1)<<1:h<f?1:2)<<4;n=s[j+30772>>2];y=s[j+30768>>2];z=s[j+30776>>2];o[d+172>>2]=0;t=v(v(g*n)-v(h*y));A=v(v(h*z)-v(f*n));y=v(v(f*y)-v(g*z));n=v(v(1)/v(C(v(v(t*t)+v(v(A*A)+v(y*y))))));z=v(t*n);t=v(z*v(.5));s[d+168>>2]=q-t;y=v(y*n);B=v(y*v(.5));s[d+164>>2]=w-B;n=v(A*n);A=v(n*v(.5));s[d+160>>2]=r-A;o[d+44>>2]=0;s[d+40>>2]=q+t;s[d+36>>2]=w+B;s[d+32>>2]=r+A;l[o[o[b>>2]+8>>2]](b,d+160|0,d+32|0,d+112|0);o[d+172>>2]=0;q=v(v(h*n)-v(g*y));h=v(v(f*y)-v(h*z));f=v(v(g*z)-v(f*n));g=v(v(1)/v(C(v(v(q*q)+v(v(h*h)+v(f*f))))));n=s[d+56>>2];q=v(v(q*g)*v(.5));s[d+168>>2]=n-q;r=s[d+52>>2];f=v(v(f*g)*v(.5));s[d+164>>2]=r-f;w=s[d+48>>2];g=v(v(h*g)*v(.5));s[d+160>>2]=w-g;o[d+44>>2]=0;s[d+40>>2]=q+n;s[d+36>>2]=f+r;s[d+32>>2]=w+g;l[o[o[b>>2]+8>>2]](b,d+160|0,d+32|0,d+112|0);g=s[i+4>>2];f=s[i+8>>2];h=s[i+12>>2];o[d+172>>2]=0;s[d+168>>2]=v(v(h*v(.5))*v(3))+s[d+56>>2];s[d+164>>2]=v(v(f*v(.5))*v(3))+s[d+52>>2];s[d+160>>2]=v(v(g*v(.5))*v(3))+s[d+48>>2];o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=1065353216;o[d+36>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);e=e+1|0;if((e|0)<o[a+812>>2]){continue}break}}h:{if(!(c&4)){break h}o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=1060320051;i=o[a+752>>2];if((i|0)<1){break h}k=0;while(1){e=o[a+760>>2]+u(k,44)|0;if(m[o[e+4>>2]+16|0]&1){i=o[e+16>>2];n=s[i+12>>2];j=o[e+8>>2];q=s[j+12>>2];e=o[e+12>>2];r=s[e+12>>2];w=s[i+16>>2];h=s[j+16>>2];y=s[e+16>>2];z=s[i+8>>2];f=s[j+8>>2];t=s[e+8>>2];o[d+172>>2]=0;g=v(v(z+v(f+t))*v(.3333333432674408));s[d+160>>2]=g+v(v(f-g)*v(.800000011920929));f=v(v(w+v(h+y))*v(.3333333432674408));s[d+168>>2]=f+v(v(h-f)*v(.800000011920929));h=v(v(n+v(q+r))*v(.3333333432674408));s[d+164>>2]=h+v(v(q-h)*v(.800000011920929));o[d+44>>2]=0;s[d+40>>2]=f+v(v(y-f)*v(.800000011920929));s[d+36>>2]=h+v(v(r-h)*v(.800000011920929));s[d+32>>2]=g+v(v(t-g)*v(.800000011920929));o[d+28>>2]=0;s[d+24>>2]=f+v(v(w-f)*v(.800000011920929));s[d+20>>2]=h+v(v(n-h)*v(.800000011920929));s[d+16>>2]=g+v(v(z-g)*v(.800000011920929));l[o[o[b>>2]+28>>2]](b,d+160|0,d+32|0,d+16|0,d+48|0,v(1));i=o[a+752>>2]}k=k+1|0;if((k|0)<(i|0)){continue}break}}if(!(c&8)){break a}o[d+56>>2]=1060320051;o[d+60>>2]=0;o[d+48>>2]=1050253722;o[d+52>>2]=1050253722;i=o[a+772>>2];if((i|0)<1){break a}k=0;while(1){e=o[a+780>>2]+u(k,104)|0;if(m[o[e+4>>2]+16|0]&1){i=o[e+20>>2];n=s[i+12>>2];j=o[e+16>>2];q=s[j+12>>2];x=o[e+8>>2];r=s[x+12>>2];e=o[e+12>>2];w=s[e+12>>2];y=s[i+16>>2];z=s[j+16>>2];h=s[x+16>>2];t=s[e+16>>2];A=s[i+8>>2];B=s[j+8>>2];f=s[x+8>>2];D=s[e+8>>2];o[d+172>>2]=0;g=v(v(A+v(B+v(f+D)))*v(.25));F=v(g+v(v(f-g)*v(.800000011920929)));s[d+160>>2]=F;f=v(v(y+v(z+v(h+t)))*v(.25));G=v(f+v(v(h-f)*v(.800000011920929)));s[d+168>>2]=G;h=v(v(n+v(q+v(r+w)))*v(.25));r=v(h+v(v(r-h)*v(.800000011920929)));s[d+164>>2]=r;o[d+44>>2]=0;t=v(f+v(v(t-f)*v(.800000011920929)));s[d+40>>2]=t;w=v(h+v(v(w-h)*v(.800000011920929)));s[d+36>>2]=w;D=v(g+v(v(D-g)*v(.800000011920929)));s[d+32>>2]=D;o[d+28>>2]=0;z=v(f+v(v(z-f)*v(.800000011920929)));s[d+24>>2]=z;q=v(h+v(v(q-h)*v(.800000011920929)));s[d+20>>2]=q;B=v(g+v(v(B-g)*v(.800000011920929)));s[d+16>>2]=B;l[o[o[b>>2]+28>>2]](b,d+160|0,d+32|0,d+16|0,d+48|0,v(1));o[d+172>>2]=0;s[d+168>>2]=G;s[d+164>>2]=r;s[d+160>>2]=F;o[d+44>>2]=0;s[d+40>>2]=t;s[d+36>>2]=w;s[d+32>>2]=D;o[d+28>>2]=0;f=v(f+v(v(y-f)*v(.800000011920929)));s[d+24>>2]=f;h=v(h+v(v(n-h)*v(.800000011920929)));s[d+20>>2]=h;g=v(g+v(v(A-g)*v(.800000011920929)));s[d+16>>2]=g;l[o[o[b>>2]+28>>2]](b,d+160|0,d+32|0,d+16|0,d+48|0,v(1));o[d+172>>2]=0;s[d+168>>2]=t;s[d+164>>2]=w;s[d+160>>2]=D;o[d+44>>2]=0;s[d+40>>2]=z;s[d+36>>2]=q;s[d+32>>2]=B;o[d+28>>2]=0;s[d+24>>2]=f;s[d+20>>2]=h;s[d+16>>2]=g;l[o[o[b>>2]+28>>2]](b,d+160|0,d+32|0,d+16|0,d+48|0,v(1));o[d+172>>2]=0;s[d+168>>2]=z;s[d+164>>2]=q;s[d+160>>2]=B;o[d+44>>2]=0;s[d+40>>2]=G;s[d+36>>2]=r;s[d+32>>2]=F;o[d+28>>2]=0;s[d+24>>2]=f;s[d+20>>2]=h;s[d+16>>2]=g;l[o[o[b>>2]+28>>2]](b,d+160|0,d+32|0,d+16|0,d+48|0,v(1));i=o[a+772>>2]}k=k+1|0;if((k|0)<(i|0)){continue}break}}i:{if(!(c&64)){break i}if(o[a+792>>2]>=1){i=0;while(1){j=o[a+800>>2]+u(i,96)|0;e=o[j+20>>2];n=s[e+52>>2];q=s[e+12>>2];r=s[e+8>>2];w=s[e+4>>2];y=s[e+56>>2];z=s[e+28>>2];t=s[e+20>>2];A=s[e+24>>2];B=s[e+60>>2];g=s[j+12>>2];D=s[e+44>>2];f=s[j+4>>2];F=s[e+36>>2];h=s[j+8>>2];G=s[e+40>>2];o[d+44>>2]=0;s[d+40>>2]=B+v(v(v(f*F)+v(h*G))+v(g*D));s[d+36>>2]=y+v(v(v(f*t)+v(h*A))+v(g*z));s[d+32>>2]=n+v(v(v(f*w)+v(h*r))+v(g*q));e=o[j>>2];o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=1065353216;o[d+20>>2]=0;g=s[e+8>>2];f=s[e+12>>2];h=s[e+16>>2];o[d+60>>2]=0;s[d+56>>2]=h;s[d+52>>2]=f;s[d+48>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=g+v(.25);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);g=s[e+12>>2];f=s[e+8>>2];h=s[e+16>>2];o[d+60>>2]=0;s[d+56>>2]=h;s[d+48>>2]=f;s[d+52>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=g+v(.25);s[d+160>>2]=f+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);g=s[e+16>>2];f=s[e+8>>2];h=s[e+12>>2];o[d+60>>2]=0;s[d+52>>2]=h;s[d+48>>2]=f;s[d+56>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=g+v(.25);s[d+164>>2]=h+v(0);s[d+160>>2]=f+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=1065353216;o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g;f=s[d+36>>2];s[d+52>>2]=f;h=s[d+32>>2];s[d+48>>2]=h+v(-.25);o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(.25);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g;f=s[d+36>>2];s[d+52>>2]=f+v(-.25);h=s[d+32>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(.25);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g+v(-.25);f=s[d+36>>2];s[d+52>>2]=f;h=s[d+32>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(.25);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+16|0);e=o[j>>2];o[d+56>>2]=1065353216;o[d+60>>2]=0;o[d+48>>2]=1065353216;o[d+52>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,e+8|0,d+32|0,d+48|0);i=i+1|0;if((i|0)<o[a+792>>2]){continue}break}}i=o[a+712>>2];if((i|0)<1){break i}k=0;while(1){e=o[a+720>>2]+u(k,104)|0;if(!(!(m[o[e+4>>2]+16|0]&1)|s[e+88>>2]<=v(0)^1)){o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=1065353216;o[d+36>>2]=0;g=s[e+8>>2];f=s[e+12>>2];h=s[e+16>>2];o[d+60>>2]=0;s[d+56>>2]=h;s[d+52>>2]=f;s[d+48>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=g+v(.25);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);g=s[e+12>>2];f=s[e+8>>2];h=s[e+16>>2];o[d+60>>2]=0;s[d+56>>2]=h;s[d+48>>2]=f;s[d+52>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=h+v(0);s[d+164>>2]=g+v(.25);s[d+160>>2]=f+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);g=s[e+16>>2];f=s[e+8>>2];h=s[e+12>>2];o[d+60>>2]=0;s[d+52>>2]=h;s[d+48>>2]=f;s[d+56>>2]=g+v(-.25);o[d+172>>2]=0;s[d+168>>2]=g+v(.25);s[d+164>>2]=h+v(0);s[d+160>>2]=f+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d+32|0);i=o[a+712>>2]}k=k+1|0;if((k|0)<(i|0)){continue}break}}if(!(!(c&128)|o[a+692>>2]<1)){i=0;while(1){e=o[a+700>>2]+u(i,60)|0;j=o[e+20>>2];o[d+56>>2]=o[e+16>>2];o[d+60>>2]=j;j=o[e+12>>2];o[d+48>>2]=o[e+8>>2];o[d+52>>2]=j;x=o[e+24>>2];if((x|0)>=1){k=0;g=s[d+56>>2];f=s[d+52>>2];h=s[d+48>>2];while(1){E=e+(k<<2)|0;j=o[E+28>>2];q=s[j+12>>2];r=s[j+16>>2];n=s[E+44>>2];h=v(v(s[j+8>>2]*n)+h);s[d+48>>2]=h;g=v(v(n*r)+g);s[d+56>>2]=g;f=v(v(n*q)+f);s[d+52>>2]=f;k=k+1|0;if((x|0)!=(k|0)){continue}break}}l[o[o[b>>2]+40>>2]](b,d+48|0,o[e+4>>2]);i=i+1|0;if((i|0)<o[a+692>>2]){continue}break}}if(c&512){e=o[a+928>>2];o[d+56>>2]=1065353216;o[d+60>>2]=0;o[d+48>>2]=1065353216;o[d+52>>2]=0;o[d+168>>2]=1065353216;o[d+172>>2]=0;o[d+160>>2]=1065353216;o[d+164>>2]=1065353216;nb(b,e,0,d+48|0,d+160|0,0,-1)}if(c&1024){e=o[a+988>>2];o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=1065353216;o[d+168>>2]=0;o[d+172>>2]=0;o[d+160>>2]=1065353216;o[d+164>>2]=0;nb(b,e,0,d+48|0,d+160|0,0,-1)}if(c&2048){e=o[a+1048>>2];o[d+56>>2]=1065353216;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=1065353216;o[d+168>>2]=0;o[d+172>>2]=0;o[d+160>>2]=1065353216;o[d+164>>2]=0;nb(b,e,0,d+48|0,d+160|0,0,-1)}if(!(!(c&4096)|o[a+852>>2]<1)){i=0;while(1){j:{k:{l:{c=o[o[a+860>>2]+(i<<2)>>2];switch(l[o[o[c>>2]+20>>2]](c)|0){case 1:break k;case 0:break l;default:break j}}j=c+4|0;e=Ja(j);n=s[e+52>>2];q=s[e+16>>2];r=s[e+20>>2];w=s[e+24>>2];y=s[e+56>>2];z=s[e+32>>2];t=s[e+36>>2];A=s[e+40>>2];B=s[e+48>>2];D=s[e>>2];F=s[e+4>>2];g=s[c+32>>2];G=s[e+8>>2];f=s[c+36>>2];h=s[c+28>>2];o[d+44>>2]=0;s[d+32>>2]=B+v(v(v(h*D)+v(g*F))+v(f*G));s[d+40>>2]=y+v(v(v(h*z)+v(g*t))+v(f*A));s[d+36>>2]=n+v(v(v(h*q)+v(g*r))+v(f*w));k=c+16|0;e=Ja(k);n=s[e+52>>2];q=s[e+24>>2];r=s[e+20>>2];w=s[e+16>>2];y=s[e+56>>2];z=s[e+40>>2];t=s[e+36>>2];A=s[e+32>>2];B=s[e+48>>2];D=s[e+8>>2];g=s[c+52>>2];F=s[e>>2];f=s[c+44>>2];G=s[e+4>>2];h=s[c+48>>2];o[d+28>>2]=0;s[d+16>>2]=B+v(v(v(f*F)+v(h*G))+v(g*D));s[d+24>>2]=y+v(v(v(f*A)+v(h*t))+v(g*z));s[d+20>>2]=n+v(v(v(f*w)+v(h*r))+v(g*q));c=Ja(j);o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=1065353216;o[d+52>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,c+48|0,d+32|0,d+48|0);c=Ja(k);o[d+56>>2]=1065353216;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,c+48|0,d+16|0,d+48|0);o[d+8>>2]=0;o[d+12>>2]=0;o[d>>2]=1065353216;o[d+4>>2]=1065353216;o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g;f=s[d+36>>2];s[d+52>>2]=f;h=s[d+32>>2];s[d+48>>2]=h+v(-.25);o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(.25);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g;f=s[d+36>>2];s[d+52>>2]=f+v(-.25);h=s[d+32>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(.25);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);o[d+60>>2]=0;g=s[d+40>>2];s[d+56>>2]=g+v(-.25);f=s[d+36>>2];s[d+52>>2]=f;h=s[d+32>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(.25);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);o[d+8>>2]=1065353216;o[d+12>>2]=0;o[d>>2]=0;o[d+4>>2]=1065353216;o[d+60>>2]=0;g=s[d+24>>2];s[d+56>>2]=g;f=s[d+20>>2];s[d+52>>2]=f;h=s[d+16>>2];s[d+48>>2]=h+v(-.25);o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(.25);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);o[d+60>>2]=0;g=s[d+24>>2];s[d+56>>2]=g;f=s[d+20>>2];s[d+52>>2]=f+v(-.25);h=s[d+16>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(0);s[d+164>>2]=f+v(.25);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);o[d+60>>2]=0;g=s[d+24>>2];s[d+56>>2]=g+v(-.25);f=s[d+20>>2];s[d+52>>2]=f;h=s[d+16>>2];s[d+48>>2]=h;o[d+172>>2]=0;s[d+168>>2]=g+v(.25);s[d+164>>2]=f+v(0);s[d+160>>2]=h+v(0);l[o[o[b>>2]+8>>2]](b,d+48|0,d+160|0,d);break j}j=c+4|0;e=Ja(j);k=o[e+60>>2];o[d+56>>2]=o[e+56>>2];o[d+60>>2]=k;k=o[e+52>>2];o[d+48>>2]=o[e+48>>2];o[d+52>>2]=k;k=c+16|0;e=Ja(k);x=o[e+60>>2];o[d+168>>2]=o[e+56>>2];o[d+172>>2]=x;x=o[e+52>>2];o[d+160>>2]=o[e+48>>2];o[d+164>>2]=x;e=Ja(j);w=s[e+16>>2];y=s[e+20>>2];z=s[e+24>>2];t=s[e+32>>2];A=s[e+36>>2];B=s[e+40>>2];D=s[e>>2];g=s[c+32>>2];F=s[e+4>>2];f=s[c+36>>2];G=s[e+8>>2];h=s[c+28>>2];e=Ja(k);O=s[e+8>>2];P=s[e>>2];Q=s[e+4>>2];R=s[e+24>>2];S=s[e+20>>2];T=s[e+16>>2];n=s[c+52>>2];U=s[e+40>>2];q=s[c+48>>2];V=s[e+36>>2];J=s[e+32>>2];r=s[c+44>>2];o[d+44>>2]=0;D=v(v(v(v(D*h)+v(F*g))+v(G*f))*v(10));s[d+32>>2]=D+s[d+48>>2];t=v(v(v(v(h*t)+v(g*A))+v(f*B))*v(10));s[d+40>>2]=t+s[d+56>>2];g=v(v(v(v(h*w)+v(g*y))+v(f*z))*v(10));s[d+36>>2]=g+s[d+52>>2];o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=1065353216;o[d+20>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+48|0,d+32|0,d+16|0);o[d+44>>2]=0;f=v(v(v(v(r*J)+v(q*V))+v(n*U))*v(10));s[d+40>>2]=f+s[d+56>>2];h=v(v(v(v(r*T)+v(q*S))+v(n*R))*v(10));s[d+36>>2]=h+s[d+52>>2];n=v(v(v(v(P*r)+v(Q*q))+v(O*n))*v(10));s[d+32>>2]=n+s[d+48>>2];o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=1065353216;o[d+20>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+48|0,d+32|0,d+16|0);o[d+44>>2]=0;s[d+40>>2]=t+s[d+168>>2];s[d+36>>2]=g+s[d+164>>2];s[d+32>>2]=D+s[d+160>>2];o[d+24>>2]=1065353216;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+160|0,d+32|0,d+16|0);o[d+44>>2]=0;s[d+40>>2]=f+s[d+168>>2];s[d+36>>2]=h+s[d+164>>2];s[d+32>>2]=n+s[d+160>>2];o[d+24>>2]=1065353216;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,d+160|0,d+32|0,d+16|0)}i=i+1|0;if((i|0)<o[a+852>>2]){continue}break}}M=d+176|0}function ND(a,b){var c=0,d=0,e=0,f=0,g=v(0),h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=0,t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=0,O=v(0),P=0,Q=v(0),R=v(0);c=M-176|0;M=c;d=l[o[o[a>>2]+20>>2]](a)|0;i=l[o[o[d>>2]+48>>2]](d)|0;d=l[o[o[a>>2]+20>>2]](a)|0;d=l[o[o[d>>2]+48>>2]](d)|0;L=s[b+40>>2];a:{if(L<=v(0)){break a}e=i&2048;N=d&4096;b:{switch(o[b+4>>2]+ -3|0){case 0:o[c+124>>2]=0;o[c+128>>2]=0;o[c+136>>2]=0;o[c+140>>2]=0;o[c+132>>2]=1065353216;o[c+156>>2]=0;o[c+160>>2]=0;o[c+152>>2]=1065353216;o[c+164>>2]=0;o[c+168>>2]=0;o[c+172>>2]=0;o[c+116>>2]=0;o[c+120>>2]=0;o[c+112>>2]=1065353216;o[c+144>>2]=0;o[c+148>>2]=0;d=o[b+28>>2];I=s[d+52>>2];t=s[d+8>>2];C=s[d+12>>2];D=s[d+56>>2];F=s[d+28>>2];k=s[d+20>>2];m=s[d+24>>2];n=s[d+60>>2];E=s[b+308>>2];j=s[d+44>>2];G=s[b+300>>2];q=s[d+36>>2];H=s[b+304>>2];g=s[d+40>>2];h=s[d+4>>2];o[c+172>>2]=0;s[c+168>>2]=n+v(v(v(G*q)+v(H*g))+v(E*j));s[c+164>>2]=D+v(v(v(G*k)+v(H*m))+v(E*F));s[c+160>>2]=I+v(v(v(G*h)+v(H*t))+v(E*C));d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);d=o[b+32>>2];I=s[d+52>>2];t=s[d+8>>2];C=s[d+12>>2];D=s[d+56>>2];F=s[d+28>>2];k=s[d+20>>2];m=s[d+24>>2];n=s[d+60>>2];E=s[b+324>>2];j=s[d+44>>2];G=s[b+316>>2];q=s[d+36>>2];H=s[b+320>>2];g=s[d+40>>2];h=s[d+4>>2];o[c+172>>2]=0;s[c+168>>2]=n+v(v(v(G*q)+v(H*g))+v(E*j));s[c+164>>2]=D+v(v(v(G*k)+v(H*m))+v(E*F));s[c+160>>2]=I+v(v(v(G*h)+v(H*t))+v(E*C));if(!e){break a}a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+56>>2]](a,c+112|0,L);break a;case 1:d=o[b+28>>2];q=s[d+52>>2];w=s[d+8>>2];x=s[d+12>>2];E=s[b+584>>2];G=s[b+552>>2];H=s[b+568>>2];g=s[d+56>>2];h=s[d+60>>2];I=s[b+608>>2];t=s[b+600>>2];C=s[b+604>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];D=s[b+588>>2];F=s[b+556>>2];k=s[b+572>>2];m=s[b+592>>2];A=s[d+44>>2];n=s[b+560>>2];B=s[d+36>>2];j=s[b+576>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+168>>2]=h+v(v(v(B*t)+v(J*C))+v(A*I));s[c+164>>2]=g+v(v(v(y*t)+v(z*C))+v(u*I));o[c+124>>2]=0;s[c+144>>2]=v(v(G*B)+v(H*J))+v(E*A);s[c+128>>2]=v(v(G*y)+v(H*z))+v(E*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(G*K)+v(H*w))+v(E*x);s[c+160>>2]=q+v(v(v(K*t)+v(w*C))+v(x*I));c:{if(e){d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);d=o[b+32>>2];q=s[d+52>>2];g=s[d+56>>2];h=s[d+60>>2];E=s[b+672>>2];G=s[b+664>>2];H=s[b+668>>2];w=s[d+8>>2];x=s[d+12>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];I=s[b+648>>2];t=s[b+616>>2];C=s[b+632>>2];D=s[b+652>>2];F=s[b+620>>2];k=s[b+636>>2];m=s[b+656>>2];A=s[d+44>>2];n=s[b+624>>2];B=s[d+36>>2];j=s[b+640>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+144>>2]=v(v(t*B)+v(C*J))+v(I*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+128>>2]=v(v(t*y)+v(C*z))+v(I*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(t*K)+v(C*w))+v(I*x);s[c+168>>2]=h+v(v(v(B*G)+v(J*H))+v(A*E));s[c+164>>2]=g+v(v(v(y*G)+v(z*H))+v(u*E));s[c+160>>2]=q+v(v(v(K*G)+v(w*H))+v(x*E));d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);break c}d=o[b+32>>2];q=s[d+52>>2];g=s[d+56>>2];h=s[d+60>>2];E=s[b+672>>2];G=s[b+664>>2];H=s[b+668>>2];w=s[d+8>>2];x=s[d+12>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];I=s[b+648>>2];t=s[b+616>>2];C=s[b+632>>2];D=s[b+652>>2];F=s[b+620>>2];k=s[b+636>>2];m=s[b+656>>2];A=s[d+44>>2];n=s[b+624>>2];B=s[d+36>>2];j=s[b+640>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+144>>2]=v(v(t*B)+v(C*J))+v(I*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+128>>2]=v(v(t*y)+v(C*z))+v(I*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(t*K)+v(C*w))+v(I*x);s[c+168>>2]=h+v(v(v(B*G)+v(J*H))+v(A*E));s[c+164>>2]=g+v(v(v(y*G)+v(z*H))+v(u*E));s[c+160>>2]=q+v(v(v(K*G)+v(w*H))+v(x*E))}b=b+688|0;g=Jd(b);h=Kd(b);if(!N|g==h){break a}o[c+96>>2]=o[c+120>>2];o[c+100>>2]=o[c+136>>2];o[c+108>>2]=0;o[c+104>>2]=o[c+152>>2];o[c+80>>2]=o[c+112>>2];o[c+84>>2]=o[c+128>>2];o[c+92>>2]=0;o[c+88>>2]=o[c+144>>2];b=l[o[o[a>>2]+20>>2]](a)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+64>>2]=0;o[c+68>>2]=0;a=g>h;l[o[o[b>>2]+60>>2]](b,c+160|0,c+96|0,c+80|0,L,L,a?v(0):g,a?v(6.2831854820251465):h,c- -64|0,a^1,v(10));break a;case 2:d=o[b+28>>2];q=s[d+52>>2];w=s[d+8>>2];x=s[d+12>>2];E=s[b+332>>2];G=s[b+300>>2];H=s[b+316>>2];g=s[d+56>>2];h=s[d+60>>2];I=s[b+356>>2];t=s[b+348>>2];C=s[b+352>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];D=s[b+336>>2];F=s[b+304>>2];k=s[b+320>>2];m=s[b+340>>2];A=s[d+44>>2];n=s[b+308>>2];B=s[d+36>>2];j=s[b+324>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+168>>2]=h+v(v(v(B*t)+v(J*C))+v(A*I));s[c+164>>2]=g+v(v(v(y*t)+v(z*C))+v(u*I));o[c+124>>2]=0;s[c+144>>2]=v(v(G*B)+v(H*J))+v(E*A);s[c+128>>2]=v(v(G*y)+v(H*z))+v(E*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(G*K)+v(H*w))+v(E*x);s[c+160>>2]=q+v(v(v(K*t)+v(w*C))+v(x*I));d:{if(e){d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);d=o[b+32>>2];q=s[d+52>>2];g=s[d+56>>2];h=s[d+60>>2];E=s[b+420>>2];G=s[b+412>>2];H=s[b+416>>2];w=s[d+8>>2];x=s[d+12>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];I=s[b+396>>2];t=s[b+364>>2];C=s[b+380>>2];D=s[b+400>>2];F=s[b+368>>2];k=s[b+384>>2];m=s[b+404>>2];A=s[d+44>>2];n=s[b+372>>2];B=s[d+36>>2];j=s[b+388>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+144>>2]=v(v(t*B)+v(C*J))+v(I*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+128>>2]=v(v(t*y)+v(C*z))+v(I*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(t*K)+v(C*w))+v(I*x);s[c+168>>2]=h+v(v(v(B*G)+v(J*H))+v(A*E));s[c+164>>2]=g+v(v(v(y*G)+v(z*H))+v(u*E));s[c+160>>2]=q+v(v(v(K*G)+v(w*H))+v(x*E));d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);break d}d=o[b+32>>2];q=s[d+52>>2];g=s[d+56>>2];h=s[d+60>>2];E=s[b+420>>2];G=s[b+412>>2];H=s[b+416>>2];w=s[d+8>>2];x=s[d+12>>2];u=s[d+28>>2];y=s[d+20>>2];z=s[d+24>>2];I=s[b+396>>2];t=s[b+364>>2];C=s[b+380>>2];D=s[b+400>>2];F=s[b+368>>2];k=s[b+384>>2];m=s[b+404>>2];A=s[d+44>>2];n=s[b+372>>2];B=s[d+36>>2];j=s[b+388>>2];J=s[d+40>>2];K=s[d+4>>2];o[c+172>>2]=0;o[c+156>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;s[c+152>>2]=v(v(n*B)+v(j*J))+v(m*A);s[c+148>>2]=v(v(F*B)+v(k*J))+v(D*A);s[c+144>>2]=v(v(t*B)+v(C*J))+v(I*A);s[c+136>>2]=v(v(n*y)+v(j*z))+v(m*u);s[c+132>>2]=v(v(F*y)+v(k*z))+v(D*u);s[c+128>>2]=v(v(t*y)+v(C*z))+v(I*u);s[c+120>>2]=v(v(K*n)+v(w*j))+v(x*m);s[c+116>>2]=v(v(K*F)+v(w*k))+v(x*D);s[c+112>>2]=v(v(t*K)+v(C*w))+v(I*x);s[c+168>>2]=h+v(v(v(B*G)+v(J*H))+v(A*E));s[c+164>>2]=g+v(v(v(y*G)+v(z*H))+v(u*E));s[c+160>>2]=q+v(v(v(K*G)+v(w*H))+v(x*E))}if(!N){break a}oj(c+96|0,b,v(6.0868353843688965),L);o[c+108>>2]=0;q=s[c+96>>2];g=s[c+100>>2];h=s[c+104>>2];s[c+104>>2]=v(v(v(q*s[c+144>>2])+v(g*s[c+148>>2]))+v(h*s[c+152>>2]))+s[c+168>>2];s[c+100>>2]=v(v(v(q*s[c+128>>2])+v(g*s[c+132>>2]))+v(h*s[c+136>>2]))+s[c+164>>2];s[c+96>>2]=v(v(v(q*s[c+112>>2])+v(g*s[c+116>>2]))+v(h*s[c+120>>2]))+s[c+160>>2];d=c+160|0;while(1){oj(c+80|0,b,v(v(v(r|0)*v(6.283185005187988))*v(.03125)),L);o[c+92>>2]=0;q=s[c+80>>2];g=s[c+84>>2];h=s[c+88>>2];s[c+88>>2]=v(v(v(q*s[c+144>>2])+v(g*s[c+148>>2]))+v(h*s[c+152>>2]))+s[c+168>>2];s[c+84>>2]=v(v(v(q*s[c+128>>2])+v(g*s[c+132>>2]))+v(h*s[c+136>>2]))+s[c+164>>2];s[c+80>>2]=v(v(v(q*s[c+112>>2])+v(g*s[c+116>>2]))+v(h*s[c+120>>2]))+s[c+160>>2];i=l[o[o[a>>2]+20>>2]](a)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+64>>2]=0;o[c+68>>2]=0;l[o[o[i>>2]+8>>2]](i,c+96|0,c+80|0,c- -64|0);if(!(r&3)){i=l[o[o[a>>2]+20>>2]](a)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+64>>2]=0;o[c+68>>2]=0;l[o[o[i>>2]+8>>2]](i,d,c+80|0,c- -64|0)}i=o[c+92>>2];o[c+104>>2]=o[c+88>>2];o[c+108>>2]=i;i=o[c+84>>2];o[c+96>>2]=o[c+80>>2];o[c+100>>2]=i;r=r+1|0;if((r|0)!=32){continue}break}J=s[b+512>>2];K=s[b+452>>2];r=o[b+32>>2];e:{if(s[r+344>>2]>v(0)){O=s[r+36>>2];g=s[b+412>>2];t=s[r+40>>2];h=s[b+416>>2];E=v(v(O*g)+v(t*h));w=s[r+20>>2];x=s[r+24>>2];u=s[r+28>>2];C=s[b+420>>2];G=v(v(v(w*g)+v(x*h))+v(u*C));y=s[r+4>>2];z=s[r+8>>2];A=s[r+12>>2];H=v(v(v(y*g)+v(z*h))+v(A*C));D=s[b+372>>2];F=s[b+388>>2];k=s[b+404>>2];B=s[r+44>>2];I=v(v(v(D*O)+v(F*t))+v(k*B));m=s[b+368>>2];n=s[b+384>>2];j=s[b+400>>2];Q=v(v(v(m*O)+v(n*t))+v(j*B));q=s[b+364>>2];g=s[b+380>>2];h=s[b+396>>2];R=v(v(v(q*O)+v(g*t))+v(h*B));t=v(v(v(D*w)+v(F*x))+v(k*u));O=v(v(v(m*w)+v(n*x))+v(j*u));u=v(v(v(q*w)+v(g*x))+v(h*u));k=v(v(v(y*D)+v(z*F))+v(A*k));m=v(v(v(y*m)+v(z*n))+v(A*j));n=v(v(v(q*y)+v(g*z))+v(h*A));j=v(B*C);break e}r=o[b+28>>2];O=s[r+36>>2];g=s[b+348>>2];t=s[r+40>>2];h=s[b+352>>2];E=v(v(O*g)+v(t*h));w=s[r+20>>2];x=s[r+24>>2];u=s[r+28>>2];C=s[b+356>>2];G=v(v(v(w*g)+v(x*h))+v(u*C));y=s[r+4>>2];z=s[r+8>>2];A=s[r+12>>2];H=v(v(v(y*g)+v(z*h))+v(A*C));D=s[b+308>>2];F=s[b+324>>2];k=s[b+340>>2];B=s[r+44>>2];I=v(v(v(D*O)+v(F*t))+v(k*B));m=s[b+304>>2];n=s[b+320>>2];j=s[b+336>>2];Q=v(v(v(m*O)+v(n*t))+v(j*B));q=s[b+300>>2];g=s[b+316>>2];h=s[b+332>>2];R=v(v(v(q*O)+v(g*t))+v(h*B));t=v(v(v(D*w)+v(F*x))+v(k*u));O=v(v(v(m*w)+v(n*x))+v(j*u));u=v(v(v(q*w)+v(g*x))+v(h*u));k=v(v(v(y*D)+v(z*F))+v(A*k));m=v(v(v(y*m)+v(z*n))+v(A*j));n=v(v(v(q*y)+v(g*z))+v(h*A));j=v(B*C)}q=s[r+52>>2];g=s[r+56>>2];h=s[r+60>>2];o[c+172>>2]=0;o[c+156>>2]=0;s[c+152>>2]=I;s[c+148>>2]=Q;s[c+144>>2]=R;o[c+140>>2]=0;s[c+136>>2]=t;s[c+132>>2]=O;s[c+128>>2]=u;o[c+124>>2]=0;s[c+120>>2]=k;s[c+116>>2]=m;s[c+112>>2]=n;s[c+168>>2]=h+v(E+j);s[c+164>>2]=G+g;s[c+160>>2]=q+H;b=o[d+12>>2];o[c+88>>2]=o[d+8>>2];o[c+92>>2]=b;b=o[d+4>>2];o[c+80>>2]=o[d>>2];o[c+84>>2]=b;o[c+76>>2]=0;s[c+72>>2]=R;s[c+68>>2]=u;s[c+64>>2]=n;o[c+60>>2]=0;s[c+56>>2]=Q;s[c+52>>2]=O;s[c+48>>2]=m;a=l[o[o[a>>2]+20>>2]](a)|0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;l[o[o[a>>2]+60>>2]](a,c+80|0,c- -64|0,c+48|0,L,L,v(v(-J)-K),v(K-J),c+32|0,1,v(10));break a;case 3:case 6:i=b+1072|0;d=o[i+4>>2];o[c+120>>2]=o[i>>2];o[c+124>>2]=d;P=b+1064|0;i=P;d=o[i+4>>2];o[c+112>>2]=o[i>>2];o[c+116>>2]=d;i=b+1088|0;d=o[i+4>>2];o[c+136>>2]=o[i>>2];o[c+140>>2]=d;r=b+1080|0;i=r;d=o[i+4>>2];o[c+128>>2]=o[i>>2];o[c+132>>2]=d;i=b+1104|0;d=o[i+4>>2];o[c+152>>2]=o[i>>2];o[c+156>>2]=d;i=b+1096|0;f=i;d=o[f+4>>2];o[c+144>>2]=o[f>>2];o[c+148>>2]=d;f=b+1120|0;d=o[f+4>>2];o[c+168>>2]=o[f>>2];o[c+172>>2]=d;d=b+1112|0;f=o[d+4>>2];o[c+160>>2]=o[d>>2];o[c+164>>2]=f;f:{if(e){f=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[f>>2]+56>>2]](f,c+112|0,L);e=b+1136|0;f=o[e+4>>2];o[c+120>>2]=o[e>>2];o[c+124>>2]=f;e=b+1128|0;f=o[e+4>>2];o[c+112>>2]=o[e>>2];o[c+116>>2]=f;e=b+1152|0;f=o[e+4>>2];o[c+136>>2]=o[e>>2];o[c+140>>2]=f;e=b+1144|0;f=o[e+4>>2];o[c+128>>2]=o[e>>2];o[c+132>>2]=f;e=b+1168|0;f=o[e+4>>2];o[c+152>>2]=o[e>>2];o[c+156>>2]=f;e=b+1160|0;f=o[e+4>>2];o[c+144>>2]=o[e>>2];o[c+148>>2]=f;e=b+1184|0;f=o[e+4>>2];o[c+168>>2]=o[e>>2];o[c+172>>2]=f;e=b+1176|0;f=o[e+4>>2];o[c+160>>2]=o[e>>2];o[c+164>>2]=f;f=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[f>>2]+56>>2]](f,c+112|0,L);break f}e=b+1136|0;f=o[e+4>>2];o[c+120>>2]=o[e>>2];o[c+124>>2]=f;e=b+1128|0;f=o[e+4>>2];o[c+112>>2]=o[e>>2];o[c+116>>2]=f;e=b+1152|0;f=o[e+4>>2];o[c+136>>2]=o[e>>2];o[c+140>>2]=f;e=b+1144|0;f=o[e+4>>2];o[c+128>>2]=o[e>>2];o[c+132>>2]=f;e=b+1168|0;f=o[e+4>>2];o[c+152>>2]=o[e>>2];o[c+156>>2]=f;e=b+1160|0;f=o[e+4>>2];o[c+144>>2]=o[e>>2];o[c+148>>2]=f;e=b+1184|0;f=o[e+4>>2];o[c+168>>2]=o[e>>2];o[c+172>>2]=f;e=b+1176|0;f=o[e+4>>2];o[c+160>>2]=o[e>>2];o[c+164>>2]=f}if(!N){break a}f=P;e=o[f+12>>2];o[c+120>>2]=o[f+8>>2];o[c+124>>2]=e;e=o[f+4>>2];o[c+112>>2]=o[f>>2];o[c+116>>2]=e;f=r;e=o[f+12>>2];o[c+136>>2]=o[f+8>>2];o[c+140>>2]=e;e=o[f+4>>2];o[c+128>>2]=o[f>>2];o[c+132>>2]=e;f=i;e=o[f+12>>2];o[c+152>>2]=o[f+8>>2];o[c+156>>2]=e;e=o[f+4>>2];o[c+144>>2]=o[f>>2];o[c+148>>2]=e;e=o[d+12>>2];o[c+168>>2]=o[d+8>>2];o[c+172>>2]=e;e=o[d+4>>2];o[c+160>>2]=o[d>>2];o[c+164>>2]=e;o[c+96>>2]=o[c+120>>2];o[c+100>>2]=o[c+136>>2];o[c+108>>2]=0;o[c+104>>2]=o[c+152>>2];o[c+80>>2]=o[c+112>>2];o[c+84>>2]=o[c+128>>2];o[c+92>>2]=0;o[c+88>>2]=o[c+144>>2];j=s[b+1e3>>2];q=s[b+996>>2];g=s[b+936>>2];h=s[b+932>>2];f=l[o[o[a>>2]+20>>2]](a)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+64>>2]=0;o[c+68>>2]=0;N=b+1176|0;l[o[o[f>>2]+64>>2]](f,N,c+96|0,c+80|0,v(L*v(.8999999761581421)),h,g,q,j,c- -64|0,v(10),1);o[c+92>>2]=0;o[c+88>>2]=o[c+148>>2];o[c+84>>2]=o[c+132>>2];o[c+80>>2]=o[c+116>>2];g=s[b+1196>>2];k=s[c+80>>2];h=s[b+1200>>2];m=qa(h);n=s[c+84>>2];j=ra(h);s[c+68>>2]=v(n*j)-v(m*k);q=qa(g);h=s[c+88>>2];g=ra(g);s[c+72>>2]=v(v(k*v(j*q))+v(n*v(q*m)))+v(h*g);s[c+64>>2]=v(v(k*v(g*j))+v(n*v(g*m)))-v(q*h);e=b+1136|0;f=o[e+4>>2];o[c+120>>2]=o[e>>2];o[c+124>>2]=f;e=b+1128|0;f=o[e+4>>2];o[c+112>>2]=o[e>>2];o[c+116>>2]=f;e=b+1152|0;f=o[e+4>>2];o[c+136>>2]=o[e>>2];o[c+140>>2]=f;e=b+1144|0;f=o[e+4>>2];o[c+128>>2]=o[e>>2];o[c+132>>2]=f;e=b+1168|0;f=o[e+4>>2];o[c+152>>2]=o[e>>2];o[c+156>>2]=f;e=b+1160|0;f=o[e+4>>2];o[c+144>>2]=o[e>>2];o[c+148>>2]=f;f=o[N+4>>2];o[c+160>>2]=o[N>>2];o[c+164>>2]=f;e=b+1184|0;f=o[e+4>>2];o[c+168>>2]=o[e>>2];o[c+172>>2]=f;o[c+60>>2]=0;s[c+56>>2]=-s[c+144>>2];s[c+52>>2]=-s[c+128>>2];s[c+48>>2]=-s[c+112>>2];g=s[b+868>>2];h=s[b+872>>2];g:{if(!!(g>h)){f=l[o[o[a>>2]+20>>2]](a)|0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;l[o[o[f>>2]+60>>2]](f,N,c+48|0,c- -64|0,L,L,v(-3.1415927410125732),v(3.1415927410125732),c+32|0,0,v(10));break g}if(!(g<h)){break g}f=l[o[o[a>>2]+20>>2]](a)|0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;l[o[o[f>>2]+60>>2]](f,N,c+48|0,c- -64|0,L,L,g,h,c+32|0,1,v(10))}f=o[P+12>>2];o[c+120>>2]=o[P+8>>2];o[c+124>>2]=f;f=o[P+4>>2];o[c+112>>2]=o[P>>2];o[c+116>>2]=f;P=o[r+12>>2];o[c+136>>2]=o[r+8>>2];o[c+140>>2]=P;P=o[r+4>>2];o[c+128>>2]=o[r>>2];o[c+132>>2]=P;r=o[i+12>>2];o[c+152>>2]=o[i+8>>2];o[c+156>>2]=r;r=o[i+4>>2];o[c+144>>2]=o[i>>2];o[c+148>>2]=r;i=o[d+12>>2];o[c+168>>2]=o[d+8>>2];o[c+172>>2]=i;i=o[d+4>>2];o[c+160>>2]=o[d>>2];o[c+164>>2]=i;d=o[b+692>>2];o[c+40>>2]=o[b+688>>2];o[c+44>>2]=d;d=o[b+684>>2];o[c+32>>2]=o[b+680>>2];o[c+36>>2]=d;d=o[b+708>>2];o[c+24>>2]=o[b+704>>2];o[c+28>>2]=d;d=o[b+700>>2];o[c+16>>2]=o[b+696>>2];o[c+20>>2]=d;a=l[o[o[a>>2]+20>>2]](a)|0;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=0;o[c+4>>2]=0;l[o[o[a>>2]+72>>2]](a,c+32|0,c+16|0,c+112|0,c);break a;case 4:break b;default:break a}}d=o[b+836>>2];o[c+120>>2]=o[b+832>>2];o[c+124>>2]=d;r=b+824|0;i=r;d=o[i+4>>2];o[c+112>>2]=o[i>>2];o[c+116>>2]=d;d=o[b+852>>2];o[c+136>>2]=o[b+848>>2];o[c+140>>2]=d;d=o[b+844>>2];o[c+128>>2]=o[b+840>>2];o[c+132>>2]=d;d=o[b+868>>2];o[c+152>>2]=o[b+864>>2];o[c+156>>2]=d;d=o[b+860>>2];o[c+144>>2]=o[b+856>>2];o[c+148>>2]=d;d=o[b+884>>2];o[c+168>>2]=o[b+880>>2];o[c+172>>2]=d;d=o[b+876>>2];o[c+160>>2]=o[b+872>>2];o[c+164>>2]=d;h:{if(e){d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);d=o[b+900>>2];o[c+120>>2]=o[b+896>>2];o[c+124>>2]=d;d=o[b+892>>2];o[c+112>>2]=o[b+888>>2];o[c+116>>2]=d;d=o[b+916>>2];o[c+136>>2]=o[b+912>>2];o[c+140>>2]=d;d=o[b+908>>2];o[c+128>>2]=o[b+904>>2];o[c+132>>2]=d;d=o[b+932>>2];o[c+152>>2]=o[b+928>>2];o[c+156>>2]=d;d=o[b+924>>2];o[c+144>>2]=o[b+920>>2];o[c+148>>2]=d;d=o[b+948>>2];o[c+168>>2]=o[b+944>>2];o[c+172>>2]=d;d=o[b+940>>2];o[c+160>>2]=o[b+936>>2];o[c+164>>2]=d;d=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[d>>2]+56>>2]](d,c+112|0,L);break h}d=o[b+900>>2];o[c+120>>2]=o[b+896>>2];o[c+124>>2]=d;d=o[b+892>>2];o[c+112>>2]=o[b+888>>2];o[c+116>>2]=d;d=o[b+916>>2];o[c+136>>2]=o[b+912>>2];o[c+140>>2]=d;d=o[b+908>>2];o[c+128>>2]=o[b+904>>2];o[c+132>>2]=d;d=o[b+932>>2];o[c+152>>2]=o[b+928>>2];o[c+156>>2]=d;d=o[b+924>>2];o[c+144>>2]=o[b+920>>2];o[c+148>>2]=d;d=o[b+948>>2];o[c+168>>2]=o[b+944>>2];o[c+172>>2]=d;d=o[b+940>>2];o[c+160>>2]=o[b+936>>2];o[c+164>>2]=d}if(!N){break a}d=p[b+180|0];i=d?r:b+888|0;G=s[i+48>>2];F=s[i+8>>2];k=s[i+4>>2];e=o[i+4>>2];H=s[i+52>>2];j=s[i+24>>2];I=s[i+16>>2];f=o[i+16>>2];q=s[i+20>>2];P=o[i+20>>2];t=s[i+56>>2];g=s[i+40>>2];C=s[i+32>>2];r=o[i+32>>2];h=s[i+36>>2];i=o[i+36>>2];d=(d?824:888)+b|0;D=s[d>>2];d=o[d>>2];E=s[b+184>>2];o[c+108>>2]=0;m=v(g*v(0));n=v(h*v(0));s[c+104>>2]=t+v(m+v(n+v(E*C)));j=v(j*v(0));q=v(q*v(0));s[c+100>>2]=H+v(j+v(q+v(E*I)));g=v(F*v(0));h=v(k*v(0));s[c+96>>2]=G+v(g+v(h+v(E*D)));k=s[b+188>>2];o[c+92>>2]=0;s[c+88>>2]=t+v(m+v(n+v(k*C)));s[c+84>>2]=H+v(j+v(q+v(k*I)));s[c+80>>2]=G+v(g+v(h+v(k*D)));N=l[o[o[a>>2]+20>>2]](a)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+64>>2]=0;o[c+68>>2]=0;l[o[o[N>>2]+8>>2]](N,c+96|0,c+80|0,c- -64|0);o[c+76>>2]=0;o[c+72>>2]=r;o[c+68>>2]=f;o[c+64>>2]=d;o[c+60>>2]=0;o[c+56>>2]=i;o[c+52>>2]=P;o[c+48>>2]=e;g=s[b+196>>2];h=s[b+192>>2];a=l[o[o[a>>2]+20>>2]](a)|0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;l[o[o[a>>2]+60>>2]](a,b+936|0,c- -64|0,c+48|0,L,L,h,g,c+32|0,1,v(10))}M=c+176|0}function dC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=v(0),l=0,m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=0,fa=0,ga=0,ha=v(0),ia=v(0),ja=v(0);e=M-464|0;M=e;a:{if(!p[a+527|0]){break a}j=o[a+32>>2];l=o[a+28>>2];if(!p[a+524|0]){f=s[a+348>>2];g=s[a+352>>2];h=s[a+356>>2];i=s[l+56>>2];r=v(v(v(v(f*s[l+20>>2])+v(g*s[l+24>>2]))+v(h*s[l+28>>2]))+i);k=v(r-i);t=v(s[b+192>>2]+s[b+80>>2]);i=s[l+52>>2];z=v(v(v(v(f*s[l+4>>2])+v(g*s[l+8>>2]))+v(h*s[l+12>>2]))+i);n=v(z-i);A=v(s[b+196>>2]+s[b+84>>2]);i=s[a+412>>2];w=s[a+416>>2];m=s[a+420>>2];q=s[j+56>>2];D=v(v(v(v(i*s[j+20>>2])+v(w*s[j+24>>2]))+v(m*s[j+28>>2]))+q);q=v(D-q);F=v(s[c+192>>2]+s[c+80>>2]);x=s[j+52>>2];E=v(v(v(v(i*s[j+4>>2])+v(w*s[j+8>>2]))+v(m*s[j+12>>2]))+x);x=v(E-x);H=v(s[c+196>>2]+s[c+84>>2]);I=v(v(v(s[b+184>>2]+s[b+72>>2])+v(v(k*t)-v(n*A)))-v(v(s[c+184>>2]+s[c+72>>2])+v(v(q*F)-v(x*H))));J=v(s[b+200>>2]+s[b+88>>2]);h=v(v(v(f*s[l+36>>2])+v(g*s[l+40>>2]))+v(h*s[l+44>>2]));f=s[l+60>>2];g=v(h+f);y=v(g-f);f=v(s[c+200>>2]+s[c+88>>2]);h=s[j+60>>2];i=v(v(v(v(i*s[j+36>>2])+v(w*s[j+40>>2]))+v(m*s[j+44>>2]))+h);w=v(i-h);F=v(v(v(s[b+180>>2]+s[b+68>>2])+v(v(n*J)-v(y*t)))-v(v(s[c+180>>2]+s[c+68>>2])+v(v(x*f)-v(w*F))));A=v(v(v(s[b+176>>2]+s[b+64>>2])+v(v(y*A)-v(k*J)))-v(v(s[c+176>>2]+s[c+64>>2])+v(v(w*H)-v(q*f))));H=v(g-i);D=v(r-D);z=v(z-E);fa=o[c+240>>2];ga=o[b+240>>2];while(1){B=u(ea,84)+a|0;f=v(v(1)/s[B+128>>2]);g=s[B+48>>2];h=s[B+52>>2];i=s[B+56>>2];f=v(v(f*v(v(v(v(v(z*g)+v(D*h))+v(H*i))*v(-.30000001192092896))/d))-v(f*v(v(v(A*g)+v(F*h))+v(I*i))));s[a+36>>2]=s[a+36>>2]+f;g=s[B+48>>2];h=s[B+52>>2];i=s[B+56>>2];if(ga){E=s[l+304>>2];J=s[l+296>>2];K=s[l+300>>2];L=s[l+288>>2];Q=s[l+280>>2];G=s[l+284>>2];t=s[l+272>>2];r=s[l+264>>2];O=s[l+268>>2];m=s[l+344>>2];s[b+64>>2]=v(v(f*v(g*m))*s[b+112>>2])+s[b+64>>2];s[b+68>>2]=v(v(f*v(h*m))*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(v(f*v(i*m))*s[b+120>>2])+s[b+72>>2];m=v(v(k*i)-v(y*h));N=v(r*m);r=v(v(y*g)-v(n*i));P=t;t=v(v(n*h)-v(k*g));s[b+80>>2]=v(v(v(N+v(O*r))+v(P*t))*v(f*s[b+96>>2]))+s[b+80>>2];O=s[b+104>>2];s[b+84>>2]=v(v(v(v(m*Q)+v(r*G))+v(t*L))*v(f*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(v(v(v(m*J)+v(r*K))+v(t*E))*v(f*O))+s[b+88>>2]}if(fa){r=s[j+304>>2];t=s[j+296>>2];E=s[j+300>>2];J=s[j+288>>2];K=s[j+280>>2];L=s[j+284>>2];Q=s[j+272>>2];G=s[j+264>>2];O=s[j+268>>2];aa=s[B+56>>2];$=s[B+52>>2];m=s[j+344>>2];f=v(-f);s[c+64>>2]=v(s[c+112>>2]*v(v(m*s[B+48>>2])*f))+s[c+64>>2];s[c+68>>2]=v(v(v(m*$)*f)*s[c+116>>2])+s[c+68>>2];s[c+72>>2]=v(v(v(m*aa)*f)*s[c+120>>2])+s[c+72>>2];m=v(v(q*i)-v(w*h));i=v(v(w*g)-v(x*i));g=v(v(x*h)-v(q*g));s[c+80>>2]=v(v(v(v(G*m)+v(O*i))+v(Q*g))*v(s[c+96>>2]*f))+s[c+80>>2];h=s[c+104>>2];s[c+84>>2]=v(v(v(v(m*K)+v(i*L))+v(g*J))*v(s[c+100>>2]*f))+s[c+84>>2];s[c+88>>2]=v(v(v(v(m*t)+v(i*E))+v(g*r))*v(h*f))+s[c+88>>2]}ea=ea+1|0;if((ea|0)!=3){continue}break}}b:{if(p[a+552|0]){B=o[l+16>>2];o[e+384>>2]=o[l+12>>2];o[e+388>>2]=B;B=o[l+8>>2];o[e+376>>2]=o[l+4>>2];o[e+380>>2]=B;B=o[l+32>>2];o[e+400>>2]=o[l+28>>2];o[e+404>>2]=B;B=o[l+24>>2];o[e+392>>2]=o[l+20>>2];o[e+396>>2]=B;B=o[l+48>>2];o[e+416>>2]=o[l+44>>2];o[e+420>>2]=B;B=o[l+40>>2];o[e+408>>2]=o[l+36>>2];o[e+412>>2]=B;B=o[l+64>>2];o[e+432>>2]=o[l+60>>2];o[e+436>>2]=B;B=o[l+56>>2];o[e+424>>2]=o[l+52>>2];o[e+428>>2]=B;l=o[j+16>>2];o[e+320>>2]=o[j+12>>2];o[e+324>>2]=l;l=o[j+8>>2];o[e+312>>2]=o[j+4>>2];o[e+316>>2]=l;l=o[j+32>>2];o[e+336>>2]=o[j+28>>2];o[e+340>>2]=l;l=o[j+24>>2];o[e+328>>2]=o[j+20>>2];o[e+332>>2]=l;l=o[j+48>>2];o[e+352>>2]=o[j+44>>2];o[e+356>>2]=l;l=o[j+40>>2];o[e+344>>2]=o[j+36>>2];o[e+348>>2]=l;l=o[j+64>>2];o[e+368>>2]=o[j+60>>2];o[e+372>>2]=l;l=o[j+56>>2];o[e+360>>2]=o[j+52>>2];o[e+364>>2]=l;f=s[b+84>>2];g=s[b+196>>2];h=s[b+88>>2];i=s[b+200>>2];k=s[b+80>>2];n=s[b+192>>2];o[e+308>>2]=0;s[e+304>>2]=i+h;s[e+300>>2]=g+f;s[e+296>>2]=n+k;f=s[c+84>>2];g=s[c+196>>2];h=s[c+88>>2];i=s[c+200>>2];k=s[c+80>>2];n=s[c+192>>2];o[e+292>>2]=0;s[e+288>>2]=i+h;s[e+284>>2]=g+f;s[e+280>>2]=n+k;o[e+228>>2]=0;o[e+232>>2]=0;o[e+240>>2]=0;o[e+244>>2]=0;o[e+236>>2]=1065353216;o[e+260>>2]=0;o[e+264>>2]=0;o[e+256>>2]=1065353216;o[e+268>>2]=0;o[e+272>>2]=0;o[e+276>>2]=0;o[e+220>>2]=0;o[e+224>>2]=0;o[e+216>>2]=1065353216;o[e+248>>2]=0;o[e+252>>2]=0;o[e+208>>2]=0;o[e+212>>2]=0;o[e+200>>2]=0;o[e+204>>2]=0;rb(e+376|0,e+200|0,e+296|0,d,e+216|0);o[e+148>>2]=0;o[e+152>>2]=0;o[e+160>>2]=0;o[e+164>>2]=0;o[e+156>>2]=1065353216;o[e+180>>2]=0;o[e+184>>2]=0;o[e+176>>2]=1065353216;o[e+188>>2]=0;o[e+192>>2]=0;o[e+196>>2]=0;o[e+140>>2]=0;o[e+144>>2]=0;o[e+136>>2]=1065353216;o[e+168>>2]=0;o[e+172>>2]=0;rb(e+312|0,e+200|0,e+280|0,d,e+136|0);y=s[a+308>>2];r=s[a+304>>2];i=s[a+324>>2];n=s[a+316>>2];w=s[a+320>>2];m=s[a+404>>2];t=s[a+400>>2];z=s[a+396>>2];A=s[a+372>>2];D=s[a+368>>2];F=s[a+340>>2];E=s[a+332>>2];H=s[a+336>>2];I=s[a+388>>2];J=s[a+384>>2];K=s[a+380>>2];g=s[a+568>>2];k=s[a+564>>2];h=s[a+560>>2];ha=s[a+420>>2];P=s[a+412>>2];ia=s[a+416>>2];L=s[a+300>>2];O=s[a+356>>2];ja=s[a+352>>2];aa=s[a+348>>2];Q=s[a+364>>2];f=s[a+556>>2];o[e+132>>2]=0;o[e+116>>2]=0;o[e+100>>2]=0;x=v(v(2)/v(v(v(v(f*f)+v(h*h))+v(k*k))+v(g*g)));q=v(k*x);U=v(f*q);G=v(h*x);V=v(g*G);N=v(U-V);W=v(f*G);X=v(g*q);R=v(W+X);Y=v(h*G);G=v(k*q);k=v(v(1)-v(Y+G));$=v(v(A*N)+v(v(D*R)+v(Q*k)));Z=v(h*q);h=g;g=v(f*x);_=v(h*g);h=v(Z+_);q=v(W-X);f=v(f*g);x=v(v(1)-v(f+G));W=v(v(A*h)+v(v(Q*q)+v(D*x)));G=v(U+V);S=v(Z-_);T=v(v(1)-v(f+Y));U=v(v(v(Q*G)+v(D*S))+v(A*T));f=v(v(v(E*$)+v(H*W))+v(F*U));V=s[e+168>>2];X=v(v(N*I)+v(v(J*R)+v(K*k)));Y=v(v(h*I)+v(v(K*q)+v(J*x)));Z=v(v(v(K*G)+v(J*S))+v(I*T));g=v(v(v(E*X)+v(H*Y))+v(F*Z));_=s[e+172>>2];N=v(v(v(k*z)+v(R*t))+v(N*m));R=v(v(v(q*z)+v(x*t))+v(h*m));S=v(v(v(G*z)+v(S*t))+v(T*m));h=v(v(v(E*N)+v(H*R))+v(F*S));T=s[e+176>>2];s[e+112>>2]=v(v(f*V)+v(g*_))+v(h*T);q=v(v(v($*n)+v(W*w))+v(U*i));x=v(v(v(X*n)+v(Y*w))+v(Z*i));k=v(v(v(N*n)+v(R*w))+v(S*i));s[e+108>>2]=v(v(V*q)+v(_*x))+v(T*k);ba=s[e+152>>2];ca=s[e+156>>2];da=s[e+160>>2];s[e+96>>2]=v(v(f*ba)+v(g*ca))+v(h*da);s[e+92>>2]=v(v(q*ba)+v(x*ca))+v(k*da);G=v(0);A=v(P+v(v(v(Q*v(0))+v(D*v(0)))+v(A*v(0))));P=i;i=v(-ja);D=v(v(v(P*i)-v(y*aa))-v(F*O));n=v(v(v(n*i)-v(L*aa))-v(E*O));i=v(v(v(w*i)-v(r*aa))-v(H*O));w=v(A+v(v(U*D)+v(v($*n)+v(W*i))));A=v(v(ia+v(v(v(K*v(0))+v(J*v(0)))+v(I*v(0))))+v(v(Z*D)+v(v(X*n)+v(Y*i))));m=v(v(ha+v(v(v(z*v(0))+v(t*v(0)))+v(m*v(0))))+v(v(S*D)+v(v(N*n)+v(R*i))));J=v(v(v(v(V*w)+v(_*A))+v(T*m))+s[e+192>>2]);s[e+128>>2]=J;K=v(v(v(v(ba*w)+v(A*ca))+v(m*da))+s[e+188>>2]);s[e+124>>2]=K;o[e+84>>2]=0;n=v(v(v($*L)+v(W*r))+v(U*y));i=v(v(v(X*L)+v(Y*r))+v(Z*y));y=v(v(v(N*L)+v(R*r))+v(S*y));s[e+104>>2]=v(v(V*n)+v(_*i))+v(T*y);s[e+88>>2]=v(v(n*ba)+v(i*ca))+v(y*da);r=s[e+136>>2];t=s[e+140>>2];z=s[e+144>>2];s[e+80>>2]=v(v(f*r)+v(g*t))+v(h*z);s[e+76>>2]=v(v(q*r)+v(x*t))+v(k*z);s[e+72>>2]=v(v(n*r)+v(i*t))+v(y*z);L=v(v(v(z*m)+v(v(r*w)+v(t*A)))+s[e+184>>2]);s[e+120>>2]=L;o[e+68>>2]=0;o[e+52>>2]=0;o[e+36>>2]=0;r=s[e+248>>2];t=s[e+252>>2];z=s[e+256>>2];s[e+48>>2]=v(v(y*r)+v(k*t))+v(h*z);s[e+44>>2]=v(v(i*r)+v(x*t))+v(g*z);D=s[e+232>>2];F=s[e+236>>2];E=s[e+240>>2];s[e+32>>2]=v(v(y*D)+v(k*F))+v(h*E);s[e+28>>2]=v(v(i*D)+v(x*F))+v(g*E);A=v(-A);H=v(v(v(i*A)-v(n*w))-v(y*m));I=v(v(v(x*A)-v(q*w))-v(k*m));w=v(v(v(g*A)-v(f*w))-v(h*m));m=v(v(v(v(r*H)+v(t*I))+v(z*w))+s[e+272>>2]);s[e- -64>>2]=m;A=v(v(v(v(H*D)+v(I*F))+v(w*E))+s[e+268>>2]);s[e+60>>2]=A;o[e+20>>2]=0;s[e+40>>2]=v(v(n*r)+v(q*t))+v(f*z);s[e+24>>2]=v(v(n*D)+v(q*F))+v(f*E);t=y;y=s[e+216>>2];P=k;k=s[e+220>>2];E=h;h=s[e+224>>2];s[e+16>>2]=v(v(t*y)+v(P*k))+v(E*h);s[e+12>>2]=v(v(i*y)+v(x*k))+v(g*h);s[e+8>>2]=v(v(n*y)+v(q*k))+v(f*h);g=v(v(v(v(H*y)+v(I*k))+v(w*h))+s[e+264>>2]);s[e+56>>2]=g;o[e+212>>2]=0;f=v(v(1)/d);s[e+208>>2]=f*v(J-s[e+432>>2]);s[e+200>>2]=f*v(L-s[e+424>>2]);s[e+204>>2]=f*v(K-s[e+428>>2]);tb(e+376|0,e+72|0,e+448|0,e+444|0);o[e+212>>2]=0;s[e+208>>2]=f*v(m-s[e+368>>2]);s[e+204>>2]=f*v(A-s[e+364>>2]);s[e+200>>2]=f*v(g-s[e+360>>2]);q=s[e+452>>2];g=s[e+444>>2];t=s[e+456>>2];m=s[e+448>>2];tb(e+312|0,e+8|0,e+448|0,e+444|0);h=s[e+444>>2];x=v(v(f*v(h*s[e+456>>2]))-s[e+288>>2]);y=v(v(f*v(h*s[e+452>>2]))-s[e+284>>2]);w=v(v(f*v(s[e+448>>2]*h))-s[e+280>>2]);h=v(0);m=v(v(f*v(m*g))-s[e+296>>2]);r=v(v(f*v(g*q))-s[e+300>>2]);t=v(v(f*v(g*t))-s[e+304>>2]);f=v(v(v(m*m)+v(r*r))+v(t*t));if(!!(f>v(1.1920928955078125e-7))){f=v(v(1)/v(C(f)));n=v(m*f);j=o[a+28>>2];i=v(r*f);k=v(t*f);h=v(v(v(n*v(v(v(n*s[j+264>>2])+v(i*s[j+280>>2]))+v(k*s[j+296>>2])))+v(i*v(v(v(n*s[j+268>>2])+v(i*s[j+284>>2]))+v(k*s[j+300>>2]))))+v(k*v(v(v(n*s[j+272>>2])+v(i*s[j+288>>2]))+v(k*s[j+304>>2]))))}z=v(v(v(w*w)+v(y*y))+v(x*x));if(!!(z>v(1.1920928955078125e-7))){q=v(v(1)/v(C(z)));f=v(w*q);j=o[a+32>>2];g=v(y*q);q=v(x*q);G=v(v(v(f*v(v(v(f*s[j+264>>2])+v(g*s[j+280>>2]))+v(q*s[j+296>>2])))+v(g*v(v(v(f*s[j+268>>2])+v(g*s[j+284>>2]))+v(q*s[j+300>>2]))))+v(q*v(v(v(f*s[j+272>>2])+v(g*s[j+288>>2]))+v(q*s[j+304>>2]))))}f=v(v(h*n)+v(G*f));g=v(v(h*i)+v(G*g));h=v(v(h*k)+v(G*q));i=v(v(v(f*f)+v(g*g))+v(h*h));if(!(i>v(1.1920928955078125e-7))){break b}i=v(v(1)/v(C(i)));f=v(f*i);j=o[a+28>>2];g=v(g*i);h=v(h*i);n=v(v(v(f*v(v(v(f*s[j+264>>2])+v(g*s[j+280>>2]))+v(h*s[j+296>>2])))+v(g*v(v(v(f*s[j+268>>2])+v(g*s[j+284>>2]))+v(h*s[j+300>>2]))))+v(h*v(v(v(f*s[j+272>>2])+v(g*s[j+288>>2]))+v(h*s[j+304>>2]))));l=o[a+32>>2];g=v(v(v(f*v(v(v(f*s[l+264>>2])+v(g*s[l+280>>2]))+v(h*s[l+296>>2])))+v(g*v(v(v(f*s[l+268>>2])+v(g*s[l+284>>2]))+v(h*s[l+300>>2]))))+v(h*v(v(v(f*s[l+272>>2])+v(g*s[l+288>>2]))+v(h*s[l+304>>2]))));f=v(n+g);i=v(v(1)/v(f*f));f=v(v(v(t*n)-v(x*g))*i);h=v(v(v(r*n)-v(y*g))*i);g=v(v(v(m*n)-v(w*g))*i);x=s[a+572>>2];if(!!(x>=v(0))){y=s[a+576>>2];k=v(g+y);w=s[a+580>>2];q=v(h+w);m=s[a+584>>2];i=v(f+m);r=v(C(v(v(v(k*k)+v(q*q))+v(i*i))));n=p[a+553|0]?v(x/n):x;if(!!(r>n)){g=v(v(1)/r);f=v(v(n*v(i*g))-m);i=v(m+f);h=v(v(n*v(q*g))-w);q=v(w+h);g=v(v(n*v(k*g))-y);k=v(y+g)}s[a+584>>2]=i;s[a+580>>2]=q;s[a+576>>2]=k}i=f;f=v(C(v(v(v(g*g)+v(h*h))+v(f*f))));k=v(v(1)/f);i=v(i*k);h=v(h*k);g=v(g*k);if(o[b+240>>2]){n=s[j+304>>2];q=s[j+296>>2];x=s[j+300>>2];y=s[j+288>>2];w=s[j+280>>2];m=s[j+284>>2];r=s[j+272>>2];t=s[j+264>>2];z=s[j+268>>2];k=v(f*v(0));s[b+64>>2]=v(k*s[b+112>>2])+s[b+64>>2];s[b+68>>2]=v(k*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(k*s[b+120>>2])+s[b+72>>2];s[b+80>>2]=v(v(v(v(g*t)+v(h*z))+v(i*r))*v(f*s[b+96>>2]))+s[b+80>>2];k=s[b+104>>2];s[b+84>>2]=v(v(v(v(g*w)+v(h*m))+v(i*y))*v(f*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(v(v(v(g*q)+v(h*x))+v(i*n))*v(f*k))+s[b+88>>2]}if(!o[c+240>>2]){break b}n=s[l+304>>2];q=s[l+296>>2];x=s[l+300>>2];y=s[l+288>>2];w=s[l+280>>2];m=s[l+284>>2];r=s[l+272>>2];t=s[l+264>>2];z=s[l+268>>2];k=v(f*v(-0));s[c+64>>2]=v(k*s[c+112>>2])+s[c+64>>2];s[c+68>>2]=v(k*s[c+116>>2])+s[c+68>>2];s[c+72>>2]=v(k*s[c+120>>2])+s[c+72>>2];f=v(-f);s[c+80>>2]=v(v(v(v(g*t)+v(h*z))+v(i*r))*v(s[c+96>>2]*f))+s[c+80>>2];k=s[c+104>>2];s[c+84>>2]=v(v(v(v(g*w)+v(h*m))+v(i*y))*v(s[c+100>>2]*f))+s[c+84>>2];s[c+88>>2]=v(v(v(v(g*q)+v(h*x))+v(i*n))*v(k*f))+s[c+88>>2];break b}f=s[a+440>>2];if(!(f>v(1.1920928955078125e-7))){break b}q=s[b+80>>2];i=v(v(s[c+192>>2]+s[c+80>>2])-v(s[b+192>>2]+q));x=s[b+84>>2];k=v(v(s[c+196>>2]+s[c+84>>2])-v(s[b+196>>2]+x));y=s[b+88>>2];h=v(v(s[c+200>>2]+s[c+88>>2])-v(s[b+200>>2]+y));g=v(v(v(i*i)+v(k*k))+v(h*h));if(!(g>v(1.1920928955078125e-7))){break b}P=h;E=f;n=v(v(1)/v(C(g)));f=v(i*n);w=s[l+264>>2];g=v(k*n);m=s[l+280>>2];h=v(h*n);n=s[l+296>>2];r=s[l+268>>2];t=s[l+284>>2];z=s[l+300>>2];A=s[l+272>>2];D=s[l+288>>2];F=s[l+304>>2];f=v(E*v(v(1)/v(v(v(v(f*v(v(v(f*w)+v(g*m))+v(h*n)))+v(g*v(v(v(f*r)+v(g*t))+v(h*z))))+v(h*v(v(v(f*A)+v(g*D))+v(h*F))))+v(v(v(f*v(v(v(f*s[j+264>>2])+v(g*s[j+280>>2]))+v(h*s[j+296>>2])))+v(g*v(v(v(f*s[j+268>>2])+v(g*s[j+284>>2]))+v(h*s[j+300>>2]))))+v(h*v(v(v(f*s[j+272>>2])+v(g*s[j+288>>2]))+v(h*s[j+304>>2])))))));g=v(P*f);i=v(i*f);h=v(k*f);f=v(C(v(v(g*g)+v(v(i*i)+v(h*h)))));k=v(v(1)/f);g=v(g*k);h=v(h*k);i=v(i*k);if(o[b+240>>2]){k=v(f*v(0));s[b+64>>2]=v(k*s[b+112>>2])+s[b+64>>2];s[b+68>>2]=v(k*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(k*s[b+120>>2])+s[b+72>>2];s[b+88>>2]=y+v(v(v(v(i*n)+v(h*z))+v(g*F))*v(f*s[b+104>>2]));s[b+84>>2]=x+v(v(v(v(i*m)+v(h*t))+v(g*D))*v(f*s[b+100>>2]));s[b+80>>2]=q+v(v(v(v(i*w)+v(h*r))+v(g*A))*v(f*s[b+96>>2]))}if(!o[c+240>>2]){break b}n=s[j+304>>2];q=s[j+296>>2];x=s[j+300>>2];y=s[j+288>>2];w=s[j+280>>2];m=s[j+284>>2];r=s[j+272>>2];t=s[j+264>>2];z=s[j+268>>2];k=v(f*v(-0));s[c+64>>2]=v(k*s[c+112>>2])+s[c+64>>2];s[c+68>>2]=v(k*s[c+116>>2])+s[c+68>>2];s[c+72>>2]=v(k*s[c+120>>2])+s[c+72>>2];f=v(-f);s[c+80>>2]=v(v(v(v(i*t)+v(h*z))+v(g*r))*v(s[c+96>>2]*f))+s[c+80>>2];k=s[c+104>>2];s[c+84>>2]=v(v(v(v(i*w)+v(h*m))+v(g*y))*v(s[c+100>>2]*f))+s[c+84>>2];s[c+88>>2]=v(v(v(v(i*q)+v(h*x))+v(g*n))*v(k*f))+s[c+88>>2]}k=v(s[c+200>>2]+s[c+88>>2]);n=v(s[c+196>>2]+s[c+84>>2]);q=v(s[b+200>>2]+s[b+88>>2]);x=v(s[b+196>>2]+s[b+84>>2]);y=v(s[c+192>>2]+s[c+80>>2]);w=v(s[b+192>>2]+s[b+80>>2]);c:{if(!p[a+526|0]){break c}g=s[a+528>>2];f=v(v(v(g*s[a+504>>2])*s[a+432>>2])/d);h=s[a+460>>2];i=s[a+464>>2];m=s[a+468>>2];r=v(v(v(v(y-w)*h)+v(v(n-x)*i))+v(v(k-q)*m));if(!!(r>v(0))){f=v(f+v(v(g*r)*s[a+436>>2]))}g=s[a+516>>2];f=v(g+v(f*s[a+492>>2]));s[e+376>>2]=f;o[e+312>>2]=0;j=f>v(0)?e+376|0:e+312|0;f=s[j>>2];o[a+516>>2]=o[j>>2];f=v(f-g);g=v(m*f);h=v(h*f);m=s[a+536>>2];i=v(i*f);r=s[a+540>>2];t=s[a+544>>2];f=v(v(v(h*m)+v(i*r))+v(g*t));g=v(g-v(t*f));m=v(h-v(m*f));h=v(i-v(r*f));f=v(C(v(v(g*g)+v(v(m*m)+v(h*h)))));i=v(v(1)/f);g=v(g*i);h=v(h*i);i=v(m*i);if(o[b+240>>2]){j=o[a+28>>2];r=s[j+304>>2];t=s[j+296>>2];z=s[j+300>>2];A=s[j+288>>2];D=s[j+280>>2];F=s[j+284>>2];E=s[j+272>>2];H=s[j+268>>2];I=s[j+264>>2];m=v(f*v(0));s[b+64>>2]=v(m*s[b+112>>2])+s[b+64>>2];s[b+68>>2]=v(m*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(m*s[b+120>>2])+s[b+72>>2];s[b+80>>2]=v(v(v(v(i*I)+v(h*H))+v(g*E))*v(f*s[b+96>>2]))+s[b+80>>2];m=s[b+104>>2];s[b+84>>2]=v(v(v(v(i*D)+v(h*F))+v(g*A))*v(f*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(v(v(v(i*t)+v(h*z))+v(g*r))*v(f*m))+s[b+88>>2]}if(!o[c+240>>2]){break c}j=o[a+32>>2];r=s[j+304>>2];t=s[j+296>>2];z=s[j+300>>2];A=s[j+288>>2];D=s[j+280>>2];F=s[j+284>>2];E=s[j+272>>2];H=s[j+268>>2];I=s[j+264>>2];m=v(f*v(-0));s[c+64>>2]=v(m*s[c+112>>2])+s[c+64>>2];s[c+68>>2]=v(m*s[c+116>>2])+s[c+68>>2];s[c+72>>2]=v(m*s[c+120>>2])+s[c+72>>2];f=v(-f);s[c+80>>2]=v(v(v(v(i*I)+v(h*H))+v(g*E))*v(s[c+96>>2]*f))+s[c+80>>2];m=s[c+104>>2];s[c+84>>2]=v(v(v(v(i*D)+v(h*F))+v(g*A))*v(s[c+100>>2]*f))+s[c+84>>2];s[c+88>>2]=v(v(v(v(i*t)+v(h*z))+v(g*r))*v(m*f))+s[c+88>>2]}if(!p[a+525|0]){break a}i=s[a+532>>2];d=v(v(v(i*s[a+508>>2])*s[a+432>>2])/d);f=s[a+476>>2];h=s[a+480>>2];g=s[a+484>>2];k=v(v(v(v(y-w)*f)+v(v(n-x)*h))+v(v(k-q)*g));if(!!(k>v(0))){d=v(d+v(v(i*k)*s[a+436>>2]))}i=s[a+520>>2];d=v(i+v(d*s[a+496>>2]));s[e+376>>2]=d;o[e+312>>2]=0;j=d>v(0)?e+376|0:e+312|0;d=s[j>>2];o[a+520>>2]=o[j>>2];d=v(d-i);if(o[b+240>>2]){j=o[a+28>>2];k=s[j+304>>2];n=s[j+296>>2];q=s[j+300>>2];x=s[j+288>>2];y=s[j+280>>2];w=s[j+284>>2];m=s[j+272>>2];r=s[j+268>>2];t=s[j+264>>2];i=v(d*v(0));s[b+64>>2]=v(i*s[b+112>>2])+s[b+64>>2];s[b+68>>2]=v(i*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(i*s[b+120>>2])+s[b+72>>2];s[b+80>>2]=v(v(v(v(f*t)+v(h*r))+v(g*m))*v(d*s[b+96>>2]))+s[b+80>>2];i=s[b+104>>2];s[b+84>>2]=v(v(v(v(f*y)+v(h*w))+v(g*x))*v(d*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(v(v(v(f*n)+v(h*q))+v(g*k))*v(d*i))+s[b+88>>2];g=s[a+484>>2];h=s[a+480>>2];f=s[a+476>>2]}if(!o[c+240>>2]){break a}a=o[a+32>>2];k=s[a+304>>2];n=s[a+296>>2];q=s[a+300>>2];x=s[a+288>>2];y=s[a+280>>2];w=s[a+284>>2];m=s[a+272>>2];r=s[a+268>>2];t=s[a+264>>2];i=v(d*v(-0));s[c+64>>2]=v(i*s[c+112>>2])+s[c+64>>2];s[c+68>>2]=v(i*s[c+116>>2])+s[c+68>>2];s[c+72>>2]=v(i*s[c+120>>2])+s[c+72>>2];d=v(-d);s[c+80>>2]=v(v(v(v(f*t)+v(h*r))+v(g*m))*v(s[c+96>>2]*d))+s[c+80>>2];i=s[c+104>>2];s[c+84>>2]=v(v(v(v(f*y)+v(h*w))+v(g*x))*v(s[c+100>>2]*d))+s[c+84>>2];s[c+88>>2]=v(v(v(v(f*n)+v(h*q))+v(g*k))*v(i*d))+s[c+88>>2]}M=e+464|0}function zz(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0;j=M-96|0;M=j;ye(a,b,c);m[j+52|0]=1;o[j+48>>2]=0;m[j+72|0]=1;o[j+40>>2]=0;o[j+44>>2]=0;o[j+68>>2]=0;m[j+92|0]=1;o[j+60>>2]=0;o[j+64>>2]=0;o[j+88>>2]=0;o[j+80>>2]=0;o[j+84>>2]=0;o[j+28>>2]=0;m[j+32|0]=1;o[j+20>>2]=0;o[j+24>>2]=0;d=o[a+872>>2];o[b+292>>2]=d;a:{if(!d){o[b+260>>2]=0;break a}g=a+868|0;d=l[o[o[c>>2]+28>>2]](c,g)|0;o[b+260>>2]=d;if(!d){break a}i=o[b+292>>2];n=l[o[o[c>>2]+16>>2]](c,4,i)|0;if((i|0)>0){h=o[n+8>>2];while(1){d=h;e=o[o[a+880>>2]+(f<<2)>>2];k=0;b:{if(!e){break b}k=l[o[o[c>>2]+28>>2]](c,e)|0}o[d>>2]=k;if(!l[o[o[c>>2]+24>>2]](c,e)){k=l[o[o[c>>2]+16>>2]](c,16,1)|0;d=o[k+8>>2];o[d+12>>2]=o[e+16>>2];o[d+4>>2]=o[e+8>>2];o[d>>2]=o[e+4>>2];o[d+8>>2]=o[e+12>>2];l[o[o[c>>2]+20>>2]](c,k,21122,1414349395,e)}h=h+4|0;f=f+1|0;if((i|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,n,21122,1497453121,g)}d=o[a+712>>2];o[b+296>>2]=d;c:{if(!d){o[b+264>>2]=0;break c}k=a+708|0;d=l[o[o[c>>2]+28>>2]](c,k)|0;o[b+264>>2]=d;if(!d){break c}n=o[b+296>>2];g=l[o[o[c>>2]+16>>2]](c,100,n)|0;d=o[g+8>>2];h=0;o[j+12>>2]=0;if((n|0)>=1){while(1){i=o[a+720>>2];f=i+u(h,104)|0;o[d+52>>2]=o[f+56>>2];o[d+56>>2]=o[f+60>>2];o[d+60>>2]=o[f- -64>>2];o[d- -64>>2]=o[f+68>>2];o[d+88>>2]=o[f+92>>2];e=0;o[d+92>>2]=0-(m[f+100|0]&1);o[d+84>>2]=o[f+88>>2];f=o[f+4>>2];if(f){e=l[o[o[c>>2]+28>>2]](c,f)|0;i=o[a+720>>2];h=o[j+12>>2]}o[d>>2]=e;f=u(h,104)+i|0;o[d+68>>2]=o[f+72>>2];o[d+72>>2]=o[f+76>>2];o[d+76>>2]=o[f+80>>2];o[d+80>>2]=o[f+84>>2];o[d+4>>2]=o[f+8>>2];o[d+8>>2]=o[f+12>>2];o[d+12>>2]=o[f+16>>2];o[d+16>>2]=o[f+20>>2];o[d+20>>2]=o[f+24>>2];o[d+24>>2]=o[f+28>>2];o[d+28>>2]=o[f+32>>2];o[d+32>>2]=o[f+36>>2];o[d+36>>2]=o[f+40>>2];o[d+40>>2]=o[f+44>>2];o[d+44>>2]=o[f+48>>2];o[d+48>>2]=o[f+52>>2];o[j>>2]=f;yz(j+16|0,j,j+12|0);h=o[j+12>>2]+1|0;o[j+12>>2]=h;d=d+100|0;if((h|0)<(n|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,g,21143,1145979475,k)}d=o[a+732>>2];o[b+300>>2]=d;d:{if(!d){o[b+268>>2]=0;break d}d=l[o[o[c>>2]+28>>2]](c,o[a+740>>2])|0;o[b+268>>2]=d;if(!d){break d}e=o[b+300>>2];n=l[o[o[c>>2]+16>>2]](c,20,e)|0;i=o[a+740>>2];if((e|0)>=1){d=o[n+8>>2];f=0;while(1){k=u(f,52);g=k+i|0;o[d+16>>2]=0-(m[g+20|0]&1);h=0;g=o[g+4>>2];if(g){h=l[o[o[c>>2]+28>>2]](c,g)|0;i=o[a+740>>2]}o[d>>2]=h;h=d;k=i+k|0;g=o[k+8>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[h+4>>2]=g;h=d;g=o[k+12>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[h+8>>2]=g;o[d+12>>2]=o[k+16>>2];d=d+20|0;f=f+1|0;if((e|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,n,21160,1497453121,i)}d=o[a+752>>2];o[b+304>>2]=d;e:{if(!d){o[b+272>>2]=0;break e}d=l[o[o[c>>2]+28>>2]](c,o[a+760>>2])|0;o[b+272>>2]=d;if(!d){break e}n=o[b+304>>2];k=l[o[o[c>>2]+16>>2]](c,36,n)|0;i=o[a+760>>2];if((n|0)>=1){d=o[k+8>>2];h=0;while(1){f=0;e=u(h,44);g=o[(e+i|0)+4>>2];if(g){f=l[o[o[c>>2]+28>>2]](c,g)|0;i=o[a+760>>2]}o[d+16>>2]=f;e=e+i|0;o[d>>2]=o[e+20>>2];o[d+4>>2]=o[e+24>>2];o[d+8>>2]=o[e+28>>2];o[d+12>>2]=o[e+32>>2];f=d;g=o[e+8>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+20>>2]=g;f=d;g=o[e+12>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+24>>2]=g;f=d;q=o[e+16>>2];g=-1;f:{if(!q){break f}g=(q-o[a+720>>2]|0)/104|0}o[f+28>>2]=g;o[d+32>>2]=o[e+36>>2];d=d+36|0;h=h+1|0;if((n|0)!=(h|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,k,21177,1497453121,i)}d=o[a+772>>2];o[b+308>>2]=d;g:{if(!d){o[b+276>>2]=0;break g}d=l[o[o[c>>2]+28>>2]](c,o[a+780>>2])|0;o[b+276>>2]=d;if(!d){break g}i=0;n=o[b+308>>2];k=l[o[o[c>>2]+16>>2]](c,100,n)|0;h:{if((n|0)<=0){h=o[a+780>>2];break h}h=o[a+780>>2];d=o[k+8>>2];while(1){q=u(i,104);e=q+h|0;o[d>>2]=o[e+32>>2];o[d+4>>2]=o[e+36>>2];o[d+8>>2]=o[e+40>>2];o[d+12>>2]=o[e+44>>2];f=d;g=o[h+8>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+68>>2]=g;o[d+16>>2]=o[e+48>>2];o[d+20>>2]=o[e+52>>2];o[d+24>>2]=o[e+56>>2];o[d+28>>2]=o[e+60>>2];f=d;g=o[h+116>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+72>>2]=g;o[d+32>>2]=o[e- -64>>2];o[d+36>>2]=o[e+68>>2];o[d+40>>2]=o[e+72>>2];o[d+44>>2]=o[e+76>>2];f=d;g=o[h+224>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+76>>2]=g;o[d+48>>2]=o[e+80>>2];o[d+52>>2]=o[e+84>>2];o[d+56>>2]=o[e+88>>2];o[d+60>>2]=o[e+92>>2];f=d;g=o[h+332>>2];if(g){g=(g-o[a+720>>2]|0)/104|0}else{g=-1}o[f+80>>2]=g;o[d+88>>2]=o[e+96>>2];o[d+92>>2]=o[e+100>>2];f=o[e+4>>2];i:{if(f){f=l[o[o[c>>2]+28>>2]](c,f)|0;h=o[a+780>>2];break i}f=0}o[d+64>>2]=f;o[d+84>>2]=o[(h+q|0)+24>>2];d=d+100|0;i=i+1|0;if((n|0)!=(i|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,k,21194,1497453121,h)}d=o[a+792>>2];o[b+312>>2]=d;j:{if(!d){o[b+280>>2]=0;break j}d=l[o[o[c>>2]+28>>2]](c,o[a+800>>2])|0;o[b+280>>2]=d;if(!d){break j}i=o[b+312>>2];n=l[o[o[c>>2]+16>>2]](c,92,i)|0;f=o[a+800>>2];if((i|0)>=1){d=o[n+8>>2];h=0;while(1){e=u(h,96)+f|0;o[d>>2]=o[e+28>>2];o[d+4>>2]=o[e+32>>2];o[d+8>>2]=o[e+36>>2];o[d+12>>2]=o[e+40>>2];o[d+16>>2]=o[e+44>>2];o[d+20>>2]=o[e+48>>2];o[d+24>>2]=o[e+52>>2];o[d+28>>2]=o[e+56>>2];o[d+32>>2]=o[e+60>>2];o[d+36>>2]=o[e- -64>>2];o[d+40>>2]=o[e+68>>2];o[d+44>>2]=o[e+72>>2];o[d+48>>2]=o[e+76>>2];o[d+52>>2]=o[e+80>>2];o[d+56>>2]=o[e+84>>2];o[d+60>>2]=o[e+88>>2];o[d+88>>2]=o[e+92>>2];o[d+64>>2]=o[e+4>>2];o[d+68>>2]=o[e+8>>2];o[d+72>>2]=o[e+12>>2];o[d+76>>2]=o[e+16>>2];f=d;g=o[e>>2];k=-1;k:{if(!g){break k}k=(g-o[a+720>>2]|0)/104|0}o[f+84>>2]=k;f=d;e=o[e+20>>2];g=0;l:{if(!e){break l}g=l[o[o[c>>2]+28>>2]](c,e)|0}o[f+80>>2]=g;d=d+92|0;f=o[a+800>>2];h=h+1|0;if((i|0)!=(h|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,n,21212,1497453121,f)}o[b+352>>2]=o[a+316>>2];o[b+328>>2]=o[a+292>>2];o[b+344>>2]=o[a+308>>2];o[b+324>>2]=o[a+288>>2];o[b+340>>2]=o[a+304>>2];o[b+336>>2]=o[a+300>>2];o[b+412>>2]=o[a+376>>2];o[b+416>>2]=o[a+380>>2];o[b+420>>2]=o[a+384>>2];o[b+408>>2]=o[a+372>>2];d=o[a+364>>2];o[b+332>>2]=o[a+296>>2];o[b+356>>2]=o[a+320>>2];o[b+424>>2]=o[a+388>>2];o[b+348>>2]=o[a+312>>2];o[b+360>>2]=o[a+324>>2];o[b+364>>2]=o[a+328>>2];o[b+368>>2]=o[a+332>>2];o[b+372>>2]=o[a+336>>2];f=o[a+368>>2];o[b+400>>2]=d;o[b+404>>2]=f;o[b+376>>2]=o[a+340>>2];o[b+380>>2]=o[a+344>>2];o[b+384>>2]=o[a+348>>2];o[b+388>>2]=o[a+352>>2];o[b+392>>2]=o[a+356>>2];o[b+396>>2]=o[a+360>>2];g=a+472|0;o[b+256>>2]=l[o[o[c>>2]+28>>2]](c,g);q=l[o[o[c>>2]+16>>2]](c,192,1)|0;d=o[q+8>>2];o[d+96>>2]=o[a+632>>2];o[d+100>>2]=o[a+636>>2];o[d+104>>2]=o[a+640>>2];o[d+108>>2]=o[a+644>>2];o[d+112>>2]=o[a+648>>2];o[d+116>>2]=o[a+652>>2];o[d+120>>2]=o[a+656>>2];o[d+124>>2]=o[a+660>>2];o[d+128>>2]=o[a+664>>2];o[d+132>>2]=o[a+668>>2];o[d+136>>2]=o[a+672>>2];o[d+140>>2]=o[a+676>>2];o[d+180>>2]=p[a+473|0];o[d+176>>2]=p[a+472|0];o[d+144>>2]=o[a+520>>2];o[d+148>>2]=o[a+524>>2];o[d+152>>2]=o[a+528>>2];o[d+156>>2]=o[a+532>>2];f=o[a+484>>2];o[d+168>>2]=f;m:{if(!f){o[d+160>>2]=0;break m}o[d+160>>2]=l[o[o[c>>2]+28>>2]](c,o[a+492>>2]);h=o[d+168>>2];if(!h){break m}n=l[o[o[c>>2]+16>>2]](c,16,h)|0;k=o[a+492>>2];if((h|0)>=1){f=o[n+8>>2];i=0;while(1){e=k+(i<<4)|0;o[f>>2]=o[e>>2];o[f+4>>2]=o[e+4>>2];o[f+8>>2]=o[e+8>>2];o[f+12>>2]=o[e+12>>2];f=f+16|0;i=i+1|0;if((h|0)!=(i|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,n,21232,1497453121,k)}o[d+184>>2]=o[a+476>>2];o[d>>2]=o[a+536>>2];o[d+4>>2]=o[a+540>>2];o[d+8>>2]=o[a+544>>2];o[d+12>>2]=o[a+548>>2];o[d+16>>2]=o[a+552>>2];o[d+20>>2]=o[a+556>>2];o[d+24>>2]=o[a+560>>2];o[d+28>>2]=o[a+564>>2];o[d+32>>2]=o[a+568>>2];o[d+36>>2]=o[a+572>>2];o[d+40>>2]=o[a+576>>2];o[d+44>>2]=o[a+580>>2];o[d+48>>2]=o[a+584>>2];o[d+52>>2]=o[a+588>>2];o[d+56>>2]=o[a+592>>2];o[d+60>>2]=o[a+596>>2];o[d- -64>>2]=o[a+600>>2];o[d+68>>2]=o[a+604>>2];o[d+72>>2]=o[a+608>>2];o[d+76>>2]=o[a+612>>2];o[d+80>>2]=o[a+616>>2];o[d+84>>2]=o[a+620>>2];o[d+88>>2]=o[a+624>>2];o[d+92>>2]=o[a+628>>2];f=o[a+504>>2];o[d+172>>2]=f;n:{if(!f){o[d+164>>2]=0;break n}o[d+164>>2]=l[o[o[c>>2]+28>>2]](c,o[a+512>>2]);h=o[d+172>>2];if(!h){break n}e=l[o[o[c>>2]+16>>2]](c,4,h)|0;i=o[a+512>>2];if((h|0)>=1){d=o[e+8>>2];f=0;while(1){o[d>>2]=o[i+(f<<2)>>2];d=d+4|0;f=f+1|0;if((h|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,e,21251,1497453121,i)}l[o[o[c>>2]+20>>2]](c,q,21257,1497453121,g);d=o[a+1112>>2];o[b+316>>2]=d;o:{if(!d){o[b+284>>2]=0;break o}o[b+284>>2]=l[o[o[c>>2]+28>>2]](c,o[o[a+1120>>2]>>2]);n=o[b+316>>2];if(!n){break o}g=l[o[o[c>>2]+16>>2]](c,348,n)|0;d=o[a+1120>>2];if((n|0)>=1){e=o[g+8>>2];k=0;while(1){i=k<<2;d=o[i+d>>2];o[e+320>>2]=o[d+360>>2];o[e+256>>2]=o[d+332>>2];o[e+260>>2]=o[d+336>>2];o[e+264>>2]=o[d+340>>2];o[e+268>>2]=o[d+344>>2];o[e+344>>2]=o[d+380>>2];o[e+340>>2]=p[d+377|0];o[e+160>>2]=o[d+228>>2];o[e+164>>2]=o[d+232>>2];o[e+168>>2]=o[d+236>>2];o[e+172>>2]=o[d+240>>2];o[e+336>>2]=p[d+376|0];o[e+208>>2]=o[d+276>>2];o[e+212>>2]=o[d+280>>2];o[e+216>>2]=o[d+284>>2];o[e+220>>2]=o[d+288>>2];o[e+224>>2]=o[d+292>>2];o[e+228>>2]=o[d+296>>2];o[e+232>>2]=o[d+300>>2];o[e+236>>2]=o[d+304>>2];o[e>>2]=o[d+60>>2];o[e+4>>2]=o[d- -64>>2];o[e+8>>2]=o[d+68>>2];o[e+12>>2]=o[d+72>>2];o[e+16>>2]=o[d+76>>2];o[e+20>>2]=o[d+80>>2];o[e+24>>2]=o[d+84>>2];o[e+28>>2]=o[d+88>>2];o[e+32>>2]=o[d+92>>2];o[e+36>>2]=o[d+96>>2];o[e+40>>2]=o[d+100>>2];o[e+44>>2]=o[d+104>>2];o[e+48>>2]=o[d+108>>2];o[e+52>>2]=o[d+112>>2];o[e+56>>2]=o[d+116>>2];o[e+60>>2]=o[d+120>>2];o[e+296>>2]=o[d+124>>2];o[e+300>>2]=o[d+128>>2];o[e+112>>2]=o[d+180>>2];o[e+116>>2]=o[d+184>>2];o[e+120>>2]=o[d+188>>2];o[e+124>>2]=o[d+192>>2];o[e+128>>2]=o[d+196>>2];o[e+132>>2]=o[d+200>>2];o[e+136>>2]=o[d+204>>2];o[e+140>>2]=o[d+208>>2];o[e+144>>2]=o[d+212>>2];o[e+148>>2]=o[d+216>>2];o[e+152>>2]=o[d+220>>2];o[e+156>>2]=o[d+224>>2];o[e+316>>2]=o[d+356>>2];o[e+64>>2]=o[d+132>>2];o[e+68>>2]=o[d+136>>2];o[e+72>>2]=o[d+140>>2];o[e+76>>2]=o[d+144>>2];o[e+80>>2]=o[d+148>>2];o[e+84>>2]=o[d+152>>2];o[e+88>>2]=o[d+156>>2];o[e+92>>2]=o[d+160>>2];o[e+96>>2]=o[d+164>>2];o[e+100>>2]=o[d+168>>2];o[e+104>>2]=o[d+172>>2];o[e+108>>2]=o[d+176>>2];o[e+240>>2]=o[d+316>>2];o[e+244>>2]=o[d+320>>2];o[e+248>>2]=o[d+324>>2];o[e+252>>2]=o[d+328>>2];o[e+324>>2]=o[d+364>>2];o[e+328>>2]=o[d+368>>2];o[e+312>>2]=o[d+352>>2];o[e+316>>2]=o[d+356>>2];o[e+320>>2]=o[d+360>>2];o[e+332>>2]=o[d+372>>2];f=o[d+44>>2];o[e+284>>2]=f;o[e+292>>2]=o[d+4>>2];o[e+288>>2]=o[d+24>>2];o[e+304>>2]=o[d+308>>2];o[e+176>>2]=o[d+244>>2];o[e+180>>2]=o[d+248>>2];o[e+184>>2]=o[d+252>>2];o[e+188>>2]=o[d+256>>2];o[e+192>>2]=o[d+260>>2];o[e+196>>2]=o[d+264>>2];o[e+200>>2]=o[d+268>>2];o[e+204>>2]=o[d+272>>2];o[e+308>>2]=o[d+312>>2];p:{if(!f){o[e+272>>2]=0;break p}d=l[o[o[c>>2]+28>>2]](c,o[d+52>>2])|0;o[e+272>>2]=d;if(!d){break p}q=o[e+284>>2];r=l[o[o[c>>2]+16>>2]](c,16,q)|0;s=o[o[i+o[a+1120>>2]>>2]+52>>2];if((q|0)>=1){d=o[r+8>>2];h=0;while(1){f=s+(h<<4)|0;o[d>>2]=o[f>>2];o[d+4>>2]=o[f+4>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=o[f+12>>2];d=d+16|0;h=h+1|0;if((q|0)!=(h|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,r,21232,1497453121,s)}q:{if(!o[e+292>>2]){o[e+280>>2]=0;break q}d=l[o[o[c>>2]+28>>2]](c,o[o[i+o[a+1120>>2]>>2]+12>>2])|0;o[e+280>>2]=d;if(!d){break q}h=o[e+292>>2];q=l[o[o[c>>2]+16>>2]](c,4,h)|0;r=o[o[i+o[a+1120>>2]>>2]+12>>2];if((h|0)>=1){d=o[q+8>>2];f=0;while(1){o[d>>2]=o[r+(f<<2)>>2];d=d+4|0;f=f+1|0;if((h|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,q,21251,1497453121,r)}r:{if(!o[e+288>>2]){o[e+276>>2]=0;break r}d=l[o[o[c>>2]+28>>2]](c,o[i+o[a+1120>>2]>>2]+20|0)|0;o[e+276>>2]=d;if(!d){break r}q=o[e+292>>2];r=l[o[o[c>>2]+16>>2]](c,4,q)|0;s=o[i+o[a+1120>>2]>>2];if((q|0)>=1){v=o[s+32>>2];h=o[r+8>>2];f=0;w=o[j+68>>2];x=o[j+48>>2];t=o[j+88>>2];y=o[j+28>>2];while(1){i=o[(f<<2)+v>>2];d=(i<<15^-1)+i|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;d=o[((o[j+64>>2]+ -1&(d>>16^d))<<2)+y>>2];if(o[(d<<3)+t>>2]!=(i|0)){while(1){d=o[(d<<2)+x>>2];if((i|0)!=o[(d<<3)+t>>2]){continue}break}}o[h>>2]=o[(d<<2)+w>>2];h=h+4|0;f=f+1|0;if((q|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,r,21274,1497453121,s+20|0)}e=e+348|0;d=o[a+1120>>2];k=k+1|0;if((n|0)!=(k|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,g,21278,1497453121,o[d>>2])}d=o[a+852>>2];o[b+320>>2]=d;s:{if(!d){o[b+288>>2]=0;break s}d=b;b=l[o[o[c>>2]+28>>2]](c,o[a+860>>2])|0;o[d+288>>2]=b;if(!b){break s}n=o[a+852>>2];k=l[o[o[c>>2]+16>>2]](c,104,n)|0;i=o[a+860>>2];if((n|0)>=1){d=o[k+8>>2];e=0;while(1){h=e<<2;b=o[h+i>>2];o[d+96>>2]=l[o[o[b>>2]+20>>2]](b);f=h+o[a+860>>2]|0;b=o[f>>2];o[d+8>>2]=o[b+28>>2];o[d+12>>2]=o[b+32>>2];o[d+16>>2]=o[b+36>>2];o[d+20>>2]=o[b+40>>2];o[d+24>>2]=o[b+44>>2];o[d+28>>2]=o[b+48>>2];o[d+32>>2]=o[b+52>>2];o[d+36>>2]=o[b+56>>2];o[d+40>>2]=o[b+60>>2];o[d+44>>2]=o[b+64>>2];o[d+48>>2]=o[b+68>>2];b=p[b+152|0];o[d+56>>2]=0;o[d+60>>2]=0;o[d>>2]=0;o[d+4>>2]=0;o[d+52>>2]=b;b=d- -64|0;o[b>>2]=0;o[b+4>>2]=0;o[d+72>>2]=0;o[d+76>>2]=0;o[d+80>>2]=0;o[d+84>>2]=0;b=o[o[f>>2]+4>>2];if(b){o[d+88>>2]=1;o[d>>2]=l[o[o[c>>2]+28>>2]](c,b)}i=o[a+860>>2];f=o[h+i>>2];b=o[f+12>>2];if(b){o[d+88>>2]=3;o[d>>2]=l[o[o[c>>2]+28>>2]](c,b);i=o[a+860>>2];f=o[h+i>>2]}b=o[f+8>>2];if(b){o[d+88>>2]=2;o[d>>2]=l[o[o[c>>2]+28>>2]](c,b);i=o[a+860>>2];f=o[h+i>>2]}b=o[f+16>>2];if(b){o[d+92>>2]=1;o[d+4>>2]=l[o[o[c>>2]+28>>2]](c,b);i=o[a+860>>2];f=o[h+i>>2]}b=o[f+24>>2];if(b){o[d+92>>2]=3;o[d+4>>2]=l[o[o[c>>2]+28>>2]](c,b);i=o[a+860>>2];f=o[h+i>>2]}b=o[f+20>>2];if(b){o[d+92>>2]=2;o[d+4>>2]=l[o[o[c>>2]+28>>2]](c,b);i=o[a+860>>2]}d=d+104|0;e=e+1|0;if((n|0)!=(e|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,k,21298,1497453121,i)}a=o[j+88>>2];if(a){if(p[j+92|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[j+88>>2]=0}o[j+88>>2]=0;m[j+92|0]=1;o[j+80>>2]=0;o[j+84>>2]=0;a=o[j+68>>2];if(a){if(p[j+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[j+68>>2]=0}o[j+68>>2]=0;m[j+72|0]=1;o[j+60>>2]=0;o[j+64>>2]=0;a=o[j+48>>2];if(a){if(p[j+52|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[j+48>>2]=0}o[j+48>>2]=0;m[j+52|0]=1;o[j+40>>2]=0;o[j+44>>2]=0;a=o[j+28>>2];if(a){if(p[j+32|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[j+28>>2]=0}M=j+96|0;return 21318}function lH(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=v(0),r=0,t=v(0),w=v(0),x=0,y=0,z=v(0),A=0,B=v(0),D=0,E=0,F=0,G=v(0),H=v(0);c=M-240|0;M=c;d=o[a+52>>2];if(d){l[o[o[d>>2]>>2]](d)|0;d=o[a+52>>2];if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[7717]=o[7717]+1;d=l[o[6606]](132,16)|0;fI(d);o[a+52>>2]=d;o[c+228>>2]=0;o[c+220>>2]=0;o[c+224>>2]=0;m[c+232|0]=1;a:{if((l[o[o[a>>2]+96>>2]](a)|0)<1){break a}while(1){b:{if((f|0)!=(i|0)){d=h;break b}g=i?i<<1:1;if((i|0)>=(g|0)){d=h;break b}e=0;d=0;if(g){o[7717]=o[7717]+1;d=l[o[6606]](g<<4,16)|0}c:{d:{if((i|0)>=1){while(1){j=e<<4;r=j+d|0;k=r;j=h+j|0;x=o[j+4>>2];o[k>>2]=o[j>>2];o[k+4>>2]=x;k=o[j+12>>2];o[r+8>>2]=o[j+8>>2];o[r+12>>2]=k;e=e+1|0;if((i|0)!=(e|0)){continue}break d}}if(!h){break c}}if(p[c+232|0]){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}o[c+228>>2]=0}o[c+228>>2]=d;m[c+232|0]=1;o[c+224>>2]=g}o[c+220>>2]=f+1;g=o[c+156>>2];f=f<<4;d=f+d|0;o[d>>2]=o[c+152>>2];o[d+4>>2]=g;g=o[c+164>>2];o[d+8>>2]=o[c+160>>2];o[d+12>>2]=g;h=o[c+228>>2];l[o[o[a>>2]+108>>2]](a,n,f+h|0);n=n+1|0;if((n|0)>=(l[o[o[a>>2]+96>>2]](a)|0)){break a}i=o[c+224>>2];f=o[c+220>>2];continue}}m[c+188|0]=1;o[c+184>>2]=0;m[c+208|0]=1;o[c+176>>2]=0;o[c+180>>2]=0;o[c+204>>2]=0;o[c+196>>2]=0;o[c+200>>2]=0;o[c+164>>2]=0;m[c+168|0]=1;o[c+156>>2]=0;o[c+160>>2]=0;e:{if(!b){lf(c+152|0,h,o[c+220>>2]);break e}o[c+60>>2]=0;m[c+64|0]=1;o[c+52>>2]=0;o[c+56>>2]=0;wy(c+216|0,c+48|0);o[c+140>>2]=0;m[c+144|0]=1;o[c+132>>2]=0;o[c+136>>2]=0;if(o[c+52>>2]>=1){h=0;while(1){b=o[c+60>>2]+(h<<4)|0;o[c+112>>2]=o[b+8>>2];d=o[b+4>>2];o[c+104>>2]=o[b>>2];o[c+108>>2]=d;q=v(s[b+12>>2]-v(l[o[o[a>>2]+48>>2]](a)));i=o[c+132>>2];f:{if((i|0)!=o[c+136>>2]){break f}b=i?i<<1:1;if((i|0)>=(b|0)){break f}e=0;d=0;if(b){o[7717]=o[7717]+1;d=l[o[6606]](b<<4,16)|0;i=o[c+132>>2]}if((i|0)>=1){while(1){f=e<<4;g=f+d|0;f=f+o[c+140>>2]|0;r=o[f+4>>2];o[g>>2]=o[f>>2];o[g+4>>2]=r;j=o[f+12>>2];o[g+8>>2]=o[f+8>>2];o[g+12>>2]=j;e=e+1|0;if((i|0)!=(e|0)){continue}break}}f=o[c+140>>2];if(f){if(p[c+144|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[c+140>>2]=0}o[c+140>>2]=d;m[c+144|0]=1;o[c+136>>2]=b;i=o[c+132>>2]}d=o[c+108>>2];b=o[c+140>>2]+(i<<4)|0;o[b>>2]=o[c+104>>2];o[b+4>>2]=d;d=o[c+112>>2];s[b+12>>2]=q;o[b+8>>2]=d;o[c+132>>2]=o[c+132>>2]+1;h=h+1|0;if((h|0)<o[c+52>>2]){continue}break}}o[c+116>>2]=0;m[c+120|0]=1;o[c+108>>2]=0;o[c+112>>2]=0;vy(c+128|0,c+104|0);lf(c+152|0,o[c+116>>2],o[c+108>>2]);b=o[c+116>>2];if(b){if(p[c+120|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+116>>2]=0}b=o[c+140>>2];if(b){if(p[c+144|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+140>>2]=0}b=o[c+60>>2];if(!b){break e}if(p[c+64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+60>>2]=0}g=0;j=o[c+196>>2];if((j|0)>=1){e=0;o[7717]=o[7717]+1;D=l[o[6606]](j<<4,16)|0;while(1){f=o[c+52>>2];b=(e<<4)+D|0;d=b;o[d>>2]=o[c+48>>2];o[d+4>>2]=f;d=o[c+60>>2];o[b+8>>2]=o[c+56>>2];o[b+12>>2]=d;e=e+1|0;if((j|0)!=(e|0)){continue}break}}o[c+140>>2]=0;m[c+144|0]=1;o[c+132>>2]=0;o[c+136>>2]=0;m[c+63|0]=0;m[c+64|0]=0;m[c+65|0]=0;m[c+66|0]=0;o[c+56>>2]=0;o[c+60>>2]=0;o[c+48>>2]=0;o[c+52>>2]=0;g:{if((j|0)<=-1){d=j;while(1){b=u(d,36)+g|0;f=b;g=o[b+12>>2];if(g){if(p[b+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[f+12>>2]=0}m[b+16|0]=1;o[f+12>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;b=d+1|0;if(b>>>0<d>>>0){break g}g=o[c+140>>2];d=b;continue}}if(!j){break g}Ae(c+128|0,j);f=c+48|3;g=f;d=0;while(1){b=o[c+140>>2]+u(d,36)|0;o[b+4>>2]=0;o[b+8>>2]=0;m[b+16|0]=1;o[b+12>>2]=0;h=p[f+4|0]|p[f+5|0]<<8|(p[f+6|0]<<16|p[f+7|0]<<24);e=p[f|0]|p[f+1|0]<<8|(p[f+2|0]<<16|p[f+3|0]<<24);m[b+20|0]=e;m[b+21|0]=e>>>8;m[b+22|0]=e>>>16;m[b+23|0]=e>>>24;m[b+24|0]=h;m[b+25|0]=h>>>8;m[b+26|0]=h>>>16;m[b+27|0]=h>>>24;h=p[g+12|0]|p[g+13|0]<<8|(p[g+14|0]<<16|p[g+15|0]<<24);e=p[g+8|0]|p[g+9|0]<<8|(p[g+10|0]<<16|p[g+11|0]<<24);m[b+28|0]=e;m[b+29|0]=e>>>8;m[b+30|0]=e>>>16;m[b+31|0]=e>>>24;m[b+32|0]=h;m[b+33|0]=h>>>8;m[b+34|0]=h>>>16;m[b+35|0]=h>>>24;d=d+1|0;if((j|0)!=(d|0)){continue}break}}o[c+132>>2]=j;d=o[a+52>>2];e=o[d+8>>2];h=o[c+156>>2];if((e|0)<(h|0)){if(o[d+12>>2]<(h|0)){h:{if(!h){f=0;b=e;break h}o[7717]=o[7717]+1;f=l[o[6606]](h<<4,16)|0;b=o[d+8>>2]}if((b|0)>=1){g=0;while(1){i=g<<4;r=i+f|0;n=r;i=i+o[d+16>>2]|0;k=o[i+4>>2];o[n>>2]=o[i>>2];o[n+4>>2]=k;n=o[i+12>>2];o[r+8>>2]=o[i+8>>2];o[r+12>>2]=n;g=g+1|0;if((b|0)!=(g|0)){continue}break}}b=o[d+16>>2];if(b){if(p[d+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[d+16>>2]=0}o[d+16>>2]=f;o[d+12>>2]=h;m[d+20|0]=1}while(1){g=o[c+52>>2];b=o[d+16>>2]+(e<<4)|0;o[b>>2]=o[c+48>>2];o[b+4>>2]=g;f=o[c+60>>2];o[b+8>>2]=o[c+56>>2];o[b+12>>2]=f;e=e+1|0;if((h|0)!=(e|0)){continue}break}}o[d+8>>2]=h;e=0;if((h|0)>0){while(1){d=e<<4;b=d+o[o[a+52>>2]+16>>2]|0;d=d+o[c+164>>2]|0;f=o[d+4>>2];o[b>>2]=o[d>>2];o[b+4>>2]=f;f=o[d+12>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=f;e=e+1|0;if((h|0)!=(e|0)){continue}break}}if((j|0)>=1){b=0;while(1){f=0;A=o[c+184>>2]+u(o[o[c+204>>2]+(b<<2)>>2],12)|0;d=A;while(1){x=u(b,36);h=x+o[c+140>>2]|0;r=h;y=o[(u(o[d+4>>2],12)+d|0)+8>>2];g=o[h+4>>2];i:{if((g|0)!=o[h+8>>2]){break i}k=g?g<<1:1;if((g|0)>=(k|0)){break i}e=0;i=0;if(k){o[7717]=o[7717]+1;i=l[o[6606]](k<<2,16)|0;g=o[r+4>>2]}n=o[h+12>>2];j:{k:{if((g|0)>=1){while(1){E=e<<2;o[E+i>>2]=o[n+E>>2];e=e+1|0;if((e|0)!=(g|0)){continue}break k}}if(!n){break j}}if(p[h+16|0]){if(n){o[7718]=o[7718]+1;l[o[6607]](n)}}o[h+12>>2]=0;g=o[r+4>>2]}m[h+16|0]=1;o[h+12>>2]=i;o[h+8>>2]=k}o[o[h+12>>2]+(g<<2)>>2]=y;o[r+4>>2]=o[r+4>>2]+1;if((f|0)<=1){h=o[c+164>>2];g=h+(y<<4)|0;q=s[g+4>>2];h=h+(o[d+8>>2]<<4)|0;t=s[h+4>>2];w=s[g>>2];z=s[h>>2];B=s[g+8>>2];G=s[h+8>>2];g=(c+48|0)+(f<<4)|0;o[g+12>>2]=0;w=v(z-w);t=v(t-q);z=v(G-B);q=v(v(1)/v(C(v(v(v(w*w)+v(t*t))+v(z*z)))));s[g+8>>2]=z*q;s[g+4>>2]=t*q;s[g>>2]=w*q;f=f+1|0}else{f=2}d=u(o[d+4>>2],12)+d|0;d=u(o[d>>2],12)+d|0;if((A|0)!=(d|0)){continue}break}l:{if((f|0)==2){q=s[c+52>>2];w=s[c+68>>2];t=s[c+64>>2];z=s[c+56>>2];B=s[c+48>>2];G=s[c+72>>2];f=(b<<4)+D|0;o[f+12>>2]=0;H=v(v(w*B)-v(q*t));w=v(v(q*G)-v(z*w));t=v(v(z*t)-v(G*B));q=v(v(1)/v(C(v(v(H*H)+v(v(w*w)+v(t*t))))));s[f+8>>2]=H*q;s[f+4>>2]=t*q;q=v(w*q);s[f>>2]=q;d=o[c+140>>2];g=x+d|0;s[g+20>>2]=q;o[g+24>>2]=o[f+4>>2];f=o[f+8>>2];o[g+32>>2]=1900671690;o[g+28>>2]=f;break l}d=(b<<4)+D|0;o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;d=o[c+140>>2]}d=d+x|0;g=o[d+4>>2];m:{if((g|0)<1){q=v(1.0000000150474662e+30);break m}h=o[d+12>>2];f=(b<<4)+D|0;w=s[f+8>>2];t=s[f+4>>2];z=s[f>>2];i=o[o[a+52>>2]+16>>2];q=v(1.0000000150474662e+30);e=0;while(1){f=i+(o[h+(e<<2)>>2]<<4)|0;B=v(v(v(s[f>>2]*z)+v(s[f+4>>2]*t))+v(s[f+8>>2]*w));q=q>B?B:q;e=e+1|0;if((g|0)!=(e|0)){continue}break}}s[d+32>>2]=-q;b=b+1|0;if((j|0)!=(b|0)){continue}break}}j=0;n:{if(o[c+132>>2]>0){r=0;i=0;while(1){o:{if((i|0)!=(j|0)){break o}i=j?j<<1:1;if(j>>>0>=i>>>0){i=j;break o}e=0;o[7717]=o[7717]+1;b=l[o[6606]](i<<2,16)|0;p:{q:{if(j){while(1){d=e<<2;o[d+b>>2]=o[d+r>>2];e=e+1|0;if((j|0)!=(e|0)){continue}break q}}if(r){break q}i=1;break p}if(r){o[7718]=o[7718]+1;l[o[6607]](r)}}r=b}o[(j<<2)+r>>2]=j;j=j+1|0;if((j|0)<o[c+132>>2]){continue}break}while(1){f=j+ -1|0;b=o[(f<<2)+r>>2];o[7717]=o[7717]+1;d=l[o[6606]](4,16)|0;o[d>>2]=b;r:{s:{if((j|0)<2){i=1;b=d;j=f;break s}e=o[c+140>>2];b=e+u(b,36)|0;q=s[b+20>>2];w=s[b+28>>2];t=s[b+24>>2];h=j+ -2|0;g=1;j=f;i=1;while(1){n=o[(h<<2)+r>>2];b=u(n,36)+e|0;t:{if(!(v(v(v(q*s[b+20>>2])+v(t*s[b+24>>2]))+v(w*s[b+28>>2]))>v(.9990000128746033))){f=g;b=d;break t}u:{v:{if((g|0)!=(i|0)){break v}f=g?g<<1:1;if((g|0)>=(f|0)){break v}e=0;b=0;if(f){o[7717]=o[7717]+1;b=l[o[6606]](f<<2,16)|0}w:{if((g|0)>=1){while(1){k=e<<2;o[k+b>>2]=o[d+k>>2];e=e+1|0;if((e|0)!=(g|0)){continue}break w}}if(!d){break u}}if(d){o[7718]=o[7718]+1;l[o[6607]](d)}break u}f=g;b=d}o[(i<<2)+b>>2]=n;i=i+1|0;e=0;if((j|0)<1){break t}while(1){d=(e<<2)+r|0;if((n|0)!=o[d>>2]){e=e+1|0;if((j|0)!=(e|0)){continue}break t}break}if((e|0)>=(j|0)){break t}g=d;j=j+ -1|0;d=(j<<2)+r|0;o[g>>2]=o[d>>2];o[d>>2]=n}if((h|0)>=1){h=h+ -1|0;e=o[c+140>>2];d=b;g=f;continue}break}x:{if((i|0)<=1){break x}d=0;o[c+116>>2]=0;m[c+120|0]=1;o[c+108>>2]=0;o[c+112>>2]=0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;q=v(0);w=v(0);t=v(0);f=0;while(1){g=o[c+140>>2]+u(o[(f<<2)+b>>2],36)|0;z=s[g+24>>2];B=s[g+28>>2];s[c+32>>2]=s[g+20>>2]+t;s[c+40>>2]=B+q;s[c+36>>2]=z+w;h=o[g+4>>2];if((h|0)>=1){n=0;while(1){E=o[o[g+12>>2]+(n<<2)>>2];e=o[o[a+52>>2]+16>>2]+(E<<4)|0;k=o[e+12>>2];o[c+16>>2]=o[e+8>>2];o[c+20>>2]=k;k=o[e+4>>2];o[c+8>>2]=o[e>>2];o[c+12>>2]=k;y:{if((d|0)>=1){k=(d|0)>1?d:1;e=0;x=o[c+116>>2];while(1){if((E|0)==o[(x+u(e,24)|0)+20>>2]){break y}e=e+1|0;if((k|0)!=(e|0)){continue}break}}h=o[c+20>>2];o[c+56>>2]=o[c+16>>2];o[c+60>>2]=h;h=o[c+12>>2];o[c+48>>2]=o[c+8>>2];o[c+52>>2]=h;z:{if(o[c+112>>2]!=(d|0)){break z}A=d?d<<1:1;if((d|0)>=(A|0)){break z}e=0;h=0;if(A){o[7717]=o[7717]+1;h=l[o[6606]](u(A,24),16)|0;d=o[c+108>>2]}x=o[c+116>>2];A:{B:{if((d|0)>=1){while(1){k=u(e,24);y=k+h|0;k=k+x|0;F=o[k+4>>2];o[y>>2]=o[k>>2];o[y+4>>2]=F;F=o[k+20>>2];o[y+16>>2]=o[k+16>>2];o[y+20>>2]=F;F=o[k+12>>2];o[y+8>>2]=o[k+8>>2];o[y+12>>2]=F;e=e+1|0;if((e|0)!=(d|0)){continue}break B}}if(!x){break A}}if(p[c+120|0]){if(x){o[7718]=o[7718]+1;l[o[6607]](x)}d=o[c+108>>2]}o[c+116>>2]=0}o[c+116>>2]=h;m[c+120|0]=1;o[c+112>>2]=A}h=o[c+52>>2];d=o[c+116>>2]+u(d,24)|0;o[d>>2]=o[c+48>>2];o[d+4>>2]=h;h=o[c+60>>2];e=o[c+56>>2];k=o[c- -64>>2];o[d+20>>2]=E;o[d+16>>2]=k;o[d+8>>2]=e;o[d+12>>2]=h;d=o[c+108>>2]+1|0;o[c+108>>2]=d;h=o[g+4>>2]}n=n+1|0;if((n|0)<(h|0)){continue}break}}q=s[c+40>>2];w=s[c+36>>2];t=s[c+32>>2];f=f+1|0;if((i|0)!=(f|0)){continue}break}o[c+60>>2]=0;m[c+64|0]=1;o[c+52>>2]=0;o[c+56>>2]=0;d=o[c+140>>2]+u(o[b>>2],36)|0;o[c+68>>2]=o[d+20>>2];o[c+72>>2]=o[d+24>>2];o[c+76>>2]=o[d+28>>2];o[c+80>>2]=o[d+32>>2];z=t;t=v(v(1)/v(C(v(v(v(t*t)+v(w*w))+v(q*q)))));s[c+32>>2]=z*t;s[c+36>>2]=w*t;s[c+40>>2]=q*t;o[c+20>>2]=0;m[c+24|0]=1;o[c+12>>2]=0;o[c+16>>2]=0;kH(c+104|0,c+8|0,c+32|0);C:{if(o[c+12>>2]<=0){d=o[c+108>>2];break C}f=0;h=o[c+52>>2];while(1){k=u(f,24);x=k+o[c+20>>2]|0;D:{if(o[c+56>>2]!=(h|0)){break D}n=h?h<<1:1;if((h|0)>=(n|0)){break D}e=0;g=0;if(n){o[7717]=o[7717]+1;g=l[o[6606]](n<<2,16)|0;h=o[c+52>>2]}d=o[c+60>>2];E:{F:{if((h|0)>=1){while(1){y=e<<2;o[y+g>>2]=o[d+y>>2];e=e+1|0;if((h|0)!=(e|0)){continue}break F}}if(!d){break E}}if(p[c+64|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+60>>2]=0;h=o[c+52>>2]}o[c+60>>2]=g;m[c+64|0]=1;o[c+56>>2]=n}o[o[c+60>>2]+(h<<2)>>2]=o[x+20>>2];h=o[c+52>>2]+1|0;o[c+52>>2]=h;d=o[c+108>>2];G:{if((d|0)<1){break G}g=o[(k+o[c+20>>2]|0)+20>>2];e=0;n=o[c+116>>2];while(1){k=n+u(e,24)|0;if((g|0)!=o[k+20>>2]){e=e+1|0;if((e|0)!=(d|0)){continue}break G}break}o[k+20>>2]=-1}f=f+1|0;if((f|0)<o[c+12>>2]){continue}break}}if((d|0)>=1){n=0;h=o[c+140>>2];f=o[c+132>>2];k=o[c+116>>2];while(1){x=o[(k+u(n,24)|0)+20>>2];H:{if((x|0)==-1){break H}g=0;if((f|0)<1){break H}while(1){e=0;I:{if((i|0)>0){while(1){if(o[(e<<2)+b>>2]==(g|0)){break I}e=e+1|0;if((i|0)!=(e|0)){continue}break}}e=h+u(g,36)|0;y=o[e+4>>2];if((y|0)<1){break I}A=o[e+12>>2];e=0;while(1){if((x|0)!=o[A+(e<<2)>>2]){e=e+1|0;if((e|0)<(y|0)){continue}break I}break}d=o[c+20>>2];if(d){if(p[c+24|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+20>>2]=0}d=o[c+60>>2];if(d){if(p[c+64|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+60>>2]=0}d=o[c+116>>2];if(!d){break x}if(p[c+120|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+116>>2]=0;break x}g=g+1|0;if((f|0)!=(g|0)){continue}break}}n=n+1|0;if((n|0)!=(d|0)){continue}break}}Rk(o[a+52>>2]+24|0,c+48|0);d=o[c+20>>2];if(d){if(p[c+24|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+20>>2]=0}d=o[c+60>>2];if(d){if(p[c+64|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+60>>2]=0}d=o[c+116>>2];if(!d){break r}if(p[c+120|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+116>>2]=0;break r}if((i|0)<1){break r}}n=0;while(1){d=o[(n<<2)+b>>2];o[c+60>>2]=0;o[c+52>>2]=0;o[c+56>>2]=0;f=o[c+140>>2];m[c+64|0]=1;d=f+u(d,36)|0;f=o[d+4>>2];J:{if((f|0)>=1){o[7717]=o[7717]+1;k=f<<2;h=l[o[6606]](k,16)|0;e=0;g=o[c+60>>2];x=o[c+52>>2];K:{L:{if((x|0)>=1){while(1){y=e<<2;o[y+h>>2]=o[g+y>>2];e=e+1|0;if((x|0)!=(e|0)){continue}break L}}if(!g){break K}}if(!p[c+64|0]){break K}if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[c+60>>2]=h;m[c+64|0]=1;o[c+56>>2]=f;e=0;$(h,0,k);o[c+52>>2]=f;g=o[d+12>>2];h=o[c+60>>2];while(1){k=e<<2;o[k+h>>2]=o[g+k>>2];e=e+1|0;if((f|0)!=(e|0)){continue}break}break J}o[c+52>>2]=f}f=o[d+24>>2];o[c+68>>2]=o[d+20>>2];o[c+72>>2]=f;f=o[d+32>>2];o[c+76>>2]=o[d+28>>2];o[c+80>>2]=f;Rk(o[a+52>>2]+24|0,c+48|0);d=o[c+60>>2];if(d){if(p[c+64|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+60>>2]=0}n=n+1|0;if((n|0)!=(i|0)){continue}break}}if(b){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}if(j){continue}break}Yk(o[a+52>>2]);if(!r){break n}if(r){o[7718]=o[7718]+1;l[o[6607]](r)}break n}Yk(o[a+52>>2])}g=o[c+132>>2];if((g|0)>=1){d=0;while(1){a=o[c+140>>2]+u(d,36)|0;b=a;f=o[b+12>>2];if(f){if(p[a+16|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[b+12>>2]=0}m[a+16|0]=1;o[b+12>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;d=d+1|0;if((g|0)!=(d|0)){continue}break}}a=o[c+140>>2];if(a){if(p[c+144|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+140>>2]=0}if(D){if(D){o[7718]=o[7718]+1;l[o[6607]](D)}}a=o[c+204>>2];if(a){if(p[c+208|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+204>>2]=0}o[c+204>>2]=0;m[c+208|0]=1;o[c+196>>2]=0;o[c+200>>2]=0;a=o[c+184>>2];if(a){if(p[c+188|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+184>>2]=0}o[c+184>>2]=0;m[c+188|0]=1;o[c+176>>2]=0;o[c+180>>2]=0;a=o[c+164>>2];if(a){if(p[c+168|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+164>>2]=0}a=o[c+228>>2];if(a){if(p[c+232|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+228>>2]=0}M=c+240|0;return 1}function nJ(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),n=v(0),q=0,r=0,t=v(0),u=v(0),x=0,z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=0,G=v(0),H=v(0),I=v(0),J=v(0),K=0,L=0,N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=0,T=v(0),U=v(0),V=v(0),W=0,X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=0,ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0);f=M-544|0;M=f;h=o[a+20>>2];if(!h){g=o[a+4>>2];h=l[o[o[g>>2]+12>>2]](g,o[b+8>>2],o[c+8>>2])|0;m[a+16|0]=1;o[a+20>>2]=h}o[e+4>>2]=h;q=o[b+4>>2];r=o[c+4>>2];a:{if(!(o[q+4>>2]!=10|o[r+4>>2]!=10)){z=s[h+752>>2];a=o[c+12>>2];d=o[r+52>>2];g=d<<2;c=a+g|0;u=s[c>>2];Y=s[a+48>>2];b=o[b+12>>2];I=v(Y-s[b+48>>2]);Q=s[c+16>>2];Z=s[a+52>>2];T=v(Z-s[b+52>>2]);U=s[c+32>>2];_=s[a+56>>2];V=v(_-s[b+56>>2]);n=v(v(v(u*I)+v(Q*T))+v(U*V));a=b;b=o[q+52>>2];c=b<<2;a=a+c|0;G=s[a>>2];A=s[a+16>>2];D=s[a+32>>2];J=v(v(v(G*I)+v(A*T))+v(D*V));a=r+28|0;k=s[a+g>>2];h=c;c=q+28|0;t=s[h+c>>2];R=s[a+((d+2|0)%3<<2)>>2];$=s[c+((b+2|0)%3<<2)>>2];E=v(v(v(G*u)+v(A*Q))+v(D*U));i=v(v(1)-v(E*E));b:{if(i==v(0)){break b}i=v(v(J-v(E*n))/i);j=v(-t);if(i<j){break b}j=i;if(!(i>t)){break b}j=t}i=v(v(E*j)-n);n=v(-k);c:{d:{if(!!(i<n)){k=v(J-v(k*E));j=v(-t);if(k<j){i=n;break c}if(!(k>t)){i=n;j=k;break c}i=n;break d}if(!(i>k)){break c}n=v(v(k*E)+J);j=v(-t);if(n<j){i=k;break c}if(!(n>t)){i=k;j=n;break c}i=k}j=t}E=v(U*i);k=v(E+v(V-v(D*j)));J=v(u*i);n=v(J+v(I-v(G*j)));u=v(Q*i);i=v(u+v(T-v(A*j)));j=v(v(k*k)+v(v(n*n)+v(i*i)));I=v(C(j));t=v(v(I-$)-R);if(!(t>z)){e:{if(!!(j<=v(1.4210854715202004e-14))){if(!!(v(w(D))>v(.7071067690849304))){o[f>>2]=0;i=v(v(1)/v(C(v(v(A*A)+v(D*D)))));k=v(A*i);s[f+8>>2]=k;i=v(i*v(-D));s[f+4>>2]=i;j=v(0);break e}o[f+8>>2]=0;j=v(v(1)/v(C(v(v(G*G)+v(A*A)))));i=v(G*j);s[f+4>>2]=i;j=v(j*v(-A));s[f>>2]=j;k=v(0);break e}o[f+12>>2]=0;j=v(v(-1)/I);k=v(k*j);s[f+8>>2]=k;i=v(i*j);s[f+4>>2]=i;j=v(n*j);s[f>>2]=j}o[f+420>>2]=0;s[f+416>>2]=v(_+E)+v(R*k);s[f+412>>2]=v(Z+u)+v(R*i);s[f+408>>2]=v(Y+J)+v(R*j)}if(!!(t<z)){l[o[o[e>>2]+16>>2]](e,f,f+408|0,t)}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0);break a}o[f+536>>2]=1566444395;S=wg(f+328|0,q,r,o[a+8>>2],o[a+12>>2]);o[S+32>>2]=r;o[S+28>>2]=q;i=v(v(v(l[o[o[q>>2]+48>>2]](q))+v(l[o[o[r>>2]+48>>2]](r)))+s[o[a+20>>2]+752>>2]);s[f+536>>2]=i*i;g=o[b+12>>2];h=o[g+12>>2];o[f+416>>2]=o[g+8>>2];o[f+420>>2]=h;h=o[g+4>>2];o[f+408>>2]=o[g>>2];o[f+412>>2]=h;h=o[g+28>>2];o[f+432>>2]=o[g+24>>2];o[f+436>>2]=h;h=o[g+20>>2];o[f+424>>2]=o[g+16>>2];o[f+428>>2]=h;h=o[g+44>>2];o[f+448>>2]=o[g+40>>2];o[f+452>>2]=h;h=o[g+36>>2];o[f+440>>2]=o[g+32>>2];o[f+444>>2]=h;h=o[g+60>>2];o[f+464>>2]=o[g+56>>2];o[f+468>>2]=h;h=o[g+52>>2];o[f+456>>2]=o[g+48>>2];o[f+460>>2]=h;g=o[c+12>>2];h=o[g+12>>2];o[f+480>>2]=o[g+8>>2];o[f+484>>2]=h;h=o[g+4>>2];o[f+472>>2]=o[g>>2];o[f+476>>2]=h;x=o[g+20>>2];B=f+488|0;h=B;o[h>>2]=o[g+16>>2];o[h+4>>2]=x;h=o[g+28>>2];o[f+496>>2]=o[g+24>>2];o[f+500>>2]=h;F=o[g+36>>2];x=f+504|0;h=x;o[h>>2]=o[g+32>>2];o[h+4>>2]=F;h=o[g+44>>2];o[f+512>>2]=o[g+40>>2];o[f+516>>2]=h;L=o[g+52>>2];F=f+520|0;h=F;o[h>>2]=o[g+48>>2];o[h+4>>2]=L;h=o[g+60>>2];o[f+528>>2]=o[g+56>>2];o[f+532>>2]=h;f:{h=o[q+4>>2];if((h|0)>6){break f}g=o[r+4>>2];if((g|0)>6){break f}o[f+320>>2]=9928;i=v(0);if(h){i=v(l[o[o[q>>2]+48>>2]](q));g=o[r+4>>2]}if(g){j=v(l[o[o[r>>2]+48>>2]](r))}m[f+36|0]=0;s[f+28>>2]=j;s[f+24>>2]=i;o[f+4>>2]=e;o[f>>2]=10104;if(!o[q+52>>2]){break f}if(o[r+52>>2]){j=s[o[a+20>>2]+752>>2];g:{h:{if(p[d+24|0]){i=v(-1.0000000150474662e+30);if(rJ(o[q+52>>2],o[r+52>>2],o[b+12>>2],o[c+12>>2],f+240|0,e)){break h}break g}fb(S,f+408|0,f,o[d+20>>2],0);d=o[f+20>>2];o[f+248>>2]=o[f+16>>2];o[f+252>>2]=d;d=o[f+12>>2];o[f+240>>2]=o[f+8>>2];o[f+244>>2]=d;i=s[f+32>>2];if(!p[f+36|0]|i<v(0)^1){break g}}qJ(f+240|0,o[q+52>>2],o[r+52>>2],o[b+12>>2],o[c+12>>2],v(i-j),j,e)}if(!p[a+16|0]){break a}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0);break a}if(o[r+4>>2]!=1){break f}o[f+244>>2]=0;g=o[c+12>>2];n=s[g+52>>2];t=s[g+20>>2];A=s[g+24>>2];D=s[g+56>>2];G=s[g+36>>2];E=s[g+40>>2];i=s[r- -64>>2];j=s[r+56>>2];k=s[r+60>>2];R=s[g+16>>2];J=s[g+32>>2];z=s[g+48>>2];u=s[g+8>>2];I=s[g>>2];Q=s[g+4>>2];o[7717]=o[7717]+1;g=l[o[6606]](16,16)|0;o[f+252>>2]=g;m[f+256|0]=1;o[f+248>>2]=1;o[g+12>>2]=0;s[g>>2]=z+v(v(v(j*I)+v(k*Q))+v(i*u));s[g+8>>2]=D+v(v(v(j*J)+v(k*G))+v(i*E));s[g+4>>2]=n+v(v(v(j*R)+v(k*t))+v(i*A));g=o[f+244>>2]+1|0;o[f+244>>2]=g;i=s[r+72>>2];h=o[c+12>>2];j=s[r+76>>2];k=s[r+80>>2];n=v(v(v(v(i*s[h+32>>2])+v(j*s[h+36>>2]))+v(k*s[h+40>>2]))+s[h+56>>2]);t=v(v(v(v(i*s[h+16>>2])+v(j*s[h+20>>2]))+v(k*s[h+24>>2]))+s[h+52>>2]);i=v(v(v(v(i*s[h>>2])+v(j*s[h+4>>2]))+v(k*s[h+8>>2]))+s[h+48>>2]);i:{if(o[f+248>>2]!=(g|0)){break i}B=g?g<<1:1;if((g|0)>=(B|0)){break i}h=0;if(B){o[7717]=o[7717]+1;K=l[o[6606]](B<<4,16)|0;g=o[f+244>>2]}if((g|0)>=1){while(1){x=h<<4;F=x+K|0;x=x+o[f+252>>2]|0;W=o[x+4>>2];o[F>>2]=o[x>>2];o[F+4>>2]=W;L=o[x+12>>2];o[F+8>>2]=o[x+8>>2];o[F+12>>2]=L;h=h+1|0;if((h|0)!=(g|0)){continue}break}}g=o[f+252>>2];if(g){if(p[f+256|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[f+252>>2]=0}o[f+252>>2]=K;m[f+256|0]=1;o[f+248>>2]=B;g=o[f+244>>2]}g=o[f+252>>2]+(g<<4)|0;o[g+12>>2]=0;s[g+8>>2]=n;s[g+4>>2]=t;s[g>>2]=i;g=o[f+244>>2]+1|0;o[f+244>>2]=g;i=s[r+88>>2];c=o[c+12>>2];j=s[r+92>>2];k=s[r+96>>2];n=v(v(v(v(i*s[c>>2])+v(j*s[c+4>>2]))+v(k*s[c+8>>2]))+s[c+48>>2]);t=v(v(v(v(i*s[c+32>>2])+v(j*s[c+36>>2]))+v(k*s[c+40>>2]))+s[c+56>>2]);i=v(v(v(v(i*s[c+16>>2])+v(j*s[c+20>>2]))+v(k*s[c+24>>2]))+s[c+52>>2]);j:{if(o[f+248>>2]!=(g|0)){break j}c=g?g<<1:1;if((g|0)>=(c|0)){break j}h=0;K=0;if(c){o[7717]=o[7717]+1;K=l[o[6606]](c<<4,16)|0;g=o[f+244>>2]}if((g|0)>=1){while(1){B=h<<4;x=B+K|0;B=B+o[f+252>>2]|0;L=o[B+4>>2];o[x>>2]=o[B>>2];o[x+4>>2]=L;F=o[B+12>>2];o[x+8>>2]=o[B+8>>2];o[x+12>>2]=F;h=h+1|0;if((h|0)!=(g|0)){continue}break}}g=o[f+252>>2];if(g){if(p[f+256|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[f+252>>2]=0}o[f+252>>2]=K;m[f+256|0]=1;o[f+248>>2]=c;g=o[f+244>>2]}c=o[f+252>>2]+(g<<4)|0;o[c+12>>2]=0;s[c+8>>2]=t;s[c+4>>2]=i;s[c>>2]=n;o[f+244>>2]=o[f+244>>2]+1;i=s[o[a+20>>2]+752>>2];fb(S,f+408|0,f+320|0,o[d+20>>2],0);j=s[S+4>>2];k=s[S+8>>2];n=s[S+12>>2];t=v(v(v(j*j)+v(k*k))+v(n*n));if(!!(t>v(1.1920928955078125e-7))){o[f+316>>2]=0;u=n;n=v(v(1)/t);s[f+312>>2]=u*n;s[f+308>>2]=k*n;s[f+304>>2]=j*n;j=s[S+56>>2];k=v(l[o[o[q>>2]+48>>2]](q));n=v(l[o[o[r>>2]+48>>2]](r));ll(f+304|0,o[q+52>>2],o[b+12>>2],f+240|0,v(v(v(j-k)-n)-i),i,e)}k:{if(!p[a+16|0]){break k}a=o[e+4>>2];if(!o[a+748>>2]){break k}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break k}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0)}a=o[f+252>>2];if(!a){break a}if(p[f+256|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[f+252>>2]=0;break a}fb(S,f+408|0,e,o[d+20>>2],0);l:{if(!o[a+28>>2]|o[o[e+4>>2]+748>>2]>=o[a+32>>2]){break l}i=s[S+4>>2];j=s[S+8>>2];n=s[S+12>>2];t=v(v(v(i*i)+v(j*j))+v(n*n));if(!(t>v(1.1920928955078125e-7))){break l}K=f+472|0;L=f+456|0;W=f+440|0;aa=f+424|0;u=j;j=v(v(1)/t);t=v(u*j);R=v(i*j);J=v(n*j);m:{if(!!(v(w(J))>v(.7071067690849304))){i=v(v(1)/v(C(v(v(J*J)+v(t*t)))));j=v(t*i);i=v(i*v(-J));break m}j=v(v(1)/v(C(v(v(R*R)+v(t*t)))));i=v(R*j);k=v(j*v(-t));j=v(0)}n=v(l[o[o[q>>2]+16>>2]](q));A=v(l[o[o[r>>2]+16>>2]](r));D=s[6601];r=n<A;g=r?f+408|0:K;q=o[g+12>>2];o[f+248>>2]=o[g+8>>2];o[f+252>>2]=q;q=o[g+4>>2];o[f+240>>2]=o[g>>2];o[f+244>>2]=q;g=r?aa:B;q=o[g+12>>2];o[f+264>>2]=o[g+8>>2];o[f+268>>2]=q;q=o[g+4>>2];o[f+256>>2]=o[g>>2];o[f+260>>2]=q;g=r?W:x;q=o[g+12>>2];o[f+280>>2]=o[g+8>>2];o[f+284>>2]=q;q=o[g+4>>2];o[f+272>>2]=o[g>>2];o[f+276>>2]=q;g=r?L:F;q=o[g+12>>2];o[f+296>>2]=o[g+8>>2];o[f+300>>2]=q;q=o[g+4>>2];o[f+288>>2]=o[g>>2];o[f+292>>2]=q;h=o[a+28>>2];if((h|0)<1){break l}u=j;n=v(v(y(v(D/(r?n:A)),v(.39269909262657166)))*v(.5));ea=v(v(v(k*k)+v(i*i))+v(j*j));j=v(qa(n)/v(C(ea)));A=v(u*j);D=v(i*j);G=v(k*j);fa=v(C(v(v(J*J)+v(v(R*R)+v(t*t)))));E=ra(n);q=0;while(1){if(!!(ea>v(1.1920928955078125e-7))){n=v(v(v(v(6.2831854820251465)/v(h|0))*v(q|0))*v(.5));k=v(qa(n)/fa);i=v(J*k);j=v(t*k);k=v(R*k);n=ra(n);n:{if(!!r){g=o[b+12>>2];I=s[g+36>>2];Q=s[g+20>>2];T=s[g+40>>2];U=s[g+24>>2];V=s[g+32>>2];Y=s[g>>2];Z=s[g+16>>2];_=s[g+4>>2];$=s[g+8>>2];o[f+452>>2]=0;o[f+436>>2]=0;o[f+420>>2]=0;H=v(v(A*k)+v(v(v(D*n)-v(E*j))-v(G*i)));N=v(v(A*i)+v(v(D*j)+v(v(E*n)+v(G*k))));O=v(v(D*i)+v(v(v(G*n)-v(E*k))-v(A*j)));P=v(v(G*j)+v(v(v(A*n)-v(E*i))-v(D*k)));z=v(v(v(i*H)+v(v(k*N)+v(n*O)))-v(j*P));u=v(v(v(v(n*N)-v(k*O))-v(j*H))-v(i*P));ba=v(v(v(j*O)+v(v(i*N)+v(n*P)))-v(k*H));i=v(v(v(k*P)+v(v(n*H)+v(j*N)))-v(i*O));j=v(v(2)/v(v(u*u)+v(v(ba*ba)+v(v(z*z)+v(i*i)))));k=v(ba*j);N=v(z*k);n=v(i*j);O=v(u*n);H=v(N-O);P=v(i*k);X=v(z*j);ca=v(u*X);j=v(P+ca);X=v(z*X);da=v(i*n);i=v(v(1)-v(X+da));s[f+448>>2]=v(v($*H)+v(U*j))+v(T*i);s[f+444>>2]=v(v(H*_)+v(j*Q))+v(i*I);s[f+440>>2]=v(v(H*Y)+v(j*Z))+v(i*V);n=v(z*n);z=v(u*k);i=v(n+z);u=v(ba*k);j=v(v(1)-v(X+u));k=v(P-ca);s[f+432>>2]=v(v($*i)+v(U*j))+v(T*k);s[f+428>>2]=v(v(i*_)+v(j*Q))+v(k*I);s[f+424>>2]=v(v(i*Y)+v(j*Z))+v(k*V);i=v(v(1)-v(da+u));j=v(n-z);k=v(N+O);s[f+416>>2]=v(v($*i)+v(U*j))+v(T*k);s[f+412>>2]=v(v(i*_)+v(j*Q))+v(k*I);s[f+408>>2]=v(v(i*Y)+v(j*Z))+v(k*V);g=o[c+12>>2];h=o[g+4>>2];o[K>>2]=o[g>>2];o[K+4>>2]=h;h=o[g+12>>2];o[K+8>>2]=o[g+8>>2];o[K+12>>2]=h;h=o[g+28>>2];o[B+8>>2]=o[g+24>>2];o[B+12>>2]=h;h=o[g+20>>2];o[B>>2]=o[g+16>>2];o[B+4>>2]=h;h=o[g+44>>2];o[x+8>>2]=o[g+40>>2];o[x+12>>2]=h;h=o[g+36>>2];o[x>>2]=o[g+32>>2];o[x+4>>2]=h;h=o[g+60>>2];o[F+8>>2]=o[g+56>>2];o[F+12>>2]=h;h=o[g+52>>2];o[F>>2]=o[g+48>>2];o[F+4>>2]=h;break n}g=o[b+12>>2];h=o[g+12>>2];o[f+416>>2]=o[g+8>>2];o[f+420>>2]=h;h=o[g+4>>2];o[f+408>>2]=o[g>>2];o[f+412>>2]=h;h=o[g+28>>2];o[aa+8>>2]=o[g+24>>2];o[aa+12>>2]=h;h=o[g+20>>2];o[aa>>2]=o[g+16>>2];o[aa+4>>2]=h;h=o[g+44>>2];o[W+8>>2]=o[g+40>>2];o[W+12>>2]=h;h=o[g+36>>2];o[W>>2]=o[g+32>>2];o[W+4>>2]=h;h=o[g+60>>2];o[L+8>>2]=o[g+56>>2];o[L+12>>2]=h;h=o[g+52>>2];o[L>>2]=o[g+48>>2];o[L+4>>2]=h;g=o[c+12>>2];I=s[g+36>>2];Q=s[g+20>>2];T=s[g+40>>2];U=s[g+24>>2];V=s[g+32>>2];Y=s[g>>2];Z=s[g+16>>2];_=s[g+4>>2];$=s[g+8>>2];o[f+516>>2]=0;o[f+500>>2]=0;o[f+484>>2]=0;H=v(v(A*k)+v(v(v(D*n)-v(E*j))-v(G*i)));N=v(v(A*i)+v(v(D*j)+v(v(E*n)+v(G*k))));O=v(v(D*i)+v(v(v(G*n)-v(E*k))-v(A*j)));P=v(v(G*j)+v(v(v(A*n)-v(E*i))-v(D*k)));z=v(v(v(i*H)+v(v(k*N)+v(n*O)))-v(j*P));u=v(v(v(v(n*N)-v(k*O))-v(j*H))-v(i*P));ba=v(v(v(j*O)+v(v(i*N)+v(n*P)))-v(k*H));i=v(v(v(k*P)+v(v(n*H)+v(j*N)))-v(i*O));j=v(v(2)/v(v(u*u)+v(v(ba*ba)+v(v(z*z)+v(i*i)))));k=v(ba*j);N=v(z*k);n=v(i*j);O=v(u*n);H=v(N-O);P=v(i*k);X=v(z*j);ca=v(u*X);j=v(P+ca);X=v(z*X);da=v(i*n);i=v(v(1)-v(X+da));s[f+512>>2]=v(v($*H)+v(U*j))+v(T*i);s[f+508>>2]=v(v(H*_)+v(j*Q))+v(i*I);s[f+504>>2]=v(v(H*Y)+v(j*Z))+v(i*V);n=v(z*n);z=v(u*k);i=v(n+z);u=v(ba*k);j=v(v(1)-v(X+u));k=v(P-ca);s[f+496>>2]=v(v($*i)+v(U*j))+v(T*k);s[f+492>>2]=v(v(i*_)+v(j*Q))+v(k*I);s[f+488>>2]=v(v(i*Y)+v(j*Z))+v(k*V);i=v(v(1)-v(da+u));j=v(n-z);k=v(N+O);s[f+480>>2]=v(v($*i)+v(U*j))+v(T*k);s[f+476>>2]=v(v(i*_)+v(j*Q))+v(k*I);s[f+472>>2]=v(v(i*Y)+v(j*Z))+v(k*V)}g=o[d+20>>2];o[f+32>>2]=e;o[f>>2]=10288;h=o[f+420>>2];o[f+44>>2]=o[f+416>>2];o[f+48>>2]=h;h=o[f+412>>2];o[f+36>>2]=o[f+408>>2];o[f+40>>2]=h;h=o[aa+12>>2];o[f+60>>2]=o[aa+8>>2];o[f+64>>2]=h;h=o[aa+4>>2];o[f+52>>2]=o[aa>>2];o[f+56>>2]=h;h=o[W+12>>2];o[f+76>>2]=o[W+8>>2];o[f+80>>2]=h;h=o[W+4>>2];o[f+68>>2]=o[W>>2];o[f+72>>2]=h;h=o[L+12>>2];o[f+92>>2]=o[L+8>>2];o[f+96>>2]=h;h=o[L+4>>2];o[f+84>>2]=o[L>>2];o[f+88>>2]=h;h=o[K+12>>2];o[f+108>>2]=o[K+8>>2];o[f+112>>2]=h;h=o[K+4>>2];o[f+100>>2]=o[K>>2];o[f+104>>2]=h;h=o[B+12>>2];o[f+124>>2]=o[B+8>>2];o[f+128>>2]=h;h=o[B+4>>2];o[f+116>>2]=o[B>>2];o[f+120>>2]=h;h=o[x+12>>2];o[f+140>>2]=o[x+8>>2];o[f+144>>2]=h;h=o[x+4>>2];o[f+132>>2]=o[x>>2];o[f+136>>2]=h;h=o[F+12>>2];o[f+156>>2]=o[F+8>>2];o[f+160>>2]=h;h=o[F+4>>2];o[f+148>>2]=o[F>>2];o[f+152>>2]=h;h=o[f+252>>2];o[f+172>>2]=o[f+248>>2];o[f+176>>2]=h;h=o[f+244>>2];o[f+164>>2]=o[f+240>>2];o[f+168>>2]=h;h=o[f+268>>2];o[f+188>>2]=o[f+264>>2];o[f+192>>2]=h;h=o[f+260>>2];o[f+180>>2]=o[f+256>>2];o[f+184>>2]=h;h=o[f+284>>2];o[f+204>>2]=o[f+280>>2];o[f+208>>2]=h;h=o[f+276>>2];o[f+196>>2]=o[f+272>>2];o[f+200>>2]=h;h=o[f+292>>2];o[f+212>>2]=o[f+288>>2];o[f+216>>2]=h;h=o[f+300>>2];o[f+220>>2]=o[f+296>>2];o[f+224>>2]=h;o[f+232>>2]=g;m[f+228|0]=r;fb(S,f+408|0,f,g,0);h=o[a+28>>2]}q=q+1|0;if((q|0)<(h|0)){continue}break}}if(!p[a+16|0]){break a}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0)}M=f+544|0}function nK(a,b,c,d,e,f,g,h,i,j){var k=0,m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=0,L=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=0,_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=0,ia=v(0),ka=v(0),la=v(0),ma=v(0),na=v(0),oa=0,pa=v(0),qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=v(0),xa=v(0),ya=0,za=0,Aa=0,Ba=0;k=M-384|0;M=k;G=s[b+36>>2];U=s[b+4>>2];y=s[b+20>>2];P=s[b+40>>2];fa=s[b+8>>2];_=s[b+24>>2];x=s[a+8>>2];A=s[d+8>>2];r=s[a>>2];t=s[d>>2];J=s[a+4>>2];L=s[d+4>>2];m=s[b+32>>2];pa=s[b>>2];n=s[b+16>>2];p=v(s[c>>2]*v(.5));s[k+372>>2]=p;q=v(s[c+4>>2]*v(.5));s[k+376>>2]=q;D=v(s[c+8>>2]*v(.5));s[k+380>>2]=D;H=v(s[f>>2]*v(.5));s[k+360>>2]=H;E=v(s[f+4>>2]*v(.5));s[k+364>>2]=E;z=v(s[f+8>>2]*v(.5));s[k+368>>2]=z;r=v(t-r);t=v(L-J);x=v(A-x);A=v(v(v(pa*r)+v(n*t))+v(m*x));$=s[e>>2];Q=s[e+16>>2];V=s[e+32>>2];J=v(v(v(pa*$)+v(n*Q))+v(m*V));ia=v(w(J));F=s[e+4>>2];aa=s[e+20>>2];ba=s[e+36>>2];L=v(v(v(pa*F)+v(n*aa))+v(m*ba));wa=v(w(L));ca=s[e+8>>2];da=s[e+24>>2];ga=s[e+40>>2];R=v(v(v(pa*ca)+v(n*da))+v(m*ga));xa=v(w(R));n=v(v(w(A))-v(v(v(p+v(H*ia))+v(E*wa))+v(z*xa)));a:{if(n>v(0)){break a}S=v(v(v(U*ca)+v(y*da))+v(G*ga));ka=v(w(S));W=v(v(v(U*F)+v(y*aa))+v(G*ba));ea=v(w(W));X=v(v(v(U*$)+v(y*Q))+v(G*V));Y=v(w(X));m=v(-3.4028234663852886e+38);c=0;if(!!(n>v(-3.4028234663852886e+38))){N=A<v(0);m=n;B=b;c=1}G=v(v(v(r*U)+v(t*y))+v(x*G));n=v(v(w(G))-v(v(v(q+v(H*Y))+v(E*ea))+v(z*ka)));if(n>v(0)){break a}T=v(v(v(fa*ca)+v(_*da))+v(P*ga));la=v(w(T));O=v(v(v(fa*F)+v(_*aa))+v(P*ba));ma=v(w(O));I=v(v(v(fa*$)+v(_*Q))+v(P*V));na=v(w(I));if(!!(n>m)){B=b+4|0;N=G<v(0);m=n;c=2}y=v(v(v(r*fa)+v(t*_))+v(x*P));n=v(v(w(y))-v(v(v(D+v(H*na))+v(E*ma))+v(z*la)));if(n>v(0)){break a}if(!!(n>m)){B=b+8|0;N=y<v(0);m=n;c=3}P=v(v(v(r*$)+v(t*Q))+v(x*V));n=v(v(w(P))-v(H+v(v(D*na)+v(v(p*ia)+v(q*Y)))));if(n>v(0)){break a}if(!!(n>m)){N=P<v(0);m=n;B=e;c=4}P=v(v(v(r*F)+v(t*aa))+v(x*ba));n=v(v(w(P))-v(E+v(v(D*ma)+v(v(p*wa)+v(q*ea)))));if(n>v(0)){break a}if(!!(n>m)){B=e+4|0;N=P<v(0);m=n;c=5}r=v(v(v(r*ca)+v(t*da))+v(x*ga));n=v(v(w(r))-v(z+v(v(D*la)+v(v(p*xa)+v(q*ka)))));if(n>v(0)){break a}if(!!(n>m)){B=e+8|0;N=r<v(0);m=n;c=6}V=v(v(y*X)-v(G*I));aa=v(wa+v(9999999747378752e-21));ba=v(na+v(9999999747378752e-21));ca=v(Y+v(9999999747378752e-21));da=v(xa+v(9999999747378752e-21));n=v(v(w(V))-v(v(z*aa)+v(v(v(q*ba)+v(D*ca))+v(E*da))));if(n>v(1.1920928955078125e-7)){break a}P=v(ma+v(9999999747378752e-21));_=v(ea+v(9999999747378752e-21));$=v(ia+v(9999999747378752e-21));t=v(0);ga=v(X*X);ea=v(v(I*I)+v(0));Q=v(C(v(ga+ea)));b:{if(!(Q>v(1.1920928955078125e-7))){x=v(0);r=v(0);break b}x=v(0);n=v(n/Q);r=v(0);if(!(v(n*v(1.0499999523162842))>m)){break b}N=V<v(0);x=v(v(-I)/Q);t=v(v(0)/Q);B=0;c=7;m=n;r=v(X/Q)}Y=v(v(y*W)-v(G*O));n=v(v(w(Y))-v(v(z*$)+v(v(v(q*P)+v(D*_))+v(H*da))));if(n>v(1.1920928955078125e-7)){break a}Q=v(la+v(9999999747378752e-21));V=v(ka+v(9999999747378752e-21));ka=v(W*W);la=v(v(O*O)+v(0));F=v(C(v(ka+la)));c:{if(!(F>v(1.1920928955078125e-7))){break c}n=v(n/F);if(!(v(n*v(1.0499999523162842))>m)){break c}N=Y<v(0);r=v(W/F);x=v(v(-O)/F);t=v(v(0)/F);B=0;c=8;m=n}Y=v(v(y*S)-v(G*T));n=v(v(w(Y))-v(v(E*$)+v(v(H*aa)+v(v(q*Q)+v(D*V)))));if(n>v(1.1920928955078125e-7)){break a}ma=v(S*S);na=v(v(T*T)+v(0));F=v(C(v(ma+na)));d:{if(!(F>v(1.1920928955078125e-7))){break d}n=v(n/F);if(!(v(n*v(1.0499999523162842))>m)){break d}N=Y<v(0);r=v(S/F);x=v(v(-T)/F);t=v(v(0)/F);B=0;c=9;m=n}Y=v(v(A*I)-v(y*J));n=v(v(w(Y))-v(v(z*_)+v(v(v(p*ba)+v(D*$))+v(E*V))));if(n>v(1.1920928955078125e-7)){break a}ia=v(J*J);F=v(C(v(ia+ea)));e:{if(!(F>v(1.1920928955078125e-7))){break e}n=v(n/F);if(!(v(n*v(1.0499999523162842))>m)){break e}N=Y<v(0);r=v(v(-J)/F);x=v(v(0)/F);t=v(I/F);B=0;c=10;m=n}F=v(v(A*O)-v(y*L));n=v(v(w(F))-v(v(z*ca)+v(v(v(p*P)+v(D*aa))+v(H*V))));if(n>v(1.1920928955078125e-7)){break a}ea=v(L*L);I=v(C(v(ea+la)));f:{if(!(I>v(1.1920928955078125e-7))){break f}n=v(n/I);if(!(v(n*v(1.0499999523162842))>m)){break f}N=F<v(0);r=v(v(-L)/I);x=v(v(0)/I);t=v(O/I);B=0;c=11;m=n}O=v(v(A*T)-v(y*R));n=v(v(w(O))-v(v(E*ca)+v(v(H*_)+v(v(p*Q)+v(D*da)))));if(n>v(1.1920928955078125e-7)){break a}I=v(R*R);y=v(C(v(I+na)));g:{if(!(y>v(1.1920928955078125e-7))){break g}n=v(n/y);if(!(v(n*v(1.0499999523162842))>m)){break g}N=O<v(0);r=v(v(-R)/y);x=v(v(0)/y);t=v(T/y);B=0;c=12;m=n}T=v(v(G*J)-v(A*X));n=v(v(w(T))-v(v(z*P)+v(v(v(p*ca)+v(q*$))+v(E*Q))));if(n>v(1.1920928955078125e-7)){break a}y=v(C(v(v(ga+ia)+v(0))));h:{if(!(y>v(1.1920928955078125e-7))){break h}n=v(n/y);if(!(v(n*v(1.0499999523162842))>m)){break h}N=T<v(0);r=v(v(0)/y);x=v(J/y);t=v(v(-X)/y);B=0;c=13;m=n}y=v(v(G*L)-v(A*W));n=v(v(w(y))-v(v(z*ba)+v(v(v(p*_)+v(q*aa))+v(H*Q))));if(n>v(1.1920928955078125e-7)){break a}z=v(C(v(v(ka+ea)+v(0))));i:{if(!(z>v(1.1920928955078125e-7))){break i}n=v(n/z);if(!(v(n*v(1.0499999523162842))>m)){break i}N=y<v(0);r=v(v(0)/z);x=v(L/z);t=v(v(-W)/z);B=0;c=14;m=n}z=v(v(G*R)-v(A*S));n=v(v(w(z))-v(v(E*ba)+v(v(H*P)+v(v(p*V)+v(q*da)))));if(n>v(1.1920928955078125e-7)){break a}j:{k:{l:{m:{p=v(C(v(v(ma+I)+v(0))));if(!(p>v(1.1920928955078125e-7))){break m}n=v(n/p);if(!(v(n*v(1.0499999523162842))>m)){break m}N=z<v(0);r=v(v(0)/p);x=v(R/p);t=v(v(-S)/p);c=15;break l}if(!c){break a}if(B){break k}n=m}p=v(v(v(pa*t)+v(U*x))+v(fa*r));s[g>>2]=p;q=v(v(v(t*s[b+16>>2])+v(x*s[b+20>>2]))+v(r*s[b+24>>2]));s[g+4>>2]=q;t=v(v(v(t*s[b+32>>2])+v(x*s[b+36>>2]))+v(r*s[b+40>>2]));s[g+8>>2]=t;break j}p=s[B>>2];o[g>>2]=o[B>>2];q=s[B+16>>2];o[g+4>>2]=o[B+16>>2];t=s[B+32>>2];o[g+8>>2]=o[B+32>>2];n=m}if(N){s[g+8>>2]=-t;s[g+4>>2]=-q;s[g>>2]=-p}s[h>>2]=-n;if((c|0)>=7){o[k+120>>2]=o[a+8>>2];f=o[a+4>>2];o[k+112>>2]=o[a>>2];o[k+116>>2]=f;q=v(0);E=s[k+112>>2];z=s[k+116>>2];m=s[k+372>>2];y=m;t=v(-m);m=s[g>>2];A=s[b>>2];r=s[g+4>>2];G=s[b+16>>2];p=s[g+8>>2];x=s[b+32>>2];t=v(v(v(m*A)+v(r*G))+v(p*x))>v(0)?y:t;F=v(s[k+120>>2]+v(t*x));x=s[k+376>>2];y=s[b+4>>2];J=s[b+20>>2];L=s[b+36>>2];x=v(v(v(m*y)+v(r*J))+v(p*L))>v(0)?x:v(-x);F=v(F+v(x*L));L=s[b+8>>2];R=s[b+24>>2];S=s[b+40>>2];D=v(v(v(m*L)+v(r*R))+v(p*S))>v(0)?D:v(-D);s[k+120>>2]=F+v(D*S);s[k+116>>2]=v(v(z+v(t*G))+v(x*J))+v(D*R);s[k+112>>2]=v(v(E+v(t*A))+v(x*y))+v(D*L);o[k+216>>2]=o[d+8>>2];a=o[d+4>>2];o[k+208>>2]=o[d>>2];o[k+212>>2]=a;y=v(-H);A=H;D=s[e>>2];H=s[e+16>>2];x=s[e+32>>2];t=v(v(v(m*D)+v(r*H))+v(p*x))>v(0)?y:A;y=v(s[k+216>>2]+v(t*x));x=s[k+364>>2];E=s[e+4>>2];z=s[e+20>>2];A=s[e+36>>2];x=v(v(v(m*E)+v(r*z))+v(p*A))>v(0)?v(-x):x;F=v(y+v(x*A));A=s[k+368>>2];I=v(-A);y=A;A=s[e+8>>2];G=s[e+24>>2];m=v(v(m*A)+v(r*G));r=s[e+40>>2];m=v(m+v(p*r))>v(0)?I:y;r=v(F+v(m*r));s[k+216>>2]=r;p=v(v(v(s[k+212>>2]+v(t*H))+v(x*z))+v(m*G));s[k+212>>2]=p;m=v(v(v(s[k+208>>2]+v(t*D))+v(x*E))+v(m*A));s[k+208>>2]=m;a=b;b=c+ -7|0;d=(b|0)/3|0;a=a+(d<<2)|0;E=s[a>>2];b=(b-u(d,3)<<2)+e|0;t=s[b>>2];z=s[a+16>>2];x=s[b+16>>2];A=s[a+32>>2];D=s[b+32>>2];H=v(v(v(E*t)+v(z*x))+v(A*D));G=v(v(1)-v(H*H));if(!(G<=v(9999999747378752e-20))){q=v(m-s[k+112>>2]);y=v(q*E);E=v(p-s[k+116>>2]);y=v(y+v(E*z));z=v(r-s[k+120>>2]);q=v(v(v(v(y+v(z*A))*H)-v(v(v(q*t)+v(E*x))+v(z*D)))*v(v(1)/G))}s[k+216>>2]=r+v(q*D);s[k+212>>2]=p+v(q*x);s[k+208>>2]=m+v(q*t);m=s[g>>2];r=s[g+4>>2];p=s[g+8>>2];o[k+300>>2]=0;s[k+296>>2]=-p;s[k+292>>2]=-r;s[k+288>>2]=-m;l[o[o[j>>2]+16>>2]](j,k+288|0,k+208|0,n);o[i>>2]=c;break a}x=s[g>>2];n:{if((c|0)<=3){n=s[g+8>>2];r=s[g+4>>2];ta=k+372|0;K=e;B=k+360|0;break n}x=v(-x);n=v(-s[g+8>>2]);r=v(-s[g+4>>2]);f=d;ta=k+360|0;d=a;a=f;K=b;b=e;B=k+372|0}p=v(v(v(x*s[K>>2])+v(r*s[K+16>>2]))+v(n*s[K+32>>2]));s[k+344>>2]=p;q=v(v(v(x*s[K+4>>2])+v(r*s[K+20>>2]))+v(n*s[K+36>>2]));s[k+348>>2]=q;m=v(v(v(x*s[K+8>>2])+v(r*s[K+24>>2]))+v(n*s[K+40>>2]));s[k+352>>2]=m;m=v(w(m));q=v(w(q));p=v(w(p));o:{if(!!(q>p)){h=q>m;e=h?1:2;f=0;break o}h=p>m;e=(h^1)<<1;f=h}ya=f;f=e<<2;m=s[f+B>>2];p=v(m*s[f+K>>2]);q=v(s[d>>2]-s[a>>2]);za=h?2:1;e=k;p:{if(!(s[f+(k+344|0)>>2]<v(0))){p=v(q-p);s[k+328>>2]=p;q=v(v(s[d+4>>2]-s[a+4>>2])-v(m*s[(f|16)+K>>2]));s[k+332>>2]=q;m=v(v(s[d+8>>2]-s[a+8>>2])-v(m*s[(f|32)+K>>2]));break p}p=v(q+p);s[k+328>>2]=p;q=v(v(s[d+4>>2]-s[a+4>>2])+v(m*s[(f|16)+K>>2]));s[k+332>>2]=q;m=v(v(s[d+8>>2]-s[a+8>>2])+v(m*s[(f|32)+K>>2]))}s[e+336>>2]=m;e=4;d=1;h=2;q:{r:{s:{Aa=((c|0)<4?-1:-4)+c|0;switch(Aa|0){case 0:break q;case 1:break s;default:break r}}d=0;break q}h=1;d=0}f=d<<2;d=f+b|0;t=s[d+32>>2];D=s[d>>2];H=s[d+16>>2];d=h<<2;b=d+b|0;E=s[b>>2];z=s[b+16>>2];A=s[b+32>>2];G=v(v(v(p*E)+v(q*z))+v(m*A));b=ya<<2;ua=b+K|0;J=s[ua>>2];L=s[ua+16>>2];R=s[ua+32>>2];y=v(v(v(E*J)+v(z*L))+v(A*R));S=s[b+B>>2];W=v(y*S);X=v(G+W);b=za<<2;va=b+K|0;T=s[va>>2];O=s[va+16>>2];I=s[va+32>>2];z=v(v(v(E*T)+v(z*O))+v(A*I));U=s[b+B>>2];E=v(z*U);s[k+316>>2]=X-E;A=v(v(v(p*D)+v(q*H))+v(m*t));J=v(v(v(D*J)+v(H*L))+v(t*R));p=v(S*J);q=v(A+p);D=v(v(v(D*T)+v(H*O))+v(t*I));m=v(U*D);s[k+312>>2]=q-m;s[k+308>>2]=X+E;s[k+304>>2]=q+m;q=v(G-W);s[k+300>>2]=q+E;p=v(A-p);s[k+296>>2]=p+m;s[k+292>>2]=q-E;s[k+288>>2]=p-m;o[k+280>>2]=o[f+ta>>2];o[k+284>>2]=o[d+ta>>2];f=k+208|0;B=k+288|0;N=1;b=0;t:{while(1){u:{v:{if((e|0)>0){Ba=b^1;ha=b<<2;oa=ha+(k+280|0)|0;d=f;b=B;h=0;while(1){p=s[oa>>2];Z=b+ha|0;q=s[Z>>2];t=v(-q);if(!!(p>t)){o[d>>2]=o[b>>2];o[d+4>>2]=o[b+4>>2];h=h+1|0;if(h&8){break u}p=s[oa>>2];q=s[Z>>2];t=v(-q);d=d+8|0}qa=t<p;Z=b+8|0;ra=(e|0)>1;sa=ra?Z:B;t=s[sa+ha>>2];if((qa|0)!=(p>v(-t)|0)){qa=b;b=Ba<<2;m=s[qa+b>>2];s[b+d>>2]=m+v(v(v(-p)-q)*v(v(s[b+sa>>2]-m)/v(t-q)));s[d+ha>>2]=-s[oa>>2];h=h+1|0;if(h&8){break u}d=d+8|0}e=e+ -1|0;b=Z;if(ra){continue}break}e=0;B=(k+208|0)==(f|0)?k+112|0:k+208|0;if((h|0)<=0){break v}d=B;b=f;while(1){Z=b+ha|0;q=s[Z>>2];p=s[oa>>2];if(!!(q<p)){o[d>>2]=o[b>>2];o[d+4>>2]=o[b+4>>2];e=e+1|0;if(e&8){break t}p=s[oa>>2];q=s[Z>>2];d=d+8|0}Z=b+8|0;ra=(h|0)>1;sa=ra?Z:f;t=s[sa+ha>>2];if((q<p|0)!=(t<p|0)){qa=b;b=Ba<<2;m=s[qa+b>>2];s[b+d>>2]=m+v(v(p-q)*v(v(s[b+sa>>2]-m)/v(t-q)));o[d+ha>>2]=o[oa>>2];e=e+1|0;if(e&8){break t}d=d+8|0}h=h+ -1|0;b=Z;if(ra){continue}break}break v}B=(k+208|0)==(f|0)?k+112|0:k+208|0;e=0}b=1;d=N;f=(k+208|0)==(B|0)?k+112|0:k+208|0;N=0;if(d){continue}break t}break}B=f;e=h}if((k+208|0)!=(B|0)){ja(k+208|0,B,e<<3)}if((e|0)<1){break a}m=v(v(1)/v(v(J*z)-v(y*D)));q=v(m*v(-y));t=v(z*m);D=v(D*m);H=v(J*m);E=s[(Aa<<2)+ta>>2];b=za<<2;z=s[(b|32)+K>>2];d=ya<<2;y=s[(d|32)+K>>2];J=s[(b|16)+K>>2];L=s[(d|16)+K>>2];R=s[va>>2];S=s[ua>>2];b=0;W=s[k+336>>2];X=s[k+332>>2];T=s[k+328>>2];d=0;while(1){f=(k+112|0)+u(b,12)|0;h=d<<3;O=s[h+(k+208|0)>>2];p=v(O-A);I=s[(k+208|0)+(h|4)>>2];U=v(I-G);m=v(v(t*p)-v(D*U));p=v(v(q*p)+v(H*U));U=v(v(T+v(m*S))+v(p*R));s[f>>2]=U;fa=v(v(X+v(m*L))+v(p*J));s[f+4>>2]=fa;m=v(v(W+v(m*y))+v(p*z));s[f+8>>2]=m;m=v(E-v(v(v(x*U)+v(r*fa))+v(n*m)));s[(k+80|0)+(b<<2)>>2]=m;if(!!(m>=v(0))){f=b<<3;s[f+(k+208|0)>>2]=O;s[(k+208|0)+(f|4)>>2]=I;b=b+1|0}d=d+1|0;if((e|0)!=(d|0)){continue}break}if((b|0)<1){break a}d=(b|0)<4?b:4;f=(d|0)>1?d:1;w:{if((b|0)<=(f|0)){if((c|0)>=4){e=0;while(1){d=(k+112|0)+u(e,12)|0;n=s[g>>2];m=s[(k+80|0)+(e<<2)>>2];s[k+32>>2]=v(s[d>>2]+s[a>>2])-v(n*m);r=s[g+4>>2];s[k+36>>2]=v(s[d+4>>2]+s[a+4>>2])-v(m*r);p=s[g+8>>2];s[k+40>>2]=v(s[d+8>>2]+s[a+8>>2])-v(m*p);o[k+76>>2]=0;s[k+72>>2]=-p;s[k+68>>2]=-r;s[k+64>>2]=-n;l[o[o[j>>2]+16>>2]](j,k- -64|0,k+32|0,v(-m));e=e+1|0;if((e|0)!=(b|0)){continue}break}break w}e=0;while(1){d=(k+112|0)+u(e,12)|0;s[k+32>>2]=s[d>>2]+s[a>>2];s[k+36>>2]=s[d+4>>2]+s[a+4>>2];s[k+40>>2]=s[d+8>>2]+s[a+8>>2];m=s[g>>2];n=s[g+4>>2];r=s[g+8>>2];o[k+76>>2]=0;s[k+72>>2]=-r;s[k+68>>2]=-n;s[k+64>>2]=-m;l[o[o[j>>2]+16>>2]](j,k- -64|0,k+32|0,v(-s[(k+80|0)+(e<<2)>>2]));e=e+1|0;if((e|0)!=(b|0)){continue}break}break w}d=0;if((b|0)>=2){p=s[k+80>>2];e=1;while(1){m=s[(k+80|0)+(e<<2)>>2];h=m>p;p=h?m:p;d=h?e:d;e=e+1|0;if((e|0)!=(b|0)){continue}break}}oK(b,k+208|0,f,d,k+32|0);h=(c|0)>3;b=0;while(1){d=o[(k+32|0)+(b<<2)>>2];e=(k+112|0)+u(d,12)|0;p=v(s[e>>2]+s[a>>2]);s[k+64>>2]=p;q=v(s[e+4>>2]+s[a+4>>2]);s[k+68>>2]=q;t=v(s[e+8>>2]+s[a+8>>2]);s[k+72>>2]=t;x:{if(!h){m=s[g>>2];n=s[g+4>>2];r=s[g+8>>2];o[k+28>>2]=0;s[k+24>>2]=-r;s[k+20>>2]=-n;s[k+16>>2]=-m;l[o[o[j>>2]+16>>2]](j,k+16|0,k- -64|0,v(-s[(k+80|0)+(d<<2)>>2]));break x}n=s[g>>2];r=s[g+4>>2];m=s[g+8>>2];o[k+28>>2]=0;s[k+24>>2]=-m;s[k+20>>2]=-r;s[k+16>>2]=-n;o[k+12>>2]=0;A=m;m=s[(k+80|0)+(d<<2)>>2];s[k+8>>2]=t-v(A*m);s[k+4>>2]=q-v(r*m);s[k>>2]=p-v(n*m);l[o[o[j>>2]+16>>2]](j,k+16|0,k,v(-m))}b=b+1|0;if((f|0)!=(b|0)){continue}break}}o[i>>2]=c}M=k+384|0}function Ni(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=v(0),q=0,r=v(0),t=v(0),x=v(0),z=0,A=0,B=0,C=v(0),D=0,E=v(0),F=0,G=v(0),H=v(0),I=0;D=M-16|0;M=D;d=o[a+1112>>2];if((d|0)>=1){while(1){Df(a,0);d=o[a+1112>>2];if((d|0)>0){continue}break}}e=o[a+712>>2];g=(e|0)>(b|0)?b:e;if((d|0)<(g|0)){if(o[a+1116>>2]<(g|0)){a:{if(!g){e=0;break a}o[7717]=o[7717]+1;e=l[o[6606]](g<<2,16)|0;f=o[a+1112>>2];if((f|0)<1){break a}b=0;while(1){j=b<<2;o[j+e>>2]=o[j+o[a+1120>>2]>>2];b=b+1|0;if((f|0)!=(b|0)){continue}break}}b=o[a+1120>>2];if(b){if(p[a+1124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1120>>2]=0}o[a+1120>>2]=e;o[a+1116>>2]=g;m[a+1124|0]=1}while(1){o[o[a+1120>>2]+(d<<2)>>2]=0;d=d+1|0;if((g|0)!=(d|0)){continue}break}}o[a+1112>>2]=g;b:{c:{d:{e:{f:{if((g|0)<1){break f}b=0;while(1){o[7717]=o[7717]+1;d=l[o[6606]](384,16)|0;m[d+36|0]=1;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;m[d+16|0]=1;o[d+32>>2]=0;m[d+56|0]=1;o[d+24>>2]=0;o[d+28>>2]=0;o[d+52>>2]=0;o[d+348>>2]=0;o[d+352>>2]=0;o[d+44>>2]=0;o[d+48>>2]=0;m[d+376|0]=0;o[d+368>>2]=1120403456;o[d+372>>2]=1008981770;o[d+356>>2]=0;o[d+360>>2]=0;o[d+364>>2]=0;e=b<<2;o[e+o[a+1120>>2]>>2]=d;m[o[e+o[a+1120>>2]>>2]+377|0]=1;b=b+1|0;g=o[a+1112>>2];if((b|0)<(g|0)){continue}break}if((g|0)<1){break f}e=o[a+712>>2];if((e|0)<=0){k=v(v(v(1)/v(e|0))*v(0));r=k;x=k;break e}d=g;while(1){j=o[a+720>>2]+u(h,104)|0;x=s[j+8>>2];C=s[j+16>>2];E=s[j+12>>2];b=o[o[a+1120>>2]+((u(h,29873)|0)%(d|0)<<2)>>2];f=o[b+24>>2];g:{if((f|0)!=o[b+28>>2]){break g}q=f?f<<1:1;if((f|0)>=(q|0)){break g}h:{if(!q){i=0;break h}o[7717]=o[7717]+1;i=l[o[6606]](q<<2,16)|0;f=o[b+24>>2]}if((f|0)>=1){d=0;while(1){e=d<<2;o[e+i>>2]=o[e+o[b+32>>2]>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[b+32>>2];if(d){if(p[b+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[b+24>>2]}o[b+32>>2]=0}o[b+32>>2]=i;o[b+28>>2]=q;m[b+36|0]=1;e=o[a+712>>2]}t=v(t+x);k=v(k+C);r=v(r+E);o[o[b+32>>2]+(f<<2)>>2]=j;o[b+24>>2]=f+1;h=h+1|0;if((h|0)<(e|0)){d=o[a+1112>>2];continue}break}j=0;if((g|0)<0){break c}x=k;k=v(v(1)/v(e|0));x=v(x*k);r=v(r*k);k=v(t*k);if(g){break e}g=0;j=0;break d}c=o[a+772>>2];if(c){if((g|0)<(c|0)){if(o[a+1116>>2]<(c|0)){o[7717]=o[7717]+1;d=l[o[6606]](c<<2,16)|0;e=o[a+1112>>2];if((e|0)>=1){b=0;while(1){f=b<<2;o[f+d>>2]=o[f+o[a+1120>>2]>>2];b=b+1|0;if((e|0)!=(b|0)){continue}break}}b=o[a+1120>>2];if(b){if(p[a+1124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1120>>2]=0}o[a+1120>>2]=d;o[a+1116>>2]=c;m[a+1124|0]=1}while(1){o[o[a+1120>>2]+(g<<2)>>2]=0;g=g+1|0;if((c|0)!=(g|0)){continue}break}}o[a+1112>>2]=c;if((c|0)>=1){b=0;while(1){o[7717]=o[7717]+1;c=l[o[6606]](384,16)|0;m[c+36|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;m[c+16|0]=1;o[c+32>>2]=0;m[c+56|0]=1;o[c+24>>2]=0;o[c+28>>2]=0;o[c+52>>2]=0;o[c+348>>2]=0;o[c+352>>2]=0;o[c+44>>2]=0;o[c+48>>2]=0;m[c+376|0]=0;o[c+368>>2]=1120403456;o[c+372>>2]=1008981770;o[c+356>>2]=0;o[c+360>>2]=0;o[c+364>>2]=0;d=b<<2;o[d+o[a+1120>>2]>>2]=c;m[o[d+o[a+1120>>2]>>2]+377|0]=1;b=b+1|0;if((b|0)<o[a+1112>>2]){continue}break}}if(o[a+772>>2]<1){break b}while(1){i=0;while(1){e=(o[a+780>>2]+u(h,104)|0)+(i<<2)|0;b=o[o[a+1120>>2]+(h<<2)>>2];f=o[b+24>>2];i:{if((f|0)!=o[b+28>>2]){break i}c=f?f<<1:1;if((f|0)>=(c|0)){break i}j:{if(!c){g=0;break j}o[7717]=o[7717]+1;g=l[o[6606]](c<<2,16)|0;f=o[b+24>>2]}if((f|0)>=1){d=0;while(1){j=d<<2;o[j+g>>2]=o[j+o[b+32>>2]>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[b+32>>2];if(d){if(p[b+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[b+24>>2]}o[b+32>>2]=0}o[b+32>>2]=g;o[b+28>>2]=c;m[b+36|0]=1}o[o[b+32>>2]+(f<<2)>>2]=o[e+8>>2];o[b+24>>2]=f+1;i=i+1|0;if((i|0)!=4){continue}break}h=h+1|0;if((h|0)<o[a+772>>2]){continue}break}break b}c=o[a+752>>2];if((g|0)<(c|0)){if(o[a+1116>>2]<(c|0)){k:{if(!c){e=0;break k}o[7717]=o[7717]+1;e=l[o[6606]](c<<2,16)|0;d=o[a+1112>>2];if((d|0)<1){break k}b=0;while(1){f=b<<2;o[f+e>>2]=o[f+o[a+1120>>2]>>2];b=b+1|0;if((d|0)!=(b|0)){continue}break}}b=o[a+1120>>2];if(b){if(p[a+1124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1120>>2]=0}o[a+1120>>2]=e;o[a+1116>>2]=c;m[a+1124|0]=1}while(1){o[o[a+1120>>2]+(g<<2)>>2]=0;g=g+1|0;if((c|0)!=(g|0)){continue}break}}o[a+1112>>2]=c;if((c|0)>=1){b=0;while(1){o[7717]=o[7717]+1;c=l[o[6606]](384,16)|0;m[c+36|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;m[c+16|0]=1;o[c+32>>2]=0;m[c+56|0]=1;o[c+24>>2]=0;o[c+28>>2]=0;o[c+52>>2]=0;o[c+348>>2]=0;o[c+352>>2]=0;o[c+44>>2]=0;o[c+48>>2]=0;m[c+376|0]=0;o[c+368>>2]=1120403456;o[c+372>>2]=1008981770;o[c+356>>2]=0;o[c+360>>2]=0;o[c+364>>2]=0;d=b<<2;o[d+o[a+1120>>2]>>2]=c;m[o[d+o[a+1120>>2]>>2]+377|0]=1;b=b+1|0;if((b|0)<o[a+1112>>2]){continue}break}}if(o[a+752>>2]<1){break b}while(1){i=0;while(1){e=(o[a+760>>2]+u(h,44)|0)+(i<<2)|0;b=o[o[a+1120>>2]+(h<<2)>>2];f=o[b+24>>2];l:{if((f|0)!=o[b+28>>2]){break l}c=f?f<<1:1;if((f|0)>=(c|0)){break l}m:{if(!c){g=0;break m}o[7717]=o[7717]+1;g=l[o[6606]](c<<2,16)|0;f=o[b+24>>2]}if((f|0)>=1){d=0;while(1){j=d<<2;o[j+g>>2]=o[j+o[b+32>>2]>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[b+32>>2];if(d){if(p[b+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[b+24>>2]}o[b+32>>2]=0}o[b+32>>2]=g;o[b+28>>2]=c;m[b+36|0]=1}o[o[b+32>>2]+(f<<2)>>2]=o[e+8>>2];o[b+24>>2]=f+1;i=i+1|0;if((i|0)!=3){continue}break}h=h+1|0;if((h|0)<o[a+752>>2]){continue}break}break b}o[7717]=o[7717]+1;j=l[o[6606]](g<<4,16)|0}b=0;while(1){d=(b<<4)+j|0;o[d+12>>2]=0;s[d+8>>2]=x;s[d+4>>2]=r;s[d>>2]=k;b=b+1|0;if((g|0)!=(b|0)){continue}break}}b=0;while(1){d=b;b=d+1|0;x=v(v(2)-v(y(v(v(d|0)*v(.0625)),v(1))));z=0;i=0;while(1){h=i<<2;d=o[h+o[a+1120>>2]>>2];e=o[d+24>>2];n:{if((e|0)<1){k=v(0);r=v(0);t=v(0);break n}q=o[d+32>>2];t=v(0);d=0;r=v(0);k=v(0);while(1){f=o[q+(d<<2)>>2];k=v(k+s[f+8>>2]);t=v(t+s[f+16>>2]);r=v(r+s[f+12>>2]);d=d+1|0;if((e|0)!=(d|0)){continue}break}}if(e){d=(i<<4)+j|0;o[d+12>>2]=0;C=s[d+8>>2];E=t;t=v(v(1)/v(e|0));G=v(C+v(x*v(v(E*t)-C)));s[d+8>>2]=G;E=s[d+4>>2];H=v(E+v(x*v(v(r*t)-E)));s[d+4>>2]=H;r=s[d>>2];k=v(r+v(x*v(v(k*t)-r)));s[d>>2]=k;k=v(k-r);r=v(k*k);k=v(H-E);r=v(r+v(k*k));k=v(G-C);q=v(r+v(k*k))>v(1.1920928955078125e-7);f=o[h+o[a+1120>>2]>>2];d=o[f+24>>2];if((d|0)<=-1){if(o[f+28>>2]<=-1){e=o[f+32>>2];if(e){if(p[f+36|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[f+32>>2]=0}o[f+28>>2]=0;o[f+32>>2]=0;m[f+36|0]=1}while(1){o[o[f+32>>2]+(d<<2)>>2]=0;e=d+1|0;h=e>>>0>=d>>>0;d=e;if(h){continue}break}}o[f+24>>2]=0;z=q|z}i=i+1|0;if((i|0)!=(g|0)){continue}break}q=0;e=o[a+712>>2];if((e|0)>0){while(1){B=o[a+720>>2]+u(q,104)|0;f=0;if((g|0)>=2){x=s[B+8>>2];r=s[B+12>>2];t=s[B+16>>2];k=v(v(v(w(v(s[j>>2]-x)))+v(w(v(s[j+4>>2]-r))))+v(w(v(s[j+8>>2]-t))));d=1;while(1){i=(d<<4)+j|0;C=v(v(v(w(v(s[i>>2]-x)))+v(w(v(s[i+4>>2]-r))))+v(w(v(s[i+8>>2]-t))));i=C<k;k=i?C:k;f=i?d:f;d=d+1|0;if((g|0)!=(d|0)){continue}break}}h=o[o[a+1120>>2]+(f<<2)>>2];f=o[h+24>>2];o:{if((f|0)!=o[h+28>>2]){break o}A=f?f<<1:1;if((f|0)>=(A|0)){break o}p:{if(!A){i=0;break p}o[7717]=o[7717]+1;i=l[o[6606]](A<<2,16)|0;f=o[h+24>>2]}if((f|0)>=1){d=0;while(1){e=d<<2;o[e+i>>2]=o[e+o[h+32>>2]>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[h+32>>2];if(d){if(p[h+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[h+24>>2]}o[h+32>>2]=0}o[h+32>>2]=i;o[h+28>>2]=A;m[h+36|0]=1;e=o[a+712>>2]}o[o[h+32>>2]+(f<<2)>>2]=B;o[h+24>>2]=f+1;q=q+1|0;if((q|0)<(e|0)){continue}break}}if((b|0)<(c|0)&z){continue}break}q:{if((e|0)<1){q=0;break q}o[7717]=o[7717]+1;b=e<<2;q=l[o[6606]](b,16)|0;$(q,255,b)}e=o[a+1112>>2];if((e|0)>=1){f=o[a+1120>>2];b=0;while(1){c=o[f+(b<<2)>>2];if(o[c+24>>2]>=1){e=o[c+32>>2];g=o[a+720>>2];d=0;while(1){o[((o[e+(d<<2)>>2]-g|0)/104<<2)+q>>2]=b;d=d+1|0;if((d|0)<o[c+24>>2]){continue}break}e=o[a+1112>>2]}b=b+1|0;if((b|0)<(e|0)){continue}break}}if(o[a+752>>2]>=1){c=0;while(1){b=o[a+760>>2]+u(c,44)|0;e=o[a+720>>2];d=(o[b+8>>2]-e|0)/104|0;o[D+4>>2]=d;o[D+8>>2]=(o[b+12>>2]-e|0)/104;o[D+12>>2]=(o[b+16>>2]-e|0)/104;z=0;while(1){g=o[(d<<2)+q>>2];i=1;while(1){b=o[(D+4|0)+((i+z>>>0)%3<<2)>>2];r:{if((g|0)==o[(b<<2)+q>>2]){break r}B=o[a+720>>2]+u(b,104)|0;e=o[o[a+1120>>2]+(g<<2)>>2];b=o[e+24>>2];s:{if((b|0)<1){break s}f=o[e+32>>2];d=0;while(1){if((B|0)!=o[f+(d<<2)>>2]){d=d+1|0;if((d|0)!=(b|0)){continue}break s}break}if((b|0)!=(d|0)){break r}}t:{if(o[e+28>>2]!=(b|0)){break t}f=b?b<<1:1;if((b|0)>=(f|0)){break t}u:{if(!f){h=0;break u}o[7717]=o[7717]+1;h=l[o[6606]](f<<2,16)|0;b=o[e+24>>2]}if((b|0)>=1){d=0;while(1){A=d<<2;o[A+h>>2]=o[A+o[e+32>>2]>>2];d=d+1|0;if((d|0)!=(b|0)){continue}break}}d=o[e+32>>2];if(d){if(p[e+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}b=o[e+24>>2]}o[e+32>>2]=0}o[e+32>>2]=h;o[e+28>>2]=f;m[e+36|0]=1}o[o[e+32>>2]+(b<<2)>>2]=B;o[e+24>>2]=b+1}i=i+1|0;if((i|0)!=3){continue}break}z=z+1|0;if((z|0)!=3){d=o[(D+4|0)+(z<<2)>>2];continue}break}c=c+1|0;if((c|0)<o[a+752>>2]){continue}break}e=o[a+1112>>2]}if((e|0)>=2){d=0;o[7717]=o[7717]+1;c=l[o[6606]](384,16)|0;n[c+376>>1]=0;o[c+368>>2]=1120403456;o[c+372>>2]=1008981770;o[c+348>>2]=0;o[c+352>>2]=0;o[c+12>>2]=0;m[c+16|0]=1;m[c+36|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;o[c+32>>2]=0;m[c+56|0]=1;o[c+24>>2]=0;o[c+28>>2]=0;o[c+52>>2]=0;o[c+44>>2]=0;o[c+48>>2]=0;o[c+364>>2]=0;o[c+356>>2]=0;o[c+360>>2]=0;e=o[a+712>>2];v:{if((e|0)<1){break v}o[7717]=o[7717]+1;b=l[o[6606]](e<<2,16)|0;f=o[c+24>>2];if((f|0)>=1){while(1){g=d<<2;o[g+b>>2]=o[g+o[c+32>>2]>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[c+32>>2];if(d){if(p[c+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+32>>2]=0}o[c+32>>2]=b;m[c+36|0]=1;o[c+28>>2]=e;f=o[a+712>>2];if((f|0)<1){break v}d=o[c+24>>2];i=0;while(1){h=o[a+720>>2]+u(i,104)|0;w:{if((d|0)!=(e|0)){break w}b=e?e<<1:1;if((e|0)>=(b|0)){d=e;break w}d=0;g=0;if(b){o[7717]=o[7717]+1;g=l[o[6606]](b<<2,16)|0;e=o[c+24>>2]}if((e|0)>=1){while(1){f=d<<2;o[f+g>>2]=o[f+o[c+32>>2]>>2];d=d+1|0;if((e|0)!=(d|0)){continue}break}}d=o[c+32>>2];if(d){if(p[c+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[c+24>>2]}o[c+32>>2]=0}d=e;o[c+32>>2]=g;m[c+36|0]=1;o[c+28>>2]=b;f=o[a+712>>2];e=b}o[o[c+32>>2]+(d<<2)>>2]=h;d=d+1|0;o[c+24>>2]=d;i=i+1|0;if((i|0)<(f|0)){continue}break}}e=o[a+1112>>2];x:{if((e|0)!=o[a+1116>>2]){break x}b=e?e<<1:1;if((e|0)>=(b|0)){break x}d=0;g=0;if(b){o[7717]=o[7717]+1;g=l[o[6606]](b<<2,16)|0;e=o[a+1112>>2]}if((e|0)>=1){while(1){f=d<<2;o[f+g>>2]=o[f+o[a+1120>>2]>>2];d=d+1|0;if((e|0)!=(d|0)){continue}break}}d=o[a+1120>>2];if(d){if(p[a+1124|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[a+1112>>2]}o[a+1120>>2]=0}o[a+1120>>2]=g;o[a+1116>>2]=b;m[a+1124|0]=1}d=e<<2;o[d+o[a+1120>>2]>>2]=c;e=e+1|0;o[a+1112>>2]=e;b=o[a+1120>>2];c=o[b>>2];f=b;b=b+d|0;o[f>>2]=o[b>>2];o[b>>2]=c}if((e|0)>=1){d=0;while(1){if(!o[o[o[a+1120>>2]+(d<<2)>>2]+24>>2]){Df(a,d);e=o[a+1112>>2];d=d+ -1|0}d=d+1|0;if((d|0)<(e|0)){continue}break}}if(q){if(q){o[7718]=o[7718]+1;l[o[6607]](q)}}if(!j){break b}if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}y:{if(!o[a+1112>>2]){q=0;break y}Zz(a);Mi(a);q=o[a+1112>>2];e=u(q,q);c=o[a+1132>>2];if((e|0)>(c|0)){z:{if(o[a+1136>>2]>=(e|0)){b=o[a+1140>>2];break z}d=0;f=c;b=0;if(e){o[7717]=o[7717]+1;b=l[o[6606]](e,16)|0;f=o[a+1132>>2]}g=o[a+1140>>2];A:{if((f|0)>=1){while(1){m[b+d|0]=p[d+g|0];d=d+1|0;if((f|0)!=(d|0)){continue}break A}}if(g){break A}o[a+1140>>2]=b;o[a+1136>>2]=e;m[a+1144|0]=1;break z}if(p[a+1144|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+1140>>2]=b;m[a+1144|0]=1;o[a+1136>>2]=e}$(b+c|0,0,e-c|0);q=o[a+1112>>2]}o[a+1132>>2]=e;if((q|0)<1){break y}g=o[a+1140>>2];a=o[a+1120>>2];j=0;while(1){b=o[a+(j<<2)>>2];o[b+380>>2]=j;c=o[b+24>>2];z=(c|0)>0?c:0;h=0;while(1){I=g+(u(h,q)+j|0)|0;B:{if((c|0)>=1){A=o[a+(h<<2)>>2];e=o[A+24>>2];i=0;while(1){if((e|0)>=1){f=o[o[b+32>>2]+(i<<2)>>2];B=o[A+32>>2];d=0;while(1){F=1;if((f|0)==o[B+(d<<2)>>2]){break B}d=d+1|0;if((d|0)<(e|0)){continue}break}}i=i+1|0;if((z|0)!=(i|0)){continue}break}}F=0}m[I|0]=F;h=h+1|0;if((q|0)!=(h|0)){continue}break}j=j+1|0;if((j|0)!=(q|0)){continue}break}}M=D+16|0;return q}function ff(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;l=M-16|0;M=l;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{if(a>>>0<=244){f=o[7724];g=a>>>0<11?16:a+11&-8;a=g>>>3|0;b=f>>>a|0;if(b&3){c=a+((b^-1)&1)|0;e=c<<3;b=o[e+30944>>2];a=b+8|0;d=o[b+8>>2];e=e+30936|0;l:{if((d|0)==(e|0)){o[7724]=uL(c)&f;break l}o[d+12>>2]=e;o[e+8>>2]=d}c=c<<3;o[b+4>>2]=c|3;b=b+c|0;o[b+4>>2]=o[b+4>>2]|1;break a}i=o[7726];if(g>>>0<=i>>>0){break k}if(b){c=2<<a;a=(0-c|c)&b<<a;a=(0-a&a)+ -1|0;b=a>>>12&16;c=b;a=a>>>b|0;b=a>>>5&8;c=c|b;a=a>>>b|0;b=a>>>2&4;c=c|b;a=a>>>b|0;b=a>>>1&2;c=c|b;a=a>>>b|0;b=a>>>1&1;c=(c|b)+(a>>>b|0)|0;d=c<<3;b=o[d+30944>>2];a=o[b+8>>2];d=d+30936|0;m:{if((a|0)==(d|0)){f=uL(c)&f;o[7724]=f;break m}o[a+12>>2]=d;o[d+8>>2]=a}a=b+8|0;o[b+4>>2]=g|3;h=b+g|0;c=c<<3;e=c-g|0;o[h+4>>2]=e|1;o[b+c>>2]=e;if(i){c=i>>>3|0;b=(c<<3)+30936|0;d=o[7729];c=1<<c;n:{if(!(c&f)){o[7724]=c|f;c=b;break n}c=o[b+8>>2]}o[b+8>>2]=d;o[c+12>>2]=d;o[d+12>>2]=b;o[d+8>>2]=c}o[7729]=h;o[7726]=e;break a}k=o[7725];if(!k){break k}a=(k&0-k)+ -1|0;b=a>>>12&16;c=b;a=a>>>b|0;b=a>>>5&8;c=c|b;a=a>>>b|0;b=a>>>2&4;c=c|b;a=a>>>b|0;b=a>>>1&2;c=c|b;a=a>>>b|0;b=a>>>1&1;b=o[((c|b)+(a>>>b|0)<<2)+31200>>2];d=(o[b+4>>2]&-8)-g|0;c=b;while(1){o:{a=o[c+16>>2];if(!a){a=o[c+20>>2];if(!a){break o}}e=(o[a+4>>2]&-8)-g|0;c=e>>>0<d>>>0;d=c?e:d;b=c?a:b;c=a;continue}break}j=o[b+24>>2];e=o[b+12>>2];if((e|0)!=(b|0)){a=o[b+8>>2];o[a+12>>2]=e;o[e+8>>2]=a;break b}c=b+20|0;a=o[c>>2];if(!a){a=o[b+16>>2];if(!a){break j}c=b+16|0}while(1){h=c;e=a;c=a+20|0;a=o[c>>2];if(a){continue}c=e+16|0;a=o[e+16>>2];if(a){continue}break}o[h>>2]=0;break b}g=-1;if(a>>>0>4294967231){break k}b=a+11|0;g=b&-8;i=o[7725];if(!i){break k}c=0-g|0;b=b>>>8|0;f=0;p:{if(!b){break p}f=31;if(g>>>0>16777215){break p}d=b+1048320>>>16&8;b=b<<d;a=b+520192>>>16&4;f=b<<a;b=f+245760>>>16&2;a=(f<<b>>>15|0)-(b|(a|d))|0;f=(a<<1|g>>>a+21&1)+28|0}d=o[(f<<2)+31200>>2];q:{r:{s:{if(!d){a=0;break s}b=g<<((f|0)==31?0:25-(f>>>1|0)|0);a=0;while(1){t:{h=(o[d+4>>2]&-8)-g|0;if(h>>>0>=c>>>0){break t}e=d;c=h;if(c){break t}c=0;a=d;break r}h=o[d+20>>2];d=o[((b>>>29&4)+d|0)+16>>2];a=h?(h|0)==(d|0)?a:h:a;b=b<<((d|0)!=0);if(d){continue}break}}if(!(a|e)){a=2<<f;a=(0-a|a)&i;if(!a){break k}a=(a&0-a)+ -1|0;b=a>>>12&16;d=b;a=a>>>b|0;b=a>>>5&8;d=d|b;a=a>>>b|0;b=a>>>2&4;d=d|b;a=a>>>b|0;b=a>>>1&2;d=d|b;a=a>>>b|0;b=a>>>1&1;a=o[((d|b)+(a>>>b|0)<<2)+31200>>2]}if(!a){break q}}while(1){d=(o[a+4>>2]&-8)-g|0;b=d>>>0<c>>>0;c=b?d:c;e=b?a:e;b=o[a+16>>2];if(b){a=b}else{a=o[a+20>>2]}if(a){continue}break}}if(!e|c>>>0>=o[7726]-g>>>0){break k}h=o[e+24>>2];b=o[e+12>>2];if((e|0)!=(b|0)){a=o[e+8>>2];o[a+12>>2]=b;o[b+8>>2]=a;break c}d=e+20|0;a=o[d>>2];if(!a){a=o[e+16>>2];if(!a){break i}d=e+16|0}while(1){f=d;b=a;d=a+20|0;a=o[d>>2];if(a){continue}d=b+16|0;a=o[b+16>>2];if(a){continue}break}o[f>>2]=0;break c}b=o[7726];if(b>>>0>=g>>>0){a=o[7729];c=b-g|0;u:{if(c>>>0>=16){o[7726]=c;d=a+g|0;o[7729]=d;o[d+4>>2]=c|1;o[a+b>>2]=c;o[a+4>>2]=g|3;break u}o[7729]=0;o[7726]=0;o[a+4>>2]=b|3;b=a+b|0;o[b+4>>2]=o[b+4>>2]|1}a=a+8|0;break a}d=o[7727];if(d>>>0>g>>>0){b=d-g|0;o[7727]=b;a=o[7730];c=a+g|0;o[7730]=c;o[c+4>>2]=b|1;o[a+4>>2]=g|3;a=a+8|0;break a}a=0;e=g+47|0;c=e;if(o[7842]){b=o[7844]}else{o[7845]=-1;o[7846]=-1;o[7843]=4096;o[7844]=4096;o[7842]=l+12&-16^1431655768;o[7847]=0;o[7835]=0;b=4096}f=c+b|0;h=0-b|0;c=f&h;if(c>>>0<=g>>>0){break a}b=o[7834];if(b){i=o[7832];j=i+c|0;if(j>>>0<=i>>>0|j>>>0>b>>>0){break a}}if(p[31340]&4){break f}v:{w:{b=o[7730];if(b){a=31344;while(1){i=o[a>>2];if(i+o[a+4>>2]>>>0>b>>>0?i>>>0<=b>>>0:0){break w}a=o[a+8>>2];if(a){continue}break}}b=Bb(0);if((b|0)==-1){break g}f=c;a=o[7843];d=a+ -1|0;if(d&b){f=(c-b|0)+(b+d&0-a)|0}if(f>>>0<=g>>>0|f>>>0>2147483646){break g}a=o[7834];if(a){d=o[7832];h=d+f|0;if(h>>>0<=d>>>0|h>>>0>a>>>0){break g}}a=Bb(f);if((b|0)!=(a|0)){break v}break e}f=h&f-d;if(f>>>0>2147483646){break g}b=Bb(f);if((b|0)==(o[a>>2]+o[a+4>>2]|0)){break h}a=b}if(!((a|0)==-1|g+48>>>0<=f>>>0)){b=o[7844];b=b+(e-f|0)&0-b;if(b>>>0>2147483646){b=a;break e}if((Bb(b)|0)!=-1){f=b+f|0;b=a;break e}Bb(0-f|0);break g}b=a;if((a|0)!=-1){break e}break g}e=0;break b}b=0;break c}if((b|0)!=-1){break e}}o[7835]=o[7835]|4}if(c>>>0>2147483646){break d}b=Bb(c);a=Bb(0);if(b>>>0>=a>>>0|(b|0)==-1|(a|0)==-1){break d}f=a-b|0;if(f>>>0<=g+40>>>0){break d}}a=o[7832]+f|0;o[7832]=a;if(a>>>0>r[7833]){o[7833]=a}x:{y:{z:{c=o[7730];if(c){a=31344;while(1){d=o[a>>2];e=o[a+4>>2];if((d+e|0)==(b|0)){break z}a=o[a+8>>2];if(a){continue}break}break y}a=o[7728];if(!(b>>>0>=a>>>0?a:0)){o[7728]=b}a=0;o[7837]=f;o[7836]=b;o[7732]=-1;o[7733]=o[7842];o[7839]=0;while(1){c=a<<3;d=c+30936|0;o[c+30944>>2]=d;o[c+30948>>2]=d;a=a+1|0;if((a|0)!=32){continue}break}a=f+ -40|0;c=b+8&7?-8-b&7:0;d=a-c|0;o[7727]=d;c=b+c|0;o[7730]=c;o[c+4>>2]=d|1;o[(a+b|0)+4>>2]=40;o[7731]=o[7846];break x}if(p[a+12|0]&8|b>>>0<=c>>>0|d>>>0>c>>>0){break y}o[a+4>>2]=e+f;a=c+8&7?-8-c&7:0;b=a+c|0;o[7730]=b;d=o[7727]+f|0;a=d-a|0;o[7727]=a;o[b+4>>2]=a|1;o[(c+d|0)+4>>2]=40;o[7731]=o[7846];break x}e=o[7728];if(b>>>0<e>>>0){o[7728]=b;e=0}d=b+f|0;a=31344;A:{B:{C:{D:{E:{F:{while(1){if((d|0)!=o[a>>2]){a=o[a+8>>2];if(a){continue}break F}break}if(!(p[a+12|0]&8)){break E}}a=31344;while(1){d=o[a>>2];if(d>>>0<=c>>>0){e=d+o[a+4>>2]|0;if(e>>>0>c>>>0){break D}}a=o[a+8>>2];continue}}o[a>>2]=b;o[a+4>>2]=o[a+4>>2]+f;j=(b+8&7?-8-b&7:0)+b|0;o[j+4>>2]=g|3;b=d+(d+8&7?-8-d&7:0)|0;a=(b-j|0)-g|0;h=g+j|0;if((b|0)==(c|0)){o[7730]=h;a=o[7727]+a|0;o[7727]=a;o[h+4>>2]=a|1;break B}if(o[7729]==(b|0)){o[7729]=h;a=o[7726]+a|0;o[7726]=a;o[h+4>>2]=a|1;o[a+h>>2]=a;break B}c=o[b+4>>2];if((c&3)==1){k=c&-8;G:{if(c>>>0<=255){e=c>>>3|0;c=o[b+8>>2];d=o[b+12>>2];if((d|0)==(c|0)){o[7724]=o[7724]&uL(e);break G}o[c+12>>2]=d;o[d+8>>2]=c;break G}i=o[b+24>>2];f=o[b+12>>2];H:{if((f|0)!=(b|0)){c=o[b+8>>2];o[c+12>>2]=f;o[f+8>>2]=c;break H}I:{d=b+20|0;g=o[d>>2];if(g){break I}d=b+16|0;g=o[d>>2];if(g){break I}f=0;break H}while(1){c=d;f=g;d=g+20|0;g=o[d>>2];if(g){continue}d=f+16|0;g=o[f+16>>2];if(g){continue}break}o[c>>2]=0}if(!i){break G}c=o[b+28>>2];d=(c<<2)+31200|0;J:{if(o[d>>2]==(b|0)){o[d>>2]=f;if(f){break J}o[7725]=o[7725]&uL(c);break G}o[i+(o[i+16>>2]==(b|0)?16:20)>>2]=f;if(!f){break G}}o[f+24>>2]=i;c=o[b+16>>2];if(c){o[f+16>>2]=c;o[c+24>>2]=f}c=o[b+20>>2];if(!c){break G}o[f+20>>2]=c;o[c+24>>2]=f}b=b+k|0;a=a+k|0}o[b+4>>2]=o[b+4>>2]&-2;o[h+4>>2]=a|1;o[a+h>>2]=a;if(a>>>0<=255){b=a>>>3|0;a=(b<<3)+30936|0;c=o[7724];b=1<<b;K:{if(!(c&b)){o[7724]=b|c;b=a;break K}b=o[a+8>>2]}o[a+8>>2]=h;o[b+12>>2]=h;o[h+12>>2]=a;o[h+8>>2]=b;break B}c=h;d=a>>>8|0;b=0;L:{if(!d){break L}b=31;if(a>>>0>16777215){break L}e=d+1048320>>>16&8;d=d<<e;b=d+520192>>>16&4;g=d<<b;d=g+245760>>>16&2;b=(g<<d>>>15|0)-(d|(b|e))|0;b=(b<<1|a>>>b+21&1)+28|0}o[c+28>>2]=b;o[h+16>>2]=0;o[h+20>>2]=0;c=(b<<2)+31200|0;d=o[7725];e=1<<b;M:{if(!(d&e)){o[7725]=d|e;o[c>>2]=h;break M}d=a<<((b|0)==31?0:25-(b>>>1|0)|0);b=o[c>>2];while(1){c=b;if((o[b+4>>2]&-8)==(a|0)){break C}b=d>>>29|0;d=d<<1;e=(b&4)+c|0;b=o[e+16>>2];if(b){continue}break}o[e+16>>2]=h}o[h+24>>2]=c;o[h+12>>2]=h;o[h+8>>2]=h;break B}a=f+ -40|0;d=b+8&7?-8-b&7:0;h=a-d|0;o[7727]=h;d=b+d|0;o[7730]=d;o[d+4>>2]=h|1;o[(a+b|0)+4>>2]=40;o[7731]=o[7846];a=(e+(e+ -39&7?39-e&7:0)|0)+ -47|0;d=a>>>0<c+16>>>0?c:a;o[d+4>>2]=27;a=o[7839];o[d+16>>2]=o[7838];o[d+20>>2]=a;a=o[7837];o[d+8>>2]=o[7836];o[d+12>>2]=a;o[7838]=d+8;o[7837]=f;o[7836]=b;o[7839]=0;a=d+24|0;while(1){o[a+4>>2]=7;b=a+8|0;a=a+4|0;if(e>>>0>b>>>0){continue}break}if((c|0)==(d|0)){break x}o[d+4>>2]=o[d+4>>2]&-2;e=d-c|0;o[c+4>>2]=e|1;o[d>>2]=e;if(e>>>0<=255){b=e>>>3|0;a=(b<<3)+30936|0;d=o[7724];b=1<<b;N:{if(!(d&b)){o[7724]=b|d;b=a;break N}b=o[a+8>>2]}o[a+8>>2]=c;o[b+12>>2]=c;o[c+12>>2]=a;o[c+8>>2]=b;break x}o[c+16>>2]=0;o[c+20>>2]=0;b=c;d=e>>>8|0;a=0;O:{if(!d){break O}a=31;if(e>>>0>16777215){break O}f=d+1048320>>>16&8;d=d<<f;a=d+520192>>>16&4;h=d<<a;d=h+245760>>>16&2;a=(h<<d>>>15|0)-(d|(a|f))|0;a=(a<<1|e>>>a+21&1)+28|0}o[b+28>>2]=a;b=(a<<2)+31200|0;d=o[7725];f=1<<a;P:{if(!(d&f)){o[7725]=d|f;o[b>>2]=c;o[c+24>>2]=b;break P}a=e<<((a|0)==31?0:25-(a>>>1|0)|0);b=o[b>>2];while(1){d=b;if((e|0)==(o[b+4>>2]&-8)){break A}b=a>>>29|0;a=a<<1;f=d+(b&4)|0;b=o[f+16>>2];if(b){continue}break}o[f+16>>2]=c;o[c+24>>2]=d}o[c+12>>2]=c;o[c+8>>2]=c;break x}a=o[c+8>>2];o[a+12>>2]=h;o[c+8>>2]=h;o[h+24>>2]=0;o[h+12>>2]=c;o[h+8>>2]=a}a=j+8|0;break a}a=o[d+8>>2];o[a+12>>2]=c;o[d+8>>2]=c;o[c+24>>2]=0;o[c+12>>2]=d;o[c+8>>2]=a}a=o[7727];if(a>>>0<=g>>>0){break d}b=a-g|0;o[7727]=b;a=o[7730];c=a+g|0;o[7730]=c;o[c+4>>2]=b|1;o[a+4>>2]=g|3;a=a+8|0;break a}o[7722]=48;a=0;break a}Q:{if(!h){break Q}a=o[e+28>>2];d=(a<<2)+31200|0;R:{if(o[d>>2]==(e|0)){o[d>>2]=b;if(b){break R}i=uL(a)&i;o[7725]=i;break Q}o[h+(o[h+16>>2]==(e|0)?16:20)>>2]=b;if(!b){break Q}}o[b+24>>2]=h;a=o[e+16>>2];if(a){o[b+16>>2]=a;o[a+24>>2]=b}a=o[e+20>>2];if(!a){break Q}o[b+20>>2]=a;o[a+24>>2]=b}S:{if(c>>>0<=15){a=c+g|0;o[e+4>>2]=a|3;a=a+e|0;o[a+4>>2]=o[a+4>>2]|1;break S}o[e+4>>2]=g|3;d=e+g|0;o[d+4>>2]=c|1;o[c+d>>2]=c;if(c>>>0<=255){b=c>>>3|0;a=(b<<3)+30936|0;c=o[7724];b=1<<b;T:{if(!(c&b)){o[7724]=b|c;b=a;break T}b=o[a+8>>2]}o[a+8>>2]=d;o[b+12>>2]=d;o[d+12>>2]=a;o[d+8>>2]=b;break S}b=d;g=c>>>8|0;a=0;U:{if(!g){break U}a=31;if(c>>>0>16777215){break U}f=g+1048320>>>16&8;g=g<<f;a=g+520192>>>16&4;h=g<<a;g=h+245760>>>16&2;a=(h<<g>>>15|0)-(g|(a|f))|0;a=(a<<1|c>>>a+21&1)+28|0}o[b+28>>2]=a;o[d+16>>2]=0;o[d+20>>2]=0;b=(a<<2)+31200|0;V:{g=1<<a;W:{if(!(g&i)){o[7725]=g|i;o[b>>2]=d;break W}a=c<<((a|0)==31?0:25-(a>>>1|0)|0);g=o[b>>2];while(1){b=g;if((o[b+4>>2]&-8)==(c|0)){break V}g=a>>>29|0;a=a<<1;f=(g&4)+b|0;g=o[f+16>>2];if(g){continue}break}o[f+16>>2]=d}o[d+24>>2]=b;o[d+12>>2]=d;o[d+8>>2]=d;break S}a=o[b+8>>2];o[a+12>>2]=d;o[b+8>>2]=d;o[d+24>>2]=0;o[d+12>>2]=b;o[d+8>>2]=a}a=e+8|0;break a}X:{if(!j){break X}a=o[b+28>>2];c=(a<<2)+31200|0;Y:{if(o[c>>2]==(b|0)){o[c>>2]=e;if(e){break Y}o[7725]=uL(a)&k;break X}o[j+(o[j+16>>2]==(b|0)?16:20)>>2]=e;if(!e){break X}}o[e+24>>2]=j;a=o[b+16>>2];if(a){o[e+16>>2]=a;o[a+24>>2]=e}a=o[b+20>>2];if(!a){break X}o[e+20>>2]=a;o[a+24>>2]=e}Z:{if(d>>>0<=15){a=d+g|0;o[b+4>>2]=a|3;a=a+b|0;o[a+4>>2]=o[a+4>>2]|1;break Z}o[b+4>>2]=g|3;g=b+g|0;o[g+4>>2]=d|1;o[d+g>>2]=d;if(i){c=i>>>3|0;a=(c<<3)+30936|0;e=o[7729];c=1<<c;_:{if(!(c&f)){o[7724]=c|f;c=a;break _}c=o[a+8>>2]}o[a+8>>2]=e;o[c+12>>2]=e;o[e+12>>2]=a;o[e+8>>2]=c}o[7729]=g;o[7726]=d}a=b+8|0}M=l+16|0;return a|0}function Hf(a,b,c,d,e){var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=v(0),ia=v(0),ja=v(0),ka=v(0),la=v(0),ma=v(0),na=v(0),oa=v(0),pa=v(0),sa=v(0),ta=v(0),ua=v(0),va=v(0),wa=v(0),xa=v(0),za=v(0),Aa=v(0),Ba=v(0),Ca=v(0),Da=v(0),Ea=v(0),Fa=v(0),Ga=v(0),Ha=v(0),Ia=0,Ja=v(0),Ka=v(0),La=v(0),Ma=v(0),Na=v(0),Oa=v(0);k=M-80|0;M=k;m[a+525|0]=0;m[a+526|0]=0;o[a+500>>2]=0;o[a+504>>2]=0;a:{if(!(p[a+527|0]|!p[a+552|0])){Ja=s[c+52>>2];Ka=s[c+56>>2];S=s[a+412>>2];u=s[a+416>>2];K=s[a+420>>2];La=s[b+52>>2];Ma=s[b+56>>2];I=s[a+348>>2];A=s[a+352>>2];P=s[a+356>>2];h=s[c+20>>2];j=s[c+24>>2];l=s[b+20>>2];D=s[b+24>>2];T=s[a+308>>2];V=s[a+324>>2];W=s[a+340>>2];X=s[a+316>>2];Y=s[a+332>>2];Z=s[a+304>>2];E=s[b+36>>2];_=s[a+320>>2];q=s[b+40>>2];ga=s[a+336>>2];ha=s[a+372>>2];ia=s[a+388>>2];ja=s[a+404>>2];ka=s[a+368>>2];sa=s[a+384>>2];ta=s[a+400>>2];i=s[a+568>>2];G=s[a+564>>2];f=s[a+560>>2];Q=s[c+36>>2];ua=s[a+380>>2];R=s[c+40>>2];va=s[a+396>>2];Na=s[c+48>>2];L=s[c+8>>2];B=s[c+4>>2];F=s[c>>2];Oa=s[b+48>>2];t=s[b+8>>2];H=s[b>>2];N=s[b+4>>2];x=s[c+16>>2];J=s[b+16>>2];wa=s[a+300>>2];r=s[b+32>>2];g=s[a+556>>2];n=s[c+32>>2];xa=s[a+364>>2];o[k+76>>2]=0;o[k+60>>2]=0;o[k+44>>2]=0;la=v(v(v(T*r)+v(V*E))+v(W*q));O=v(v(2)/v(v(v(v(g*g)+v(f*f))+v(G*G))+v(i*i)));$=v(g*O);aa=v(g*$);U=v(f*O);ba=v(f*U);za=v(v(1)-v(aa+ba));ma=v(v(v(ha*n)+v(ia*Q))+v(ja*R));O=v(G*O);ca=v(g*O);da=v(i*U);Aa=v(ca+da);na=v(v(v(xa*n)+v(ua*Q))+v(va*R));ea=v(f*O);fa=v(i*$);Ba=v(ea-fa);f=v(v(v(ka*n)+v(sa*Q))+v(ta*R));$=v(v(za*ma)+v(v(Aa*na)+v(Ba*f)));oa=v(v(v(wa*r)+v(X*E))+v(Y*q));Ca=v(ca-da);G=v(G*O);Da=v(v(1)-v(ba+G));U=v(g*U);O=v(i*O);Ea=v(U+O);g=v(v(Ca*ma)+v(v(Da*na)+v(Ea*f)));i=v(v(v(Z*r)+v(_*E))+v(ga*q));Fa=v(ea+fa);Ga=v(U-O);Ha=v(v(1)-v(aa+G));G=v(v(Fa*ma)+v(v(Ga*na)+v(Ha*f)));s[k+56>>2]=v(la*$)+v(v(oa*g)+v(i*G));O=v(v(v(T*J)+v(V*l))+v(W*D));U=v(v(v(wa*J)+v(X*l))+v(Y*D));aa=v(v(v(Z*J)+v(_*l))+v(ga*D));s[k+52>>2]=v(O*$)+v(v(U*g)+v(aa*G));ba=v(v(v(ha*x)+v(ia*h))+v(ja*j));ca=v(v(v(xa*x)+v(ua*h))+v(va*j));da=v(v(v(ka*x)+v(sa*h))+v(ta*j));ea=v(v(za*ba)+v(v(Aa*ca)+v(Ba*da)));fa=v(v(Ca*ba)+v(v(Da*ca)+v(Ea*da)));pa=v(v(Fa*ba)+v(v(Ga*ca)+v(Ha*da)));s[k+40>>2]=v(la*ea)+v(v(oa*fa)+v(i*pa));s[k+36>>2]=v(O*ea)+v(v(U*fa)+v(aa*pa));J=v(-v(La+v(v(v(J*I)+v(l*A))+v(D*P))));l=v(v(v(H*T)+v(N*V))+v(t*W));T=v(Oa+v(v(v(H*I)+v(N*A))+v(t*P)));q=v(Ma+v(v(v(r*I)+v(E*A))+v(q*P)));r=v(v(v(O*J)-v(l*T))-v(la*q));D=v(v(v(wa*H)+v(X*N))+v(Y*t));I=v(v(v(U*J)-v(D*T))-v(oa*q));E=v(v(v(H*Z)+v(N*_))+v(t*ga));t=v(v(v(aa*J)-v(E*T))-v(i*q));s[k+72>>2]=v(v(r*$)+v(v(I*g)+v(t*G)))+v(v(v(ma*v(0))+v(v(na*v(0))+v(f*v(0))))+v(Ka+v(v(v(n*S)+v(Q*u))+v(R*K))));s[k+68>>2]=v(v(r*ea)+v(v(I*fa)+v(t*pa)))+v(v(v(ba*v(0))+v(v(ca*v(0))+v(da*v(0))))+v(Ja+v(v(v(x*S)+v(h*u))+v(j*K))));o[k+28>>2]=0;s[k+48>>2]=v(l*$)+v(v(D*g)+v(E*G));s[k+32>>2]=v(l*ea)+v(v(D*fa)+v(E*pa));g=v(v(v(xa*F)+v(ua*B))+v(va*L));f=v(v(v(F*ka)+v(B*sa))+v(L*ta));h=v(v(v(F*ha)+v(B*ia))+v(L*ja));j=v(v(v(Aa*g)+v(Ba*f))+v(za*h));q=v(v(v(Da*g)+v(Ea*f))+v(Ca*h));n=i;i=v(v(v(Ga*g)+v(Ha*f))+v(Fa*h));s[k+24>>2]=v(la*j)+v(v(oa*q)+v(n*i));s[k+20>>2]=v(O*j)+v(v(U*q)+v(aa*i));s[k+16>>2]=v(l*j)+v(v(D*q)+v(E*i));s[k+64>>2]=v(v(r*j)+v(v(I*q)+v(t*i)))+v(v(v(v(g*v(0))+v(f*v(0)))+v(h*v(0)))+v(Na+v(v(v(F*S)+v(B*u))+v(L*K))));ya(k+16|0,k);g=s[k>>2];i=s[k+4>>2];f=s[k+8>>2];h=v(v(v(g*g)+v(i*i))+v(f*f));if(v(w(h))<v(1.1920928955078125e-7)){break a}o[a+472>>2]=0;h=v(v(1)/v(C(h)));s[a+468>>2]=h*f;s[a+464>>2]=h*i;s[a+460>>2]=h*g;g=Sa(v(y(v(z(s[k+12>>2],v(-1))),v(1))));g=v(g+g);s[a+504>>2]=g;if(v(w(g))<v(1.1920928955078125e-7)){break a}m[a+526|0]=1;break a}ya(b,k+16|0);ya(a+300|0,k);g=s[k+24>>2];f=s[k+8>>2];h=s[k+4>>2];j=s[k+20>>2];q=s[k+12>>2];L=s[k+28>>2];B=s[k+16>>2];F=s[k>>2];ya(c,k+16|0);ya(a+364|0,k);J=v(-0);N=v(1);G=v(v(v(F*g)+v(v(q*j)+v(L*h)))-v(B*f));t=s[k+28>>2];H=s[k+8>>2];x=s[k+12>>2];r=s[k+24>>2];n=s[k+16>>2];S=s[k+4>>2];u=s[k>>2];K=s[k+20>>2];l=v(v(v(v(t*H)+v(x*r))+v(n*S))-v(u*K));Q=v(v(v(v(L*F)+v(B*q))+v(j*f))-v(g*h));D=v(v(v(v(t*x)-v(u*n))-v(K*S))-v(H*r));R=v(v(v(v(L*q)-v(F*B))-v(j*h))-v(f*g));E=v(v(v(v(t*u)+v(n*x))+v(K*H))-v(r*S));L=v(v(v(v(L*f)+v(q*g))+v(B*h))-v(F*j));q=v(v(v(u*r)+v(v(x*K)+v(t*S)))-v(n*H));B=v(v(G*l)+v(v(v(Q*D)-v(R*E))-v(L*q)));F=v(v(Q*q)+v(v(v(L*D)-v(R*l))-v(G*E)));t=v(v(L*l)+v(v(v(Q*E)+v(R*D))+v(G*q)));f=v(t*v(0));h=v(B*v(0));g=v(v(F+f)-h);H=v(v(L*E)+v(v(v(G*D)-v(R*q))-v(Q*l)));f=v(v(f+h)-H);j=v(H*v(0));x=v(F*v(0));h=v(v(v(-B)-j)-x);j=v(v(t+j)-x);x=v(v(B*g)+v(v(v(t*f)-v(F*h))-v(H*j)));n=x;A=v(x*x);x=v(v(H*f)+v(v(v(t*j)-v(B*h))-v(F*g)));g=v(v(F*j)+v(v(v(t*g)-v(H*h))-v(B*f)));f=v(v(1)/v(C(v(A+v(v(x*x)+v(g*g))))));j=v(n*f);g=v(g*f);h=v(x*f);f=v(v(j*v(0))+v(v(g*v(0))+h));if(!(f<v(-.9999998807907104))){N=v(h*v(0));i=v(f+v(1));f=v(C(v(i+i)));h=v(v(1)/f);i=v(v(g-N)*h);J=v(v(v(j*v(0))-v(g*v(0)))*h);I=v(f*v(.5));N=v(v(N-j)*h)}g=v(v(1)/v(C(v(v(v(v(J*J)+v(N*N))+v(i*i))+v(I*I)))));N=v(N*g);S=v(I*g);x=v(i*g);J=v(J*g);b:{c:{f=s[a+444>>2];u=s[a+456>>2];Ia=f>=u;if(!Ia){break c}r=s[a+448>>2];if(!(r>=u)){break c}j=Sa(v(y(v(z(S,v(-1))),v(1))));n=v(j+j);g=v(0);d:{if(!(n>v(1.1920928955078125e-7))){break d}j=v(v(1)/v(C(v(v(x*x)+v(v(J*J)+v(N*N))))));h=v(x*j);i=v(J*j);j=v(N*j);g=f;if(!(v(w(j))>v(1.1920928955078125e-7))){break d}g=v(v(h*h)/v(j*j));g=v(C(v(v(g+v(1))/v(v(g/v(f*f))+v(v(1)/v(r*r))))))}A=s[a+428>>2];u=v(g*A);if(!(n>u)){break b}m[a+526|0]=1;I=v(1);K=v(n-u);s[a+504>>2]=K;s[a+528>>2]=n<g^1|A<v(.9999998807907104)^1?I:v(K/v(g-u));if(!!(v(w(j))>v(1.1920928955078125e-7))){g=v(w(v(j*v(v(r/f)*v(v(-h)/j)))));g=h<v(0)?g:v(-g);f=v(v(1)/v(C(v(v(v(i*i)+v(j*j))+v(g*g)))));h=v(f*v(-g));j=v(j*f);i=v(i*f)}o[a+536>>2]=0;o[a+540>>2]=0;o[a+472>>2]=0;o[a+544>>2]=0;o[a+548>>2]=0;g=v(-j);f=v(v(v(D*g)-v(l*i))+v(E*h));r=v(v(q*i)+v(v(E*g)-v(D*h)));n=v(v(v(E*i)+v(q*j))+v(l*h));h=v(v(l*j)+v(v(q*v(-h))-v(D*i)));g=v(v(E*f)+v(v(v(D*r)-v(l*n))-v(q*h)));s[a+468>>2]=g;i=v(v(l*h)+v(v(v(D*f)-v(q*n))-v(E*r)));s[a+464>>2]=i;f=v(v(q*r)+v(v(v(D*h)-v(E*n))-v(l*f)));s[a+460>>2]=f;s[a+492>>2]=v(1)/v(v(v(v(f*v(v(v(f*s[d>>2])+v(s[d+16>>2]*i))+v(s[d+32>>2]*g)))+v(i*v(v(v(f*s[d+4>>2])+v(i*s[d+20>>2]))+v(g*s[d+36>>2]))))+v(g*v(v(v(f*s[d+8>>2])+v(i*s[d+24>>2]))+v(g*s[d+40>>2]))))+v(v(v(f*v(v(v(f*s[e>>2])+v(i*s[e+16>>2]))+v(g*s[e+32>>2])))+v(i*v(v(v(f*s[e+4>>2])+v(i*s[e+20>>2]))+v(g*s[e+36>>2]))))+v(g*v(v(v(f*s[e+8>>2])+v(i*s[e+24>>2]))+v(g*s[e+40>>2])))));break b}h=s[b>>2];g=s[a+308>>2];K=s[b+4>>2];i=s[a+324>>2];I=s[b+8>>2];n=s[a+340>>2];ga=v(v(v(h*g)+v(K*i))+v(I*n));A=s[a+364>>2];P=s[a+380>>2];T=s[a+396>>2];j=v(v(v(A*s[c>>2])+v(P*s[c+4>>2]))+v(T*s[c+8>>2]));V=s[b+16>>2];W=s[b+20>>2];X=s[b+24>>2];ha=v(v(v(V*g)+v(W*i))+v(X*n));r=v(v(v(A*s[c+16>>2])+v(P*s[c+20>>2]))+v(T*s[c+24>>2]));Y=s[b+32>>2];Z=s[b+36>>2];_=s[b+40>>2];ia=v(v(v(Y*g)+v(Z*i))+v(_*n));n=v(v(v(A*s[c+32>>2])+v(P*s[c+36>>2]))+v(T*s[c+40>>2]));g=v(v(v(ga*j)+v(ha*r))+v(ia*n));i=s[a+304>>2];A=s[a+320>>2];P=s[a+336>>2];T=v(v(v(h*i)+v(K*A))+v(I*P));ja=v(v(v(V*i)+v(W*A))+v(X*P));ka=v(v(v(Y*i)+v(Z*A))+v(_*P));i=v(v(v(T*j)+v(ja*r))+v(ka*n));A=s[a+300>>2];O=v(A*h);h=s[a+316>>2];P=s[a+332>>2];K=v(v(O+v(h*K))+v(P*I));I=v(v(v(A*V)+v(h*W))+v(P*X));A=v(v(v(A*Y)+v(h*Z))+v(P*_));h=v(v(v(K*j)+v(I*r))+v(A*n));e:{if(!!(f<u)){f=s[a+448>>2];if(!!(f<u)){if(v(w(g))<v(1.1920928955078125e-7)?!!(v(w(i))<v(1.1920928955078125e-7)):0){break b}m[a+526|0]=1;o[a+472>>2]=0;s[a+468>>2]=-v(v(I*j)-v(K*r));s[a+464>>2]=-v(v(K*n)-v(A*j));s[a+460>>2]=-v(v(A*r)-v(I*n));break b}if(v(w(g))<v(1.1920928955078125e-7)?!!(v(w(h))<v(1.1920928955078125e-7)):0){break e}m[a+526|0]=1;if(!(f>=u)){break e}u=_a(g,h);if(!!(u>f)){i=v(0);g=qa(f);h=ra(f);break e}i=v(0);if(!(u<v(-f))){break e}g=v(-qa(f));h=ra(f);break e}if(v(w(i))<v(1.1920928955078125e-7)?!!(v(w(h))<v(1.1920928955078125e-7)):0){break e}m[a+526|0]=1;if(!Ia){break e}u=_a(i,h);f:{if(!!(u>f)){g=v(0);i=qa(f);break f}g=v(0);if(!(u<v(-f))){break e}i=v(-qa(f))}h=ra(f)}o[a+472>>2]=0;f=v(v(ia*g)+v(v(ka*i)+v(A*h)));u=v(v(ga*g)+v(v(T*i)+v(K*h)));i=v(v(ha*g)+v(v(ja*i)+v(I*h)));g=v(v(1)/v(C(v(v(f*f)+v(v(u*u)+v(i*i))))));f=v(f*g);h=v(i*g);i=v(v(r*f)-v(n*h));A=n;n=v(u*g);g=v(v(A*n)-v(j*f));f=v(v(j*h)-v(r*n));h=v(C(v(v(v(i*i)+v(g*g))+v(f*f))));s[a+504>>2]=h;h=v(v(1)/h);s[a+468>>2]=h*v(-f);s[a+464>>2]=h*v(-g);s[a+460>>2]=h*v(-i)}r=s[a+452>>2];if(!!(r>=v(0))){j=v(v(F*x)+v(v(H*N)+v(v(t*S)+v(B*J))));g=v(v(B*N)+v(v(v(F*S)-v(t*x))-v(H*J)));i=v(v(H*x)+v(v(v(B*S)-v(t*J))-v(F*N)));h=v(v(F*J)+v(v(v(H*S)-v(t*N))-v(B*x)));f=v(v(1)/v(C(v(v(j*j)+v(v(g*g)+v(v(i*i)+v(h*h)))))));g=v(g*f);h=v(h*f);i=v(i*f);f=v(j*f);j=Sa(v(y(v(z(f,v(-1))),v(1))));j=v(j+j);if(!!(j>v(3.1415927410125732))){f=Sa(v(y(v(z(v(-f),v(-1))),v(1))));j=v(f+f);h=v(-h);i=v(-i);g=v(-g)}s[a+512>>2]=j;if(!!(j>v(1.1920928955078125e-7))){f=v(v(1)/v(C(v(v(v(i*i)+v(h*h))+v(g*g)))));g=v(g*f);h=v(h*f);i=v(i*f)}F=s[a+428>>2];B=v(r*F);if(!!(j>B)){m[a+525|0]=1;t=v(j-B);s[a+508>>2]=t;b=a;f=v(1);g:{if(!(j<r)){break g}f=v(1);if(!(F<v(.9999998807907104))){break g}f=v(t/v(r-B))}s[b+532>>2]=f;o[a+488>>2]=0;f=v(-h);B=v(v(v(D*f)-v(l*i))+v(E*g));F=v(v(q*i)+v(v(E*f)-v(D*g)));t=v(v(v(E*i)+v(q*h))+v(l*g));H=v(v(l*h)+v(v(q*v(-g))-v(D*i)));f=v(v(E*B)+v(v(v(D*F)-v(l*t))-v(q*H)));s[a+484>>2]=f;j=v(v(l*H)+v(v(v(D*B)-v(q*t))-v(E*F)));s[a+480>>2]=j;l=v(v(q*F)+v(v(v(D*H)-v(E*t))-v(l*B)));s[a+476>>2]=l;s[a+496>>2]=v(1)/v(v(v(v(l*v(v(v(l*s[d>>2])+v(s[d+16>>2]*j))+v(s[d+32>>2]*f)))+v(j*v(v(v(l*s[d+4>>2])+v(j*s[d+20>>2]))+v(f*s[d+36>>2]))))+v(f*v(v(v(l*s[d+8>>2])+v(j*s[d+24>>2]))+v(f*s[d+40>>2]))))+v(v(v(l*v(v(v(l*s[e>>2])+v(j*s[e+16>>2]))+v(f*s[e+32>>2])))+v(j*v(v(v(l*s[e+4>>2])+v(j*s[e+20>>2]))+v(f*s[e+36>>2]))))+v(f*v(v(v(l*s[e+8>>2])+v(j*s[e+24>>2]))+v(f*s[e+40>>2])))))}if(!p[a+526|0]){break a}o[a+548>>2]=0;j=v(-h);f=v(v(v(R*j)-v(L*i))+v(Q*g));j=v(v(G*i)+v(v(Q*j)-v(R*g)));l=v(v(v(Q*i)+v(G*h))+v(L*g));g=v(v(L*h)+v(v(G*v(-g))-v(R*i)));s[a+544>>2]=v(Q*f)+v(v(v(R*j)-v(L*l))-v(G*g));s[a+540>>2]=v(L*g)+v(v(v(R*f)-v(G*l))-v(Q*j));s[a+536>>2]=v(G*j)+v(v(v(R*g)-v(Q*l))-v(L*f));break a}o[a+512>>2]=0}M=k+80|0}function wi(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;h=M-48|0;M=h;t=o[e>>2];r=b;C=o[d>>2];if(C){r=o[C+12>>2]}A=o[r+96>>2];l=o[b+96>>2];T=o[c+96>>2]-l|0;f=o[(C?C:t)+12>>2];m=o[b+92>>2];g=o[f+92>>2]-m|0;k=c;L=o[c+92>>2]-m|0;w=o[f+96>>2]-l|0;c=u(T,g)-u(L,w)|0;O=c;P=c>>31;c=T;x=c>>31;n=tL(O,P,c,x);z=N;j=o[b+88>>2];i=o[f+88>>2]-j|0;U=o[k+88>>2]-j|0;b=u(i,L)-u(g,U)|0;Q=b;R=b>>31;b=U;p=b>>31;f=tL(Q,R,b,p);H=n-f|0;I=z-(N+(n>>>0<f>>>0)|0)|0;G=o[r+92>>2];n=G;g=tL(H,I,n,n>>31);z=N;n=L;D=n>>31;f=tL(Q,R,n,D);F=N;q=g;g=u(b,w)-u(c,i)|0;V=g;S=g>>31;c=tL(g,S,c,x);J=f-c|0;F=F-(N+(f>>>0<c>>>0)|0)|0;r=o[r+88>>2];c=r;f=tL(J,F,c,c>>31);c=q+f|0;g=N+z|0;g=c>>>0<f>>>0?g+1|0:g;b=tL(b,p,V,S);f=N;q=c;c=tL(n,D,O,P);D=b-c|0;K=f-(N+(b>>>0<c>>>0)|0)|0;c=tL(D,K,A,A>>31);b=q+c|0;f=N+g|0;n=b;c=b>>>0<c>>>0?f+1|0:f;b=tL(O,P,j,j>>31);f=N;l=tL(Q,R,l,l>>31);b=l+b|0;f=N+f|0;f=b>>>0<l>>>0?f+1|0:f;l=tL(V,S,m,m>>31);b=l+b|0;f=N+f|0;B=b;p=b>>>0<l>>>0?f+1|0:f;k=t?o[t+12>>2]:k;w=o[k+96>>2];x=o[k+92>>2];z=o[k+88>>2];b=t;a:{if(!C){break a}b=t;if(!o[C+12>>2]){break a}b=o[o[C+8>>2]+4>>2];j=o[b+12>>2];f=j;l=o[f+92>>2];m=l;l=l>>31;k=tL(m,l,V,S);g=N;q=k;f=o[f+88>>2];y=f;v=f>>31;k=tL(f,v,O,P);f=q+k|0;g=N+g|0;g=f>>>0<k>>>0?g+1|0:g;i=f;f=o[j+96>>2];q=f;s=f>>31;k=tL(f,s,Q,R);j=i+k|0;f=N+g|0;f=j>>>0<k>>>0?f+1|0:f;b:{if((f|0)<(p|0)?1:(f|0)<=(p|0)?j>>>0>=B>>>0?0:1:0){break b}k=b+12|0;E=o[a+100>>2];while(1){if((E|0)==o[b+20>>2]){break b}f=tL(m,l,H,I);m=N;j=tL(y,v,J,F);l=j+f|0;f=N+m|0;f=l>>>0<j>>>0?f+1|0:f;m=tL(q,s,D,K);l=m+l|0;g=N+f|0;g=l>>>0<m>>>0?g+1|0:g;f=g;if((f|0)<(c|0)?1:(f|0)<=(c|0)?l>>>0>n>>>0?0:1:0){break b}o[d>>2]=b;c=o[k>>2];A=o[c+96>>2];G=o[c+92>>2];r=o[c+88>>2];if(c){b=o[o[b+8>>2]+4>>2];k=b+12|0;n=l;c=f;g=o[b+12>>2];f=g;l=o[f+92>>2];m=l;l=l>>31;j=tL(m,l,V,S);i=N;f=o[f+88>>2];y=f;v=f>>31;q=tL(f,v,O,P);j=q+j|0;f=N+i|0;f=j>>>0<q>>>0?f+1|0:f;i=j;j=o[g+96>>2];q=j;s=j>>31;g=tL(j,s,Q,R);j=i+g|0;i=N+f|0;i=j>>>0<g>>>0?i+1|0:i;if((i|0)<(p|0)?1:(i|0)<=(p|0)?j>>>0>=B>>>0?0:1:0){break b}continue}break}n=l;c=f}b=o[e>>2]}f=tL(H,I,x,x>>31);l=N;m=tL(J,F,z,z>>31);f=m+f|0;g=N+l|0;g=f>>>0<m>>>0?g+1|0:g;m=tL(D,K,w,w>>31);l=m+f|0;f=N+g|0;f=l>>>0<m>>>0?f+1|0:f;m=l;l=f;c:{if(!b){b=0;break c}if(!o[b+12>>2]){break c}k=o[o[b+8>>2]>>2];j=o[k+12>>2];f=j;g=o[f+92>>2];y=g;v=g>>31;g=tL(g,v,V,S);i=N;W=g;f=o[f+88>>2];q=f;s=f>>31;g=tL(f,s,O,P);f=W+g|0;i=N+i|0;i=f>>>0<g>>>0?i+1|0:i;W=f;f=o[j+96>>2];g=f;E=f>>31;X=tL(f,E,Q,R);j=W+X|0;f=N+i|0;f=j>>>0<X>>>0?f+1|0:f;if((f|0)<(p|0)?1:(f|0)<=(p|0)?j>>>0>=B>>>0?0:1:0){break c}X=k+12|0;Y=o[a+100>>2];while(1){j=k;if((Y|0)==o[j+20>>2]){break c}f=tL(y,v,H,I);i=N;y=tL(q,s,J,F);k=y+f|0;f=N+i|0;f=k>>>0<y>>>0?f+1|0:f;g=tL(D,K,g,E);k=g+k|0;i=N+f|0;i=k>>>0<g>>>0?i+1|0:i;g=k;f=i;if((f|0)<(l|0)?1:(f|0)<=(l|0)?g>>>0>m>>>0?0:1:0){break c}o[e>>2]=j;b=o[X>>2];w=o[b+96>>2];x=o[b+92>>2];z=o[b+88>>2];if(b){k=o[o[j+8>>2]>>2];X=k+12|0;m=g;l=f;b=j;g=o[k+12>>2];f=g;j=o[f+92>>2];y=j;v=j>>31;j=tL(j,v,V,S);i=N;f=o[f+88>>2];q=f;s=f>>31;E=tL(f,s,O,P);j=E+j|0;f=N+i|0;f=j>>>0<E>>>0?f+1|0:f;W=j;j=o[g+96>>2];g=j;E=g>>31;i=tL(g,E,Q,R);j=W+i|0;f=N+f|0;f=j>>>0<i>>>0?f+1|0:f;if((f|0)<(p|0)?1:(f|0)<=(p|0)?j>>>0>=B>>>0?0:1:0){break c}continue}break}b=j;m=g;l=f}d:{c=l-((m>>>0<n>>>0)+c|0)|0;n=m-n|0;if((c|0)>0?1:(c|0)>=0?n>>>0<1?0:1:0){while(1){p=(u(x-G|0,L)+u(z-r|0,U)|0)+u(w-A|0,T)|0;b=p;l=b;y=b>>31;e:{v=o[d>>2];if(!v|!o[v+12>>2]){break e}q=o[o[v>>2]+8>>2];if(o[q+20>>2]<=o[a+100>>2]){break e}b=o[q+12>>2];m=o[b+92>>2];f=m-G|0;j=o[b+88>>2];g=j-r|0;k=o[b+96>>2];b=k-A|0;t=(u(f,L)+u(g,U)|0)+u(b,T)|0;f=tL(H,I,f,f>>31);i=N;s=tL(J,F,g,g>>31);g=s+f|0;f=N+i|0;f=g>>>0<s>>>0?f+1|0:f;i=g;g=tL(D,K,b,b>>31);b=i+g|0;f=N+f|0;f=b>>>0<g>>>0?f+1|0:f;g=b;i=f;f:{if(!(f|b)){if((t|0)<0){break f}break e}if((i|0)>-1?1:(i|0)>=-1?g>>>0<=4294967295?0:1:0){break e}b=t;s=b>>31;f=h;g:{if((b|0)>=1){o[h+24>>2]=b;o[h+28>>2]=s;o[h+40>>2]=1;b=-1;break g}if((t|0)<=-1){o[h+40>>2]=-1;o[h+24>>2]=0-b;o[h+28>>2]=0-((0<b>>>0)+s|0);b=1;break g}o[h+24>>2]=0;o[h+28>>2]=0;o[h+40>>2]=0;b=0}o[f+40>>2]=b;o[h+32>>2]=0-g;o[h+36>>2]=0-((0<g>>>0)+i|0);h:{if((p|0)>=1){o[h>>2]=l;o[h+4>>2]=y;o[h+16>>2]=1;g=-1;break h}if((p|0)<=-1){o[h+16>>2]=-1;b=l;o[h>>2]=0-b;o[h+4>>2]=0-((0<b>>>0)+y|0);g=1;break h}o[h>>2]=0;o[h+4>>2]=0;o[h+16>>2]=0;g=0}t=h;f=c;b=n;i=f;i:{if((f|0)>0?1:(f|0)>=0?b>>>0<=0?0:1:0){break i}b=0;i=0;if((c|0)>-1?1:(c|0)>=-1?n>>>0<=4294967295?0:1:0){break i}o[h+16>>2]=g;f=n;b=0-f|0;i=0-((0<f>>>0)+c|0)|0}f=i;o[t+8>>2]=b;o[t+12>>2]=f;if((Xb(h+24|0,h)|0)<=-1){break e}}o[d>>2]=(v|0)==(C|0)?0:q;b=x-m|0;b=tL(H,I,b,b>>31);c=N;f=b;b=z-j|0;n=tL(J,F,b,b>>31);b=f+n|0;f=N+c|0;f=b>>>0<n>>>0?f+1|0:f;g=b;b=w-k|0;c=tL(D,K,b,b>>31);b=g+c|0;f=N+f|0;n=b;c=b>>>0<c>>>0?f+1|0:f;r=j;G=m;A=k;continue}b=o[e>>2];if(!b|!o[b+12>>2]){break d}v=o[o[b+8>>2]>>2];if(o[v+20>>2]<=o[a+100>>2]){break d}b=o[v+12>>2];m=o[b+92>>2];j=m-x|0;f=j;k=f;t=f>>31;f=tL(f,t,V,S);g=N;i=f;x=o[b+88>>2];z=x-z|0;f=z;q=f;s=f>>31;B=tL(f,s,O,P);f=i+B|0;i=N+g|0;i=f>>>0<B>>>0?i+1|0:i;g=f;f=o[b+96>>2];w=f-w|0;b=w;B=b;E=b>>31;b=tL(Q,R,b,E);if((g|0)!=(0-b|0)|(0-(N+(0<b>>>0)|0)|0)!=(i|0)){break d}b=m-G|0;b=tL(H,I,b,b>>31);m=N;g=b;b=x-r|0;x=tL(J,F,b,b>>31);b=g+x|0;g=N+m|0;g=b>>>0<x>>>0?g+1|0:g;i=b;b=f-A|0;m=tL(D,K,b,b>>31);b=i+m|0;f=N+g|0;f=b>>>0<m>>>0?f+1|0:f;m=b;b=f;if((f|0)<0?1:(f|0)<=0?m>>>0>=1?0:1:0){break d}j=(u(j,L)+u(z,U)|0)+u(w,T)|0;f=tL(k,t,H,I);t=N;g=tL(q,s,J,F);k=g+f|0;f=N+t|0;f=k>>>0<g>>>0?f+1|0:f;t=tL(D,K,B,E);k=t+k|0;f=N+f|0;f=k>>>0<t>>>0?f+1|0:f;t=f;j:{if(!(f|k)){if((j|0)<0){break j}break d}if((t|0)>-1?1:(t|0)>=-1?k>>>0<=4294967295?0:1:0){break d}f=j;w=f>>31;g=h;k:{if((f|0)>=1){o[h+24>>2]=f;o[h+28>>2]=w;o[h+40>>2]=1;f=-1;break k}if((j|0)<=-1){o[h+40>>2]=-1;o[h+24>>2]=0-f;o[h+28>>2]=0-((0<f>>>0)+w|0);f=1;break k}o[h+24>>2]=0;o[h+28>>2]=0;o[h+40>>2]=0;f=0}o[g+40>>2]=f;o[h+32>>2]=0-k;o[h+36>>2]=0-((0<k>>>0)+t|0);l:{if((p|0)>=1){o[h>>2]=l;o[h+4>>2]=y;o[h+16>>2]=1;k=-1;break l}if((p|0)<=-1){o[h+16>>2]=-1;o[h>>2]=0-l;o[h+4>>2]=0-((0<l>>>0)+y|0);k=1;break l}o[h>>2]=0;o[h+4>>2]=0;o[h+16>>2]=0;k=0}j=h;q=h;l=c;f=n;g=f;m:{if((c|0)>0?1:(c|0)>=0?f>>>0<=0?0:1:0){break m}l=0;g=0;if((c|0)>-1?1:(c|0)>=-1?n>>>0<=4294967295?0:1:0){break m}o[h+16>>2]=k;l=0-((0<n>>>0)+c|0)|0;g=0-n|0}o[q+8>>2]=g;o[j+12>>2]=l;if((Xb(h+24|0,h)|0)<=0){break d}}o[e>>2]=v;c=o[v+12>>2];w=o[c+96>>2];x=o[c+92>>2];z=o[c+88>>2];n=m;c=b;continue}}if((c|0)>-1?1:(c|0)>=-1?n>>>0<=4294967295?0:1:0){break d}while(1){y=(u(x-G|0,L)+u(z-r|0,U)|0)+u(w-A|0,T)|0;f=y;m=f;v=f>>31;n:{if(!b|!o[b+12>>2]){break n}q=o[o[b+4>>2]+8>>2];if(o[q+20>>2]<=o[a+100>>2]){break n}f=o[q+12>>2];l=o[f+92>>2];i=l-x|0;j=o[f+88>>2];p=j-z|0;k=o[f+96>>2];C=k-w|0;g=(u(i,L)+u(p,U)|0)+u(C,T)|0;f=tL(H,I,i,i>>31);s=N;p=tL(J,F,p,p>>31);i=p+f|0;f=N+s|0;f=i>>>0<p>>>0?f+1|0:f;p=tL(D,K,C,C>>31);i=p+i|0;f=N+f|0;f=i>>>0<p>>>0?f+1|0:f;p=f;o:{if(!(f|i)){if((g|0)>0){break o}break n}if((p|0)>-1?1:(p|0)>=-1?i>>>0<=4294967295?0:1:0){break n}f=g;s=f>>31;B=h;p:{if((f|0)>=1){o[h+24>>2]=f;o[h+28>>2]=s;o[h+40>>2]=1;f=-1;break p}if((g|0)<=-1){o[h+40>>2]=-1;o[h+24>>2]=0-f;o[h+28>>2]=0-((0<f>>>0)+s|0);f=1;break p}o[h+24>>2]=0;o[h+28>>2]=0;o[h+40>>2]=0;f=0}o[B+40>>2]=f;o[h+32>>2]=0-i;o[h+36>>2]=0-((0<i>>>0)+p|0);q:{if((y|0)>=1){o[h>>2]=m;o[h+4>>2]=v;o[h+16>>2]=1;p=-1;break q}if((y|0)<=-1){o[h+16>>2]=-1;f=m;o[h>>2]=0-f;o[h+4>>2]=0-((0<f>>>0)+v|0);p=1;break q}o[h>>2]=0;o[h+4>>2]=0;o[h+16>>2]=0;p=0}i=h;f=n;g=c;r:{if((c|0)>0?1:(c|0)>=0?f>>>0<=0?0:1:0){break r}f=0;g=0;if((c|0)>-1?1:(c|0)>=-1?n>>>0<=4294967295?0:1:0){break r}o[h+16>>2]=p;g=n;f=0-g|0;g=0-((0<g>>>0)+c|0)|0}o[i+8>>2]=f;o[i+12>>2]=g;if((Xb(h+24|0,h)|0)>=1){break n}}b=(b|0)==(t|0)?0:q;o[e>>2]=b;c=l-G|0;c=tL(H,I,c,c>>31);n=N;f=c;c=j-r|0;m=tL(J,F,c,c>>31);c=f+m|0;f=N+n|0;f=c>>>0<m>>>0?f+1|0:f;g=c;c=k-A|0;n=tL(D,K,c,c>>31);c=g+n|0;f=N+f|0;f=c>>>0<n>>>0?f+1|0:f;n=c;c=f;z=j;x=l;w=k;continue}b=o[d>>2];if(!b|!o[b+12>>2]){break d}p=o[o[b+8>>2]+4>>2];if(o[p+20>>2]<=o[a+100>>2]){break d}b=o[p+12>>2];l=o[b+92>>2];k=l-G|0;f=k;g=f;G=f>>31;f=tL(f,G,V,S);j=N;i=f;C=o[b+88>>2];r=C-r|0;f=r;q=f;s=f>>31;B=tL(f,s,O,P);f=i+B|0;i=N+j|0;i=f>>>0<B>>>0?i+1|0:i;j=o[b+96>>2];A=j-A|0;b=A;B=b;E=b>>31;b=tL(Q,R,b,E);if((0-b|0)!=(f|0)|(0-(N+(0<b>>>0)|0)|0)!=(i|0)){break d}b=x-l|0;b=tL(H,I,b,b>>31);f=N;i=b;b=z-C|0;l=tL(J,F,b,b>>31);b=i+l|0;f=N+f|0;f=b>>>0<l>>>0?f+1|0:f;i=b;b=w-j|0;l=tL(D,K,b,b>>31);b=i+l|0;f=N+f|0;j=b;f=b>>>0<l>>>0?f+1|0:f;l=f;if((f|0)>-1?1:(f|0)>=-1?b>>>0<=4294967295?0:1:0){break d}r=(u(k,L)+u(r,U)|0)+u(A,T)|0;b=tL(g,G,H,I);f=N;k=tL(q,s,J,F);b=k+b|0;g=N+f|0;g=b>>>0<k>>>0?g+1|0:g;k=tL(D,K,B,E);b=k+b|0;f=N+g|0;f=b>>>0<k>>>0?f+1|0:f;k=b;g=f;s:{if(!(f|b)){if((r|0)<=0){break d}break s}if((g|0)>-1?1:(g|0)>=-1?k>>>0<=4294967295?0:1:0){break d}b=r;A=b>>31;f=h;t:{if((b|0)>=1){o[h+24>>2]=b;o[h+28>>2]=A;o[h+40>>2]=1;b=-1;break t}if((r|0)<=-1){o[h+40>>2]=-1;o[h+24>>2]=0-b;o[h+28>>2]=0-((0<b>>>0)+A|0);b=1;break t}o[h+24>>2]=0;o[h+28>>2]=0;o[h+40>>2]=0;b=0}o[f+40>>2]=b;o[h+32>>2]=0-k;o[h+36>>2]=0-((0<k>>>0)+g|0);u:{if((y|0)>=1){o[h>>2]=m;o[h+4>>2]=v;o[h+16>>2]=1;r=-1;break u}if((y|0)<=-1){o[h+16>>2]=-1;o[h>>2]=0-m;o[h+4>>2]=0-((0<m>>>0)+v|0);r=1;break u}o[h>>2]=0;o[h+4>>2]=0;o[h+16>>2]=0;r=0}m=h;k=h;b=n;f=c;g=b;v:{if((f|0)>0?1:(f|0)>=0?b>>>0<=0?0:1:0){break v}f=0;g=0;if((c|0)>-1?1:(c|0)>=-1?n>>>0<=4294967295?0:1:0){break v}o[h+16>>2]=r;f=0-((0<n>>>0)+c|0)|0;g=0-n|0}o[k+8>>2]=g;o[m+12>>2]=f;if((Xb(h+24|0,h)|0)>=0){break d}}o[d>>2]=p;c=o[p+12>>2];A=o[c+96>>2];G=o[c+92>>2];b=o[e>>2];r=o[c+88>>2];n=j;c=l;continue}}M=h+48|0}function EB(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,n=0,q=0,r=0,t=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=0,G=v(0),H=v(0),I=0,J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=0,Q=v(0),R=0,S=v(0),T=v(0),U=0,V=0,W=0,X=v(0),Y=v(0),Z=v(0),_=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ha=v(0),ka=v(0),la=v(0),ma=v(0),na=v(0),oa=v(0),pa=v(0),qa=v(0),ra=v(0),sa=v(0);q=M-256|0;M=q;o[a+188>>2]=-1;ia(19832);i=0;o[a+184>>2]=0;if((c|0)>0){while(1){o[o[(i<<2)+b>>2]+212>>2]=-1;i=i+1|0;if((i|0)!=(c|0)){continue}break}}F=o[a+12>>2];if((F|0)<=(c|0)){F=c+1|0;i=0;a:{if(!F){break a}o[7717]=o[7717]+1;i=l[o[6606]](u(F,244),16)|0}y=o[a+8>>2];if((y|0)>=1){while(1){j=u(k,244);n=j+i|0;j=j+o[a+16>>2]|0;I=o[j+4>>2];o[n>>2]=o[j>>2];o[n+4>>2]=I;r=o[j+12>>2];o[n+8>>2]=o[j+8>>2];o[n+12>>2]=r;r=o[j+28>>2];o[n+24>>2]=o[j+24>>2];o[n+28>>2]=r;r=o[j+20>>2];o[n+16>>2]=o[j+16>>2];o[n+20>>2]=r;r=o[j+44>>2];o[n+40>>2]=o[j+40>>2];o[n+44>>2]=r;r=o[j+36>>2];o[n+32>>2]=o[j+32>>2];o[n+36>>2]=r;r=o[j+52>>2];o[n+48>>2]=o[j+48>>2];o[n+52>>2]=r;r=o[j+60>>2];o[n+56>>2]=o[j+56>>2];o[n+60>>2]=r;ja(n- -64|0,j- -64|0,180);k=k+1|0;if((y|0)!=(k|0)){continue}break}}j=o[a+16>>2];if(j){if(p[a+20|0]){if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}o[a+16>>2]=0}o[a+16>>2]=i;o[a+12>>2]=F;m[a+20|0]=1}$(q+8|0,0,244);i=o[a+8>>2];if((i|0)<=-1){if((F|0)<=-1){j=o[a+16>>2];if(j){if(p[a+20|0]){if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}o[a+16>>2]=0}o[a+12>>2]=0;o[a+16>>2]=0;m[a+20|0]=1}n=q+72|0;while(1){k=o[q+12>>2];j=o[a+16>>2]+u(i,244)|0;o[j>>2]=o[q+8>>2];o[j+4>>2]=k;k=o[q+20>>2];o[j+8>>2]=o[q+16>>2];o[j+12>>2]=k;k=o[q+36>>2];o[j+24>>2]=o[q+32>>2];o[j+28>>2]=k;k=o[q+28>>2];o[j+16>>2]=o[q+24>>2];o[j+20>>2]=k;k=o[q+52>>2];o[j+40>>2]=o[q+48>>2];o[j+44>>2]=k;k=o[q+44>>2];o[j+32>>2]=o[q+40>>2];o[j+36>>2]=k;k=o[q+60>>2];o[j+48>>2]=o[q+56>>2];o[j+52>>2]=k;k=o[q+68>>2];o[j+56>>2]=o[q+64>>2];o[j+60>>2]=k;ja(j- -64|0,n,180);j=i+1|0;k=j>>>0>=i>>>0;i=j;if(k){continue}break}}o[a+8>>2]=0;if((c|0)>=1){i=0;while(1){j=(i<<2)+b|0;n=$a(a,o[j>>2],s[h+12>>2]);j=o[j>>2];if(!(!j|!(o[j+236>>2]&2)|(!(p[j+504|0]&2)|s[j+344>>2]==v(0)))){k=o[a+16>>2];eE(q+8|0,j,s[h+76>>2]);z=s[j+304>>2];A=s[j+272>>2];J=s[j+288>>2];G=s[j+300>>2];E=s[j+268>>2];H=s[j+284>>2];n=k+u(n,244)|0;t=s[q+8>>2];B=s[q+12>>2];C=s[q+16>>2];x=s[h+12>>2];s[n+224>>2]=s[n+224>>2]-v(v(v(v(t*s[j+264>>2])+v(B*s[j+280>>2]))+v(C*s[j+296>>2]))*x);s[n+228>>2]=s[n+228>>2]-v(x*v(v(v(t*E)+v(B*H))+v(C*G)));s[n+232>>2]=s[n+232>>2]-v(x*v(v(v(t*A)+v(B*J))+v(C*z)))}i=i+1|0;if((i|0)!=(c|0)){continue}break}}i=0;if((g|0)>0){while(1){b=o[(i<<2)+f>>2];l[o[o[b>>2]+8>>2]](b);o[b+36>>2]=0;i=i+1|0;if((i|0)!=(g|0)){continue}break}}c=o[a+168>>2];if(!((c|0)>=(g|0)|o[a+172>>2]>=(g|0))){b:{if(!g){b=0;break b}o[7717]=o[7717]+1;b=l[o[6606]](g<<3,16)|0;c=o[a+168>>2]}if((c|0)>=1){i=0;while(1){j=i<<3;n=j+b|0;j=j+o[a+176>>2]|0;k=o[j+4>>2];o[n>>2]=o[j>>2];o[n+4>>2]=k;i=i+1|0;if((i|0)!=(c|0)){continue}break}}c=o[a+176>>2];if(c){if(p[a+180|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+176>>2]=0}o[a+176>>2]=b;o[a+172>>2]=g;m[a+180|0]=1}o[a+168>>2]=g;b=0;if((g|0)>=1){i=0;while(1){n=o[a+176>>2];k=(i<<2)+f|0;c=o[k>>2];j=o[c+44>>2];if(j){o[j>>2]=0;o[j+4>>2]=0;o[j+56>>2]=0;o[j+60>>2]=0;o[j+48>>2]=0;o[j+52>>2]=0;o[j+40>>2]=0;o[j+44>>2]=0;o[j+32>>2]=0;o[j+36>>2]=0;o[j+24>>2]=0;o[j+28>>2]=0;o[j+16>>2]=0;o[j+20>>2]=0;o[j+8>>2]=0;o[j+12>>2]=0;c=o[k>>2]}j=n+(i<<3)|0;c:{if(p[c+20|0]){l[o[o[c>>2]+16>>2]](c,j);c=o[j>>2];break c}o[j>>2]=0;o[j+4>>2]=0;c=0}b=c+b|0;i=i+1|0;if((i|0)!=(g|0)){continue}break}}c=o[a+48>>2];if(!((c|0)>=(b|0)|o[a+52>>2]>=(b|0))){d:{if(!b){k=0;break d}o[7717]=o[7717]+1;k=l[o[6606]](u(b,152),16)|0;c=o[a+48>>2]}if((c|0)>=1){i=0;while(1){j=u(i,152);ja(j+k|0,j+o[a+56>>2]|0,152);i=i+1|0;if((i|0)!=(c|0)){continue}break}}c=o[a+56>>2];if(c){if(p[a+60|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+56>>2]=0}o[a+56>>2]=k;o[a+52>>2]=b;m[a+60|0]=1}o[a+48>>2]=b;if((g|0)>=1){i=o[a+176>>2];F=0;while(1){V=R<<3;P=V+i|0;if(o[P>>2]){U=(R<<2)+f|0;I=o[U>>2];i=o[I+32>>2];b=o[a+56>>2];j=o[I+28>>2];k=$a(a,j,s[h+12>>2]);r=$a(a,i,s[h+12>>2]);W=o[a+16>>2];c=o[I+24>>2];y=(c|0)>0?c:o[h+20>>2];if((y|0)>o[a+184>>2]){o[a+184>>2]=y}n=b+u(F,152)|0;b=0;if(o[P>>2]>=1){while(1){c=$(n+u(b,152)|0,0,152);o[c+120>>2]=-8388609;o[c+124>>2]=2139095039;o[c+148>>2]=r;o[c+144>>2]=k;o[c+96>>2]=0;o[c+100>>2]=0;o[c+136>>2]=y;b=b+1|0;if((b|0)<o[P>>2]){continue}break}}y=W+u(k,244)|0;b=y;o[b+64>>2]=0;o[b+68>>2]=0;o[b+144>>2]=0;o[b+148>>2]=0;o[b+88>>2]=0;o[b+92>>2]=0;o[b+80>>2]=0;o[b+84>>2]=0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+152>>2]=0;o[b+156>>2]=0;o[b+160>>2]=0;o[b+164>>2]=0;o[b+168>>2]=0;o[b+172>>2]=0;r=W+u(r,244)|0;b=r;o[b+88>>2]=0;o[b+92>>2]=0;o[b+80>>2]=0;o[b+84>>2]=0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+64>>2]=0;o[b+68>>2]=0;o[b+144>>2]=0;o[b+148>>2]=0;o[b+152>>2]=0;o[b+156>>2]=0;o[b+160>>2]=0;o[b+164>>2]=0;o[b+168>>2]=0;o[b+172>>2]=0;s[q+8>>2]=v(1)/s[h+12>>2];b=o[h+32>>2];o[q+36>>2]=n+112;o[q+32>>2]=38;o[q+28>>2]=n+32;o[q+24>>2]=n+48;o[q+20>>2]=n;o[q+16>>2]=n+16;o[q+12>>2]=b;o[n+116>>2]=o[h+40>>2];b=o[h+4>>2];o[q+48>>2]=n+124;o[q+44>>2]=n+120;o[q+40>>2]=n+116;o[q+60>>2]=b;o[q+56>>2]=o[h+20>>2];b=o[U>>2];l[o[o[b>>2]+20>>2]](b,q+8|0);if(o[P>>2]>=1){c=0;while(1){b=n+u(c,152)|0;t=s[o[U>>2]+16>>2];if(!!(s[b+124>>2]>=t)){s[b+124>>2]=t}t=v(-t);if(!!(s[b+120>>2]<=t)){s[b+120>>2]=t}o[b+132>>2]=I;k=o[I+28>>2];x=s[k+268>>2];z=s[k+272>>2];A=s[k+548>>2];J=s[k+288>>2];G=s[k+280>>2];E=s[k+284>>2];t=s[k+552>>2];C=s[k+304>>2];B=s[k+296>>2];H=s[k+300>>2];L=s[k+544>>2];D=s[k+264>>2];o[b+76>>2]=0;K=t;t=s[b>>2];N=v(B*t);B=s[b+4>>2];O=C;C=s[b+8>>2];s[b+72>>2]=K*v(v(N+v(H*B))+v(O*C));s[b+68>>2]=A*v(v(v(t*G)+v(B*E))+v(C*J));s[b+64>>2]=L*v(v(v(D*t)+v(x*B))+v(z*C));k=o[I+32>>2];J=s[k+268>>2];G=s[k+272>>2];E=s[k+548>>2];H=s[k+288>>2];L=s[k+280>>2];D=s[k+284>>2];x=s[k+552>>2];A=s[k+304>>2];z=s[k+296>>2];N=s[k+300>>2];Q=s[k+544>>2];S=s[k+264>>2];o[b+92>>2]=0;K=x;x=s[b+32>>2];T=v(z*x);z=s[b+36>>2];O=A;A=s[b+40>>2];s[b+88>>2]=K*v(v(T+v(N*z))+v(O*A));s[b+84>>2]=E*v(v(v(x*L)+v(z*D))+v(A*H));s[b+80>>2]=Q*v(v(v(S*x)+v(J*z))+v(G*A));J=v(0);G=s[b+16>>2];E=s[j+344>>2];H=s[b+20>>2];L=s[b+24>>2];K=v(v(v(v(G*v(G*E))+v(H*v(E*H)))+v(L*v(E*L)))+v(v(v(t*v(v(v(t*s[j+264>>2])+v(B*s[j+268>>2]))+v(C*s[j+272>>2])))+v(B*v(v(v(t*s[j+280>>2])+v(B*s[j+284>>2]))+v(C*s[j+288>>2]))))+v(C*v(v(v(t*s[j+296>>2])+v(B*s[j+300>>2]))+v(C*s[j+304>>2])))));E=s[b+48>>2];D=s[i+344>>2];N=s[b+52>>2];Q=s[b+56>>2];D=v(v(K+v(v(v(E*v(E*D))+v(N*v(D*N)))+v(Q*v(D*Q))))+v(v(v(x*v(v(v(x*s[i+264>>2])+v(z*s[i+268>>2]))+v(A*s[i+272>>2])))+v(z*v(v(v(x*s[i+280>>2])+v(z*s[i+284>>2]))+v(A*s[i+288>>2]))))+v(A*v(v(v(x*s[i+296>>2])+v(z*s[i+300>>2]))+v(A*s[i+304>>2])))));D=v(w(D))>v(1.1920928955078125e-7)?v(v(1)/D):v(0);s[b+108>>2]=D;S=v(0);K=v(0);O=v(0);T=v(0);X=v(0);Y=v(0);if(o[y+240>>2]){Y=s[y+232>>2];X=s[y+228>>2];T=s[y+224>>2];K=s[y+212>>2];O=s[y+208>>2];S=s[y+216>>2]}Z=v(0);_=v(0);aa=v(0);ba=v(0);ca=v(0);if(o[r+240>>2]){ca=s[r+232>>2];ba=s[r+228>>2];aa=s[r+224>>2];Z=s[r+212>>2];_=s[r+208>>2];J=s[r+216>>2]}da=s[j+320>>2];ea=s[j+312>>2];fa=s[j+316>>2];ha=s[j+336>>2];ka=s[j+328>>2];la=s[j+332>>2];ma=s[i+320>>2];na=s[i+312>>2];oa=s[i+316>>2];pa=s[i+336>>2];qa=s[i+328>>2];ra=s[i+332>>2];sa=s[q+60>>2];o[b+100>>2]=0;s[b+112>>2]=v(D*s[b+112>>2])+v(D*v(v(0)-v(sa*v(v(v(v(v(G*v(O+ea))+v(H*v(K+fa)))+v(L*v(S+da)))+v(v(v(t*v(T+ka))+v(B*v(X+la)))+v(C*v(Y+ha))))+v(v(v(v(E*v(_+na))+v(N*v(Z+oa)))+v(Q*v(J+ma)))+v(v(v(x*v(aa+qa))+v(z*v(ba+ra)))+v(A*v(ca+pa))))))));c=c+1|0;if((c|0)<o[P>>2]){continue}break}}i=o[a+176>>2]}F=o[i+V>>2]+F|0;R=R+1|0;if((R|0)!=(g|0)){continue}break}}l[o[o[a>>2]+28>>2]](a,d,e,h);e=o[a+68>>2];d=o[a+28>>2];c=o[a+128>>2];f=o[a+48>>2];if(!((c|0)>=(f|0)|o[a+132>>2]>=(f|0))){i=0;b=0;if(f){o[7717]=o[7717]+1;b=l[o[6606]](f<<2,16)|0;c=o[a+128>>2]}g=o[a+136>>2];e:{f:{if((c|0)>=1){while(1){j=i<<2;o[j+b>>2]=o[g+j>>2];i=i+1|0;if((c|0)!=(i|0)){continue}break f}}if(!g){break e}}if(p[a+140|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+136>>2]=0}o[a+136>>2]=b;o[a+132>>2]=f;m[a+140|0]=1}o[a+128>>2]=f;g:{if(p[h+64|0]&16){c=o[a+108>>2];h=d<<1;if(!((c|0)>=(h|0)|o[a+112>>2]>=(h|0))){i=0;b=0;if(d){o[7717]=o[7717]+1;b=l[o[6606]](d<<3,16)|0;c=o[a+108>>2]}g=o[a+116>>2];h:{i:{if((c|0)>=1){while(1){j=i<<2;o[j+b>>2]=o[g+j>>2];i=i+1|0;if((c|0)!=(i|0)){continue}break i}}if(!g){break h}}if(p[a+120|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+116>>2]=0}o[a+116>>2]=b;o[a+112>>2]=h;m[a+120|0]=1}o[a+108>>2]=h;break g}c=o[a+108>>2];if(!((c|0)>=(d|0)|o[a+112>>2]>=(d|0))){i=0;b=0;if(d){o[7717]=o[7717]+1;b=l[o[6606]](d<<2,16)|0;c=o[a+108>>2]}g=o[a+116>>2];j:{k:{if((c|0)>=1){while(1){h=i<<2;o[h+b>>2]=o[g+h>>2];i=i+1|0;if((c|0)!=(i|0)){continue}break k}}if(!g){break j}}if(p[a+120|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+116>>2]=0}o[a+116>>2]=b;o[a+112>>2]=d;m[a+120|0]=1}o[a+108>>2]=d}c=o[a+148>>2];if(!((c|0)>=(e|0)|o[a+152>>2]>=(e|0))){i=0;b=0;if(e){o[7717]=o[7717]+1;b=l[o[6606]](e<<2,16)|0;c=o[a+148>>2]}g=o[a+156>>2];l:{m:{if((c|0)>=1){while(1){h=i<<2;o[h+b>>2]=o[g+h>>2];i=i+1|0;if((c|0)!=(i|0)){continue}break m}}if(!g){break l}}if(p[a+160|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+156>>2]=0}o[a+156>>2]=b;o[a+152>>2]=e;m[a+160|0]=1}o[a+148>>2]=e;if((f|0)>=1){b=o[a+136>>2];i=0;while(1){o[b+(i<<2)>>2]=i;i=i+1|0;if((f|0)!=(i|0)){continue}break}}if((d|0)>=1){b=o[a+116>>2];i=0;while(1){o[b+(i<<2)>>2]=i;i=i+1|0;if((d|0)!=(i|0)){continue}break}}if((e|0)>=1){a=o[a+156>>2];i=0;while(1){o[a+(i<<2)>>2]=i;i=i+1|0;if((e|0)!=(i|0)){continue}break}}ga();M=q+256|0;return v(v(0))}function pC(a,b,c,d,f,j,k,l){var n=v(0),q=0,r=0,t=v(0),x=v(0),y=0,z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=0,H=0,I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=0,Q=0,R=0,S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=v(0),da=v(0),ea=v(0),fa=0,ga=v(0),ha=v(0),ia=v(0),ja=v(0),ka=v(0),la=v(0);q=M-48|0;M=q;fa=p[a+180|0];ga=s[a+880>>2];ha=s[a+944>>2];ia=s[a+876>>2];ja=s[a+940>>2];ka=s[a+872>>2];la=s[a+936>>2];n=v(k+l);D=n>v(0)?v(l/n):v(.5);F=v(v(1)-D);G=o[b+24>>2];N=s[a+920>>2];J=s[a+904>>2];K=s[a+856>>2];Y=o[a+856>>2];S=s[a+840>>2];Z=o[a+840>>2];U=s[a+888>>2];T=s[a+824>>2];_=o[a+824>>2];H=p[a+49|0];a:{if(H){x=v(v(D*T)+v(F*U));t=v(v(D*S)+v(F*J));E=v(v(D*K)+v(F*N));n=v(v(1)/v(C(v(v(v(x*x)+v(t*t))+v(E*E)))));t=v(t*n);A=v(x*n);I=v(E*n);b:{if(!!(v(w(I))>v(.7071067690849304))){n=v(v(I*I)+v(t*t));L=v(v(1)/v(C(n)));n=v(n*L);x=v(L*v(-I));E=v(A*x);O=v(t*L);L=v(O*v(-A));break b}x=v(v(A*A)+v(t*t));n=v(v(1)/v(C(x)));E=v(x*n);z=v(n*v(-t));L=v(I*z);x=v(A*n);n=v(x*v(-I))}Z=(g(t),h(0));_=(g(A),h(0));s[q+40>>2]=O;s[q+36>>2]=x;s[q+24>>2]=E;s[q+20>>2]=L;s[q+16>>2]=n;s[q+32>>2]=z;r=(g(z),h(0));Y=(g(I),h(0));break a}r=o[a+828>>2];y=o[a+844>>2];B=o[a+860>>2];o[q+44>>2]=0;o[q+40>>2]=B;o[q+36>>2]=y;o[q+32>>2]=r;y=o[a+832>>2];B=o[a+848>>2];Q=o[a+864>>2];o[q+28>>2]=0;o[q+24>>2]=Q;o[q+20>>2]=B;o[q+16>>2]=y}y=o[b+12>>2];o[y>>2]=r;o[y+4>>2]=o[q+36>>2];o[y+8>>2]=o[q+40>>2];B=G<<2;o[B+y>>2]=o[q+16>>2];Q=B+4|0;o[Q+y>>2]=o[q+20>>2];P=B+8|0;o[P+y>>2]=o[q+24>>2];r=o[b+20>>2];x=s[q+32>>2];W=v(-x);s[r>>2]=W;t=s[q+36>>2];s[r+4>>2]=-t;E=s[q+40>>2];s[r+8>>2]=-E;L=s[q+16>>2];s[r+B>>2]=-L;O=s[q+20>>2];s[r+Q>>2]=-O;A=s[q+24>>2];s[r+P>>2]=-A;n=s[a+280>>2];Q=o[b+28>>2];P=Q;R=o[a+300>>2];if(!(R&128)){n=v(n*s[b+4>>2])}n=v(n*s[b>>2]);z=v(v(S*N)-v(K*J));I=v(v(K*U)-v(T*N));N=v(v(T*J)-v(S*U));s[P>>2]=n*v(v(v(z*x)+v(I*t))+v(N*E));s[B+Q>>2]=n*v(v(v(z*L)+v(I*O))+v(N*A));if(R&64){B=o[b+32>>2];o[B>>2]=o[a+292>>2];o[B+(G<<2)>>2]=o[a+292>>2]}X=k<v(1.1920928955078125e-7)|l<v(1.1920928955078125e-7);k=s[d+56>>2];l=s[d+52>>2];n=s[c+56>>2];I=s[c+52>>2];z=s[d+48>>2];N=s[c+48>>2];o[q+8>>2]=0;o[q+12>>2]=0;o[q>>2]=0;o[q+4>>2]=0;Q=u(G,3);c=G<<1;c:{if(H){L=s[a+1032>>2];O=s[a+1080>>2];x=s[a+944>>2];t=s[a+936>>2];E=s[a+940>>2];A=s[a+880>>2];S=s[a+872>>2];U=s[a+876>>2];o[q+44>>2]=0;T=v(t-z);z=(e(0,_),i());W=v(E-l);J=(e(0,Z),i());l=v(x-k);K=(e(0,Y),i());k=v(v(v(T*z)+v(W*J))+v(l*K));t=v(k*K);N=v(S-N);x=v(U-I);A=v(A-n);n=v(v(v(N*z)+v(x*J))+v(A*K));E=v(n*K);I=v(l-t);S=v(A-E);l=v(v(D*I)+v(F*S));s[q+40>>2]=l;U=v(k*J);W=v(W-U);ca=v(n*J);da=v(x-ca);x=v(v(D*W)+v(F*da));s[q+36>>2]=x;V=T;T=v(k*z);ea=v(V-T);n=v(n*z);V=v(N-n);A=v(v(D*ea)+v(F*V));s[q+32>>2]=A;k=v(O-L);t=v(v(E+v(k*K))-t);L=v(I-v(F*t));E=v(v(ca+v(k*J))-U);I=v(W-v(F*E));n=v(v(n+v(k*z))-T);k=v(ea-v(F*n));N=v(S+v(D*t));E=v(da+v(D*E));O=v(V+v(D*n));n=v(v(l*l)+v(v(A*A)+v(x*x)));d:{if(!!(n>v(1.1920928955078125e-7))){V=l;l=v(v(1)/v(C(n)));n=v(V*l);s[q+40>>2]=n;t=v(x*l);s[q+36>>2]=t;x=v(A*l);s[q+32>>2]=x;B=(g(n),h(0));G=(g(t),h(0));break d}x=s[a+828>>2];d=o[a+828>>2];t=s[a+844>>2];G=o[a+844>>2];n=s[a+860>>2];B=o[a+860>>2];o[q+44>>2]=0;o[q+40>>2]=B;o[q+36>>2]=G;o[q+32>>2]=d}s[q+8>>2]=v(O*t)-v(E*x);o[q+28>>2]=0;s[q+4>>2]=v(N*x)-v(O*n);s[q>>2]=v(E*n)-v(N*t);l=v(v(t*z)-v(x*J));s[q+24>>2]=l;A=v(v(x*K)-v(n*z));s[q+20>>2]=A;s[q+16>>2]=v(n*J)-v(t*K);H=c<<2;d=H+y|0;o[d+8>>2]=o[q+8>>2];y=o[q+4>>2];o[d>>2]=o[q>>2];o[d+4>>2]=y;s[r+H>>2]=-v(v(I*n)-v(L*t));P=(c|1)<<2;s[P+r>>2]=-v(v(L*x)-v(k*n));R=c+2<<2;s[R+r>>2]=-v(v(k*t)-v(I*x));o[q+12>>2]=0;x=v(v(E*l)-v(N*A));s[q>>2]=x;n=s[q+16>>2];J=v(v(O*A)-v(E*n));s[q+8>>2]=J;K=v(v(N*n)-v(O*l));s[q+4>>2]=K;t=v(v(I*l)-v(L*A));z=v(v(k*A)-v(I*n));n=v(v(L*n)-v(k*l));if(!(!X|!p[a+297|0])){s[q+8>>2]=D*J;s[q+4>>2]=D*K;s[q>>2]=D*x;z=v(F*z);t=v(F*t);n=v(F*n)}y=o[q+4>>2];d=Q<<2;r=d+o[b+12>>2]|0;o[r>>2]=o[q>>2];o[r+4>>2]=y;o[r+8>>2]=o[q+8>>2];r=o[b+20>>2];$=d+4|0;s[r+$>>2]=-n;s[d+r>>2]=-t;aa=d+8|0;s[aa+r>>2]=-z;r=o[b+8>>2];o[H+r>>2]=o[q+32>>2];o[r+P>>2]=G;o[r+R>>2]=B;y=o[q+16>>2];s[r+aa>>2]=l;s[r+$>>2]=A;o[d+r>>2]=y;y=o[b+16>>2];s[H+y>>2]=-s[q+32>>2];t=(e(0,G),i());s[y+P>>2]=-t;S=(e(0,B),i());s[y+R>>2]=-S;x=s[q+16>>2];s[y+$>>2]=-A;s[d+y>>2]=-x;H=y+aa|0;z=v(0);J=v(0);K=v(0);n=v(-l);break c}d=c<<2;J=v(l-I);K=v(k-n);k=v(v(J*E)-v(K*t));s[d+y>>2]=D*k;B=d|4;z=v(z-N);l=v(v(K*x)-v(z*E));s[B+y>>2]=D*l;H=d+8|0;n=v(v(z*t)-v(J*x));s[H+y>>2]=D*n;s[d+r>>2]=F*k;s[r+B>>2]=F*l;s[r+H>>2]=F*n;G=Q<<2;P=G+8|0;k=v(v(z*O)-v(J*L));s[P+y>>2]=D*k;R=G+4|0;l=v(v(K*L)-v(z*A));s[R+y>>2]=D*l;n=v(v(J*A)-v(K*O));s[y+G>>2]=D*n;s[r+P>>2]=F*k;s[r+R>>2]=F*l;s[r+G>>2]=F*n;r=o[b+8>>2];s[d+r>>2]=x;s[r+B>>2]=t;s[r+H>>2]=E;s[r+P>>2]=A;s[r+R>>2]=O;s[r+G>>2]=L;y=o[b+16>>2];s[d+y>>2]=W;t=s[q+36>>2];s[y+B>>2]=-t;S=s[q+40>>2];s[y+H>>2]=-S;x=s[q+16>>2];s[y+G>>2]=-x;A=s[q+20>>2];s[y+R>>2]=-A;H=y+P|0;k=v(0);I=v(0);L=v(0);O=v(0);E=v(0);N=v(0);l=s[q+24>>2];n=v(-l)}s[H>>2]=n;n=s[a+264>>2];H=o[b+28>>2];c=c<<2;d=H+c|0;P=o[a+300>>2];if(!(P&32)){n=v(n*s[b+4>>2])}n=v(n*s[b>>2]);U=v(la-ka);T=v(ja-ia);V=v(v(U*s[q+32>>2])+v(T*t));t=v(ha-ga);s[d>>2]=n*v(V+v(t*S));d=Q<<2;s[d+H>>2]=n*v(v(v(U*x)+v(T*A))+v(t*l));if(P&16){ba=c;c=o[b+32>>2];o[ba+c>>2]=o[a+276>>2];o[c+d>>2]=o[a+276>>2]}A=fa?v(1):v(-1);e:{f:{g:{if(p[a+296|0]){n=v(A*s[a+1032>>2]);Q=n>v(0)?2:1;R=p[a+1096|0];c=1;break g}if(!p[a+1096|0]){break f}n=v(0);R=1;Q=0;c=0}d=o[b+24>>2];$=d<<4;o[$+r>>2]=_;B=d<<2;aa=B|1;d=aa<<2;o[d+r>>2]=Z;ba=r;G=B|2;r=G<<2;o[ba+r>>2]=Y;l=(e(0,_),i());s[y+$>>2]=-l;x=(e(0,Z),i());s[d+y>>2]=-x;t=(e(0,Y),i());s[r+y>>2]=-t;h:{i:{if(p[a+49|0]){if(X){break h}o[q+12>>2]=0;D=v(v(O*x)-v(E*l));s[q+8>>2]=D;F=v(v(N*l)-v(O*t));s[q+4>>2]=F;z=v(v(E*t)-v(N*x));s[q>>2]=z;d=o[b+12>>2];y=B<<2;s[d+y>>2]=z;X=aa<<2;s[X+d>>2]=F;s[d+(G<<2)>>2]=D;r=o[b+20>>2];s[y+r>>2]=-v(v(I*t)-v(L*x));s[r+X>>2]=-v(v(L*l)-v(k*t));k=v(-v(v(k*x)-v(I*l)));break i}y=o[b+12>>2];X=B<<2;k=v(v(J*t)-v(K*x));s[y+X>>2]=D*k;E=v(v(K*l)-v(z*t));s[d+y>>2]=D*E;V=D;D=v(v(z*x)-v(J*l));s[r+y>>2]=V*D;r=o[b+20>>2];s[X+r>>2]=F*k;s[d+r>>2]=F*E;k=v(F*D)}s[(G<<2)+r>>2]=k}k=s[a+188>>2];D=s[a+184>>2];r=B<<2;o[r+H>>2]=0;d=o[b+36>>2];o[r+d>>2]=0;G=o[b+40>>2];o[r+G>>2]=0;F=s[(P&512?a+232|0:b+4|0)>>2];if(!(!R|c&D==k)){if(P&1){o[o[b+32>>2]+(B<<2)>>2]=o[a+212>>2]}z=Tc(s[a+1080>>2],s[a+184>>2],s[a+188>>2],s[a+1100>>2],v(F*s[b>>2]));H=o[b+28>>2];r=B<<2;d=H+r|0;s[d>>2]=s[d>>2]-v(v(A*z)*s[a+1100>>2]);d=o[b+36>>2];y=r+d|0;s[y>>2]=s[y>>2]-v(s[a+1104>>2]*s[b>>2]);G=o[b+40>>2];r=r+G|0;s[r>>2]=v(s[a+1104>>2]*s[b>>2])+s[r>>2]}y=5;if(!c){break e}r=B<<2;c=r+H|0;s[c>>2]=s[c>>2]+v(n*v(F*s[b>>2]));if(m[a+301|0]&1){o[r+o[b+32>>2]>>2]=o[a+244>>2]}ba=(B<<2)+G|0;j:{k:{if(D==k){o[(B<<2)+d>>2]=-8388609;break k}d=(B<<2)+d|0;if((Q|0)==1){o[d>>2]=-8388609;k=v(0);break j}o[d>>2]=0}k=v(3.4028234663852886e+38)}s[ba>>2]=k;k=v(v(1)-s[a+240>>2]);l:{if(k==v(0)|k!=k){break l}n=v(w(k));k=v(A*v(v(v(v(s[f>>2]*l)+v(s[f+4>>2]*x))+v(s[f+8>>2]*t))-v(v(v(s[j>>2]*l)+v(s[j+4>>2]*x))+v(s[j+8>>2]*t))));if((Q|0)==1){if(!(k<v(0))){break l}k=v(k*v(-n));if(!(k>s[c>>2])){break l}s[c>>2]=k;break l}if(!(k>v(0))){break l}k=v(k*v(-n));if(!(k<s[c>>2])){break l}s[c>>2]=k}s[c>>2]=s[a+232>>2]*s[c>>2];break e}y=4}m:{n:{if(p[a+297|0]){z=s[a+1088>>2];f=z>v(0)?1:2;G=!p[a+1112|0];c=1;break n}if(!p[a+1112|0]){break m}z=v(0);G=0;f=0;c=0}r=o[b+12>>2];d=u(o[b+24>>2],y);j=d<<2;o[r+j>>2]=_;y=j+8|0;o[y+r>>2]=Y;B=j+4|0;o[B+r>>2]=Z;r=o[b+20>>2];t=(e(0,Y),i());s[r+y>>2]=-t;D=(e(0,Z),i());s[r+B>>2]=-D;F=(e(0,_),i());s[j+r>>2]=-F;j=o[a+300>>2];E=s[(j&2048?a+248|0:b+4|0)>>2];l=s[a+192>>2];k=s[a+196>>2];if(!(c&l==k|G)){n=k;x=l;if(j&4){o[o[b+32>>2]+(d<<2)>>2]=o[a+228>>2];x=s[a+192>>2];n=s[a+196>>2]}n=Tc(s[a+1084>>2],x,n,s[a+1116>>2],v(E*s[b>>2]));H=o[b+28>>2];j=d<<2;s[H+j>>2]=n*s[a+1116>>2];s[j+o[b+36>>2]>>2]=s[b>>2]*v(-s[a+1120>>2]);s[j+o[b+40>>2]>>2]=s[a+1120>>2]*s[b>>2]}if(!c){break m}j=d<<2;c=j+H|0;s[c>>2]=s[c>>2]+v(z*v(E*s[b>>2]));if(p[a+301|0]&4){o[j+o[b+32>>2]>>2]=o[a+260>>2]}o:{if(l==k){o[o[b+36>>2]+(d<<2)>>2]=-8388609;k=v(3.4028234663852886e+38);break o}j=o[b+36>>2]+(d<<2)|0;if((f|0)==1){o[j>>2]=0;k=v(3.4028234663852886e+38);break o}o[j>>2]=-8388609;k=v(0)}s[o[b+40>>2]+(d<<2)>>2]=k;k=v(v(1)-s[a+256>>2]);p:{if(k==v(0)|k!=k){break p}l=v(w(k));b=o[a+28>>2];k=v(v(v(s[b+328>>2]*F)+v(s[b+332>>2]*D))+v(s[b+336>>2]*t));b=o[a+32>>2];k=v(k-v(v(v(s[b+328>>2]*F)+v(s[b+332>>2]*D))+v(s[b+336>>2]*t)));if((f|0)==1){if(!(k<v(0))){break p}k=v(k*v(-l));if(!(k>s[c>>2])){break p}s[c>>2]=k;break p}if(!(k>v(0))){break p}k=v(k*v(-l));if(!(k<s[c>>2])){break p}s[c>>2]=k}s[c>>2]=s[a+248>>2]*s[c>>2]}M=q+48|0}function UF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=0,n=0,q=0,r=0,t=v(0),u=0,x=0,y=0,z=0,A=0;f=M-48|0;M=f;k=s[a+40>>2];g=s[a+24>>2];i=v(v(1)/s[a+116>>2]);j=s[a+56>>2];e=v(v(i*s[d+8>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;a:{if(w(r)<2147483648){m=~~r;break a}m=-2147483648}y=m+1|0;e=v(v(i*s[c+8>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;b:{if(w(r)<2147483648){m=~~r;break b}m=-2147483648}u=m+ -1|0;k=s[a+36>>2];g=s[a+20>>2];i=v(v(1)/s[a+112>>2]);j=s[a+52>>2];e=v(v(i*s[d+4>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;c:{if(w(r)<2147483648){m=~~r;break c}m=-2147483648}z=m+1|0;e=v(v(i*s[c+4>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;d:{if(w(r)<2147483648){m=~~r;break d}m=-2147483648}n=m+ -1|0;k=s[a+32>>2];g=s[a+16>>2];i=v(v(1)/s[a+108>>2]);j=s[a+48>>2];e=v(v(i*s[d>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;e:{if(w(r)<2147483648){d=~~r;break e}d=-2147483648}d=d+1|0;e=v(v(i*s[c>>2])+j);e=e<g?g:e;e=k<e?k:e;r=(e<v(0)?-.5:.5)+ +e;f:{if(w(r)<2147483648){c=~~r;break f}c=-2147483648}c=c+ -1|0;m=o[a+68>>2]+ -1|0;x=o[a+64>>2]+ -1|0;g:{h:{switch(o[a+104>>2]){case 0:m=(y|0)<(m|0)?y:m;q=(u|0)>0?u:0;x=(z|0)<(x|0)?z:x;A=(n|0)>0?n:0;break g;case 1:m=(y|0)<(m|0)?y:m;q=(u|0)>0?u:0;x=(d|0)<(x|0)?d:x;A=(c|0)>0?c:0;break g;case 2:break h;default:break g}}m=(z|0)<(m|0)?z:m;q=(n|0)>0?n:0;x=(d|0)<(x|0)?d:x;A=(c|0)>0?c:0}if((q|0)<(m|0)){while(1){z=m;if((A|0)>=(x|0)){c=q+1|0}else{y=q&1;u=q+1|0;t=v(u|0);k=v(q|0);c=A;while(1){i:{if(!(!p[a+102|0]|y?!(p[a+100|0]|(c+q&1?0:p[a+101|0])):0)){g=v(l[o[o[a>>2]+68>>2]](a,c,q));d=f;j:{k:{l:{switch(o[a+104>>2]){default:h=s[f+8>>2];g=s[f+4>>2];e=s[f>>2];break j;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+12>>2]=0;e=v(g-e);s[f>>2]=e;h=v(k-v(j*v(.5)));s[f+8>>2]=h;g=v(v(c|0)-v(i*v(.5)));s[f+4>>2]=g;break j;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+12>>2]=0;g=v(g-e);s[f+4>>2]=g;h=v(k-v(j*v(.5)));s[f+8>>2]=h;e=v(v(c|0)-v(i*v(.5)));break k;case 2:break l}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+12>>2]=0;h=v(g-e);s[f+8>>2]=h;g=v(k-v(j*v(.5)));s[f+4>>2]=g;e=v(v(c|0)-v(i*v(.5)))}s[d>>2]=e}s[f>>2]=e*s[a+108>>2];s[f+4>>2]=g*s[a+112>>2];s[f+8>>2]=h*s[a+116>>2];d=c+1|0;g=v(l[o[o[a>>2]+68>>2]](a,d,q));n=f;m:{n:{o:{switch(o[a+104>>2]){default:h=s[f+24>>2];g=s[f+20>>2];e=s[f+16>>2];break m;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+28>>2]=0;e=v(g-e);s[f+16>>2]=e;h=v(k-v(j*v(.5)));s[f+24>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+20>>2]=g;break m;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+28>>2]=0;g=v(g-e);s[f+20>>2]=g;h=v(k-v(j*v(.5)));s[f+24>>2]=h;e=v(v(d|0)-v(i*v(.5)));break n;case 2:break o}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+28>>2]=0;h=v(g-e);s[f+24>>2]=h;g=v(k-v(j*v(.5)));s[f+20>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n+16>>2]=e}s[f+16>>2]=e*s[a+108>>2];s[f+20>>2]=g*s[a+112>>2];s[f+24>>2]=h*s[a+116>>2];g=v(l[o[o[a>>2]+68>>2]](a,d,u));n=f;p:{q:{r:{switch(o[a+104>>2]){default:h=s[f+40>>2];g=s[f+36>>2];e=s[f+32>>2];break p;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+44>>2]=0;e=v(g-e);s[f+32>>2]=e;h=v(t-v(j*v(.5)));s[f+40>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+36>>2]=g;break p;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+44>>2]=0;g=v(g-e);s[f+36>>2]=g;h=v(t-v(j*v(.5)));s[f+40>>2]=h;e=v(v(d|0)-v(i*v(.5)));break q;case 2:break r}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+44>>2]=0;h=v(g-e);s[f+40>>2]=h;g=v(t-v(j*v(.5)));s[f+36>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n+32>>2]=e}s[f+32>>2]=e*s[a+108>>2];s[f+36>>2]=g*s[a+112>>2];s[f+40>>2]=h*s[a+116>>2];l[o[o[b>>2]+8>>2]](b,f,c,q);g=v(l[o[o[a>>2]+68>>2]](a,d,u));n=f;s:{t:{u:{switch(o[a+104>>2]){default:h=s[f+24>>2];g=s[f+20>>2];e=s[f+16>>2];break s;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+28>>2]=0;e=v(g-e);s[f+16>>2]=e;h=v(t-v(j*v(.5)));s[f+24>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+20>>2]=g;break s;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+28>>2]=0;g=v(g-e);s[f+20>>2]=g;h=v(t-v(j*v(.5)));s[f+24>>2]=h;e=v(v(d|0)-v(i*v(.5)));break t;case 2:break u}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+28>>2]=0;h=v(g-e);s[f+24>>2]=h;g=v(t-v(j*v(.5)));s[f+20>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n+16>>2]=e}s[f+16>>2]=e*s[a+108>>2];s[f+20>>2]=g*s[a+112>>2];s[f+24>>2]=h*s[a+116>>2];g=v(l[o[o[a>>2]+68>>2]](a,c,u));n=f;v:{w:{x:{switch(o[a+104>>2]){default:h=s[f+40>>2];g=s[f+36>>2];e=s[f+32>>2];break v;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+44>>2]=0;e=v(g-e);s[f+32>>2]=e;h=v(t-v(j*v(.5)));s[f+40>>2]=h;g=v(v(c|0)-v(i*v(.5)));s[f+36>>2]=g;break v;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+44>>2]=0;g=v(g-e);s[f+36>>2]=g;h=v(t-v(j*v(.5)));s[f+40>>2]=h;e=v(v(c|0)-v(i*v(.5)));break w;case 2:break x}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+44>>2]=0;h=v(g-e);s[f+40>>2]=h;g=v(t-v(j*v(.5)));s[f+36>>2]=g;e=v(v(c|0)-v(i*v(.5)))}s[n+32>>2]=e}break i}g=v(l[o[o[a>>2]+68>>2]](a,c,q));d=f;y:{z:{A:{switch(o[a+104>>2]){default:h=s[f+8>>2];g=s[f+4>>2];e=s[f>>2];break y;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+12>>2]=0;e=v(g-e);s[f>>2]=e;h=v(k-v(j*v(.5)));s[f+8>>2]=h;g=v(v(c|0)-v(i*v(.5)));s[f+4>>2]=g;break y;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+12>>2]=0;g=v(g-e);s[f+4>>2]=g;h=v(k-v(j*v(.5)));s[f+8>>2]=h;e=v(v(c|0)-v(i*v(.5)));break z;case 2:break A}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+12>>2]=0;h=v(g-e);s[f+8>>2]=h;g=v(k-v(j*v(.5)));s[f+4>>2]=g;e=v(v(c|0)-v(i*v(.5)))}s[d>>2]=e}s[f>>2]=e*s[a+108>>2];s[f+4>>2]=g*s[a+112>>2];s[f+8>>2]=h*s[a+116>>2];g=v(l[o[o[a>>2]+68>>2]](a,c,u));d=f;B:{C:{D:{switch(o[a+104>>2]){default:h=s[f+24>>2];g=s[f+20>>2];e=s[f+16>>2];break B;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+28>>2]=0;e=v(g-e);s[f+16>>2]=e;h=v(t-v(j*v(.5)));s[f+24>>2]=h;g=v(v(c|0)-v(i*v(.5)));s[f+20>>2]=g;break B;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+28>>2]=0;g=v(g-e);s[f+20>>2]=g;h=v(t-v(j*v(.5)));s[f+24>>2]=h;e=v(v(c|0)-v(i*v(.5)));break C;case 2:break D}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+28>>2]=0;h=v(g-e);s[f+24>>2]=h;g=v(t-v(j*v(.5)));s[f+20>>2]=g;e=v(v(c|0)-v(i*v(.5)))}s[d+16>>2]=e}s[f+16>>2]=e*s[a+108>>2];s[f+20>>2]=g*s[a+112>>2];s[f+24>>2]=h*s[a+116>>2];d=c+1|0;g=v(l[o[o[a>>2]+68>>2]](a,d,q));n=f;E:{F:{G:{switch(o[a+104>>2]){default:h=s[f+40>>2];g=s[f+36>>2];e=s[f+32>>2];break E;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+44>>2]=0;e=v(g-e);s[f+32>>2]=e;h=v(k-v(j*v(.5)));s[f+40>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+36>>2]=g;break E;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+44>>2]=0;g=v(g-e);s[f+36>>2]=g;h=v(k-v(j*v(.5)));s[f+40>>2]=h;e=v(v(d|0)-v(i*v(.5)));break F;case 2:break G}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+44>>2]=0;h=v(g-e);s[f+40>>2]=h;g=v(k-v(j*v(.5)));s[f+36>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n+32>>2]=e}s[f+32>>2]=e*s[a+108>>2];s[f+36>>2]=g*s[a+112>>2];s[f+40>>2]=h*s[a+116>>2];l[o[o[b>>2]+8>>2]](b,f,c,q);g=v(l[o[o[a>>2]+68>>2]](a,d,q));n=f;H:{I:{J:{switch(o[a+104>>2]){default:h=s[f+8>>2];g=s[f+4>>2];e=s[f>>2];break H;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+12>>2]=0;e=v(g-e);s[f>>2]=e;h=v(k-v(j*v(.5)));s[f+8>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+4>>2]=g;break H;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+12>>2]=0;g=v(g-e);s[f+4>>2]=g;h=v(k-v(j*v(.5)));s[f+8>>2]=h;e=v(v(d|0)-v(i*v(.5)));break I;case 2:break J}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+12>>2]=0;h=v(g-e);s[f+8>>2]=h;g=v(k-v(j*v(.5)));s[f+4>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n>>2]=e}s[f>>2]=e*s[a+108>>2];s[f+4>>2]=g*s[a+112>>2];s[f+8>>2]=h*s[a+116>>2];g=v(l[o[o[a>>2]+68>>2]](a,d,u));n=f;K:{L:{M:{switch(o[a+104>>2]){default:h=s[f+40>>2];g=s[f+36>>2];e=s[f+32>>2];break K;case 0:i=s[a+80>>2];j=s[a+84>>2];e=s[a+48>>2];o[f+44>>2]=0;e=v(g-e);s[f+32>>2]=e;h=v(t-v(j*v(.5)));s[f+40>>2]=h;g=v(v(d|0)-v(i*v(.5)));s[f+36>>2]=g;break K;case 1:i=s[a+80>>2];j=s[a+84>>2];e=s[a+52>>2];o[f+44>>2]=0;g=v(g-e);s[f+36>>2]=g;h=v(t-v(j*v(.5)));s[f+40>>2]=h;e=v(v(d|0)-v(i*v(.5)));break L;case 2:break M}}i=s[a+80>>2];j=s[a+84>>2];e=s[a+56>>2];o[f+44>>2]=0;h=v(g-e);s[f+40>>2]=h;g=v(t-v(j*v(.5)));s[f+36>>2]=g;e=v(v(d|0)-v(i*v(.5)))}s[n+32>>2]=e}}s[f+32>>2]=e*s[a+108>>2];s[f+36>>2]=g*s[a+112>>2];s[f+40>>2]=h*s[a+116>>2];l[o[o[b>>2]+8>>2]](b,f,c,q);c=d;if((d|0)!=(x|0)){continue}break}c=u}q=c;if((z|0)!=(q|0)){continue}break}}M=f+48|0}function TJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=0,y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=0,H=0,I=v(0),J=v(0),K=0,L=0,N=0,O=0,P=0,Q=v(0),R=v(0),S=v(0);e=M-144|0;M=e;f=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[f>>2]+56>>2]](f,b,v(1));a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{f=o[c+4>>2];switch(f|0){case 31:break j;case 28:break c;case 13:break d;case 11:break e;case 10:break f;case 9:break g;case 8:break h;case 0:break i;default:break b}}x=o[c+16>>2];if((x|0)<1){break a}while(1){f=x+ -1|0;i=o[c+24>>2]+u(f,80)|0;G=o[i+64>>2];r=s[i+56>>2];t=s[i+48>>2];B=s[i+52>>2];y=s[i+32>>2];C=s[i>>2];D=s[i+16>>2];F=s[i+36>>2];k=s[i+4>>2];w=s[i+20>>2];E=s[i+40>>2];I=s[i+8>>2];J=s[i+24>>2];Q=s[b+48>>2];R=s[b+52>>2];S=s[b+56>>2];g=s[b+8>>2];h=s[b>>2];j=s[b+4>>2];m=s[b+24>>2];n=s[b+16>>2];p=s[b+20>>2];z=s[b+40>>2];A=s[b+32>>2];q=s[b+36>>2];o[e+60>>2]=0;o[e+44>>2]=0;o[e+28>>2]=0;o[e+12>>2]=0;s[e+40>>2]=v(v(I*A)+v(J*q))+v(E*z);s[e+36>>2]=v(v(k*A)+v(w*q))+v(F*z);s[e+32>>2]=v(v(C*A)+v(D*q))+v(y*z);s[e+24>>2]=v(v(I*n)+v(J*p))+v(E*m);s[e+20>>2]=v(v(k*n)+v(w*p))+v(F*m);s[e+16>>2]=v(v(C*n)+v(D*p))+v(y*m);s[e+8>>2]=v(v(I*h)+v(J*j))+v(E*g);s[e+4>>2]=v(v(k*h)+v(w*j))+v(F*g);s[e>>2]=v(v(C*h)+v(D*j))+v(y*g);s[e+56>>2]=S+v(v(v(t*A)+v(B*q))+v(r*z));s[e+52>>2]=R+v(v(v(t*n)+v(B*p))+v(r*m));s[e+48>>2]=Q+v(v(v(t*h)+v(B*j))+v(r*g));l[o[o[a>>2]+28>>2]](a,e,G,d);i=(x|0)>1;x=f;if(i){continue}break}break a}f=o[c+40>>2];o[e+8>>2]=o[c+36>>2];o[e+12>>2]=f;f=o[c+32>>2];o[e>>2]=o[c+28>>2];o[e+4>>2]=f;g=v(l[o[o[c>>2]+48>>2]](c));h=v(l[o[o[c>>2]+48>>2]](c));j=v(v(l[o[o[c>>2]+48>>2]](c))+s[e+8>>2]);s[e+8>>2]=j;g=v(g+s[e>>2]);s[e>>2]=g;h=v(h+s[e+4>>2]);s[e+4>>2]=h;a=l[o[o[a>>2]+20>>2]](a)|0;o[e+140>>2]=0;s[e+136>>2]=-j;s[e+132>>2]=-h;s[e+128>>2]=-g;l[o[o[a>>2]+72>>2]](a,e+128|0,e,b,d);break a}g=v(l[o[o[c>>2]+48>>2]](c));a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+16>>2]](a,g,b,d);break a}f=o[c+92>>2];if((f|0)<1){break a}while(1){i=f+ -1|0;x=o[c+100>>2]+(i<<4)|0;g=s[x+8>>2];h=s[x>>2];j=s[x+4>>2];x=l[o[o[a>>2]+20>>2]](a)|0;y=s[o[c+120>>2]+(i<<2)>>2];C=s[b+48>>2];D=s[b+52>>2];F=s[b+56>>2];m=s[b+8>>2];n=s[b>>2];p=s[b+4>>2];z=s[b+24>>2];A=s[b+16>>2];q=s[b+20>>2];r=s[b+40>>2];t=s[b+32>>2];B=s[b+36>>2];o[e+60>>2]=0;o[e+44>>2]=0;o[e+28>>2]=0;o[e+12>>2]=0;k=v(t*v(0));w=v(B*v(0));s[e+40>>2]=r+v(k+w);E=v(k+B);k=v(r*v(0));s[e+36>>2]=E+k;s[e+32>>2]=v(t+w)+k;k=v(A*v(0));w=v(q*v(0));s[e+24>>2]=z+v(k+w);E=v(k+q);k=v(z*v(0));s[e+20>>2]=E+k;s[e+16>>2]=v(A+w)+k;k=v(n*v(0));w=v(p*v(0));s[e+8>>2]=m+v(k+w);E=v(k+p);k=v(m*v(0));s[e+4>>2]=E+k;s[e>>2]=v(n+w)+k;s[e+56>>2]=F+v(v(v(h*t)+v(j*B))+v(g*r));s[e+52>>2]=D+v(v(v(h*A)+v(j*q))+v(g*z));s[e+48>>2]=C+v(v(v(h*n)+v(j*p))+v(g*m));l[o[o[x>>2]+16>>2]](x,y,e,d);x=(f|0)>1;f=i;if(x){continue}break}break a}f=o[c+52>>2];c=c+28|0;g=s[(f<<2)+c>>2];h=s[c+((f+2|0)%3<<2)>>2];a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+76>>2]](a,h,g,f,b,d);break a}f=o[c+68>>2];g=s[c+56>>2];h=s[c+60>>2];a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+84>>2]](a,g,h,f,b,d);break a}f=o[c+52>>2];g=v(l[o[o[c>>2]+92>>2]](c));i=o[c+40>>2];o[e+8>>2]=o[c+36>>2];o[e+12>>2]=i;i=o[c+32>>2];o[e>>2]=o[c+28>>2];o[e+4>>2]=i;h=v(l[o[o[c>>2]+48>>2]](c));j=v(l[o[o[c>>2]+48>>2]](c));s[e+8>>2]=v(l[o[o[c>>2]+48>>2]](c))+s[e+8>>2];s[e>>2]=h+s[e>>2];s[e+4>>2]=j+s[e+4>>2];h=s[(f<<2)+e>>2];a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+80>>2]](a,g,h,f,b,d);break a}g=s[c- -64>>2];a=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[a>>2]+88>>2]](a,c+48|0,g,b,d);break a}k:{if((f|0)>6){break k}G=o[c+52>>2];if(G){if(o[G+28>>2]<1){break k}while(1){j=v(0);l:{N=u(L,36);f=N+o[G+36>>2]|0;K=o[f+4>>2];if(!K){g=v(0);h=v(0);break l}g=v(0);h=v(0);if((K|0)<1){break l}H=o[f+12>>2];f=o[(H+(K<<2)|0)+ -4>>2];x=0;while(1){i=o[(x<<2)+H>>2];O=i<<4;H=O+o[G+16>>2]|0;E=s[H>>2];I=s[H+4>>2];J=s[H+8>>2];H=l[o[o[a>>2]+20>>2]](a)|0;P=o[G+16>>2];f=P+(f<<4)|0;m=s[f+8>>2];n=s[f>>2];p=s[f+4>>2];z=s[b+48>>2];A=s[b+8>>2];q=s[b>>2];r=s[b+4>>2];t=s[b+52>>2];B=s[b+24>>2];y=s[b+16>>2];C=s[b+20>>2];D=s[b+56>>2];F=s[b+40>>2];k=s[b+32>>2];w=s[b+36>>2];o[e+12>>2]=0;s[e+8>>2]=D+v(v(v(n*k)+v(p*w))+v(m*F));s[e+4>>2]=t+v(v(v(n*y)+v(p*C))+v(m*B));s[e>>2]=z+v(v(v(n*q)+v(p*r))+v(m*A));f=O+P|0;m=s[f+8>>2];n=s[f>>2];p=s[f+4>>2];o[e+140>>2]=0;s[e+136>>2]=D+v(v(v(k*n)+v(w*p))+v(F*m));s[e+132>>2]=t+v(v(v(y*n)+v(C*p))+v(B*m));s[e+128>>2]=z+v(v(v(q*n)+v(r*p))+v(A*m));l[o[o[H>>2]+8>>2]](H,e,e+128|0,d);h=v(h+J);g=v(g+I);j=v(j+E);x=x+1|0;f=o[G+36>>2]+N|0;if((x|0)>=o[f+4>>2]){break l}H=o[f+12>>2];f=i;continue}}f=l[o[o[a>>2]+20>>2]](a)|0;if(l[o[o[f>>2]+48>>2]](f)&16384){o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=1065353216;o[e+4>>2]=1065353216;f=o[G+36>>2]+N|0;k=s[f+28>>2];w=s[f+20>>2];E=s[f+24>>2];f=l[o[o[a>>2]+20>>2]](a)|0;m=s[b+48>>2];n=s[b+8>>2];p=s[b>>2];z=s[b+4>>2];A=s[b+52>>2];q=s[b+24>>2];r=s[b+16>>2];t=s[b+20>>2];B=s[b+56>>2];y=s[b+40>>2];C=s[b+32>>2];D=s[b+36>>2];o[e+140>>2]=0;F=v(v(1)/v(K|0));j=v(F*j);g=v(F*g);h=v(F*h);s[e+136>>2]=B+v(v(v(C*j)+v(D*g))+v(y*h));s[e+132>>2]=A+v(v(v(j*r)+v(g*t))+v(h*q));s[e+128>>2]=m+v(v(v(j*p)+v(g*z))+v(h*n));o[e+124>>2]=0;j=v(j+w);g=v(g+E);h=v(h+k);s[e+120>>2]=B+v(v(v(C*j)+v(D*g))+v(y*h));s[e+116>>2]=A+v(v(v(j*r)+v(g*t))+v(h*q));s[e+112>>2]=m+v(v(v(j*p)+v(g*z))+v(h*n));l[o[o[f>>2]+8>>2]](f,e+128|0,e+112|0,e)}L=L+1|0;if((L|0)<o[G+28>>2]){continue}break}break k}if((l[o[o[c>>2]+100>>2]](c)|0)<1){break k}f=0;while(1){l[o[o[c>>2]+104>>2]](c,f,e,e+128|0);g=s[b+48>>2];h=s[b+8>>2];j=s[b>>2];m=s[b+4>>2];n=s[b+52>>2];p=s[b+24>>2];z=s[b+16>>2];A=s[b+20>>2];q=s[b+56>>2];r=s[b+40>>2];t=s[b+32>>2];B=s[b+36>>2];o[e+124>>2]=0;y=s[e>>2];C=s[e+4>>2];D=s[e+8>>2];s[e+120>>2]=q+v(v(v(t*y)+v(B*C))+v(r*D));s[e+116>>2]=n+v(v(v(y*z)+v(C*A))+v(D*p));s[e+112>>2]=g+v(v(v(y*j)+v(C*m))+v(D*h));o[e+108>>2]=0;k=q;q=s[e+128>>2];y=v(t*q);t=s[e+132>>2];w=r;r=s[e+136>>2];s[e+104>>2]=k+v(v(y+v(B*t))+v(w*r));s[e+100>>2]=n+v(v(v(z*q)+v(A*t))+v(p*r));s[e+96>>2]=g+v(v(v(j*q)+v(m*t))+v(h*r));i=l[o[o[a>>2]+20>>2]](a)|0;l[o[o[i>>2]+8>>2]](i,e+112|0,e+96|0,d);f=f+1|0;if((f|0)<(l[o[o[c>>2]+100>>2]](c)|0)){continue}break}}f=o[c+4>>2];if(f+ -21>>>0<=8){o[e+136>>2]=1566444395;o[e+140>>2]=0;o[e+128>>2]=1566444395;o[e+132>>2]=1566444395;o[e+120>>2]=-581039253;o[e+124>>2]=0;o[e+112>>2]=-581039253;o[e+116>>2]=-581039253;o[e+8>>2]=l[o[o[a>>2]+20>>2]](a);o[e+4>>2]=9576;o[e>>2]=9552;f=o[d+12>>2];o[e+20>>2]=o[d+8>>2];o[e+24>>2]=f;f=o[d+4>>2];o[e+12>>2]=o[d>>2];o[e+16>>2]=f;f=o[b+12>>2];o[e+36>>2]=o[b+8>>2];o[e+40>>2]=f;f=o[b+4>>2];o[e+28>>2]=o[b>>2];o[e+32>>2]=f;f=o[b+20>>2];o[e+44>>2]=o[b+16>>2];o[e+48>>2]=f;f=o[b+28>>2];o[e+52>>2]=o[b+24>>2];o[e+56>>2]=f;f=o[b+44>>2];o[e+68>>2]=o[b+40>>2];o[e+72>>2]=f;f=o[b+36>>2];o[e+60>>2]=o[b+32>>2];o[e+64>>2]=f;f=o[b+52>>2];o[e+76>>2]=o[b+48>>2];o[e+80>>2]=f;f=o[b+60>>2];o[e+84>>2]=o[b+56>>2];o[e+88>>2]=f;l[o[o[c>>2]+64>>2]](c,e,e+112|0,e+128|0);f=o[c+4>>2]}if((f|0)!=3){break a}o[e+136>>2]=1566444395;o[e+140>>2]=0;o[e+128>>2]=1566444395;o[e+132>>2]=1566444395;o[e+120>>2]=-581039253;o[e+124>>2]=0;o[e+112>>2]=-581039253;o[e+116>>2]=-581039253;o[e+8>>2]=l[o[o[a>>2]+20>>2]](a);o[e+4>>2]=9576;o[e>>2]=9552;a=o[d+12>>2];o[e+20>>2]=o[d+8>>2];o[e+24>>2]=a;a=o[d+4>>2];o[e+12>>2]=o[d>>2];o[e+16>>2]=a;a=o[b+12>>2];o[e+36>>2]=o[b+8>>2];o[e+40>>2]=a;a=o[b+4>>2];o[e+28>>2]=o[b>>2];o[e+32>>2]=a;a=o[b+20>>2];o[e+44>>2]=o[b+16>>2];o[e+48>>2]=a;a=o[b+28>>2];o[e+52>>2]=o[b+24>>2];o[e+56>>2]=a;a=o[b+44>>2];o[e+68>>2]=o[b+40>>2];o[e+72>>2]=a;a=o[b+36>>2];o[e+60>>2]=o[b+32>>2];o[e+64>>2]=a;a=o[b+52>>2];o[e+76>>2]=o[b+48>>2];o[e+80>>2]=a;a=o[b+60>>2];o[e+84>>2]=o[b+56>>2];o[e+88>>2]=a;a=o[c+92>>2];l[o[o[a>>2]+8>>2]](a,e|4,e+112|0,e+128|0)}M=e+144|0}function GB(a,b,c){var d=v(0),e=v(0),f=0,g=v(0),h=v(0),i=0,j=0,k=v(0),n=0,q=0,r=v(0),t=v(0),x=v(0),y=v(0),z=0,A=0,B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=0,O=0,P=0,Q=0,R=0,S=0,T=v(0),U=0,V=0,W=v(0),X=v(0),Y=0,Z=0,_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=0,fa=0;f=M-96|0;M=f;i=o[b+744>>2];j=o[b+740>>2];N=$a(a,j,s[c+12>>2]);O=$a(a,i,s[c+12>>2]);q=o[a+16>>2];A=q+u(N,244)|0;a:{b:{if(s[A+128>>2]!=v(0)|s[A+132>>2]!=v(0)|(s[(q+u(N,244)|0)+136>>2]!=v(0)|s[(q+u(O,244)|0)+128>>2]!=v(0))){break b}A=q+u(O,244)|0;if(s[A+132>>2]!=v(0)){break b}if(s[A+136>>2]==v(0)){break a}}z=o[b+748>>2];if((z|0)<1){break a}Q=q+u(O,244)|0;ea=Q;R=q+u(N,244)|0;fa=R;Y=1;while(1){n=u(Z,184)+b|0;if(!!(s[n+84>>2]<=s[b+756>>2])){S=n+4|0;A=o[a+28>>2];z=A;c:{if((A|0)!=o[a+32>>2]){break c}z=A;P=A?A<<1:1;if((A|0)>=(P|0)){break c}z=0;q=A;U=0;if(P){o[7717]=o[7717]+1;U=l[o[6606]](u(P,152),16)|0;q=o[a+28>>2]}if((q|0)>=1){while(1){V=u(z,152);ja(V+U|0,o[a+36>>2]+V|0,152);z=z+1|0;if((q|0)!=(z|0)){continue}break}}q=o[a+36>>2];if(q){if(p[a+40|0]){if(q){o[7718]=o[7718]+1;l[o[6607]](q)}}o[a+36>>2]=0}o[a+36>>2]=U;m[a+40|0]=1;o[a+32>>2]=P;z=o[a+28>>2]}o[a+28>>2]=z+1;q=o[j+236>>2];z=o[i+236>>2];U=o[a+36>>2]+u(A,152)|0;o[U+148>>2]=O;o[U+144>>2]=N;o[U+132>>2]=S;T=s[n+52>>2];B=s[n+56>>2];k=s[n+60>>2];g=s[j+52>>2];e=s[j+56>>2];d=s[j+60>>2];o[f+92>>2]=0;x=v(k-d);s[f+88>>2]=x;y=v(B-e);s[f+84>>2]=y;h=v(T-g);s[f+80>>2]=h;T=s[n+36>>2];B=s[n+40>>2];k=s[n+44>>2];g=s[i+52>>2];e=s[i+56>>2];d=s[i+60>>2];o[f+76>>2]=0;W=v(k-d);s[f+72>>2]=W;B=v(B-e);s[f+68>>2]=B;k=v(T-g);s[f+64>>2]=k;_=v(0);$=v(0);aa=v(0);ba=v(0);if(o[R+240>>2]){g=v(s[R+192>>2]+s[R+224>>2]);e=v(s[R+196>>2]+s[R+228>>2]);ba=v(v(s[R+184>>2]+s[R+216>>2])+v(v(y*g)-v(h*e)));d=v(s[R+200>>2]+s[fa+232>>2]);aa=v(v(s[R+180>>2]+s[R+212>>2])+v(v(h*d)-v(x*g)));$=v(v(s[R+176>>2]+s[R+208>>2])+v(v(x*e)-v(y*d)))}ca=v(0);da=v(0);if(o[Q+240>>2]){g=v(s[Q+192>>2]+s[Q+224>>2]);e=v(s[Q+196>>2]+s[Q+228>>2]);da=v(v(s[Q+184>>2]+s[Q+216>>2])+v(v(B*g)-v(k*e)));d=v(s[Q+200>>2]+s[ea+232>>2]);ca=v(v(s[Q+180>>2]+s[Q+212>>2])+v(v(k*d)-v(W*g)));_=v(v(s[Q+176>>2]+s[Q+208>>2])+v(v(W*e)-v(B*d)))}W=s[n+76>>2];V=n+68|0;T=s[V>>2];B=s[n+72>>2];IB(a,U,N,O,S,c,f+60|0,f+80|0,f- -64|0);o[U+140>>2]=o[a+68>>2];d=v(0);r=v(0);t=v(0);D=v(0);if(q&2){q=q<<30>>31&j;D=s[q+336>>2];r=s[q+328>>2];t=s[q+332>>2]}E=v(0);F=v(0);if(z&2){q=z<<30>>31&i;F=s[q+336>>2];E=s[q+332>>2];d=s[q+328>>2]}o[f+52>>2]=0;k=v(F-D);s[f+48>>2]=k;g=v(E-t);s[f+44>>2]=g;e=v(d-r);s[f+40>>2]=e;d:{if(s[n+92>>2]>v(0)^1|(Y|0)<1){break d}d=v(C(v(v(v(e*e)+v(g*g))+v(k*k))));if(!!(d>s[c+80>>2])){d=v(v(1)/d);r=v(k*d);s[f+48>>2]=r;t=v(g*d);s[f+44>>2]=t;d=v(e*d);s[f+40>>2]=d;if(p[j+180|0]&2){k=s[j+172>>2];G=s[j+44>>2];H=s[j+12>>2];I=s[j+28>>2];g=s[j+164>>2];J=s[j+36>>2];K=s[j+4>>2];L=s[j+20>>2];e=s[j+168>>2];x=s[j+40>>2];y=s[j+8>>2];h=s[j+24>>2];o[f+52>>2]=0;g=v(g*v(v(v(d*K)+v(t*L))+v(r*J)));e=v(e*v(v(v(d*y)+v(t*h))+v(r*x)));d=v(k*v(v(v(d*H)+v(t*I))+v(r*G)));r=v(v(v(J*g)+v(x*e))+v(G*d));s[f+48>>2]=r;t=v(v(v(L*g)+v(h*e))+v(I*d));s[f+44>>2]=t;d=v(v(v(K*g)+v(y*e))+v(H*d));s[f+40>>2]=d}if(p[i+180|0]&2){k=s[i+172>>2];G=s[i+44>>2];H=s[i+12>>2];I=s[i+28>>2];g=s[i+164>>2];J=s[i+36>>2];K=s[i+4>>2];L=s[i+20>>2];e=s[i+168>>2];x=s[i+40>>2];y=s[i+8>>2];h=s[i+24>>2];o[f+52>>2]=0;g=v(g*v(v(v(K*d)+v(L*t))+v(J*r)));e=v(e*v(v(v(d*y)+v(t*h))+v(r*x)));d=v(k*v(v(v(d*H)+v(t*I))+v(r*G)));r=v(v(v(J*g)+v(x*e))+v(G*d));s[f+48>>2]=r;t=v(v(v(L*g)+v(h*e))+v(I*d));s[f+44>>2]=t;d=v(v(v(K*g)+v(y*e))+v(H*d));s[f+40>>2]=d}Y=0;if(!(+v(C(v(v(v(d*d)+v(t*t))+v(r*r))))>.001)){break d}Id(a,f+40|0,N,O,A,S);break d}Id(a,V,N,O,A,S);z=f;k=s[n+76>>2];e:{if(!!(v(w(k))>v(.7071067690849304))){d=s[n+72>>2];o[f+24>>2]=0;h=d;d=v(v(k*k)+v(d*d));e=v(v(1)/v(C(d)));t=v(h*e);s[f+32>>2]=t;r=v(e*v(-k));s[f+28>>2]=r;E=v(d*e);s[f+8>>2]=E;d=s[V>>2];F=v(t*v(-d));s[f+12>>2]=F;D=v(0);d=v(d*r);break e}d=s[V>>2];g=s[n+72>>2];o[f+32>>2]=0;h=d;d=v(v(d*d)+v(g*g));e=v(v(1)/v(C(d)));r=v(h*e);s[f+28>>2]=r;D=v(e*v(-g));s[f+24>>2]=D;F=v(k*D);s[f+12>>2]=F;E=v(r*v(-k));s[f+8>>2]=E;t=v(0);d=v(d*e)}s[z+16>>2]=d;z=o[j+180>>2]&2;if(z){k=s[j+172>>2];G=s[j+44>>2];H=s[j+12>>2];I=s[j+28>>2];g=s[j+164>>2];h=s[j+36>>2];J=s[j+4>>2];K=s[j+20>>2];e=s[j+168>>2];L=s[j+40>>2];x=s[j+8>>2];y=s[j+24>>2];o[f+36>>2]=0;X=h;h=v(g*v(v(v(J*D)+v(K*r))+v(h*t)));g=v(e*v(v(v(D*x)+v(r*y))+v(t*L)));e=v(k*v(v(v(D*H)+v(r*I))+v(t*G)));t=v(v(v(X*h)+v(L*g))+v(G*e));s[f+32>>2]=t;r=v(v(v(K*h)+v(y*g))+v(I*e));s[f+28>>2]=r;D=v(v(v(J*h)+v(x*g))+v(H*e));s[f+24>>2]=D}q=o[i+180>>2]&2;if(q){k=s[i+172>>2];G=s[i+44>>2];H=s[i+12>>2];I=s[i+28>>2];g=s[i+164>>2];h=s[i+36>>2];J=s[i+4>>2];K=s[i+20>>2];e=s[i+168>>2];L=s[i+40>>2];x=s[i+8>>2];y=s[i+24>>2];o[f+36>>2]=0;X=h;h=v(g*v(v(v(J*D)+v(K*r))+v(h*t)));g=v(e*v(v(v(D*x)+v(r*y))+v(t*L)));e=v(k*v(v(v(D*H)+v(r*I))+v(t*G)));t=v(v(v(X*h)+v(L*g))+v(G*e));s[f+32>>2]=t;r=v(v(v(K*h)+v(y*g))+v(I*e));s[f+28>>2]=r;D=v(v(v(J*h)+v(x*g))+v(H*e));s[f+24>>2]=D}if(z){k=s[j+172>>2];G=s[j+44>>2];H=s[j+12>>2];I=s[j+28>>2];g=s[j+164>>2];h=s[j+36>>2];J=s[j+4>>2];K=s[j+20>>2];e=s[j+168>>2];L=s[j+40>>2];x=s[j+8>>2];y=s[j+24>>2];o[f+20>>2]=0;X=h;h=v(g*v(v(v(J*E)+v(K*F))+v(d*h)));g=v(e*v(v(v(E*x)+v(F*y))+v(d*L)));e=v(k*v(v(v(E*H)+v(F*I))+v(d*G)));d=v(v(v(X*h)+v(L*g))+v(G*e));s[f+16>>2]=d;F=v(v(v(K*h)+v(y*g))+v(I*e));s[f+12>>2]=F;E=v(v(v(J*h)+v(x*g))+v(H*e));s[f+8>>2]=E}if(q){k=s[i+172>>2];G=s[i+44>>2];H=s[i+12>>2];I=s[i+28>>2];g=s[i+164>>2];h=s[i+36>>2];J=s[i+4>>2];K=s[i+20>>2];e=s[i+168>>2];L=s[i+40>>2];x=s[i+8>>2];y=s[i+24>>2];o[f+20>>2]=0;X=h;h=v(g*v(v(v(J*E)+v(K*F))+v(h*d)));g=v(e*v(v(v(E*x)+v(F*y))+v(d*L)));e=v(k*v(v(v(E*H)+v(F*I))+v(d*G)));d=v(v(v(X*h)+v(L*g))+v(G*e));s[f+16>>2]=d;F=v(v(v(K*h)+v(y*g))+v(I*e));s[f+12>>2]=F;E=v(v(v(J*h)+v(x*g))+v(H*e));s[f+8>>2]=E}if(!!(+v(C(v(v(v(D*D)+v(r*r))+v(t*t))))>.001)){Id(a,f+24|0,N,O,A,S)}if(!!(+v(C(v(v(v(E*E)+v(F*F))+v(d*d))))>.001)){Id(a,f+8|0,N,O,A,S)}Y=0}f:{if(!(p[n+120|0]?p[c+64|0]&32:0)){h=s[V>>2];x=s[n+72>>2];y=s[n+76>>2];o[n+168>>2]=0;g=v($-_);e=v(aa-ca);d=v(ba-da);T=v(v(v(g*T)+v(e*B))+v(d*W));B=v(d-v(y*T));s[n+164>>2]=B;k=v(e-v(T*x));s[n+160>>2]=k;P=n+156|0;e=v(g-v(T*h));s[P>>2]=e;g:{if(p[c+64|0]&64){break g}d=v(v(v(e*e)+v(k*k))+v(B*B));if(!(d>v(1.1920928955078125e-7))){break g}d=v(v(1)/v(C(d)));s[P>>2]=e*d;s[n+160>>2]=k*d;s[n+164>>2]=B*d;ob(j,P);ob(i,P);d=s[f+60>>2];_b(a,P,N,O,A,S,f+80|0,f- -64|0,d,v(0),v(0));if(!(p[c+64|0]&16)){break f}h=s[n+160>>2];W=s[n+72>>2];T=s[V>>2];g=s[n+164>>2];B=s[P>>2];e=s[n+76>>2];o[n+184>>2]=0;k=v(v(h*e)-v(g*W));g=v(v(g*T)-v(e*B));e=v(v(W*B)-v(h*T));B=v(v(1)/v(C(v(v(v(k*k)+v(g*g))+v(e*e)))));s[n+180>>2]=e*B;s[n+176>>2]=g*B;q=n+172|0;s[q>>2]=k*B;ob(j,q);ob(i,q);_b(a,q,N,O,A,S,f+80|0,f- -64|0,d,v(0),v(0));break f}z=n+172|0;q=z;h:{if(!!(v(w(y))>v(.7071067690849304))){o[P>>2]=0;g=v(v(x*x)+v(y*y));k=v(v(1)/v(C(g)));e=v(k*v(-y));s[n+160>>2]=e;d=v(x*k);s[n+164>>2]=d;r=v(h*e);t=v(d*v(-h));h=v(g*k);break h}g=v(v(h*h)+v(x*x));k=v(v(1)/v(C(g)));e=v(k*v(-x));s[P>>2]=e;d=v(h*k);s[n+160>>2]=d;o[n+164>>2]=0;r=v(g*k);t=v(y*e);h=v(d*v(-y))}s[q>>2]=h;s[n+180>>2]=r;s[n+176>>2]=t;ob(j,P);ob(i,P);d=s[f+60>>2];_b(a,P,N,O,A,S,f+80|0,f- -64|0,d,v(0),v(0));q=o[c+64>>2];if(q&16){ob(j,z);ob(i,z);_b(a,z,N,O,A,S,f+80|0,f- -64|0,d,v(0),v(0));q=o[c+64>>2]}if((q&80)!=80){break f}m[n+120|0]=1;break f}d=s[f+60>>2];_b(a,n+156|0,N,O,A,S,f+80|0,f- -64|0,d,s[n+136>>2],s[n+144>>2]);if(!(p[c+64|0]&16)){break f}_b(a,n+172|0,N,O,A,S,f+80|0,f- -64|0,d,s[n+140>>2],s[n+148>>2])}HB(a,U,N,O,S,c);z=o[b+748>>2]}Z=Z+1|0;if((Z|0)<(z|0)){continue}break}}M=f+96|0}function TI(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=v(0),n=v(0),q=v(0),r=v(0),t=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=0,D=v(0),E=v(0),F=v(0),G=0,H=v(0),I=0,J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=0,R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=0,X=v(0),Y=0,Z=0,_=0,$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0);g=M-176|0;M=g;Z=o[b+4>>2];_=o[c+4>>2];if(!(o[_+68>>2]==o[a+44>>2]?o[Z+68>>2]==o[a+40>>2]:0)){f=o[a+8>>2];j=o[f+8>>2];if((j|0)>=1){while(1){C=o[(o[f+16>>2]+u(h,12)|0)+8>>2];if(C){l[o[o[C>>2]>>2]](C)|0;i=o[a+4>>2];l[o[o[i>>2]+60>>2]](i,C)}h=h+1|0;if((j|0)!=(h|0)){continue}break}f=o[a+8>>2]}fl(f)}o[g+20>>2]=0;o[g+12>>2]=0;o[g+16>>2]=0;m[g+24|0]=1;C=o[a+8>>2];j=o[C+8>>2];a:{if((j|0)<1){break a}while(1){f=o[(o[C+16>>2]+u(G,12)|0)+8>>2];if(f){l[o[o[f>>2]+16>>2]](f,g+8|0);j=0;h=o[g+12>>2];if((h|0)>0){while(1){Q=o[o[g+20>>2]+(j<<2)>>2];if(o[Q+748>>2]){o[e+4>>2]=Q;f=o[Q+740>>2];i=o[o[e+8>>2]+8>>2];h=(f|0)==(i|0);t=f;f=o[o[e+12>>2]+8>>2];sa(Q,(h?t:f)+4|0,(h?f:i)+4|0);o[e+4>>2]=0;h=o[g+12>>2]}j=j+1|0;if((j|0)<(h|0)){continue}break}}if((h|0)<=-1){if(o[g+16>>2]<=-1){f=o[g+20>>2];if(f){if(p[g+24|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[g+20>>2]=0}m[g+24|0]=1;o[g+16>>2]=0;o[g+20>>2]=0}while(1){o[o[g+20>>2]+(h<<2)>>2]=0;f=h+1|0;i=f>>>0>=h>>>0;h=f;if(i){continue}break}}o[g+12>>2]=0;j=o[C+8>>2]}G=G+1|0;if((G|0)<(j|0)){continue}break}f=o[g+20>>2];if(!f){break a}if(p[g+24|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[g+20>>2]=0}j=o[Z+64>>2];h=o[_+64>>2];i=o[a+4>>2];f=o[a+8>>2];o[g+168>>2]=o[a+32>>2];o[g+164>>2]=f;o[g+160>>2]=e;o[g+156>>2]=d;o[g+152>>2]=i;o[g+140>>2]=0;o[g+136>>2]=10648;o[g+144>>2]=b;o[g+148>>2]=c;e=o[j>>2];b:{if(!e){break b}d=o[h>>2];if(!d){break b}i=o[b+12>>2];A=s[i+24>>2];k=v(-s[i+52>>2]);x=s[i+8>>2];q=s[i+48>>2];B=s[i+40>>2];y=s[i+56>>2];f=o[c+12>>2];z=s[f+48>>2];r=s[f+52>>2];n=s[f+56>>2];ca=v(v(v(v(A*k)-v(x*q))-v(B*y))+v(v(v(x*z)+v(A*r))+v(B*n)));D=s[i+20>>2];H=s[i+4>>2];E=s[i+36>>2];da=v(v(v(v(D*k)-v(H*q))-v(E*y))+v(v(v(H*z)+v(D*r))+v(E*n)));N=s[f+40>>2];J=s[f+24>>2];O=s[f+8>>2];K=s[f+36>>2];P=s[f+20>>2];L=s[f+4>>2];X=s[i+16>>2];F=v(X*k);k=s[i>>2];F=v(F-v(k*q));q=s[i+32>>2];ea=v(v(F-v(q*y))+v(v(v(k*z)+v(X*r))+v(q*n)));z=s[f+16>>2];r=s[f>>2];n=s[f+32>>2];o[7717]=o[7717]+1;f=l[o[6606]](1024,16)|0;o[f+4>>2]=d;o[f>>2]=e;ba=v(v(v(x*O)+v(A*J))+v(B*N));T=v(w(ba));F=v(v(v(x*L)+v(A*P))+v(B*K));U=v(w(F));R=v(v(v(x*r)+v(A*z))+v(B*n));V=v(w(R));S=v(v(v(H*O)+v(D*J))+v(E*N));A=v(w(S));x=v(v(v(H*L)+v(D*P))+v(E*K));B=v(w(x));D=v(v(v(H*r)+v(D*z))+v(E*n));H=v(w(D));E=v(v(v(k*O)+v(X*J))+v(q*N));N=v(w(E));J=v(v(v(k*L)+v(X*P))+v(q*K));O=v(w(J));K=v(v(v(k*r)+v(X*z))+v(q*n));P=v(w(K));G=124;i=128;h=128;j=1;while(1){c:{d:{e:{C=j+ -1|0;W=C<<3;d=W+f|0;I=o[d>>2];t=o[d+4>>2];L=s[t+16>>2];k=s[t>>2];$=v(v(v(L-k)*v(.5))+v(0));q=s[t+20>>2];y=s[t+4>>2];aa=v(v(v(q-y)*v(.5))+v(0));z=s[t+24>>2];n=s[t+8>>2];X=v(v(v(z-n)*v(.5))+v(0));r=v(v(v(P*$)+v(O*aa))+v(N*X));k=v(v(L+k)*v(.5));y=v(v(q+y)*v(.5));z=v(v(z+n)*v(.5));n=v(ea+v(v(v(K*k)+v(J*y))+v(E*z)));f:{if(s[I>>2]<=v(r+n)^1|s[I+16>>2]>=v(n-r)^1){break f}r=v(v(v(H*$)+v(B*aa))+v(A*X));n=v(da+v(v(v(D*k)+v(x*y))+v(S*z)));if(s[I+4>>2]<=v(r+n)^1|s[I+20>>2]>=v(n-r)^1){break f}r=v(v(v(V*$)+v(U*aa))+v(T*X));n=v(ca+v(v(v(R*k)+v(F*y))+v(ba*z)));if(s[I+8>>2]<=v(r+n)^1|s[I+24>>2]>=v(n-r)^1){break f}g:{if((C|0)<=(G|0)){e=i;d=f;break g}e=i<<1;h:{if((i|0)>=(e|0)){d=f;break h}if((h|0)>=(e|0)){d=f;break h}i:{j:{if(!i){d=0;break j}G=0;o[7717]=o[7717]+1;d=l[o[6606]](i<<4,16)|0;if((i|0)<1){break j}while(1){h=G<<3;Y=h+d|0;Q=f+h|0;h=o[Q+4>>2];o[Y>>2]=o[Q>>2];o[Y+4>>2]=h;G=G+1|0;if((G|0)!=(i|0)){continue}break}break i}h=e;if(!f){break h}}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}h=e}G=e+ -4|0}f=o[t+40>>2];if(o[I+40>>2]){i=o[I+36>>2];if(f){f=d+W|0;o[f+4>>2]=o[t+36>>2];o[f>>2]=i;f=o[I+40>>2];i=(j<<3)+d|0;o[i+4>>2]=o[t+36>>2];o[i>>2]=f;f=o[I+36>>2];o[i+12>>2]=o[t+40>>2];o[i+8>>2]=f;f=o[I+40>>2];o[i+20>>2]=o[t+40>>2];o[i+16>>2]=f;j=j+3|0;break d}f=d+W|0;o[f+4>>2]=t;o[f>>2]=i;i=o[I+40>>2];f=(j<<3)+d|0;o[f+4>>2]=t;o[f>>2]=i;break e}if(f){f=d+W|0;o[f+4>>2]=o[t+36>>2];o[f>>2]=I;f=(j<<3)+d|0;o[f+4>>2]=o[t+40>>2];o[f>>2]=I;break e}l[o[o[g+136>>2]+8>>2]](g+136|0,I,t);i=e;f=d}j=C;break c}j=j+1|0}i=e;f=d}if(j){continue}break}if(!f){break b}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}W=o[a+8>>2];if(o[W+8>>2]>=1){Y=0;while(1){e=u(Y,12);d=e+o[W+16>>2]|0;f=o[d+8>>2];k:{if(!f){break k}h=o[Z+24>>2]+u(o[d>>2],80)|0;d=o[h+64>>2];i=o[b+12>>2];z=s[i+52>>2];r=s[i+56>>2];D=s[h+48>>2];H=s[h+52>>2];E=s[h+56>>2];N=s[h+4>>2];J=s[h+20>>2];O=s[h+36>>2];K=s[h+8>>2];P=s[h+24>>2];L=s[h+40>>2];T=s[i+20>>2];F=s[i+24>>2];k=s[h>>2];U=s[i+36>>2];q=s[h+16>>2];R=s[i+40>>2];y=s[h+32>>2];n=s[i+48>>2];V=s[i+8>>2];S=s[i>>2];A=s[i+4>>2];x=s[i+16>>2];B=s[i+32>>2];i=0;o[g+68>>2]=0;o[g+52>>2]=0;o[g+36>>2]=0;o[g+20>>2]=0;s[g+40>>2]=v(v(B*k)+v(U*q))+v(R*y);s[g+24>>2]=v(v(x*k)+v(T*q))+v(F*y);s[g+8>>2]=v(v(S*k)+v(A*q))+v(V*y);s[g+48>>2]=v(v(B*K)+v(U*P))+v(R*L);s[g+44>>2]=v(v(B*N)+v(U*J))+v(R*O);s[g+32>>2]=v(v(x*K)+v(T*P))+v(F*L);s[g+28>>2]=v(v(x*N)+v(T*J))+v(F*O);s[g+16>>2]=v(v(S*K)+v(A*P))+v(V*L);s[g+12>>2]=v(v(S*N)+v(A*J))+v(V*O);s[g+64>>2]=r+v(v(v(B*D)+v(U*H))+v(R*E));s[g+60>>2]=z+v(v(v(x*D)+v(T*H))+v(F*E));s[g+56>>2]=n+v(v(v(S*D)+v(A*H))+v(V*E));l[o[o[d>>2]+8>>2]](d,g+8|0,g+120|0,g+104|0);j=o[_+24>>2]+u(o[(e+o[W+16>>2]|0)+4>>2],80)|0;d=o[j+64>>2];h=o[c+12>>2];z=s[h+52>>2];r=s[h+56>>2];D=s[j+48>>2];H=s[j+52>>2];E=s[j+56>>2];N=s[j+4>>2];J=s[j+20>>2];O=s[j+36>>2];K=s[j+8>>2];P=s[j+24>>2];L=s[j+40>>2];T=s[h+20>>2];F=s[h+24>>2];k=s[j>>2];U=s[h+36>>2];q=s[j+16>>2];R=s[h+40>>2];y=s[j+32>>2];n=s[h+48>>2];V=s[h+8>>2];S=s[h>>2];A=s[h+4>>2];x=s[h+16>>2];B=s[h+32>>2];o[g+68>>2]=0;o[g+52>>2]=0;o[g+36>>2]=0;o[g+20>>2]=0;s[g+40>>2]=v(v(B*k)+v(U*q))+v(R*y);s[g+24>>2]=v(v(x*k)+v(T*q))+v(F*y);s[g+8>>2]=v(v(S*k)+v(A*q))+v(V*y);s[g+48>>2]=v(v(B*K)+v(U*P))+v(R*L);s[g+44>>2]=v(v(B*N)+v(U*J))+v(R*O);s[g+32>>2]=v(v(x*K)+v(T*P))+v(F*L);s[g+28>>2]=v(v(x*N)+v(T*J))+v(F*O);s[g+16>>2]=v(v(S*K)+v(A*P))+v(V*L);s[g+12>>2]=v(v(S*N)+v(A*J))+v(V*O);s[g+64>>2]=r+v(v(v(B*D)+v(U*H))+v(R*E));s[g+60>>2]=z+v(v(v(x*D)+v(T*H))+v(F*E));s[g+56>>2]=n+v(v(v(S*D)+v(A*H))+v(V*E));l[o[o[d>>2]+8>>2]](d,g+8|0,g+88|0,g+72|0);d=0;l:{if(s[g+120>>2]>s[g+72>>2]){break l}d=0;if(s[g+104>>2]<s[g+88>>2]){break l}d=1}i=s[g+112>>2]<s[g+96>>2]|s[g+128>>2]>s[g+80>>2]?i:d;if(i^1?0:!(s[g+108>>2]<s[g+92>>2]|s[g+124>>2]>s[g+76>>2])){break k}l[o[o[f>>2]>>2]](f)|0;d=o[a+4>>2];l[o[o[d>>2]+60>>2]](d,f);d=e+o[W+16>>2]|0;i=o[d+4>>2];f=o[d>>2];e=o[a+16>>2];m:{if((e|0)!=o[a+20>>2]){break m}Q=e?e<<1:1;if((e|0)>=(Q|0)){break m}h=0;G=0;if(Q){o[7717]=o[7717]+1;G=l[o[6606]](u(Q,12),16)|0;e=o[a+16>>2]}if((e|0)>=1){while(1){d=u(h,12);C=d+G|0;j=d+o[a+24>>2]|0;d=o[j+4>>2];o[C>>2]=o[j>>2];o[C+4>>2]=d;o[C+8>>2]=o[j+8>>2];h=h+1|0;if((h|0)!=(e|0)){continue}break}}d=o[a+24>>2];if(d){if(p[a+28|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+24>>2]=0}o[a+24>>2]=G;m[a+28|0]=1;o[a+20>>2]=Q;e=o[a+16>>2]}d=o[a+24>>2]+u(e,12)|0;o[d+8>>2]=0;o[d+4>>2]=i;o[d>>2]=f;o[a+16>>2]=o[a+16>>2]+1}Y=Y+1|0;if((Y|0)<o[W+8>>2]){continue}break}}if(o[a+16>>2]>=1){h=0;while(1){c=o[a+8>>2];b=o[a+24>>2]+u(h,12)|0;l[o[o[c>>2]+8>>2]](c,o[b>>2],o[b+4>>2])|0;h=h+1|0;if((h|0)<o[a+16>>2]){continue}break}}b=o[a+24>>2];if(b){if(p[a+28|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+24>>2]=0}o[a+24>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;m[a+28|0]=1;M=g+176|0}function lL(a,b,c,d){var e=0,f=v(0),g=0,h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=0,u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=0,J=0;e=M-272|0;M=e;o[a+56>>2]=0;o[e+264>>2]=0;o[e+268>>2]=0;o[e+256>>2]=0;o[e+260>>2]=0;g=b;i=o[g+12>>2];o[e+168>>2]=o[g+8>>2];o[e+172>>2]=i;i=o[g+4>>2];o[e+160>>2]=o[g>>2];o[e+164>>2]=i;i=o[g+28>>2];o[e+184>>2]=o[g+24>>2];o[e+188>>2]=i;i=o[g+20>>2];o[e+176>>2]=o[g+16>>2];o[e+180>>2]=i;i=o[g+44>>2];o[e+200>>2]=o[g+40>>2];o[e+204>>2]=i;i=o[g+36>>2];o[e+192>>2]=o[g+32>>2];o[e+196>>2]=i;i=o[g+60>>2];o[e+216>>2]=o[g+56>>2];o[e+220>>2]=i;i=o[g+52>>2];o[e+208>>2]=o[g+48>>2];o[e+212>>2]=i;i=o[g+76>>2];o[e+104>>2]=o[g+72>>2];o[e+108>>2]=i;i=o[g+68>>2];o[e+96>>2]=o[g+64>>2];o[e+100>>2]=i;i=o[g+92>>2];o[e+120>>2]=o[g+88>>2];o[e+124>>2]=i;i=o[g+84>>2];o[e+112>>2]=o[g+80>>2];o[e+116>>2]=i;i=o[g+108>>2];o[e+136>>2]=o[g+104>>2];o[e+140>>2]=i;i=o[g+100>>2];o[e+128>>2]=o[g+96>>2];o[e+132>>2]=i;i=o[g+124>>2];o[e+152>>2]=o[g+120>>2];o[e+156>>2]=i;i=o[g+116>>2];o[e+144>>2]=o[g+112>>2];o[e+148>>2]=i;f=s[e+212>>2];h=s[e+148>>2];B=v(v(f+h)*v(.5));s[e+212>>2]=f-B;f=s[e+216>>2];k=s[e+152>>2];D=v(v(f+k)*v(.5));s[e+216>>2]=f-D;s[e+148>>2]=h-B;s[e+152>>2]=k-D;f=s[e+208>>2];h=s[e+144>>2];E=v(v(f+h)*v(.5));s[e+208>>2]=f-E;s[e+144>>2]=h-E;u=o[o[a+28>>2]+4>>2]+ -17>>>0<=1?o[o[a+32>>2]+4>>2]+ -17>>>0<2:u;r=s[a+44>>2];f=s[a+48>>2];o[6738]=o[6738]+1;o[a+68>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+4>>2]=0;o[a+8>>2]=1065353216;o[a+60>>2]=-1;o[a+64>>2]=0;I=p[a+52|0];se(o[a+24>>2]);q=I?v(0):f;g=a+4|0;h=v(0xde0b6b000000000);while(1){n=s[b+32>>2];w=s[b+16>>2];y=s[b>>2];z=s[b+36>>2];A=s[b+20>>2];F=s[b+4>>2];G=s[b+40>>2];f=s[a+12>>2];j=s[b+24>>2];m=s[a+8>>2];H=s[b+8>>2];k=s[a+4>>2];o[e+252>>2]=0;x=j;j=v(-m);s[e+248>>2]=v(v(x*j)-v(k*H))-v(f*G);s[e+244>>2]=v(v(A*j)-v(k*F))-v(f*z);s[e+240>>2]=v(v(w*j)-v(k*y))-v(f*n);j=s[b+96>>2];n=s[b+64>>2];w=s[b+80>>2];y=s[b+100>>2];z=s[b+68>>2];A=s[b+84>>2];F=s[b+104>>2];G=s[b+72>>2];H=s[b+88>>2];o[e+236>>2]=0;s[e+232>>2]=v(v(k*G)+v(m*H))+v(f*F);s[e+228>>2]=v(v(k*z)+v(m*A))+v(f*y);s[e+224>>2]=v(v(k*n)+v(m*w))+v(f*j);be(e+80|0,o[a+28>>2],e+240|0);be(e- -64|0,o[a+32>>2],e+224|0);o[e+60>>2]=0;f=s[e+80>>2];m=s[e+84>>2];j=s[e+88>>2];k=v(v(v(v(f*s[e+192>>2])+v(m*s[e+196>>2]))+v(j*s[e+200>>2]))+s[e+216>>2]);s[e+56>>2]=k;w=v(v(v(v(f*s[e+176>>2])+v(m*s[e+180>>2]))+v(j*s[e+184>>2]))+s[e+212>>2]);s[e+52>>2]=w;y=v(v(v(v(f*s[e+160>>2])+v(m*s[e+164>>2]))+v(j*s[e+168>>2]))+s[e+208>>2]);s[e+48>>2]=y;o[e+44>>2]=0;f=s[e+64>>2];j=s[e+68>>2];n=s[e+72>>2];m=v(v(v(v(f*s[e+128>>2])+v(j*s[e+132>>2]))+v(n*s[e+136>>2]))+s[e+152>>2]);s[e+40>>2]=m;z=v(v(v(v(f*s[e+112>>2])+v(j*s[e+116>>2]))+v(n*s[e+120>>2]))+s[e+148>>2]);s[e+36>>2]=z;f=v(v(v(v(f*s[e+96>>2])+v(j*s[e+100>>2]))+v(n*s[e+104>>2]))+s[e+144>>2]);s[e+32>>2]=f;if(u){o[e+40>>2]=0;o[e+56>>2]=0;m=v(0);k=v(0)}o[e+28>>2]=0;k=v(k-m);s[e+24>>2]=k;f=v(y-f);s[e+16>>2]=f;m=v(w-z);s[e+20>>2]=m;a:{b:{f=v(v(v(f*s[a+4>>2])+v(m*s[a+8>>2]))+v(k*s[a+12>>2]));if(!(f>v(0)^1|v(f*f)>v(h*s[b+128>>2])^1)){o[a+68>>2]=10;break b}if(Hl(o[a+24>>2],e+16|0)){t=1;o[a+68>>2]=1;i=2;break a}f=v(h-f);if(!!(f<=v(h*v(9.999999974752427e-7)))){i=2;o[a+68>>2]=f<=v(0)?2:11;t=1;break a}Ll(o[a+24>>2],e+16|0,e+48|0,e+32|0);if(!Jl(o[a+24>>2],e)){o[a+68>>2]=3;break b}f=s[e>>2];j=v(f*f);f=s[e+4>>2];j=v(j+v(f*f));f=s[e+8>>2];f=v(j+v(f*f));if(!!(f<v(9.999999974752427e-7))){i=o[e+4>>2];o[g>>2]=o[e>>2];o[g+4>>2]=i;i=o[e+12>>2];o[g+8>>2]=o[e+8>>2];o[g+12>>2]=i;o[a+68>>2]=6;break b}c:{if(!!(v(h-f)<=v(h*v(1.1920928955078125e-7)))){o[a+68>>2]=12;t=1;i=2;break c}i=o[e+4>>2];o[g>>2]=o[e>>2];o[g+4>>2]=i;i=o[e+12>>2];o[g+8>>2]=o[e+8>>2];o[g+12>>2]=i;J=o[a+64>>2];o[a+64>>2]=J+1;i=2;if((J|0)>1e3){break c}if(o[o[a+24>>2]>>2]!=4){i=0;break c}o[a+68>>2]=13}h=f;break a}t=1;i=2}if(!i){continue}break}f=v(0);k=I?v(0):r;m=v(k+q);u=0;i=0;if(t&1){Gl(o[a+24>>2],e+240|0,e+224|0);t=o[g+12>>2];o[e+264>>2]=o[g+8>>2];o[e+268>>2]=t;t=o[g+4>>2];o[e+256>>2]=o[g>>2];o[e+260>>2]=t;f=s[a+4>>2];j=s[a+8>>2];n=s[a+12>>2];r=v(v(v(f*f)+v(j*j))+v(n*n));if(!!(+r<1e-4)){o[a+68>>2]=5}t=1;d:{if(!(r>v(1.4210854715202004e-14))){t=2;f=v(0);break d}r=v(v(1)/v(C(r)));s[e+256>>2]=r*s[e+256>>2];s[e+260>>2]=r*s[e+260>>2];s[e+264>>2]=r*s[e+264>>2];w=v(C(h));h=v(k/w);s[e+240>>2]=s[e+240>>2]-v(h*f);s[e+244>>2]=s[e+244>>2]-v(h*j);s[e+248>>2]=s[e+248>>2]-v(h*n);h=v(q/w);s[e+224>>2]=v(h*f)+s[e+224>>2];s[e+228>>2]=v(h*j)+s[e+228>>2];s[e+232>>2]=v(h*n)+s[e+232>>2];i=1;f=v(v(v(1)/r)-m)}o[a+60>>2]=t}if(!(!o[a+68>>2]|(!o[a+72>>2]|!o[a+20>>2]))){u=+v(m+f)<.01}t=i^1;e:{f:{g:{if(t?0:!u){break g}u=o[a+20>>2];if(!u){break g}o[6737]=o[6737]+1;o[g+8>>2]=0;o[g+12>>2]=0;o[g>>2]=0;o[g+4>>2]=0;if(l[o[o[u>>2]+8>>2]](u,o[a+24>>2],o[a+28>>2],o[a+32>>2],e+160|0,e+96|0,g,e+80|0,e- -64|0,d)){n=v(0);u=9;h=s[e+64>>2];r=s[e+80>>2];q=v(h-r);w=s[e+68>>2];y=s[e+84>>2];j=v(w-y);z=s[e+72>>2];A=s[e+88>>2];k=v(z-A);m=v(v(v(q*q)+v(j*j))+v(k*k));if(!!(m<=v(1.4210854715202004e-14))){n=s[a+16>>2];q=s[a+4>>2];j=s[a+8>>2];k=s[a+12>>2];m=v(v(v(q*q)+v(j*j))+v(k*k))}h:{if(!(m>v(1.4210854715202004e-14))){break h}u=8;h=v(r-h);x=v(h*h);h=v(y-w);x=v(x+v(h*h));h=v(A-z);h=v(-v(C(v(x+v(h*h)))));if((f>h^-1)&(t^1)){break h}d=o[e+92>>2];o[e+248>>2]=o[e+88>>2];o[e+252>>2]=d;d=o[e+76>>2];o[e+232>>2]=o[e+72>>2];o[e+236>>2]=d;d=o[e+84>>2];o[e+240>>2]=o[e+80>>2];o[e+244>>2]=d;d=o[e+68>>2];o[e+224>>2]=o[e+64>>2];o[e+228>>2]=d;s[e+268>>2]=n;f=v(v(1)/v(C(m)));s[e+264>>2]=k*f;s[e+260>>2]=j*f;s[e+256>>2]=q*f;o[a+60>>2]=3;f=h;break f}o[a+60>>2]=u;if(i){break f}break e}j=s[a+4>>2];n=s[a+8>>2];r=s[a+12>>2];if(!(v(v(v(j*j)+v(n*n))+v(r*r))>v(0))){break g}h=v(s[e+80>>2]-s[e+64>>2]);x=v(h*h);h=v(s[e+84>>2]-s[e+68>>2]);x=v(x+v(h*h));h=v(s[e+88>>2]-s[e+72>>2]);h=v(v(C(v(x+v(h*h))))-m);if(!((h<f^-1)&(t^1))){d=o[e+92>>2];o[e+248>>2]=o[e+88>>2];o[e+252>>2]=d;d=o[e+76>>2];o[e+232>>2]=o[e+72>>2];o[e+236>>2]=d;s[e+248>>2]=s[e+248>>2]-v(k*r);s[e+232>>2]=v(q*r)+s[e+232>>2];d=o[e+68>>2];o[e+224>>2]=o[e+64>>2];o[e+228>>2]=d;d=o[e+84>>2];o[e+240>>2]=o[e+80>>2];o[e+244>>2]=d;s[e+224>>2]=v(q*j)+s[e+224>>2];s[e+228>>2]=v(q*n)+s[e+228>>2];s[e+240>>2]=s[e+240>>2]-v(k*j);s[e+244>>2]=s[e+244>>2]-v(k*n);d=o[g+12>>2];o[e+264>>2]=o[g+8>>2];o[e+268>>2]=d;d=o[g+4>>2];o[e+256>>2]=o[g>>2];o[e+260>>2]=d;k=s[e+256>>2];m=s[e+260>>2];q=s[e+264>>2];f=v(v(1)/v(C(v(v(v(k*k)+v(m*m))+v(q*q)))));s[e+264>>2]=q*f;s[e+260>>2]=m*f;s[e+256>>2]=k*f;o[a+60>>2]=6;f=h;break f}o[a+60>>2]=5}if(!i){break e}}if(v(f*f)<s[b+128>>2]^1?!(f<v(0)):0){break e}i:{if(!o[a+76>>2]){break i}b=o[a+28>>2];l[o[o[b>>2]+8>>2]](b,e+160|0,e+80|0,e- -64|0);h=s[e+88>>2];k=s[e+72>>2];m=s[e+80>>2];q=s[e+64>>2];j=s[e+84>>2];n=s[e+68>>2];b=o[a+32>>2];l[o[o[b>>2]+8>>2]](b,e+96|0,e+80|0,e- -64|0);x=v(v(v(q+m)*v(.5))-v(v(s[e+80>>2]+s[e+64>>2])*v(.5)));m=s[e+256>>2];q=s[e+260>>2];k=v(v(v(k+h)*v(.5))-v(v(s[e+88>>2]+s[e+72>>2])*v(.5)));h=s[e+264>>2];if(!(v(v(v(x*m)+v(v(v(v(n+j)*v(.5))-v(v(s[e+84>>2]+s[e+68>>2])*v(.5)))*q))+v(k*h))<v(0))){break i}s[e+264>>2]=-h;s[e+260>>2]=-q;s[e+256>>2]=-m}b=o[e+260>>2];o[g>>2]=o[e+256>>2];o[g+4>>2]=b;b=o[e+268>>2];o[g+8>>2]=o[e+264>>2];o[g+12>>2]=b;s[a+56>>2]=f;o[e+92>>2]=0;s[e+88>>2]=D+s[e+232>>2];s[e+84>>2]=B+s[e+228>>2];s[e+80>>2]=E+s[e+224>>2];l[o[o[c>>2]+16>>2]](c,e+256|0,e+80|0,f)}M=e+272|0}function le(a,b,c,d){var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),n=0,p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=0,N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0);e=M-704|0;M=e;f=e+624|0;o[f+4>>2]=35;o[f+8>>2]=0;o[f>>2]=13316;o[f+44>>2]=1025758986;o[f+20>>2]=1065353216;o[f+24>>2]=0;o[f+12>>2]=1065353216;o[f+16>>2]=1065353216;o[f>>2]=13444;o[e+668>>2]=0;o[e+652>>2]=0;o[e+628>>2]=8;o[e+624>>2]=11556;f=o[c+12>>2];a:{n=o[c+4>>2];E=o[n+4>>2];if((E|0)<=19){o[e+616>>2]=0;o[e+620>>2]=0;o[e+448>>2]=6896;o[e+612>>2]=o[d+4>>2];m[e+420|0]=0;o[e+396>>2]=953267991;E=e+680|0;o[E+12>>2]=n;o[E+8>>2]=e+624;o[E+4>>2]=e+88;o[E>>2]=6304;L=e+72|0;o[L+12>>2]=n;o[L+8>>2]=e+624;o[L+4>>2]=e+88;o[L>>2]=7148;n=o[d+16>>2]&8?L:E;b:{if(!l[o[o[n>>2]+8>>2]](n,a,b,f,f,e+448|0)){break b}h=s[e+580>>2];j=s[e+584>>2];g=s[e+588>>2];i=v(v(v(h*h)+v(j*j))+v(g*g));if(!(i>v(9999999747378752e-20))){break b}q=s[e+612>>2];if(!(q<s[d+4>>2])){break b}p=g;g=v(v(1)/v(C(i)));s[e+588>>2]=p*g;s[e+584>>2]=j*g;s[e+580>>2]=h*g;a=o[c+8>>2];o[e+44>>2]=0;o[e+40>>2]=a;a=o[e+592>>2];o[e+56>>2]=o[e+588>>2];o[e+60>>2]=a;a=o[e+584>>2];o[e+48>>2]=o[e+580>>2];o[e+52>>2]=a;s[e+64>>2]=q;v(l[o[o[d>>2]+12>>2]](d,e+40|0,1))}break a}if(E+ -21>>>0<=8){w=s[f+20>>2];x=s[f+36>>2];y=s[f+24>>2];z=s[f+52>>2];g=s[f+56>>2];k=s[f+40>>2];p=s[f+32>>2];r=s[f+16>>2];t=s[f>>2];A=s[f+4>>2];h=s[f+48>>2];B=s[f+8>>2];i=s[a+52>>2];q=s[a+56>>2];j=s[a+48>>2];o[e+460>>2]=0;z=v(-z);H=v(y*z);I=v(k*g);D=v(v(H-v(B*h))-I);J=v(y*i);K=v(k*q);s[e+456>>2]=D+v(v(v(B*j)+J)+K);N=v(w*z);O=v(x*g);F=v(v(N-v(A*h))-O);Q=v(w*i);R=v(x*q);s[e+452>>2]=F+v(v(v(A*j)+Q)+R);S=v(p*g);T=v(v(v(r*z)-v(t*h))-S);U=v(p*q);s[e+448>>2]=T+v(v(v(t*j)+v(r*i))+U);q=s[b+52>>2];G=s[b+56>>2];g=s[b+48>>2];o[e+52>>2]=0;P=D;V=v(B*g);B=v(y*q);D=v(k*G);s[e+48>>2]=P+v(v(V+B)+D);P=F;k=v(A*g);A=v(w*q);F=v(x*G);s[e+44>>2]=P+v(v(k+A)+F);p=v(p*G);s[e+40>>2]=T+v(v(v(t*g)+v(r*q))+p);c:{switch(o[n+4>>2]+ -21|0){case 0:a=o[c+8>>2];mg(e+88|0,e+448|0,e+40|0,o[d+16>>2]);o[e+140>>2]=n;o[e+136>>2]=a;o[e+132>>2]=d;o[e+88>>2]=7868;a=o[f+12>>2];o[e+152>>2]=o[f+8>>2];o[e+156>>2]=a;a=o[f+4>>2];o[e+144>>2]=o[f>>2];o[e+148>>2]=a;a=o[f+28>>2];o[e+168>>2]=o[f+24>>2];o[e+172>>2]=a;a=o[f+20>>2];o[e+160>>2]=o[f+16>>2];o[e+164>>2]=a;a=o[f+44>>2];o[e+184>>2]=o[f+40>>2];o[e+188>>2]=a;a=o[f+36>>2];o[e+176>>2]=o[f+32>>2];o[e+180>>2]=a;a=o[f+60>>2];o[e+200>>2]=o[f+56>>2];o[e+204>>2]=a;a=o[f+52>>2];o[e+192>>2]=o[f+48>>2];o[e+196>>2]=a;o[e+128>>2]=o[d+4>>2];MH(n,e+88|0,e+448|0,e+40|0);break a;case 4:a=o[c+8>>2];mg(e+88|0,e+448|0,e+40|0,o[d+16>>2]);o[e+140>>2]=n;o[e+136>>2]=a;o[e+132>>2]=d;o[e+88>>2]=7868;a=o[f+12>>2];o[e+152>>2]=o[f+8>>2];o[e+156>>2]=a;a=o[f+4>>2];o[e+144>>2]=o[f>>2];o[e+148>>2]=a;a=o[f+28>>2];o[e+168>>2]=o[f+24>>2];o[e+172>>2]=a;a=o[f+20>>2];o[e+160>>2]=o[f+16>>2];o[e+164>>2]=a;a=o[f+44>>2];o[e+184>>2]=o[f+40>>2];o[e+188>>2]=a;a=o[f+36>>2];o[e+176>>2]=o[f+32>>2];o[e+180>>2]=a;a=o[f+60>>2];o[e+200>>2]=o[f+56>>2];o[e+204>>2]=a;a=o[f+52>>2];o[e+192>>2]=o[f+48>>2];o[e+196>>2]=a;o[e+128>>2]=o[d+4>>2];l[o[o[n>>2]+144>>2]](n,e+88|0,e+448|0,e+40|0);break a;default:break c}}w=s[f+16>>2];x=s[f>>2];y=s[f+4>>2];k=s[f+8>>2];o[e+692>>2]=0;r=v(v(H-v(k*h))-I);s[e+688>>2]=v(v(v(j*k)+J)+K)+r;t=v(v(N-v(y*h))-O);s[e+684>>2]=v(v(v(j*y)+Q)+R)+t;h=v(v(v(w*z)-v(x*h))-S);s[e+680>>2]=v(v(v(j*x)+v(i*w))+U)+h;o[e+84>>2]=0;s[e+80>>2]=v(v(v(g*k)+B)+D)+r;s[e+76>>2]=v(v(v(g*y)+A)+F)+t;s[e+72>>2]=v(v(v(g*x)+v(q*w))+p)+h;a=o[c+8>>2];mg(e+88|0,e+680|0,e+72|0,o[d+16>>2]);o[e+140>>2]=n;o[e+136>>2]=a;o[e+132>>2]=d;o[e+88>>2]=8052;a=o[f+12>>2];o[e+152>>2]=o[f+8>>2];o[e+156>>2]=a;a=o[f+4>>2];o[e+144>>2]=o[f>>2];o[e+148>>2]=a;a=o[f+28>>2];o[e+168>>2]=o[f+24>>2];o[e+172>>2]=a;a=o[f+20>>2];o[e+160>>2]=o[f+16>>2];o[e+164>>2]=a;a=o[f+44>>2];o[e+184>>2]=o[f+40>>2];o[e+188>>2]=a;a=o[f+36>>2];o[e+176>>2]=o[f+32>>2];o[e+180>>2]=a;a=o[f+60>>2];o[e+200>>2]=o[f+56>>2];o[e+204>>2]=a;a=o[f+52>>2];o[e+192>>2]=o[f+48>>2];o[e+196>>2]=a;o[e+128>>2]=o[d+4>>2];a=o[e+692>>2];o[e+32>>2]=o[e+688>>2];o[e+36>>2]=a;a=o[e+684>>2];o[e+24>>2]=o[e+680>>2];o[e+28>>2]=a;h=s[e+72>>2];if(!!(h<s[e+24>>2])){s[e+24>>2]=h}j=s[e+76>>2];if(!!(j<s[e+28>>2])){s[e+28>>2]=j}g=s[e+80>>2];if(!!(g<s[e+32>>2])){s[e+32>>2]=g}i=s[e+84>>2];if(!!(i<s[e+36>>2])){s[e+36>>2]=i}a=o[e+692>>2];o[e+16>>2]=o[e+688>>2];o[e+20>>2]=a;a=o[e+684>>2];o[e+8>>2]=o[e+680>>2];o[e+12>>2]=a;if(!!(s[e+8>>2]<h)){s[e+8>>2]=h}if(!!(s[e+12>>2]<j)){s[e+12>>2]=j}if(!!(s[e+16>>2]<g)){s[e+16>>2]=g}if(!!(s[e+20>>2]<i)){s[e+20>>2]=i}l[o[o[n>>2]+64>>2]](n,e+88|0,e+24|0,e+8|0);break a}if((E|0)!=31){break a}E=o[n- -64>>2];c=o[c+8>>2];o[e+64>>2]=d;o[e+60>>2]=b;o[e+56>>2]=a;o[e+52>>2]=f;o[e+48>>2]=n;o[e+44>>2]=c;o[e+40>>2]=8240;if(E){h=s[f+20>>2];j=s[f+36>>2];g=s[f+24>>2];i=s[f+52>>2];r=s[a+52>>2];q=s[f+40>>2];w=s[f+56>>2];t=s[a+56>>2];A=s[f>>2];x=s[f+16>>2];y=s[f+32>>2];B=s[f+4>>2];p=s[f+8>>2];k=s[f+48>>2];z=s[a+48>>2];o[e+100>>2]=0;D=p;p=v(z-k);r=v(r-i);t=v(t-w);s[e+96>>2]=v(v(D*p)+v(g*r))+v(q*t);s[e+92>>2]=v(v(p*B)+v(r*h))+v(t*j);s[e+88>>2]=v(v(p*A)+v(r*x))+v(t*y);p=s[b+52>>2];r=s[b+56>>2];t=s[f>>2];A=s[f+4>>2];B=s[f+8>>2];z=s[b+48>>2];o[e+460>>2]=0;k=v(z-k);D=g;g=v(p-i);i=v(r-w);s[e+456>>2]=v(v(B*k)+v(D*g))+v(q*i);s[e+452>>2]=v(v(k*A)+v(g*h))+v(i*j);s[e+448>>2]=v(v(k*t)+v(g*x))+v(i*y);sl(o[E>>2],e+88|0,e+448|0,e+40|0);break a}b=o[n+16>>2];if((b|0)<1){break a}c=0;while(1){a=o[n+24>>2]+u(c,80)|0;d=o[a+64>>2];p=s[a+56>>2];r=s[a+48>>2];t=s[a+52>>2];A=s[a+32>>2];B=s[a>>2];z=s[a+16>>2];G=s[a+36>>2];H=s[a+4>>2];I=s[a+20>>2];D=s[a+40>>2];J=s[a+8>>2];K=s[a+24>>2];N=s[f+52>>2];O=s[f+56>>2];h=s[f+24>>2];j=s[f+20>>2];g=s[f+40>>2];i=s[f+36>>2];F=s[f+48>>2];q=s[f+8>>2];w=s[f>>2];x=s[f+4>>2];y=s[f+16>>2];k=s[f+32>>2];o[e+148>>2]=0;o[e+132>>2]=0;o[e+116>>2]=0;o[e+100>>2]=0;s[e+128>>2]=v(v(J*k)+v(K*i))+v(D*g);s[e+124>>2]=v(v(H*k)+v(I*i))+v(G*g);s[e+120>>2]=v(v(B*k)+v(z*i))+v(A*g);s[e+112>>2]=v(v(J*y)+v(K*j))+v(D*h);s[e+108>>2]=v(v(H*y)+v(I*j))+v(G*h);s[e+104>>2]=v(v(B*y)+v(z*j))+v(A*h);s[e+96>>2]=v(v(w*J)+v(x*K))+v(q*D);s[e+92>>2]=v(v(w*H)+v(x*I))+v(q*G);s[e+88>>2]=v(v(B*w)+v(z*x))+v(A*q);s[e+144>>2]=O+v(v(v(k*r)+v(i*t))+v(g*p));s[e+140>>2]=N+v(v(v(y*r)+v(j*t))+v(h*p));s[e+136>>2]=F+v(v(v(w*r)+v(x*t))+v(q*p));o[e+700>>2]=c;o[e+696>>2]=-1;o[e+688>>2]=o[e+44>>2];o[e+684>>2]=d;o[e+680>>2]=0;o[e+692>>2]=e+88;o[e+460>>2]=-65535;o[e+464>>2]=0;o[e+452>>2]=1065353216;o[e+456>>2]=0;o[e+472>>2]=c;o[e+448>>2]=8444;a=o[e+64>>2];o[e+468>>2]=a;o[e+452>>2]=o[a+4>>2];o[e+464>>2]=o[a+16>>2];le(o[e+56>>2],o[e+60>>2],e+680|0,e+448|0);c=c+1|0;if((b|0)==(c|0)){break a}f=o[e+52>>2];n=o[e+48>>2];continue}}M=e+704|0}function ky(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;d=M-128|0;M=d;a:{if(!o[c+4>>2]){break a}if(!o[b+4>>2]){a=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=a;a=o[c+12>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=a;break a}o[a+100>>2]=o[a+100>>2]+ -1;o[d+124>>2]=0;o[d+120>>2]=0;b:{if(my(b,c,d+124|0,d+120|0)){y=o[d+124>>2];k=o[y+92>>2];s=o[d+120>>2];l=o[s+92>>2];t=o[y+96>>2];q=o[s+96>>2];r=o[y+88>>2];D=o[s+88>>2];o[d+92>>2]=-1;c=q-t|0;o[d+88>>2]=c;g=l-k|0;o[d+84>>2]=g;i=D-r|0;o[d+80>>2]=i;b=o[y+8>>2];o[d+32>>2]=0;e=c;B=c>>31;h=g;n=g>>31;w=tL(c,B,g,n);G=N;c=0-i|0;f=c;j=c>>31;c=tL(c,j,i,i>>31);g=N;C=tL(h,n,h,n);i=c-C|0;C=g-(N+(c>>>0<C>>>0)|0)|0;c=tL(e,B,f,j);B=0-c|0;H=0-(N+(0<c>>>0)|0)|0;if(b){c=b;while(1){e=o[c+12>>2];g=o[e+92>>2]-k|0;v=g;g=g>>31;p=tL(v,g,f,j);z=N;I=p;p=o[e+88>>2]-r|0;J=p;p=p>>31;K=tL(h,n,J,p);c:{if((I|0)!=(0-K|0)|(0-(N+(0<K>>>0)|0)|0)!=(z|0)){break c}g=tL(w,G,v,g);z=N;p=tL(J,p,B,H);v=p+g|0;g=N+z|0;g=v>>>0<p>>>0?g+1|0:g;e=o[e+96>>2]-t|0;p=tL(i,C,e,e>>31);v=p+v|0;e=N+g|0;e=v>>>0<p>>>0?e+1|0:e;if((e|0)<0?1:(e|0)<=0?v>>>0>=1?0:1:0){break c}if(m){o[d+64>>2]=-1;o[d+68>>2]=-1;o[d+56>>2]=0;o[d+60>>2]=0;if((nf(m,c,d+80|0,d+56|0)|0)!=1){break c}}m=c}c=o[c>>2];if((b|0)!=(c|0)){continue}break}o[d+32>>2]=m}g=o[s+8>>2];b=0;o[d+8>>2]=0;if(g){c=g;while(1){k=o[c+12>>2];e=o[k+92>>2]-l|0;t=e;e=e>>31;r=tL(t,e,f,j);v=N;I=r;r=o[k+88>>2]-D|0;p=r;r=p>>31;z=tL(h,n,p,r);d:{if((I|0)!=(0-z|0)|(0-(N+(0<z>>>0)|0)|0)!=(v|0)){break d}e=tL(w,G,t,e);v=N;r=tL(p,r,B,H);t=r+e|0;e=N+v|0;e=t>>>0<r>>>0?e+1|0:e;p=t;k=o[k+96>>2]-q|0;t=tL(i,C,k,k>>31);k=p+t|0;e=N+e|0;e=k>>>0<t>>>0?e+1|0:e;if((e|0)<0?1:(e|0)<=0?k>>>0>=1?0:1:0){break d}if(b){o[d+64>>2]=-1;o[d+68>>2]=-1;o[d+56>>2]=0;o[d+60>>2]=0;if((nf(b,c,d+80|0,d+56|0)|0)!=2){break d}}b=c}c=o[c>>2];if((g|0)!=(c|0)){continue}break}o[d+8>>2]=b}e:{if(!(b|m)){break e}wi(a,y,s,d+32|0,d+8|0);b=o[d+32>>2];if(b){y=o[b+12>>2];o[d+124>>2]=y}b=o[d+8>>2];if(!b){break e}s=o[b+12>>2];o[d+120>>2]=s}r=o[s+96>>2]+1|0;D=o[s+88>>2];t=o[s+92>>2];break b}s=o[d+120>>2];D=o[s+88>>2]+1|0;r=o[s+96>>2];y=o[d+124>>2];t=o[s+92>>2]}c=s;b=y;n=0;m=0;G=1;j=0;g=0;while(1){e=o[c+96>>2];f=o[b+96>>2];k=o[b+92>>2];h=o[c+92>>2];q=o[b+88>>2];i=o[c+88>>2];o[d+116>>2]=-1;h=h-k|0;o[d+108>>2]=h;e=e-f|0;o[d+112>>2]=e;i=i-q|0;o[d+104>>2]=i;k=t-k|0;f=r-f|0;w=u(k,e)-u(f,h)|0;l=w>>31;C=w;o[d+80>>2]=w;o[d+84>>2]=l;p=u(f,i);f=D-q|0;w=p-u(f,e)|0;q=w>>31;B=w;o[d+88>>2]=w;o[d+92>>2]=q;f=u(f,h)-u(i,k)|0;w=f>>31;H=f;o[d+96>>2]=f;o[d+100>>2]=w;f=i;v=f>>31;i=tL(B,q,f,v);p=N;k=h;z=h>>31;h=tL(C,l,h,z);o[d+72>>2]=i-h;o[d+76>>2]=p-(N+(i>>>0<h>>>0)|0);h=e;i=e>>31;e=tL(C,l,e,i);l=N;f=tL(H,w,f,v);o[d+64>>2]=e-f;o[d+68>>2]=l-(N+(e>>>0<f>>>0)|0);e=tL(H,w,k,z);f=N;h=tL(h,i,B,q);o[d+56>>2]=e-h;o[d+60>>2]=f-(N+(e>>>0<h>>>0)|0);o[d+48>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;q=vi(a,0,b,d+104|0,d+80|0,d+56|0,d+32|0);o[d+24>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;l=vi(a,1,c,d+104|0,d+80|0,d+56|0,d+8|0);f:{if(!(l|q)){h=pf(a,b,c);o[h+4>>2]=h;o[h>>2]=h;o[b+8>>2]=h;b=o[h+8>>2];o[b+4>>2]=b;o[b>>2]=b;o[c+8>>2]=b;c=0;break f}k=q?-1:1;if(!(!q|!l)){k=Xb(d+32|0,d+8|0)}g:{h:{if(G){break h}i:{if((k|0)>=0){if(o[d+24>>2]>-1){break h}if(!(o[d+16>>2]|o[d+20>>2])){break i}break h}if(o[d+40>>2]|o[d+44>>2]|o[d+48>>2]>-1){break h}}f=n;h=m;i=j;e=g;break g}i=pf(a,b,c);e=i;if(j){o[j+4>>2]=i;e=g}o[i>>2]=j;f=o[i+8>>2];h=f;if(n){o[n>>2]=f;h=m}o[f+4>>2]=n}o[d+4>>2]=q;o[d>>2]=l;n=l;if(!k){wi(a,o[d+124>>2],o[d+120>>2],d+4|0,d);n=o[d>>2]}b=f;j:{if((k|0)<0){break j}b=f;if(!n){break j}k:{l:{m:{if(x){c=o[x>>2];if((l|0)!=(c|0)){while(1){j=o[c+8>>2];g=0;b=0;m=o[c>>2];if((m|0)!=(c|0)){o[m+4>>2]=o[c+4>>2];o[o[c+4>>2]>>2]=m;b=m}o[o[j+12>>2]+8>>2]=b;b=o[j>>2];if((b|0)!=(j|0)){o[b+4>>2]=o[j+4>>2];o[o[j+4>>2]>>2]=b;g=b}o[o[c+12>>2]+8>>2]=g;o[c+12>>2]=0;o[c+16>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;o[c>>2]=o[a+56>>2];o[a+56>>2]=c;o[j+12>>2]=0;o[j+16>>2]=0;o[j+4>>2]=0;o[j+8>>2]=0;o[j>>2]=o[a+56>>2];o[a+56>>2]=j;o[a+116>>2]=o[a+116>>2]+ -1;c=m;if((l|0)!=(c|0)){continue}break}}if(f){break m}break l}if(!f){break l}x=o[l+4>>2];E=h}o[x>>2]=h;o[h+4>>2]=x;o[f>>2]=l;o[l+4>>2]=f;h=0;n=o[d>>2];break k}E=x?E:l}b=o[d+120>>2];r=o[b+96>>2];t=o[b+92>>2];D=o[b+88>>2];o[d+120>>2]=o[n+12>>2];x=o[n+8>>2];b=0}n=b;n:{o:{if((k|0)<=0){f=o[d+4>>2];if(f){break o}}b=o[d+124>>2];break n}p:{q:{r:{s:{if(A){b=o[A+4>>2];if((q|0)!=(b|0)){while(1){m=b+4|0;l=o[b+8>>2];j=o[b+4>>2];c=0;k=0;g=o[b>>2];if((g|0)!=(b|0)){o[g+4>>2]=j;o[o[m>>2]>>2]=g;k=g}o[o[l+12>>2]+8>>2]=k;g=o[l>>2];if((g|0)!=(l|0)){o[g+4>>2]=o[l+4>>2];o[o[l+4>>2]>>2]=g;c=g}o[o[b+12>>2]+8>>2]=c;c=m;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=0;o[c+4>>2]=0;o[b>>2]=o[a+56>>2];o[a+56>>2]=b;o[l+12>>2]=0;o[l+16>>2]=0;o[l+4>>2]=0;o[l+8>>2]=0;o[l>>2]=o[a+56>>2];o[a+56>>2]=l;o[a+116>>2]=o[a+116>>2]+ -1;b=j;if((q|0)!=(b|0)){continue}break}}if(!i){break s}o[e>>2]=A;b=A+4|0;break q}if(i){break r}}F=A?F:q;break p}b=o[q>>2];o[e>>2]=b;F=e;b=b+4|0}o[b>>2]=e;o[q>>2]=i;o[i+4>>2]=q;e=0;f=o[d+4>>2]}b=o[d+124>>2];r=o[b+96>>2];t=o[b+92>>2];D=o[b+88>>2];b=o[f+12>>2];o[d+124>>2]=b;A=o[f+8>>2];i=0}c=1;t:{if(!((b|0)!=(y|0)|o[d+120>>2]!=(s|0))){u:{if(!A){o[e>>2]=i;o[i+4>>2]=e;o[o[d+124>>2]+8>>2]=i;break u}b=o[A+4>>2];if((F|0)!=(b|0)){while(1){m=b+4|0;j=o[b+8>>2];f=o[b+4>>2];c=0;k=0;g=o[b>>2];if((g|0)!=(b|0)){o[g+4>>2]=f;o[o[m>>2]>>2]=g;k=g}o[o[j+12>>2]+8>>2]=k;g=o[j>>2];if((g|0)!=(j|0)){o[g+4>>2]=o[j+4>>2];o[o[j+4>>2]>>2]=g;c=g}o[o[b+12>>2]+8>>2]=c;c=m;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=0;o[c+4>>2]=0;o[b>>2]=o[a+56>>2];o[a+56>>2]=b;o[j+12>>2]=0;o[j+16>>2]=0;o[j+4>>2]=0;o[j+8>>2]=0;o[j>>2]=o[a+56>>2];o[a+56>>2]=j;o[a+116>>2]=o[a+116>>2]+ -1;b=f;if((F|0)!=(b|0)){continue}break}}if(!i){break u}o[e>>2]=A;o[A+4>>2]=e;o[F>>2]=i;o[i+4>>2]=F}if(!x){o[n>>2]=h;o[h+4>>2]=n;o[o[d+120>>2]+8>>2]=n;x=0;m=h;j=i;g=e;c=0;break f}c=o[x>>2];if((E|0)!=(c|0)){while(1){f=o[c+8>>2];g=0;b=0;m=o[c>>2];if((m|0)!=(c|0)){o[m+4>>2]=o[c+4>>2];o[o[c+4>>2]>>2]=m;b=m}o[o[f+12>>2]+8>>2]=b;b=o[f>>2];if((b|0)!=(f|0)){o[b+4>>2]=o[f+4>>2];o[o[f+4>>2]>>2]=b;g=b}o[o[c+12>>2]+8>>2]=g;o[c+12>>2]=0;o[c+16>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;o[c>>2]=o[a+56>>2];o[a+56>>2]=c;o[f+12>>2]=0;o[f+16>>2]=0;o[f+4>>2]=0;o[f+8>>2]=0;o[f>>2]=o[a+56>>2];o[a+56>>2]=f;o[a+116>>2]=o[a+116>>2]+ -1;c=m;if((E|0)!=(c|0)){continue}break}}c=0;v:{if(!n){n=0;break v}o[x>>2]=h;o[h+4>>2]=x;o[n>>2]=E;o[E+4>>2]=n}break t}G=0}m=h;j=i;g=e}if(!c){break a}b=o[d+124>>2];c=o[d+120>>2];continue}}M=d+128|0}function YB(a){a=a|0;var b=0,c=v(0),d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=0,n=v(0),q=v(0),r=v(0),t=v(0),x=v(0),y=v(0),z=v(0),A=0,B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0);d=M-176|0;M=d;if(p[a+738|0]){o[a+744>>2]=0;o[a+36>>2]=0;a:{if(p[a+736|0]){break a}B=s[a+664>>2];m=o[a+32>>2];j=s[a+668>>2];i=s[a+672>>2];q=v(v(v(v(B*s[m+4>>2])+v(j*s[m+8>>2]))+v(i*s[m+12>>2]))+s[m+52>>2]);f=s[a+600>>2];b=o[a+28>>2];g=s[a+604>>2];c=s[a+608>>2];r=v(v(v(v(f*s[b+4>>2])+v(g*s[b+8>>2]))+v(c*s[b+12>>2]))+s[b+52>>2]);l=v(q-r);n=v(v(v(v(B*s[m+20>>2])+v(j*s[m+24>>2]))+v(i*s[m+28>>2]))+s[m+56>>2]);k=v(v(v(v(f*s[b+20>>2])+v(g*s[b+24>>2]))+v(c*s[b+28>>2]))+s[b+56>>2]);e=v(n-k);i=v(v(v(v(B*s[m+36>>2])+v(j*s[m+40>>2]))+v(i*s[m+44>>2]))+s[m+60>>2]);f=v(v(v(v(f*s[b+36>>2])+v(g*s[b+40>>2]))+v(c*s[b+44>>2]))+s[b+60>>2]);g=v(i-f);c=v(v(v(l*l)+v(e*e))+v(g*g));b:{if(!!(c>v(1.1920928955078125e-7))){o[d+140>>2]=0;c=v(v(1)/v(C(c)));j=v(g*c);s[d+136>>2]=j;g=v(e*c);s[d+132>>2]=g;c=v(l*c);s[d+128>>2]=c;break b}o[d+136>>2]=0;o[d+140>>2]=0;o[d+128>>2]=1065353216;o[d+132>>2]=0;c=v(1);g=v(0);j=v(0)}c:{if(!!(v(w(j))>v(.7071067690849304))){e=v(v(j*j)+v(g*g));l=v(v(1)/v(C(e)));x=v(e*l);t=v(l*v(-j));z=v(c*t);j=v(g*l);g=v(j*v(-c));e=v(0);break c}e=v(v(c*c)+v(g*g));l=v(v(1)/v(C(e)));z=v(e*l);e=v(l*v(-g));g=v(j*e);t=v(c*l);x=v(t*v(-j));j=v(0)}s[d+168>>2]=z;s[d+164>>2]=g;s[d+152>>2]=j;s[d+148>>2]=t;s[d+160>>2]=x;s[d+144>>2]=e;while(1){A=o[a+28>>2];o[d+80>>2]=o[A+4>>2];o[d+84>>2]=o[A+20>>2];b=o[A+36>>2];o[d+92>>2]=0;o[d+88>>2]=b;o[d+96>>2]=o[A+8>>2];o[d+100>>2]=o[A+24>>2];b=o[A+40>>2];o[d+108>>2]=0;o[d+104>>2]=b;o[d+112>>2]=o[A+12>>2];o[d+116>>2]=o[A+28>>2];b=o[A+44>>2];o[d+124>>2]=0;o[d+120>>2]=b;o[d+32>>2]=o[m+4>>2];o[d+36>>2]=o[m+20>>2];b=o[m+36>>2];o[d+44>>2]=0;o[d+40>>2]=b;o[d+48>>2]=o[m+8>>2];o[d+52>>2]=o[m+24>>2];b=o[m+40>>2];o[d+60>>2]=0;o[d+56>>2]=b;o[d+64>>2]=o[m+12>>2];o[d+68>>2]=o[m+28>>2];b=o[m+44>>2];o[d+76>>2]=0;o[d+72>>2]=b;e=s[A+52>>2];g=s[A+56>>2];c=s[A+60>>2];o[d+28>>2]=0;s[d+24>>2]=f-c;s[d+20>>2]=k-g;s[d+16>>2]=r-e;e=s[m+52>>2];g=s[m+56>>2];c=s[m+60>>2];o[d+12>>2]=0;s[d+8>>2]=i-c;s[d+4>>2]=n-g;s[d>>2]=q-e;Ld((u(h,84)+a|0)+48|0,d+80|0,d+32|0,d+16|0,d,(d+128|0)+(h<<4)|0,A+396|0,s[A+344>>2],m+396|0,s[m+344>>2]);h=h+1|0;if((h|0)==3){break a}m=o[a+32>>2];continue}}g=s[a+576>>2];c=s[a+560>>2];H=s[a+592>>2];d:{if(!!(v(w(H))>v(.7071067690849304))){e=v(v(H*H)+v(g*g));f=v(v(1)/v(C(e)));t=v(e*f);x=v(f*v(-H));z=v(x*c);D=v(f*g);e=v(D*v(-c));break d}e=v(v(c*c)+v(g*g));f=v(v(1)/v(C(e)));z=v(e*f);x=v(f*c);t=v(x*v(-H));E=v(f*v(-g));e=v(H*E)}h=o[a+32>>2];B=s[h+36>>2];j=s[h+20>>2];l=s[h+40>>2];q=s[h+24>>2];r=s[h+8>>2];n=s[h+44>>2];k=s[h+28>>2];i=s[h+12>>2];b=o[a+28>>2];L=s[b+44>>2];N=s[b+36>>2];O=s[b+40>>2];P=s[b+12>>2];Q=s[b+8>>2];R=s[b+28>>2];S=s[b+20>>2];T=s[b+24>>2];f=s[h+4>>2];U=s[b+4>>2];o[a+344>>2]=0;o[a+328>>2]=0;o[a+308>>2]=0;o[a+312>>2]=0;o[a+300>>2]=0;o[a+304>>2]=0;F=v(v(v(E*U)+v(x*Q))+v(D*P));y=v(v(v(E*S)+v(x*T))+v(D*R));G=v(v(v(E*N)+v(x*O))+v(D*L));I=v(v(v(P*F)+v(R*y))+v(L*G));s[a+324>>2]=I;x=v(v(v(F*Q)+v(y*T))+v(G*O));s[a+320>>2]=x;E=v(v(v(F*U)+v(y*S))+v(G*N));s[a+316>>2]=E;J=k;k=v(-y);D=v(v(v(J*k)-v(F*i))-v(G*n));s[a+340>>2]=D;y=v(v(v(q*k)-v(F*r))-v(G*l));s[a+336>>2]=y;j=v(v(v(j*k)-v(F*f))-v(G*B));s[a+332>>2]=j;k=s[b+400>>2];i=s[b+404>>2];f=s[b+396>>2];o[a+360>>2]=0;l=v(I*i);s[a+356>>2]=l;q=v(x*k);s[a+352>>2]=q;r=v(E*f);s[a+348>>2]=r;n=s[h+400>>2];i=s[h+404>>2];f=s[h+396>>2];o[a+376>>2]=0;k=v(D*i);s[a+372>>2]=k;i=v(y*n);s[a+368>>2]=i;f=v(j*f);s[a+364>>2]=f;s[a+380>>2]=v(v(v(E*r)+v(x*q))+v(I*l))+v(v(v(j*f)+v(y*i))+v(D*k));K=s[b+36>>2];W=s[b+20>>2];F=s[b+40>>2];G=s[b+8>>2];I=s[b+24>>2];x=s[b+44>>2];E=s[b+12>>2];D=s[b+28>>2];y=s[h+36>>2];B=s[h+20>>2];j=s[h+40>>2];l=s[h+24>>2];q=s[h+8>>2];r=s[h+44>>2];n=s[h+28>>2];k=s[h+12>>2];i=s[b+4>>2];f=s[h+4>>2];o[a+428>>2]=0;o[a+412>>2]=0;o[a+392>>2]=0;o[a+396>>2]=0;o[a+384>>2]=0;o[a+388>>2]=0;J=n;V=v(v(v(t*S)+v(e*T))+v(z*R));n=v(-V);X=k;k=v(v(v(t*U)+v(e*Q))+v(z*P));e=v(v(v(t*N)+v(e*O))+v(z*L));t=v(v(v(J*n)-v(X*k))-v(r*e));s[a+424>>2]=t;z=v(v(v(l*n)-v(k*q))-v(e*j));s[a+420>>2]=z;y=v(v(v(B*n)-v(k*f))-v(e*y));s[a+416>>2]=y;B=v(v(v(k*E)+v(V*D))+v(e*x));s[a+408>>2]=B;j=v(v(v(k*G)+v(V*I))+v(e*F));s[a+404>>2]=j;l=v(v(v(k*i)+v(V*W))+v(e*K));s[a+400>>2]=l;i=s[b+400>>2];f=s[b+404>>2];e=s[b+396>>2];o[a+444>>2]=0;q=v(B*f);s[a+440>>2]=q;r=v(j*i);s[a+436>>2]=r;n=v(l*e);s[a+432>>2]=n;k=s[h+400>>2];f=s[h+404>>2];e=s[h+396>>2];o[a+460>>2]=0;i=v(t*f);s[a+456>>2]=i;f=v(z*k);s[a+452>>2]=f;e=v(y*e);s[a+448>>2]=e;s[a+464>>2]=v(v(v(l*n)+v(j*r))+v(B*q))+v(v(v(y*e)+v(z*f))+v(t*i));W=s[b+36>>2];F=s[b+20>>2];G=s[b+40>>2];I=s[b+8>>2];x=s[b+24>>2];E=s[b+44>>2];D=s[b+12>>2];y=s[b+28>>2];B=s[h+36>>2];j=s[h+20>>2];l=s[h+40>>2];q=s[h+24>>2];r=s[h+8>>2];n=s[h+44>>2];k=s[h+28>>2];i=s[h+12>>2];f=s[b+4>>2];e=s[h+4>>2];o[a+512>>2]=0;o[a+496>>2]=0;o[a+476>>2]=0;o[a+480>>2]=0;o[a+468>>2]=0;o[a+472>>2]=0;J=k;t=v(v(v(S*c)+v(T*g))+v(H*R));k=v(-t);X=i;i=v(v(v(U*c)+v(Q*g))+v(H*P));c=v(v(v(N*c)+v(O*g))+v(H*L));z=v(v(v(J*k)-v(X*i))-v(n*c));s[a+508>>2]=z;K=v(v(v(q*k)-v(i*r))-v(c*l));s[a+504>>2]=K;j=v(v(v(j*k)-v(i*e))-v(c*B));s[a+500>>2]=j;l=v(v(v(i*D)+v(t*y))+v(c*E));s[a+492>>2]=l;q=v(v(v(i*I)+v(t*x))+v(c*G));s[a+488>>2]=q;r=v(v(v(i*f)+v(t*F))+v(c*W));s[a+484>>2]=r;e=s[b+400>>2];g=s[b+404>>2];c=s[b+396>>2];o[a+528>>2]=0;n=v(l*g);s[a+524>>2]=n;k=v(q*e);s[a+520>>2]=k;i=v(r*c);s[a+516>>2]=i;f=s[h+400>>2];g=s[h+404>>2];c=s[h+396>>2];o[a+724>>2]=0;o[a+544>>2]=0;e=v(z*g);s[a+540>>2]=e;g=v(K*f);s[a+536>>2]=g;c=v(j*c);s[a+532>>2]=c;s[a+548>>2]=v(v(v(r*i)+v(q*k))+v(l*n))+v(v(v(j*c)+v(K*g))+v(z*e));c=Gf(a,b+4|0,h+4|0);s[a+728>>2]=c;qj(a+688|0,c);h=a;e=s[a+560>>2];b=o[a+28>>2];g=s[a+576>>2];c=s[a+592>>2];i=v(v(v(e*s[b+4>>2])+v(g*s[b+8>>2]))+v(c*s[b+12>>2]));f=v(v(v(e*s[b+20>>2])+v(g*s[b+24>>2]))+v(c*s[b+28>>2]));c=v(v(v(e*s[b+36>>2])+v(g*s[b+40>>2]))+v(c*s[b+44>>2]));a=o[a+32>>2];s[h+720>>2]=v(1)/v(v(v(v(i*v(v(v(i*s[b+264>>2])+v(f*s[b+280>>2]))+v(c*s[b+296>>2])))+v(f*v(v(v(i*s[b+268>>2])+v(f*s[b+284>>2]))+v(c*s[b+300>>2]))))+v(c*v(v(v(i*s[b+272>>2])+v(f*s[b+288>>2]))+v(c*s[b+304>>2]))))+v(v(v(i*v(v(v(i*s[a+264>>2])+v(f*s[a+280>>2]))+v(c*s[a+296>>2])))+v(f*v(v(v(i*s[a+268>>2])+v(f*s[a+284>>2]))+v(c*s[a+300>>2]))))+v(c*v(v(v(i*s[a+272>>2])+v(f*s[a+288>>2]))+v(c*s[a+304>>2])))))}M=d+176|0}function mB(a,b){a=a|0;b=v(b);var c=0,d=0,e=0,f=0,g=v(0),h=0,i=0,j=v(0),k=0,n=v(0),q=v(0),r=0,t=0,w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0);e=M-96|0;M=e;d=o[a+136>>2];a:{if(!d){break a}f=o[a+8>>2];if((f|0)<(d|0)){if(o[a+12>>2]<(d|0)){o[7717]=o[7717]+1;i=l[o[6606]](d<<4,16)|0;r=o[a+8>>2];if((r|0)>=1){while(1){h=c<<4;k=h+i|0;h=h+o[a+16>>2]|0;y=o[h+4>>2];o[k>>2]=o[h>>2];o[k+4>>2]=y;t=o[h+12>>2];o[k+8>>2]=o[h+8>>2];o[k+12>>2]=t;c=c+1|0;if((r|0)!=(c|0)){continue}break}}c=o[a+16>>2];if(c){if(p[a+20|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+16>>2]=0}o[a+16>>2]=i;o[a+12>>2]=d;m[a+20|0]=1}while(1){h=o[e+52>>2];c=o[a+16>>2]+(f<<4)|0;o[c>>2]=o[e+48>>2];o[c+4>>2]=h;h=o[e+60>>2];o[c+8>>2]=o[e+56>>2];o[c+12>>2]=h;f=f+1|0;if((d|0)!=(f|0)){continue}break}}o[a+8>>2]=d;f=o[a+28>>2];if((f|0)<(d|0)){if(o[a+32>>2]<(d|0)){o[7717]=o[7717]+1;i=l[o[6606]](d<<4,16)|0;r=o[a+28>>2];if((r|0)>=1){c=0;while(1){h=c<<4;k=h+i|0;h=h+o[a+36>>2]|0;y=o[h+4>>2];o[k>>2]=o[h>>2];o[k+4>>2]=y;t=o[h+12>>2];o[k+8>>2]=o[h+8>>2];o[k+12>>2]=t;c=c+1|0;if((r|0)!=(c|0)){continue}break}}c=o[a+36>>2];if(c){if(p[a+40|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+36>>2]=0}o[a+36>>2]=i;o[a+32>>2]=d;m[a+40|0]=1}while(1){h=o[e+52>>2];c=o[a+36>>2]+(f<<4)|0;o[c>>2]=o[e+48>>2];o[c+4>>2]=h;h=o[e+60>>2];o[c+8>>2]=o[e+56>>2];o[c+12>>2]=h;f=f+1|0;if((d|0)!=(f|0)){continue}break}}o[a+28>>2]=d;k=o[a+48>>2];if((k|0)<(d|0)){b:{if(o[a+52>>2]>=(d|0)){h=d<<2;c=o[a+56>>2];break b}o[7717]=o[7717]+1;h=d<<2;c=l[o[6606]](h,16)|0;i=o[a+56>>2];c:{r=o[a+48>>2];if((r|0)>=1){f=0;while(1){t=f<<2;o[t+c>>2]=o[i+t>>2];f=f+1|0;if((r|0)!=(f|0)){continue}break}break c}if(i){break c}o[a+56>>2]=c;o[a+52>>2]=d;m[a+60|0]=1;break b}if(p[a+60|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+56>>2]=c;m[a+60|0]=1;o[a+52>>2]=d}f=k<<2;$(f+c|0,0,h-f|0)}o[a+48>>2]=d;k=o[a+68>>2];if((k|0)<(d|0)){d:{if(o[a+72>>2]>=(d|0)){h=d<<2;c=o[a+76>>2];break d}o[7717]=o[7717]+1;h=d<<2;c=l[o[6606]](h,16)|0;i=o[a+76>>2];e:{r=o[a+68>>2];if((r|0)>=1){f=0;while(1){t=f<<2;o[t+c>>2]=o[i+t>>2];f=f+1|0;if((r|0)!=(f|0)){continue}break}break e}if(i){break e}o[a+76>>2]=c;o[a+72>>2]=d;m[a+80|0]=1;break d}if(p[a+80|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+76>>2]=c;m[a+80|0]=1;o[a+72>>2]=d}f=k<<2;$(f+c|0,0,h-f|0)}o[a+68>>2]=d;c=o[a+136>>2];if((c|0)<1){break a}d=o[a+56>>2];h=o[a+76>>2];f=0;while(1){i=f<<2;o[i+h>>2]=0;o[d+i>>2]=0;f=f+1|0;if((f|0)!=(c|0)){continue}break}if((c|0)<1){break a}h=e- -64|0;f=0;while(1){d=o[a+144>>2]+u(f,284)|0;k=o[d+88>>2];if(k){c=o[d+104>>2];o[e+56>>2]=o[d+100>>2];o[e+60>>2]=c;c=o[d+96>>2];o[e+48>>2]=o[d+92>>2];o[e+52>>2]=c;c=o[d+120>>2];o[h+8>>2]=o[d+116>>2];o[h+12>>2]=c;c=o[d+112>>2];o[h>>2]=o[d+108>>2];o[h+4>>2]=c;c=o[d+136>>2];o[e+88>>2]=o[d+132>>2];o[e+92>>2]=c;c=o[d+128>>2];o[e+80>>2]=o[d+124>>2];o[e+84>>2]=c;c=(e+48|0)+(o[a+120>>2]<<2)|0;r=o[c>>2];t=o[c+16>>2];y=o[c+32>>2];i=f<<4;c=i+o[a+36>>2]|0;o[c+12>>2]=0;o[c+8>>2]=y;o[c+4>>2]=t;o[c>>2]=r;c=i+o[a+36>>2]|0;n=s[c+8>>2];j=s[c>>2];q=s[d>>2];w=s[c+4>>2];x=s[d+4>>2];z=s[d+8>>2];g=v(v(v(j*q)+v(w*x))+v(n*z));n=v(n-v(z*g));j=v(j-v(q*g));q=v(w-v(x*g));g=v(v(1)/v(C(v(v(n*n)+v(v(j*j)+v(q*q))))));n=v(n*g);s[c+8>>2]=n;q=v(q*g);s[c+4>>2]=q;g=v(j*g);s[c>>2]=g;j=s[d+8>>2];w=s[d>>2];x=s[d+4>>2];c=i+o[a+16>>2]|0;o[c+12>>2]=0;s[c+8>>2]=v(q*w)-v(x*g);s[c+4>>2]=v(j*g)-v(n*w);s[c>>2]=v(x*n)-v(j*q);c=i+o[a+16>>2]|0;g=s[c+8>>2];q=g;n=s[c>>2];j=s[c+4>>2];g=v(v(1)/v(C(v(v(v(n*n)+v(j*j))+v(g*g)))));s[c+8>>2]=q*g;s[c+4>>2]=j*g;s[c>>2]=n*g;c=d+16|0;t=c;c=f<<2;vB(o[a+116>>2],t,k,t,i+o[a+36>>2]|0,c+o[a+76>>2]|0);c=c+o[a+76>>2]|0;s[c>>2]=s[6604]*s[c>>2];c=o[a+136>>2]}f=f+1|0;if((f|0)<(c|0)){continue}break}if((c|0)<1){break a}c=o[a+144>>2];h=0;f=0;while(1){f:{g:{h:{k=u(f,284);i=k+c|0;d=o[i+88>>2];if(d){g=s[i+252>>2];if(g==v(0)){break h}g=v(g*b);break g}o[o[a+56>>2]+(f<<2)>>2]=0;o[i+280>>2]=1065353216;break f}g=s[i+256>>2];kB(e+48|0,o[a+116>>2],d,i+16|0,o[a+16>>2]+(f<<4)|0,g==v(0)?v(0):g);g=s[e+92>>2];n=v(-g);j=s[e+64>>2];c=o[e+48>>2];q=v(j-s[c+60>>2]);w=s[c+332>>2];x=s[e+60>>2];z=v(x-s[c+56>>2]);A=s[c+336>>2];d=o[e+52>>2];j=v(j-s[d+60>>2]);D=s[d+332>>2];x=v(x-s[d+56>>2]);E=s[d+336>>2];H=v(v(v(v(v(q*w)-v(z*A))+s[c+312>>2])-v(v(v(j*D)-v(x*E))+s[d+312>>2]))*s[e+72>>2]);F=s[e+56>>2];G=v(F-s[c+52>>2]);B=q;q=s[c+328>>2];I=v(s[c+316>>2]+v(v(G*A)-v(B*q)));A=v(F-s[d+52>>2]);B=j;j=s[d+328>>2];j=v(s[e+88>>2]*v(-v(v(H+v(v(I-v(s[d+316>>2]+v(v(A*E)-v(B*j))))*s[e+76>>2]))+v(v(v(v(v(z*q)-v(G*w))+s[c+320>>2])-v(v(v(x*j)-v(A*D))+s[d+320>>2]))*s[e+80>>2]))));g=g<j?g:j;g=g<n?n:g;c=o[a+144>>2]}r=f<<2;t=r+o[a+56>>2]|0;o[t>>2]=0;d=c+k|0;o[d+280>>2]=1065353216;n=s[i+228>>2];j=s[i+276>>2];s[t>>2]=g;g=v(g*v(.5));q=v(g*g);g=s[r+o[a+76>>2]>>2];q=v(q+v(g*g));g=v(n*v(j*b));if(!(q>v(g*g))){break f}s[d+280>>2]=v(g/v(C(q)))*s[d+280>>2];h=1}f=f+1|0;d=o[a+136>>2];if((f|0)<(d|0)){continue}break}k=h^-1;h=(d|0)<1;if(!((k|h)&1)){i=o[a+76>>2];f=0;while(1){k=f<<2;c=k+i|0;i:{if(s[c>>2]==v(0)){break i}r=o[a+144>>2]+u(f,284)|0;b=s[r+280>>2];if(!(b<v(1))){break i}k=k+o[a+56>>2]|0;s[k>>2]=b*s[k>>2];s[c>>2]=s[r+280>>2]*s[c>>2]}f=f+1|0;if((d|0)!=(f|0)){continue}break}}if(h){break a}f=0;while(1){i=u(f,284);c=i+o[a+144>>2]|0;b=s[c+16>>2];d=o[a+116>>2];g=s[d+52>>2];n=s[c+20>>2];j=s[d+56>>2];q=s[c+24>>2];w=s[d+60>>2];o[e+60>>2]=0;s[e+56>>2]=q-w;s[e+52>>2]=n-j;s[e+48>>2]=b-g;k=f<<2;b=s[k+o[a+56>>2]>>2];if(b!=v(0)){h=o[a+16>>2]+(f<<4)|0;g=s[h>>2];n=s[h+4>>2];j=s[h+8>>2];o[e+44>>2]=0;s[e+40>>2]=b*j;s[e+36>>2]=b*n;s[e+32>>2]=g*b;Ca(d,e+32|0,e+48|0)}k=k+o[a+76>>2]|0;if(s[k>>2]!=v(0)){d=o[(i+o[a+144>>2]|0)+88>>2];b=s[d+52>>2];g=s[d+56>>2];n=s[d+60>>2];j=s[c+16>>2];q=s[c+20>>2];w=s[c+24>>2];o[e+44>>2]=0;s[e+40>>2]=w-n;s[e+36>>2]=q-g;s[e+32>>2]=j-b;h=o[a+36>>2]+(f<<4)|0;g=s[h>>2];n=s[h+4>>2];j=s[h+8>>2];b=s[k>>2];o[e+28>>2]=0;s[e+24>>2]=b*j;s[e+20>>2]=b*n;s[e+16>>2]=g*b;i=o[a+116>>2];h=i+(o[a+124>>2]<<2)|0;g=s[h+36>>2];n=s[h+4>>2];j=s[e+48>>2];q=s[h+20>>2];w=s[e+52>>2];x=s[e+56>>2];b=v(v(v(v(n*j)+v(q*w))+v(g*x))*v(v(1)-s[c+244>>2]));s[e+56>>2]=x-v(g*b);s[e+52>>2]=w-v(q*b);s[e+48>>2]=j-v(n*b);Ca(i,e+16|0,e+48|0);o[e+12>>2]=0;s[e+8>>2]=-s[e+24>>2];s[e+4>>2]=-s[e+20>>2];s[e>>2]=-s[e+16>>2];Ca(d,e,e+32|0)}f=f+1|0;if((f|0)<o[a+136>>2]){continue}break}}M=e+96|0}function jg(a,b,c,d,e,f){var g=0,h=0,i=v(0),j=0,k=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=0;g=M-640|0;M=g;h=o[d+12>>2];E=o[d+4>>2];j=o[E+4>>2];a:{if((j|0)<=19){s[g+636>>2]=f;o[g+632>>2]=0;o[g+464>>2]=6896;o[g+628>>2]=o[e+4>>2];m[g+436|0]=0;o[g+412>>2]=953267991;o[g+16>>2]=4440;j=g+80|0;o[j+20>>2]=0;o[j+16>>2]=E;o[j+12>>2]=a;o[j+8>>2]=g+16;o[j+4>>2]=g+104;o[j>>2]=7260;b:{if(!l[o[o[j>>2]+8>>2]](j,b,c,h,h,g+464|0)){break b}f=s[g+596>>2];k=s[g+600>>2];i=s[g+604>>2];n=v(v(v(f*f)+v(k*k))+v(i*i));if(!(n>v(9999999747378752e-20))){break b}p=s[g+628>>2];if(!(p<s[e+4>>2])){break b}q=i;i=v(v(1)/v(C(n)));s[g+604>>2]=q*i;s[g+600>>2]=k*i;s[g+596>>2]=f*i;a=o[d+8>>2];o[g+36>>2]=0;o[g+32>>2]=a;a=o[g+608>>2];o[g+48>>2]=o[g+604>>2];o[g+52>>2]=a;a=o[g+596>>2];b=o[g+600>>2];d=o[g+624>>2];c=g- -64|0;o[c>>2]=o[g+620>>2];o[c+4>>2]=d;o[g+40>>2]=a;o[g+44>>2]=b;a=o[g+616>>2];o[g+56>>2]=o[g+612>>2];o[g+60>>2]=a;s[g+72>>2]=p;v(l[o[o[e>>2]+12>>2]](e,g+32|0,1))}break a}N=j+ -21|0;if(N>>>0<=8){c:{switch(N|0){case 0:k=s[h+20>>2];i=s[h+36>>2];n=s[h+24>>2];z=s[h+52>>2];r=s[h+56>>2];p=s[h+40>>2];q=s[h+32>>2];A=s[h+16>>2];y=s[h>>2];t=s[h+4>>2];w=s[h+48>>2];B=s[h+8>>2];x=s[b+52>>2];F=s[b+56>>2];G=s[b+48>>2];o[g+44>>2]=0;z=v(-z);H=v(v(v(n*z)-v(B*w))-v(p*r));s[g+40>>2]=H+v(v(v(B*G)+v(n*x))+v(p*F));D=v(v(v(k*z)-v(t*w))-v(i*r));s[g+36>>2]=D+v(v(v(t*G)+v(k*x))+v(i*F));z=v(v(v(A*z)-v(y*w))-v(q*r));s[g+32>>2]=z+v(v(v(y*G)+v(A*x))+v(q*F));r=s[c+52>>2];w=s[c+56>>2];x=s[c+48>>2];o[g+92>>2]=0;s[g+88>>2]=H+v(v(v(B*x)+v(n*r))+v(p*w));s[g+84>>2]=D+v(v(v(t*x)+v(k*r))+v(i*w));s[g+80>>2]=z+v(v(v(y*x)+v(A*r))+v(q*w));r=s[c+20>>2];w=s[c+36>>2];x=s[c+24>>2];F=s[c+40>>2];G=s[c+32>>2];z=s[c>>2];H=s[c+16>>2];D=s[c+4>>2];I=s[c+8>>2];o[g+508>>2]=0;o[g+512>>2]=0;o[g+492>>2]=0;o[g+516>>2]=0;o[g+520>>2]=0;o[g+524>>2]=0;s[g+504>>2]=v(v(B*I)+v(n*x))+v(p*F);s[g+500>>2]=v(v(B*D)+v(n*r))+v(p*w);s[g+488>>2]=v(v(t*I)+v(k*x))+v(i*F);s[g+484>>2]=v(v(t*D)+v(k*r))+v(i*w);o[g+476>>2]=0;s[g+496>>2]=v(v(B*z)+v(n*H))+v(p*G);s[g+480>>2]=v(v(t*z)+v(k*H))+v(i*G);s[g+472>>2]=v(v(y*I)+v(A*x))+v(q*F);s[g+468>>2]=v(v(y*D)+v(A*r))+v(q*w);s[g+464>>2]=v(v(y*z)+v(A*H))+v(q*G);d=o[d+8>>2];ul(g+104|0,a,b,c,h,v(l[o[o[E>>2]+48>>2]](E)));o[g+324>>2]=E;o[g+320>>2]=d;o[g+104>>2]=8616;o[g+316>>2]=e;b=o[e+4>>2];s[g+312>>2]=f;o[g+304>>2]=b;l[o[o[a>>2]+8>>2]](a,g+464|0,g+16|0,g);LH(E,g+104|0,g+32|0,g+80|0,g+16|0,g);break a;case 7:s[g+276>>2]=f;o[g+272>>2]=0;o[g+104>>2]=6896;o[g+268>>2]=o[e+4>>2];j=g+32|0;o[j+20>>2]=E;o[j+16>>2]=0;o[j+12>>2]=a;o[j+4>>2]=0;o[j+8>>2]=0;o[j>>2]=7260;d:{if(!l[o[o[j>>2]+8>>2]](j,b,c,h,h,g+104|0)){break d}f=s[g+236>>2];k=s[g+240>>2];i=s[g+244>>2];n=v(v(v(f*f)+v(k*k))+v(i*i));if(!(n>v(9999999747378752e-20))){break d}p=s[g+268>>2];if(!(p<s[e+4>>2])){break d}q=i;i=v(v(1)/v(C(n)));s[g+244>>2]=q*i;s[g+240>>2]=k*i;s[g+236>>2]=f*i;a=o[d+8>>2];o[g+468>>2]=0;o[g+464>>2]=a;a=o[g+248>>2];o[g+480>>2]=o[g+244>>2];o[g+484>>2]=a;a=o[g+236>>2];b=o[g+240>>2];c=o[g+264>>2];o[g+496>>2]=o[g+260>>2];o[g+500>>2]=c;o[g+472>>2]=a;o[g+476>>2]=b;a=o[g+256>>2];o[g+488>>2]=o[g+252>>2];o[g+492>>2]=a;s[g+504>>2]=p;v(l[o[o[e>>2]+12>>2]](e,g+464|0,1))}break a;default:break c}}F=s[c+52>>2];G=s[c+56>>2];T=s[h+52>>2];i=s[h+56>>2];A=s[b+52>>2];z=s[b+56>>2];p=s[h+20>>2];q=s[h+36>>2];t=s[h+24>>2];B=s[h+40>>2];H=s[c+48>>2];D=s[h+48>>2];I=s[b+48>>2];n=s[h+32>>2];y=s[h>>2];r=s[h+16>>2];w=s[h+4>>2];x=s[h+8>>2];k=s[c+20>>2];J=s[c+36>>2];K=s[c+24>>2];L=s[c+40>>2];O=s[c+32>>2];P=s[c>>2];Q=s[c+16>>2];R=s[c+4>>2];S=s[c+8>>2];o[g+508>>2]=0;o[g+512>>2]=0;o[g+492>>2]=0;o[g+516>>2]=0;o[g+520>>2]=0;o[g+524>>2]=0;s[g+504>>2]=v(v(x*S)+v(t*K))+v(B*L);s[g+500>>2]=v(v(x*R)+v(t*k))+v(B*J);s[g+488>>2]=v(v(w*S)+v(p*K))+v(q*L);s[g+484>>2]=v(v(w*R)+v(p*k))+v(q*J);o[g+476>>2]=0;s[g+496>>2]=v(v(x*P)+v(t*Q))+v(B*O);s[g+480>>2]=v(v(w*P)+v(p*Q))+v(q*O);s[g+472>>2]=v(v(y*S)+v(r*K))+v(n*L);s[g+468>>2]=v(v(y*R)+v(r*k))+v(n*J);s[g+464>>2]=v(v(y*P)+v(r*Q))+v(n*O);d=o[d+8>>2];ul(g+104|0,a,b,c,h,v(l[o[o[E>>2]+48>>2]](E)));o[g+324>>2]=E;o[g+320>>2]=d;o[g+104>>2]=8828;o[g+316>>2]=e;b=o[e+4>>2];s[g+312>>2]=f;o[g+304>>2]=b;l[o[o[a>>2]+8>>2]](a,g+464|0,g+32|0,g+80|0);o[g+28>>2]=0;J=v(-T);K=v(v(v(t*J)-v(x*D))-v(B*i));f=v(K+v(v(v(x*I)+v(t*A))+v(B*z)));s[g+24>>2]=f;L=v(v(v(p*J)-v(w*D))-v(q*i));k=v(L+v(v(v(w*I)+v(p*A))+v(q*z)));s[g+20>>2]=k;D=v(v(v(r*J)-v(y*D))-v(n*i));i=v(D+v(v(v(y*I)+v(r*A))+v(n*z)));s[g+16>>2]=i;A=i;n=v(D+v(v(v(y*H)+v(r*F))+v(n*G)));if(!!(n<i)){s[g+16>>2]=n;A=n}y=k;p=v(L+v(v(v(w*H)+v(p*F))+v(q*G)));if(!!(p<k)){s[g+20>>2]=p;y=p}q=v(K+v(v(v(x*H)+v(t*F))+v(B*G)));t=f;if(!!(q<t)){s[g+24>>2]=q;t=q}o[g+12>>2]=0;s[g+8>>2]=f;s[g+4>>2]=k;s[g>>2]=i;if(!!(i<n)){s[g>>2]=n;i=n}if(!!(k<p)){s[g+4>>2]=p;k=p}if(!!(f<q)){s[g+8>>2]=q;f=q}s[g+16>>2]=s[g+32>>2]+A;s[g+20>>2]=s[g+36>>2]+y;s[g+24>>2]=s[g+40>>2]+t;s[g>>2]=s[g+80>>2]+i;s[g+4>>2]=s[g+84>>2]+k;s[g+8>>2]=s[g+88>>2]+f;l[o[o[E>>2]+64>>2]](E,g+104|0,g+16|0,g);break a}if((j|0)!=31){break a}ia(7797);if(o[E+16>>2]>=1){N=0;while(1){j=o[E+24>>2]+u(N,80)|0;U=o[j+64>>2];r=s[j+56>>2];w=s[j+48>>2];x=s[j+52>>2];F=s[j+32>>2];G=s[j>>2];z=s[j+16>>2];H=s[j+36>>2];D=s[j+4>>2];I=s[j+20>>2];J=s[j+40>>2];K=s[j+8>>2];L=s[j+24>>2];O=s[h+48>>2];P=s[h+52>>2];Q=s[h+56>>2];k=s[h+8>>2];i=s[h>>2];n=s[h+4>>2];p=s[h+24>>2];q=s[h+16>>2];A=s[h+20>>2];y=s[h+40>>2];t=s[h+32>>2];B=s[h+36>>2];o[g+164>>2]=0;o[g+148>>2]=0;o[g+132>>2]=0;o[g+116>>2]=0;s[g+144>>2]=v(v(K*t)+v(L*B))+v(J*y);s[g+140>>2]=v(v(D*t)+v(I*B))+v(H*y);s[g+136>>2]=v(v(G*t)+v(z*B))+v(F*y);s[g+128>>2]=v(v(K*q)+v(L*A))+v(J*p);s[g+124>>2]=v(v(D*q)+v(I*A))+v(H*p);s[g+120>>2]=v(v(G*q)+v(z*A))+v(F*p);s[g+112>>2]=v(v(K*i)+v(L*n))+v(J*k);s[g+108>>2]=v(v(D*i)+v(I*n))+v(H*k);s[g+104>>2]=v(v(G*i)+v(z*n))+v(F*k);s[g+160>>2]=Q+v(v(v(w*t)+v(x*B))+v(r*y));s[g+156>>2]=P+v(v(v(w*q)+v(x*A))+v(r*p));s[g+152>>2]=O+v(v(v(w*i)+v(x*n))+v(r*k));o[g+40>>2]=-65535;o[g+48>>2]=N;o[g+32>>2]=9044;o[g+44>>2]=e;o[g+36>>2]=o[e+4>>2];j=o[d+8>>2];o[g+484>>2]=N;o[g+480>>2]=-1;o[g+472>>2]=j;o[g+468>>2]=U;o[g+464>>2]=d;o[g+476>>2]=g+104;jg(a,b,c,g+464|0,g+32|0,f);N=N+1|0;if((N|0)<o[E+16>>2]){continue}break}}ga()}M=g+640|0}function rJ(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=0,t=0,x=v(0),y=0,z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=0,J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=0,ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=v(0);g=M-112|0;M=g;o[6993]=o[6993]+1;x=s[c+52>>2];ba=s[c+20>>2];ca=s[c+24>>2];n=s[d+52>>2];h=s[d+20>>2];j=s[d+24>>2];i=s[c+56>>2];R=s[c+36>>2];L=s[a+68>>2];N=s[c+40>>2];F=s[a+72>>2];k=s[d+56>>2];m=s[d+36>>2];G=s[b+68>>2];W=s[d+40>>2];q=s[b+72>>2];X=s[c+48>>2];H=s[c+8>>2];Y=s[c>>2];Z=s[c+4>>2];_=s[d+48>>2];$=s[d+8>>2];S=s[d>>2];T=s[d+4>>2];z=s[c+16>>2];U=s[d+16>>2];A=s[c+32>>2];D=s[a+64>>2];V=s[d+32>>2];E=s[b+64>>2];o[g+28>>2]=0;O=v(v(i+v(v(v(D*A)+v(L*R))+v(F*N)))-v(k+v(v(v(E*V)+v(G*m))+v(q*W))));s[g+24>>2]=O;P=v(v(x+v(v(v(D*z)+v(L*ba))+v(F*ca)))-v(n+v(v(v(E*U)+v(G*h))+v(q*j))));s[g+20>>2]=P;Q=v(v(X+v(v(v(D*Y)+v(L*Z))+v(F*H)))-v(_+v(v(v(E*S)+v(G*T))+v(q*$))));s[g+16>>2]=Q;k=v(3.4028234663852886e+38);a:{b:{c:{d:{e:{f:{I=o[a+28>>2];if((I|0)<1){break f}while(1){r=o[a+36>>2]+u(t,36)|0;q=s[r+28>>2];D=s[r+24>>2];E=s[r+20>>2];j=s[c>>2];i=s[c+4>>2];o[g+12>>2]=0;x=v(v(v(E*A)+v(D*R))+v(q*N));s[g+8>>2]=x;n=v(v(v(E*z)+v(D*ba))+v(q*ca));s[g+4>>2]=n;i=v(v(v(E*j)+v(D*i))+v(q*H));s[g>>2]=i;if(!!(v(v(v(i*Q)+v(n*P))+v(x*O))<v(0))){s[g+8>>2]=-x;s[g+4>>2]=-n;s[g>>2]=-i}o[6991]=o[6991]+1;g:{if(p[26409]){if(!hg(c,d,g+16|0,g,a,b,k)){break g}}y=0;o[6992]=o[6992]+1;dc(a,c,g,g+108|0,g+104|0,g+80|0,g- -64|0);dc(b,d,g,g+100|0,g+96|0,g+48|0,g+32|0);x=s[g+104>>2];i=s[g+100>>2];h:{if(x<i){break h}n=s[g+96>>2];j=s[g+108>>2];if(n<j){break h}i=v(x-i);h=v(n-j);h=i<h?i:h;y=1}if(!y){break e}if(!(h<k)){break g}r=o[g+4>>2];o[e>>2]=o[g>>2];o[e+4>>2]=r;r=o[g+12>>2];o[e+8>>2]=o[g+8>>2];o[e+12>>2]=r;k=h}t=t+1|0;if((I|0)==(t|0)){break f}N=s[c+40>>2];R=s[c+36>>2];A=s[c+32>>2];ca=s[c+24>>2];ba=s[c+20>>2];z=s[c+16>>2];H=s[c+8>>2];continue}}I=o[b+28>>2];if((I|0)>=1){t=0;while(1){r=o[b+36>>2]+u(t,36)|0;F=s[r+28>>2];G=s[r+20>>2];H=s[r+24>>2];z=s[d+8>>2];A=s[d>>2];q=s[d+4>>2];D=s[d+24>>2];E=s[d+16>>2];x=s[d+20>>2];n=s[d+40>>2];j=s[d+32>>2];i=s[d+36>>2];o[g+12>>2]=0;n=v(v(v(G*j)+v(H*i))+v(F*n));s[g+8>>2]=n;j=v(v(v(G*E)+v(H*x))+v(F*D));s[g+4>>2]=j;i=v(v(v(G*A)+v(H*q))+v(F*z));s[g>>2]=i;if(!!(v(v(v(i*Q)+v(j*P))+v(n*O))<v(0))){s[g+8>>2]=-n;s[g+4>>2]=-j;s[g>>2]=-i}o[6991]=o[6991]+1;i:{if(p[26409]){if(!hg(c,d,g+16|0,g,a,b,k)){break i}}y=0;o[6992]=o[6992]+1;dc(a,c,g,g+108|0,g+104|0,g+80|0,g- -64|0);dc(b,d,g,g+100|0,g+96|0,g+48|0,g+32|0);x=s[g+104>>2];i=s[g+100>>2];j:{if(x<i){break j}n=s[g+96>>2];j=s[g+108>>2];if(n<j){break j}i=v(x-i);h=v(n-j);h=i<h?i:h;y=1}if(!y){break e}if(!(h<k)){break i}r=o[g+4>>2];o[e>>2]=o[g>>2];o[e+4>>2]=r;r=o[g+12>>2];o[e+8>>2]=o[g+8>>2];o[e+12>>2]=r;k=h}t=t+1|0;if((I|0)!=(t|0)){continue}break}}t=o[a+48>>2];if((t|0)>=1){break d}I=-1;r=-1;break c}d=0;break a}y=o[b+48>>2];r=-1;I=-1;while(1){if((y|0)>=1){t=o[a+56>>2]+(aa<<4)|0;j=s[t>>2];i=s[t+4>>2];h=s[t+8>>2];D=v(v(v(j*s[c+32>>2])+v(i*s[c+36>>2]))+v(h*s[c+40>>2]));E=v(v(v(j*s[c+16>>2])+v(i*s[c+20>>2]))+v(h*s[c+24>>2]));x=v(v(v(j*s[c>>2])+v(i*s[c+4>>2]))+v(h*s[c+8>>2]));t=0;while(1){y=o[b+56>>2]+(t<<4)|0;L=s[y+8>>2];N=s[y>>2];F=s[y+4>>2];G=s[d+40>>2];H=s[d+32>>2];z=s[d+36>>2];A=s[d+24>>2];q=s[d+16>>2];n=s[d+20>>2];j=s[d+8>>2];i=s[d>>2];h=s[d+4>>2];o[g+12>>2]=0;n=v(v(v(N*q)+v(F*n))+v(L*A));j=v(v(v(N*i)+v(F*h))+v(L*j));h=v(v(x*n)-v(E*j));s[g+8>>2]=h;i=v(v(v(N*H)+v(F*z))+v(L*G));q=v(v(D*j)-v(x*i));s[g+4>>2]=q;z=v(v(E*i)-v(D*n));s[g>>2]=z;k:{if(+v(w(h))>1e-6^1?!(+v(w(z))>1e-6|+v(w(q))>1e-6):0){break k}R=h;h=v(v(1)/v(C(v(v(h*h)+v(v(z*z)+v(q*q))))));A=v(R*h);s[g+8>>2]=A;q=v(q*h);s[g+4>>2]=q;h=v(z*h);s[g>>2]=h;if(!!(v(v(v(h*Q)+v(q*P))+v(O*A))<v(0))){s[g+8>>2]=-A;s[g+4>>2]=-q;s[g>>2]=-h}o[6991]=o[6991]+1;if(p[26409]){if(!hg(c,d,g+16|0,g,a,b,k)){break k}}y=0;o[6992]=o[6992]+1;dc(a,c,g,g+108|0,g+104|0,g+80|0,g- -64|0);dc(b,d,g,g+100|0,g+96|0,g+48|0,g+32|0);z=s[g+104>>2];A=s[g+100>>2];l:{if(z<A){break l}q=s[g+96>>2];h=s[g+108>>2];if(q<h){break l}m=v(z-A);h=v(q-h);if(!!(m<h)){y=1;Z=s[g+56>>2];_=s[g+52>>2];$=s[g+48>>2];W=s[g+72>>2];X=s[g+68>>2];Y=s[g+64>>2];break l}y=1;Z=s[g+40>>2];_=s[g+36>>2];$=s[g+32>>2];W=s[g+88>>2];X=s[g+84>>2];Y=s[g+80>>2];m=h}if(!y){break b}if(!(m<k)){break k}r=o[g+4>>2];o[e>>2]=o[g>>2];o[e+4>>2]=r;r=o[g+12>>2];o[e+8>>2]=o[g+8>>2];o[e+12>>2]=r;fa=$;ga=_;ha=Z;B=Y;J=X;K=W;S=j;T=n;U=i;V=x;da=E;ea=D;I=aa;r=t;k=m}t=t+1|0;y=o[b+48>>2];if((t|0)<(y|0)){continue}break}t=o[a+48>>2]}aa=aa+1|0;if((aa|0)<(t|0)){continue}break}}m:{if((r|I)<0){break m}i=v(fa-B);B=v(ga-J);K=v(ha-K);m=v(v(v(i*S)+v(B*T))+v(K*U));J=v(v(v(i*V)+v(B*da))+v(K*ea));k=v(0);j=v(v(v(S*V)+v(T*da))+v(U*ea));h=v(v(1)-v(j*j));n:{if(h==v(0)){break n}k=v(-1.0000000150474662e+30);h=v(v(J-v(m*j))/h);if(h<v(-1.0000000150474662e+30)){break n}k=h;if(!(h>v(1.0000000150474662e+30))){break n}k=v(1.0000000150474662e+30)}m=v(v(j*k)-m);o:{if(!!(m<v(-1.0000000150474662e+30))){h=v(J+v(j*v(-1.0000000150474662e+30)));if(h<v(-1.0000000150474662e+30)){m=v(-1.0000000150474662e+30);k=v(-1.0000000150474662e+30);break o}k=v(1.0000000150474662e+30);if(!(h>v(1.0000000150474662e+30))){m=v(-1.0000000150474662e+30);k=h;break o}m=v(-1.0000000150474662e+30);break o}if(!(m>v(1.0000000150474662e+30))){break o}k=v(-1.0000000150474662e+30);m=v(1.0000000150474662e+30);h=v(J+v(j*v(1.0000000150474662e+30)));if(h<v(-1.0000000150474662e+30)){break o}k=h;if(!(h>v(1.0000000150474662e+30))){break o}k=v(1.0000000150474662e+30)}o[g+92>>2]=0;J=v(U*m);n=v(J+v(K-v(ea*k)));s[g+88>>2]=n;K=v(T*m);B=v(K+v(B-v(da*k)));s[g+84>>2]=B;h=v(S*m);j=v(h+v(i-v(V*k)));s[g+80>>2]=j;k=v(v(n*n)+v(v(j*j)+v(B*B)));if(!(k>v(1.1920928955078125e-7))){break m}k=v(C(k));m=v(v(1)/k);i=v(n*m);s[g+88>>2]=i;B=v(B*m);s[g+84>>2]=B;m=v(j*m);s[g+80>>2]=m;if(!!(v(v(v(m*Q)+v(B*P))+v(i*O))<v(0))){s[g+88>>2]=-i;s[g+84>>2]=-B;s[g+80>>2]=-m}o[g+76>>2]=0;s[g+72>>2]=ha+J;s[g+68>>2]=ga+K;s[g+64>>2]=fa+h;l[o[o[f>>2]+16>>2]](f,g+80|0,g- -64|0,v(-k))}d=1;m=s[e>>2];h=s[e+4>>2];k=s[e+8>>2];if(!(v(v(v(Q*m)+v(P*h))+v(O*k))<v(0))){break a}o[e+12>>2]=0;s[e+8>>2]=-k;s[e+4>>2]=-h;s[e>>2]=-m;break a}d=0}M=g+112|0;return d}function UB(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=0,n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=0,L=v(0),N=0,O=0,P=0,Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=v(0),ia=v(0),ja=v(0),ka=v(0),la=v(0),ma=v(0),na=v(0),oa=v(0),pa=v(0),qa=v(0),ra=v(0),sa=v(0);g=M+ -64|0;M=g;h=s[a+588>>2];G=s[a+572>>2];H=s[a+556>>2];W=s[d+56>>2];X=s[d+52>>2];q=s[a+664>>2];r=s[a+668>>2];B=s[a+672>>2];Y=s[c+56>>2];Z=s[c+52>>2];D=s[a+600>>2];F=s[a+604>>2];j=s[a+608>>2];_=s[d+36>>2];$=s[d+40>>2];J=s[c+36>>2];Q=s[c+40>>2];i=s[a+624>>2];L=s[d+20>>2];n=s[a+640>>2];aa=s[d+24>>2];z=s[a+656>>2];t=s[a+560>>2];R=s[c+20>>2];w=s[a+576>>2];S=s[c+24>>2];x=s[a+592>>2];E=o[b+24>>2];ba=s[d+48>>2];ca=s[c+48>>2];da=s[d+32>>2];T=s[c+32>>2];ea=s[d+8>>2];I=s[d>>2];qa=s[d+4>>2];U=s[c+8>>2];fa=s[c>>2];ga=s[c+4>>2];ra=s[d+16>>2];V=s[o[a+32>>2]+344>>2];sa=s[o[a+28>>2]+344>>2];ha=s[c+16>>2];o[g+60>>2]=0;k=v(sa+V);k=k>v(0)?v(V/k):v(.5);y=v(v(1)-k);ia=v(v(v(t*T)+v(w*J))+v(x*Q));ja=v(v(v(i*da)+v(n*_))+v(z*$));ka=v(v(ia*k)+v(ja*y));la=v(v(v(fa*t)+v(ga*w))+v(U*x));ma=v(v(v(I*i)+v(qa*n))+v(ea*z));na=v(v(la*k)+v(ma*y));oa=v(v(v(t*ha)+v(w*R))+v(x*S));pa=v(v(v(i*ra)+v(n*L))+v(z*aa));n=v(v(oa*k)+v(pa*y));z=v(v(1)/v(C(v(v(ka*ka)+v(v(na*na)+v(n*n))))));i=v(ka*z);s[g+56>>2]=i;n=v(n*z);s[g+52>>2]=n;z=v(na*z);s[g+48>>2]=z;o[g+28>>2]=0;_=v(W+v(v(v(da*q)+v(_*r))+v($*B)));w=v(_-W);W=v(ba+v(v(v(I*q)+v(qa*r))+v(ea*B)));x=v(W-ba);$=v(X+v(v(v(ra*q)+v(L*r))+v(aa*B)));r=v($-X);B=v(v(w*i)+v(v(x*z)+v(r*n)));t=v(i*B);X=v(Y+v(v(v(T*D)+v(J*F))+v(Q*j)));q=v(X-Y);Y=v(ca+v(v(v(fa*D)+v(ga*F))+v(U*j)));L=v(Y-ca);aa=v(Z+v(v(v(ha*D)+v(R*F))+v(S*j)));j=v(aa-Z);D=v(v(q*i)+v(v(L*z)+v(j*n)));F=v(i*D);w=v(w-t);Z=v(q-F);q=v(v(k*w)+v(y*Z));s[g+24>>2]=q;ba=v(n*B);ca=v(r-ba);I=j;j=v(n*D);da=v(I-j);r=v(v(k*ca)+v(y*da));s[g+20>>2]=r;I=x;x=v(z*B);ea=v(I-x);I=L;L=v(z*D);I=v(I-L);B=v(v(k*ea)+v(y*I));s[g+16>>2]=B;t=v(F-t);D=v(w-v(y*t));w=v(j-ba);F=v(ca-v(y*w));x=v(L-x);j=v(ea-v(y*x));t=v(Z+v(k*t));w=v(da+v(k*w));x=v(I+v(k*x));d=sa<v(1.1920928955078125e-7)|V<v(1.1920928955078125e-7);c=g;V=v(v(q*q)+v(v(B*B)+v(r*r)));a:{if(!!(V>v(1.1920928955078125e-7))){h=v(v(1)/v(C(V)));q=v(q*h);s[g+24>>2]=q;r=v(r*h);s[g+20>>2]=r;h=v(B*h);break a}o[g+28>>2]=0;q=v(v(v(H*T)+v(G*J))+v(h*Q));s[g+24>>2]=q;r=v(v(v(H*ha)+v(G*R))+v(h*S));s[g+20>>2]=r;h=v(v(v(fa*H)+v(ga*G))+v(U*h))}s[c+16>>2]=h;o[g+12>>2]=0;G=v(v(z*r)-v(n*h));s[g+8>>2]=G;H=v(v(i*h)-v(z*q));s[g+4>>2]=H;B=v(v(n*q)-v(i*r));s[g>>2]=B;s[g+40>>2]=v(x*r)-v(w*h);s[g+36>>2]=v(t*h)-v(x*q);s[g+32>>2]=v(w*q)-v(t*r);l=o[g+36>>2];c=o[b+12>>2];o[c>>2]=o[g+32>>2];o[c+4>>2]=l;o[c+8>>2]=o[g+40>>2];c=o[b+20>>2];s[c+8>>2]=-v(v(j*r)-v(F*h));s[c+4>>2]=-v(v(D*h)-v(j*q));s[c>>2]=-v(v(F*q)-v(D*r));o[g+44>>2]=0;S=v(v(x*H)-v(w*B));s[g+40>>2]=S;T=v(v(t*B)-v(x*G));s[g+36>>2]=T;U=v(v(w*G)-v(t*H));s[g+32>>2]=U;J=v(v(j*H)-v(F*B));Q=v(v(D*B)-v(j*G));R=v(v(F*G)-v(D*H));if(!(!d|!p[a+716|0])){s[g+40>>2]=k*S;s[g+36>>2]=k*T;s[g+32>>2]=k*U;Q=v(y*Q);R=v(y*R);J=v(y*J)}A=o[g+36>>2];l=E<<2;c=l+o[b+12>>2]|0;o[c>>2]=o[g+32>>2];o[c+4>>2]=A;o[c+8>>2]=o[g+40>>2];c=o[b+20>>2];s[c+l>>2]=-R;K=E+1|0;s[c+(K<<2)>>2]=-Q;N=E+2|0;s[c+(N<<2)>>2]=-J;J=v(v(x*n)-v(w*z));s[g+40>>2]=J;o[g+44>>2]=0;x=v(v(t*z)-v(x*i));s[g+36>>2]=x;w=v(v(w*i)-v(t*n));s[g+32>>2]=w;t=v(v(j*n)-v(F*z));j=v(v(D*z)-v(j*i));D=v(v(F*i)-v(D*n));if(d){s[g+40>>2]=k*J;s[g+36>>2]=k*x;s[g+32>>2]=k*w;t=v(y*t);j=v(y*j);D=v(y*D)}A=o[g+36>>2];d=E<<1;l=d<<2;c=l+o[b+12>>2]|0;o[c>>2]=o[g+32>>2];o[c+4>>2]=A;o[c+8>>2]=o[g+40>>2];c=o[b+20>>2];s[l+c>>2]=-D;O=d|1;s[(O<<2)+c>>2]=-j;P=d+2|0;s[(P<<2)+c>>2]=-t;b:{if(p[a+736|0]){k=v(-G);y=v(-H);D=v(-B);F=v(-h);d=o[b+28>>2];break b}j=s[b+4>>2];t=s[b>>2];l=o[g+20>>2];c=o[b+8>>2];o[c>>2]=o[g+16>>2];o[c+4>>2]=l;o[c+8>>2]=o[g+24>>2];A=o[g+4>>2];l=E<<2;c=l+o[b+8>>2]|0;o[c>>2]=o[g>>2];o[c+4>>2]=A;o[c+8>>2]=o[g+8>>2];A=d<<2;c=A+o[b+8>>2]|0;d=o[g+52>>2];o[c>>2]=o[g+48>>2];o[c+4>>2]=d;o[c+8>>2]=o[g+56>>2];c=o[b+16>>2];F=v(-h);s[c>>2]=F;s[c+4>>2]=-r;s[c+8>>2]=-q;D=v(-B);s[c+l>>2]=D;y=v(-H);s[c+(K<<2)>>2]=y;k=v(-G);s[c+(N<<2)>>2]=k;s[c+A>>2]=-z;s[c+(O<<2)>>2]=-n;s[c+(P<<2)>>2]=-i;d=o[b+28>>2];j=v(t*j);t=v(W-Y);w=v($-aa);x=v(_-X);s[d>>2]=j*v(v(v(t*h)+v(w*r))+v(x*q));s[d+l>>2]=j*v(v(v(t*B)+v(w*H))+v(x*G));s[d+A>>2]=j*v(v(v(t*z)+v(w*n))+v(x*i));c=o[b+20>>2]}l=o[b+12>>2];A=u(E,12);s[l+A>>2]=h;K=A+8|0;s[K+l>>2]=q;N=A+4|0;s[N+l>>2]=r;E=E<<4;s[E+l>>2]=B;O=E|4;s[O+l>>2]=H;P=E|8;s[P+l>>2]=G;s[c+A>>2]=F;i=s[g+20>>2];s[c+N>>2]=-i;n=s[g+24>>2];s[c+K>>2]=-n;s[c+E>>2]=D;s[c+O>>2]=y;s[c+P>>2]=k;k=v(s[b>>2]*s[b+4>>2]);y=v(v(oa*ja)-v(ia*pa));j=v(y*h);h=v(v(ia*ma)-v(la*ja));j=v(j+v(i*h));i=v(v(la*pa)-v(oa*ma));s[d+A>>2]=k*v(j+v(n*i));s[d+E>>2]=k*v(v(v(y*B)+v(h*H))+v(i*G));c:{d:{if(p[a+716|0]){z=v(s[a+708>>2]*s[a+732>>2]);K=z>v(0)?1:2;N=!p[a+737|0];d=1;break d}if(!p[a+737|0]){break c}z=v(0);N=0;K=0;d=0}k=s[g+48>>2];E=u(o[b+24>>2],5);A=E<<2;o[A+l>>2]=o[g+48>>2];h=s[g+52>>2];O=A+4|0;o[O+l>>2]=o[g+52>>2];y=s[g+56>>2];P=A+8|0;o[l+P>>2]=o[g+56>>2];s[c+O>>2]=-h;s[c+A>>2]=-k;s[c+P>>2]=-y;c=a+688|0;i=Jd(c);n=Kd(c);c=o[b+28>>2];o[A+c>>2]=0;l=o[a+748>>2];q=s[(l&2?a+760|0:b+4|0)>>2];if(!(d&i==n|N)){if(l&4){o[o[b+32>>2]+(E<<2)>>2]=o[a+752>>2]}r=Tc(s[a+728>>2],i,n,s[a+680>>2],v(q*s[b>>2]));c=o[b+28>>2];l=E<<2;A=c+l|0;s[A>>2]=v(v(r*s[a+680>>2])*s[a+732>>2])+s[A>>2];s[l+o[b+36>>2]>>2]=-s[a+684>>2];o[l+o[b+40>>2]>>2]=o[a+684>>2]}if(!d){break c}d=E<<2;c=d+c|0;s[c>>2]=s[c>>2]+v(z*v(q*s[b>>2]));if(m[a+748|0]&1){o[d+o[b+32>>2]>>2]=o[a+756>>2]}e:{if(i==n){o[o[b+36>>2]+(E<<2)>>2]=-8388609;i=v(3.4028234663852886e+38);break e}d=o[b+36>>2]+(E<<2)|0;if((K|0)==1){o[d>>2]=0;i=v(3.4028234663852886e+38);break e}o[d>>2]=-8388609;i=v(0)}s[o[b+40>>2]+(E<<2)>>2]=i;i=s[a+704>>2];f:{if(!(i>v(0))){break f}h=v(v(v(v(s[e>>2]*k)+v(s[e+4>>2]*h))+v(s[e+8>>2]*y))-v(v(v(s[f>>2]*k)+v(s[f+4>>2]*h))+v(s[f+8>>2]*y)));if((K|0)==1){if(!(h<v(0))){break f}h=v(h*v(-i));if(!(h>s[c>>2])){break f}s[c>>2]=h;break f}if(!(h>v(0))){break f}h=v(h*v(-i));if(!(h<s[c>>2])){break f}s[c>>2]=h}s[c>>2]=s[a+700>>2]*s[c>>2]}M=g- -64|0}function _j(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,r=0;o[a+168>>2]=o[a+152>>2];m[b+80|0]=1;m[b+60|0]=0;o[b+52>>2]=282;o[b>>2]=17612;o[b+76>>2]=0;m[b+100|0]=1;o[b+68>>2]=0;o[b+72>>2]=0;o[b+96>>2]=0;m[b+120|0]=1;o[b+88>>2]=0;o[b+92>>2]=0;o[b+116>>2]=0;m[b+140|0]=1;o[b+108>>2]=0;o[b+112>>2]=0;o[b+136>>2]=0;m[b+164|0]=1;o[b+144>>2]=0;o[b+128>>2]=0;o[b+132>>2]=0;o[b+160>>2]=0;o[b+152>>2]=0;o[b+156>>2]=0;o[b+168>>2]=0;o[b+28>>2]=2139095039;o[b+32>>2]=0;o[b+20>>2]=2139095039;o[b+24>>2]=2139095039;o[b+12>>2]=-8388609;o[b+16>>2]=0;o[b+4>>2]=-8388609;o[b+8>>2]=-8388609;g=o[a+56>>2];c=b;a:{if(d){o[b+56>>2]=g<<8&16711680|g<<24|(g>>>8&65280|g>>>24);m[b+4|0]=p[a+7|0];m[b+5|0]=p[a+6|0];m[b+6|0]=p[a+5|0];m[b+7|0]=p[a+4|0];m[b+8|0]=p[a+11|0];m[b+9|0]=p[a+10|0];m[b+10|0]=p[a+9|0];m[b+11|0]=p[a+8|0];m[b+12|0]=p[a+15|0];m[b+13|0]=p[a+14|0];m[b+14|0]=p[a+13|0];m[b+15|0]=p[a+12|0];m[b+16|0]=p[a+19|0];m[b+17|0]=p[a+18|0];m[b+18|0]=p[a+17|0];m[b+19|0]=p[a+16|0];m[b+20|0]=p[a+23|0];m[b+21|0]=p[a+22|0];m[b+22|0]=p[a+21|0];m[b+23|0]=p[a+20|0];m[b+24|0]=p[a+27|0];m[b+25|0]=p[a+26|0];m[b+26|0]=p[a+25|0];m[b+27|0]=p[a+24|0];m[b+28|0]=p[a+31|0];m[b+29|0]=p[a+30|0];m[b+30|0]=p[a+29|0];m[b+31|0]=p[a+28|0];m[b+32|0]=p[a+35|0];m[b+33|0]=p[a+34|0];m[b+34|0]=p[a+33|0];m[b+35|0]=p[a+32|0];m[b+36|0]=p[a+39|0];m[b+37|0]=p[a+38|0];m[b+38|0]=p[a+37|0];m[b+39|0]=p[a+36|0];m[b+40|0]=p[a+43|0];m[b+41|0]=p[a+42|0];m[b+42|0]=p[a+41|0];m[b+43|0]=p[a+40|0];m[b+44|0]=p[a+47|0];m[b+45|0]=p[a+46|0];m[b+46|0]=p[a+45|0];m[b+47|0]=p[a+44|0];m[b+48|0]=p[a+51|0];m[b+49|0]=p[a+50|0];m[b+50|0]=p[a+49|0];m[b+51|0]=p[a+48|0];g=o[a+144>>2];o[b+144>>2]=g<<24|g<<8&16711680|(g>>>8&65280|g>>>24);g=o[a+168>>2];g=g<<24|g<<8&16711680|(g>>>8&65280|g>>>24);break a}o[b+56>>2]=g;g=o[a+16>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=g;g=o[a+8>>2];o[b+4>>2]=o[a+4>>2];o[b+8>>2]=g;g=o[a+32>>2];o[b+28>>2]=o[a+28>>2];o[b+32>>2]=g;g=o[a+24>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=g;g=o[a+48>>2];o[b+44>>2]=o[a+44>>2];o[b+48>>2]=g;g=o[a+40>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=g;o[b+144>>2]=o[a+144>>2];g=o[a+168>>2]}o[c+168>>2]=g;m[b+60|0]=p[a+60|0];g=b+172|0;j=o[a+56>>2];b:{if(p[a+60|0]){c=o[b+136>>2];if(c){if(p[b+140|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+136>>2]=0}o[b+136>>2]=g;m[b+140|0]=0;o[b+132>>2]=j;o[b+128>>2]=j;c:{if(!d){if((j|0)<1){break c}h=o[a+136>>2];while(1){c=i<<4;f=c+g|0;c=c+h|0;n[f>>1]=q[c>>1];n[f+2>>1]=q[c+2>>1];n[f+4>>1]=q[c+4>>1];n[f+6>>1]=q[c+6>>1];n[f+8>>1]=q[c+8>>1];n[f+10>>1]=q[c+10>>1];o[f+12>>2]=o[c+12>>2];i=i+1|0;if((j|0)!=(i|0)){continue}break}break c}if((j|0)<1){break c}h=o[a+136>>2];while(1){c=i<<4;e=c+g|0;f=c+h|0;c=q[f>>1];n[e>>1]=(c<<24|c<<8&16711680)>>>16;c=q[f+2>>1];n[e+2>>1]=(c<<24|c<<8&16711680)>>>16;c=q[f+4>>1];n[e+4>>1]=(c<<24|c<<8&16711680)>>>16;c=q[f+6>>1];n[e+6>>1]=(c<<24|c<<8&16711680)>>>16;c=q[f+8>>1];n[e+8>>1]=(c<<24|c<<8&16711680)>>>16;c=q[f+10>>1];n[e+10>>1]=(c<<24|c<<8&16711680)>>>16;c=o[f+12>>2];o[e+12>>2]=c<<24|c<<8&16711680|(c>>>8&65280|c>>>24);i=i+1|0;if((j|0)!=(i|0)){continue}break}}f=b+128|0;e=j<<4;break b}c=o[b+96>>2];if(c){if(p[b+100|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+96>>2]=0}f=b+88|0;o[b+96>>2]=g;m[b+100|0]=0;o[b+92>>2]=j;o[b+88>>2]=j;d:{e:{f:{if(!d){if((j|0)<1){break e}r=o[a+96>>2];c=g;while(1){k=i<<6;e=k+c|0;h=k+r|0;c=o[h+4>>2];o[e>>2]=o[h>>2];o[e+4>>2]=c;c=o[h+12>>2];o[e+8>>2]=o[h+8>>2];o[e+12>>2]=c;h=k+o[a+96>>2]|0;c=o[h+20>>2];e=k+o[b+96>>2]|0;o[e+16>>2]=o[h+16>>2];o[e+20>>2]=c;c=o[h+28>>2];o[e+24>>2]=o[h+24>>2];o[e+28>>2]=c;c=o[b+96>>2];e=k+c|0;r=o[a+96>>2];h=k+r|0;o[e+32>>2]=o[h+32>>2];o[e+36>>2]=o[h+36>>2];o[e+40>>2]=o[h+40>>2];i=i+1|0;if((j|0)!=(i|0)){continue}break}break f}if((j|0)<1){break e}k=o[a+96>>2];c=g;while(1){h=r<<6;e=h+c|0;c=h+k|0;m[e|0]=p[c+3|0];m[e+1|0]=p[c+2|0];m[e+2|0]=p[c+1|0];m[e+3|0]=p[c|0];m[e+4|0]=p[c+7|0];m[e+5|0]=p[c+6|0];m[e+6|0]=p[c+5|0];m[e+7|0]=p[c+4|0];m[e+8|0]=p[c+11|0];m[e+9|0]=p[c+10|0];m[e+10|0]=p[c+9|0];m[e+11|0]=p[c+8|0];m[e+12|0]=p[c+15|0];m[e+13|0]=p[c+14|0];m[e+14|0]=p[c+13|0];m[e+15|0]=p[c+12|0];e=h+o[b+96>>2]|0;c=h+o[a+96>>2]|0;m[e+16|0]=p[c+19|0];m[e+17|0]=p[c+18|0];m[e+18|0]=p[c+17|0];m[e+19|0]=p[c+16|0];m[e+20|0]=p[c+23|0];m[e+21|0]=p[c+22|0];m[e+22|0]=p[c+21|0];m[e+23|0]=p[c+20|0];m[e+24|0]=p[c+27|0];m[e+25|0]=p[c+26|0];m[e+26|0]=p[c+25|0];m[e+27|0]=p[c+24|0];m[e+28|0]=p[c+31|0];m[e+29|0]=p[c+30|0];m[e+30|0]=p[c+29|0];m[e+31|0]=p[c+28|0];c=o[b+96>>2];e=h+c|0;k=o[a+96>>2];h=h+k|0;i=o[h+32>>2];o[e+32>>2]=i<<24|i<<8&16711680|(i>>>8&65280|i>>>24);i=o[h+36>>2];o[e+36>>2]=i<<24|i<<8&16711680|(i>>>8&65280|i>>>24);h=o[h+40>>2];o[e+40>>2]=h<<24|h<<8&16711680|(h>>>8&65280|h>>>24);r=r+1|0;if((j|0)!=(r|0)){continue}break}}e=j<<6;h=e;if(c){break d}break b}c=g;h=j<<6}e=h;if(p[b+100|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+96>>2]=0}o[f>>2]=0;o[f+4>>2]=0;m[f+5|0]=0;m[f+6|0]=0;m[f+7|0]=0;m[f+8|0]=0;m[f+9|0]=0;m[f+10|0]=0;m[f+11|0]=0;m[f+12|0]=0;f=o[a+168>>2];c=o[b+160>>2];if(c){if(p[b+164|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+160>>2]=0}h=e+g|0;o[b+160>>2]=h;m[b+164|0]=0;o[b+156>>2]=f;o[b+152>>2]=f;g=o[a+168>>2];g:{if(!d){if((g|0)<1){break g}g=o[a+160>>2];d=0;while(1){c=d<<5;f=c+h|0;c=c+g|0;n[f>>1]=q[c>>1];n[f+2>>1]=q[c+2>>1];n[f+4>>1]=q[c+4>>1];n[f+6>>1]=q[c+6>>1];n[f+8>>1]=q[c+8>>1];n[f+10>>1]=q[c+10>>1];o[f+12>>2]=o[c+12>>2];c=o[c+16>>2];o[f+28>>2]=0;o[f+20>>2]=0;o[f+24>>2]=0;o[f+16>>2]=c;d=d+1|0;if((d|0)<o[a+168>>2]){continue}break}break g}if((g|0)<1){break g}c=o[a+160>>2];d=0;while(1){a=d<<5;e=a+h|0;f=a+c|0;a=q[f>>1];n[e>>1]=(a<<24|a<<8&16711680)>>>16;a=q[f+2>>1];n[e+2>>1]=(a<<24|a<<8&16711680)>>>16;a=q[f+4>>1];n[e+4>>1]=(a<<24|a<<8&16711680)>>>16;a=q[f+6>>1];n[e+6>>1]=(a<<24|a<<8&16711680)>>>16;a=q[f+8>>1];n[e+8>>1]=(a<<24|a<<8&16711680)>>>16;a=q[f+10>>1];n[e+10>>1]=(a<<24|a<<8&16711680)>>>16;a=o[f+12>>2];o[e+12>>2]=a<<24|a<<8&16711680|(a>>>8&65280|a>>>24);a=o[f+16>>2];o[e+16>>2]=a<<24|a<<8&16711680|(a>>>8&65280|a>>>24);d=d+1|0;if((g|0)!=(d|0)){continue}break}}o[b>>2]=0;m[b+157|0]=0;m[b+158|0]=0;m[b+159|0]=0;m[b+160|0]=0;m[b+161|0]=0;m[b+162|0]=0;m[b+163|0]=0;m[b+164|0]=0;o[b+152>>2]=0;o[b+156>>2]=0;return 1}



function lf(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0,s=0,t=0,v=0,w=0;d=M-144|0;M=d;a:{if((c|0)<=0){b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;b=o[a+52>>2];if(b){if(p[a+56|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+52>>2]=0}o[a+52>>2]=0;m[a+56|0]=1;o[a+44>>2]=0;o[a+48>>2]=0;break a}m[d+112|0]=1;o[d+88>>2]=0;o[d+92>>2]=256;o[d+72>>2]=0;o[d+76>>2]=256;o[d+56>>2]=0;o[d+60>>2]=256;o[d+108>>2]=0;o[d+100>>2]=0;o[d+104>>2]=0;o[d+80>>2]=0;o[d+84>>2]=0;o[d+64>>2]=0;o[d+68>>2]=0;o[d+48>>2]=0;o[d+52>>2]=0;jy(d+16|0,b,c);c=o[a+4>>2];if((c|0)<=-1){if(o[a+8>>2]<=-1){b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}m[a+16|0]=1;o[a+8>>2]=0;o[a+12>>2]=0}while(1){b=o[d+4>>2];e=o[a+12>>2]+(c<<4)|0;o[e>>2]=o[d>>2];o[e+4>>2]=b;b=o[d+12>>2];o[e+8>>2]=o[d+8>>2];o[e+12>>2]=b;b=c+1|0;e=b>>>0>=c>>>0;c=b;if(e){continue}break}}o[a+4>>2]=0;o[d+8>>2]=0;o[d>>2]=0;o[d+4>>2]=0;c=o[a+24>>2];if((c|0)<=-1){if(o[a+28>>2]<=-1){b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+28>>2]=0;o[a+32>>2]=0;m[a+36|0]=1}while(1){b=o[d+4>>2];e=o[a+32>>2]+u(c,12)|0;o[e>>2]=o[d>>2];o[e+4>>2]=b;o[e+8>>2]=o[d+8>>2];b=c+1|0;e=b>>>0>=c>>>0;c=b;if(e){continue}break}}o[a+24>>2]=0;c=o[a+44>>2];if((c|0)<=-1){b=o[a+52>>2];if(o[a+48>>2]<=-1){if(!(!b|!p[a+56|0])){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}m[a+56|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;b=0}e=b;b=c<<2;$(e+b|0,0,0-b|0)}o[a+44>>2]=0;b=o[d+140>>2];b:{if(o[b+104>>2]>-1){break b}o[b+104>>2]=0;o[7717]=o[7717]+1;k=l[o[6606]](4,16)|0;o[k>>2]=b;c=0;j=1;q=1;while(1){w=c;g=o[(c<<2)+k>>2];iy(d,d+16|0,g);f=o[a+4>>2];c:{if((f|0)!=o[a+8>>2]){break c}v=f?f<<1:1;if((f|0)>=(v|0)){break c}c=0;e=0;if(v){o[7717]=o[7717]+1;e=l[o[6606]](v<<4,16)|0;f=o[a+4>>2]}if((f|0)>=1){while(1){b=c<<4;i=b+e|0;h=b+o[a+12>>2]|0;b=o[h+4>>2];o[i>>2]=o[h>>2];o[i+4>>2]=b;b=o[h+12>>2];o[i+8>>2]=o[h+8>>2];o[i+12>>2]=b;c=c+1|0;if((f|0)!=(c|0)){continue}break}}b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=e;m[a+16|0]=1;o[a+8>>2]=v;f=o[a+4>>2]}b=o[d+4>>2];c=o[a+12>>2]+(f<<4)|0;o[c>>2]=o[d>>2];o[c+4>>2]=b;b=o[d+12>>2];o[c+8>>2]=o[d+8>>2];o[c+12>>2]=b;o[a+4>>2]=o[a+4>>2]+1;i=-1;t=-1;v=o[g+8>>2];b=v;if(b){while(1){c=o[b+20>>2];if((c|0)<=-1){f=o[a+24>>2];o[d+8>>2]=0;o[d>>2]=0;o[d+4>>2]=0;c=f;d:{if((c|0)!=o[a+28>>2]){break d}n=c?c<<1:1;if((f|0)>=(n|0)){break d}c=0;e=f;g=0;if(n){o[7717]=o[7717]+1;g=l[o[6606]](u(n,12),16)|0;e=o[a+24>>2]}if((e|0)>=1){while(1){h=u(c,12);r=h+o[a+32>>2]|0;s=g+h|0;h=o[r+4>>2];o[s>>2]=o[r>>2];o[s+4>>2]=h;o[s+8>>2]=o[r+8>>2];c=c+1|0;if((e|0)!=(c|0)){continue}break}}c=o[a+32>>2];if(c){if(p[a+36|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+32>>2]=0}o[a+32>>2]=g;m[a+36|0]=1;o[a+28>>2]=n;c=o[a+24>>2]}e=o[a+32>>2]+u(c,12)|0;c=o[d+4>>2];o[e>>2]=o[d>>2];o[e+4>>2]=c;o[e+8>>2]=o[d+8>>2];e=o[a+24>>2]+1|0;o[a+24>>2]=e;o[d+8>>2]=0;o[d>>2]=0;o[d+4>>2]=0;e:{if(o[a+28>>2]!=(e|0)){break e}n=e?e<<1:1;if((e|0)>=(n|0)){break e}c=0;g=0;if(n){o[7717]=o[7717]+1;g=l[o[6606]](u(n,12),16)|0;e=o[a+24>>2]}if((e|0)>=1){while(1){h=u(c,12);r=h+o[a+32>>2]|0;s=g+h|0;h=o[r+4>>2];o[s>>2]=o[r>>2];o[s+4>>2]=h;o[s+8>>2]=o[r+8>>2];c=c+1|0;if((e|0)!=(c|0)){continue}break}}c=o[a+32>>2];if(c){if(p[a+36|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+32>>2]=0}o[a+32>>2]=g;m[a+36|0]=1;o[a+28>>2]=n;e=o[a+24>>2]}c=o[d+4>>2];e=o[a+32>>2]+u(e,12)|0;o[e>>2]=o[d>>2];o[e+4>>2]=c;o[e+8>>2]=o[d+8>>2];o[a+24>>2]=o[a+24>>2]+1;n=o[a+32>>2];o[b+20>>2]=f;h=f+1|0;o[o[b+8>>2]+20>>2]=h;r=u(f,12)+n|0;o[r+16>>2]=-1;o[r+4>>2]=1;s=o[b+12>>2];c=o[s+104>>2];f:{if((c|0)>-1){e=j;j=c;break f}o[s+104>>2]=j;g:{h:{if((j|0)!=(q|0)){break h}g=q?q<<1:1;if((q|0)>=(g|0)){break h}c=0;f=0;if(g){o[7717]=o[7717]+1;f=l[o[6606]](g<<2,16)|0}i:{if((q|0)>=1){while(1){e=c<<2;o[e+f>>2]=o[e+k>>2];c=c+1|0;if((q|0)!=(c|0)){continue}break i}}if(!k){break g}}if(k){o[7718]=o[7718]+1;l[o[6607]](k)}break g}f=k;g=q}o[(j<<2)+f>>2]=s;e=j+1|0;k=f;q=g}o[r+8>>2]=j;o[(u(h,12)+n|0)+8>>2]=w;j=e;c=o[b+20>>2]}e=c;if((i|0)>=0){o[o[a+32>>2]+u(c,12)>>2]=i-c;e=t}i=c;t=e;b=o[b>>2];if((v|0)!=(b|0)){continue}break}o[o[a+32>>2]+u(t,12)>>2]=i-t}c=w+1|0;if((c|0)<(j|0)){continue}break}j=0;while(1){g=o[o[(j<<2)+k>>2]+8>>2];b=g;if(b){while(1){c=o[b+20>>2];if((c|0)>=0){f=o[a+44>>2];j:{if((f|0)!=o[a+48>>2]){break j}i=f?f<<1:1;if((f|0)>=(i|0)){break j}c=0;e=0;if(i){o[7717]=o[7717]+1;e=l[o[6606]](i<<2,16)|0;f=o[a+44>>2]}t=o[a+52>>2];k:{l:{if((f|0)>=1){while(1){q=c<<2;o[q+e>>2]=o[q+t>>2];c=c+1|0;if((f|0)!=(c|0)){continue}break l}}if(!t){break k}}if(p[a+56|0]){c=t;if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+52>>2]=0;f=o[a+44>>2]}o[a+52>>2]=e;m[a+56|0]=1;o[a+48>>2]=i;c=o[b+20>>2]}o[o[a+52>>2]+(f<<2)>>2]=c;o[a+44>>2]=o[a+44>>2]+1;c=b;while(1){o[c+20>>2]=-1;c=o[o[c+8>>2]+4>>2];if((c|0)!=(b|0)){continue}break}}b=o[b>>2];if((g|0)!=(b|0)){continue}break}}b=(j|0)==(w|0);j=j+1|0;if(!b){continue}break}if(!k){break b}if(k){o[7718]=o[7718]+1;l[o[6607]](k)}}a=o[d+108>>2];if(a){if(p[d+112|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+108>>2]=0}o[d+108>>2]=0;m[d+112|0]=1;o[d+100>>2]=0;o[d+104>>2]=0;while(1){b=o[d+80>>2];if(b){o[d+80>>2]=o[b+8>>2];a=o[b>>2];if(a){o[7718]=o[7718]+1;l[o[6607]](a)}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}continue}break}while(1){b=o[d+64>>2];if(b){o[d+64>>2]=o[b+8>>2];a=o[b>>2];if(a){o[7718]=o[7718]+1;l[o[6607]](a)}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}continue}break}while(1){b=o[d+48>>2];if(!b){break a}o[d+48>>2]=o[b+8>>2];a=o[b>>2];if(a){o[7718]=o[7718]+1;l[o[6607]](a)}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}continue}}M=d+144|0}function Mi(a){var b=0,c=0,d=0,e=v(0),f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=0,y=v(0),z=v(0),A=v(0),B=0,C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=0,V=v(0);c=M-192|0;M=c;ia(21072);d=o[a+1112>>2];if((d|0)>=1){N=a+1048|0;J=c+144|4;U=o[5759];V=s[5758];while(1){b=o[o[a+1120>>2]+(K<<2)>>2];I=o[b+24>>2];if(I){o[c+184>>2]=0;o[c+188>>2]=0;o[c+176>>2]=0;o[c+180>>2]=0;o[c+168>>2]=0;o[c+172>>2]=0;o[c+160>>2]=0;o[c+164>>2]=0;o[J+8>>2]=0;o[J>>2]=0;o[J+4>>2]=0;o[c+184>>2]=966609233;o[c+164>>2]=961656599;o[c+144>>2]=953267991;x=o[b+24>>2];B=(x|0)<1;a:{if(B){f=v(0);j=v(0);e=v(0);break a}H=o[b+32>>2];L=o[b+12>>2];e=v(0);d=0;j=v(0);f=v(0);while(1){O=d<<2;g=o[H+O>>2];k=s[L+O>>2];f=v(f+v(s[g+8>>2]*k));e=v(e+v(k*s[g+16>>2]));j=v(j+v(k*s[g+12>>2]));d=d+1|0;if((x|0)!=(d|0)){continue}break}}o[b+240>>2]=0;l=e;e=s[b+128>>2];i=v(l*e);s[b+236>>2]=i;l=v(j*e);s[b+232>>2]=l;n=v(f*e);s[b+228>>2]=n;if(!B){H=o[b+52>>2];L=o[b+32>>2];d=0;f=v(9999999747378752e-20);j=v(.00019999999494757503);e=v(0);k=v(.00029999998514540493);q=v(0);while(1){B=o[L+(d<<2)>>2];t=s[B+16>>2];r=s[B+12>>2];g=H+(d<<4)|0;u=s[g+8>>2];w=s[g+4>>2];h=v(s[B+8>>2]-n);f=v(v(h*s[g>>2])+f);s[c+144>>2]=f;s[c+148>>2]=v(h*w)+s[c+148>>2];s[c+152>>2]=v(h*u)+s[c+152>>2];u=s[g+8>>2];w=s[g>>2];h=v(r-l);j=v(v(h*s[g+4>>2])+j);s[c+164>>2]=j;s[c+160>>2]=v(h*w)+s[c+160>>2];s[c+168>>2]=v(h*u)+s[c+168>>2];r=s[g>>2];u=s[g+4>>2];h=v(t-i);k=v(v(h*s[g+8>>2])+k);s[c+184>>2]=k;e=v(v(h*u)+e);s[c+180>>2]=e;q=v(v(h*r)+q);s[c+176>>2]=q;d=d+1|0;if((x|0)!=(d|0)){continue}break}}b:{if(m[30644]&1){break b}if(!da(30644)){break b}o[7660]=U;s[7659]=V;ca(30644)}xi(c+144|0,c+96|0,c+48|0);d=o[b+240>>2];o[b+116>>2]=o[b+236>>2];o[b+120>>2]=d;d=o[b+232>>2];o[b+108>>2]=o[b+228>>2];o[b+112>>2]=d;d=o[c+108>>2];o[b+68>>2]=o[c+104>>2];o[b+72>>2]=d;d=o[c+100>>2];o[b+60>>2]=o[c+96>>2];o[b+64>>2]=d;d=o[c+124>>2];o[b+84>>2]=o[c+120>>2];o[b+88>>2]=d;d=o[c+116>>2];o[b+76>>2]=o[c+112>>2];o[b+80>>2]=d;d=o[c+132>>2];o[b+92>>2]=o[c+128>>2];o[b+96>>2]=d;d=o[c+140>>2];o[b+100>>2]=o[c+136>>2];o[b+104>>2]=d;e=s[b+68>>2];f=s[b- -64>>2];j=s[b+84>>2];k=s[b+76>>2];q=s[b+80>>2];t=s[b+172>>2];r=s[b+140>>2];u=s[b+156>>2];w=s[b+148>>2];E=s[b+164>>2];h=s[b+100>>2];F=s[b+168>>2];i=s[b+92>>2];z=s[b+136>>2];l=s[b+96>>2];C=s[b+152>>2];n=s[b+60>>2];D=s[b+132>>2];o[b+316>>2]=0;o[b+320>>2]=0;o[b+224>>2]=0;o[b+208>>2]=0;o[b+192>>2]=0;o[b+324>>2]=0;o[b+328>>2]=0;o[b+332>>2]=0;o[b+336>>2]=0;o[b+340>>2]=0;o[b+344>>2]=0;y=v(v(v(D*i)+v(w*l))+v(E*h));A=v(v(v(z*i)+v(C*l))+v(F*h));G=v(v(v(r*i)+v(u*l))+v(t*h));P=v(v(v(i*y)+v(l*A))+v(h*G));s[b+220>>2]=P;Q=v(v(v(k*y)+v(A*q))+v(G*j));s[b+216>>2]=Q;R=v(v(v(n*y)+v(A*f))+v(G*e));s[b+212>>2]=R;y=v(v(v(D*k)+v(w*q))+v(E*j));A=v(v(v(z*k)+v(C*q))+v(F*j));G=v(v(v(r*k)+v(u*q))+v(t*j));S=v(v(v(i*y)+v(l*A))+v(h*G));s[b+204>>2]=S;T=v(v(v(y*k)+v(A*q))+v(G*j));s[b+200>>2]=T;y=v(v(v(y*n)+v(A*f))+v(G*e));s[b+196>>2]=y;A=i;i=v(v(v(D*n)+v(w*f))+v(E*e));w=l;l=v(v(v(n*z)+v(f*C))+v(e*F));z=h;h=v(v(v(n*r)+v(f*u))+v(e*t));t=v(v(v(A*i)+v(w*l))+v(z*h));s[b+188>>2]=t;r=v(v(v(i*k)+v(l*q))+v(h*j));s[b+184>>2]=r;u=v(v(v(i*n)+v(l*f))+v(h*e));s[b+180>>2]=u;c:{if((I|0)<1){e=v(0);k=v(0);q=v(0);f=v(0);j=v(0);h=v(0);break c}x=o[b+32>>2];w=s[b+236>>2];E=s[b+232>>2];F=s[b+228>>2];B=o[b+12>>2];d=0;e=v(0);k=v(0);q=v(0);f=v(0);j=v(0);h=v(0);while(1){H=d<<2;g=o[H+x>>2];z=s[g+44>>2];n=s[g+48>>2];i=s[B+H>>2];l=v(s[g+40>>2]*i);h=v(l+h);s[b+316>>2]=h;n=v(i*n);f=v(n+f);s[b+324>>2]=f;i=v(i*z);j=v(i+j);s[b+320>>2]=j;z=s[g+16>>2];C=v(s[g+8>>2]-F);D=v(s[g+12>>2]-E);e=v(v(v(i*C)-v(l*D))+e);s[b+340>>2]=e;A=l;l=v(z-w);k=v(v(v(A*l)-v(n*C))+k);s[b+336>>2]=k;q=v(q+v(v(n*D)-v(i*l)));s[b+332>>2]=q;d=d+1|0;if((I|0)!=(d|0)){continue}break}}o[b+328>>2]=0;o[b+344>>2]=0;o[b+244>>2]=0;o[b+248>>2]=0;o[b+260>>2]=0;o[b+264>>2]=0;o[b+268>>2]=0;o[b+272>>2]=0;o[b+252>>2]=0;o[b+256>>2]=0;o[b+292>>2]=0;o[b+296>>2]=0;o[b+300>>2]=0;o[b+304>>2]=0;i=s[b+128>>2];l=v(i*f);f=v(v(1)-s[b+356>>2]);s[b+324>>2]=l*f;s[b+320>>2]=v(i*j)*f;s[b+316>>2]=v(h*i)*f;f=v(v(1)-s[b+360>>2]);s[b+340>>2]=f*v(v(v(q*R)+v(k*Q))+v(e*P));s[b+336>>2]=v(v(v(q*y)+v(k*T))+v(e*S))*f;s[b+332>>2]=v(v(v(u*q)+v(r*k))+v(t*e))*f;o[b+284>>2]=0;o[b+288>>2]=0;o[b+276>>2]=0;o[b+280>>2]=0;o[b+308>>2]=0;o[b+312>>2]=0;d:{e=s[b+364>>2];if(e>v(0)^1|o[b+24>>2]<1){break d}d=0;while(1){g=o[o[b+32>>2]+(d<<2)>>2];q=s[g+8>>2];h=s[g+12>>2];i=s[g+16>>2];x=o[b+52>>2]+(d<<4)|0;f=s[x+8>>2];j=s[x>>2];k=s[x+4>>2];l=s[b+108>>2];n=s[b+68>>2];t=s[b+60>>2];r=s[b+64>>2];u=s[b+112>>2];w=s[b+84>>2];E=s[b+76>>2];F=s[b+80>>2];z=s[b+116>>2];C=s[b+100>>2];D=s[b+92>>2];y=s[b+96>>2];o[g+20>>2]=0;s[g+16>>2]=i+v(e*v(v(z+v(v(v(j*D)+v(k*y))+v(f*C)))-i));s[g+12>>2]=h+v(e*v(v(u+v(v(v(j*E)+v(k*F))+v(f*w)))-h));s[g+8>>2]=q+v(e*v(v(l+v(v(v(j*t)+v(k*r))+v(f*n)))-q));d=d+1|0;if((d|0)>=o[b+24>>2]){break d}e=s[b+364>>2];continue}}e:{if(!p[b+377|0]){break e}d=1;x=o[b+32>>2];g=o[x>>2];e=s[g+8>>2];k=e;q=s[g+12>>2];f=q;j=s[g+16>>2];h=j;i=s[g+20>>2];l=i;if((I|0)>1){while(1){g=o[x+(d<<2)>>2];n=s[g+8>>2];e=e<n?n:e;k=n<k?n:k;n=s[g+20>>2];i=i<n?n:i;t=s[g+16>>2];j=j<t?t:j;r=s[g+12>>2];q=q<r?r:q;l=n<l?n:l;h=t<h?t:h;f=r<f?r:f;d=d+1|0;if((I|0)!=(d|0)){continue}break}}s[c+44>>2]=i;s[c+40>>2]=j;s[c+36>>2]=q;s[c+32>>2]=e;s[c+28>>2]=l;s[c+24>>2]=h;s[c+20>>2]=f;s[c+16>>2]=k;d=o[b+348>>2];if(d){f=s[b+316>>2];j=s[b+320>>2];k=s[b+324>>2];e=s[a+452>>2];o[c+12>>2]=0;s[c+8>>2]=v(e*k)*v(3);s[c+4>>2]=v(e*j)*v(3);s[c>>2]=v(f*e)*v(3);Pd(N,d,c+16|0,c,s[a+464>>2]);break e}o[b+348>>2]=bb(N,c+16|0,b)}d=o[a+1112>>2]}K=K+1|0;if((K|0)<(d|0)){continue}break}}ga();M=c+192|0}function Wz(a,b){var c=0,d=0,e=0,f=0,g=v(0),h=v(0),i=0,j=v(0),k=0,n=v(0),q=v(0),r=v(0),t=v(0),w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0);d=M-144|0;M=d;a:{if(!p[a+924|0]){break a}m[a+924|0]=0;Af(a);c=a+988|0;Yc(c);if(!(p[a+388|0]&16)){break a}Yc(c);if(o[a+752>>2]<1){break a}while(1){i=o[a+760>>2]+u(f,44)|0;zf(d+8|0,i,v(0));o[i+40>>2]=bb(c,d+8|0,i);f=f+1|0;if((f|0)<o[a+752>>2]){continue}break}}b=v(s[a+368>>2]*b);s[a+452>>2]=b;s[a+460>>2]=b*v(3);s[a+456>>2]=v(1)/b;f=o[a+192>>2];b=v(l[o[o[f>>2]+48>>2]](f));s[a+464>>2]=b;s[a+468>>2]=b*v(.25);i=o[a+712>>2];if((i|0)>=1){b=s[a+452>>2];f=o[a+684>>2];g=v(b*s[f+48>>2]);h=v(b*s[f+44>>2]);b=v(s[f+40>>2]*b);e=o[a+720>>2];f=0;while(1){c=e+u(f,104)|0;if(!!(s[c+88>>2]>v(0))){s[c+40>>2]=b+s[c+40>>2];s[c+44>>2]=h+s[c+44>>2];s[c+48>>2]=g+s[c+48>>2]}f=f+1|0;if((i|0)!=(f|0)){continue}break}}Vz(a);e=o[a+712>>2];if((e|0)>=1){f=0;while(1){c=o[a+720>>2]+u(f,104)|0;i=o[c+12>>2];k=o[c+8>>2];o[c+24>>2]=k;o[c+28>>2]=i;i=o[c+20>>2];o[c+32>>2]=o[c+16>>2];o[c+36>>2]=i;h=s[a+452>>2];b=v(s[o[a+684>>2]+12>>2]/h);g=v(-b);j=s[c+88>>2];n=v(v(s[c+56>>2]*j)*h);n=n>b?b:n;n=v((n<g?g:n)+s[c+40>>2]);s[c+40>>2]=n;q=v(h*v(j*s[c+60>>2]));q=q>b?b:q;q=v((q<g?g:q)+s[c+44>>2]);s[c+44>>2]=q;i=c- -64|0;h=v(h*v(j*s[i>>2]));b=h>b?b:h;g=v((b<g?g:b)+s[c+48>>2]);s[c+48>>2]=g;b=s[a+452>>2];s[c+8>>2]=v(n*b)+s[c+8>>2];s[c+12>>2]=v(q*b)+s[c+12>>2];s[c+16>>2]=v(g*b)+s[c+16>>2];o[i>>2]=0;o[i+4>>2]=0;o[c+56>>2]=0;o[c+60>>2]=0;f=f+1|0;if((e|0)!=(f|0)){continue}break}}Mi(a);f=o[a+928>>2];b:{if(f){c=o[a+192>>2];b=v(l[o[o[c>>2]+48>>2]](c));g=s[f>>2];h=s[f+4>>2];j=s[f+8>>2];o[a+904>>2]=0;s[a+900>>2]=j-b;s[a+896>>2]=h-b;s[a+892>>2]=g-b;g=s[f+20>>2];h=s[f+24>>2];j=s[f+16>>2];o[a+920>>2]=0;s[a+916>>2]=b+h;s[a+912>>2]=b+g;f=a+908|0;s[f>>2]=b+j;c=o[a+188>>2];if(!c){break b}i=o[a+684>>2];e=o[i+32>>2];l[o[o[e>>2]+16>>2]](e,c,a+892|0,f,o[i+36>>2]);break b}o[a+892>>2]=0;o[a+896>>2]=0;o[a+916>>2]=0;o[a+920>>2]=0;o[a+908>>2]=0;o[a+912>>2]=0;o[a+900>>2]=0;o[a+904>>2]=0}i=o[a+712>>2];if((i|0)>=1){e=a+928|0;f=0;while(1){c=o[a+720>>2]+u(f,104)|0;g=s[c+12>>2];h=s[c+16>>2];j=s[c+8>>2];b=s[a+464>>2];o[d+140>>2]=0;s[d+128>>2]=b+j;o[d+124>>2]=0;s[d+112>>2]=j-b;s[d+136>>2]=b+h;s[d+132>>2]=b+g;s[d+120>>2]=h-b;s[d+116>>2]=g-b;k=o[c+96>>2];g=s[c+40>>2];h=s[c+44>>2];j=s[c+48>>2];b=s[a+460>>2];o[d+20>>2]=0;s[d+16>>2]=b*j;s[d+12>>2]=b*h;s[d+8>>2]=g*b;Pd(e,k,d+112|0,d+8|0,s[a+468>>2]);f=f+1|0;if((i|0)!=(f|0)){continue}break}}i=a+988|0;if(!(!o[a+988>>2]|o[a+752>>2]<1)){f=0;while(1){c=o[a+760>>2]+u(f,44)|0;e=o[c+16>>2];g=s[e+40>>2];k=o[c+8>>2];h=s[k+40>>2];w=o[c+12>>2];j=s[w+40>>2];n=s[e+44>>2];q=s[k+44>>2];x=s[w+44>>2];y=s[e+48>>2];z=s[k+48>>2];A=s[w+48>>2];zf(d+8|0,c,s[a+464>>2]);e=o[d+36>>2];o[d+136>>2]=o[d+32>>2];o[d+140>>2]=e;e=o[d+28>>2];o[d+128>>2]=o[d+24>>2];o[d+132>>2]=e;e=o[d+20>>2];o[d+120>>2]=o[d+16>>2];o[d+124>>2]=e;e=o[d+12>>2];o[d+112>>2]=o[d+8>>2];o[d+116>>2]=e;c=o[c+40>>2];b=s[a+460>>2];o[d+20>>2]=0;s[d+16>>2]=b*v(v(y+v(z+A))*v(.3333333432674408));s[d+12>>2]=b*v(v(n+v(q+x))*v(.3333333432674408));s[d+8>>2]=b*v(v(g+v(h+j))*v(.3333333432674408));Pd(i,c,d+112|0,d+8|0,s[a+468>>2]);f=f+1|0;if((f|0)<o[a+752>>2]){continue}break}}Uz(a);c:{if(!p[a+473|0]|s[a+320>>2]>v(0)^1){break c}k=o[a+712>>2];if((k|0)<1){break c}n=s[a+576>>2];q=s[a+572>>2];x=s[a+568>>2];y=s[a+560>>2];z=s[a+556>>2];A=s[a+552>>2];C=s[a+544>>2];D=s[a+540>>2];E=s[a+536>>2];f=0;while(1){c=o[a+720>>2]+u(f,104)|0;if(!!(s[c+88>>2]>v(0))){e=o[a+492>>2]+(f<<4)|0;b=s[e+8>>2];g=s[e>>2];h=s[e+4>>2];F=s[a+520>>2];r=s[a+524>>2];j=s[a+320>>2];t=s[a+528>>2];o[c+20>>2]=0;B=s[c+16>>2];s[c+16>>2]=B+v(j*v(v(t+v(v(v(x*g)+v(q*h))+v(n*b)))-B));t=s[c+12>>2];s[c+12>>2]=t+v(j*v(v(r+v(v(v(A*g)+v(z*h))+v(y*b)))-t));r=s[c+8>>2];s[c+8>>2]=r+v(j*v(v(F+v(v(v(E*g)+v(D*h))+v(C*b)))-r))}f=f+1|0;if((k|0)!=(f|0)){continue}break}}$(d+8|0,0,104);f=o[a+812>>2];if((f|0)<=-1){if(o[a+816>>2]<=-1){c=o[a+820>>2];if(c){if(p[a+824|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+820>>2]=0}o[a+816>>2]=0;o[a+820>>2]=0;m[a+824|0]=1}while(1){k=o[d+12>>2];c=o[a+820>>2]+u(f,104)|0;o[c>>2]=o[d+8>>2];o[c+4>>2]=k;o[c+24>>2]=o[d+32>>2];e=o[d+28>>2];o[c+16>>2]=o[d+24>>2];o[c+20>>2]=e;e=o[d+20>>2];o[c+8>>2]=o[d+16>>2];o[c+12>>2]=e;e=o[d+48>>2];o[c+36>>2]=o[d+44>>2];o[c+40>>2]=e;e=o[d+40>>2];o[c+28>>2]=o[d+36>>2];o[c+32>>2]=e;e=o[d+64>>2];o[c+52>>2]=o[d+60>>2];o[c+56>>2]=e;e=o[d+56>>2];o[c+44>>2]=o[d+52>>2];o[c+48>>2]=e;e=o[d+72>>2];o[c+60>>2]=o[d+68>>2];o[c+64>>2]=e;e=o[d+80>>2];o[c+68>>2]=o[d+76>>2];o[c+72>>2]=e;e=o[d+88>>2];o[c+76>>2]=o[d+84>>2];o[c+80>>2]=e;e=o[d+96>>2];o[c+84>>2]=o[d+92>>2];o[c+88>>2]=e;e=o[d+104>>2];o[c+92>>2]=o[d+100>>2];o[c+96>>2]=e;o[c+100>>2]=o[d+108>>2];c=f+1|0;e=c>>>0>=f>>>0;f=c;if(e){continue}break}}o[a+812>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;f=o[a+832>>2];if((f|0)<=-1){if(o[a+836>>2]<=-1){c=o[a+840>>2];if(c){if(p[a+844|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+840>>2]=0}o[a+836>>2]=0;o[a+840>>2]=0;m[a+844|0]=1}while(1){k=o[d+12>>2];c=o[a+840>>2]+u(f,56)|0;o[c>>2]=o[d+8>>2];o[c+4>>2]=k;e=o[d+60>>2];o[c+48>>2]=o[d+56>>2];o[c+52>>2]=e;e=o[d+52>>2];o[c+40>>2]=o[d+48>>2];o[c+44>>2]=e;e=o[d+44>>2];o[c+32>>2]=o[d+40>>2];o[c+36>>2]=e;e=o[d+36>>2];o[c+24>>2]=o[d+32>>2];o[c+28>>2]=e;e=o[d+28>>2];o[c+16>>2]=o[d+24>>2];o[c+20>>2]=e;e=o[d+20>>2];o[c+8>>2]=o[d+16>>2];o[c+12>>2]=e;c=f+1|0;e=c>>>0>=f>>>0;f=c;if(e){continue}break}}o[a+832>>2]=0;Xc(a+928|0,1);Xc(i,1);Xc(a+1048|0,1);M=d+144|0}function we(a,b,c){var d=0,e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=0,m=0,n=0,p=v(0),q=v(0),r=0,t=0,w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=0,D=0,E=0,F=0,G=0;d=M-96|0;M=d;o[a+376>>2]=0;o[a+364>>2]=4;o[a+368>>2]=0;k=a+316|0;o[a+360>>2]=k;o[a+356>>2]=a+284;o[a+352>>2]=a+252;o[a+348>>2]=a+220;f=o[b+4>>2];o[a>>2]=o[b>>2];o[a+4>>2]=f;f=o[b+20>>2];o[a+16>>2]=o[b+16>>2];o[a+20>>2]=f;f=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=f;f=o[b+36>>2];o[a+32>>2]=o[b+32>>2];o[a+36>>2]=f;f=o[b+28>>2];o[a+24>>2]=o[b+24>>2];o[a+28>>2]=f;f=o[b+52>>2];o[a+48>>2]=o[b+48>>2];o[a+52>>2]=f;f=o[b+44>>2];o[a+40>>2]=o[b+40>>2];o[a+44>>2]=f;m=b- -64|0;n=o[m+4>>2];f=a- -64|0;o[f>>2]=o[m>>2];o[f+4>>2]=n;f=o[b+60>>2];o[a+56>>2]=o[b+56>>2];o[a+60>>2]=f;f=o[b+84>>2];o[a+80>>2]=o[b+80>>2];o[a+84>>2]=f;f=o[b+76>>2];o[a+72>>2]=o[b+72>>2];o[a+76>>2]=f;f=o[b+100>>2];o[a+96>>2]=o[b+96>>2];o[a+100>>2]=f;f=o[b+92>>2];o[a+88>>2]=o[b+88>>2];o[a+92>>2]=f;f=o[b+108>>2];o[a+104>>2]=o[b+104>>2];o[a+108>>2]=f;f=o[b+116>>2];o[a+112>>2]=o[b+112>>2];o[a+116>>2]=f;f=o[b+124>>2];b=o[b+120>>2];o[a+180>>2]=0;o[a+144>>2]=0;o[a+120>>2]=b;o[a+124>>2]=f;b=o[c+12>>2];o[a+136>>2]=o[c+8>>2];o[a+140>>2]=b;b=o[c+4>>2];o[a+128>>2]=o[c>>2];o[a+132>>2]=b;f=a+128|0;e=s[a+128>>2];i=s[a+132>>2];h=s[a+136>>2];p=v(v(v(e*e)+v(i*i))+v(h*h));a:{if(!!(p>v(0))){s[d+40>>2]=-h;s[d+36>>2]=-i;s[d+32>>2]=-e;break a}o[d+40>>2]=0;o[d+32>>2]=1065353216;o[d+36>>2]=0}o[d+44>>2]=0;o[a+364>>2]=3;o[a+164>>2]=0;o[a+180>>2]=1;o[a+148>>2]=k;Ya(a,d+32|0,k);o[a+164>>2]=1065353216;b=o[a+148>>2];c=o[b+20>>2];o[f>>2]=o[b+16>>2];o[f+4>>2]=c;c=o[b+28>>2];o[f+8>>2]=o[b+24>>2];o[f+12>>2]=c;c=o[b+28>>2];o[d+88>>2]=o[b+24>>2];o[d+92>>2]=c;c=o[b+20>>2];o[d+80>>2]=o[b+16>>2];o[d+84>>2]=c;c=o[b+28>>2];o[d+72>>2]=o[b+24>>2];o[d+76>>2]=c;c=o[b+20>>2];o[d+64>>2]=o[b+16>>2];o[d+68>>2]=c;c=o[b+28>>2];o[d+56>>2]=o[b+24>>2];o[d+60>>2]=c;c=o[b+20>>2];o[d+48>>2]=o[b+16>>2];o[d+52>>2]=c;c=o[b+28>>2];o[d+40>>2]=o[b+24>>2];o[d+44>>2]=c;c=o[b+20>>2];o[d+32>>2]=o[b+16>>2];o[d+36>>2]=c;e=s[a+136>>2];i=s[a+132>>2];h=s[a+128>>2];k=o[a+368>>2];b:{c:{d:{while(1){q=v(C(v(v(v(h*h)+v(i*i))+v(e*e))));if(!!(q<v(9999999747378752e-20))){o[a+376>>2]=1;break d}o[d+28>>2]=0;s[d+24>>2]=-e;s[d+20>>2]=-i;s[d+16>>2]=-h;c=u(k,36)+a|0;m=c+148|0;b=o[c+180>>2];n=m+(b<<2)|0;o[n+16>>2]=0;l=o[a+364>>2]+ -1|0;o[a+364>>2]=l;r=n;n=o[((l<<2)+a|0)+348>>2];o[r>>2]=n;o[c+180>>2]=b+1;Ya(a,d+16|0,n);e:{l=o[c+180>>2];b=o[(m+(l<<2)|0)+ -4>>2];e=s[b+16>>2];i=v(e-s[d+32>>2]);g=v(i*i);i=s[b+20>>2];h=v(i-s[d+36>>2]);j=v(g+v(h*h));h=s[b+24>>2];g=v(h-s[d+40>>2]);if(v(j+v(g*g))<v(9999999747378752e-20)){break e}g=v(e-s[d+48>>2]);j=v(g*g);g=v(i-s[d+52>>2]);j=v(j+v(g*g));g=v(h-s[d+56>>2]);if(!!(v(j+v(g*g))<v(9999999747378752e-20))){break e}g=v(e-s[d+64>>2]);j=v(g*g);g=v(i-s[d+68>>2]);j=v(j+v(g*g));g=v(h-s[d+72>>2]);if(v(j+v(g*g))<v(9999999747378752e-20)){break e}g=v(e-s[d+80>>2]);j=v(g*g);g=v(i-s[d+84>>2]);j=v(j+v(g*g));g=v(h-s[d+88>>2]);if(v(j+v(g*g))<v(9999999747378752e-20)){break e}w=o[b+28>>2];B=B+1&3;n=(d+32|0)+(B<<4)|0;o[n+8>>2]=o[b+24>>2];o[n+12>>2]=w;r=o[b+20>>2];o[n>>2]=o[b+16>>2];o[n+4>>2]=r;e=v(v(v(v(s[a+128>>2]*e)+v(s[a+132>>2]*i))+v(s[a+136>>2]*h))/q);x=e>x?e:x;if(!!(v(v(q-x)+v(q*v(-9999999747378752e-20)))<=v(0))){k=o[a+368>>2];c=u(k,36)+a|0;b=o[c+180>>2]+ -1|0;o[c+180>>2]=b;b=o[(c+(b<<2)|0)+148>>2];c=o[a+364>>2];o[a+364>>2]=c+1;o[((c<<2)+a|0)+348>>2]=b;break d}o[d+12>>2]=0;f:{g:{h:{i:{switch(l+ -2|0){case 0:b=o[c+152>>2];y=s[b+16>>2];m=o[m>>2];p=s[m+16>>2];q=v(y-p);z=s[b+20>>2];i=s[m+20>>2];g=v(z-i);A=s[b+24>>2];h=s[m+24>>2];j=v(A-h);e=v(v(v(q*q)+v(g*g))+v(j*j));if(!(e>v(0))){break g}e=v(v(-v(v(v(p*q)+v(i*g))+v(h*j)))/e);if(!!(e>=v(1))){o[d+16>>2]=0;o[d+20>>2]=1065353216;o[d+12>>2]=2;p=v(v(v(y*y)+v(z*z))+v(A*A));break h}if(!!(e<=v(0))){o[d+16>>2]=1065353216;o[d+20>>2]=0;o[d+12>>2]=1;p=v(v(v(p*p)+v(i*i))+v(h*h));break h}o[d+12>>2]=3;s[d+20>>2]=e;s[d+16>>2]=v(1)-e;h=v(h+v(j*e));p=v(p+v(q*e));e=v(i+v(g*e));p=v(v(h*h)+v(v(p*p)+v(e*e)));break h;case 1:p=Bg(o[m>>2]+16|0,o[c+152>>2]+16|0,o[c+156>>2]+16|0,d+16|0,d+12|0);break h;case 2:break i;default:break h}}p=Nl(o[m>>2]+16|0,o[c+152>>2]+16|0,o[c+156>>2]+16|0,o[c+160>>2]+16|0,d+16|0,d+12|0)}if(!(p>=v(0))){break g}b=0;k=1-k|0;r=u(k,36)+a|0;m=r;o[m+180>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[a+368>>2]=k;e=v(0);n=o[d+12>>2];i=v(0);h=v(0);w=o[c+180>>2];if(!w){break f}while(1){t=b<<2;D=t+c|0;l=o[D+148>>2];j:{if(n>>>b&1){E=o[m+180>>2];F=(E<<2)+r|0;o[F+148>>2]=l;l=t+(d+16|0)|0;e=s[l>>2];l=o[l>>2];o[m+180>>2]=E+1;o[F+164>>2]=l;l=o[D+148>>2];q=s[l+24>>2];i=s[l+20>>2];h=v(v(s[l+16>>2]*e)+s[a+128>>2]);s[a+128>>2]=h;i=v(v(i*e)+s[a+132>>2]);s[a+132>>2]=i;e=v(v(q*e)+s[a+136>>2]);s[a+136>>2]=e;break j}t=o[a+364>>2];o[a+364>>2]=t+1;o[((t<<2)+a|0)+348>>2]=l}b=b+1|0;if((w|0)!=(b|0)){continue}break}break f}k=o[a+368>>2];c=u(k,36)+a|0;b=o[c+180>>2]+ -1|0;o[c+180>>2]=b;b=o[(c+(b<<2)|0)+148>>2];c=o[a+364>>2];o[a+364>>2]=c+1;o[((c<<2)+a|0)+348>>2]=b;break d}if((n|0)==15){o[a+376>>2]=1}if((G|0)==127){b=2;o[a+376>>2]=2;o[a+372>>2]=(u(k,36)+a|0)+148;break b}G=G+1|0;b=o[a+376>>2];if(!b){continue}break c}break}k=o[a+368>>2];c=u(k,36)+a|0;b=o[c+180>>2]+ -1|0;o[c+180>>2]=b;b=o[(c+(b<<2)|0)+148>>2];c=o[a+364>>2];o[a+364>>2]=c+1;o[((c<<2)+a|0)+348>>2]=b}b=o[a+376>>2]}o[a+372>>2]=(u(k,36)+a|0)+148;k:{switch(b|0){case 0:e=s[a+128>>2];g=v(e*e);e=s[a+132>>2];g=v(g+v(e*e));e=s[a+136>>2];s[a+144>>2]=C(v(g+v(e*e)));b=0;break b;case 1:break k;default:break b}}o[a+144>>2]=0;b=1}M=d+96|0;return b}function kL(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=v(0),n=v(0),q=v(0),r=v(0),t=0,u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=v(0),C=0,D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=0,J=0,K=v(0);a=M-4240|0;M=a;J=o[c+4>>2]+ -17>>>0<=1?o[d+4>>2]+ -17>>>0<2:J;while(1){re();x=s[e+32>>2];y=s[e+16>>2];z=s[e>>2];w=s[e+36>>2];D=s[e+20>>2];B=s[e+4>>2];k=s[e+40>>2];n=s[e+24>>2];E=s[e+8>>2];A=C<<4;t=A+(a+1264|0)|0;o[t+12>>2]=0;r=s[A+26964>>2];q=v(-r);G=v(n*q);n=s[A+26960>>2];F=k;k=s[A+26968>>2];s[t+8>>2]=v(G-v(E*n))-v(F*k);s[t+4>>2]=v(v(D*q)-v(n*B))-v(k*w);s[t>>2]=v(v(y*q)-v(n*z))-v(k*x);q=s[f+40>>2];x=s[f+8>>2];y=s[f+24>>2];z=s[f+36>>2];w=s[f+4>>2];D=s[f+20>>2];B=s[f+32>>2];E=s[f>>2];F=s[f+16>>2];A=A+(a+272|0)|0;o[A+12>>2]=0;s[A>>2]=v(v(n*E)+v(r*F))+v(k*B);s[A+4>>2]=v(v(n*w)+v(r*D))+v(k*z);s[A+8>>2]=v(v(n*x)+v(r*y))+v(k*q);C=C+1|0;if((C|0)!=42){continue}break}A=42;I=l[o[o[c>>2]+84>>2]](c)|0;if((I|0)>=1){C=0;while(1){l[o[o[c>>2]+88>>2]](c,C,a+3248|0);q=s[e+8>>2];x=s[e>>2];y=s[e+4>>2];z=s[e+24>>2];w=s[e+16>>2];D=s[e+20>>2];r=s[e+40>>2];n=s[e+32>>2];k=s[e+36>>2];o[a+3260>>2]=0;F=n;n=s[a+3248>>2];B=k;k=s[a+3252>>2];E=r;r=s[a+3256>>2];s[a+3256>>2]=v(v(F*n)+v(B*k))+v(E*r);s[a+3252>>2]=v(v(n*w)+v(k*D))+v(r*z);s[a+3248>>2]=v(v(x*n)+v(y*k))+v(q*r);re();H=o[a+3260>>2];t=A<<4;u=t+26968|0;o[u>>2]=o[a+3256>>2];o[u+4>>2]=H;H=o[a+3252>>2];u=t+26960|0;o[u>>2]=o[a+3248>>2];o[u+4>>2]=H;x=s[e+40>>2];y=s[e+24>>2];z=s[e+8>>2];w=s[e+36>>2];D=s[e+20>>2];B=s[e+4>>2];k=s[e+32>>2];n=s[e+16>>2];E=s[e>>2];u=t+(a+1264|0)|0;o[u+12>>2]=0;r=s[a+3252>>2];q=v(-r);G=v(n*q);n=s[a+3248>>2];F=k;k=s[a+3256>>2];s[u>>2]=v(G-v(E*n))-v(F*k);s[u+4>>2]=v(v(D*q)-v(n*B))-v(k*w);s[u+8>>2]=v(v(y*q)-v(n*z))-v(k*x);q=s[f+32>>2];x=s[f>>2];y=s[f+16>>2];z=s[f+36>>2];w=s[f+4>>2];D=s[f+20>>2];B=s[f+40>>2];E=s[f+8>>2];F=s[f+24>>2];t=t+(a+272|0)|0;o[t+12>>2]=0;s[t+8>>2]=v(v(n*E)+v(r*F))+v(k*B);s[t+4>>2]=v(v(n*w)+v(r*D))+v(k*z);s[t>>2]=v(v(n*x)+v(r*y))+v(k*q);A=A+1|0;C=C+1|0;if((I|0)!=(C|0)){continue}break}}I=l[o[o[d>>2]+84>>2]](d)|0;if((I|0)>=1){C=0;while(1){l[o[o[d>>2]+88>>2]](d,C,a+3248|0);q=s[f+8>>2];x=s[f>>2];y=s[f+4>>2];z=s[f+24>>2];w=s[f+16>>2];D=s[f+20>>2];r=s[f+40>>2];n=s[f+32>>2];k=s[f+36>>2];o[a+3260>>2]=0;F=n;n=s[a+3248>>2];B=k;k=s[a+3252>>2];E=r;r=s[a+3256>>2];s[a+3256>>2]=v(v(F*n)+v(B*k))+v(E*r);s[a+3252>>2]=v(v(n*w)+v(k*D))+v(r*z);s[a+3248>>2]=v(v(x*n)+v(y*k))+v(q*r);re();H=o[a+3260>>2];t=A<<4;u=t+26968|0;o[u>>2]=o[a+3256>>2];o[u+4>>2]=H;H=o[a+3252>>2];u=t+26960|0;o[u>>2]=o[a+3248>>2];o[u+4>>2]=H;x=s[e+40>>2];y=s[e+24>>2];z=s[e+8>>2];w=s[e+36>>2];D=s[e+20>>2];B=s[e+4>>2];k=s[e+32>>2];n=s[e+16>>2];E=s[e>>2];u=t+(a+1264|0)|0;o[u+12>>2]=0;r=s[a+3252>>2];q=v(-r);G=v(n*q);n=s[a+3248>>2];F=k;k=s[a+3256>>2];s[u>>2]=v(G-v(E*n))-v(F*k);s[u+4>>2]=v(v(D*q)-v(n*B))-v(k*w);s[u+8>>2]=v(v(y*q)-v(n*z))-v(k*x);q=s[f+32>>2];x=s[f>>2];y=s[f+16>>2];z=s[f+36>>2];w=s[f+4>>2];D=s[f+20>>2];B=s[f+40>>2];E=s[f+8>>2];F=s[f+24>>2];t=t+(a+272|0)|0;o[t+12>>2]=0;s[t+8>>2]=v(v(n*E)+v(r*F))+v(k*B);s[t+4>>2]=v(v(n*w)+v(r*D))+v(k*z);s[t>>2]=v(v(n*x)+v(r*y))+v(k*q);A=A+1|0;C=C+1|0;if((I|0)!=(C|0)){continue}break}}l[o[o[c>>2]+76>>2]](c,a+1264|0,a+3248|0,A);l[o[o[d>>2]+76>>2]](d,a+272|0,a+2256|0,A);a:{if((A|0)<1){q=v(0xde0b6b000000000);n=v(0);k=v(0);r=v(0);D=v(0);break a}C=0;q=v(0xde0b6b000000000);D=v(0);r=v(0);k=v(0);n=v(0);while(1){re();t=C<<4;x=s[t+26960>>2];y=s[t+26964>>2];z=J?v(0):s[t+26968>>2];b:{if(!(+v(v(v(x*x)+v(y*y))+v(z*z))>.01)){break b}u=t+(a+2256|0)|0;w=s[u>>2];B=s[u+4>>2];E=s[u+8>>2];u=t+(a+3248|0)|0;F=s[u>>2];G=s[u+4>>2];K=s[u+8>>2];w=v(v(v(x*v(v(v(v(v(w*s[f>>2])+v(B*s[f+4>>2]))+v(E*s[f+8>>2]))+s[f+48>>2])-v(v(v(v(F*s[e>>2])+v(G*s[e+4>>2]))+v(K*s[e+8>>2]))+s[e+48>>2])))+v(y*v(v(v(v(v(w*s[f+16>>2])+v(B*s[f+20>>2]))+v(E*s[f+24>>2]))+s[f+52>>2])-v(v(v(v(F*s[e+16>>2])+v(G*s[e+20>>2]))+v(K*s[e+24>>2]))+s[e+52>>2]))))+v(z*(J?v(0):v(v(v(v(v(w*s[f+32>>2])+v(B*s[f+36>>2]))+v(E*s[f+40>>2]))+s[f+56>>2])-v(v(v(v(F*s[e+32>>2])+v(G*s[e+36>>2]))+v(K*s[e+40>>2]))+s[e+56>>2])))));if(!(w<q)){break b}D=s[t+26972>>2];n=x;k=y;r=z;q=w}C=C+1|0;if((C|0)!=(A|0)){continue}break}}cc(c);cc(d);A=0;if(!(q<v(0))){x=cc(c);y=cc(d);b=wg(a+192|0,c,d,b,0);z=s[e+52>>2];w=s[e+56>>2];B=s[e+48>>2];d=o[e+12>>2];c=a- -64|0;o[c>>2]=o[e+8>>2];o[c+4>>2]=d;c=o[e+4>>2];o[a+56>>2]=o[e>>2];o[a+60>>2]=c;c=o[e+28>>2];o[a+80>>2]=o[e+24>>2];o[a+84>>2]=c;c=o[e+20>>2];o[a+72>>2]=o[e+16>>2];o[a+76>>2]=c;c=o[e+40>>2];d=o[e+44>>2];C=o[e+32>>2];e=o[e+36>>2];o[a+116>>2]=0;q=v(q+v(v(x+y)+v(.5)));s[a+112>>2]=w+v(r*q);s[a+108>>2]=z+v(k*q);o[a+96>>2]=c;o[a+100>>2]=d;s[a+104>>2]=B+v(n*q);o[a+88>>2]=C;o[a+92>>2]=e;c=o[f+12>>2];o[a+128>>2]=o[f+8>>2];o[a+132>>2]=c;c=o[f+4>>2];o[a+120>>2]=o[f>>2];o[a+124>>2]=c;c=o[f+28>>2];o[a+144>>2]=o[f+24>>2];o[a+148>>2]=c;c=o[f+20>>2];o[a+136>>2]=o[f+16>>2];o[a+140>>2]=c;c=o[f+44>>2];o[a+160>>2]=o[f+40>>2];o[a+164>>2]=c;c=o[f+36>>2];o[a+152>>2]=o[f+32>>2];o[a+156>>2]=c;c=o[f+60>>2];o[a+176>>2]=o[f+56>>2];o[a+180>>2]=c;c=o[f+52>>2];o[a+168>>2]=o[f+48>>2];o[a+172>>2]=c;o[a+184>>2]=1566444395;m[a+48|0]=0;o[a+8>>2]=4716;o[b+16>>2]=0;s[b+12>>2]=-r;s[b+8>>2]=-k;s[b+4>>2]=-n;fb(b,a+56|0,a+8|0,j,0);b=p[a+48|0];if(b){x=s[a+44>>2];y=s[a+32>>2];z=s[a+36>>2];w=s[a+28>>2];o[h+12>>2]=0;q=v(q-x);s[h>>2]=w-v(n*q);s[h+8>>2]=z-v(r*q);s[h+4>>2]=y-v(k*q);c=o[a+40>>2];o[i+8>>2]=o[a+36>>2];o[i+12>>2]=c;c=o[a+32>>2];o[i>>2]=o[a+28>>2];o[i+4>>2]=c;s[g+12>>2]=D;s[g+8>>2]=r;s[g+4>>2]=k;s[g>>2]=n}A=(b|0)!=0}M=a+4240|0;return A|0}



function Zm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=M-800|0;M=f;o[f+796>>2]=a;o[f+792>>2]=b;o[f+788>>2]=c;o[f+784>>2]=d;o[f+780>>2]=e;a=o[f+796>>2];b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+744|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+760|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+792>>2];h=f+712|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+728|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+680|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+696|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+792>>2];h=f+648|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+664|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+616|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+632|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+792>>2];h=f+584|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+600|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+552|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+568|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+792>>2];h=f+520|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+536|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+488|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+504|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+456|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+472|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+424|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+440|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+392|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+408|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+360|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+376|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+328|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+344|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+792>>2];g=f+296|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+312|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+264|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+280|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+788>>2];g=f+232|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+248|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+200|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+216|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+788>>2];g=f+168|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+184|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+136|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+152|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+788>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+788>>2];g=f+104|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+120|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+788>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+72|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+88|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);b=o[f+784>>2];c=M-16|0;o[c+12>>2]=o[f+792>>2];c=o[c+12>>2];d=M-16|0;o[d+12>>2]=o[f+788>>2];d=o[d+12>>2]+4|0;e=M-16|0;o[e+12>>2]=o[f+788>>2];g=f+40|0;Y(g,c,d,o[e+12>>2]+8|0);c=f+56|0;ka(c,b,g);b=o[f+784>>2];d=M-16|0;o[d+12>>2]=o[f+792>>2];d=o[d+12>>2];e=M-16|0;o[e+12>>2]=o[f+792>>2];e=o[e+12>>2]+4|0;g=M-16|0;o[g+12>>2]=o[f+788>>2];h=f+8|0;Y(h,d,e,o[g+12>>2]+8|0);d=f+24|0;ka(d,b,h);l[o[o[a>>2]+8>>2]](a,c,d,o[f+780>>2]);M=f+800|0}function Yk(a){var b=0,c=0,d=0,e=0,f=v(0),i=v(0),j=0,k=v(0),t=v(0),x=v(0),y=0,z=v(0),A=0,B=v(0),D=v(0),E=0,F=v(0),G=0,H=0,I=0,J=v(0),K=0,L=v(0),N=0,O=0,P=0,Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0);d=M-96|0;M=d;m[d+52|0]=1;o[d+48>>2]=0;m[d+72|0]=1;o[d+40>>2]=0;o[d+44>>2]=0;o[d+68>>2]=0;m[d+92|0]=1;o[d+60>>2]=0;o[d+64>>2]=0;o[d+88>>2]=0;o[d+80>>2]=0;o[d+84>>2]=0;o[d+28>>2]=0;m[d+32|0]=1;o[d+20>>2]=0;o[d+24>>2]=0;o[a+72>>2]=0;o[a+76>>2]=0;o[a+64>>2]=0;o[a+68>>2]=0;c=o[a+28>>2];a:{if((c|0)<1){break a}while(1){b=o[a+36>>2];N=u(y,36);O=o[(b+N|0)+4>>2];if((O|0)>=1){G=0;while(1){c=o[(b+N|0)+12>>2];b=o[c+(G<<2)>>2];G=G+1|0;I=(O|0)==(G|0);j=o[c+((I?0:G)<<2)>>2];n[d+10>>1]=j;n[d+8>>1]=b;H=0;e=j<<16>>16;c=b<<16>>16;if((e|0)>(c|0)){n[d+10>>1]=b;n[d+8>>1]=j;e=b;c=j}j=e<<16;A=c<<16>>16;b=j+A&o[d+64>>2]+ -1;b:{if(b>>>0>=r[d+20>>2]){break b}b=o[o[d+28>>2]+(b<<2)>>2];if((b|0)==-1){break b}E=o[d+48>>2];K=o[d+88>>2];while(1){b=b<<2;P=b+K|0;if(!(q[P+2>>1]==(e&65535)?q[P>>1]==(c&65535):0)){b=o[b+E>>2];if((b|0)!=-1){continue}break b}break}H=b+o[d+68>>2]|0}e=o[a+16>>2];c=e+(j>>16<<4)|0;e=e+(A<<4)|0;f=v(s[c+8>>2]-s[e+8>>2]);i=v(s[c>>2]-s[e>>2]);k=v(s[c+4>>2]-s[e+4>>2]);x=v(v(1)/v(C(v(v(v(i*i)+v(k*k))+v(f*f)))));f=v(f*x);k=v(k*x);i=v(i*x);c=o[a+48>>2];c:{if((c|0)>=1){j=o[a+56>>2];b=0;while(1){e=j+(b<<4)|0;x=s[e+8>>2];B=s[e>>2];z=s[e+4>>2];if((+v(w(v(x-f)))>1e-6^1?!(+v(w(v(B-i)))>1e-6|+v(w(v(z-k)))>1e-6):0)|(+v(w(v(f+x)))>1e-6^1?!(+v(w(v(i+B)))>1e-6|+v(w(v(k+z)))>1e-6):0)){break c}b=b+1|0;if((b|0)<(c|0)){continue}break}}d:{if(o[a+52>>2]!=(c|0)){break d}e=c?c<<1:1;if((c|0)>=(e|0)){break d}b=0;j=0;if(e){o[7717]=o[7717]+1;j=l[o[6606]](e<<4,16)|0;c=o[a+48>>2]}if((c|0)>=1){while(1){A=b<<4;E=A+j|0;A=A+o[a+56>>2]|0;P=o[A+4>>2];o[E>>2]=o[A>>2];o[E+4>>2]=P;K=o[A+12>>2];o[E+8>>2]=o[A+8>>2];o[E+12>>2]=K;b=b+1|0;if((c|0)!=(b|0)){continue}break}}c=o[a+56>>2];if(c){if(p[a+60|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+56>>2]=0}o[a+56>>2]=j;m[a+60|0]=1;o[a+52>>2]=e;c=o[a+48>>2]}c=o[a+56>>2]+(c<<4)|0;o[c+12>>2]=0;s[c+8>>2]=f;s[c+4>>2]=k;s[c>>2]=i;o[a+48>>2]=o[a+48>>2]+1}e:{if(H){n[H+2>>1]=y;break e}n[d>>1]=y;n[d+2>>1]=65535;dI(d+16|0,d+8|0,d)}if(!I){b=o[a+36>>2];continue}break}c=o[a+28>>2]}y=y+1|0;if((y|0)<(c|0)){continue}break}j=0;if((c|0)<1){break a}j=(c|0)>0;e=o[a+16>>2];N=o[a+36>>2];y=0;while(1){b=N+u(y,36)|0;G=o[b+4>>2];if((G|0)>=3){O=G+ -1|0;H=o[b+12>>2];A=e+(o[H>>2]<<4)|0;K=A;i=s[a+72>>2];x=s[a+68>>2];z=s[a+64>>2];b=1;while(1){I=e+(o[H+(b<<2)>>2]<<4)|0;f=s[I+8>>2];b=b+1|0;E=e+(o[H+((b|0)%(G|0)<<2)>>2]<<4)|0;k=s[E+8>>2];B=s[A>>2];Q=s[I>>2];R=v(B-Q);t=s[A+4>>2];S=s[E+4>>2];L=v(t-S);T=s[I+4>>2];F=v(t-T);U=s[E>>2];V=v(B-U);J=v(v(R*L)-v(F*V));Y=F;F=s[K+8>>2];W=v(F-k);X=v(F-f);L=v(v(Y*W)-v(X*L));k=v(v(v(F+f)+k)*v(.3333333432674408));f=v(v(X*V)-v(R*W));f=v(v(C(v(v(J*J)+v(v(L*L)+v(f*f)))))*v(.5));i=v(i+v(k*f));s[a+72>>2]=i;x=v(x+v(v(v(S+v(t+T))*v(.3333333432674408))*f));s[a+68>>2]=x;z=v(z+v(v(v(U+v(B+Q))*v(.3333333432674408))*f));s[a+64>>2]=z;D=v(D+f);if((b|0)!=(O|0)){continue}break}}y=y+1|0;if((y|0)!=(c|0)){continue}break}}o[a+96>>2]=2139095039;f=v(v(1)/D);x=v(f*s[a+64>>2]);s[a+64>>2]=x;z=v(f*s[a+68>>2]);s[a+68>>2]=z;D=v(f*s[a+72>>2]);s[a+72>>2]=D;f=v(3.4028234663852886e+38);k=v(3.4028234663852886e+38);if(j){j=o[a+36>>2];e=0;while(1){b=j+u(e,36)|0;i=v(w(v(s[b+32>>2]+v(v(v(x*s[b+20>>2])+v(z*s[b+24>>2]))+v(D*s[b+28>>2])))));if(!!(i<k)){s[a+96>>2]=i;k=i}e=e+1|0;if((e|0)!=(c|0)){continue}break}}e=o[a+8>>2];f:{if((e|0)<1){B=v(-3.4028234663852886e+38);i=v(3.4028234663852886e+38);x=v(-3.4028234663852886e+38);z=v(-3.4028234663852886e+38);D=v(3.4028234663852886e+38);break f}j=o[a+16>>2];z=v(-3.4028234663852886e+38);b=0;D=v(3.4028234663852886e+38);x=v(-3.4028234663852886e+38);B=v(-3.4028234663852886e+38);i=v(3.4028234663852886e+38);while(1){c=j+(b<<4)|0;t=s[c+8>>2];z=t>z?t:z;i=t<i?t:i;t=s[c+4>>2];x=t>x?t:x;f=t<f?t:f;t=s[c>>2];B=t>B?t:B;D=t<D?t:D;b=b+1|0;if((e|0)!=(b|0)){continue}break}}b=0;o[a+128>>2]=0;t=v(z-i);s[a+124>>2]=t;J=v(x-f);s[a+120>>2]=J;F=v(B-D);s[a+116>>2]=F;o[a+112>>2]=0;s[a+108>>2]=i+z;s[a+104>>2]=f+x;s[a+100>>2]=B+D;c=F<J?J<t?2:1:(F<t)<<1;e=c<<2;j=e+(a+116|0)|0;i=s[j>>2];f=v(k/v(1.7320507764816284));s[a+84>>2]=f;s[a+88>>2]=f;s[a+80>>2]=f;e=e+(a+80|0)|0;k=v(s[j>>2]*v(.5));s[e>>2]=k;i=v(v(v(i*v(.5))-f)*v(.0009765625));g:{h:{while(1){if(eg(a)){break h}k=v(k-i);s[e>>2]=k;b=b+1|0;if((b|0)!=1024){continue}break}s[a+84>>2]=f;s[a+88>>2]=f;s[a+80>>2]=f;break g}e=a+80|0;c=1<<c&3;b=e+((1<<c&3)<<2)|0;j=o[b>>2];y=e+(c<<2)|0;c=y;e=o[c>>2];i=v(v(s[a+96>>2]-f)*v(.0009765625));s[c>>2]=i+s[c>>2];f=v(i+s[b>>2]);s[b>>2]=f;if(eg(a)){c=0;while(1){k=f;c=c+1|0;if((c|0)==1024){break g}e=o[y>>2];s[y>>2]=i+s[y>>2];f=v(i+s[b>>2]);s[b>>2]=f;if(eg(a)){continue}break}j=(g(k),h(0))}o[y>>2]=e;o[b>>2]=j}a=o[d+88>>2];if(a){if(p[d+92|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+88>>2]=0}o[d+88>>2]=0;m[d+92|0]=1;o[d+80>>2]=0;o[d+84>>2]=0;a=o[d+68>>2];if(a){if(p[d+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+68>>2]=0}o[d+68>>2]=0;m[d+72|0]=1;o[d+60>>2]=0;o[d+64>>2]=0;a=o[d+48>>2];if(a){if(p[d+52|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+48>>2]=0}o[d+48>>2]=0;m[d+52|0]=1;o[d+40>>2]=0;o[d+44>>2]=0;a=o[d+28>>2];if(a){if(p[d+32|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+28>>2]=0}M=d+96|0}function DB(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,n=v(0),q=v(0),r=0,t=0,w=0,x=0,y=0;a:{if(!(m[i+64|0]&1)){break a}j=o[a+68>>2];t=o[a+28>>2];r=o[a+48>>2];if((r|0)>=1){f=u(o[a+192>>2],1664525)+1013904223|0;b:{if((r|0)==1){break b}c=2;e=o[a+136>>2];d=o[e+4>>2];f=u(f,1664525)+1013904223|0;k=f^f>>>16;k=k>>>8^k;k=k>>>4^k;k=k>>>2^k;k=e+(((k>>>1^k)&1)<<2)|0;o[e+4>>2]=o[k>>2];o[k>>2]=d;if((r|0)==2){break b}while(1){d=c;c=d+1|0;k=e+(d<<2)|0;y=o[k>>2];x=k;f=u(f,1664525)+1013904223|0;k=f;c:{if(d>>>0>65535){break c}w=f>>>16^f;k=w;if(d>>>0>255){break c}w=w^w>>>8;k=w;if(d>>>0>15){break c}w=w^w>>>4;k=w;if(d>>>0>3){break c}k=w^w>>>2}d=((k>>>0)%(c>>>0)<<2)+e|0;o[x>>2]=o[d>>2];o[d>>2]=y;if((c|0)!=(r|0)){continue}break}}o[a+192>>2]=f}if(o[i+20>>2]<=(b|0)){break a}if((t|0)>=1){f=u(o[a+192>>2],1664525)+1013904223|0;d:{if((t|0)==1){break d}c=2;e=o[a+116>>2];d=o[e+4>>2];f=u(f,1664525)+1013904223|0;k=f^f>>>16;k=k>>>8^k;k=k>>>4^k;k=k>>>2^k;k=e+(((k>>>1^k)&1)<<2)|0;o[e+4>>2]=o[k>>2];o[k>>2]=d;if((t|0)==2){break d}while(1){d=c;c=d+1|0;k=e+(d<<2)|0;w=o[k>>2];x=k;f=u(f,1664525)+1013904223|0;k=f;e:{if(d>>>0>65535){break e}r=f>>>16^f;k=r;if(d>>>0>255){break e}r=r^r>>>8;k=r;if(d>>>0>15){break e}r=r^r>>>4;k=r;if(d>>>0>3){break e}k=r^r>>>2}d=((k>>>0)%(c>>>0)<<2)+e|0;o[x>>2]=o[d>>2];o[d>>2]=w;if((c|0)!=(t|0)){continue}break}}o[a+192>>2]=f}if((j|0)<1){break a}f=u(o[a+192>>2],1664525)+1013904223|0;f:{if((j|0)==1){break f}c=2;e=o[a+156>>2];d=o[e+4>>2];f=u(f,1664525)+1013904223|0;k=f^f>>>16;k=k>>>8^k;k=k>>>4^k;k=k>>>2^k;k=e+(((k>>>1^k)&1)<<2)|0;o[e+4>>2]=o[k>>2];o[k>>2]=d;if((j|0)==2){break f}while(1){d=c;c=d+1|0;k=e+(d<<2)|0;r=o[k>>2];w=k;f=u(f,1664525)+1013904223|0;k=f;g:{if(d>>>0>65535){break g}t=f>>>16^f;k=t;if(d>>>0>255){break g}t=t^t>>>8;k=t;if(d>>>0>15){break g}t=t^t>>>4;k=t;if(d>>>0>3){break g}k=t^t>>>2}d=((k>>>0)%(c>>>0)<<2)+e|0;o[w>>2]=o[d>>2];o[d>>2]=r;if((c|0)!=(j|0)){continue}break}}o[a+192>>2]=f}c=o[a+48>>2];h:{i:{if(m[i+65|0]&1){if((c|0)>=1){d=0;while(1){e=o[a+56>>2]+u(o[o[a+136>>2]+(d<<2)>>2],152)|0;if(o[e+136>>2]>(b|0)){c=o[a+16>>2];pb(c+u(o[e+144>>2],244)|0,c+u(o[e+148>>2],244)|0,e);c=o[a+48>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}if(o[i+20>>2]<=(b|0)){break h}if((h|0)>=1){c=0;while(1){b=(c<<2)+g|0;d=o[b>>2];if(p[d+20|0]){d=$a(a,o[d+28>>2],s[i+12>>2]);e=$a(a,o[o[b>>2]+32>>2],s[i+12>>2]);b=o[b>>2];f=u(d,244);d=o[a+16>>2];l[o[o[b>>2]+24>>2]](b,f+d|0,d+u(e,244)|0,s[i+12>>2])}c=c+1|0;if((h|0)!=(c|0)){continue}break}}d=o[a+28>>2];b=o[i+64>>2];if(b&512){break i}if((d|0)>=1){c=0;while(1){e=o[a+16>>2];b=o[a+36>>2]+u(o[o[a+116>>2]+(c<<2)>>2],152)|0;Ff(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b);c=c+1|0;if((d|0)!=(c|0)){continue}break}}c=o[a+68>>2];if((c|0)>=1){d=0;while(1){b=o[a+76>>2]+u(o[o[a+156>>2]+(d<<2)>>2],152)|0;n=s[(o[a+36>>2]+u(o[b+140>>2],152)|0)+100>>2];if(!!(n>v(0))){q=s[b+104>>2];s[b+124>>2]=n*q;s[b+120>>2]=n*v(-q);e=o[a+16>>2];pb(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b)}d=d+1|0;if((c|0)!=(d|0)){continue}break}}c=o[a+88>>2];if((c|0)<1){break h}d=0;while(1){b=o[a+96>>2]+u(d,152)|0;n=s[(o[a+36>>2]+u(o[b+140>>2],152)|0)+100>>2];if(!!(n>v(0))){q=n;n=s[b+104>>2];q=v(q*n);n=q>n?n:q;s[b+124>>2]=n;s[b+120>>2]=-n;e=o[a+16>>2];pb(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b)}d=d+1|0;if((c|0)!=(d|0)){continue}break}break h}if((c|0)>=1){d=0;while(1){e=o[a+56>>2]+u(o[o[a+136>>2]+(d<<2)>>2],152)|0;if(o[e+136>>2]>(b|0)){c=o[a+16>>2];pb(c+u(o[e+144>>2],244)|0,c+u(o[e+148>>2],244)|0,e);c=o[a+48>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}if(o[i+20>>2]<=(b|0)){break h}if((h|0)>=1){c=0;while(1){b=(c<<2)+g|0;d=o[b>>2];if(p[d+20|0]){d=$a(a,o[d+28>>2],s[i+12>>2]);e=$a(a,o[o[b>>2]+32>>2],s[i+12>>2]);b=o[b>>2];f=u(d,244);d=o[a+16>>2];l[o[o[b>>2]+24>>2]](b,f+d|0,d+u(e,244)|0,s[i+12>>2])}c=c+1|0;if((h|0)!=(c|0)){continue}break}}d=o[a+28>>2];if((d|0)>=1){c=0;while(1){e=o[a+16>>2];b=o[a+36>>2]+u(o[o[a+116>>2]+(c<<2)>>2],152)|0;Ff(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b);c=c+1|0;if((d|0)!=(c|0)){continue}break}}c=o[a+68>>2];if((c|0)>=1){d=0;while(1){b=o[a+76>>2]+u(o[o[a+156>>2]+(d<<2)>>2],152)|0;n=s[(o[a+36>>2]+u(o[b+140>>2],152)|0)+100>>2];if(!!(n>v(0))){q=s[b+104>>2];s[b+124>>2]=n*q;s[b+120>>2]=n*v(-q);e=o[a+16>>2];pb(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b)}d=d+1|0;if((c|0)!=(d|0)){continue}break}}c=o[a+88>>2];if((c|0)<1){break h}d=0;while(1){b=o[a+96>>2]+u(d,152)|0;n=s[(o[a+36>>2]+u(o[b+140>>2],152)|0)+100>>2];if(!!(n>v(0))){q=n;n=s[b+104>>2];q=v(q*n);n=q>n?n:q;s[b+124>>2]=n;s[b+120>>2]=-n;e=o[a+16>>2];pb(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b)}d=d+1|0;if((c|0)!=(d|0)){continue}break}break h}if((d|0)<1){break h}f=b&16?2:1;c=0;while(1){e=o[a+16>>2];b=o[a+36>>2]+u(o[o[a+116>>2]+(c<<2)>>2],152)|0;Ff(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b);e=u(c,f)<<2;n=s[b+100>>2];g=n>v(0)^1;if(!g){b=o[a+76>>2]+u(o[e+o[a+156>>2]>>2],152)|0;q=s[b+104>>2];s[b+124>>2]=n*q;s[b+120>>2]=n*v(-q);h=o[a+16>>2];pb(h+u(o[b+144>>2],244)|0,h+u(o[b+148>>2],244)|0,b)}if(!(g|!(p[i+64|0]&16))){b=o[a+76>>2]+u(o[(e+o[a+156>>2]|0)+4>>2],152)|0;q=s[b+104>>2];s[b+124>>2]=n*q;s[b+120>>2]=n*v(-q);e=o[a+16>>2];pb(e+u(o[b+144>>2],244)|0,e+u(o[b+148>>2],244)|0,b)}c=c+1|0;if((d|0)!=(c|0)){continue}break}}return v(v(0))}function qy(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=v(0),n=v(0),q=v(0),r=0,t=v(0),u=v(0),w=v(0),x=0,y=v(0),z=0,A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=0,K=v(0),L=v(0),N=v(0),O=v(0);e=M-80|0;M=e;a:{if((c|0)<4){break a}y=s[b+8>>2];A=s[b+4>>2];q=s[b>>2];o[7717]=o[7717]+1;h=c<<2;z=l[o[6606]](h,16)|0;o[e+60>>2]=0;o[7717]=o[7717]+1;h=l[o[6606]](h,16)|0;o[e+68>>2]=h;m[e+72|0]=1;o[e+64>>2]=c;j=z;u=y;t=A;F=q;i=c;x=i;while(1){b:{if((f|0)!=(i|0)){g=h;i=f;break b}B=i?i<<1:1;if((i|0)>=(B|0)){g=h;break b}f=0;g=0;if(B){o[7717]=o[7717]+1;g=l[o[6606]](B<<2,16)|0}c:{d:{if((i|0)>=1){while(1){J=f<<2;o[J+g>>2]=o[h+J>>2];f=f+1|0;if((i|0)!=(f|0)){continue}break d}}if(!h){break c}}if(h){o[7718]=o[7718]+1;l[o[6607]](h)}o[e+68>>2]=0;i=o[e+60>>2]}o[e+68>>2]=g;m[e+72|0]=1;o[e+64>>2]=B}o[(i<<2)+g>>2]=1;o[e+60>>2]=o[e+60>>2]+1;e:{if((r|0)!=(x|0)){break e}x=r?r<<1:1;if(r>>>0>=x>>>0){x=r;break e}f=0;o[7717]=o[7717]+1;z=l[o[6606]](x<<2,16)|0;f:{g:{if(r){while(1){h=f<<2;o[h+z>>2]=o[h+j>>2];f=f+1|0;if((r|0)!=(f|0)){continue}break g}}if(j){break g}x=1;break f}if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}j=z}o[(r<<2)+j>>2]=0;h=(r<<4)+b|0;n=s[h+8>>2];u=u<n?n:u;k=s[h+4>>2];t=t<k?k:t;w=s[h>>2];F=F<w?w:F;y=n<y?n:y;A=k<A?k:A;q=w<q?w:q;r=r+1|0;if((r|0)!=(c|0)){i=o[e+64>>2];f=o[e+60>>2];h=g;continue}break}ry(e+40|0,b,c,e+56|0);h=o[e+40>>2];f=0;h:{if((h|0)==-1){break h}g=o[e+52>>2];j=(g<<4)+b|0;n=s[j>>2];f=o[e+48>>2];r=(f<<4)+b|0;k=s[r>>2];i=o[e+44>>2];x=(i<<4)+b|0;w=s[x>>2];B=(h<<4)+b|0;D=s[B>>2];G=s[j+4>>2];H=s[r+4>>2];I=s[x+4>>2];E=s[B+4>>2];K=s[j+8>>2];L=s[r+8>>2];N=s[x+8>>2];O=s[B+8>>2];o[e+36>>2]=0;s[e+32>>2]=v(K+v(L+v(O+N)))*v(.25);s[e+28>>2]=v(G+v(H+v(E+I)))*v(.25);s[e+24>>2]=v(n+v(k+v(D+w)))*v(.25);j=Db(a,f,g,i);o[j+12>>2]=2;o[j+16>>2]=3;o[j+20>>2]=1;j=Db(a,g,f,h);o[j+12>>2]=3;o[j+16>>2]=2;o[j+20>>2]=0;j=Db(a,h,i,g);o[j+12>>2]=0;o[j+16>>2]=1;o[j+20>>2]=3;h=Db(a,i,h,f);o[h+12>>2]=1;o[h+16>>2]=0;o[h+20>>2]=2;o[(g<<2)+z>>2]=1;o[(o[e+48>>2]<<2)+z>>2]=1;o[(o[e+44>>2]<<2)+z>>2]=1;o[(o[e+40>>2]<<2)+z>>2]=1;f=o[a+4>>2];if((f|0)>=1){r=0;while(1){h=o[o[a+12>>2]+(r<<2)>>2];g=(o[h+4>>2]<<4)+b|0;n=s[g>>2];f=(o[h>>2]<<4)+b|0;w=v(n-s[f>>2]);i=(o[h+8>>2]<<4)+b|0;k=s[g+4>>2];D=v(s[i+4>>2]-k);k=v(k-s[f+4>>2]);G=v(s[i>>2]-n);n=v(v(w*D)-v(k*G));E=k;k=s[g+8>>2];H=v(s[i+8>>2]-k);I=v(k-s[f+8>>2]);k=v(v(E*H)-v(I*D));w=v(v(I*G)-v(w*H));D=v(C(v(v(n*n)+v(v(k*k)+v(w*w)))));i:{if(D==v(0)){o[e+16>>2]=0;o[e+8>>2]=1065353216;o[e+12>>2]=0;break i}E=n;n=v(v(1)/D);s[e+16>>2]=E*n;s[e+12>>2]=w*n;s[e+8>>2]=k*n}o[e+20>>2]=0;g=mb(b,c,e+8|0,e+56|0);o[h+28>>2]=g;i=h;g=(g<<4)+b|0;h=(o[h>>2]<<4)+b|0;s[i+32>>2]=v(v(v(s[g>>2]-s[h>>2])*s[e+8>>2])+v(v(s[g+4>>2]-s[h+4>>2])*s[e+12>>2]))+v(v(s[g+8>>2]-s[h+8>>2])*s[e+16>>2]);r=r+1|0;f=o[a+4>>2];if((r|0)<(f|0)){continue}break}}j:{h=d?d+ -4|0:999999996;if((h|0)<1){break j}q=v(F-q);A=v(t-A);y=v(u-y);y=v(v(C(v(v(v(q*q)+v(A*A))+v(y*y))))*v(.0010000000474974513));A=v(y*v(.009999999776482582));F=v(v(y*y)*v(.10000000149011612));while(1){j=(f|0)>1?f:1;i=o[a+12>>2];d=0;f=0;while(1){g=o[(f<<2)+i>>2];if(!(!g|s[d+32>>2]<s[g+32>>2]^1?d:0)){d=g}f=f+1|0;if((j|0)!=(f|0)){continue}break}if(!d|s[d+32>>2]>y^1){break j}g=o[d+28>>2];o[(g<<2)+z>>2]=1;f=o[a+4>>2];k:{if(!f){break k}j=(g<<4)+b|0;while(1){f=f+ -1|0;d=o[(f<<2)+i>>2];l:{if(!d){break l}o[e+16>>2]=o[d+8>>2];i=o[d+4>>2];o[e+8>>2]=o[d>>2];o[e+12>>2]=i;if(!Bi(b,e+8|0,j,A)){break l}Ai(a,d,g)}if(f){i=o[a+12>>2];continue}break}i=o[a+4>>2];r=i;if(!i){break k}while(1){m:{B=o[a+12>>2];r=r+ -1|0;d=o[B+(r<<2)>>2];n:{if(!d){break n}if((g|0)!=o[d+8>>2]?!((g|0)==o[d>>2]|(g|0)==o[d+4>>2]):0){break m}o[e+16>>2]=o[d+8>>2];f=o[d+4>>2];o[e+8>>2]=o[d>>2];o[e+12>>2]=f;if(!Bi(b,e+8|0,e+24|0,A)){f=(o[e+12>>2]<<4)+b|0;q=s[f>>2];j=(o[e+8>>2]<<4)+b|0;u=v(q-s[j>>2]);x=(o[e+16>>2]<<4)+b|0;t=s[f+4>>2];n=v(s[x+4>>2]-t);t=v(t-s[j+4>>2]);q=v(s[x>>2]-q);k=v(v(u*n)-v(t*q));w=v(k*k);E=t;t=s[f+8>>2];k=v(s[x+8>>2]-t);t=v(t-s[j+8>>2]);n=v(v(E*k)-v(t*n));q=v(v(t*q)-v(u*k));if(!(v(C(v(w+v(v(n*n)+v(q*q)))))<F)){break n}}Ai(a,o[B+(o[d+12>>2]<<2)>>2],g);i=o[a+4>>2];r=i}if(r){continue}}break}if(!i){break k}while(1){i=i+ -1|0;d=o[o[a+12>>2]+(i<<2)>>2];o:{if(!d){break o}if(o[d+28>>2]>-1){break k}g=(o[d+4>>2]<<4)+b|0;q=s[g>>2];f=(o[d>>2]<<4)+b|0;t=v(q-s[f>>2]);j=(o[d+8>>2]<<4)+b|0;u=s[g+4>>2];n=v(s[j+4>>2]-u);u=v(u-s[f+4>>2]);k=v(s[j>>2]-q);q=v(v(t*n)-v(u*k));E=u;u=s[g+8>>2];w=v(s[j+8>>2]-u);D=v(u-s[f+8>>2]);u=v(v(E*w)-v(D*n));t=v(v(D*k)-v(t*w));n=v(C(v(v(q*q)+v(v(u*u)+v(t*t)))));p:{if(n==v(0)){o[e+16>>2]=0;o[e+8>>2]=1065353216;o[e+12>>2]=0;break p}k=q;q=v(v(1)/n);s[e+16>>2]=k*q;s[e+12>>2]=t*q;s[e+8>>2]=u*q}o[e+20>>2]=0;g=mb(b,c,e+8|0,e+56|0);o[d+28>>2]=g;if(o[(g<<2)+z>>2]){o[d+28>>2]=-1;break o}r=d;g=(g<<4)+b|0;d=(o[d>>2]<<4)+b|0;s[r+32>>2]=v(v(v(s[g>>2]-s[d>>2])*s[e+8>>2])+v(v(s[g+4>>2]-s[d+4>>2])*s[e+12>>2]))+v(v(s[g+8>>2]-s[d+8>>2])*s[e+16>>2])}if(i){continue}break}}if((h|0)<2){break j}h=h+ -1|0;f=o[a+4>>2];continue}}f=1}a=o[e+68>>2];if(a){if(p[e+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[e+68>>2]=0}if(!z){break a}if(z){o[7718]=o[7718]+1;l[o[6607]](z)}}M=e+80|0;return f}function kH(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=v(0),j=0,k=0,n=0,q=0,r=v(0),t=v(0),x=0,y=0,z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0);k=M-32|0;M=k;t=s[c+8>>2];a:{if(!!(v(w(t))>v(.7071067690849304))){r=s[c+4>>2];i=v(v(1)/v(C(v(v(t*t)+v(r*r)))));B=v(r*i);z=v(i*v(-t));i=v(0);break a}t=s[c>>2];r=s[c+4>>2];i=v(v(1)/v(C(v(v(t*t)+v(r*r)))));z=v(t*i);i=v(i*v(-r))}g=o[a+4>>2];b:{if((g|0)>=2){d=o[a+12>>2];while(1){h=u(n,24);e=h+d|0;if(!!(v(v(v(i*s[e>>2])+v(z*s[e+4>>2]))+v(B*s[e+8>>2]))<v(v(v(i*s[d>>2])+v(z*s[d+4>>2]))+v(B*s[d+8>>2])))){f=o[d+20>>2];o[k+24>>2]=o[d+16>>2];o[k+28>>2]=f;f=o[d+12>>2];o[k+16>>2]=o[d+8>>2];o[k+20>>2]=f;f=o[d+4>>2];o[k+8>>2]=o[d>>2];o[k+12>>2]=f;f=o[e+4>>2];o[d>>2]=o[e>>2];o[d+4>>2]=f;f=o[e+12>>2];o[d+8>>2]=o[e+8>>2];o[d+12>>2]=f;f=o[e+20>>2];o[d+16>>2]=o[e+16>>2];o[d+20>>2]=f;e=o[k+12>>2];f=h+o[a+12>>2]|0;d=f;o[d>>2]=o[k+8>>2];o[d+4>>2]=e;e=o[k+28>>2];o[d+16>>2]=o[k+24>>2];o[d+20>>2]=e;e=o[k+20>>2];o[d+8>>2]=o[k+16>>2];o[d+12>>2]=e;g=o[a+4>>2];d=o[a+12>>2]}n=n+1|0;if((n|0)<(g|0)){continue}break}o[d+16>>2]=-246811958;if((g|0)>=2){F=s[d+8>>2];t=s[d+4>>2];r=s[d>>2];n=1;while(1){e=u(n,24)+d|0;D=v(s[e+4>>2]-t);E=v(s[e>>2]-r);A=v(s[e+8>>2]-F);s[e+16>>2]=v(v(v(v(i*D)-v(z*E))*s[c+8>>2])+v(v(s[c>>2]*v(v(z*A)-v(B*D)))+v(s[c+4>>2]*v(v(B*E)-v(i*A)))))/v(C(v(v(v(E*E)+v(D*D))+v(A*A))));n=n+1|0;if((n|0)!=(g|0)){continue}break}}e=o[d+12>>2];o[k+16>>2]=o[d+8>>2];o[k+20>>2]=e;e=o[d+4>>2];o[k+8>>2]=o[d>>2];o[k+12>>2]=e;dg(a,k+8|0,1,g+ -1|0);e=o[a+12>>2];g=o[b+4>>2];c:{if((g|0)!=o[b+8>>2]){break c}q=g?g<<1:1;if((g|0)>=(q|0)){break c}d=0;if(q){o[7717]=o[7717]+1;x=l[o[6606]](u(q,24),16)|0;g=o[b+4>>2]}if((g|0)>=1){while(1){f=u(d,24);y=f+x|0;h=y;j=f+o[b+12>>2]|0;f=o[j+4>>2];o[h>>2]=o[j>>2];o[h+4>>2]=f;f=o[j+20>>2];o[h+16>>2]=o[j+16>>2];o[h+20>>2]=f;f=o[j+12>>2];o[h+8>>2]=o[j+8>>2];o[h+12>>2]=f;d=d+1|0;if((g|0)!=(d|0)){continue}break}}d=o[b+12>>2];if(d){if(p[b+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[b+12>>2]=0}o[b+12>>2]=x;m[b+16|0]=1;o[b+8>>2]=q;g=o[b+4>>2]}d=o[e+4>>2];h=o[b+12>>2]+u(g,24)|0;f=h;o[f>>2]=o[e>>2];o[f+4>>2]=d;d=o[e+20>>2];o[f+16>>2]=o[e+16>>2];o[f+20>>2]=d;d=o[e+12>>2];o[f+8>>2]=o[e+8>>2];o[f+12>>2]=d;g=o[b+4>>2]+1|0;o[b+4>>2]=g;e=o[a+12>>2];d:{if(o[b+8>>2]!=(g|0)){break d}q=g?g<<1:1;if((g|0)>=(q|0)){break d}d=0;x=0;if(q){o[7717]=o[7717]+1;x=l[o[6606]](u(q,24),16)|0;g=o[b+4>>2]}if((g|0)>=1){while(1){f=u(d,24);y=f+x|0;h=y;j=f+o[b+12>>2]|0;f=o[j+4>>2];o[h>>2]=o[j>>2];o[h+4>>2]=f;f=o[j+20>>2];o[h+16>>2]=o[j+16>>2];o[h+20>>2]=f;f=o[j+12>>2];o[h+8>>2]=o[j+8>>2];o[h+12>>2]=f;d=d+1|0;if((g|0)!=(d|0)){continue}break}}d=o[b+12>>2];if(d){if(p[b+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[b+12>>2]=0}o[b+12>>2]=x;m[b+16|0]=1;o[b+8>>2]=q;g=o[b+4>>2]}d=o[e+28>>2];h=o[b+12>>2]+u(g,24)|0;f=h;o[f>>2]=o[e+24>>2];o[f+4>>2]=d;d=o[e+44>>2];o[f+16>>2]=o[e+40>>2];o[f+20>>2]=d;d=o[e+36>>2];o[f+8>>2]=o[e+32>>2];o[f+12>>2]=d;e=o[b+4>>2]+1|0;o[b+4>>2]=e;d=o[a+4>>2];if((d|0)==2){break b}x=2;while(1){if((e|0)>=2){f=o[a+12>>2]+u(x,24)|0;G=s[f+8>>2];H=s[f+4>>2];z=s[f>>2];B=s[c+8>>2];D=s[c+4>>2];E=s[c>>2];g=o[b+12>>2];d=e;while(1){e:{e=u(d,24)+g|0;h=e+ -48|0;r=s[h>>2];e=e+ -24|0;A=v(r-s[e>>2]);i=s[h+4>>2];F=v(i-H);i=v(i-s[e+4>>2]);t=v(r-z);I=v(v(v(A*F)-v(i*t))*B);J=i;i=s[h+8>>2];r=v(i-G);i=v(i-s[e+8>>2]);if(!!(v(I+v(v(E*v(v(J*r)-v(i*F)))+v(D*v(v(i*t)-v(A*r)))))>v(0))){f:{if(o[b+8>>2]!=(d|0)){break f}y=d<<1;if((d|0)>=(y|0)){break f}o[7717]=o[7717]+1;g=l[o[6606]](u(d,48),16)|0;d=0;q=o[b+4>>2];if((q|0)>=1){while(1){e=u(d,24);j=e+g|0;h=j;n=e+o[b+12>>2]|0;e=o[n+4>>2];o[h>>2]=o[n>>2];o[h+4>>2]=e;e=o[n+20>>2];o[h+16>>2]=o[n+16>>2];o[h+20>>2]=e;e=o[n+12>>2];o[h+8>>2]=o[n+8>>2];o[h+12>>2]=e;d=d+1|0;if((q|0)!=(d|0)){continue}break}}e=o[b+12>>2];if(e){if(p[b+16|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+12>>2]=0}o[b+12>>2]=g;m[b+16|0]=1;o[b+8>>2]=y;d=o[b+4>>2]}e=o[f+4>>2];h=u(d,24)+g|0;d=h;o[d>>2]=o[f>>2];o[d+4>>2]=e;e=o[f+20>>2];o[d+16>>2]=o[f+16>>2];o[d+20>>2]=e;e=o[f+12>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=e;e=o[b+4>>2]+1|0;o[b+4>>2]=e;break e}e=d+ -1|0;o[b+4>>2]=e;h=(d|0)>2;d=e;if(h){continue}}break}d=o[a+4>>2]}x=x+1|0;if((x|0)!=(d|0)){continue}break}break b}if((g|0)!=1){break b}g=o[b+4>>2];while(1){e=o[a+12>>2];g:{if(o[b+8>>2]!=(g|0)){break g}q=g?g<<1:1;if((g|0)>=(q|0)){break g}d=0;c=0;if(q){o[7717]=o[7717]+1;c=l[o[6606]](u(q,24),16)|0;g=o[b+4>>2]}if((g|0)>=1){while(1){f=u(d,24);y=f+c|0;h=y;j=f+o[b+12>>2]|0;f=o[j+4>>2];o[h>>2]=o[j>>2];o[h+4>>2]=f;f=o[j+20>>2];o[h+16>>2]=o[j+16>>2];o[h+20>>2]=f;f=o[j+12>>2];o[h+8>>2]=o[j+8>>2];o[h+12>>2]=f;d=d+1|0;if((g|0)!=(d|0)){continue}break}}d=o[b+12>>2];if(d){if(p[b+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[b+12>>2]=0}o[b+12>>2]=c;m[b+16|0]=1;o[b+8>>2]=q;g=o[b+4>>2]}c=o[e+4>>2];f=o[b+12>>2]+u(g,24)|0;d=f;o[d>>2]=o[e>>2];o[d+4>>2]=c;c=o[e+20>>2];o[d+16>>2]=o[e+16>>2];o[d+20>>2]=c;c=o[e+12>>2];o[d+8>>2]=o[e+8>>2];o[d+12>>2]=c;g=o[b+4>>2]+1|0;o[b+4>>2]=g;n=n+1|0;if((n|0)<o[a+4>>2]){continue}break}}M=k+32|0}



function bB(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=0,i=0,j=0,k=0,l=v(0),r=v(0),t=v(0),u=v(0),w=0,x=v(0),y=v(0);d=M-416|0;M=d;e=o[a+124>>2];o[d+216>>2]=o[a+120>>2];o[d+220>>2]=e;e=o[a+116>>2];o[d+208>>2]=o[a+112>>2];o[d+212>>2]=e;f=s[a+16>>2];f=v((f<v(0)?v(-f):v(0))*c);a:{if(!(f>v(0))){break a}g=s[a+24>>2];if(f>g^1|(p[a+169|0]?!p[a+168|0]:0)){break a}f=g}b:{if(m[30544]&1){break b}if(!da(30544)){break b}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}e=o[a+176>>2]<<4;g=s[e+30504>>2];l=s[e+30500>>2];f=v(f+s[a+108>>2]);r=v(s[e+30496>>2]*f);s[a+112>>2]=s[a+112>>2]-r;l=v(f*l);s[a+116>>2]=s[a+116>>2]-l;t=v(f*g);s[a+120>>2]=s[a+120>>2]-t;e=o[a+8>>2];c:{if(m[30544]&1){break c}if(!da(30544)){break c}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}h=o[a+40>>2];i=o[a+176>>2];o[d+124>>2]=0;o[d+128>>2]=0;o[d+132>>2]=0;o[d+136>>2]=0;o[d+140>>2]=0;o[d+144>>2]=0;i=i<<4;k=i+30504|0;j=o[k+4>>2];o[d+196>>2]=o[k>>2];o[d+200>>2]=j;o[d+108>>2]=1065353216;o[d+116>>2]=0;o[d+120>>2]=0;o[d+184>>2]=e;o[d+104>>2]=20308;o[d+204>>2]=h;e=i+30496|0;h=o[e+4>>2];o[d+188>>2]=o[e>>2];o[d+192>>2]=h;o[d+180>>2]=0;e=o[a+8>>2];h=o[e+188>>2];n[d+112>>1]=q[h+4>>1];n[d+114>>1]=q[h+6>>1];d:{if(m[30544]&1){break d}if(!da(30544)){break d}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}h=o[a+40>>2];i=o[a+176>>2];o[d+20>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;i=i<<4;k=i+30504|0;j=o[k+4>>2];o[d+92>>2]=o[k>>2];o[d+96>>2]=j;o[d+76>>2]=0;o[d+4>>2]=1065353216;o[d+12>>2]=0;o[d+16>>2]=0;o[d+80>>2]=e;o[d>>2]=20308;o[d+100>>2]=h;e=i+30496|0;h=o[e+4>>2];o[d+84>>2]=o[e>>2];o[d+88>>2]=h;e=o[o[a+8>>2]+188>>2];n[d+8>>1]=q[e+4>>1];n[d+10>>1]=q[e+6>>1];h=d+224|4;i=d+288|4;k=d+352|4;f=s[a+120>>2];g=s[a+116>>2];u=s[a+112>>2];j=0;e:{while(1){o[d+352>>2]=1065353216;e=k;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;o[d+372>>2]=1065353216;o[d+384>>2]=0;o[d+388>>2]=0;o[d+376>>2]=0;o[d+380>>2]=0;o[d+392>>2]=1065353216;o[d+396>>2]=0;o[d+288>>2]=1065353216;e=i;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;o[d+308>>2]=1065353216;o[d+320>>2]=0;o[d+324>>2]=0;o[d+312>>2]=0;o[d+316>>2]=0;o[d+328>>2]=1065353216;o[d+332>>2]=0;o[d+224>>2]=1065353216;e=h;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;o[d+244>>2]=1065353216;o[d+256>>2]=0;o[d+260>>2]=0;o[d+248>>2]=0;o[d+252>>2]=0;o[d+264>>2]=1065353216;o[d+268>>2]=0;e=o[a+104>>2];o[d+408>>2]=o[a+100>>2];o[d+412>>2]=e;e=o[a+96>>2];o[d+400>>2]=o[a+92>>2];o[d+404>>2]=e;e=o[a+124>>2];o[d+344>>2]=o[a+120>>2];o[d+348>>2]=e;e=o[a+116>>2];o[d+336>>2]=o[a+112>>2];o[d+340>>2]=e;s[d+276>>2]=g-l;s[d+280>>2]=f-t;o[d+284>>2]=0;s[d+272>>2]=u-r;f:{if(p[a+170|0]){fd(o[a+8>>2],o[a+12>>2],d+352|0,d+288|0,d+104|0,s[b+56>>2]);if(s[d+108>>2]<v(1)){break f}fd(o[a+8>>2],o[a+12>>2],d+352|0,d+224|0,d,s[b+56>>2]);break f}Kb(b,o[a+12>>2],d+352|0,d+288|0,d+104|0,s[b+56>>2]);if(s[d+108>>2]<v(1)){break f}Kb(b,o[a+12>>2],d+352|0,d+224|0,d,s[b+56>>2])}f=s[a+16>>2];f=v((f<v(0)?v(-f):v(0))*c);w=p[a+182|0];g:{if(w){e=1;if(s[d+108>>2]<v(1)){break g}e=s[d+4>>2]<v(1);break g}e=s[d+4>>2]<v(1)}h:{i:{j:{if(!(f>v(0))){break j}g=s[a+52>>2];if((f<g^-1|e^-1|j)&1){break j}if(p[a+168|0]|!p[a+169|0]){break i}j=0}g=s[d+108>>2];if(g<v(1)^1?!j:0){break h}c=s[a+96>>2];g=w?p[a+181|0]?g:v(v(c-s[d+168>>2])*v(.5)):g;m[a+181|0]=0;m[a+169|0]=0;o[a+16>>2]=0;o[a+20>>2]=0;f=v(v(1)-g);s[a+92>>2]=v(f*s[a+92>>2])+v(g*s[a+112>>2]);s[a+96>>2]=v(c*f)+v(g*s[a+116>>2]);s[a+100>>2]=v(f*s[a+100>>2])+v(g*s[a+120>>2]);break e}e=o[d+212>>2];o[a+112>>2]=o[d+208>>2];o[a+116>>2]=e;e=o[d+220>>2];o[a+120>>2]=o[d+216>>2];o[a+124>>2]=e;k:{if(m[30544]&1){break k}if(!da(30544)){break k}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}e=o[a+176>>2]<<4;x=s[e+30504>>2];y=s[e+30500>>2];f=v(g+s[a+108>>2]);u=v(s[a+112>>2]-v(s[e+30496>>2]*f));s[a+112>>2]=u;g=v(s[a+116>>2]-v(f*y));s[a+116>>2]=g;f=v(s[a+120>>2]-v(f*x));s[a+120>>2]=f;j=1;continue}break}m[a+181|0]=1;l:{if(!w){break l}c=s[a+24>>2];if(f>c^1|(p[a+169|0]?!p[a+168|0]:0)){break l}s[a+112>>2]=r+s[a+112>>2];s[a+116>>2]=l+s[a+116>>2];s[a+120>>2]=t+s[a+120>>2];m:{if(m[30544]&1){break m}if(!da(30544)){break m}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}b=o[a+176>>2]<<4;f=s[b+30504>>2];g=s[b+30500>>2];c=v(c+s[a+108>>2]);s[a+112>>2]=s[a+112>>2]-v(s[b+30496>>2]*c);s[a+116>>2]=s[a+116>>2]-v(c*g);s[a+120>>2]=s[a+120>>2]-v(c*f)}b=o[a+116>>2];o[a+92>>2]=o[a+112>>2];o[a+96>>2]=b;b=o[a+124>>2];o[a+100>>2]=o[a+120>>2];o[a+104>>2]=b}M=d+416|0}function IB(a,b,c,d,e,f,g,h,i){var j=v(0),k=v(0),l=v(0),m=v(0),n=0,q=0,r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=0,D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=0,J=v(0);C=o[a+16>>2];H=C+u(d,244)|0;n=o[H+240>>2];I=u(c,244)+C|0;q=o[I+240>>2];o[g>>2]=1065353216;j=s[e+68>>2];k=s[h>>2];l=s[h+4>>2];m=s[e+64>>2];w=v(v(j*k)-v(l*m));r=s[h+8>>2];y=v(r*m);m=s[e+72>>2];x=v(y-v(m*k));z=v(v(l*m)-v(r*j));j=v(0);k=v(0);l=v(0);if(q){l=v(v(v(v(z*s[q+296>>2])+v(x*s[q+300>>2]))+v(w*s[q+304>>2]))*s[q+552>>2]);k=v(v(v(v(z*s[q+280>>2])+v(x*s[q+284>>2]))+v(w*s[q+288>>2]))*s[q+548>>2]);j=v(v(v(v(z*s[q+264>>2])+v(x*s[q+268>>2]))+v(w*s[q+272>>2]))*s[q+544>>2])}s[b+64>>2]=j;o[b+76>>2]=0;s[b+72>>2]=l;s[b+68>>2]=k;m=s[e+68>>2];r=s[i>>2];A=s[i+4>>2];D=s[e+64>>2];E=v(v(m*r)-v(A*D));y=s[i+8>>2];B=s[e+72>>2];D=v(v(y*D)-v(B*r));A=v(v(A*B)-v(y*m));m=v(0);r=v(0);if(n){t=v(-D);r=v(v(v(v(s[n+300>>2]*t)-v(A*s[n+296>>2]))-v(E*s[n+304>>2]))*s[n+552>>2]);m=v(v(v(v(s[n+284>>2]*t)-v(A*s[n+280>>2]))-v(E*s[n+288>>2]))*s[n+548>>2]);t=v(v(v(v(s[n+268>>2]*t)-v(A*s[n+264>>2]))-v(E*s[n+272>>2]))*s[n+544>>2])}s[b+80>>2]=t;o[b+92>>2]=0;s[b+88>>2]=r;s[b+84>>2]=m;a=b;F=s[g>>2];if(q){B=s[h+8>>2];G=s[h+4>>2];J=v(v(v(k*B)-v(l*G))*s[e+64>>2]);y=l;l=s[h>>2];k=v(s[q+344>>2]+v(v(J+v(v(v(y*l)-v(B*j))*s[e+68>>2]))+v(v(v(G*j)-v(k*l))*s[e+72>>2])))}else{k=v(0)}y=k;if(n){k=s[i+4>>2];l=s[i+8>>2];j=v(v(v(r*k)-v(m*l))*s[e+64>>2]);B=v(t*l);l=s[i>>2];k=v(s[n+344>>2]+v(v(j+v(v(B-v(r*l))*s[e+68>>2]))+v(v(v(m*l)-v(t*k))*s[e+72>>2])))}else{k=v(0)}s[a+108>>2]=F/v(y+k);a:{if(q){a=e- -64|0;g=o[a+4>>2];o[b+16>>2]=o[a>>2];o[b+20>>2]=g;g=o[a+12>>2];o[b+24>>2]=o[a+8>>2];o[b+28>>2]=g;o[b+12>>2]=0;s[b+8>>2]=w;s[b+4>>2]=x;s[b>>2]=z;break a}o[b>>2]=0;o[b+4>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0;o[b+16>>2]=0;o[b+20>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0}b:{if(n){j=s[e+64>>2];k=s[e+68>>2];l=s[e+72>>2];o[b+60>>2]=0;o[b+44>>2]=0;s[b+40>>2]=-E;s[b+36>>2]=-D;s[b+32>>2]=-A;s[b+56>>2]=-l;s[b+52>>2]=-k;s[b+48>>2]=-j;break b}o[b+32>>2]=0;o[b+36>>2]=0;o[b+56>>2]=0;o[b+60>>2]=0;o[b+48>>2]=0;o[b+52>>2]=0;o[b+40>>2]=0;o[b+44>>2]=0}B=s[f+56>>2];G=s[e+80>>2];t=v(0);j=v(0);k=v(0);l=v(0);if(q){j=s[h+4>>2];k=s[q+328>>2];m=s[q+332>>2];r=s[h>>2];l=v(v(v(j*k)-v(m*r))+s[q+320>>2]);w=s[q+336>>2];y=v(w*r);r=s[h+8>>2];k=v(s[q+316>>2]+v(y-v(r*k)));j=v(v(v(m*r)-v(w*j))+s[q+312>>2])}m=v(0);r=v(0);if(n){t=s[i+4>>2];m=s[n+328>>2];w=s[n+332>>2];x=s[i>>2];r=v(v(v(t*m)-v(w*x))+s[n+320>>2]);z=s[n+336>>2];y=v(z*x);x=s[i+8>>2];m=v(s[n+316>>2]+v(y-v(x*m)));t=v(v(v(w*x)-v(z*t))+s[n+312>>2])}w=s[e+72>>2];x=s[e+64>>2];z=s[e+68>>2];o[b+104>>2]=o[e+84>>2];t=v(-v(v(v(x*v(j-t))+v(z*v(k-m)))+v(w*v(l-r))));F=s[e+92>>2];c:{if(p[f+64|0]&4){j=v(s[e+120>>2]*s[f+60>>2]);s[b+100>>2]=j;if(!(!q|!o[I+240>>2])){k=s[q+356>>2];l=s[b+24>>2];m=s[q+352>>2];r=s[b+20>>2];a=u(c,244)+C|0;s[a+64>>2]=v(s[a+112>>2]*v(j*v(v(s[b+16>>2]*s[a+128>>2])*s[q+348>>2])))+s[a+64>>2];s[a+68>>2]=v(v(j*v(m*v(r*s[a+132>>2])))*s[a+116>>2])+s[a+68>>2];s[a+72>>2]=v(v(j*v(k*v(l*s[a+136>>2])))*s[a+120>>2])+s[a+72>>2];k=s[b+72>>2];l=s[b+68>>2];s[a+80>>2]=v(v(j*s[a+96>>2])*s[b+64>>2])+s[a+80>>2];m=s[a+104>>2];s[a+84>>2]=v(l*v(j*s[a+100>>2]))+s[a+84>>2];s[a+88>>2]=v(k*v(j*m))+s[a+88>>2]}if(!n|!o[H+240>>2]){break c}k=s[n+356>>2];l=s[b+56>>2];m=s[n+352>>2];r=s[b+52>>2];w=s[b+88>>2];x=s[b+84>>2];z=s[b+80>>2];a=u(d,244)+C|0;j=v(-s[b+100>>2]);s[a+64>>2]=s[a+64>>2]-v(s[a+112>>2]*v(v(v(s[a+128>>2]*s[b+48>>2])*s[n+348>>2])*j));s[a+68>>2]=s[a+68>>2]-v(v(v(m*v(r*s[a+132>>2]))*j)*s[a+116>>2]);s[a+72>>2]=s[a+72>>2]-v(v(v(k*v(l*s[a+136>>2]))*j)*s[a+120>>2]);s[a+80>>2]=s[a+80>>2]-v(z*v(s[a+96>>2]*j));k=s[a+104>>2];s[a+84>>2]=s[a+84>>2]-v(x*v(s[a+100>>2]*j));s[a+88>>2]=s[a+88>>2]-v(w*v(k*j));break c}o[b+100>>2]=0}o[b+96>>2]=0;j=v(0);k=v(0);l=v(0);m=v(0);r=v(0);w=v(0);x=v(0);if(o[I+240>>2]){a=u(c,244)+C|0;x=s[a+224>>2];m=s[a+208>>2];r=s[a+232>>2];w=s[a+228>>2];l=s[a+212>>2];k=s[a+216>>2]}z=v(0);E=v(0);A=v(0);D=v(0);y=v(0);if(o[H+240>>2]){a=u(d,244)+C|0;y=s[a+224>>2];A=s[a+232>>2];D=s[a+228>>2];E=s[a+216>>2];z=s[a+212>>2];j=s[a+208>>2]}t=v(F*t);F=t<=v(0)?v(0):t;a=u(c,244)+C|0;k=v(v(v(v(v(m+s[a+176>>2])*s[b+16>>2])+v(v(l+s[a+180>>2])*s[b+20>>2]))+v(v(k+s[a+184>>2])*s[b+24>>2]))+v(v(v(v(x+s[a+192>>2])*s[b>>2])+v(v(w+s[a+196>>2])*s[b+4>>2]))+v(v(r+s[a+200>>2])*s[b+8>>2])));a=u(d,244)+C|0;j=v(k+v(v(v(v(v(j+s[a+176>>2])*s[b+48>>2])+v(v(z+s[a+180>>2])*s[b+52>>2]))+v(v(E+s[a+184>>2])*s[b+56>>2]))+v(v(v(v(y+s[a+192>>2])*s[b+32>>2])+v(v(D+s[a+196>>2])*s[b+36>>2]))+v(v(A+s[a+200>>2])*s[b+40>>2]))));c=o[f+44>>2];t=v(G+B);a=f+36|0;d:{if(!(!c|!!(t>s[f+48>>2]))){break d}a=f+32|0}j=v(F-j);k=v(0);e:{if(!!(t>v(0))){j=v(j-v(t/s[f+12>>2]));break e}k=v(v(s[a>>2]*v(-t))/s[f+12>>2])}l=s[b+108>>2];j=v(j*l);k=v(k*l);a=b;if(!(t>s[f+48>>2]^1?c:0)){j=v(k+j);k=v(0)}s[a+128>>2]=k;s[b+112>>2]=j;o[b+124>>2]=1343554297;o[b+116>>2]=0;o[b+120>>2]=0}function oy(a,b,c,d,e,f,g,h){var i=v(0),j=v(0),k=v(0),n=0,q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=0,A=0,B=v(0),C=0,D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=0,J=0,K=v(0);if(!b){return 0}A=o[a+24>>2];if((A|0)<=-1){n=o[a+32>>2];if(o[a+28>>2]<=-1){if(!(!n|!p[a+36|0])){if(n){o[7718]=o[7718]+1;l[o[6607]](n)}}m[a+36|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;n=0}z=n;n=A<<2;$(z+n|0,0,0-n|0)}o[a+24>>2]=0;o[e>>2]=0;o[h+8>>2]=1065353216;o[h>>2]=1065353216;o[h+4>>2]=1065353216;A=b>>>0>1?b:1;r=v(3.4028234663852886e+38);x=v(-3.4028234663852886e+38);y=v(-3.4028234663852886e+38);t=v(3.4028234663852886e+38);u=v(-3.4028234663852886e+38);j=v(3.4028234663852886e+38);n=c;while(1){i=s[n>>2];if(!!(i<j)){j=i;i=s[n>>2]}q=i;z=i>u;i=s[n+4>>2];if(i<t){t=i;i=s[n+4>>2]}u=z?q:u;y=i>y?i:y;i=s[n+8>>2];if(!!(i<r)){r=i;i=s[n+8>>2]}x=i>x?i:x;n=d+n|0;C=C+1|0;if((A|0)!=(C|0)){continue}break}i=v(x-r);x=v(r+v(i*v(.5)));q=v(y-t);y=v(t+v(q*v(.5)));r=j;j=v(u-j);u=v(r+v(j*v(.5)));a:{if(!(b>>>0<3|j<v(9.999999974752427e-7)|q<v(9.999999974752427e-7))){if(!(i<v(9.999999974752427e-7))){break a}}g=v(.009999999776482582);r=v(.009999999776482582);t=v(.009999999776482582);k=j>v(9.999999974752427e-7)?j<v(3.4028234663852886e+38)?j:v(3.4028234663852886e+38):v(3.4028234663852886e+38);k=q>v(9.999999974752427e-7)?q<k?q:k:k;k=i>v(9.999999974752427e-7)?i<k?i:k:k;b:{if(k==v(3.4028234663852886e+38)){break b}g=v(k*v(.05000000074505806));r=q<v(9.999999974752427e-7)?g:q;t=j<v(9.999999974752427e-7)?g:j;if(!!(i<v(9.999999974752427e-7))){break b}g=i}i=v(x+g);s[f+120>>2]=i;j=v(y+r);s[f+116>>2]=j;q=v(u-t);s[f+112>>2]=q;s[f+104>>2]=i;s[f+100>>2]=j;t=v(u+t);s[f+96>>2]=t;s[f+88>>2]=i;r=v(y-r);s[f+84>>2]=r;s[f+80>>2]=t;s[f+72>>2]=i;s[f+68>>2]=r;s[f+64>>2]=q;g=v(x-g);s[f+56>>2]=g;s[f+52>>2]=j;s[f+48>>2]=q;s[f+40>>2]=g;s[f+36>>2]=j;s[f+32>>2]=t;s[f+24>>2]=g;s[f+20>>2]=r;s[f+16>>2]=t;s[f+8>>2]=g;s[f+4>>2]=r;s[f>>2]=q;o[e>>2]=8;return 1}s[h+8>>2]=i;s[h+4>>2]=q;s[h>>2]=j;k=v(v(1)/i);x=v(k*x);D=v(v(1)/q);q=v(D*y);y=v(v(1)/j);j=v(y*u);h=0;while(1){i=v(k*s[c+8>>2]);r=v(D*s[c+4>>2]);t=v(y*s[c>>2]);n=0;c:{if(h){C=o[e>>2];A=C>>>0>1?C:1;d:{while(1){e:{z=(n<<4)+f|0;u=s[z>>2];if(!(v(w(v(u-t)))<g)){break e}B=s[z+4>>2];if(!(v(w(v(B-r)))<g)){break e}F=s[z+8>>2];if(!(v(w(v(F-i)))<g)){break e}E=v(t-j);G=v(E*E);E=v(r-q);G=v(G+v(E*E));E=v(i-x);u=v(u-j);K=v(u*u);u=v(B-q);B=v(K+v(u*u));u=v(F-x);if(!(v(G+v(E*E))>v(B+v(u*u)))){break d}s[z>>2]=t;s[z+4>>2]=r;s[z+8>>2]=i;break d}h=C;n=n+1|0;if((A|0)!=(n|0)){continue}break}n=A}if((h|0)!=(n|0)){break c}}h=(n<<4)+f|0;s[h+8>>2]=i;s[h+4>>2]=r;s[h>>2]=t;o[e>>2]=n+1}h=o[a+24>>2];f:{if((h|0)!=o[a+28>>2]){break f}z=h?h<<1:1;if((h|0)>=(z|0)){break f}C=0;H=0;if(z){o[7717]=o[7717]+1;H=l[o[6606]](z<<2,16)|0;h=o[a+24>>2]}A=o[a+32>>2];g:{h:{if((h|0)>=1){while(1){I=C<<2;o[I+H>>2]=o[A+I>>2];C=C+1|0;if((C|0)!=(h|0)){continue}break h}}if(!A){break g}}if(p[a+36|0]){if(A){o[7718]=o[7718]+1;l[o[6607]](A)}}o[a+32>>2]=0;h=o[a+24>>2]}o[a+32>>2]=H;m[a+36|0]=1;o[a+28>>2]=z}c=c+d|0;o[o[a+32>>2]+(h<<2)>>2]=n;o[a+24>>2]=o[a+24>>2]+1;h=o[e>>2];J=J+1|0;if((J|0)!=(b|0)){continue}break}j=v(-3.4028234663852886e+38);g=v(3.4028234663852886e+38);i:{if(!h){r=v(3.4028234663852886e+38);D=v(-3.4028234663852886e+38);t=v(3.4028234663852886e+38);B=v(-3.4028234663852886e+38);a=1;break i}n=0;r=v(3.4028234663852886e+38);D=v(-3.4028234663852886e+38);t=v(3.4028234663852886e+38);B=v(-3.4028234663852886e+38);x=v(-3.4028234663852886e+38);y=v(3.4028234663852886e+38);u=v(-3.4028234663852886e+38);q=v(3.4028234663852886e+38);i=v(-3.4028234663852886e+38);F=v(3.4028234663852886e+38);while(1){a=(n<<4)+f|0;k=s[a+8>>2];b=k>x;x=b?k:x;j=b?k:j;b=k<y;y=b?k:y;g=b?k:g;k=s[a+4>>2];b=k>u;u=b?k:u;D=b?k:D;b=k<q;q=b?k:q;r=b?k:r;k=s[a>>2];a=k>i;i=a?k:i;B=a?k:B;a=k<F;F=a?k:F;t=a?k:t;n=n+1|0;if((n|0)!=(h|0)){continue}break}a=h>>>0<3}j=v(j-g);x=v(D-r);y=v(B-t);j:{if(!(y<v(9.999999974752427e-7)|a|x<v(9.999999974752427e-7))){if(!(j<v(9.999999974752427e-7))){break j}}k=v(g+v(j*v(.5)));D=v(r+v(x*v(.5)));B=v(t+v(y*v(.5)));u=v(.009999999776482582);q=v(.009999999776482582);i=v(.009999999776482582);g=y>=v(9.999999974752427e-7)?y<v(3.4028234663852886e+38)?y:v(3.4028234663852886e+38):v(3.4028234663852886e+38);g=x>=v(9.999999974752427e-7)?x<g?x:g:g;g=j>=v(9.999999974752427e-7)?j<g?j:g:g;k:{if(g==v(3.4028234663852886e+38)){break k}i=v(g*v(.05000000074505806));q=x<v(9.999999974752427e-7)?i:x;u=y<v(9.999999974752427e-7)?i:y;if(!!(j<v(9.999999974752427e-7))){break k}i=j}g=v(k+i);s[f+120>>2]=g;r=v(D+q);s[f+116>>2]=r;t=v(B-u);s[f+112>>2]=t;s[f+104>>2]=g;s[f+100>>2]=r;j=v(B+u);s[f+96>>2]=j;s[f+88>>2]=g;q=v(D-q);s[f+84>>2]=q;s[f+80>>2]=j;s[f+72>>2]=g;s[f+68>>2]=q;s[f+64>>2]=t;g=v(k-i);s[f+56>>2]=g;s[f+52>>2]=r;s[f+48>>2]=t;s[f+40>>2]=g;s[f+36>>2]=r;s[f+32>>2]=j;s[f+24>>2]=g;s[f+20>>2]=q;s[f+16>>2]=j;s[f+8>>2]=g;s[f+4>>2]=q;s[f>>2]=t;o[e>>2]=8}return 1}function _m(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=M-400|0;M=e;o[e+396>>2]=a;o[e+392>>2]=b;o[e+388>>2]=c;o[e+384>>2]=d;a=o[e+396>>2];b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+368|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];g=e+352|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+336|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];g=e+320|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+304|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];g=e+288|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+272|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];g=e+256|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+240|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+224|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+208|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+192|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+176|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+160|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+392>>2];f=e+144|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+128|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];f=e+112|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+96|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];f=e+80|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e- -64|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+388>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];f=e+48|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];g=e+32|0;Y(g,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,g,o[e+384>>2]);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+388>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];f=e+16|0;Y(f,b,c,o[d+12>>2]+8|0);b=M-16|0;o[b+12>>2]=o[e+392>>2];b=o[b+12>>2];c=M-16|0;o[c+12>>2]=o[e+392>>2];c=o[c+12>>2]+4|0;d=M-16|0;o[d+12>>2]=o[e+388>>2];Y(e,b,c,o[d+12>>2]+8|0);l[o[o[a>>2]+8>>2]](a,f,e,o[e+384>>2]);M=e+400|0}function ed(a,b,c,d){var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=0,J=v(0),K=0,L=0,N=0,O=0;e=M-672|0;M=e;f=e+456|0;o[f+4>>2]=35;o[f+8>>2]=0;o[f>>2]=13316;o[f+44>>2]=1025758986;o[f+20>>2]=1065353216;o[f+24>>2]=0;o[f+12>>2]=1065353216;o[f+16>>2]=1065353216;o[f>>2]=13444;s[e+500>>2]=0;s[e+484>>2]=0;o[e+456>>2]=11556;o[e+460>>2]=8;o[e+404>>2]=0;o[e+408>>2]=0;o[e+416>>2]=0;o[e+420>>2]=0;o[e+412>>2]=1065353216;o[e+432>>2]=1065353216;o[e+436>>2]=0;o[e+396>>2]=0;o[e+400>>2]=0;o[e+392>>2]=1065353216;o[e+424>>2]=0;o[e+428>>2]=0;f=o[a+12>>2];o[e+448>>2]=o[a+8>>2];o[e+452>>2]=f;f=o[a+4>>2];o[e+440>>2]=o[a>>2];o[e+444>>2]=f;o[d+32>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d>>2]=0;o[d+4>>2]=0;o[e+512>>2]=b;o[e+516>>2]=e+456;g=s[c+36>>2];i=s[c+20>>2];h=s[c+40>>2];j=s[c+24>>2];t=s[c+32>>2];u=s[c>>2];p=s[c+16>>2];m=s[c+4>>2];k=s[c+8>>2];o[e+564>>2]=0;o[e+548>>2]=0;o[e+532>>2]=0;n=v(k*v(0));w=v(j*v(0));z=v(h+v(n+w));s[e+560>>2]=z;q=v(m*v(0));x=v(i*v(0));E=v(g+v(q+x));s[e+556>>2]=E;y=v(u*v(0));A=v(p*v(0));J=v(t+v(y+A));s[e+552>>2]=J;F=v(n+j);n=v(h*v(0));F=v(F+n);s[e+544>>2]=F;G=v(q+i);q=v(g*v(0));G=v(G+q);s[e+540>>2]=G;H=v(y+p);y=v(t*v(0));H=v(H+y);s[e+536>>2]=H;n=v(v(k+w)+n);s[e+528>>2]=n;w=v(v(m+x)+q);s[e+524>>2]=w;q=v(v(u+A)+y);s[e+520>>2]=q;x=s[c+52>>2];y=s[c+56>>2];A=s[c+48>>2];o[e+636>>2]=0;o[e+628>>2]=0;o[e+612>>2]=0;s[e+608>>2]=z;s[e+604>>2]=F;s[e+600>>2]=n;o[e+596>>2]=0;s[e+592>>2]=E;s[e+588>>2]=G;s[e+584>>2]=w;o[e+580>>2]=0;s[e+576>>2]=J;s[e+572>>2]=H;n=k;k=v(s[e+440>>2]-A);w=j;j=v(s[e+444>>2]-x);x=h;h=v(s[e+448>>2]-y);s[e+624>>2]=v(v(n*k)+v(w*j))+v(x*h);s[e+620>>2]=v(v(k*m)+v(j*i))+v(h*g);s[e+616>>2]=v(v(k*u)+v(j*p))+v(h*t);o[e+632>>2]=98;s[e+568>>2]=q;o[e+144>>2]=0;o[e+148>>2]=0;o[e+136>>2]=0;o[e+140>>2]=0;o[e+372>>2]=0;o[e+376>>2]=0;o[e+384>>2]=2;o[e+152>>2]=0;o[e+664>>2]=1065353216;o[e+668>>2]=0;o[e+656>>2]=1065353216;o[e+660>>2]=1065353216;g=v(3.4028234663852886e+38);a:{b:{switch(we(e+8|0,e+512|0,e+656|0)|0){case 0:g=v(0);h=v(0);j=v(0);t=v(0);u=v(0);f=o[e+380>>2];if(o[f+32>>2]){a=0;while(1){K=a<<2;B=K+f|0;i=s[B+16>>2];f=o[e+632>>2];I=e+656|0;L=o[e+636>>2];N=o[e+512>>2]+(L>>1)|0;O=N;B=o[B>>2];if(L&1){f=o[f+o[N>>2]>>2]}l[f](I,O,B);I=o[e+636>>2];B=o[e+516>>2]+(I>>1)|0;n=v(i*s[e+664>>2]);w=v(i*s[e+660>>2]);z=v(i*s[e+656>>2]);f=o[o[e+380>>2]+K>>2];p=s[f+8>>2];m=s[f>>2];k=v(-s[f+4>>2]);f=o[e+632>>2];f=I&1?o[o[B>>2]+f>>2]:f;u=v(u+n);t=v(t+w);j=v(j+z);o[e+652>>2]=0;s[e+648>>2]=v(v(s[e+556>>2]*k)-v(m*s[e+552>>2]))-v(p*s[e+560>>2]);s[e+644>>2]=v(v(s[e+540>>2]*k)-v(m*s[e+536>>2]))-v(p*s[e+544>>2]);s[e+640>>2]=v(v(s[e+524>>2]*k)-v(m*s[e+520>>2]))-v(p*s[e+528>>2]);l[f](e+656|0,B,e+640|0);p=s[e+656>>2];m=s[e+660>>2];k=s[e+664>>2];h=v(h+v(i*v(v(v(v(p*s[e+600>>2])+v(m*s[e+604>>2]))+v(k*s[e+608>>2]))+s[e+624>>2])));g=v(g+v(i*v(v(v(v(p*s[e+584>>2])+v(m*s[e+588>>2]))+v(k*s[e+592>>2]))+s[e+620>>2])));D=v(D+v(i*v(v(v(v(p*s[e+568>>2])+v(m*s[e+572>>2]))+v(k*s[e+576>>2]))+s[e+616>>2])));a=a+1|0;f=o[e+380>>2];if(a>>>0<r[f+32>>2]){continue}break}}i=s[c+48>>2];p=s[c+8>>2];m=s[c>>2];k=s[c+4>>2];n=s[c+52>>2];w=s[c+24>>2];z=s[c+16>>2];q=s[c+20>>2];x=s[c+56>>2];E=s[c+40>>2];y=s[c+32>>2];A=s[c+36>>2];o[d+16>>2]=0;x=v(x+v(v(v(j*y)+v(t*A))+v(u*E)));s[d+12>>2]=x;n=v(n+v(v(v(j*z)+v(t*q))+v(u*w)));s[d+8>>2]=n;i=v(i+v(v(v(j*m)+v(t*k))+v(u*p)));s[d+4>>2]=i;j=s[c+48>>2];t=s[c+8>>2];u=s[c>>2];p=s[c+4>>2];m=s[c+52>>2];k=s[c+24>>2];w=s[c+16>>2];z=s[c+20>>2];q=s[c+56>>2];E=s[c+40>>2];y=s[c+32>>2];A=s[c+36>>2];o[d+32>>2]=0;q=v(q+v(v(v(D*y)+v(g*A))+v(h*E)));s[d+28>>2]=q;m=v(m+v(v(v(D*w)+v(g*z))+v(h*k)));s[d+24>>2]=m;g=v(j+v(v(v(D*u)+v(g*p))+v(h*t)));s[d+20>>2]=g;t=cc(b);u=cc(e+456|0);o[d+48>>2]=0;i=v(g-i);h=v(m-n);j=v(q-x);D=v(C(v(v(v(i*i)+v(h*h))+v(j*j))));g=v(v(1)/D);j=v(j*g);s[d+44>>2]=j;h=v(h*g);s[d+40>>2]=h;i=v(i*g);s[d+36>>2]=i;g=v(t+u);s[d+4>>2]=v(g*i)+s[d+4>>2];s[d+8>>2]=v(g*h)+s[d+8>>2];s[d+12>>2]=v(g*j)+s[d+12>>2];g=v(D-g);break a;case 1:break b;default:break a}}if(!ve(b,c,e+456|0,e+392|0,e+136|0,d,1)){break a}g=v(s[d+4>>2]-s[d+20>>2]);i=v(s[d+8>>2]-s[d+24>>2]);h=v(s[d+12>>2]-s[d+28>>2]);j=v(C(v(v(v(g*g)+v(i*i))+v(h*h))));if(!!(j>=v(1.1920928955078125e-7))){o[d+48>>2]=0;k=h;h=v(v(1)/j);s[d+44>>2]=k*h;s[d+40>>2]=i*h;s[d+36>>2]=g*h}g=v(-j)}M=e+672|0;return g}function Dl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=0,u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=0,N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=0,ea=0;g=M-96|0;M=g;se(o[a+4>>2]);W=s[d+40>>2];X=s[d+36>>2];Y=s[d+24>>2];Z=s[d+20>>2];N=s[b+20>>2];O=s[b+36>>2];P=s[b+24>>2];B=s[b+52>>2];i=s[c+52>>2];D=s[d+52>>2];m=s[e+52>>2];Q=s[b+40>>2];E=s[b+56>>2];n=s[c+56>>2];F=s[d+56>>2];h=s[e+56>>2];_=s[d+32>>2];$=s[d+16>>2];aa=s[d+8>>2];ba=s[d+4>>2];ca=s[d>>2];R=s[b>>2];S=s[b+16>>2];T=s[b+32>>2];U=s[b+4>>2];V=s[b+8>>2];G=s[b+48>>2];j=s[c+48>>2];H=s[d+48>>2];k=s[e+48>>2];t=o[a+8>>2];o[g+60>>2]=0;z=v(v(i-B)-v(m-D));i=v(-z);u=v(v(j-G)-v(k-H));w=v(v(n-E)-v(h-F));s[g+56>>2]=v(v(P*i)-v(V*u))-v(Q*w);s[g+52>>2]=v(v(N*i)-v(u*U))-v(w*O);s[g+48>>2]=v(v(S*i)-v(u*R))-v(w*T);l[o[o[t>>2]+64>>2]](g+80|0,t,g+48|0);h=s[b+52>>2];j=s[b+24>>2];k=s[b+20>>2];i=s[b+56>>2];n=s[b+40>>2];m=s[b+36>>2];p=s[b+48>>2];q=s[b+8>>2];r=s[b>>2];y=s[b+4>>2];A=s[b+16>>2];x=s[b+32>>2];o[g+76>>2]=0;I=i;i=s[g+80>>2];J=m;m=s[g+84>>2];K=n;n=s[g+88>>2];s[g+72>>2]=I+v(v(v(x*i)+v(J*m))+v(K*n));s[g+68>>2]=h+v(v(v(i*A)+v(m*k))+v(n*j));s[g+64>>2]=p+v(v(v(i*r)+v(m*y))+v(n*q));t=o[a+12>>2];i=s[d+20>>2];m=s[d+36>>2];n=s[d+24>>2];h=s[d+40>>2];j=s[d>>2];k=s[d+16>>2];p=s[d+32>>2];q=s[d+4>>2];r=s[d+8>>2];o[g+28>>2]=0;s[g+24>>2]=v(v(u*r)+v(z*n))+v(w*h);s[g+20>>2]=v(v(u*q)+v(z*i))+v(w*m);s[g+16>>2]=v(v(u*j)+v(z*k))+v(w*p);l[o[o[t>>2]+64>>2]](g+32|0,t,g+16|0);h=s[d+52>>2];j=s[d+24>>2];k=s[d+20>>2];i=s[d+56>>2];n=s[d+40>>2];m=s[d+36>>2];p=s[d+16>>2];q=s[d+48>>2];r=s[d+8>>2];y=s[d>>2];A=s[d+4>>2];x=s[d+32>>2];o[g+60>>2]=0;o[g+92>>2]=0;I=i;i=s[g+32>>2];J=m;m=s[g+36>>2];K=n;n=s[g+40>>2];x=v(I+v(v(v(x*i)+v(J*m))+v(K*n)));s[g+56>>2]=x;q=v(q+v(v(v(i*y)+v(m*A))+v(n*r)));s[g+48>>2]=q;i=v(h+v(v(v(i*p)+v(m*k))+v(n*j)));s[g+52>>2]=i;h=v(s[g+68>>2]-i);s[g+84>>2]=h;j=v(s[g+64>>2]-q);s[g+80>>2]=j;k=v(s[g+72>>2]-x);s[g+88>>2]=k;i=v(0);m=v(0);n=v(0);p=v(0);a:{b:{if(!(v(v(v(j*j)+v(h*h))+v(k*k))>v(9999999747378752e-20))){break b}t=32;while(1){if(!t){break b}L=o[a+8>>2];o[g+12>>2]=0;h=v(-s[g+84>>2]);j=s[g+80>>2];k=s[g+88>>2];s[g+8>>2]=v(v(P*h)-v(V*j))-v(Q*k);s[g+4>>2]=v(v(N*h)-v(U*j))-v(O*k);s[g>>2]=v(v(S*h)-v(R*j))-v(T*k);l[o[o[L>>2]+64>>2]](g+16|0,L,g);o[g+76>>2]=0;h=s[g+16>>2];j=s[g+20>>2];k=s[g+24>>2];s[g+72>>2]=E+v(v(v(T*h)+v(O*j))+v(Q*k));s[g+68>>2]=B+v(v(v(S*h)+v(N*j))+v(P*k));s[g+64>>2]=G+v(v(v(R*h)+v(U*j))+v(V*k));L=o[a+12>>2];o[g+12>>2]=0;h=s[g+80>>2];j=s[g+84>>2];k=s[g+88>>2];s[g+8>>2]=v(v(aa*h)+v(Y*j))+v(W*k);s[g+4>>2]=v(v(ba*h)+v(Z*j))+v(X*k);s[g>>2]=v(v(ca*h)+v($*j))+v(_*k);l[o[o[L>>2]+64>>2]](g+16|0,L,g);o[g+60>>2]=0;o[g+44>>2]=0;h=s[g+16>>2];j=s[g+20>>2];k=s[g+24>>2];q=v(F+v(v(v(_*h)+v(X*j))+v(W*k)));s[g+56>>2]=q;q=v(s[g+72>>2]-q);s[g+40>>2]=q;r=v(D+v(v(v($*h)+v(Z*j))+v(Y*k)));s[g+52>>2]=r;r=v(s[g+68>>2]-r);s[g+36>>2]=r;h=v(H+v(v(v(ca*h)+v(ba*j))+v(aa*k)));s[g+48>>2]=h;y=v(s[g+64>>2]-h);s[g+32>>2]=y;if(p>v(1)){break a}h=s[g+80>>2];j=s[g+84>>2];k=s[g+88>>2];A=v(v(v(y*h)+v(r*j))+v(q*k));if(!!(A>v(0))){i=v(v(v(u*h)+v(z*j))+v(w*k));if(i>=v(-1.4210854715202004e-14)){break a}m=s[b+48>>2];n=s[c+48>>2];B=s[b+52>>2];G=s[c+52>>2];E=s[b+56>>2];x=s[c+56>>2];H=s[d+48>>2];I=s[e+48>>2];D=s[d+52>>2];J=s[e+52>>2];F=s[d+56>>2];K=s[e+56>>2];o[g+44>>2]=0;s[g+40>>2]=q;s[g+36>>2]=r;s[g+32>>2]=y;p=v(p-v(A/i));i=v(v(1)-p);F=v(v(F*i)+v(p*K));D=v(v(i*D)+v(p*J));H=v(v(i*H)+v(p*I));E=v(v(i*E)+v(p*x));B=v(v(i*B)+v(p*G));G=v(v(i*m)+v(p*n));da=o[g+92>>2];m=j;n=k;i=h}if(!Hl(o[a+4>>2],g+32|0)){Ll(o[a+4>>2],g+32|0,g- -64|0,g+48|0)}if(!Jl(o[a+4>>2],g+80|0)){break b}t=t+ -1|0;h=s[g+80>>2];j=v(h*h);h=s[g+84>>2];j=v(j+v(h*h));h=s[g+88>>2];if(v(j+v(h*h))>v(9999999747378752e-20)){continue}break}}s[f+164>>2]=p;h=v(v(v(i*i)+v(m*m))+v(n*n));c:{if(!!(h>=v(1.4210854715202004e-14))){o[f+144>>2]=da;j=n;n=v(v(1)/v(C(h)));p=v(j*n);s[f+140>>2]=p;m=v(m*n);s[f+136>>2]=m;i=v(i*n);s[f+132>>2]=i;break c}o[f+132>>2]=0;o[f+136>>2]=0;o[f+140>>2]=0;o[f+144>>2]=0;p=v(0);m=v(0);i=v(0)}if(v(v(v(u*i)+v(z*m))+v(w*p))>=v(-s[f+172>>2])){break a}Gl(o[a+4>>2],g+16|0,g);a=o[g+12>>2];o[f+156>>2]=o[g+8>>2];o[f+160>>2]=a;a=o[g+4>>2];o[f+148>>2]=o[g>>2];o[f+152>>2]=a;ea=1}M=g+96|0;return ea|0}function If(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=0,G=v(0),H=0;F=p[a+180|0];a:{if(!(p[a+48|0]?!F:0)){C=s[b+52>>2];D=s[b+56>>2];m=s[a+100>>2];n=s[a+104>>2];q=s[a+108>>2];d=s[b+20>>2];e=s[b+24>>2];r=s[a+68>>2];A=s[a+84>>2];t=s[a+56>>2];u=s[a+72>>2];w=s[a+88>>2];B=s[a+60>>2];f=s[b+36>>2];x=s[a+76>>2];j=s[b+40>>2];y=s[a+92>>2];E=s[b+48>>2];h=s[b+8>>2];g=s[b>>2];i=s[b+4>>2];k=s[b+16>>2];z=s[a+52>>2];l=s[b+32>>2];o[a+884>>2]=0;o[a+868>>2]=0;o[a+852>>2]=0;o[a+836>>2]=0;s[a+864>>2]=v(v(B*l)+v(x*f))+v(y*j);s[a+860>>2]=v(v(t*l)+v(u*f))+v(w*j);s[a+856>>2]=v(v(z*l)+v(r*f))+v(A*j);s[a+848>>2]=v(v(B*k)+v(x*d))+v(y*e);s[a+844>>2]=v(v(t*k)+v(u*d))+v(w*e);s[a+840>>2]=v(v(z*k)+v(r*d))+v(A*e);s[a+832>>2]=v(v(g*B)+v(i*x))+v(h*y);s[a+828>>2]=v(v(g*t)+v(i*u))+v(h*w);s[a+824>>2]=v(v(z*g)+v(r*i))+v(A*h);s[a+880>>2]=D+v(v(v(l*m)+v(f*n))+v(j*q));s[a+876>>2]=C+v(v(v(k*m)+v(d*n))+v(e*q));s[a+872>>2]=E+v(v(v(g*m)+v(i*n))+v(h*q));d=s[c+16>>2];i=s[a+164>>2];e=s[c+20>>2];k=s[a+168>>2];f=s[c+24>>2];l=s[a+172>>2];m=v(v(v(d*i)+v(e*k))+v(f*l));n=s[a+124>>2];j=s[c+32>>2];q=s[a+140>>2];h=s[c+36>>2];r=s[a+156>>2];g=s[c+40>>2];A=v(v(v(n*j)+v(q*h))+v(r*g));t=s[a+120>>2];u=s[a+136>>2];w=s[a+152>>2];B=v(v(v(t*j)+v(u*h))+v(w*g));x=s[a+116>>2];y=s[a+132>>2];z=s[a+148>>2];C=v(v(v(x*j)+v(y*h))+v(z*g));D=v(v(v(n*d)+v(q*e))+v(r*f));E=v(v(v(t*d)+v(u*e))+v(w*f));G=v(v(v(x*d)+v(y*e))+v(z*f));g=v(g*l);j=v(v(j*i)+v(h*k));d=s[c>>2];e=s[c+4>>2];f=s[c+8>>2];i=v(v(v(d*i)+v(e*k))+v(f*l));k=v(v(v(d*n)+v(e*q))+v(f*r));h=v(v(v(d*t)+v(e*u))+v(f*w));d=v(v(v(x*d)+v(y*e))+v(z*f));break a}C=s[c+52>>2];D=s[c+56>>2];m=s[a+164>>2];n=s[a+168>>2];q=s[a+172>>2];d=s[c+20>>2];e=s[c+24>>2];r=s[a+132>>2];A=s[a+148>>2];t=s[a+120>>2];u=s[a+136>>2];w=s[a+152>>2];B=s[a+124>>2];f=s[c+36>>2];x=s[a+140>>2];j=s[c+40>>2];y=s[a+156>>2];E=s[c+48>>2];h=s[c+8>>2];g=s[c>>2];i=s[c+4>>2];k=s[c+16>>2];z=s[a+116>>2];l=s[c+32>>2];o[a+884>>2]=0;o[a+868>>2]=0;o[a+852>>2]=0;o[a+836>>2]=0;s[a+864>>2]=v(v(B*l)+v(x*f))+v(y*j);s[a+860>>2]=v(v(t*l)+v(u*f))+v(w*j);s[a+856>>2]=v(v(z*l)+v(r*f))+v(A*j);s[a+848>>2]=v(v(B*k)+v(x*d))+v(y*e);s[a+844>>2]=v(v(t*k)+v(u*d))+v(w*e);s[a+840>>2]=v(v(z*k)+v(r*d))+v(A*e);s[a+832>>2]=v(v(g*B)+v(i*x))+v(h*y);s[a+828>>2]=v(v(g*t)+v(i*u))+v(h*w);s[a+824>>2]=v(v(z*g)+v(r*i))+v(A*h);s[a+880>>2]=D+v(v(v(l*m)+v(f*n))+v(j*q));s[a+876>>2]=C+v(v(v(k*m)+v(d*n))+v(e*q));s[a+872>>2]=E+v(v(v(g*m)+v(i*n))+v(h*q));d=s[b+16>>2];i=s[a+100>>2];e=s[b+20>>2];k=s[a+104>>2];f=s[b+24>>2];l=s[a+108>>2];m=v(v(v(d*i)+v(e*k))+v(f*l));n=s[a+60>>2];j=s[b+32>>2];q=s[a+76>>2];h=s[b+36>>2];r=s[a+92>>2];g=s[b+40>>2];A=v(v(v(n*j)+v(q*h))+v(r*g));t=s[a+56>>2];u=s[a+72>>2];w=s[a+88>>2];B=v(v(v(t*j)+v(u*h))+v(w*g));x=s[a+52>>2];y=s[a+68>>2];z=s[a+84>>2];C=v(v(v(x*j)+v(y*h))+v(z*g));D=v(v(v(n*d)+v(q*e))+v(r*f));E=v(v(v(t*d)+v(u*e))+v(w*f));G=v(v(v(x*d)+v(y*e))+v(z*f));g=v(g*l);j=v(v(j*i)+v(h*k));d=s[b>>2];e=s[b+4>>2];f=s[b+8>>2];i=v(v(v(d*i)+v(e*k))+v(f*l));k=v(v(v(d*n)+v(e*q))+v(f*r));h=v(v(v(d*t)+v(e*u))+v(f*w));c=b;d=v(v(v(x*d)+v(y*e))+v(z*f))}e=s[c+56>>2];f=s[c+52>>2];s[a+936>>2]=s[c+48>>2]+i;o[a+932>>2]=0;s[a+928>>2]=A;s[a+924>>2]=B;s[a+920>>2]=C;o[a+916>>2]=0;s[a+912>>2]=D;s[a+908>>2]=E;s[a+904>>2]=G;o[a+900>>2]=0;s[a+896>>2]=k;s[a+892>>2]=h;s[a+888>>2]=d;o[a+948>>2]=0;s[a+940>>2]=m+f;s[a+944>>2]=e+v(j+g);b=o[a+876>>2];o[a+968>>2]=o[a+872>>2];o[a+972>>2]=b;b=o[a+884>>2];o[a+976>>2]=o[a+880>>2];o[a+980>>2]=b;b=o[a+948>>2];o[a+992>>2]=o[a+944>>2];o[a+996>>2]=b;b=o[a+940>>2];o[a+984>>2]=o[a+936>>2];o[a+988>>2]=b;f=s[a+840>>2];b=o[a+840>>2];e=s[a+856>>2];c=o[a+856>>2];j=s[a+824>>2];H=o[a+824>>2];o[a+964>>2]=0;o[a+960>>2]=c;o[a+956>>2]=b;o[a+952>>2]=H;b=a;b:{if(!(p[a+48|0]?0:!F)){h=s[a+976>>2];g=v(s[a+992>>2]-h);l=s[a+972>>2];i=v(s[a+988>>2]-l);m=s[a+968>>2];d=v(s[a+984>>2]-m);break b}h=s[a+976>>2];g=v(h-s[a+992>>2]);l=s[a+972>>2];i=v(l-s[a+988>>2]);m=s[a+968>>2];d=v(m-s[a+984>>2])}s[b+1016>>2]=d;o[a+1028>>2]=0;s[a+1024>>2]=g;s[a+1020>>2]=i;o[a+1012>>2]=0;k=v(v(v(d*j)+v(i*f))+v(g*e));s[a+1032>>2]=k;s[a+1008>>2]=h+v(k*e);s[a+1004>>2]=l+v(k*f);s[a+1e3>>2]=m+v(k*j);s[a+1036>>2]=v(v(d*s[a+828>>2])+v(i*s[a+844>>2]))+v(g*s[a+860>>2]);s[a+1040>>2]=v(v(d*s[a+832>>2])+v(i*s[a+848>>2]))+v(g*s[a+864>>2])}function zi(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,t=0,w=0,x=0,y=0,z=v(0),A=v(0),B=v(0);d=M-80|0;M=d;o[d+68>>2]=0;h=1;m[d+72|0]=1;o[d+60>>2]=0;o[d+64>>2]=0;o[d+48>>2]=0;o[d+52>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;e=a;g=o[b+4>>2];n=g>>>0>8?g:8;if((n|0)>=1){o[7717]=o[7717]+1;t=l[o[6606]](n<<4,16)|0;while(1){g=o[d+28>>2];j=(i<<4)+t|0;o[j>>2]=o[d+24>>2];o[j+4>>2]=g;g=o[d+36>>2];o[j+8>>2]=o[d+32>>2];o[j+12>>2]=g;i=i+1|0;if((n|0)!=(i|0)){continue}break}g=o[b+4>>2]}a:{if(!oy(e,g,o[b+8>>2],o[b+12>>2],d+20|0,t,s[b+16>>2],d+24|0)){break a}g=o[d+20>>2];if(g){z=s[d+32>>2];A=s[d+28>>2];B=s[d+24>>2];while(1){e=(f<<4)+t|0;s[e>>2]=B*s[e>>2];s[e+4>>2]=A*s[e+4>>2];s[e+8>>2]=z*s[e+8>>2];f=f+1|0;if((g|0)!=(f|0)){continue}break}}if(!py(a,t,g,d+56|0,d+4|0,o[b+20>>2])){break a}o[d+52>>2]=t;q=o[d+4>>2];o[d+48>>2]=q;w=u(q,3);o[d+44>>2]=w;o[d+40>>2]=g;if((g|0)>=1){i=0;o[7717]=o[7717]+1;x=l[o[6606]](g<<4,16)|0;while(1){f=o[d+8>>2];e=(i<<4)+x|0;o[e>>2]=o[d+4>>2];o[e+4>>2]=f;f=o[d+16>>2];o[e+8>>2]=o[d+12>>2];o[e+12>>2]=f;i=i+1|0;if((g|0)!=(i|0)){continue}break}}i=o[d+68>>2];ny(a,t,g,x,d+20|0,i,w);b:{c:{d:{e:{if(m[b|0]&1){m[c|0]=0;k=o[d+20>>2];o[c+4>>2]=k;f=o[c+12>>2];if((f|0)<(k|0)){if(o[c+16>>2]<(k|0)){f:{if(!k){a=0;e=f;break f}o[7717]=o[7717]+1;a=l[o[6606]](k<<4,16)|0;e=o[c+12>>2]}if((e|0)>=1){h=0;while(1){g=h<<4;j=g+a|0;y=g+o[c+20>>2]|0;g=o[y+4>>2];o[j>>2]=o[y>>2];o[j+4>>2]=g;g=o[y+12>>2];o[j+8>>2]=o[y+8>>2];o[j+12>>2]=g;h=h+1|0;if((e|0)!=(h|0)){continue}break}}h=o[c+20>>2];if(h){if(p[c+24|0]){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}o[c+20>>2]=0}o[c+20>>2]=a;o[c+16>>2]=k;m[c+24|0]=1}while(1){a=o[d+8>>2];e=o[c+20>>2]+(f<<4)|0;o[e>>2]=o[d+4>>2];o[e+4>>2]=a;a=o[d+16>>2];o[e+8>>2]=o[d+12>>2];o[e+12>>2]=a;f=f+1|0;if((k|0)!=(f|0)){continue}break}}o[c+12>>2]=k;o[c+32>>2]=w;o[c+28>>2]=q;e=o[c+40>>2];if((e|0)>=(w|0)){break c}if(o[c+44>>2]>=(w|0)){a=o[c+48>>2];break d}f=0;h=e;a=0;if(q){o[7717]=o[7717]+1;a=l[o[6606]](u(q,12),16)|0;h=o[c+40>>2]}n=o[c+48>>2];if((h|0)>=1){while(1){g=f<<2;o[g+a>>2]=o[g+n>>2];f=f+1|0;if((h|0)!=(f|0)){continue}break e}}if(n){break e}o[c+48>>2]=a;o[c+44>>2]=w;m[c+52|0]=1;break d}m[c|0]=1;k=o[d+20>>2];o[c+4>>2]=k;f=o[c+12>>2];if((f|0)<(k|0)){if(o[c+16>>2]<(k|0)){g:{if(!k){a=f;break g}o[7717]=o[7717]+1;y=l[o[6606]](k<<4,16)|0;a=o[c+12>>2]}if((a|0)>=1){h=0;while(1){e=h<<4;n=e+y|0;g=n;j=e+o[c+20>>2]|0;e=o[j+4>>2];o[g>>2]=o[j>>2];o[g+4>>2]=e;e=o[j+12>>2];o[g+8>>2]=o[j+8>>2];o[g+12>>2]=e;h=h+1|0;if((a|0)!=(h|0)){continue}break}}a=o[c+20>>2];if(a){if(p[c+24|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+20>>2]=0}o[c+20>>2]=y;o[c+16>>2]=k;m[c+24|0]=1}while(1){a=o[d+8>>2];e=o[c+20>>2]+(f<<4)|0;o[e>>2]=o[d+4>>2];o[e+4>>2]=a;a=o[d+16>>2];o[e+8>>2]=o[d+12>>2];o[e+12>>2]=a;f=f+1|0;if((k|0)!=(f|0)){continue}break}}o[c+12>>2]=k;j=q<<2;o[c+32>>2]=j;o[c+28>>2]=q;e=o[c+40>>2];if((j|0)>(e|0)){h:{if(o[c+44>>2]>=(j|0)){a=o[c+48>>2];break h}f=0;h=e;a=0;if(j){o[7717]=o[7717]+1;a=l[o[6606]](q<<4,16)|0;h=o[c+40>>2]}n=o[c+48>>2];i:{if((h|0)>=1){while(1){g=f<<2;o[g+a>>2]=o[g+n>>2];f=f+1|0;if((h|0)!=(f|0)){continue}break i}}if(n){break i}o[c+48>>2]=a;o[c+44>>2]=j;m[c+52|0]=1;break h}if(p[c+52|0]){if(n){o[7718]=o[7718]+1;l[o[6607]](n)}}o[c+48>>2]=a;m[c+52|0]=1;o[c+44>>2]=j}$((e<<2)+a|0,0,j-e<<2)}o[c+40>>2]=j;ja(o[c+20>>2],x,o[d+20>>2]<<4);if(!q){break b}f=o[c+48>>2];h=0;while(1){o[f>>2]=3;c=f;j:{if(p[b|0]&2){o[f+4>>2]=o[i+8>>2];o[f+8>>2]=o[i+4>>2];a=i;break j}o[f+4>>2]=o[i>>2];o[f+8>>2]=o[i+4>>2];a=i+8|0}o[c+12>>2]=o[a>>2];i=i+12|0;f=f+16|0;h=h+1|0;if(h>>>0<r[d+48>>2]){continue}break}break b}if(p[c+52|0]){if(n){o[7718]=o[7718]+1;l[o[6607]](n)}}o[c+48>>2]=a;m[c+52|0]=1;o[c+44>>2]=w}h=a;a=e<<2;$(h+a|0,0,u(q,12)-a|0)}o[c+40>>2]=w;ja(o[c+20>>2],x,o[d+20>>2]<<4);if(p[b|0]&2){if(!q){break b}f=o[c+48>>2];h=0;while(1){o[f>>2]=o[i+8>>2];o[f+4>>2]=o[i+4>>2];o[f+8>>2]=o[i>>2];i=i+12|0;f=f+12|0;h=h+1|0;if(h>>>0<r[d+48>>2]){continue}break}break b}ja(o[c+48>>2],i,u(q,12))}if(o[d+60>>2]){a=o[d+68>>2];if(a){if(p[d+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+68>>2]=0}o[d+68>>2]=0;m[d+72|0]=1;o[d+60>>2]=0;o[d+64>>2]=0}h=0;o[d+52>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;if(!x){break a}if(x){o[7718]=o[7718]+1;l[o[6607]](x)}}if(t){if(t){o[7718]=o[7718]+1;l[o[6607]](t)}}a=o[d+68>>2];if(a){if(p[d+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+68>>2]=0}M=d+80|0;return h}function fJ(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=0,N=0,O=0,P=v(0),Q=v(0),R=0,S=0,T=0;f=M-176|0;M=f;g=p[a+28|0];L=g?b:c;R=g?c:b;S=o[R+4>>2];if(o[S+68>>2]!=o[a+40>>2]){N=o[a+12>>2];if((N|0)>=1){g=0;while(1){O=g<<2;h=o[O+o[a+20>>2]>>2];if(h){l[o[o[h>>2]>>2]](h)|0;h=o[a+4>>2];l[o[o[h>>2]+60>>2]](h,o[o[a+20>>2]+O>>2])}g=g+1|0;if((N|0)!=(g|0)){continue}break}}il(a,b,c)}h=o[S+64>>2];g=o[a+20>>2];b=o[a+4>>2];o[f+172>>2]=o[a+32>>2];o[f+168>>2]=g;o[f+164>>2]=e;o[f+160>>2]=d;o[f+156>>2]=b;o[f+152>>2]=L;o[f+148>>2]=R;o[f+144>>2]=10428;o[f+60>>2]=0;o[f+52>>2]=0;o[f+56>>2]=0;m[f+64|0]=1;d=o[a+12>>2];a:{if((d|0)<1){break a}c=0;while(1){b=o[(c<<2)+g>>2];if(b){l[o[o[b>>2]+16>>2]](b,f+48|0);d=0;g=o[f+52>>2];if((g|0)>0){while(1){b=o[o[f+60>>2]+(d<<2)>>2];if(o[b+748>>2]){o[e+4>>2]=b;N=o[b+740>>2];O=o[o[e+8>>2]+8>>2];g=(N|0)==(O|0);T=b;b=o[o[e+12>>2]+8>>2];sa(T,(g?N:b)+4|0,(g?b:O)+4|0);o[e+4>>2]=0;g=o[f+52>>2]}d=d+1|0;if((d|0)<(g|0)){continue}break}}if((g|0)<=-1){if(o[f+56>>2]<=-1){b=o[f+60>>2];if(b){if(p[f+64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[f+60>>2]=0}m[f+64|0]=1;o[f+56>>2]=0;o[f+60>>2]=0}while(1){o[o[f+60>>2]+(g<<2)>>2]=0;b=g+1|0;d=b>>>0>=g>>>0;g=b;if(d){continue}break}}o[f+52>>2]=0;d=o[a+12>>2]}c=c+1|0;if((c|0)<(d|0)){g=o[a+20>>2];continue}break}b=o[f+60>>2];if(!b){break a}if(p[f+64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[f+60>>2]=0}b:{c:{if(h){b=o[R+12>>2];y=s[b+52>>2];z=s[b+56>>2];c=o[L+12>>2];A=s[c+52>>2];B=s[c+56>>2];i=s[b+20>>2];j=s[b+36>>2];C=s[c+20>>2];D=s[c+36>>2];E=s[c+24>>2];k=s[b+24>>2];F=s[c+40>>2];n=s[b+40>>2];G=s[c+32>>2];q=s[b+32>>2];H=s[c>>2];r=s[b>>2];I=s[c+16>>2];t=s[b+16>>2];J=s[b+48>>2];K=s[c+48>>2];w=s[b+4>>2];P=s[c+4>>2];Q=s[c+8>>2];x=s[b+8>>2];o[f+108>>2]=0;o[f+92>>2]=0;o[f+76>>2]=0;s[f+88>>2]=v(v(x*Q)+v(k*E))+v(n*F);s[f+84>>2]=v(v(x*P)+v(k*C))+v(n*D);s[f+72>>2]=v(v(w*Q)+v(i*E))+v(j*F);s[f+68>>2]=v(v(w*P)+v(i*C))+v(j*D);y=v(-y);s[f+104>>2]=v(v(v(k*y)-v(x*J))-v(n*z))+v(v(v(x*K)+v(k*A))+v(n*B));s[f+100>>2]=v(v(v(i*y)-v(w*J))-v(j*z))+v(v(v(w*K)+v(i*A))+v(j*B));o[f+60>>2]=0;s[f+48>>2]=v(v(r*H)+v(t*I))+v(q*G);s[f+80>>2]=v(v(x*H)+v(k*I))+v(n*G);s[f+64>>2]=v(v(w*H)+v(i*I))+v(j*G);s[f+56>>2]=v(v(r*Q)+v(t*E))+v(q*F);s[f+52>>2]=v(v(r*P)+v(t*C))+v(q*D);s[f+96>>2]=v(v(v(t*y)-v(r*J))-v(q*z))+v(v(v(r*K)+v(t*A))+v(q*B));b=o[L+4>>2];l[o[o[b>>2]+8>>2]](b,f+48|0,f+128|0,f+112|0);b=o[f+140>>2];o[f+24>>2]=o[f+136>>2];o[f+28>>2]=b;b=o[f+124>>2];o[f+40>>2]=o[f+120>>2];o[f+44>>2]=b;b=o[f+116>>2];o[f+32>>2]=o[f+112>>2];o[f+36>>2]=b;b=o[f+132>>2];o[f+16>>2]=o[f+128>>2];o[f+20>>2]=b;Jb(h,o[h>>2],f+16|0,f+144|0);break c}b=o[a+12>>2];if((b|0)<1){break b}g=0;while(1){hl(f+144|0,o[(o[S+24>>2]+u(g,80)|0)+64>>2],g);g=g+1|0;if((g|0)!=(b|0)){continue}break}}b=o[a+12>>2]}if((b|0)>=1){e=0;while(1){g=e<<2;d:{if(!o[g+o[a+20>>2]>>2]){break d}c=o[S+24>>2]+u(e,80)|0;h=o[c+64>>2];d=o[R+12>>2];P=s[d+52>>2];Q=s[d+56>>2];z=s[c+48>>2];A=s[c+52>>2];B=s[c+56>>2];C=s[c+4>>2];D=s[c+20>>2];E=s[c+36>>2];F=s[c+8>>2];G=s[c+24>>2];H=s[c+40>>2];i=s[d+20>>2];j=s[d+24>>2];I=s[c>>2];J=s[c+16>>2];k=s[d+36>>2];K=s[c+32>>2];n=s[d+40>>2];y=s[d+48>>2];q=s[d+8>>2];r=s[d>>2];t=s[d+4>>2];w=s[d+16>>2];x=s[d+32>>2];d=0;o[f+108>>2]=0;o[f+92>>2]=0;o[f+76>>2]=0;o[f+60>>2]=0;s[f+80>>2]=v(v(x*I)+v(k*J))+v(n*K);s[f+64>>2]=v(v(w*I)+v(i*J))+v(j*K);s[f+48>>2]=v(v(r*I)+v(t*J))+v(q*K);s[f+88>>2]=v(v(x*F)+v(k*G))+v(n*H);s[f+84>>2]=v(v(x*C)+v(k*D))+v(n*E);s[f+72>>2]=v(v(w*F)+v(i*G))+v(j*H);s[f+68>>2]=v(v(w*C)+v(i*D))+v(j*E);s[f+56>>2]=v(v(r*F)+v(t*G))+v(q*H);s[f+52>>2]=v(v(r*C)+v(t*D))+v(q*E);s[f+104>>2]=Q+v(v(v(x*z)+v(k*A))+v(n*B));s[f+100>>2]=P+v(v(v(w*z)+v(i*A))+v(j*B));s[f+96>>2]=y+v(v(v(r*z)+v(t*A))+v(q*B));l[o[o[h>>2]+8>>2]](h,f+48|0,f+16|0,f+128|0);c=o[L+4>>2];l[o[o[c>>2]+8>>2]](c,o[L+12>>2],f+112|0,f);c=0;e:{if(s[f+16>>2]>s[f>>2]){break e}c=0;if(s[f+128>>2]<s[f+112>>2]){break e}c=1}d=s[f+136>>2]<s[f+120>>2]|s[f+24>>2]>s[f+8>>2]?d:c;if(d^1?0:!(s[f+132>>2]<s[f+116>>2]|s[f+20>>2]>s[f+4>>2])){break d}c=o[g+o[a+20>>2]>>2];l[o[o[c>>2]>>2]](c)|0;c=o[a+4>>2];l[o[o[c>>2]+60>>2]](c,o[g+o[a+20>>2]>>2]);o[g+o[a+20>>2]>>2]=0}e=e+1|0;if((e|0)!=(b|0)){continue}break}}M=f+176|0}function xi(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),M=v(0),N=0;B=o[a+4>>2];o[b>>2]=o[a>>2];o[b+4>>2]=B;B=o[a+12>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=B;B=o[a+28>>2];o[b+24>>2]=o[a+24>>2];o[b+28>>2]=B;B=o[a+20>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=B;B=o[a+36>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=B;B=o[a+44>>2];o[b+40>>2]=o[a+40>>2];o[b+44>>2]=B;e=s[a+8>>2];f=s[a+20>>2];l=s[a+40>>2];g=s[a+24>>2];i=s[a+36>>2];j=s[a+4>>2];m=s[a+32>>2];n=s[a+16>>2];h=s[a>>2];o[c+44>>2]=0;o[c+28>>2]=0;o[c+12>>2]=0;k=v(v(f*l)-v(g*i));p=v(v(g*m)-v(l*n));q=v(v(i*n)-v(f*m));d=v(v(1)/v(v(v(h*k)+v(j*p))+v(e*q)));t=v(v(v(i*e)-v(l*j))*d);s[c+4>>2]=t;u=v(v(v(g*j)-v(f*e))*d);s[c+8>>2]=u;p=v(p*d);s[c+16>>2]=p;x=v(v(v(l*h)-v(m*e))*d);s[c+20>>2]=x;y=v(v(v(n*e)-v(g*h))*d);s[c+24>>2]=y;q=v(q*d);s[c+32>>2]=q;z=v(v(v(m*j)-v(i*h))*d);s[c+36>>2]=z;A=v(v(v(f*h)-v(n*j))*d);s[c+40>>2]=A;k=v(k*d);s[c>>2]=k;a:{b:{if(!o[7660]){break b}while(1){d=v(w(k));e=v(w(p));j=v(w(q));h=v(v(d+e)+j);f=v(w(t));l=v(w(x));g=v(w(z));i=v(v(f+l)+g);h=h>i?h:i;i=v(w(u));m=v(w(y));n=v(w(A));D=v(v(i+m)+n);d=v(v(d+f)+i);e=v(v(e+l)+m);d=d>e?d:e;e=v(v(j+g)+n);e=v((h>D?h:D)*(d>e?d:e));if(e<v(1.1920928955078125e-7)){break b}D=s[b>>2];f=v(w(D));j=s[b+16>>2];g=v(w(j));h=s[b+32>>2];n=v(w(h));d=v(v(f+g)+n);E=s[b+4>>2];G=v(w(E));m=s[b+20>>2];H=v(w(m));l=s[b+36>>2];I=v(w(l));i=v(v(G+H)+I);J=d>i?d:i;F=s[b+8>>2];K=v(w(F));i=s[b+24>>2];L=v(w(i));d=s[b+40>>2];M=v(w(d));C=v(v(K+L)+M);J=J>C?J:C;f=v(v(f+G)+K);g=v(v(g+H)+L);f=f>g?f:g;g=v(v(n+I)+M);f=v(J*(f>g?f:g));if(f<v(1.1920928955078125e-7)){break b}o[b+44>>2]=0;o[b+28>>2]=0;o[b+12>>2]=0;C=d;e=kf(v(e/f),v(.25));d=v(e+v(-2));e=v(v(1)/e);G=v(v(v(C*d)+v(e*A))*v(.5));f=v(C+G);s[b+40>>2]=f;H=v(v(v(l*d)+v(e*y))*v(.5));l=v(l+H);s[b+36>>2]=l;I=v(v(v(h*d)+v(e*u))*v(.5));g=v(h+I);s[b+32>>2]=g;K=v(v(v(i*d)+v(e*z))*v(.5));i=v(i+K);s[b+24>>2]=i;L=v(v(v(m*d)+v(e*x))*v(.5));m=v(m+L);s[b+20>>2]=m;M=v(v(v(j*d)+v(e*t))*v(.5));n=v(j+M);s[b+16>>2]=n;C=F;F=v(v(v(F*d)+v(e*q))*v(.5));j=v(C+F);s[b+8>>2]=j;C=E;E=v(v(v(E*d)+v(e*p))*v(.5));h=v(C+E);s[b+4>>2]=h;C=D;D=v(v(v(D*d)+v(e*k))*v(.5));e=v(C+D);s[b>>2]=e;o[c+44>>2]=0;o[c+28>>2]=0;o[c+12>>2]=0;t=v(v(n*l)-v(m*g));k=v(v(m*f)-v(i*l));u=v(v(i*g)-v(n*f));d=v(v(1)/v(v(j*t)+v(v(e*k)+v(h*u))));A=v(v(v(e*m)-v(h*n))*d);s[c+40>>2]=A;z=v(v(v(h*g)-v(e*l))*d);s[c+36>>2]=z;q=v(t*d);s[c+32>>2]=q;y=v(v(v(j*n)-v(e*i))*d);s[c+24>>2]=y;x=v(v(v(e*f)-v(j*g))*d);s[c+20>>2]=x;p=v(u*d);s[c+16>>2]=p;u=v(v(v(h*i)-v(j*m))*d);s[c+8>>2]=u;t=v(v(v(j*l)-v(h*f))*d);s[c+4>>2]=t;k=v(k*d);s[c>>2]=k;d=v(v(v(w(D))+v(w(M)))+v(w(I)));e=v(v(v(w(E))+v(w(L)))+v(w(H)));d=d>e?d:e;e=v(v(v(w(F))+v(w(K)))+v(w(G)));if((d>e?d:e)<=v(J*s[7659])){break a}N=N+1|0;if(N>>>0<r[7660]){continue}break}}d=s[b+36>>2];e=s[b+20>>2];j=s[b+40>>2];h=s[b+24>>2];f=s[b+4>>2];l=s[a+36>>2];g=s[a+20>>2];i=s[a+4>>2];m=s[a+40>>2];n=s[a+24>>2];t=s[a+8>>2];u=s[b+8>>2];p=s[a+32>>2];x=s[b+32>>2];y=s[a>>2];q=s[b>>2];z=s[a+16>>2];A=s[b+16>>2];o[c+44>>2]=0;o[c+28>>2]=0;o[c+12>>2]=0;k=v(v(v(q*y)+v(A*z))+v(x*p));s[c>>2]=v(k+k)*v(.5);k=v(v(v(u*t)+v(h*n))+v(j*m));s[c+40>>2]=v(k+k)*v(.5);k=v(v(v(v(v(f*t)+v(e*n))+v(d*m))+v(v(v(u*i)+v(h*g))+v(j*l)))*v(.5));s[c+36>>2]=k;j=v(v(v(v(v(q*t)+v(A*n))+v(x*m))+v(v(v(u*y)+v(h*z))+v(j*p)))*v(.5));s[c+32>>2]=j;s[c+24>>2]=k;h=v(v(v(f*i)+v(e*g))+v(d*l));s[c+20>>2]=v(h+h)*v(.5);d=v(v(v(v(v(q*i)+v(A*g))+v(x*l))+v(v(v(f*y)+v(e*z))+v(d*p)))*v(.5));s[c+16>>2]=d;s[c+8>>2]=j;s[c+4>>2]=d;return}d=s[b+32>>2];e=s[b>>2];j=s[b+16>>2];h=s[a+32>>2];f=s[a>>2];l=s[a+16>>2];g=s[b+36>>2];i=s[b+4>>2];m=s[b+20>>2];n=s[a+36>>2];t=s[a+4>>2];u=s[a+20>>2];p=s[a+40>>2];x=s[b+40>>2];y=s[a+8>>2];q=s[b+8>>2];z=s[a+24>>2];A=s[b+24>>2];o[c+44>>2]=0;o[c+28>>2]=0;o[c+12>>2]=0;k=v(v(v(q*y)+v(A*z))+v(x*p));s[c+40>>2]=v(k+k)*v(.5);k=v(v(v(v(v(i*y)+v(m*z))+v(g*p))+v(v(v(q*t)+v(A*u))+v(x*n)))*v(.5));s[c+36>>2]=k;p=v(v(v(v(v(e*y)+v(j*z))+v(d*p))+v(v(v(q*f)+v(A*l))+v(x*h)))*v(.5));s[c+32>>2]=p;s[c+24>>2]=k;x=v(v(v(i*t)+v(m*u))+v(g*n));s[c+20>>2]=v(x+x)*v(.5);g=v(v(v(v(v(e*t)+v(j*u))+v(d*n))+v(v(v(i*f)+v(m*l))+v(g*h)))*v(.5));s[c+16>>2]=g;s[c+8>>2]=p;s[c+4>>2]=g;d=v(v(v(e*f)+v(j*l))+v(d*h));s[c>>2]=v(d+d)*v(.5)}function ID(a,b){var c=0,d=0,e=0,f=0,g=v(0),h=0,i=0,j=v(0),k=v(0),r=v(0),t=v(0),w=v(0),x=0,A=0,B=0,C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0);c=M-464|0;M=c;ia(18323);ia(18348);d=o[a+316>>2];if(o[a+308>>2]>=1){while(1){e=o[a+24>>2];l[o[o[e>>2]+16>>2]](e,o[(i<<2)+d>>2]);d=o[a+316>>2];i=i+1|0;if((i|0)<o[a+308>>2]){continue}break}}if(d){if(p[a+320|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+316>>2]=0}o[a+316>>2]=0;o[a+308>>2]=0;o[a+312>>2]=0;m[a+320|0]=1;ga();if(o[a+232>>2]>=1){x=c- -64|0;i=0;while(1){e=o[o[a+240>>2]+(i<<2)>>2];o[e+244>>2]=1065353216;a:{b:{switch(o[e+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}if(p[e+204|0]&3){break a}Od(e,b,c+400|0);if(!p[a+44|0]){break a}g=s[e+252>>2];g=v(g*g);if(g==v(0)){break a}j=g;g=v(s[c+448>>2]-s[e+52>>2]);k=v(g*g);g=v(s[c+452>>2]-s[e+56>>2]);k=v(k+v(g*g));g=v(s[c+456>>2]-s[e+60>>2]);if(!(j<v(k+v(g*g)))){break a}ia(18385);if(o[o[e+192>>2]+4>>2]<=19){o[7312]=o[7312]+1;d=o[a+68>>2];d=l[o[o[d>>2]+36>>2]](d)|0;f=o[a+24>>2];o[c+308>>2]=1065353216;o[c+312>>2]=-65535;h=o[e+64>>2];o[c+324>>2]=o[e+60>>2];o[c+328>>2]=h;h=o[e+56>>2];o[c+316>>2]=o[e+52>>2];o[c+320>>2]=h;h=o[c+460>>2];o[c+340>>2]=o[c+456>>2];o[c+344>>2]=h;h=o[c+452>>2];o[c+332>>2]=o[c+448>>2];o[c+336>>2]=h;o[c+380>>2]=0;o[c+304>>2]=18736;o[c+392>>2]=d;o[c+396>>2]=f;o[c+388>>2]=0;o[c+384>>2]=e;f=o[e+248>>2];d=c+248|0;o[d+4>>2]=35;o[d+8>>2]=0;o[d>>2]=13316;o[d+44>>2]=1025758986;o[d+20>>2]=1065353216;o[d+24>>2]=0;o[d+12>>2]=1065353216;o[d+16>>2]=1065353216;o[d>>2]=13444;o[c+292>>2]=f;o[c+276>>2]=f;o[c+252>>2]=8;o[c+248>>2]=11556;o[c+388>>2]=o[a+56>>2];d=o[e+188>>2];n[c+312>>1]=q[d+4>>1];n[c+314>>1]=q[d+6>>1];d=o[c+412>>2];o[c+192>>2]=o[c+408>>2];o[c+196>>2]=d;d=o[c+404>>2];o[c+184>>2]=o[c+400>>2];o[c+188>>2]=d;d=o[c+428>>2];o[c+208>>2]=o[c+424>>2];o[c+212>>2]=d;d=o[c+420>>2];o[c+200>>2]=o[c+416>>2];o[c+204>>2]=d;d=o[c+444>>2];o[c+224>>2]=o[c+440>>2];o[c+228>>2]=d;d=o[c+436>>2];o[c+216>>2]=o[c+432>>2];o[c+220>>2]=d;d=o[c+460>>2];o[c+240>>2]=o[c+456>>2];o[c+244>>2]=d;d=o[c+452>>2];o[c+232>>2]=o[c+448>>2];o[c+236>>2]=d;d=e+4|0;f=o[d+12>>2];o[c+192>>2]=o[d+8>>2];o[c+196>>2]=f;f=o[d+4>>2];o[c+184>>2]=o[d>>2];o[c+188>>2]=f;f=o[e+32>>2];o[c+208>>2]=o[e+28>>2];o[c+212>>2]=f;f=o[e+24>>2];o[c+200>>2]=o[e+20>>2];o[c+204>>2]=f;f=o[e+48>>2];o[c+224>>2]=o[e+44>>2];o[c+228>>2]=f;f=o[e+40>>2];o[c+216>>2]=o[e+36>>2];o[c+220>>2]=f;Kb(a,c+248|0,d,c+184|0,c+304|0,v(0));g=s[c+308>>2];if(!!(g<v(1))){r=v(g*v(s[c+452>>2]-s[e+56>>2]));t=v(g*v(s[c+448>>2]-s[e+52>>2]));w=v(g*v(s[c+456>>2]-s[e+60>>2]));O=v(v(v(r*v(-s[c+352>>2]))-v(t*s[c+348>>2]))-v(w*s[c+356>>2]));d=o[a+24>>2];h=l[o[o[d>>2]+12>>2]](d,e,o[c+380>>2])|0;f=o[a+308>>2];c:{if((f|0)!=o[a+312>>2]){break c}A=f?f<<1:1;if((f|0)>=(A|0)){break c}d=0;B=0;if(A){o[7717]=o[7717]+1;B=l[o[6606]](A<<2,16)|0;f=o[a+308>>2]}if((f|0)>=1){while(1){E=d<<2;o[E+B>>2]=o[o[a+316>>2]+E>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[a+316>>2];if(d){if(p[a+320|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[a+308>>2]}o[a+316>>2]=0}o[a+316>>2]=B;m[a+320|0]=1;o[a+312>>2]=A}o[o[a+316>>2]+(f<<2)>>2]=h;o[a+308>>2]=f+1;d=o[c+380>>2];F=s[d+20>>2];G=s[d+36>>2];H=s[d+40>>2];I=s[d+8>>2];J=s[d+24>>2];g=s[d+60>>2];P=s[d+56>>2];C=s[d+52>>2];K=s[d+44>>2];L=s[d+12>>2];j=s[d+28>>2];N=s[d+4>>2];k=s[e+60>>2];D=s[e+52>>2];Q=s[e+56>>2];o[c+8>>2]=0;o[c+12>>2]=0;o[c+28>>2]=0;o[c>>2]=0;o[c+4>>2]=0;t=v(t+D);r=v(r+Q);w=v(w+k);D=v(v(v(L*t)+v(j*r))+v(K*w));k=j;j=v(-P);s[c+24>>2]=D+v(v(v(k*j)-v(L*C))-v(K*g));s[c+20>>2]=v(v(v(t*I)+v(r*J))+v(w*H))+v(v(v(J*j)-v(I*C))-v(H*g));s[c+16>>2]=v(v(v(t*N)+v(r*F))+v(w*G))+v(v(v(F*j)-v(N*C))-v(G*g));d=o[c+352>>2];o[x>>2]=o[c+348>>2];o[x+4>>2]=d;d=o[c+360>>2];o[x+8>>2]=o[c+356>>2];o[x+12>>2]=d;m[c+116|0]=0;o[c+112>>2]=0;o[c+92>>2]=0;o[c+84>>2]=0;o[c+88>>2]=0;s[c+80>>2]=O;o[c+144>>2]=0;o[c+148>>2]=0;o[c+136>>2]=0;o[c+140>>2]=0;o[c+128>>2]=0;o[c+132>>2]=0;o[c+120>>2]=0;o[c+124>>2]=0;d=u(Fg(h,c),184)+h|0;o[d+96>>2]=0;s[d+88>>2]=y(v(z(v(s[e+224>>2]*s[o[c+380>>2]+224>>2]),v(-10))),v(10));f=o[e+56>>2];o[d+52>>2]=o[e+52>>2];o[d+56>>2]=f;f=o[e+64>>2];o[d+60>>2]=o[e+60>>2];o[d+64>>2]=f;o[d+48>>2]=0;s[d+44>>2]=w;s[d+40>>2]=r;s[d+36>>2]=t}}ga()}i=i+1|0;if((i|0)<o[a+232>>2]){continue}break}}ga();M=c+464|0}function kE(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=M+ -64|0;M=j;s[a+20>>2]=t[b+32>>3];s[a+24>>2]=t[b+40>>3];s[a+28>>2]=t[b+48>>3];s[a+32>>2]=t[b+56>>3];s[a+4>>2]=t[b>>3];s[a+8>>2]=t[b+8>>3];s[a+12>>2]=t[b+16>>3];s[a+16>>2]=t[b+24>>3];s[a+36>>2]=t[b+64>>3];s[a+40>>2]=t[b+72>>3];s[a+44>>2]=t[b+80>>3];s[a+48>>2]=t[b+88>>3];o[a+56>>2]=o[b+96>>2];m[a+60|0]=o[b+100>>2]!=0;i=o[b+104>>2];d=j;o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d>>2]=0;o[d+4>>2]=0;h=o[a+88>>2];if((h|0)<(i|0)){if(o[a+92>>2]<(i|0)){if(i){o[7717]=o[7717]+1;k=l[o[6606]](i<<6,16)|0;d=o[a+88>>2]}else{d=h}if((d|0)>=1){while(1){c=e<<6;g=c+k|0;f=c+o[a+96>>2]|0;c=o[f+4>>2];o[g>>2]=o[f>>2];o[g+4>>2]=c;c=o[f+60>>2];o[g+56>>2]=o[f+56>>2];o[g+60>>2]=c;c=o[f+52>>2];o[g+48>>2]=o[f+48>>2];o[g+52>>2]=c;c=o[f+44>>2];o[g+40>>2]=o[f+40>>2];o[g+44>>2]=c;c=o[f+36>>2];o[g+32>>2]=o[f+32>>2];o[g+36>>2]=c;c=o[f+28>>2];o[g+24>>2]=o[f+24>>2];o[g+28>>2]=c;c=o[f+20>>2];o[g+16>>2]=o[f+16>>2];o[g+20>>2]=c;c=o[f+12>>2];o[g+8>>2]=o[f+8>>2];o[g+12>>2]=c;e=e+1|0;if((d|0)!=(e|0)){continue}break}}d=o[a+96>>2];if(d){if(p[a+100|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+96>>2]=0}o[a+96>>2]=k;o[a+92>>2]=i;m[a+100|0]=1}while(1){d=j;e=o[d+4>>2];c=o[a+96>>2]+(h<<6)|0;o[c>>2]=o[d>>2];o[c+4>>2]=e;e=o[d+60>>2];o[c+56>>2]=o[d+56>>2];o[c+60>>2]=e;e=o[d+52>>2];o[c+48>>2]=o[d+48>>2];o[c+52>>2]=e;e=o[d+44>>2];o[c+40>>2]=o[d+40>>2];o[c+44>>2]=e;e=o[d+36>>2];o[c+32>>2]=o[d+32>>2];o[c+36>>2]=e;e=o[d+28>>2];o[c+24>>2]=o[d+24>>2];o[c+28>>2]=e;e=o[d+20>>2];o[c+16>>2]=o[d+16>>2];o[c+20>>2]=e;e=o[d+12>>2];o[c+8>>2]=o[d+8>>2];o[c+12>>2]=e;h=h+1|0;if((i|0)!=(h|0)){continue}break}}o[a+88>>2]=i;if((i|0)>=1){d=o[a+96>>2];e=o[b+112>>2];h=0;while(1){c=d+(h<<6)|0;s[c+16>>2]=t[e+32>>3];s[c+20>>2]=t[e+40>>3];s[c+24>>2]=t[e+48>>3];s[c+28>>2]=t[e+56>>3];s[c>>2]=t[e>>3];s[c+4>>2]=t[e+8>>3];s[c+8>>2]=t[e+16>>3];s[c+12>>2]=t[e+24>>3];o[c+32>>2]=o[e+64>>2];o[c+36>>2]=o[e+68>>2];o[c+40>>2]=o[e+72>>2];e=e+80|0;h=h+1|0;if((i|0)!=(h|0)){continue}break}}f=o[b+108>>2];o[j+8>>2]=0;o[j+12>>2]=0;o[j>>2]=0;o[j+4>>2]=0;e=o[a+128>>2];if((e|0)<(f|0)){if(o[a+132>>2]<(f|0)){a:{if(!f){k=0;d=e;break a}o[7717]=o[7717]+1;k=l[o[6606]](f<<4,16)|0;d=o[a+128>>2]}if((d|0)>=1){h=0;while(1){c=h<<4;i=c+k|0;g=c+o[a+136>>2]|0;c=o[g+4>>2];o[i>>2]=o[g>>2];o[i+4>>2]=c;c=o[g+12>>2];o[i+8>>2]=o[g+8>>2];o[i+12>>2]=c;h=h+1|0;if((d|0)!=(h|0)){continue}break}}d=o[a+136>>2];if(d){if(p[a+140|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+136>>2]=0}o[a+136>>2]=k;o[a+132>>2]=f;m[a+140|0]=1}while(1){d=o[j+4>>2];c=o[a+136>>2]+(e<<4)|0;o[c>>2]=o[j>>2];o[c+4>>2]=d;d=o[j+12>>2];o[c+8>>2]=o[j+8>>2];o[c+12>>2]=d;e=e+1|0;if((f|0)!=(e|0)){continue}break}}o[a+128>>2]=f;if((f|0)>=1){d=o[a+136>>2];e=o[b+116>>2];h=0;while(1){c=d+(h<<4)|0;o[c+12>>2]=o[e+12>>2];n[c+6>>1]=q[e+6>>1];n[c+8>>1]=q[e+8>>1];n[c+10>>1]=q[e+10>>1];n[c>>1]=q[e>>1];n[c+2>>1]=q[e+2>>1];n[c+4>>1]=q[e+4>>1];e=e+16|0;h=h+1|0;if((f|0)!=(h|0)){continue}break}}o[a+144>>2]=o[b+120>>2];h=o[a+152>>2];f=o[b+124>>2];if((h|0)<(f|0)){if(o[a+156>>2]<(f|0)){b:{if(!f){k=0;d=h;break b}o[7717]=o[7717]+1;k=l[o[6606]](f<<5,16)|0;d=o[a+152>>2]}if((d|0)>=1){e=0;while(1){c=e<<5;i=c+k|0;g=c+o[a+160>>2]|0;c=o[g+4>>2];o[i>>2]=o[g>>2];o[i+4>>2]=c;c=o[g+28>>2];o[i+24>>2]=o[g+24>>2];o[i+28>>2]=c;c=o[g+20>>2];o[i+16>>2]=o[g+16>>2];o[i+20>>2]=c;c=o[g+12>>2];o[i+8>>2]=o[g+8>>2];o[i+12>>2]=c;e=e+1|0;if((d|0)!=(e|0)){continue}break}}d=o[a+160>>2];if(d){if(p[a+164|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+160>>2]=0}o[a+160>>2]=k;o[a+156>>2]=f;m[a+164|0]=1}while(1){d=o[j+4>>2];c=o[a+160>>2]+(h<<5)|0;o[c>>2]=o[j>>2];o[c+4>>2]=d;d=o[j+28>>2];o[c+24>>2]=o[j+24>>2];o[c+28>>2]=d;d=o[j+20>>2];o[c+16>>2]=o[j+16>>2];o[c+20>>2]=d;d=o[j+12>>2];o[c+8>>2]=o[j+8>>2];o[c+12>>2]=d;h=h+1|0;if((f|0)!=(h|0)){continue}break}}o[a+152>>2]=f;if((f|0)>=1){d=o[a+160>>2];e=o[b+128>>2];a=0;while(1){b=d+(a<<5)|0;n[b+6>>1]=q[e+14>>1];n[b+8>>1]=q[e+16>>1];n[b+10>>1]=q[e+18>>1];n[b>>1]=q[e+8>>1];n[b+2>>1]=q[e+10>>1];n[b+4>>1]=q[e+12>>1];o[b+12>>2]=o[e>>2];o[b+16>>2]=o[e+4>>2];e=e+20|0;a=a+1|0;if((f|0)!=(a|0)){continue}break}}M=j- -64|0}function lE(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=M+ -64|0;M=j;o[a+20>>2]=o[b+16>>2];o[a+24>>2]=o[b+20>>2];o[a+28>>2]=o[b+24>>2];o[a+32>>2]=o[b+28>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=o[b+4>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=o[b+12>>2];o[a+36>>2]=o[b+32>>2];o[a+40>>2]=o[b+36>>2];o[a+44>>2]=o[b+40>>2];o[a+48>>2]=o[b+44>>2];o[a+56>>2]=o[b+48>>2];m[a+60|0]=o[b+52>>2]!=0;i=o[b+56>>2];d=j;o[d+56>>2]=0;o[d+60>>2]=0;o[d+48>>2]=0;o[d+52>>2]=0;o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d>>2]=0;o[d+4>>2]=0;h=o[a+88>>2];if((h|0)<(i|0)){if(o[a+92>>2]<(i|0)){if(i){o[7717]=o[7717]+1;k=l[o[6606]](i<<6,16)|0;d=o[a+88>>2]}else{d=h}if((d|0)>=1){while(1){c=e<<6;g=c+k|0;f=c+o[a+96>>2]|0;c=o[f+4>>2];o[g>>2]=o[f>>2];o[g+4>>2]=c;c=o[f+60>>2];o[g+56>>2]=o[f+56>>2];o[g+60>>2]=c;c=o[f+52>>2];o[g+48>>2]=o[f+48>>2];o[g+52>>2]=c;c=o[f+44>>2];o[g+40>>2]=o[f+40>>2];o[g+44>>2]=c;c=o[f+36>>2];o[g+32>>2]=o[f+32>>2];o[g+36>>2]=c;c=o[f+28>>2];o[g+24>>2]=o[f+24>>2];o[g+28>>2]=c;c=o[f+20>>2];o[g+16>>2]=o[f+16>>2];o[g+20>>2]=c;c=o[f+12>>2];o[g+8>>2]=o[f+8>>2];o[g+12>>2]=c;e=e+1|0;if((d|0)!=(e|0)){continue}break}}d=o[a+96>>2];if(d){if(p[a+100|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+96>>2]=0}o[a+96>>2]=k;o[a+92>>2]=i;m[a+100|0]=1}while(1){d=j;e=o[d+4>>2];c=o[a+96>>2]+(h<<6)|0;o[c>>2]=o[d>>2];o[c+4>>2]=e;e=o[d+60>>2];o[c+56>>2]=o[d+56>>2];o[c+60>>2]=e;e=o[d+52>>2];o[c+48>>2]=o[d+48>>2];o[c+52>>2]=e;e=o[d+44>>2];o[c+40>>2]=o[d+40>>2];o[c+44>>2]=e;e=o[d+36>>2];o[c+32>>2]=o[d+32>>2];o[c+36>>2]=e;e=o[d+28>>2];o[c+24>>2]=o[d+24>>2];o[c+28>>2]=e;e=o[d+20>>2];o[c+16>>2]=o[d+16>>2];o[c+20>>2]=e;e=o[d+12>>2];o[c+8>>2]=o[d+8>>2];o[c+12>>2]=e;h=h+1|0;if((i|0)!=(h|0)){continue}break}}o[a+88>>2]=i;if((i|0)>=1){d=o[a+96>>2];e=o[b+64>>2];h=0;while(1){c=d+(h<<6)|0;o[c+16>>2]=o[e+16>>2];o[c+20>>2]=o[e+20>>2];o[c+24>>2]=o[e+24>>2];o[c+28>>2]=o[e+28>>2];o[c>>2]=o[e>>2];o[c+4>>2]=o[e+4>>2];o[c+8>>2]=o[e+8>>2];o[c+12>>2]=o[e+12>>2];o[c+32>>2]=o[e+32>>2];o[c+36>>2]=o[e+36>>2];o[c+40>>2]=o[e+40>>2];e=e+48|0;h=h+1|0;if((i|0)!=(h|0)){continue}break}}f=o[b+60>>2];o[j+8>>2]=0;o[j+12>>2]=0;o[j>>2]=0;o[j+4>>2]=0;e=o[a+128>>2];if((e|0)<(f|0)){if(o[a+132>>2]<(f|0)){a:{if(!f){k=0;d=e;break a}o[7717]=o[7717]+1;k=l[o[6606]](f<<4,16)|0;d=o[a+128>>2]}if((d|0)>=1){h=0;while(1){c=h<<4;i=c+k|0;g=c+o[a+136>>2]|0;c=o[g+4>>2];o[i>>2]=o[g>>2];o[i+4>>2]=c;c=o[g+12>>2];o[i+8>>2]=o[g+8>>2];o[i+12>>2]=c;h=h+1|0;if((d|0)!=(h|0)){continue}break}}d=o[a+136>>2];if(d){if(p[a+140|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+136>>2]=0}o[a+136>>2]=k;o[a+132>>2]=f;m[a+140|0]=1}while(1){d=o[j+4>>2];c=o[a+136>>2]+(e<<4)|0;o[c>>2]=o[j>>2];o[c+4>>2]=d;d=o[j+12>>2];o[c+8>>2]=o[j+8>>2];o[c+12>>2]=d;e=e+1|0;if((f|0)!=(e|0)){continue}break}}o[a+128>>2]=f;if((f|0)>=1){d=o[a+136>>2];e=o[b+68>>2];h=0;while(1){c=d+(h<<4)|0;o[c+12>>2]=o[e+12>>2];n[c+6>>1]=q[e+6>>1];n[c+8>>1]=q[e+8>>1];n[c+10>>1]=q[e+10>>1];n[c>>1]=q[e>>1];n[c+2>>1]=q[e+2>>1];n[c+4>>1]=q[e+4>>1];e=e+16|0;h=h+1|0;if((f|0)!=(h|0)){continue}break}}o[a+144>>2]=o[b+76>>2];h=o[a+152>>2];f=o[b+80>>2];if((h|0)<(f|0)){if(o[a+156>>2]<(f|0)){b:{if(!f){k=0;d=h;break b}o[7717]=o[7717]+1;k=l[o[6606]](f<<5,16)|0;d=o[a+152>>2]}if((d|0)>=1){e=0;while(1){c=e<<5;i=c+k|0;g=c+o[a+160>>2]|0;c=o[g+4>>2];o[i>>2]=o[g>>2];o[i+4>>2]=c;c=o[g+28>>2];o[i+24>>2]=o[g+24>>2];o[i+28>>2]=c;c=o[g+20>>2];o[i+16>>2]=o[g+16>>2];o[i+20>>2]=c;c=o[g+12>>2];o[i+8>>2]=o[g+8>>2];o[i+12>>2]=c;e=e+1|0;if((d|0)!=(e|0)){continue}break}}d=o[a+160>>2];if(d){if(p[a+164|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+160>>2]=0}o[a+160>>2]=k;o[a+156>>2]=f;m[a+164|0]=1}while(1){d=o[j+4>>2];c=o[a+160>>2]+(h<<5)|0;o[c>>2]=o[j>>2];o[c+4>>2]=d;d=o[j+28>>2];o[c+24>>2]=o[j+24>>2];o[c+28>>2]=d;d=o[j+20>>2];o[c+16>>2]=o[j+16>>2];o[c+20>>2]=d;d=o[j+12>>2];o[c+8>>2]=o[j+8>>2];o[c+12>>2]=d;h=h+1|0;if((f|0)!=(h|0)){continue}break}}o[a+152>>2]=f;if((f|0)>=1){d=o[a+160>>2];e=o[b+72>>2];a=0;while(1){b=d+(a<<5)|0;n[b+6>>1]=q[e+14>>1];n[b+8>>1]=q[e+16>>1];n[b+10>>1]=q[e+18>>1];n[b>>1]=q[e+8>>1];n[b+2>>1]=q[e+10>>1];n[b+4>>1]=q[e+12>>1];o[b+12>>2]=o[e>>2];o[b+16>>2]=o[e+4>>2];e=e+20|0;a=a+1|0;if((f|0)!=(a|0)){continue}break}}M=j- -64|0}function cz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=0,E=0,F=0,G=v(0),H=v(0);e=M-176|0;M=e;D=o[a+48>>2];f=o[a+52>>2];a:{if(!f){break a}f=o[f+20>>2];if(!f){break a}if(!(l[o[o[f>>2]+48>>2]](f)&1)){break a}o[e+40>>2]=0;o[e+44>>2]=0;o[e+32>>2]=1065353216;o[e+36>>2]=1065353216;i=o[o[a+52>>2]+20>>2];f=o[a+8>>2];p=s[f+52>>2];k=s[f+12>>2];n=s[f+8>>2];q=s[f+56>>2];t=s[f+28>>2];x=s[f+20>>2];y=s[f+24>>2];z=s[f+60>>2];A=s[f+44>>2];B=s[f+36>>2];m=s[f+40>>2];w=s[f+4>>2];g=s[b+8>>2];h=s[b>>2];j=s[b+4>>2];o[e+148>>2]=0;s[e+144>>2]=z+v(v(v(h*B)+v(j*m))+v(g*A));s[e+140>>2]=q+v(v(v(h*x)+v(j*y))+v(g*t));s[e+136>>2]=p+v(v(v(h*w)+v(j*n))+v(g*k));k=s[f+8>>2];n=s[f+12>>2];g=s[b+20>>2];h=s[b+24>>2];w=s[f+4>>2];j=s[b+16>>2];o[e+20>>2]=0;s[e+16>>2]=z+v(v(v(j*B)+v(g*m))+v(h*A));s[e+12>>2]=q+v(v(v(j*x)+v(g*y))+v(h*t));s[e+8>>2]=p+v(v(v(j*w)+v(g*k))+v(h*n));l[o[o[i>>2]+8>>2]](i,e+136|0,e+8|0,e+32|0);i=o[o[a+52>>2]+20>>2];p=s[f+52>>2];k=s[f+8>>2];n=s[f+12>>2];q=s[f+56>>2];t=s[f+20>>2];x=s[f+24>>2];y=s[f+28>>2];z=s[f+60>>2];A=s[f+36>>2];B=s[f+40>>2];g=s[b+20>>2];m=s[f+44>>2];h=s[b+24>>2];w=s[f+4>>2];j=s[b+16>>2];o[e+148>>2]=0;s[e+144>>2]=z+v(v(v(j*A)+v(g*B))+v(h*m));s[e+140>>2]=q+v(v(v(j*t)+v(g*x))+v(h*y));s[e+136>>2]=p+v(v(v(j*w)+v(g*k))+v(h*n));k=s[f+8>>2];n=s[f+12>>2];g=s[b+36>>2];h=s[b+40>>2];w=s[f+4>>2];j=s[b+32>>2];o[e+20>>2]=0;s[e+16>>2]=z+v(v(v(j*A)+v(g*B))+v(h*m));s[e+12>>2]=q+v(v(v(j*t)+v(g*x))+v(h*y));s[e+8>>2]=p+v(v(v(j*w)+v(g*k))+v(h*n));l[o[o[i>>2]+8>>2]](i,e+136|0,e+8|0,e+32|0);i=o[o[a+52>>2]+20>>2];p=s[f+52>>2];k=s[f+8>>2];n=s[f+12>>2];q=s[f+56>>2];t=s[f+20>>2];x=s[f+24>>2];y=s[f+28>>2];z=s[f+60>>2];A=s[f+36>>2];B=s[f+40>>2];g=s[b+36>>2];m=s[f+44>>2];h=s[b+40>>2];w=s[f+4>>2];j=s[b+32>>2];o[e+148>>2]=0;s[e+144>>2]=z+v(v(v(j*A)+v(g*B))+v(h*m));s[e+140>>2]=q+v(v(v(j*t)+v(g*x))+v(h*y));s[e+136>>2]=p+v(v(v(j*w)+v(g*k))+v(h*n));k=s[f+12>>2];n=s[f+8>>2];w=s[f+4>>2];g=s[b+8>>2];h=s[b>>2];j=s[b+4>>2];o[e+20>>2]=0;s[e+16>>2]=z+v(v(v(h*A)+v(j*B))+v(g*m));s[e+12>>2]=q+v(v(v(h*t)+v(j*x))+v(g*y));s[e+8>>2]=p+v(v(v(h*w)+v(j*n))+v(g*k));l[o[o[i>>2]+8>>2]](i,e+136|0,e+8|0,e+32|0)}o[e+172>>2]=0;f=c<<21|d;o[e+168>>2]=f;o[e+160>>2]=f;b:{c:{i=f+(d<<15^-1)|0;i=u(i>>10^i,9);i=i>>6^i;i=(i<<11^-1)+i|0;i=o[a+108>>2]+ -1&(i>>16^i);if(i>>>0>=r[a- -64>>2]){break c}i=o[o[a+72>>2]+(i<<2)>>2];if((i|0)==-1){break c}E=o[a+132>>2];while(1){F=i<<2;if((f|0)!=o[E+F>>2]){i=o[o[a+92>>2]+F>>2];if((i|0)!=-1){continue}break c}break}f=o[a+112>>2];if(!f){break c}i=o[(f+(i<<3)|0)+4>>2];b=o[a+8>>2];o[i+8>>2]=o[o[b+192>>2]+8>>2];f=o[a+4>>2];E=o[f+192>>2];o[e+48>>2]=-1;o[e+52>>2]=-1;o[e+44>>2]=f+4;o[e+40>>2]=f;o[e+36>>2]=E;o[e+32>>2]=0;o[e+156>>2]=d;o[e+152>>2]=c;o[e+148>>2]=b+4;o[e+144>>2]=b;o[e+140>>2]=i;o[e+136>>2]=0;b=l[o[o[D>>2]+8>>2]](D,e+32|0,e+136|0,0)|0;l[o[o[b>>2]+8>>2]](b,e+32|0,e+136|0,o[a+52>>2],o[a+44>>2]);l[o[o[b>>2]>>2]](b)|0;l[o[o[D>>2]+60>>2]](D,b);break b}j=s[b+20>>2];x=s[b+36>>2];y=s[b+24>>2];z=s[b+40>>2];p=s[b+4>>2];A=s[b+32>>2];q=s[b+8>>2];t=s[b>>2];B=s[b+16>>2];o[e+124>>2]=0;o[e+108>>2]=0;o[e+92>>2]=0;o[e+76>>2]=0;o[e+60>>2]=0;h=v(B-t);m=v(x-p);k=v(j-p);n=v(A-t);g=v(v(h*m)-v(k*n));w=g;G=v(g*g);g=v(z-q);H=v(k*g);k=v(y-q);m=v(H-v(k*m));h=v(v(k*n)-v(h*g));k=v(v(1)/v(C(v(G+v(v(m*m)+v(h*h))))));g=v(v(w*k)*v(.05999999865889549));s[e+120>>2]=z-g;h=v(v(h*k)*v(.05999999865889549));s[e+116>>2]=x-h;s[e+104>>2]=y-g;s[e+100>>2]=j-h;s[e+88>>2]=q-g;s[e+84>>2]=p-h;s[e+72>>2]=z+g;s[e+68>>2]=x+h;s[e+56>>2]=y+g;s[e+52>>2]=j+h;o[e+44>>2]=0;j=v(v(m*k)*v(.05999999865889549));s[e+112>>2]=A-j;s[e+96>>2]=B-j;s[e+80>>2]=t-j;s[e+64>>2]=A+j;s[e+48>>2]=B+j;s[e+40>>2]=q+g;s[e+36>>2]=p+h;s[e+32>>2]=t+j;o[7717]=o[7717]+1;f=l[o[6606]](112,16)|0;$d(f,e+32|0,6);b=o[a+8>>2];o[f+8>>2]=o[o[b+192>>2]+8>>2];i=o[a+4>>2];E=o[i+192>>2];o[e+152>>2]=-1;o[e+156>>2]=-1;o[e+148>>2]=i+4;o[e+144>>2]=i;o[e+140>>2]=E;o[e+136>>2]=0;o[e+28>>2]=d;o[e+24>>2]=c;o[e+20>>2]=b+4;o[e+16>>2]=b;o[e+12>>2]=f;o[e+8>>2]=0;b=l[o[o[D>>2]+8>>2]](D,e+136|0,e+8|0,0)|0;l[o[o[b>>2]+8>>2]](b,e+136|0,e+8|0,o[a+52>>2],o[a+44>>2]);l[o[o[b>>2]>>2]](b)|0;l[o[o[D>>2]+60>>2]](D,b);o[e+172>>2]=f;bz(a+60|0,e+160|0,e+168|0)}M=e+176|0}function jz(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=0,n=v(0),q=v(0),r=v(0),t=0,w=v(0),x=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),M=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=0,ca=0,da=v(0),ea=v(0),fa=0;ba=o[c+36>>2];j=o[ba+12>>2];G=s[j+8>>2];E=o[b+36>>2];V=s[E+8>>2];W=v(G-V);c=o[ba+8>>2];ea=s[c+8>>2];H=v(ea-V);L=v(W-H);b=o[ba+16>>2];I=s[b+12>>2];X=s[E+12>>2];M=v(I-X);N=s[c+12>>2];J=v(N-X);e=v(M-J);w=s[j+12>>2];Y=v(w-X);O=v(Y-J);F=s[b+8>>2];P=v(F-V);d=v(P-H);Q=v(v(L*e)-v(O*d));x=s[b+16>>2];Z=s[E+16>>2];R=v(x-Z);_=s[c+16>>2];K=v(_-Z);g=v(R-K);q=s[j+16>>2];$=v(q-Z);S=v($-K);T=v(v(O*g)-v(S*e));U=v(v(S*d)-v(L*g));d=v(v(Q*Q)+v(v(T*T)+v(U*U)));a:{if(!(d>v(1.1920928955078125e-7))){g=v(3.4028234663852886e+38);break a}g=v(3.4028234663852886e+38);d=v(v(1)/v(C(d)));h=v(Q*d);f=v(T*d);e=v(U*d);i=v(v(K*h)+v(v(H*f)+v(J*e)));d=v(i*i);if(!(d<v(3.4028234663852886e+38))){break a}r=v(e*i);e=v(Y-r);z=v(f*i);A=v(H-z);B=v(J-r);D=v(W-z);n=v(h*i);g=v($-n);i=v(K-n);b:{if(!(v(v(Q*v(v(e*A)-v(B*D)))+v(v(T*v(v(B*g)-v(i*e)))+v(U*v(v(i*D)-v(g*A)))))>v(0))){break b}h=v(M-r);f=v(P-z);da=v(Q*v(v(h*D)-v(e*f)));aa=e;e=v(R-n);if(!(v(da+v(v(T*v(v(aa*e)-v(g*h)))+v(U*v(v(g*f)-v(e*D)))))>v(0))){break b}g=d;if(v(v(Q*v(v(B*f)-v(h*A)))+v(v(T*v(v(h*i)-v(e*B)))+v(U*v(v(e*A)-v(i*f)))))>v(0)){break a}}d=v(v(v(L*L)+v(O*O))+v(S*S));g=v(3.4028234663852886e+38);c:{if(!(d>v(1.1920928955078125e-7))){break c}n=v(v(-v(v(v(H*L)+v(J*O))+v(K*S)))/d);r=n<v(0)?v(0):v(y(n,v(1)));n=v(K+v(S*r));z=v(H+v(L*r));r=v(J+v(O*r));d=v(v(n*n)+v(v(z*z)+v(r*r)));g=v(3.4028234663852886e+38);if(!(d<v(3.4028234663852886e+38))){break c}g=d}f=v(P-W);i=v(M-Y);e=v(R-$);d=v(v(v(f*f)+v(i*i))+v(e*e));d:{if(!(d>v(1.1920928955078125e-7))){break d}d=v(v(-v(v(v(W*f)+v(Y*i))+v($*e)))/d);d=d<v(0)?v(0):v(y(d,v(1)));h=v($+v(e*d));f=v(W+v(f*d));e=v(Y+v(i*d));d=v(v(h*h)+v(v(f*f)+v(e*e)));if(!(d<g)){break d}g=d;z=f;r=e;n=h}f=v(H-P);i=v(J-M);e=v(K-R);d=v(v(v(f*f)+v(i*i))+v(e*e));if(!(d>v(1.1920928955078125e-7))){break a}d=v(v(-v(v(v(P*f)+v(M*i))+v(R*e)))/d);d=d<v(0)?v(0):v(y(d,v(1)));h=v(R+v(e*d));f=v(P+v(f*d));e=v(M+v(i*d));d=v(v(h*h)+v(v(f*f)+v(e*e)));if(!(d<g)){break a}g=d;z=f;r=e;n=h}d=v(V-s[E+24>>2]);e=v(d*d);d=v(X-s[E+28>>2]);e=v(e+v(d*d));d=v(Z-s[E+32>>2]);d=v(C(v(e+v(d*d))));i=v(s[a+12>>2]+v(d+d));e:{if(!(g<v(i*i))){break e}h=v(V+z);A=v(G-h);d=v(X+r);B=v(I-d);D=v(F-h);G=v(w-d);F=v(v(A*B)-v(D*G));f=v(Z+n);I=v(x-f);w=v(q-f);e=v(v(G*I)-v(B*w));x=v(N-d);q=v(ea-h);d=v(v(D*x)-v(q*B));aa=v(d*d);f=v(_-f);d=v(v(B*f)-v(x*I));h=v(d*d);d=v(v(q*I)-v(D*f));h=v(C(v(aa+v(h+v(d*d)))));d=v(v(D*w)-v(A*I));e=v(C(v(v(F*F)+v(v(e*e)+v(d*d)))));d=v(v(q*G)-v(A*x));da=v(d*d);d=v(v(x*w)-v(G*f));aa=v(d*d);d=v(v(A*f)-v(q*w));d=v(C(v(da+v(aa+v(d*d)))));q=v(v(1)/v(h+v(e+d)));w=s[E+88>>2];F=v(e*q);f=s[c+88>>2];x=v(h*q);e=s[j+88>>2];_=v(d*q);d=s[b+88>>2];q=f<=v(0)?v(0):e<=v(0)?v(0):d<=v(0)?v(0):v(v(v(F*f)+v(x*e))+v(_*d));N=v(w+q);if(!(N>v(0))){break e}k=o[a+4>>2];e=s[k+316>>2];a=o[a+8>>2];d=s[a+316>>2];h=e>d?e:d;f=v(v(w/N)*s[k+332>>2]);e=v(v(q/N)*s[a+332>>2]);g=v(v(-1)/v(C(g)));d=v(g*n);n=v(g*r);g=v(z*g);a=o[k+832>>2];f:{if((a|0)!=o[k+836>>2]){break f}ca=a?a<<1:1;if((a|0)>=(ca|0)){break f}g:{if(!ca){break g}o[7717]=o[7717]+1;fa=l[o[6606]](u(ca,56),16)|0;a=o[k+832>>2]}if((a|0)>=1){c=0;while(1){b=u(c,56);j=b+fa|0;t=b+o[k+840>>2]|0;b=o[t+4>>2];o[j>>2]=o[t>>2];o[j+4>>2]=b;b=o[t+52>>2];o[j+48>>2]=o[t+48>>2];o[j+52>>2]=b;b=o[t+44>>2];o[j+40>>2]=o[t+40>>2];o[j+44>>2]=b;b=o[t+36>>2];o[j+32>>2]=o[t+32>>2];o[j+36>>2]=b;b=o[t+28>>2];o[j+24>>2]=o[t+24>>2];o[j+28>>2]=b;b=o[t+20>>2];o[j+16>>2]=o[t+16>>2];o[j+20>>2]=b;b=o[t+12>>2];o[j+8>>2]=o[t+8>>2];o[j+12>>2]=b;c=c+1|0;if((c|0)!=(a|0)){continue}break}}a=o[k+840>>2];if(a){if(p[k+844|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[k+840>>2]=0}o[k+840>>2]=fa;o[k+836>>2]=ca;m[k+844|0]=1;a=o[k+832>>2]}a=o[k+840>>2]+u(a,56)|0;s[a+48>>2]=f;s[a+44>>2]=h;s[a+40>>2]=i;s[a+24>>2]=g;s[a+8>>2]=F;o[a+4>>2]=ba;o[a>>2]=E;s[a+52>>2]=e;o[a+36>>2]=0;s[a+32>>2]=d;s[a+28>>2]=n;o[a+20>>2]=0;s[a+16>>2]=_;s[a+12>>2]=x;o[k+832>>2]=o[k+832>>2]+1}}function Ml(a,b,c){var d=0,e=v(0),f=0,g=v(0),h=0,i=0,j=0,k=v(0),l=v(0),n=v(0),q=v(0),t=v(0),u=0,w=v(0),x=v(0),y=0,z=0,A=0,B=v(0),D=v(0);z=M-16|0;M=z;a:{b:{i=o[b+372>>2];if(r[i+32>>2]<2){break b}if(!sb(b)){break b}f=o[a+9280>>2];if(f){d=o[a+9292>>2];j=o[a+9284>>2];while(1){h=o[f+48>>2];if(h){o[h+44>>2]=o[f+44>>2]}h=o[f+44>>2];if(h){o[h+48>>2]=o[f+48>>2]}if(o[a+9280>>2]==(f|0)){o[a+9280>>2]=o[f+48>>2]}o[f+44>>2]=0;o[f+48>>2]=o[a+9288>>2];h=o[a+9288>>2];if(h){o[h+44>>2]=f}j=j+ -1|0;o[a+9288>>2]=f;d=d+1|0;f=o[a+9280>>2];if(f){continue}break}o[a+9292>>2]=d;o[a+9284>>2]=j}o[a+9276>>2]=0;o[a>>2]=0;d=o[i>>2];j=o[i+12>>2];e=s[j+16>>2];t=v(s[d+16>>2]-e);f=o[i+4>>2];g=s[j+20>>2];l=v(s[f+20>>2]-g);h=o[i+8>>2];k=s[j+24>>2];n=v(s[h+24>>2]-k);q=v(s[d+20>>2]-g);w=v(s[f+24>>2]-k);x=v(s[h+16>>2]-e);k=v(s[d+24>>2]-k);e=v(s[f+16>>2]-e);g=v(s[h+20>>2]-g);c:{if(!(v(v(v(v(t*l)*n)+v(v(v(v(v(q*w)*x)+v(v(k*e)*g))-v(v(t*w)*g))-v(v(q*e)*n)))-v(v(k*l)*x))<v(0))){j=f;f=d;break c}o[i+4>>2]=d;o[i>>2]=f;j=o[i+16>>2];o[i+16>>2]=o[i+20>>2];o[i+20>>2]=j;j=d}j=fc(a,f,j,h,1);h=fc(a,o[i+4>>2],o[i>>2],o[i+12>>2],1);u=fc(a,o[i+8>>2],o[i+4>>2],o[i+12>>2],1);y=fc(a,o[i>>2],o[i+8>>2],o[i+12>>2],1);if(o[a+9284>>2]!=4){break b}d=o[a+9280>>2];e=s[d+16>>2];f=o[d+48>>2];if(f){e=v(e*e);while(1){g=s[f+16>>2];g=v(g*g);c=g<e;d=c?f:d;e=c?g:e;f=o[f+48>>2];if(f){continue}break}e=s[d+16>>2]}c=o[d+28>>2];i=o[d+24>>2];A=o[d+20>>2];l=s[d+12>>2];t=s[d+8>>2];k=s[d+4>>2];g=s[d>>2];o[j+32>>2]=h;m[j+52|0]=0;o[h+32>>2]=j;m[h+52|0]=0;o[j+36>>2]=u;m[j+53|0]=0;o[u+32>>2]=j;m[u+52|0]=1;o[j+40>>2]=y;m[j+54|0]=0;o[y+32>>2]=j;m[y+52|0]=2;o[h+36>>2]=y;m[h+53|0]=2;o[y+40>>2]=h;m[y+54|0]=1;o[h+40>>2]=u;m[h+54|0]=1;o[u+36>>2]=h;m[u+53|0]=258;m[u+54|0]=1;o[u+40>>2]=y;o[y+36>>2]=u;m[y+53|0]=2;o[a>>2]=0;j=0;while(1){d:{e:{h=o[a+9276>>2];if(h>>>0<=63){f=0;o[z+8>>2]=0;o[z>>2]=0;o[z+4>>2]=0;o[a+9276>>2]=h+1;j=j+1|0;m[d+55|0]=j;h=(h<<5)+a|0;u=h+60|0;Ya(b,d,u);if(!(v(v(v(v(s[d>>2]*s[h+76>>2])+v(s[d+4>>2]*s[h+80>>2]))+v(s[d+8>>2]*s[h+84>>2]))-s[d+16>>2])>v(9999999747378752e-20))){o[a>>2]=7;break d}while(1){h=ue(a,j,u,o[((f<<2)+d|0)+32>>2],p[(d+f|0)+52|0],z);if(!h){break e}y=f>>>0<2;f=f+1|0;if(y){continue}break}break e}o[a>>2]=6;break d}if(!(h&r[z+8>>2]>2)){o[a>>2]=4;break d}c=o[z>>2];f=o[z+4>>2];o[c+36>>2]=f;m[c+53|0]=2;o[f+40>>2]=c;m[f+54|0]=1;c=o[d+48>>2];if(c){o[c+44>>2]=o[d+44>>2]}c=o[d+44>>2];if(c){o[c+48>>2]=o[d+48>>2]}if(o[a+9280>>2]==(d|0)){o[a+9280>>2]=o[d+48>>2]}o[a+9284>>2]=o[a+9284>>2]+ -1;o[d+44>>2]=0;o[d+48>>2]=o[a+9288>>2];c=o[a+9288>>2];if(c){o[c+44>>2]=d}o[a+9288>>2]=d;o[a+9292>>2]=o[a+9292>>2]+1;d=o[a+9280>>2];e=s[d+16>>2];f=o[d+48>>2];if(f){e=v(e*e);while(1){g=s[f+16>>2];g=v(g*g);c=g<e;d=c?f:d;e=c?g:e;f=o[f+48>>2];if(f){continue}break}e=s[d+16>>2]}c=o[d+28>>2];i=o[d+24>>2];A=o[d+20>>2];l=s[d+12>>2];t=s[d+8>>2];k=s[d+4>>2];g=s[d>>2];if((j|0)!=255){continue}}break}s[a+56>>2]=e;s[a+40>>2]=g;o[a+4>>2]=A;s[a+52>>2]=l;s[a+48>>2]=t;s[a+44>>2]=k;o[a+36>>2]=3;o[a+12>>2]=c;o[a+8>>2]=i;g=v(g*e);l=v(s[i+16>>2]-g);k=v(k*e);n=v(s[c+20>>2]-k);q=v(s[i+20>>2]-k);w=v(s[c+16>>2]-g);x=v(v(l*n)-v(q*w));e=v(t*e);t=v(s[c+24>>2]-e);B=v(q*t);q=v(s[i+24>>2]-e);n=v(B-v(q*n));t=v(v(q*w)-v(l*t));t=v(C(v(v(x*x)+v(v(n*n)+v(t*t)))));s[a+20>>2]=t;l=v(s[c+16>>2]-g);n=v(s[A+20>>2]-k);q=v(s[c+20>>2]-k);w=v(s[A+16>>2]-g);x=v(v(l*n)-v(q*w));D=v(x*x);B=q;q=v(s[A+24>>2]-e);x=v(s[c+24>>2]-e);n=v(v(B*q)-v(x*n));l=v(v(x*w)-v(l*q));l=v(C(v(D+v(v(n*n)+v(l*l)))));s[a+24>>2]=l;n=v(s[A+16>>2]-g);q=v(s[i+20>>2]-k);k=v(s[A+20>>2]-k);g=v(s[i+16>>2]-g);w=v(v(n*q)-v(k*g));B=k;k=v(s[i+24>>2]-e);e=v(s[A+24>>2]-e);q=v(v(B*k)-v(e*q));e=v(v(e*g)-v(n*k));g=v(C(v(v(w*w)+v(v(q*q)+v(e*e)))));e=v(g+v(t+l));s[a+28>>2]=g/e;s[a+24>>2]=l/e;s[a+20>>2]=t/e;a=o[a>>2];break a}o[a>>2]=8;e=s[c>>2];g=s[c+4>>2];k=s[c+8>>2];o[a+52>>2]=0;t=v(-k);s[a+48>>2]=t;l=v(-g);s[a+44>>2]=l;n=v(-e);s[a+40>>2]=n;e=v(C(v(v(v(e*e)+v(g*g))+v(k*k))));f:{if(!!(e>v(0))){e=v(v(1)/e);s[a+48>>2]=e*t;s[a+44>>2]=e*l;s[a+40>>2]=e*n;break f}o[a+48>>2]=0;o[a+40>>2]=1065353216;o[a+44>>2]=0}o[a+52>>2]=0;o[a+56>>2]=0;o[a+36>>2]=1;b=o[i>>2];o[a+20>>2]=1065353216;o[a+4>>2]=b;a=8}M=z+16|0;return a}function $z(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,t=0,w=0,x=v(0),y=0,z=0,A=v(0),B=0,E=0,F=0,G=0,H=0;n=M-32|0;M=n;if((b|0)>=2){h=o[a+712>>2];e=u(h,h);q=fa((e|0)!=(e&1073741823)?-1:e<<2);if((h|0)>=1){while(1){j=u(d,h);g=(j+d<<2)+q|0;e=0;while(1){f=(u(e,h)+d<<2)+q|0;a:{if((d|0)!=(e|0)){o[f>>2]=2147483647;o[(e+j<<2)+q>>2]=2147483647;break a}o[f>>2]=0;o[g>>2]=0}e=e+1|0;if((h|0)!=(e|0)){continue}break}d=d+1|0;if((h|0)!=(d|0)){continue}break}}f=o[a+732>>2];if((f|0)>=1){d=o[a+720>>2];j=o[a+740>>2];e=0;while(1){g=j+u(e,52)|0;i=(o[g+12>>2]-d|0)/104|0;g=(o[g+8>>2]-d|0)/104|0;o[(u(i,h)+g<<2)+q>>2]=1;o[(i+u(g,h)<<2)+q>>2]=1;e=e+1|0;if((f|0)!=(e|0)){continue}break}}b:{c:{if((b|0)!=2){j=0;if((h|0)<=0){break b}while(1){i=u(h,j);d=0;while(1){f=d;d=d+1|0;if((d|0)<(h|0)){k=u(f,h);t=(k+j<<2)+q|0;e=d;while(1){w=(e+k<<2)+q|0;g=o[t>>2]+o[(e+i<<2)+q>>2]|0;if(r[w>>2]>g>>>0){o[(f+u(e,h)<<2)+q>>2]=g;o[w>>2]=g}e=e+1|0;if((h|0)!=(e|0)){continue}break}}if((d|0)!=(h|0)){continue}break}j=j+1|0;if((j|0)!=(h|0)){continue}break}break c}g=0;o[n+20>>2]=0;m[n+24|0]=1;o[n+12>>2]=0;o[n+16>>2]=0;d:{e:{if((h|0)>-1){if(h){_z(n+8|0,h);g=o[n+20>>2];e=0;while(1){d=u(e,20)+g|0;o[d+4>>2]=0;o[d+8>>2]=0;m[d+16|0]=1;o[d+12>>2]=0;e=e+1|0;if((h|0)!=(e|0)){continue}break}}o[n+12>>2]=h;f=h;if(o[a+732>>2]<1){break d}j=0;while(1){d=o[a+740>>2]+u(j,52)|0;e=o[a+720>>2];k=(o[d+12>>2]-e|0)/104|0;w=(o[d+8>>2]-e|0)/104|0;f=u(w,20)+g|0;d=o[f+4>>2];f:{g:{if((d|0)<1){break g}i=o[f+12>>2];e=0;while(1){if((k|0)!=o[i+(e<<2)>>2]){e=e+1|0;if((e|0)!=(d|0)){continue}break g}break}if((d|0)!=(e|0)){break f}}h:{if(o[f+8>>2]!=(d|0)){break h}t=d?d<<1:1;if((d|0)>=(t|0)){break h}e=0;g=0;if(t){o[7717]=o[7717]+1;g=l[o[6606]](t<<2,16)|0;d=o[f+4>>2]}i=o[f+12>>2];i:{j:{if((d|0)>=1){while(1){y=e<<2;o[y+g>>2]=o[i+y>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break j}}if(!i){break i}}if(p[f+16|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[f+12>>2]=0;d=o[f+4>>2]}m[f+16|0]=1;o[f+12>>2]=g;o[f+8>>2]=t}o[o[f+12>>2]+(d<<2)>>2]=k;o[f+4>>2]=o[f+4>>2]+1;g=o[n+20>>2]}f=u(k,20)+g|0;d=o[f+4>>2];k:{l:{if((d|0)<1){break l}g=o[f+12>>2];e=0;while(1){if((w|0)!=o[g+(e<<2)>>2]){e=e+1|0;if((e|0)!=(d|0)){continue}break l}break}if((d|0)!=(e|0)){break k}}m:{if(o[f+8>>2]!=(d|0)){break m}i=d?d<<1:1;if((d|0)>=(i|0)){break m}e=0;k=0;if(i){o[7717]=o[7717]+1;k=l[o[6606]](i<<2,16)|0;d=o[f+4>>2]}g=o[f+12>>2];n:{o:{if((d|0)>=1){while(1){t=e<<2;o[t+k>>2]=o[g+t>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break o}}if(!g){break n}}if(p[f+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[f+12>>2]=0;d=o[f+4>>2]}m[f+16|0]=1;o[f+12>>2]=k;o[f+8>>2]=i}o[o[f+12>>2]+(d<<2)>>2]=w;o[f+4>>2]=o[f+4>>2]+1}j=j+1|0;if((j|0)>=o[a+732>>2]){break e}g=o[n+20>>2];continue}}D()}f=o[n+12>>2]}p:{if((f|0)<1){break p}d=0;g=o[n+20>>2];while(1){i=g+u(d,20)|0;if(o[i+4>>2]>=1){E=u(d,h);F=o[i+12>>2];j=0;while(1){k=o[(j<<2)+F>>2];t=g+u(k,20)|0;w=o[t+4>>2];if((w|0)>=1){G=(u(h,k)+d<<2)+q|0;H=o[t+12>>2];e=0;while(1){y=o[(e<<2)+H>>2];q:{if((y|0)==(d|0)){break q}z=u(h,y);B=(z+d<<2)+q|0;z=o[(k+z<<2)+q>>2]+o[G>>2]|0;if(r[B>>2]<=z>>>0){break q}o[(y+E<<2)+q>>2]=z;o[B>>2]=z;w=o[t+4>>2]}e=e+1|0;if((e|0)<(w|0)){continue}break}}j=j+1|0;if((j|0)<o[i+4>>2]){continue}break}}d=d+1|0;if((f|0)!=(d|0)){continue}break}if((f|0)<1){break p}d=0;while(1){e=o[n+20>>2]+u(d,20)|0;j=e;g=o[e+12>>2];if(g){if(p[e+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[j+12>>2]=0}m[e+16|0]=1;o[j+12>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;d=d+1|0;if((f|0)!=(d|0)){continue}break}}d=o[n+20>>2];if(!d){break c}if(p[n+24|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[n+20>>2]=0}j=0;if((h|0)<1){break b}d=0;while(1){f=d;d=d+1|0;if((d|0)<(h|0)){t=u(f,h);e=d;while(1){if(o[(e+t<<2)+q>>2]==(b|0)){i=o[a+720>>2];Ti(a,c);w=u(o[a+732>>2],52)+ -52|0;k=w+o[a+740>>2]|0;g=i+u(e,104)|0;o[k+8>>2]=g;i=i+u(f,104)|0;o[k+12>>2]=i;x=v(s[g+8>>2]-s[i+8>>2]);A=v(x*x);x=v(s[g+12>>2]-s[i+12>>2]);A=v(A+v(x*x));x=v(s[g+16>>2]-s[i+16>>2]);s[k+16>>2]=C(v(A+v(x*x)));m[a+924|0]=1;g=w+o[a+740>>2]|0;m[g+20|0]=p[g+20|0]|1;j=j+1|0}e=e+1|0;if((h|0)!=(e|0)){continue}break}}if((d|0)!=(h|0)){continue}break}}ba(q)}M=n+32|0;return j}function TB(a,b,c,d,e,f){var g=v(0),h=0,i=v(0),j=v(0),k=0,l=v(0),n=0,q=v(0),r=v(0),t=v(0),w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=0,M=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=0,Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=v(0),ia=v(0),ja=v(0);x=s[a+656>>2];B=s[d+40>>2];Y=v(x*B);i=s[a+624>>2];q=s[d+32>>2];j=s[a+640>>2];G=s[d+36>>2];Z=v(v(i*q)+v(j*G));J=s[d+24>>2];_=v(x*J);H=s[d+16>>2];I=s[d+20>>2];$=v(v(i*H)+v(j*I));y=s[a+592>>2];g=s[c+40>>2];aa=v(y*g);C=s[a+560>>2];l=s[c+32>>2];D=s[a+576>>2];r=s[c+36>>2];ba=v(v(C*l)+v(D*r));O=s[a+588>>2];ca=v(O*g);P=s[a+556>>2];Q=s[a+572>>2];da=v(v(P*l)+v(Q*r));R=s[a+584>>2];ea=v(R*g);S=s[a+552>>2];T=s[a+568>>2];fa=v(v(S*l)+v(T*r));A=s[c+24>>2];ga=v(y*A);t=s[c+16>>2];z=s[c+20>>2];ha=v(v(C*t)+v(D*z));F=q;q=s[a+664>>2];K=G;G=s[a+668>>2];M=B;B=s[a+672>>2];M=v(v(v(v(F*q)+v(K*G))+v(M*B))+s[d+56>>2]);J=v(v(v(v(H*q)+v(I*G))+v(J*B))+s[d+52>>2]);H=s[a+600>>2];I=s[a+604>>2];F=g;g=s[a+608>>2];K=s[c+56>>2];U=v(v(v(v(l*H)+v(r*I))+v(F*g))+K);F=s[c+52>>2];V=v(v(v(v(t*H)+v(z*I))+v(A*g))+F);W=s[d>>2];l=v(W*i);i=s[d+4>>2];ia=v(l+v(i*j));j=s[d+8>>2];ja=v(j*x);l=s[c>>2];r=s[c+4>>2];C=v(v(l*C)+v(r*D));x=s[c+8>>2];D=v(x*y);i=v(s[d+48>>2]+v(v(v(W*q)+v(i*G))+v(j*B)));j=v(s[c+48>>2]+v(v(v(l*H)+v(r*I))+v(x*g)));n=o[b+24>>2];E=p[a+736|0];k=n<<1;a:{if(E){break a}h=o[b+8>>2];o[h>>2]=1065353216;k=(n<<2)+4|0;o[k+h>>2]=1065353216;w=(n<<3)+8|0;o[w+h>>2]=1065353216;h=o[b+16>>2];o[h>>2]=-1082130432;o[h+k>>2]=-1082130432;o[h+w>>2]=-1082130432;K=s[c+56>>2];F=s[c+52>>2];k=n<<1}g=s[c+48>>2];c=o[b+12>>2];o[c+12>>2]=0;y=v(U-K);s[c+4>>2]=y;o[c>>2]=0;q=v(V-F);s[c+8>>2]=-q;w=n<<2;h=w+c|0;o[h+12>>2]=0;g=v(j-g);s[h+8>>2]=g;o[h+4>>2]=0;s[h>>2]=-y;k=k<<2;h=k+c|0;o[h+8>>2]=0;o[h+12>>2]=0;s[h+4>>2]=-g;s[h>>2]=q;g=s[d+48>>2];y=s[d+56>>2];q=s[d+52>>2];d=o[b+20>>2];o[d+12>>2]=0;o[d>>2]=0;q=v(J-q);s[d+8>>2]=q;y=v(M-y);s[d+4>>2]=-y;h=d+w|0;o[h+12>>2]=0;g=v(i-g);s[h+8>>2]=-g;o[h+4>>2]=0;s[h>>2]=y;h=d+k|0;o[h+8>>2]=0;o[h+12>>2]=0;s[h+4>>2]=g;s[h>>2]=-q;g=v(s[b>>2]*s[b+4>>2]);h=o[b+28>>2];if(!E){s[h>>2]=g*v(i-j);s[h+w>>2]=g*v(J-V);s[h+(n<<3)>>2]=g*v(M-U)}k=u(n,12);i=v(v(v(S*l)+v(T*r))+v(R*x));s[k+c>>2]=i;E=k+8|0;j=v(fa+ea);s[E+c>>2]=j;L=k+4|0;y=v(v(v(S*t)+v(T*z))+v(R*A));s[L+c>>2]=y;w=n<<4;x=v(v(v(l*P)+v(r*Q))+v(x*O));s[w+c>>2]=x;N=w|4;t=v(v(v(P*t)+v(Q*z))+v(O*A));s[N+c>>2]=t;X=w|8;z=v(da+ca);s[c+X>>2]=z;s[d+k>>2]=-i;s[d+E>>2]=-j;s[d+L>>2]=-y;s[d+w>>2]=-x;s[d+N>>2]=-t;s[d+X>>2]=-z;q=j;l=v(C+D);j=v($+_);r=v(ha+ga);C=v(ia+ja);D=v(v(l*j)-v(r*C));B=i;i=v(Z+Y);A=v(ba+aa);j=v(v(r*i)-v(A*j));i=v(v(A*C)-v(l*i));s[h+k>>2]=v(v(q*D)+v(v(B*j)+v(y*i)))*g;s[h+w>>2]=v(v(z*D)+v(v(x*j)+v(t*i)))*g;b:{c:{if(p[a+716|0]){z=v(s[a+708>>2]*s[a+732>>2]);w=z>v(0)?1:2;E=!p[a+737|0];k=1;break c}if(!p[a+737|0]){break b}z=v(0);w=0;E=0;k=0}n=u(n,5);h=n<<2;s[h+c>>2]=l;L=h+8|0;s[L+c>>2]=A;N=c;c=h+4|0;s[N+c>>2]=r;s[d+L>>2]=-A;s[c+d>>2]=-r;s[d+h>>2]=-l;c=a+688|0;g=Jd(c);t=Kd(c);d=o[b+28>>2];o[h+d>>2]=0;c=o[a+748>>2];x=s[(c&2?a+760|0:b+4|0)>>2];if(!(g==t&k|E)){if(c&4){o[o[b+32>>2]+(n<<2)>>2]=o[a+752>>2]}i=Tc(s[a+728>>2],g,t,s[a+680>>2],v(x*s[b>>2]));d=o[b+28>>2];c=n<<2;h=d+c|0;s[h>>2]=v(v(i*s[a+680>>2])*s[a+732>>2])+s[h>>2];s[c+o[b+36>>2]>>2]=-s[a+684>>2];o[c+o[b+40>>2]>>2]=o[a+684>>2]}if(!k){break b}c=d;d=n<<2;c=c+d|0;s[c>>2]=s[c>>2]+v(z*v(x*s[b>>2]));if(m[a+748|0]&1){o[d+o[b+32>>2]>>2]=o[a+756>>2]}d:{if(g==t){o[o[b+36>>2]+(n<<2)>>2]=-8388609;g=v(3.4028234663852886e+38);break d}d=o[b+36>>2]+(n<<2)|0;if((w|0)==1){o[d>>2]=0;g=v(3.4028234663852886e+38);break d}o[d>>2]=-8388609;g=v(0)}s[o[b+40>>2]+(n<<2)>>2]=g;t=s[a+704>>2];e:{if(!(t>v(0))){break e}g=v(v(v(v(l*s[e>>2])+v(r*s[e+4>>2]))+v(A*s[e+8>>2]))-v(v(v(l*s[f>>2])+v(r*s[f+4>>2]))+v(A*s[f+8>>2])));if((w|0)==1){if(!(g<v(0))){break e}g=v(g*v(-t));if(!(g>s[c>>2])){break e}s[c>>2]=g;break e}if(!(g>v(0))){break e}g=v(g*v(-t));if(!(g<s[c>>2])){break e}s[c>>2]=g}s[c>>2]=s[a+700>>2]*s[c>>2]}}function jy(a,b,c){var d=0,f=0,g=0,h=0,j=0,k=v(0),n=v(0),q=v(0),r=0,t=0,x=0,y=0,z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=0,G=0,H=0;f=M-48|0;M=f;j=-246811958;h=1900671690;a:{if((c|0)>0){d=b;x=1900671690;r=1900671690;g=-246811958;t=-246811958;while(1){y=o[d+8>>2];k=s[d+8>>2];j=(e(0,j),i())<k?y:j;F=o[d+4>>2];n=s[d+4>>2];g=(e(0,g),i())<n?F:g;G=o[d>>2];q=s[d>>2];t=(e(0,t),i())<q?G:t;h=k<(e(0,h),i())?y:h;x=n<(e(0,x),i())?F:x;r=q<(e(0,r),i())?G:r;d=d+16|0;H=H+1|0;if((H|0)!=(c|0)){continue}break}break a}t=-246811958;g=-246811958;r=1900671690;x=1900671690}z=(e(0,g),i());A=(e(0,x),i());k=v(z-A);B=(e(0,j),i());C=(e(0,h),i());n=v(B-C);g=k<n;D=(e(0,t),i());E=(e(0,r),i());q=v(D-E);h=q<n;j=q<k;d=j?g?2:1:h<<1;o[a+112>>2]=d;h=j?(h^1)<<1:g?1:2;if((d|0)==(h|0)){h=(d+1>>>0)%3|0}o[a+104>>2]=h;o[a+12>>2]=0;o[a+28>>2]=0;g=(d^3)-h|0;o[a+108>>2]=g;s[a+24>>2]=v(B+C)*v(.5);s[a+20>>2]=v(z+A)*v(.5);s[a+16>>2]=v(D+E)*v(.5);d=(d|0)==((g+1|0)%3|0);n=d?v(n*v(9788566967472434e-20)):v(n*v(-9788566967472434e-20));s[a+8>>2]=n;k=d?v(k*v(9788566967472434e-20)):v(k*v(-9788566967472434e-20));s[a+4>>2]=k;q=d?v(q*v(9788566967472434e-20)):v(q*v(-9788566967472434e-20));s[a>>2]=q;o[f+36>>2]=0;m[f+40|0]=1;o[f+28>>2]=0;o[f+32>>2]=0;b:{c:{if((c|0)>=1){o[7717]=o[7717]+1;d=l[o[6606]](c<<4,16)|0;o[f+36>>2]=d;j=1;m[f+40|0]=1;o[f+32>>2]=c;g=o[f+20>>2];o[d+8>>2]=o[f+16>>2];o[d+12>>2]=g;g=o[f+12>>2];o[d>>2]=o[f+8>>2];o[d+4>>2]=g;if((c|0)!=1){while(1){g=o[f+12>>2];d=o[f+36>>2]+(j<<4)|0;o[d>>2]=o[f+8>>2];o[d+4>>2]=g;g=o[f+20>>2];o[d+8>>2]=o[f+16>>2];o[d+12>>2]=g;j=j+1|0;if((j|0)!=(c|0)){continue}break}}o[f+28>>2]=c;if((c|0)<1){break b}n=n!=v(0)?v(v(1)/n):n;z=k!=v(0)?v(v(1)/k):k;q=q!=v(0)?v(v(1)/q):q;r=(f+8|0)+(o[a+104>>2]<<2)|0;t=(f+8|0)+(o[a+112>>2]<<2)|0;x=(f+8|0)+(o[a+108>>2]<<2)|0;A=s[a+24>>2];B=s[a+20>>2];C=s[a+16>>2];y=o[f+36>>2];h=0;while(1){k=s[b>>2];D=s[b+4>>2];E=s[b+8>>2];o[f+20>>2]=0;s[f+16>>2]=n*v(E-A);s[f+12>>2]=z*v(D-B);s[f+8>>2]=q*v(k-C);d=y+(h<<4)|0;j=d;k=s[x>>2];d:{if(v(w(k))<v(2147483648)){g=~~k;break d}g=-2147483648}o[j>>2]=g;j=d;k=s[t>>2];e:{if(v(w(k))<v(2147483648)){g=~~k;break e}g=-2147483648}o[j+4>>2]=g;k=s[r>>2];o[d+12>>2]=h;if(v(w(k))<v(2147483648)){j=~~k}else{j=-2147483648}o[d+8>>2]=j;b=b+16|0;h=h+1|0;if((h|0)!=(c|0)){continue}break}break c}o[f+28>>2]=c;break b}if((c|0)<2){break b}mf(f+24|0,f+8|0,0,c+ -1|0)}o[a+44>>2]=c;o[a+40>>2]=0;o[a+36>>2]=o[a+32>>2];b=o[a+84>>2];if((b|0)<(c|0)){if(o[a+88>>2]<(c|0)){f:{if(!c){t=0;d=b;break f}o[7717]=o[7717]+1;t=l[o[6606]](c<<2,16)|0;d=o[a+84>>2]}if((d|0)>=1){j=0;while(1){g=j<<2;o[g+t>>2]=o[g+o[a+92>>2]>>2];j=j+1|0;if((d|0)!=(j|0)){continue}break}}d=o[a+92>>2];if(d){if(p[a+96|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+92>>2]=0}o[a+92>>2]=t;o[a+88>>2]=c;m[a+96|0]=1}while(1){o[o[a+92>>2]+(b<<2)>>2]=0;b=b+1|0;if((c|0)!=(b|0)){continue}break}}o[a+84>>2]=c;if((c|0)>=1){r=0;while(1){g=o[a+40>>2];g:{if(g){break g}h=o[a+36>>2];h:{if(h){o[a+36>>2]=o[h+8>>2];break h}o[7717]=o[7717]+1;h=l[o[6606]](12,16)|0;b=o[a+44>>2];o[h+8>>2]=0;o[h+4>>2]=b;o[7717]=o[7717]+1;o[h>>2]=l[o[6606]](u(b,112),16);o[h+8>>2]=o[a+32>>2];o[a+32>>2]=h}b=0;g=o[h>>2];j=g;d=o[h+4>>2];if((d|0)<1){break g}while(1){h=j;j=j+112|0;b=b+1|0;o[h>>2]=(b|0)<(d|0)?j:0;if((b|0)!=(d|0)){continue}break}}o[a+40>>2]=o[g>>2];o[g+8>>2]=0;o[g+12>>2]=0;o[g+16>>2]=0;o[g>>2]=0;o[g+4>>2]=0;o[g+104>>2]=-1;o[g+8>>2]=0;b=o[f+36>>2]+(r<<4)|0;d=o[b+4>>2];o[g+88>>2]=o[b>>2];o[g+92>>2]=d;d=o[b+12>>2];o[g+96>>2]=o[b+8>>2];o[g+100>>2]=d;o[g+104>>2]=-1;o[o[a+92>>2]+(r<<2)>>2]=g;r=r+1|0;if((r|0)!=(c|0)){continue}break}}b=o[f+36>>2];if(b){if(p[f+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[f+36>>2]=0}o[f+36>>2]=0;m[f+40|0]=1;o[f+28>>2]=0;o[f+32>>2]=0;o[a+100>>2]=-3;o[a+56>>2]=0;o[a+60>>2]=u(c,6);o[a+116>>2]=0;o[a+120>>2]=0;o[a+52>>2]=o[a+48>>2];o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;of(a,0,c,f+8|0);o[a+124>>2]=o[f+8>>2];a=o[f+36>>2];if(a){if(p[f+40|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[f+36>>2]=0}M=f+48|0}function xm(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=0,y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),M=0,N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=0;c=s[a+84>>2];d=s[b+80>>2];x=c<d;M=x?0:-1;f=s[a+268>>2];c=x?c:d;x=f<c;T=x?1:M;d=s[a+452>>2];c=x?f:c;x=d<c;M=s[a+636>>2]<(x?d:c);x=M?3:x?2:T;i=s[b>>2];a:{b:{c:{d:{if(p[26408]){if(!x){q=s[a+564>>2];y=s[a+380>>2];g=v(q-y);u=s[a+560>>2];z=s[a+376>>2];f=v(u-z);e=s[a+556>>2];D=s[a+372>>2];l=v(e-D);c=s[b+8>>2];d=s[b+4>>2];break d}h=s[a+188>>2];j=v(i-h);u=s[a+560>>2];z=s[a+376>>2];f=v(u-z);d=s[b+4>>2];n=s[a+192>>2];c=v(d-n);e=s[a+556>>2];D=s[a+372>>2];l=v(e-D);g=v(v(j*f)-v(c*l));k=v(g*g);q=s[a+564>>2];y=s[a+380>>2];g=v(q-y);m=v(c*g);c=s[b+8>>2];A=s[a+196>>2];r=v(c-A);t=v(m-v(r*f));j=v(v(r*l)-v(j*g));S=v(k+v(v(t*t)+v(j*j)));if((x|0)!=1){break d}i=v(i-s[a+4>>2]);c=v(c-s[a+12>>2]);d=v(d-s[a+8>>2]);l=v(0);break c}e:{f:{g:{if(!x){A=s[a+380>>2];j=s[a+564>>2];l=v(A-j);n=s[a+376>>2];r=s[a+560>>2];C=v(n-r);h=s[a+372>>2];t=s[a+556>>2];E=v(h-t);y=s[b+8>>2];f=v(y-j);z=s[b+4>>2];J=v(z-r);K=v(i-t);d=v(y-A);c=v(z-n);g=v(i-h);break g}G=s[a+188>>2];u=v(i-G);n=s[a+376>>2];r=s[a+560>>2];C=v(n-r);z=s[b+4>>2];H=s[a+192>>2];q=v(z-H);h=s[a+372>>2];t=s[a+556>>2];E=v(h-t);c=v(v(u*C)-v(q*E));d=v(c*c);A=s[a+380>>2];j=s[a+564>>2];l=v(A-j);y=s[b+8>>2];e=s[a+196>>2];D=v(y-e);c=v(v(q*l)-v(D*C));f=v(c*c);c=v(v(D*E)-v(u*l));f=v(d+v(f+v(c*c)));g=v(i-h);F=v(H-r);c=v(z-n);N=v(G-t);d=v(v(g*F)-v(c*N));k=v(d*d);O=v(e-j);d=v(y-A);m=v(v(c*O)-v(d*F));o=v(m*m);m=v(v(d*N)-v(g*O));m=v(k+v(o+v(m*m)));m=f>m?f:m;f=v(H-n);K=v(i-t);o=v(G-h);J=v(z-r);B=v(v(f*K)-v(o*J));I=v(B*B);B=v(e-A);k=f;f=v(y-j);k=v(v(B*J)-v(k*f));o=v(v(o*f)-v(B*K));o=v(I+v(v(k*k)+v(o*o)));S=m>o?m:o;if((x|0)!=1){break g}m=s[a+4>>2];P=v(m-t);k=v(i-m);o=s[a+12>>2];Q=v(o-j);B=s[a+8>>2];R=v(B-r);I=v(y-o);L=v(z-B);l=v(0);break f}m=s[a+4>>2];k=v(i-m);B=s[a+8>>2];L=v(z-B);e=v(v(k*C)-v(L*E));q=v(e*e);o=s[a+12>>2];I=v(y-o);e=v(v(L*l)-v(I*C));l=v(v(I*E)-v(k*l));l=v(q+v(v(e*e)+v(l*l)));R=v(B-r);P=v(m-t);e=v(v(g*R)-v(c*P));q=v(e*e);Q=v(o-j);e=v(v(c*Q)-v(d*R));u=v(e*e);e=v(v(d*P)-v(g*Q));e=v(q+v(u+v(e*e)));l=l>e?l:e;C=v(B-n);E=v(m-h);e=v(v(C*K)-v(E*J));q=v(e*e);F=v(o-A);e=v(v(F*J)-v(C*f));u=v(e*e);e=v(v(E*f)-v(F*K));e=v(q+v(u+v(e*e)));l=l>e?l:e;e=s[a+196>>2];D=v(y-e);H=s[a+192>>2];q=v(z-H);G=s[a+188>>2];u=v(i-G);if((x|0)==2){j=v(o-e);r=v(B-H);t=v(m-G);f=v(0);break e}O=v(e-j);F=v(H-r);N=v(G-t)}c=v(v(k*F)-v(L*N));d=v(c*c);c=v(v(L*O)-v(I*F));g=v(c*c);c=v(v(I*N)-v(k*O));c=v(d+v(g+v(c*c)));d=v(v(u*R)-v(q*P));g=v(d*d);d=v(v(q*Q)-v(D*R));j=v(d*d);d=v(v(D*P)-v(u*Q));d=v(g+v(j+v(d*d)));c=c>d?c:d;r=v(B-H);t=v(m-G);d=v(v(r*K)-v(t*J));g=v(d*d);j=v(o-e);d=v(v(j*J)-v(r*f));C=v(d*d);d=v(v(t*f)-v(j*K));d=v(g+v(C+v(d*d)));f=c>d?c:d;g=v(0);if(M){break a}F=v(o-A);C=v(B-n);E=v(m-h);d=v(y-A);c=v(z-n);g=v(i-h)}i=v(H-n);h=v(G-h);n=v(v(k*i)-v(L*h));m=v(n*n);n=v(e-A);i=v(v(L*n)-v(I*i));e=v(i*i);i=v(v(I*h)-v(k*n));i=v(m+v(e+v(i*i)));h=v(v(u*C)-v(q*E));k=v(h*h);h=v(v(q*F)-v(D*C));e=v(h*h);h=v(v(D*E)-v(u*F));h=v(k+v(e+v(h*h)));i=i>h?i:h;h=v(v(r*g)-v(t*c));c=v(v(j*c)-v(r*d));k=v(c*c);c=v(v(t*d)-v(j*g));c=v(v(h*h)+v(k+v(c*c)));g=i>c?i:c;break a}i=v(i-s[a+4>>2]);d=v(d-s[a+8>>2]);h=v(v(i*f)-v(d*l));c=v(c-s[a+12>>2]);f=v(v(d*g)-v(c*f));k=v(f*f);f=v(v(c*l)-v(i*g));l=v(v(h*h)+v(k+v(f*f)));A=s[a+196>>2];n=s[a+192>>2];h=s[a+188>>2];f=v(0);if((x|0)==2){break b}}f=v(u-n);g=v(e-h);j=v(v(i*f)-v(d*g));k=v(j*j);j=v(q-A);f=v(v(d*j)-v(c*f));e=v(f*f);f=v(v(c*g)-v(i*j));f=v(k+v(e+v(f*f)));g=v(0);if(M){break a}}g=v(z-n);h=v(D-h);n=v(v(i*g)-v(d*h));k=d;d=v(y-A);g=v(v(k*d)-v(c*g));c=v(v(c*h)-v(i*d));g=v(v(n*n)+v(v(g*g)+v(c*c)))}c=v(w(S));a=c>v(-0xde0b6b000000000);b=a?0:-1;d=v(w(l));c=a?c:v(-0xde0b6b000000000);a=d>c;b=a?1:b;f=v(w(f));c=a?d:c;a=f>c;return v(w(g))>(a?f:c)?3:a?2:b}function Ak(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,r=0;f=M-112|0;M=f;m[a+60|0]=c;a:{if(c){sE(a,d,e);o[f+96>>2]=a;o[f+92>>2]=a+104;o[f+88>>2]=15236;l[o[o[b>>2]+8>>2]](b,f+88|0,a+4|0,a+20|0);e=o[a+108>>2];o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;c=o[a+128>>2];g=e<<1;if((c|0)<(g|0)){if(o[a+132>>2]<(g|0)){if(e){o[7717]=o[7717]+1;j=l[o[6606]](e<<5,16)|0;d=o[a+128>>2]}else{d=c}if((d|0)>=1){b=0;while(1){h=b<<4;k=h+j|0;i=k;h=h+o[a+136>>2]|0;r=o[h+4>>2];o[i>>2]=o[h>>2];o[i+4>>2]=r;i=o[h+12>>2];o[k+8>>2]=o[h+8>>2];o[k+12>>2]=i;b=b+1|0;if((d|0)!=(b|0)){continue}break}}b=o[a+136>>2];if(b){if(p[a+140|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+136>>2]=0}o[a+136>>2]=j;o[a+132>>2]=g;m[a+140|0]=1}while(1){j=o[f+12>>2];b=o[a+136>>2]+(c<<4)|0;o[b>>2]=o[f+8>>2];o[b+4>>2]=j;d=o[f+20>>2];o[b+8>>2]=o[f+16>>2];o[b+12>>2]=d;c=c+1|0;if((g|0)!=(c|0)){continue}break}}o[a+128>>2]=g;break a}o[f+104>>2]=15368;o[f+108>>2]=a- -64;o[f+96>>2]=-581039253;o[f+100>>2]=0;o[f+88>>2]=-581039253;o[f+92>>2]=-581039253;o[f+80>>2]=1566444395;o[f+84>>2]=0;o[f+72>>2]=1566444395;o[f+76>>2]=1566444395;l[o[o[b>>2]+8>>2]](b,f+104|0,f+88|0,f+72|0);e=o[a+68>>2];b=f- -64|0;o[b>>2]=0;o[b+4>>2]=0;o[f+56>>2]=0;o[f+60>>2]=0;o[f+48>>2]=0;o[f+52>>2]=0;o[f+40>>2]=0;o[f+44>>2]=0;o[f+32>>2]=0;o[f+36>>2]=0;o[f+24>>2]=0;o[f+28>>2]=0;o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;b=o[a+88>>2];h=e<<1;if((b|0)<(h|0)){if(o[a+92>>2]<(h|0)){if(e){o[7717]=o[7717]+1;j=l[o[6606]](e<<7,16)|0;c=o[a+88>>2]}else{c=b}if((c|0)>=1){while(1){d=k<<6;g=d+j|0;d=d+o[a+96>>2]|0;r=o[d+4>>2];o[g>>2]=o[d>>2];o[g+4>>2]=r;i=o[d+60>>2];o[g+56>>2]=o[d+56>>2];o[g+60>>2]=i;i=o[d+52>>2];o[g+48>>2]=o[d+48>>2];o[g+52>>2]=i;i=o[d+44>>2];o[g+40>>2]=o[d+40>>2];o[g+44>>2]=i;i=o[d+36>>2];o[g+32>>2]=o[d+32>>2];o[g+36>>2]=i;i=o[d+28>>2];o[g+24>>2]=o[d+24>>2];o[g+28>>2]=i;i=o[d+20>>2];o[g+16>>2]=o[d+16>>2];o[g+20>>2]=i;i=o[d+12>>2];o[g+8>>2]=o[d+8>>2];o[g+12>>2]=i;k=k+1|0;if((c|0)!=(k|0)){continue}break}}c=o[a+96>>2];if(c){if(p[a+100|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+96>>2]=0}o[a+96>>2]=j;o[a+92>>2]=h;m[a+100|0]=1}while(1){g=o[f+12>>2];c=o[a+96>>2]+(b<<6)|0;o[c>>2]=o[f+8>>2];o[c+4>>2]=g;d=f- -64|0;g=o[d+4>>2];o[c+56>>2]=o[d>>2];o[c+60>>2]=g;d=o[f+60>>2];o[c+48>>2]=o[f+56>>2];o[c+52>>2]=d;d=o[f+52>>2];o[c+40>>2]=o[f+48>>2];o[c+44>>2]=d;d=o[f+44>>2];o[c+32>>2]=o[f+40>>2];o[c+36>>2]=d;d=o[f+36>>2];o[c+24>>2]=o[f+32>>2];o[c+28>>2]=d;d=o[f+28>>2];o[c+16>>2]=o[f+24>>2];o[c+20>>2]=d;d=o[f+20>>2];o[c+8>>2]=o[f+16>>2];o[c+12>>2]=d;b=b+1|0;if((h|0)!=(b|0)){continue}break}}o[a+88>>2]=h}o[a+56>>2]=0;Vf(a,0,e);if(!(o[a+152>>2]|!p[a+60|0])){b=a;b:{if(o[a+156>>2]){e=o[a+160>>2];c=1;break b}o[7717]=o[7717]+1;e=l[o[6606]](32,16)|0;j=o[a+152>>2];if((j|0)>=1){d=0;while(1){c=d<<5;g=c+e|0;c=c+o[a+160>>2]|0;k=o[c+4>>2];o[g>>2]=o[c>>2];o[g+4>>2]=k;h=o[c+28>>2];o[g+24>>2]=o[c+24>>2];o[g+28>>2]=h;h=o[c+20>>2];o[g+16>>2]=o[c+16>>2];o[g+20>>2]=h;h=o[c+12>>2];o[g+8>>2]=o[c+8>>2];o[g+12>>2]=h;d=d+1|0;if((j|0)!=(d|0)){continue}break}}c=o[a+160>>2];if(c){if(p[a+164|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+160>>2]=0}o[a+160>>2]=e;o[a+156>>2]=1;m[a+164|0]=1;c=o[a+152>>2]+1|0}o[b+152>>2]=c;b=o[f+36>>2];o[e+24>>2]=o[f+32>>2];o[e+28>>2]=b;b=o[f+28>>2];o[e+16>>2]=o[f+24>>2];o[e+20>>2]=b;b=o[f+20>>2];o[e+8>>2]=o[f+16>>2];o[e+12>>2]=b;b=o[f+12>>2];o[e>>2]=o[f+8>>2];o[e+4>>2]=b;b=o[a+160>>2];c=o[a+136>>2];n[b>>1]=q[c>>1];n[b+2>>1]=q[c+2>>1];n[b+4>>1]=q[c+4>>1];n[b+6>>1]=q[c+6>>1];n[b+8>>1]=q[c+8>>1];d=q[c+10>>1];o[b+12>>2]=0;n[b+10>>1]=d;d=b;b=o[c+12>>2];o[d+16>>2]=(b|0)>-1?1:0-b|0}o[a+168>>2]=o[a+152>>2];b=o[a+116>>2];if(b){if(p[a+120|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+116>>2]=0}o[a+116>>2]=0;m[a+120|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;b=o[a+76>>2];if(b){if(p[a+80|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+76>>2]=0}o[a+76>>2]=0;m[a+80|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;M=f+112|0}function Zz(a){var b=0,c=0,d=v(0),e=0,f=0,g=0,h=v(0),i=v(0),j=0,k=v(0),n=0,q=v(0),r=v(0),t=0,u=v(0),w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=0,C=0,D=v(0),E=v(0),F=v(0);y=M-16|0;M=y;if(o[a+1112>>2]>=1){while(1){b=o[o[a+1120>>2]+(B<<2)>>2];o[b+128>>2]=0;j=o[b+24>>2];f=j;e=o[b+4>>2];if((f|0)>(e|0)){a:{if(o[b+8>>2]>=(j|0)){n=o[b+12>>2];break a}f=0;c=e;n=0;if(j){o[7717]=o[7717]+1;n=l[o[6606]](j<<2,16)|0;c=o[b+4>>2]}g=o[b+12>>2];b:{c:{if((c|0)>=1){while(1){t=f<<2;o[t+n>>2]=o[g+t>>2];f=f+1|0;if((c|0)!=(f|0)){continue}break c}}if(!g){break b}}if(!p[b+16|0]){break b}if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[b+12>>2]=n;m[b+16|0]=1;o[b+8>>2]=j}$((e<<2)+n|0,0,j-e<<2);f=o[b+24>>2]}o[b+4>>2]=j;d:{e:{n=(f|0)>0;f:{if(!n){d=v(v(1)/s[b+128>>2]);s[b+128>>2]=d;break f}e=o[b+32>>2];j=o[b+12>>2];c=0;while(1){g=c<<2;d=s[o[g+e>>2]+88>>2];g:{if(d==v(0)){m[b+376|0]=1;d=v(0xde0b6b000000000);break g}d=v(v(1)/d)}s[j+g>>2]=d;d=v(d+s[b+128>>2]);s[b+128>>2]=d;c=c+1|0;if((c|0)!=(f|0)){continue}break}d=v(v(1)/d);s[b+128>>2]=d;if((f|0)>=1){break e}}h=v(0);k=v(0);q=v(0);break d}j=o[b+32>>2];g=o[b+12>>2];q=v(0);c=0;k=v(0);h=v(0);while(1){t=c<<2;e=o[t+j>>2];i=s[g+t>>2];h=v(h+v(s[e+8>>2]*i));q=v(q+v(i*s[e+16>>2]));k=v(k+v(i*s[e+12>>2]));c=c+1|0;if((c|0)!=(f|0)){continue}break}}o[b+316>>2]=0;o[b+320>>2]=0;o[b+132>>2]=0;o[b+136>>2]=0;o[b+240>>2]=0;D=v(d*q);s[b+236>>2]=D;E=v(d*k);s[b+232>>2]=E;F=v(d*h);s[b+228>>2]=F;o[b+164>>2]=0;o[b+168>>2]=0;o[b+172>>2]=0;o[b+176>>2]=0;o[b+324>>2]=0;o[b+328>>2]=0;o[b+332>>2]=0;o[b+336>>2]=0;o[b+340>>2]=0;o[b+344>>2]=0;o[b+348>>2]=0;o[b+148>>2]=0;o[b+152>>2]=0;o[b+156>>2]=0;o[b+160>>2]=0;o[b+140>>2]=0;o[b+144>>2]=0;h:{if(!n){i=s[b+152>>2];k=s[b+156>>2];d=s[b+140>>2];h=s[b+136>>2];q=s[b+132>>2];w=v(0);break h}k=s[b+156>>2];d=s[b+140>>2];h=s[b+136>>2];i=s[b+152>>2];n=o[b+32>>2];q=s[b+132>>2];j=o[b+12>>2];c=0;w=v(0);while(1){g=c<<2;e=o[g+n>>2];r=s[e+12>>2];u=v(s[e+16>>2]-D);z=v(s[e+8>>2]-F);x=s[j+g>>2];A=v(z*x);d=v(d-v(u*A));s[b+140>>2]=d;r=v(r-E);h=v(h-v(r*A));s[b+136>>2]=h;k=v(k-v(u*v(r*x)));s[b+156>>2]=k;z=v(z*z);r=v(r*r);w=v(v(x*v(z+r))+w);s[b+172>>2]=w;u=v(u*u);i=v(v(x*v(z+u))+i);s[b+152>>2]=i;q=v(q+v(x*v(r+u)));s[b+132>>2]=q;c=c+1|0;if((c|0)!=(f|0)){continue}break}}o[b+176>>2]=0;o[b+60>>2]=1065353216;o[b+160>>2]=0;o[b+144>>2]=0;c=b- -64|0;o[c>>2]=0;o[c+4>>2]=0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+84>>2]=0;o[b+88>>2]=0;o[b+80>>2]=1065353216;o[b+92>>2]=0;o[b+96>>2]=0;A=v(v(i*q)-v(h*h));x=v(v(i*w)-v(k*k));u=v(v(k*d)-v(w*h));r=v(v(k*h)-v(i*d));i=v(v(1)/v(v(v(x*q)+v(h*u))+v(r*d)));s[b+172>>2]=A*i;h=v(v(v(h*d)-v(k*q))*i);s[b+168>>2]=h;k=v(r*i);s[b+164>>2]=k;s[b+156>>2]=h;s[b+152>>2]=v(v(w*q)-v(d*d))*i;d=v(u*i);s[b+148>>2]=d;s[b+140>>2]=k;s[b+136>>2]=d;s[b+132>>2]=x*i;o[b+100>>2]=1065353216;o[b+104>>2]=0;c=o[b+232>>2];o[b+108>>2]=o[b+228>>2];o[b+112>>2]=c;c=o[b+240>>2];o[b+116>>2]=o[b+236>>2];o[b+120>>2]=c;c=o[b+44>>2];if((c|0)<(f|0)){if(o[b+48>>2]<(f|0)){i:{if(!f){j=0;e=c;break i}o[7717]=o[7717]+1;j=l[o[6606]](f<<4,16)|0;e=o[b+44>>2]}if((e|0)>=1){n=0;while(1){g=n<<4;t=g+j|0;g=g+o[b+52>>2]|0;C=o[g+4>>2];o[t>>2]=o[g>>2];o[t+4>>2]=C;C=o[g+12>>2];o[t+8>>2]=o[g+8>>2];o[t+12>>2]=C;n=n+1|0;if((e|0)!=(n|0)){continue}break}}e=o[b+52>>2];if(e){if(p[b+56|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+52>>2]=0}o[b+52>>2]=j;o[b+48>>2]=f;m[b+56|0]=1}while(1){j=o[y+4>>2];e=o[b+52>>2]+(c<<4)|0;o[e>>2]=o[y>>2];o[e+4>>2]=j;n=o[y+12>>2];o[e+8>>2]=o[y+8>>2];o[e+12>>2]=n;c=c+1|0;if((c|0)!=(f|0)){continue}break}}o[b+44>>2]=f;if((f|0)>=1){f=0;while(1){c=o[o[b+32>>2]+(f<<2)>>2];d=s[c+12>>2];h=s[c+16>>2];k=s[c+8>>2];q=s[b+232>>2];i=s[b+236>>2];w=s[b+228>>2];c=o[b+52>>2]+(f<<4)|0;o[c+12>>2]=0;s[c>>2]=k-w;s[c+8>>2]=h-i;s[c+4>>2]=d-q;f=f+1|0;if((f|0)<o[b+44>>2]){continue}break}}B=B+1|0;if((B|0)<o[a+1112>>2]){continue}break}}M=y+16|0}function AB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=0,i=0,j=0,k=v(0),n=v(0),q=v(0),r=v(0),t=0,x=0;b=o[d+64>>2];a:{if(!(b&4)){break a}h=o[a+28>>2];if((h|0)<1){break a}i=b&16;j=o[a+76>>2];t=o[a+36>>2];c=0;while(1){b=t+u(c,152)|0;e=o[b+132>>2];o[e+120>>2]=o[b+100>>2];b=j+u(o[b+140>>2],152)|0;o[e+124>>2]=o[b+100>>2];if(i){o[e+128>>2]=o[b+252>>2]}c=c+1|0;if((h|0)!=(c|0)){continue}break}}t=o[a+48>>2];if((t|0)>=1){x=o[a+56>>2];e=0;while(1){c=u(e,152)+x|0;h=o[c+132>>2];b=o[h+44>>2];if(b){i=o[h+28>>2];k=s[i+356>>2];n=s[c+24>>2];q=s[i+352>>2];r=s[c+20>>2];f=s[c+100>>2];g=v(v(1)/s[d+12>>2]);s[b>>2]=s[b>>2]+v(v(v(s[c+16>>2]*f)*s[i+348>>2])*g);s[b+4>>2]=v(v(q*v(f*r))*g)+s[b+4>>2];s[b+8>>2]=v(v(k*v(f*n))*g)+s[b+8>>2];j=o[h+32>>2];k=s[j+356>>2];n=s[c+56>>2];q=s[j+352>>2];r=s[c+52>>2];f=s[c+100>>2];g=v(v(1)/s[d+12>>2]);s[b+32>>2]=s[b+32>>2]+v(v(v(s[c+48>>2]*f)*s[j+348>>2])*g);s[b+36>>2]=v(v(q*v(f*r))*g)+s[b+36>>2];s[b+40>>2]=v(v(k*v(f*n))*g)+s[b+40>>2];k=s[i+552>>2];n=s[c+8>>2];q=s[i+548>>2];r=s[c+4>>2];f=s[c+100>>2];g=v(v(1)/s[d+12>>2]);s[b+16>>2]=s[b+16>>2]+v(v(v(s[c>>2]*s[i+544>>2])*f)*g);s[b+20>>2]=v(v(f*v(r*q))*g)+s[b+20>>2];s[b+24>>2]=v(v(f*v(n*k))*g)+s[b+24>>2];k=s[j+552>>2];n=s[c+40>>2];q=s[j+548>>2];r=s[c+36>>2];f=s[c+100>>2];g=v(v(1)/s[d+12>>2]);s[b+48>>2]=s[b+48>>2]+v(v(v(s[c+32>>2]*s[j+544>>2])*f)*g);s[b+52>>2]=v(v(f*v(r*q))*g)+s[b+52>>2];s[b+56>>2]=v(v(f*v(n*k))*g)+s[b+56>>2]}f=s[c+100>>2];s[h+36>>2]=f;if(!!(v(w(f))>=s[h+16>>2])){m[h+20|0]=0}e=e+1|0;if((t|0)!=(e|0)){continue}break}}e=o[a+8>>2];if((e|0)>=1){i=o[a+16>>2];j=0;while(1){h=u(j,244);b=h+i|0;c=o[b+240>>2];if(c){b:{if(o[d+44>>2]){zB(b,s[d+12>>2],s[d+52>>2]);i=o[a+16>>2];b=h+i|0;f=s[b+176>>2];c=o[b+240>>2];g=s[b+184>>2];k=s[b+180>>2];break b}f=v(s[b+64>>2]+s[b+176>>2]);s[b+176>>2]=f;s[b+192>>2]=s[b+80>>2]+s[b+192>>2];k=v(s[b+68>>2]+s[b+180>>2]);s[b+180>>2]=k;g=v(s[b+72>>2]+s[b+184>>2]);s[b+184>>2]=g;s[b+196>>2]=s[b+84>>2]+s[b+196>>2];s[b+200>>2]=s[b+88>>2]+s[b+200>>2]}b=h+i|0;n=s[b+212>>2];q=s[b+216>>2];r=s[b+208>>2];o[c+324>>2]=0;s[c+312>>2]=f+r;o[c+260>>2]=o[c+260>>2]+1;s[c+320>>2]=g+q;s[c+316>>2]=k+n;b=h+o[a+16>>2]|0;f=s[b+228>>2];g=s[b+196>>2];k=s[b+232>>2];n=s[b+200>>2];q=s[b+224>>2];r=s[b+192>>2];b=o[b+240>>2];o[b+340>>2]=0;s[b+328>>2]=r+q;s[b+336>>2]=n+k;s[b+332>>2]=g+f;o[b+260>>2]=o[b+260>>2]+1;if(o[d+44>>2]){c=h+o[a+16>>2]|0;b=o[c+240>>2];o[b+260>>2]=o[b+260>>2]+1;e=o[c+12>>2];o[b+12>>2]=o[c+8>>2];o[b+16>>2]=e;e=o[c+4>>2];o[b+4>>2]=o[c>>2];o[b+8>>2]=e;e=o[c+28>>2];o[b+28>>2]=o[c+24>>2];o[b+32>>2]=e;e=o[c+20>>2];o[b+20>>2]=o[c+16>>2];o[b+24>>2]=e;e=o[c+36>>2];o[b+36>>2]=o[c+32>>2];o[b+40>>2]=e;e=o[c+44>>2];o[b+44>>2]=o[c+40>>2];o[b+48>>2]=e;e=o[c+60>>2];o[b+60>>2]=o[c+56>>2];o[b+64>>2]=e;e=o[c+52>>2];o[b+52>>2]=o[c+48>>2];o[b+56>>2]=e}i=o[a+16>>2];o[o[(h+i|0)+240>>2]+212>>2]=-1;e=o[a+8>>2]}j=j+1|0;if((j|0)<(e|0)){continue}break}}if(!(o[a+28>>2]>-1|o[a+32>>2]>-1)){b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+32>>2]=0;o[a+36>>2]=0;m[a+40|0]=1}o[a+28>>2]=0;if(!(o[a+48>>2]>-1|o[a+52>>2]>-1)){b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+52>>2]=0;o[a+56>>2]=0;m[a+60|0]=1}o[a+48>>2]=0;if(!(o[a+68>>2]>-1|o[a+72>>2]>-1)){b=o[a+76>>2];if(b){if(p[a+80|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+76>>2]=0}o[a+72>>2]=0;o[a+76>>2]=0;m[a+80|0]=1}o[a+68>>2]=0;if(!(o[a+88>>2]>-1|o[a+92>>2]>-1)){b=o[a+96>>2];if(b){if(p[a+100|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+96>>2]=0}o[a+92>>2]=0;o[a+96>>2]=0;m[a+100|0]=1}o[a+88>>2]=0;if(!(o[a+8>>2]>-1|o[a+12>>2]>-1)){b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+12>>2]=0;o[a+16>>2]=0;m[a+20|0]=1}o[a+8>>2]=0;return v(v(0))}function NK(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=0,m=v(0),n=v(0),q=0,r=v(0),t=v(0),u=v(0),x=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=0,S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0),ga=v(0),ha=v(0),ia=v(0),ja=v(0);d=M-48|0;M=d;a:{if(!o[a+12>>2]){break a}f=p[a+16|0];R=f?b:c;k=o[R+12>>2];x=s[k+56>>2];X=s[k+52>>2];z=s[k+48>>2];q=f?c:b;f=o[q+12>>2];A=s[f+56>>2];P=s[f+52>>2];Q=s[f+48>>2];q=o[q+4>>2];B=s[f+32>>2];G=s[f>>2];H=s[f+16>>2];E=s[f+36>>2];J=s[f+20>>2];K=s[f+4>>2];g=s[k+40>>2];h=s[k+24>>2];i=s[k+8>>2];j=s[k+36>>2];r=s[k+20>>2];n=s[k+4>>2];t=s[k+32>>2];D=s[f+40>>2];u=s[k+16>>2];L=s[f+24>>2];m=s[k>>2];N=s[f+8>>2];k=o[R+4>>2];F=s[k+56>>2];I=s[k+52>>2];O=s[k+48>>2];o[d+28>>2]=0;T=v(v(v(N*n)+v(L*r))+v(D*j));I=v(-I);U=v(v(v(N*m)+v(L*u))+v(D*t));D=v(v(v(N*i)+v(L*h))+v(D*g));s[d+24>>2]=v(v(T*I)-v(O*U))-v(F*D);L=v(v(v(K*n)+v(J*r))+v(E*j));N=v(v(v(K*m)+v(J*u))+v(E*t));V=v(v(v(K*i)+v(J*h))+v(E*g));s[d+20>>2]=v(v(L*I)-v(O*N))-v(F*V);W=v(v(v(G*n)+v(H*r))+v(B*j));S=O;O=v(v(v(G*m)+v(H*u))+v(B*t));E=F;F=v(v(v(G*i)+v(H*h))+v(B*g));s[d+16>>2]=v(v(W*I)-v(S*O))-v(E*F);l[o[o[q>>2]+64>>2]](d+32|0,q,d+16|0);f=o[R+12>>2];I=s[f+48>>2];Y=s[f+32>>2];Z=s[f+16>>2];_=s[f+8>>2];$=s[f+4>>2];aa=s[f>>2];ba=s[f+56>>2];ca=s[f+52>>2];da=s[f+40>>2];ea=s[f+36>>2];fa=s[f+24>>2];ga=s[f+20>>2];ha=s[k+64>>2];E=s[k+56>>2];J=s[k+48>>2];K=s[k+52>>2];B=s[d+40>>2];G=s[d+32>>2];H=s[d+36>>2];ia=s[o[a+12>>2]+752>>2];o[e+4>>2]=o[a+12>>2];ja=v(v(v(Q*i)+v(P*h))+v(A*g));S=h;h=v(-X);D=v(v(ja+v(v(v(S*h)-v(z*i))-v(x*g)))+v(v(v(F*G)+v(V*H))+v(D*B)));t=v(v(v(v(v(Q*m)+v(P*u))+v(A*t))+v(v(v(u*h)-v(z*m))-v(x*t)))+v(v(v(O*G)+v(N*H))+v(U*B)));r=v(v(v(v(v(Q*n)+v(P*r))+v(A*j))+v(v(v(r*h)-v(z*n))-v(x*j)))+v(v(v(W*G)+v(L*H))+v(T*B)));g=v(v(v(E*D)+v(v(J*t)+v(K*r)))-ha);if(!!(g<ia)){f=o[R+12>>2];n=s[f+24>>2];u=s[f+20>>2];m=s[f+40>>2];x=s[f+36>>2];z=s[f+16>>2];A=s[f+32>>2];h=s[k+56>>2];P=s[f+8>>2];i=s[k+48>>2];Q=s[f>>2];j=s[k+52>>2];B=s[f+4>>2];o[d+28>>2]=0;s[d+16>>2]=v(v(Q*i)+v(B*j))+v(P*h);s[d+24>>2]=v(v(i*A)+v(j*x))+v(h*m);s[d+20>>2]=v(v(i*z)+v(j*u))+v(h*n);o[d+12>>2]=0;h=v(t-v(J*g));i=v(r-v(K*g));j=v(D-v(E*g));s[d+8>>2]=v(v(v(h*Y)+v(i*ea))+v(j*da))+ba;s[d+4>>2]=v(v(v(h*Z)+v(i*ga))+v(j*fa))+ca;s[d>>2]=v(v(_*j)+v(v(aa*h)+v($*i)))+I;l[o[o[e>>2]+16>>2]](e,d+16|0,d,g)}b:{if(o[q+4>>2]>6|o[o[e+4>>2]+748>>2]>=o[a+24>>2]){break b}h=s[k+56>>2];c:{if(!!(v(w(h))>v(.7071067690849304))){g=s[k+52>>2];i=v(v(1)/v(C(v(v(h*h)+v(g*g)))));g=v(g*i);h=v(i*v(-h));i=v(0);break c}g=s[k+48>>2];i=s[k+52>>2];j=v(v(1)/v(C(v(v(g*g)+v(i*i)))));h=v(g*j);g=v(0);i=v(j*v(-i))}f=0;j=v(l[o[o[q>>2]+16>>2]](q));j=v(v(y(v(s[6601]/j),v(.39269909262657166)))*v(.5));n=qa(j);q=o[a+20>>2];r=ra(j);if((q|0)<1){break b}F=g;g=v(n/v(C(v(v(v(i*i)+v(h*h))+v(g*g)))));n=v(F*g);t=v(h*g);u=v(i*g);while(1){h=s[k+52>>2];j=s[k+48>>2];g=s[k+56>>2];i=v(v(v(v(6.2831854820251465)/v(q|0))*v(f|0))*v(.5));m=v(qa(i)/v(C(v(v(v(j*j)+v(h*h))+v(g*g)))));g=v(g*m);h=v(h*m);i=ra(i);j=v(j*m);m=v(v(n*g)+v(v(t*h)+v(v(r*i)+v(u*j))));x=v(v(t*g)+v(v(v(u*i)-v(r*j))-v(n*h)));z=v(v(n*j)+v(v(v(t*i)-v(r*h))-v(u*g)));A=v(v(u*h)+v(v(v(n*i)-v(r*g))-v(t*j)));s[d+28>>2]=v(v(v(i*m)-v(j*x))-v(h*z))-v(g*A);s[d+24>>2]=v(v(h*x)+v(v(g*m)+v(i*A)))-v(j*z);s[d+20>>2]=v(v(j*A)+v(v(i*z)+v(h*m)))-v(g*x);s[d+16>>2]=v(v(g*z)+v(v(j*m)+v(i*x)))-v(h*A);PK(a,d+16|0,b,c,e);f=f+1|0;q=o[a+20>>2];if((f|0)<(q|0)){continue}break}}if(!p[a+8|0]|!o[o[a+12>>2]+748>>2]){break a}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0)}M=d+48|0}function kz(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=v(0),h=v(0),i=0,j=0,k=0,n=v(0),q=v(0),r=v(0),t=v(0);d=M-448|0;M=d;c=o[c+36>>2];e=o[b+36>>2];b=o[a+24>>2];a:{if(!(p[o[b+1140>>2]+(o[e+380>>2]+u(o[c+380>>2],o[b+1112>>2])|0)|0]?!((b|0)!=o[a+28>>2]|!o[b+1132>>2]):0)){b=d+392|0;o[b+4>>2]=35;o[b+8>>2]=0;o[b>>2]=13316;o[b+44>>2]=1025758986;o[b+20>>2]=1065353216;o[b+24>>2]=0;o[b+12>>2]=1065353216;o[b+16>>2]=1065353216;o[b>>2]=13444;o[d+444>>2]=e;o[d+392>>2]=21856;o[d+436>>2]=0;b=d+336|0;o[b+4>>2]=35;o[b+8>>2]=0;o[b>>2]=13316;o[b+44>>2]=1025758986;o[b+20>>2]=1065353216;o[b+24>>2]=0;o[b+12>>2]=1065353216;o[b+16>>2]=1065353216;o[b>>2]=13444;o[d+388>>2]=c;o[d+336>>2]=21856;o[d+380>>2]=0;b:{if(m[26880]&1){break b}if(!da(26880)){break b}c:{if(m[26932]&1){break c}if(!da(26932)){break c}o[6722]=0;o[6723]=0;o[6721]=1065353216;o[6724]=0;o[6725]=0;o[6727]=0;o[6728]=0;o[6726]=1065353216;o[6729]=0;o[6730]=0;o[6731]=1065353216;o[6732]=0;ca(26932)}o[6716]=0;o[6717]=0;o[6718]=0;o[6719]=0;b=o[6724];o[6706]=o[6723];o[6707]=b;b=o[6722];o[6704]=o[6721];o[6705]=b;b=o[6726];o[6708]=o[6725];o[6709]=b;b=o[6728];o[6710]=o[6727];o[6711]=b;b=o[6730];o[6712]=o[6729];o[6713]=b;b=o[6732];o[6714]=o[6731];o[6715]=b;ca(26880)}d:{if(m[26880]&1){break d}if(!da(26880)){break d}e:{if(m[26932]&1){break e}if(!da(26932)){break e}o[6722]=0;o[6723]=0;o[6721]=1065353216;o[6724]=0;o[6725]=0;o[6727]=0;o[6728]=0;o[6726]=1065353216;o[6729]=0;o[6730]=0;o[6731]=1065353216;o[6732]=0;ca(26932)}o[6716]=0;o[6717]=0;o[6718]=0;o[6719]=0;b=o[6724];o[6706]=o[6723];o[6707]=b;b=o[6722];o[6704]=o[6721];o[6705]=b;b=o[6726];o[6708]=o[6725];o[6709]=b;b=o[6728];o[6710]=o[6727];o[6711]=b;b=o[6730];o[6712]=o[6729];o[6713]=b;b=o[6732];o[6714]=o[6731];o[6715]=b;ca(26880)}g=s[c+232>>2];h=s[e+232>>2];n=s[c+236>>2];q=s[e+236>>2];r=s[c+228>>2];t=s[e+228>>2];o[d+76>>2]=0;s[d+64>>2]=t-r;s[d+72>>2]=q-n;s[d+68>>2]=h-g;f:{if(!Ag(d+392|0,d+336|0,26816,d- -64|0,d+280|0)){break f}o[d+84>>2]=0;o[d+88>>2]=0;o[d+76>>2]=0;o[d+80>>2]=0;o[d+24>>2]=0;o[d+8>>2]=0;o[d+52>>2]=0;o[d+56>>2]=0;o[d+48>>2]=e;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=c;o[d+68>>2]=0;o[d+72>>2]=0;m[d+216|0]=0;o[d+64>>2]=21376;b=o[d+52>>2];o[d+16>>2]=o[d+48>>2];o[d+20>>2]=b;b=o[d+36>>2];o[d>>2]=o[d+32>>2];o[d+4>>2]=b;if(!Fi(a,d+280|0,d+16|0,d,d- -64|0)){break f}o[7717]=o[7717]+1;c=l[o[6606]](216,16)|0;b=$(c+4|0,0,212);o[c>>2]=21376;ja(b,d- -64|4,100);b=o[d+180>>2];o[c+112>>2]=o[d+176>>2];o[c+116>>2]=b;b=o[d+172>>2];o[c+104>>2]=o[d+168>>2];o[c+108>>2]=b;b=o[d+196>>2];o[c+128>>2]=o[d+192>>2];o[c+132>>2]=b;b=o[d+188>>2];o[c+120>>2]=o[d+184>>2];o[c+124>>2]=b;b=o[d+204>>2];o[c+136>>2]=o[d+200>>2];o[c+140>>2]=b;b=o[d+212>>2];o[c+144>>2]=o[d+208>>2];o[c+148>>2]=b;m[c+152|0]=p[d+216|0];o[c+212>>2]=o[d+276>>2];b=o[d+272>>2];o[c+204>>2]=o[d+268>>2];o[c+208>>2]=b;b=o[d+264>>2];o[c+196>>2]=o[d+260>>2];o[c+200>>2]=b;b=o[d+256>>2];o[c+188>>2]=o[d+252>>2];o[c+192>>2]=b;b=o[d+248>>2];o[c+180>>2]=o[d+244>>2];o[c+184>>2]=b;b=o[d+240>>2];o[c+172>>2]=o[d+236>>2];o[c+176>>2]=b;b=o[d+232>>2];o[c+164>>2]=o[d+228>>2];o[c+168>>2]=b;b=o[d+224>>2];o[c+156>>2]=o[d+220>>2];o[c+160>>2]=b;e=o[a+24>>2];f=o[e+852>>2];g:{if((f|0)!=o[e+856>>2]){break g}i=f?f<<1:1;if((f|0)>=(i|0)){break g}if(i){o[7717]=o[7717]+1;j=l[o[6606]](i<<2,16)|0;f=o[e+852>>2]}if((f|0)>=1){b=0;while(1){k=b<<2;o[k+j>>2]=o[o[e+860>>2]+k>>2];b=b+1|0;if((f|0)!=(b|0)){continue}break}}b=o[e+860>>2];if(b){if(p[e+864|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}f=o[e+852>>2]}o[e+860>>2]=0}o[e+860>>2]=j;o[e+856>>2]=i;m[e+864|0]=1}o[o[e+860>>2]+(f<<2)>>2]=c;o[e+852>>2]=f+1;b=o[a+24>>2];g=s[b+348>>2];a=o[a+28>>2];h=s[a+348>>2];s[c+64>>2]=s[c+64>>2]*(g>h?g:h);s[c+68>>2]=s[c+68>>2]*v(v(s[b+360>>2]+s[a+360>>2])*v(.5))}break a}o[7688]=o[7688]+1}M=d+448|0}function DF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),r=v(0),w=0,x=0,y=0,z=0,A=0;c=M-80|0;M=c;A=l[o[o[a>>2]+28>>2]](a)|0;if((A|0)>=1){i=s[a+12>>2];j=s[a+8>>2];k=s[a+4>>2];while(1){l[o[o[a>>2]+16>>2]](a,c+76|0,c+52|0,c- -64|0,c+56|0,c+72|0,c+68|0,c+48|0,c+60|0,z);a:{b:{switch(o[c+64>>2]){case 0:c:{switch(o[c+60>>2]+ -2|0){case 0:d=0;if(o[c+48>>2]<1){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,o[e>>2])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+12>>2]=0;s[c+8>>2]=i*r;s[c+4>>2]=j*n;s[c>>2]=k*m;f=g+u(h,o[e+4>>2])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+28>>2]=0;s[c+24>>2]=i*r;s[c+20>>2]=j*n;s[c+16>>2]=k*m;e=g+u(h,o[e+8>>2])|0;m=s[e>>2];n=s[e+4>>2];r=s[e+8>>2];o[c+44>>2]=0;s[c+40>>2]=i*r;s[c+36>>2]=j*n;s[c+32>>2]=k*m;l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}break a;case 1:d=0;if(o[c+48>>2]<=0){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,q[e>>1])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+12>>2]=0;s[c+8>>2]=i*r;s[c+4>>2]=j*n;s[c>>2]=k*m;f=g+u(h,q[e+2>>1])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+28>>2]=0;s[c+24>>2]=i*r;s[c+20>>2]=j*n;s[c+16>>2]=k*m;e=g+u(h,q[e+4>>1])|0;m=s[e>>2];n=s[e+4>>2];r=s[e+8>>2];o[c+44>>2]=0;s[c+40>>2]=i*r;s[c+36>>2]=j*n;s[c+32>>2]=k*m;l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}break a;case 3:break c;default:break a}}d=0;if(o[c+48>>2]<=0){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,p[e|0])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+12>>2]=0;s[c+8>>2]=i*r;s[c+4>>2]=j*n;s[c>>2]=k*m;f=g+u(h,p[e+1|0])|0;m=s[f>>2];n=s[f+4>>2];r=s[f+8>>2];o[c+28>>2]=0;s[c+24>>2]=i*r;s[c+20>>2]=j*n;s[c+16>>2]=k*m;e=g+u(h,p[e+2|0])|0;m=s[e>>2];n=s[e+4>>2];r=s[e+8>>2];o[c+44>>2]=0;s[c+40>>2]=i*r;s[c+36>>2]=j*n;s[c+32>>2]=k*m;l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}break a;case 1:break b;default:break a}}d:{switch(o[c+60>>2]+ -2|0){case 0:d=0;if(o[c+48>>2]<1){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,o[e>>2])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+12>>2]=0;s[c+8>>2]=i*v(y);s[c+4>>2]=j*v(x);s[c>>2]=k*v(w);f=g+u(h,o[e+4>>2])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+28>>2]=0;s[c+24>>2]=i*v(y);s[c+20>>2]=j*v(x);s[c+16>>2]=k*v(w);e=g+u(h,o[e+8>>2])|0;w=t[e>>3];x=t[e+8>>3];y=t[e+16>>3];o[c+44>>2]=0;s[c+40>>2]=i*v(y);s[c+36>>2]=j*v(x);s[c+32>>2]=k*v(w);l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}break a;case 1:d=0;if(o[c+48>>2]<=0){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,q[e>>1])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+12>>2]=0;s[c+8>>2]=i*v(y);s[c+4>>2]=j*v(x);s[c>>2]=k*v(w);f=g+u(h,q[e+2>>1])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+28>>2]=0;s[c+24>>2]=i*v(y);s[c+20>>2]=j*v(x);s[c+16>>2]=k*v(w);e=g+u(h,q[e+4>>1])|0;w=t[e>>3];x=t[e+8>>3];y=t[e+16>>3];o[c+44>>2]=0;s[c+40>>2]=i*v(y);s[c+36>>2]=j*v(x);s[c+32>>2]=k*v(w);l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}break a;case 3:break d;default:break a}}d=0;if(o[c+48>>2]<=0){break a}while(1){g=o[c+76>>2];h=o[c+56>>2];e=o[c+72>>2]+u(o[c+68>>2],d)|0;f=g+u(h,p[e|0])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+12>>2]=0;s[c+8>>2]=i*v(y);s[c+4>>2]=j*v(x);s[c>>2]=k*v(w);f=g+u(h,p[e+1|0])|0;w=t[f>>3];x=t[f+8>>3];y=t[f+16>>3];o[c+28>>2]=0;s[c+24>>2]=i*v(y);s[c+20>>2]=j*v(x);s[c+16>>2]=k*v(w);e=g+u(h,p[e+2|0])|0;w=t[e>>3];x=t[e+8>>3];y=t[e+16>>3];o[c+44>>2]=0;s[c+40>>2]=i*v(y);s[c+36>>2]=j*v(x);s[c+32>>2]=k*v(w);l[o[o[b>>2]+8>>2]](b,c,z,d);d=d+1|0;if((d|0)<o[c+48>>2]){continue}break}}l[o[o[a>>2]+24>>2]](a,z);z=z+1|0;if((A|0)!=(z|0)){continue}break}}M=c+80|0}function $m(a,b,c,d,e,f,g,h,i,j,k,n){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e);f=v(f);g=v(g);h=v(h);i=v(i);j=j|0;k=v(k);n=n|0;var p=0;p=M-2720|0;M=p;o[p+2716>>2]=a;o[p+2712>>2]=b;o[p+2708>>2]=c;o[p+2704>>2]=d;s[p+2700>>2]=e;s[p+2696>>2]=f;s[p+2692>>2]=g;s[p+2688>>2]=h;s[p+2684>>2]=i;o[p+2680>>2]=j;s[p+2676>>2]=k;m[p+2675|0]=n;b=o[p+2716>>2];a=p+1488|0;c=a+1184|0;while(1){o[(M-16|0)+12>>2]=a;a=a+16|0;if((c|0)!=(a|0)){continue}break}a=p+304|0;c=a+1184|0;while(1){o[(M-16|0)+12>>2]=a;a=a+16|0;if((c|0)!=(a|0)){continue}break}o[p+300>>2]=p+1488;o[p+296>>2]=p+304;a=o[p+2712>>2];c=p+256|0;d=p+2700|0;ta(c,o[p+2708>>2],d);ha(p+272|0,a,c);a=o[p+2712>>2];c=p+224|0;ta(c,o[p+2708>>2],d);db(p+240|0,a,c);o[(M-16|0)+12>>2]=p+208;s[p+204>>2]=s[p+2676>>2]*v(.01745329238474369);o[p+200>>2]=o[p+2708>>2];o[p+196>>2]=o[p+2704>>2];ad(p+176|0,o[p+200>>2],o[p+196>>2]);m[p+175|0]=0;m[p+174|0]=0;if(s[p+2696>>2]<=v(-1.5707963705062866)){s[p+2696>>2]=v(-1.5707963705062866)+s[p+204>>2];m[p+175|0]=1}if(s[p+2692>>2]>=v(1.5707963705062866)){s[p+2692>>2]=v(1.5707963705062866)-s[p+204>>2];m[p+174|0]=1}if(s[p+2696>>2]>s[p+2692>>2]){s[p+2696>>2]=v(-1.5707963705062866)+s[p+204>>2];s[p+2692>>2]=v(1.5707963705062866)-s[p+204>>2];m[p+174|0]=1;m[p+175|0]=1}a=p;e=v(v(s[p+2692>>2]-s[p+2696>>2])/s[p+204>>2]);a:{if(v(w(e))<v(2147483648)){c=~~e;break a}c=-2147483648}o[a+168>>2]=c+1;if(o[p+168>>2]<2){o[p+168>>2]=2}s[p+164>>2]=v(s[p+2692>>2]-s[p+2696>>2])/v(o[p+168>>2]-1|0);m[p+163|0]=0;b:{if(s[p+2688>>2]>s[p+2684>>2]){s[p+2688>>2]=v(-3.1415927410125732)+s[p+204>>2];s[p+2684>>2]=3.1415927410125732;m[p+163|0]=1;break b}c:{if(v(s[p+2684>>2]-s[p+2688>>2])>=v(6.2831854820251465)){m[p+163|0]=1;break c}m[p+163|0]=0}}a=p;e=v(v(s[p+2684>>2]-s[p+2688>>2])/s[p+204>>2]);d:{if(v(w(e))<v(2147483648)){c=~~e;break d}c=-2147483648}o[a+156>>2]=c+1;if(o[p+156>>2]<2){o[p+156>>2]=2}s[p+152>>2]=v(s[p+2684>>2]-s[p+2688>>2])/v(o[p+156>>2]-1|0);o[p+148>>2]=0;while(1){if(o[p+148>>2]<o[p+168>>2]){s[p+144>>2]=s[p+2696>>2]+v(v(o[p+148>>2])*s[p+164>>2]);s[p+140>>2]=s[p+2700>>2]*za(s[p+144>>2]);s[p+136>>2]=s[p+2700>>2]*Aa(s[p+144>>2]);o[p+132>>2]=0;while(1){if(o[p+132>>2]<o[p+156>>2]){s[p+128>>2]=s[p+2688>>2]+v(v(o[p+132>>2])*s[p+152>>2]);s[p+124>>2]=za(s[p+128>>2]);s[p+120>>2]=Aa(s[p+128>>2]);a=o[p+2712>>2];s[p+52>>2]=s[p+136>>2]*s[p+120>>2];c=p+56|0;ub(c,p+52|0,o[p+196>>2]);d=p+72|0;ha(d,a,c);s[p+28>>2]=s[p+136>>2]*s[p+124>>2];a=p+32|0;ub(a,p+28|0,p+176|0);c=p+88|0;ha(c,d,a);a=p+8|0;ub(a,p+140|0,o[p+200>>2]);ha(p+104|0,c,a);c=o[p+108>>2];a=o[p+296>>2]+(o[p+132>>2]<<4)|0;o[a>>2]=o[p+104>>2];o[a+4>>2]=c;c=o[p+116>>2];o[a+8>>2]=o[p+112>>2];o[a+12>>2]=c;e:{if(o[p+148>>2]){l[o[o[b>>2]+8>>2]](b,o[p+300>>2]+(o[p+132>>2]<<4)|0,o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2]);break e}if(m[p+174|0]&1){l[o[o[b>>2]+8>>2]](b,p+240|0,o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2])}}f:{if(o[p+132>>2]){l[o[o[b>>2]+8>>2]](b,o[p+296>>2]+(o[p+132>>2]-1<<4)|0,o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2]);break f}a=o[p+296>>2]+(o[p+132>>2]<<4)|0;c=o[a+4>>2];o[p+208>>2]=o[a>>2];o[p+212>>2]=c;c=o[a+12>>2];o[p+216>>2]=o[a+8>>2];o[p+220>>2]=c}if(!(!(m[p+175|0]&1)|o[p+148>>2]!=(o[p+168>>2]-1|0))){l[o[o[b>>2]+8>>2]](b,p+272|0,o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2])}if(m[p+2675|0]&1){g:{if(m[p+163|0]&1){if(o[p+132>>2]==(o[p+156>>2]-1|0)){l[o[o[b>>2]+8>>2]](b,p+208|0,o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2])}break g}if(!((o[p+148>>2]!=(o[p+168>>2]-1|0)?o[p+148>>2]:0)|(o[p+132>>2]!=(o[p+156>>2]-1|0)?o[p+132>>2]:0))){l[o[o[b>>2]+8>>2]](b,o[p+2712>>2],o[p+296>>2]+(o[p+132>>2]<<4)|0,o[p+2680>>2])}}}o[p+132>>2]=o[p+132>>2]+1;continue}break}o[p+292>>2]=o[p+300>>2];o[p+300>>2]=o[p+296>>2];o[p+296>>2]=o[p+292>>2];o[p+148>>2]=o[p+148>>2]+1;continue}break}M=p+2720|0}function Cg(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),t=v(0),u=v(0),w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=0,J=0,K=v(0),L=v(0),N=v(0),O=v(0),P=0;g=M-544|0;M=g;o[f>>2]=0;o[f+4>>2]=0;o[f+32>>2]=0;o[f+24>>2]=0;o[f+28>>2]=0;o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[g+388>>2]=c;o[g+384>>2]=a;j=s[d+20>>2];k=s[d+36>>2];m=s[b+20>>2];n=s[b+36>>2];p=s[d+24>>2];h=s[b+24>>2];i=s[d+40>>2];q=s[b+40>>2];t=s[d+32>>2];u=s[d>>2];x=s[d+16>>2];y=s[d+4>>2];z=s[b+32>>2];B=s[b>>2];D=s[b+16>>2];E=s[b+4>>2];A=s[d+8>>2];F=s[b+8>>2];o[g+436>>2]=0;o[g+420>>2]=0;o[g+404>>2]=0;G=v(v(v(F*A)+v(h*p))+v(q*i));s[g+432>>2]=G;H=v(v(v(E*A)+v(m*p))+v(n*i));s[g+428>>2]=H;p=v(v(v(B*A)+v(D*p))+v(z*i));s[g+424>>2]=p;i=v(v(v(F*y)+v(h*j))+v(q*k));s[g+416>>2]=i;A=v(v(v(E*y)+v(m*j))+v(n*k));s[g+412>>2]=A;j=v(v(v(B*y)+v(D*j))+v(z*k));s[g+408>>2]=j;k=v(v(v(u*F)+v(x*h))+v(t*q));s[g+400>>2]=k;m=v(v(v(u*E)+v(x*m))+v(t*n));s[g+396>>2]=m;n=v(v(v(u*B)+v(x*D))+v(t*z));s[g+392>>2]=n;h=s[b+20>>2];q=s[b+36>>2];t=s[b+24>>2];u=s[b+52>>2];x=s[d+52>>2];y=s[b+40>>2];z=s[b+56>>2];B=s[d+56>>2];D=s[b>>2];E=s[b+16>>2];F=s[b+32>>2];K=s[b+4>>2];L=s[b+8>>2];N=s[b+48>>2];O=s[d+48>>2];o[g+508>>2]=0;o[g+500>>2]=0;o[g+484>>2]=0;s[g+480>>2]=G;s[g+476>>2]=i;s[g+472>>2]=k;o[g+468>>2]=0;s[g+464>>2]=H;s[g+460>>2]=A;s[g+456>>2]=m;o[g+452>>2]=0;s[g+448>>2]=p;s[g+444>>2]=j;j=v(O-N);k=v(x-u);m=v(B-z);s[g+496>>2]=v(v(L*j)+v(t*k))+v(y*m);s[g+492>>2]=v(v(j*K)+v(k*h))+v(m*q);s[g+488>>2]=v(v(j*D)+v(k*E))+v(m*F);o[g+504>>2]=98;s[g+440>>2]=n;o[g+136>>2]=0;o[g+140>>2]=0;o[g+128>>2]=0;o[g+132>>2]=0;o[g+364>>2]=0;o[g+368>>2]=0;o[g+376>>2]=2;o[g+144>>2]=0;a:{b:{a=we(g,g+384|0,e);if(!a){w=o[g+372>>2];if(!o[w+32>>2]){j=v(0);k=v(0);m=v(0);n=v(0);p=v(0);h=v(0);break b}h=v(0);d=0;p=v(0);n=v(0);m=v(0);k=v(0);j=v(0);while(1){c=d<<2;e=c+w|0;i=s[e+16>>2];a=o[g+504>>2];w=g+528|0;I=o[g+508>>2];J=o[g+384>>2]+(I>>1)|0;P=J;e=o[e>>2];if(I&1){a=o[a+o[J>>2]>>2]}l[a](w,P,e);e=o[g+508>>2];a=o[g+388>>2]+(e>>1)|0;x=v(i*s[g+536>>2]);y=v(i*s[g+532>>2]);z=v(i*s[g+528>>2]);c=o[c+o[g+372>>2]>>2];q=s[c+8>>2];t=s[c>>2];u=v(-s[c+4>>2]);w=o[g+504>>2];w=e&1?o[o[a>>2]+w>>2]:w;h=v(h+x);p=v(p+y);n=v(n+z);o[g+524>>2]=0;s[g+520>>2]=v(v(s[g+428>>2]*u)-v(t*s[g+424>>2]))-v(q*s[g+432>>2]);s[g+516>>2]=v(v(s[g+412>>2]*u)-v(t*s[g+408>>2]))-v(q*s[g+416>>2]);s[g+512>>2]=v(v(s[g+396>>2]*u)-v(t*s[g+392>>2]))-v(q*s[g+400>>2]);l[w](g+528|0,a,g+512|0);q=s[g+528>>2];t=s[g+532>>2];u=s[g+536>>2];m=v(m+v(i*v(v(v(v(q*s[g+472>>2])+v(t*s[g+476>>2]))+v(u*s[g+480>>2]))+s[g+496>>2])));k=v(k+v(i*v(v(v(v(q*s[g+456>>2])+v(t*s[g+460>>2]))+v(u*s[g+464>>2]))+s[g+492>>2])));j=v(j+v(i*v(v(v(v(q*s[g+440>>2])+v(t*s[g+444>>2]))+v(u*s[g+448>>2]))+s[g+488>>2])));d=d+1|0;w=o[g+372>>2];if(d>>>0<r[w+32>>2]){continue}break}break b}o[f>>2]=(a|0)==1?1:2;break a}i=s[b+48>>2];q=s[b+8>>2];t=s[b>>2];u=s[b+4>>2];x=s[b+52>>2];y=s[b+24>>2];z=s[b+16>>2];B=s[b+20>>2];D=s[b+56>>2];E=s[b+40>>2];A=s[b+32>>2];F=s[b+36>>2];o[f+16>>2]=0;s[f+12>>2]=D+v(v(v(n*A)+v(p*F))+v(h*E));s[f+8>>2]=x+v(v(v(n*z)+v(p*B))+v(h*y));s[f+4>>2]=i+v(v(v(n*t)+v(p*u))+v(h*q));q=s[b+48>>2];t=s[b+8>>2];u=s[b>>2];x=s[b+4>>2];y=s[b+52>>2];z=s[b+24>>2];B=s[b+16>>2];D=s[b+20>>2];E=s[b+56>>2];A=s[b+40>>2];F=s[b+32>>2];G=s[b+36>>2];n=v(n-j);p=v(p-k);h=v(h-m);i=v(C(v(v(v(n*n)+v(p*p))+v(h*h))));s[f+52>>2]=i;o[f+48>>2]=0;o[f+32>>2]=0;H=h;h=i>v(9999999747378752e-20)?v(v(1)/i):v(1);s[f+44>>2]=H*h;s[f+40>>2]=p*h;s[f+36>>2]=n*h;s[f+28>>2]=E+v(v(v(j*F)+v(k*G))+v(m*A));s[f+24>>2]=y+v(v(v(j*B)+v(k*D))+v(m*z));s[f+20>>2]=q+v(v(v(j*u)+v(k*x))+v(m*t));w=1}M=g+544|0;return w}function kf(a,b){var c=v(0),d=0,f=0,j=0,k=v(0),l=0,m=0,n=v(0),o=v(0),p=v(0),q=0,r=v(0),t=0,u=v(0),x=v(0),y=v(0),z=v(0);k=v(1);a:{b:{l=(g(a),h(0));c:{if((l|0)==1065353216){break c}m=(g(b),h(0));d=m&2147483647;if(!d){break c}f=l&2147483647;if(!(d>>>0<2139095041?f>>>0<=2139095040:0)){return v(a+b)}q=0;d:{if((l|0)>-1){break d}q=2;if(d>>>0>1266679807){break d}q=0;if(d>>>0<1065353216){break d}j=150-(d>>>23|0)|0;t=d>>>j|0;q=0;if((d|0)!=t<<j){break d}q=2-(t&1)|0}j=q;e:{if((d|0)!=1065353216){if((d|0)!=2139095040){break e}if((f|0)==1065353216){break c}if(f>>>0>=1065353217){return(m|0)>-1?b:v(0)}return(m|0)>-1?v(0):v(-b)}return(m|0)>-1?a:v(v(1)/a)}if((m|0)==1073741824){return v(a*a)}if(!((m|0)!=1056964608|(l|0)<0)){return v(C(a))}c=v(w(a));if(!(f?(l&1073741823)!=1065353216:0)){k=(m|0)<0?v(v(1)/c):c;if((l|0)>-1){break c}if(!(j|f+ -1065353216)){a=v(k-k);return v(a/a)}return(j|0)==1?v(-k):k}f:{if((l|0)>-1){break f}g:{switch(j|0){case 0:a=v(a-a);return v(a/a);case 1:break g;default:break f}}k=v(-1)}h:{if(d>>>0>=1291845633){if(f>>>0<=1065353207){return(m|0)<0?v(v(k*v(1.0000000150474662e+30))*v(1.0000000150474662e+30)):v(v(k*v(1.0000000031710769e-30))*v(1.0000000031710769e-30))}if(f>>>0>=1065353224){return(m|0)>0?v(v(k*v(1.0000000150474662e+30))*v(1.0000000150474662e+30)):v(v(k*v(1.0000000031710769e-30))*v(1.0000000031710769e-30))}a=v(c+v(-1));c=v(a*v(1.44268798828125));n=v(v(a*v(7052607543300837e-21))+v(v(v(a*a)*v(v(.5)-v(a*v(v(a*v(-.25))+v(.3333333432674408)))))*v(-1.4426950216293335)));a=(e(0,(g(v(c+n)),h(0))&-4096),i());r=v(a-c);break h}d=f>>>0<8388608;f=d?(g(v(c*v(16777216))),h(0)):f;l=f&8388607;j=l|1065353216;d=(f>>23)+(d?-151:-127)|0;f=0;i:{if(l>>>0<1885298){break i}if(l>>>0<6140887){f=1;break i}j=j+ -8388608|0;d=d+1|0}l=f<<2;r=s[l+25968>>2];n=(e(0,j),i());o=s[l+25952>>2];p=v(n-o);u=v(v(1)/v(o+n));c=v(p*u);a=(e(0,(g(c),h(0))&-4096),i());x=v(a*a);y=a;z=p;p=(e(0,((j>>1&-536875008|536870912)+(f<<21)|0)+4194304|0),i());n=v(u*v(v(z-v(a*p))-v(a*v(n-v(p-o)))));p=v(v(c+a)*n);a=v(c*c);o=v(p+v(v(a*a)*v(v(a*v(v(a*v(v(a*v(v(a*v(v(a*v(.20697501301765442))+v(.23066075146198273)))+v(.2727281153202057)))+v(.3333333432674408)))+v(.4285714328289032)))+v(.6000000238418579))));a=(e(0,(g(v(v(x+v(3))+o)),h(0))&-4096),i());p=v(y*a);c=v(v(n*a)+v(c*v(o-v(v(a+v(-3))-x))));a=(e(0,(g(v(p+c)),h(0))&-4096),i());o=v(a*v(.9619140625));n=v(s[l+25960>>2]+v(v(v(c-v(a-p))*v(.9617967009544373))+v(a*v(-.00011736857413779944))));c=v(d|0);a=(e(0,(g(v(v(r+v(o+n))+c)),h(0))&-4096),i());r=v(v(v(a-c)-r)-o)}o=(e(0,m&-4096),i());c=v(a*o);a=v(v(v(n-r)*b)+v(v(b-o)*a));b=v(c+a);j=(g(b),h(0));if((j|0)>=1124073473){break b}f=1124073472;j:{k:{if((j|0)==1124073472){if(!(v(a+v(4.299566569443414e-8))>v(b-c))){break k}break b}f=j&2147483647;if(!(a<=v(b-c)^1|(j|0)!=-1021968384)|f>>>0>=1125515265){break a}d=0;if(f>>>0<1056964609){break j}}m=(8388608>>>(f>>>23|0)+ -126|0)+j|0;f=m>>>23&255;d=(m&8388607|8388608)>>>150-f|0;d=(j|0)<0?0-d|0:d;c=v(c-(e(0,m&-8388608>>f+ -127),i()));j=(g(v(a+c)),h(0))}b=(e(0,j&-32768),i());n=v(b*v(.693145751953125));c=v(v(b*v(14286065379565116e-22))+v(v(a-v(b-c))*v(.6931471824645996)));a=v(n+c);b=v(a*a);b=v(a-v(b*v(v(b*v(v(b*v(v(b*v(v(b*v(4.138136944220605e-8))+v(-16533901998627698e-22)))+v(661375597701408e-19)))+v(-.0027777778450399637)))+v(.1666666716337204))));p=v(v(a*b)/v(b+v(-2)));b=v(c-v(a-n));a=v(v(a-v(p-v(b+v(a*b))))+v(1));j=(g(a),h(0))+(d<<23)|0;l:{if((j|0)<=8388607){a=ey(a,d);break l}a=(e(0,j),i())}k=v(k*a)}return k}return v(v(k*v(1.0000000150474662e+30))*v(1.0000000150474662e+30))}return v(v(k*v(1.0000000031710769e-30))*v(1.0000000031710769e-30))}function Kl(a){var b=v(0),c=v(0),d=v(0),e=0,f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),n=0,q=0,r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0);n=M-16|0;M=n;a:{if(!p[a+356|0]){e=p[a+312|0];break a}m[a+356|0]=0;m[a+352|0]=0;o[a+344>>2]=0;o[a+348>>2]=0;o[a+336>>2]=0;o[a+340>>2]=0;q=a+332|0;h=p[q|0]&-16;m[q|0]=h;u=a+316|0;b:{c:{switch(o[a>>2]-1|0){case 0:e=o[a+168>>2];o[a+260>>2]=o[a+164>>2];o[a+264>>2]=e;e=o[a+88>>2];o[a+244>>2]=o[a+84>>2];o[a+248>>2]=e;e=o[a+176>>2];o[a+268>>2]=o[a+172>>2];o[a+272>>2]=e;e=o[a+96>>2];o[a+252>>2]=o[a+92>>2];o[a+256>>2]=e;m[a+352|0]=0;o[a+288>>2]=0;s[a+280>>2]=s[a+248>>2]-s[a+264>>2];s[a+276>>2]=s[a+244>>2]-s[a+260>>2];s[a+284>>2]=s[a+252>>2]-s[a+268>>2];o[a+344>>2]=0;o[a+348>>2]=0;o[a+336>>2]=1065353216;o[a+340>>2]=0;m[a+332|0]=h;e=1;break b;case 1:g=s[a+4>>2];c=v(s[a+20>>2]-g);i=s[a+8>>2];d=v(s[a+24>>2]-i);j=s[a+12>>2];f=v(s[a+28>>2]-j);g=v(v(v(v(v(0)-g)*c)+v(v(v(0)-i)*d))+v(v(v(0)-j)*f));e=1;d:{if(!(g>v(0))){break d}b=v(v(v(c*c)+v(d*d))+v(f*f));if(!(g<b)){b=v(1);e=2;break d}b=v(g/b);e=3}o[a+344>>2]=0;o[a+348>>2]=0;s[a+340>>2]=b;s[a+336>>2]=v(1)-b;m[a+332|0]=e|h;e=0;o[a+256>>2]=0;c=s[a+92>>2];g=v(c+v(b*v(s[a+108>>2]-c)));s[a+252>>2]=g;c=s[a+88>>2];i=v(c+v(b*v(s[a+104>>2]-c)));s[a+248>>2]=i;c=s[a+84>>2];j=v(c+v(b*v(s[a+100>>2]-c)));s[a+244>>2]=j;k=s[a+180>>2];l=s[a+184>>2];c=s[a+168>>2];r=s[a+188>>2];d=s[a+172>>2];f=s[a+164>>2];o[a+288>>2]=0;d=v(d+v(b*v(r-d)));s[a+284>>2]=g-d;c=v(c+v(b*v(l-c)));s[a+280>>2]=i-c;b=v(f+v(b*v(k-f)));s[a+276>>2]=j-b;o[a+272>>2]=0;s[a+268>>2]=d;s[a+264>>2]=c;s[a+260>>2]=b;xg(a,a+332|0);if(s[a+336>>2]>=v(0)^1|s[a+340>>2]>=v(0)^1|s[a+344>>2]>=v(0)^1){break b}e=s[a+348>>2]>=v(0);break b;case 2:h=n;o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=0;o[h+4>>2]=0;dd(h,a+4|0,a+20|0,a+36|0,u);o[a+256>>2]=0;b=s[a+336>>2];c=s[a+340>>2];d=s[a+344>>2];f=v(v(v(b*s[a+92>>2])+v(c*s[a+108>>2]))+v(d*s[a+124>>2]));s[a+252>>2]=f;g=v(v(v(b*s[a+88>>2])+v(c*s[a+104>>2]))+v(d*s[a+120>>2]));s[a+248>>2]=g;i=v(v(v(b*s[a+84>>2])+v(c*s[a+100>>2]))+v(d*s[a+116>>2]));s[a+244>>2]=i;j=s[a+180>>2];k=s[a+196>>2];l=s[a+168>>2];r=s[a+184>>2];w=s[a+200>>2];x=s[a+172>>2];y=s[a+188>>2];z=s[a+204>>2];A=s[a+164>>2];o[a+288>>2]=0;t=f;f=v(v(v(b*x)+v(c*y))+v(d*z));s[a+284>>2]=t-f;t=g;g=v(v(v(b*l)+v(c*r))+v(d*w));s[a+280>>2]=t-g;b=v(v(v(b*A)+v(c*j))+v(d*k));s[a+276>>2]=i-b;o[a+272>>2]=0;s[a+268>>2]=f;s[a+264>>2]=g;s[a+260>>2]=b;xg(a,q);if(s[a+336>>2]>=v(0)^1|s[a+340>>2]>=v(0)^1|s[a+344>>2]>=v(0)^1){break b}e=s[a+348>>2]>=v(0);break b;case 3:break c;default:break b}}h=n;o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=0;o[h+4>>2]=0;if(nL(h,a+4|0,a+20|0,a+36|0,a+52|0,u)){o[a+256>>2]=0;b=s[a+336>>2];c=s[a+340>>2];d=s[a+344>>2];f=s[a+348>>2];g=v(v(v(v(b*s[a+92>>2])+v(c*s[a+108>>2]))+v(d*s[a+124>>2]))+v(f*s[a+140>>2]));s[a+252>>2]=g;i=v(v(v(v(b*s[a+88>>2])+v(c*s[a+104>>2]))+v(d*s[a+120>>2]))+v(f*s[a+136>>2]));s[a+248>>2]=i;j=v(v(v(v(b*s[a+84>>2])+v(c*s[a+100>>2]))+v(d*s[a+116>>2]))+v(f*s[a+132>>2]));s[a+244>>2]=j;o[a+288>>2]=0;o[a+272>>2]=0;k=v(v(v(v(b*s[a+164>>2])+v(c*s[a+180>>2]))+v(d*s[a+196>>2]))+v(f*s[a+212>>2]));s[a+260>>2]=k;l=v(v(v(v(b*s[a+168>>2])+v(c*s[a+184>>2]))+v(d*s[a+200>>2]))+v(f*s[a+216>>2]));s[a+264>>2]=l;b=v(v(v(v(b*s[a+172>>2])+v(c*s[a+188>>2]))+v(d*s[a+204>>2]))+v(f*s[a+220>>2]));s[a+268>>2]=b;s[a+276>>2]=j-k;s[a+280>>2]=i-l;s[a+284>>2]=g-b;xg(a,a+332|0);if(s[a+336>>2]>=v(0)^1|s[a+340>>2]>=v(0)^1|s[a+344>>2]>=v(0)^1){break b}e=s[a+348>>2]>=v(0);break b}if(p[a+352|0]){break b}o[a+276>>2]=0;o[a+280>>2]=0;e=1;m[a+312|0]=1;o[a+284>>2]=0;o[a+288>>2]=0;break a}m[a+312|0]=e}M=n+16|0;return(e|0)!=0}function fC(a,b,c,d,e,f){var g=v(0),h=v(0),i=v(0),j=0,k=v(0),l=0,m=0,n=v(0),q=0,r=v(0),t=0,w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=0,C=0,D=0,E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0);A=M-16|0;M=A;Hf(a,c,d,e,f);e=o[b+8>>2];o[e>>2]=1065353216;B=o[b+24>>2];q=B<<2;f=q+4|0;o[f+e>>2]=1065353216;j=e;t=B<<3;e=t+8|0;o[j+e>>2]=1065353216;G=s[c+20>>2];F=s[c+24>>2];x=s[a+348>>2];w=s[c+36>>2];y=s[a+352>>2];k=s[c+40>>2];z=s[a+356>>2];h=s[c+8>>2];n=s[c>>2];r=s[c+4>>2];i=s[c+16>>2];g=s[c+32>>2];o[A+12>>2]=0;k=v(v(v(x*g)+v(y*w))+v(z*k));s[A+8>>2]=k;i=v(v(v(x*i)+v(y*G))+v(z*F));s[A+4>>2]=i;g=v(v(v(n*x)+v(r*y))+v(h*z));s[A>>2]=g;j=o[b+12>>2];o[j+12>>2]=0;s[j+8>>2]=-i;s[j+4>>2]=k;o[j>>2]=0;l=j+q|0;o[l+12>>2]=0;s[l+8>>2]=g;o[l+4>>2]=0;s[l>>2]=-k;l=j+t|0;o[l+8>>2]=0;o[l+12>>2]=0;s[l+4>>2]=-g;s[l>>2]=i;l=o[b+16>>2];o[l>>2]=-1082130432;o[f+l>>2]=-1082130432;o[e+l>>2]=-1082130432;G=s[d+36>>2];F=s[d+40>>2];x=s[a+412>>2];w=s[d+20>>2];y=s[a+416>>2];k=s[d+24>>2];z=s[a+420>>2];h=s[d+8>>2];n=s[d>>2];r=s[d+4>>2];i=s[d+32>>2];g=s[d+16>>2];m=o[b+20>>2];o[m+12>>2]=0;o[m>>2]=0;w=v(v(v(x*g)+v(y*w))+v(z*k));s[m+8>>2]=w;k=v(v(v(x*i)+v(y*G))+v(z*F));s[m+4>>2]=-k;e=m+q|0;o[e+12>>2]=0;i=v(v(v(n*x)+v(r*y))+v(h*z));s[e+8>>2]=-i;o[e+4>>2]=0;s[e>>2]=k;e=m+t|0;o[e+8>>2]=0;o[e+12>>2]=0;s[e+4>>2]=i;s[e>>2]=-w;D=o[b+40>>2];C=o[b+36>>2];E=o[b+28>>2];l=o[a+592>>2];g=v(s[(l&2?a+600|0:b+4|0)>>2]*s[b>>2]);s[E>>2]=g*v(v(v(i+s[d+48>>2])-s[A>>2])-s[c+48>>2]);o[C>>2]=-8388609;o[D>>2]=2139095039;f=l&1;if(f){o[o[b+32>>2]>>2]=o[a+596>>2]}s[q+E>>2]=g*v(v(v(w+s[d+52>>2])-s[A+4>>2])-s[c+52>>2]);o[q+C>>2]=-8388609;o[q+D>>2]=2139095039;if(f){o[o[b+32>>2]+(B<<2)>>2]=o[a+596>>2]}e=B<<3;s[e+E>>2]=g*v(v(v(k+s[d+56>>2])-s[A+8>>2])-s[c+56>>2]);o[e+C>>2]=-8388609;o[e+D>>2]=2139095039;if(f){o[o[b+32>>2]+(B<<3)>>2]=o[a+596>>2]}e=u(B,3);d=e;a:{if(!p[a+526|0]){break a}g=s[a+456>>2];if(!(s[a+444>>2]<g^1|s[a+448>>2]<g^1)){H=s[a+340>>2];I=s[a+308>>2];J=s[a+324>>2];K=s[c+8>>2];L=s[c>>2];x=s[c+4>>2];y=s[c+24>>2];z=s[c+16>>2];G=s[c+20>>2];q=e<<2;f=q+8|0;k=s[a+304>>2];r=s[c+32>>2];h=s[a+320>>2];i=s[c+36>>2];n=s[a+336>>2];g=s[c+40>>2];F=v(v(v(k*r)+v(h*i))+v(n*g));s[f+j>>2]=F;e=q+4|0;w=v(v(v(k*z)+v(h*G))+v(n*y));s[e+j>>2]=w;k=v(v(v(L*k)+v(x*h))+v(K*n));s[j+q>>2]=k;t=B<<4;h=v(v(v(L*I)+v(x*J))+v(K*H));s[t+j>>2]=h;d=t|4;n=v(v(v(I*z)+v(J*G))+v(H*y));s[d+j>>2]=n;c=t|8;i=v(v(v(I*r)+v(J*i))+v(H*g));s[c+j>>2]=i;s[f+m>>2]=-F;s[e+m>>2]=-w;s[m+q>>2]=-k;s[m+t>>2]=-h;s[d+m>>2]=-n;s[c+m>>2]=-i;E=o[b+28>>2];g=v(s[b>>2]*s[a+436>>2]);s[q+E>>2]=g*v(v(v(k*s[a+460>>2])+v(w*s[a+464>>2]))+v(F*s[a+468>>2]));s[t+E>>2]=g*v(v(v(h*s[a+460>>2])+v(n*s[a+464>>2]))+v(i*s[a+468>>2]));C=o[b+36>>2];o[q+C>>2]=-8388609;D=o[b+40>>2];o[q+D>>2]=2139095039;o[t+C>>2]=-8388609;o[t+D>>2]=2139095039;d=u(B,5);break a}n=s[a+464>>2];g=s[a+468>>2];e=e<<2;h=s[a+436>>2];r=v(h*v(h*s[a+460>>2]));s[e+j>>2]=r;d=e+8|0;i=v(h*v(h*g));s[d+j>>2]=i;c=e+4|0;g=v(h*v(h*n));s[c+j>>2]=g;s[d+m>>2]=-i;s[c+m>>2]=-g;s[e+m>>2]=-r;s[e+E>>2]=v(s[b>>2]*s[a+432>>2])*s[a+504>>2];if(l&4){o[e+o[b+32>>2]>>2]=o[a+604>>2]}o[e+C>>2]=0;o[e+D>>2]=2139095039;d=B<<2}if(p[a+525|0]){n=s[a+480>>2];g=s[a+484>>2];f=d<<2;h=s[a+436>>2];r=v(h*v(h*s[a+476>>2]));s[f+j>>2]=r;e=f+8|0;i=v(h*v(h*g));s[e+j>>2]=i;c=f+4|0;g=v(h*v(h*n));s[c+j>>2]=g;s[e+m>>2]=-i;s[c+m>>2]=-g;s[f+m>>2]=-r;s[f+E>>2]=v(s[b>>2]*s[a+432>>2])*s[a+508>>2];if(l&4){o[f+o[b+32>>2]>>2]=o[a+604>>2]}b=(d<<2)+D|0;b:{c:{if(!!(s[a+452>>2]>v(0))){c=(d<<2)+C|0;if(!!(s[a+508>>2]>v(0))){o[c>>2]=0;break c}o[c>>2]=-8388609;g=v(0);break b}o[(d<<2)+C>>2]=-8388609}g=v(3.4028234663852886e+38)}s[b>>2]=g}M=A+16|0}function Fi(a,b,c,d,e){var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=v(0),D=0,E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0);D=M-48|0;M=D;if(!!(s[b+52>>2]<s[a+12>>2])){A=o[b+48>>2];u=s[b+44>>2];j=s[b+40>>2];k=s[b+36>>2];f=Ja(c);l=v(s[b+12>>2]-s[f+56>>2]);n=v(s[b+8>>2]-s[f+52>>2]);h=s[f+48>>2];g=s[b+4>>2];f=Ja(d);p=v(g-h);g=v(v(1)/v(C(v(v(v(k*k)+v(j*j))+v(u*u)))));E=v(u*g);F=v(j*g);G=v(k*g);q=v(s[b+28>>2]-s[f+56>>2]);r=v(s[b+24>>2]-s[f+52>>2]);t=v(s[b+20>>2]-s[f+48>>2]);a:{b:{f=o[c+4>>2];if(!f){f=o[c>>2];if(f){break b}g=v(0);break a}i=s[f+328>>2];h=s[f+332>>2];w=v(v(n*i)-v(p*h));g=s[f+336>>2];x=v(v(p*g)-v(l*i));i=v(v(l*h)-v(n*g));y=s[f+316>>2];z=s[f+312>>2];g=s[f+320>>2];break a}i=s[f+332>>2];h=s[f+336>>2];w=v(v(n*i)-v(p*h));g=s[f+340>>2];x=v(v(p*g)-v(l*i));i=v(v(l*h)-v(n*g));y=s[f+320>>2];z=s[f+316>>2];g=s[f+324>>2]}O=v(g+w);P=v(y+x);Q=v(z+i);c:{d:{f=o[d+4>>2];if(!f){f=o[d>>2];if(f){break d}x=v(0);w=v(0);y=v(0);z=v(0);H=v(0);break c}i=s[f+328>>2];h=s[f+332>>2];z=v(v(r*i)-v(t*h));g=s[f+336>>2];y=v(v(t*g)-v(q*i));L=v(v(q*h)-v(r*g));x=s[f+316>>2];w=s[f+312>>2];H=s[f+320>>2];break c}i=s[f+332>>2];h=s[f+336>>2];z=v(v(r*i)-v(t*h));g=s[f+340>>2];y=v(v(t*g)-v(q*i));L=v(v(q*h)-v(r*g));x=s[f+320>>2];w=s[f+316>>2];H=s[f+324>>2]}R=s[a+12>>2];B=s[b+52>>2];b=o[c+4>>2];o[e+4>>2]=o[c>>2];o[e+8>>2]=b;o[e+12>>2]=o[c+8>>2];f=o[d+4>>2];b=e;o[b+16>>2]=o[d>>2];o[b+20>>2]=f;o[b+24>>2]=o[d+8>>2];f=Ja(c);I=s[f+36>>2];J=s[f+20>>2];K=s[f+40>>2];u=s[f+24>>2];j=s[f+4>>2];k=s[f+8>>2];i=s[f+32>>2];h=s[f>>2];g=s[f+16>>2];o[b+40>>2]=0;s[b+28>>2]=v(v(p*h)+v(n*g))+v(l*i);s[b+36>>2]=v(v(p*k)+v(n*u))+v(l*K);s[b+32>>2]=v(v(p*j)+v(n*J))+v(l*I);f=Ja(d);I=s[f+36>>2];J=s[f+20>>2];K=s[f+40>>2];u=s[f+24>>2];j=s[f+4>>2];k=s[f+8>>2];i=s[f+32>>2];h=s[f>>2];g=s[f+16>>2];o[b+192>>2]=0;s[b+188>>2]=q;s[b+184>>2]=r;N=b+180|0;s[N>>2]=t;o[b+176>>2]=0;s[b+172>>2]=l;s[b+168>>2]=n;s[b+164>>2]=p;o[b+56>>2]=0;o[b+156>>2]=0;o[b+160>>2]=0;o[b+60>>2]=1065353216;o[b+64>>2]=1065353216;o[b+208>>2]=A;s[b+204>>2]=E;s[b+200>>2]=F;s[b+196>>2]=G;o[b+84>>2]=0;B=v(B-R);s[b+80>>2]=E*B;s[b+76>>2]=F*B;s[b+72>>2]=G*B;o[b+68>>2]=1065353216;s[b+44>>2]=v(v(t*h)+v(r*g))+v(q*i);s[b+52>>2]=v(v(t*k)+v(r*u))+v(q*K);s[b+48>>2]=v(v(t*j)+v(r*J))+v(q*I);m[b+152|0]=0;i=v(Q-v(w+L));h=v(P-v(x+y));g=v(O-v(H+z));j=v(v(v(G*i)+v(F*h))+v(E*g));k=s[a+16>>2];g=v(g-v(E*j));l=v(g*g);g=v(i-v(G*j));i=v(g*g);g=v(h-v(F*j));s[b+212>>2]=v(l+v(i+v(g*g)))<v(k*v(j*v(j*k)))?v(1):k;a=o[c+4>>2];e:{f:{if(a){a=a+344|0;break f}a=o[c>>2];h=v(0);if(!a){break e}a=a+128|0}h=s[a>>2]}g:{if(m[30696]&1){break g}if(!da(30696)){break g}o[7672]=0;o[7673]=0;o[7670]=0;o[7671]=0;o[7668]=0;o[7669]=0;o[7666]=0;o[7667]=0;o[7664]=0;o[7665]=0;o[7662]=0;o[7663]=0;ca(30696)}a=o[c>>2];A=a?a+180|0:30648;f=o[c+4>>2];c=f+264|0;a=o[d+4>>2];h:{i:{if(a){a=a+344|0;break i}a=o[d>>2];g=v(0);if(!a){break h}a=a+128|0}g=s[a>>2]}b=e+164|0;a=f?c:A;f=1;j:{if(m[30696]&1){break j}if(!da(30696)){break j}o[7672]=0;o[7673]=0;o[7670]=0;o[7671]=0;o[7668]=0;o[7669]=0;o[7666]=0;o[7667]=0;o[7664]=0;o[7665]=0;o[7662]=0;o[7663]=0;ca(30696)}c=a;A=b;b=o[d+4>>2];a=o[d>>2];Jz(D,h,c,A,g,b?b+264|0:a?a+180|0:30648,N);a=D;b=o[a+12>>2];o[e+112>>2]=o[a+8>>2];o[e+116>>2]=b;b=o[a+4>>2];o[e+104>>2]=o[a>>2];o[e+108>>2]=b;b=o[a+20>>2];o[e+120>>2]=o[a+16>>2];o[e+124>>2]=b;b=o[a+28>>2];o[e+128>>2]=o[a+24>>2];o[e+132>>2]=b;b=o[a+36>>2];o[e+136>>2]=o[a+32>>2];o[e+140>>2]=b;b=o[a+44>>2];o[e+144>>2]=o[a+40>>2];o[e+148>>2]=b}M=D+48|0;return f}function Hz(a,b,c){a=a|0;b=v(b);c=v(c);var d=0,e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=v(0),l=v(0),n=0,q=0,r=0,t=0,u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=0;d=M-80|0;M=d;q=a+4|0;u=a+16|0;a:{b:{j=o[a+8>>2];if(!j){e=o[q>>2];if(e){break b}b=v(0);break a}b=s[j+332>>2];h=s[a+172>>2];i=s[j+336>>2];g=s[a+168>>2];f=v(v(b*h)-v(i*g));k=s[j+328>>2];l=b;b=s[a+164>>2];g=v(v(g*k)-v(l*b));i=v(v(i*b)-v(h*k));h=s[j+316>>2];k=s[j+312>>2];b=s[j+320>>2];break a}b=s[e+336>>2];h=s[a+172>>2];i=s[e+340>>2];g=s[a+168>>2];f=v(v(b*h)-v(i*g));k=s[e+332>>2];l=b;b=s[a+164>>2];g=v(v(g*k)-v(l*b));i=v(v(i*b)-v(h*k));h=s[e+320>>2];k=s[e+316>>2];b=s[e+324>>2]}z=v(b+g);A=v(h+i);B=v(k+f);c:{d:{e=o[a+20>>2];if(!e){e=o[u>>2];if(e){break d}h=v(0);g=v(0);k=v(0);f=v(0);i=v(0);b=v(0);break c}b=s[e+332>>2];g=s[a+188>>2];h=s[e+336>>2];f=s[a+184>>2];k=v(v(b*g)-v(h*f));w=f;f=s[e+328>>2];l=b;b=s[a+180>>2];i=v(v(w*f)-v(l*b));f=v(v(h*b)-v(g*f));h=s[e+316>>2];g=s[e+312>>2];b=s[e+320>>2];break c}b=s[e+336>>2];g=s[a+188>>2];h=s[e+340>>2];f=s[a+184>>2];k=v(v(b*g)-v(h*f));w=f;f=s[e+332>>2];l=b;b=s[a+180>>2];i=v(v(w*f)-v(l*b));f=v(v(h*b)-v(g*f));h=s[e+320>>2];g=s[e+316>>2];b=s[e+324>>2]}x=s[a+200>>2];y=s[a+204>>2];l=s[a+196>>2];e=d- -64|0;o[e>>2]=0;o[e+4>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;m[d+72|0]=1;e=o[a+84>>2];o[d+48>>2]=o[a+80>>2];o[d+52>>2]=e;e=o[a+76>>2];o[d+40>>2]=o[a+72>>2];o[d+44>>2]=e;g=v(B-v(g+k));h=v(A-v(h+f));i=v(z-v(b+i));b=v(v(v(l*g)+v(x*h))+v(y*i));e:{if(!(b<v(0))){b=s[d+48>>2];h=s[d+44>>2];g=s[d+40>>2];break e}f=v(l*b);l=f;w=v(g-f);f=s[a+212>>2];g=v(s[d+40>>2]+v(l+v(w*f)));s[d+40>>2]=g;k=v(x*b);h=v(v(k+v(f*v(h-k)))+s[d+44>>2]);s[d+44>>2]=h;b=v(y*b);b=v(v(b+v(f*v(i-b)))+s[d+48>>2]);s[d+48>>2]=b}r=a+164|0;t=a+180|0;k=s[a+112>>2];x=s[a+108>>2];i=s[a+128>>2];y=s[a+120>>2];l=s[a+124>>2];f=s[a+144>>2];z=s[a+136>>2];A=s[a+140>>2];B=s[a+104>>2];o[d+52>>2]=0;f=v(v(v(v(g*z)+v(h*A))+v(b*f))*c);s[d+48>>2]=f;i=v(v(v(v(g*y)+v(h*l))+v(b*i))*c);s[d+44>>2]=i;b=v(v(v(v(B*g)+v(x*h))+v(k*b))*c);s[d+40>>2]=b;e=o[a+4>>2];f:{if((e|0)==o[a+16>>2]){if(b!=b|i!=i|f!=f|v(C(v(v(v(b*b)+v(i*i))+v(f*f))))<s[e+368>>2]){break f}c=s[e+372>>2];o[d+28>>2]=0;g=v(c*v(-0));s[d+24>>2]=g;s[d+20>>2]=g;n=o[d+72>>2];o[d+32>>2]=n;o[d+12>>2]=0;s[d+16>>2]=g;s[d+8>>2]=c*v(-f);s[d+4>>2]=c*v(-i);s[d>>2]=c*v(-b);g:{if(!(n&1)){break g}if(j){Ca(j,d,r);e=o[q>>2];if(!e){break g}}Ed(e,r,d)}if(p[d+32|0]&2){Yb(q,d+16|0,r)}b=s[o[q>>2]+372>>2];j=o[d+52>>2];o[d+8>>2]=o[d+48>>2];o[d+12>>2]=j;j=o[d+60>>2];o[d+16>>2]=o[d+56>>2];o[d+20>>2]=j;o[d+32>>2]=o[d+72>>2];j=d- -64|0;e=o[j+4>>2];o[d+24>>2]=o[j>>2];o[d+28>>2]=e;s[d+8>>2]=b*s[d+8>>2];s[d+16>>2]=b*s[d+16>>2];j=o[d+44>>2];o[d>>2]=o[d+40>>2];o[d+4>>2]=j;s[d>>2]=b*s[d>>2];s[d+4>>2]=b*s[d+4>>2];s[d+20>>2]=b*s[d+20>>2];s[d+24>>2]=b*s[d+24>>2];h:{if(!(m[d+32|0]&1)){break h}a=o[a+20>>2];if(a){Ca(a,d,t)}a=o[u>>2];if(!a){break h}Ed(a,t,d)}if(!(p[d+32|0]&2)){break f}Yb(u,d+16|0,t);break f}n=o[d+52>>2];o[d+8>>2]=o[d+48>>2];o[d+12>>2]=n;n=o[d+60>>2];o[d+16>>2]=o[d+56>>2];o[d+20>>2]=n;n=d- -64|0;D=o[n+4>>2];o[d+24>>2]=o[n>>2];o[d+28>>2]=D;o[d+32>>2]=o[d+72>>2];s[d+8>>2]=-s[d+8>>2];s[d+16>>2]=-s[d+16>>2];n=o[d+44>>2];o[d>>2]=o[d+40>>2];o[d+4>>2]=n;s[d>>2]=-s[d>>2];s[d+4>>2]=-s[d+4>>2];o[d+12>>2]=0;b=s[d+20>>2];c=s[d+24>>2];o[d+28>>2]=0;s[d+24>>2]=-c;s[d+20>>2]=-b;i:{if(!(m[d+32|0]&1)){break i}if(j){Ca(j,d,r);e=o[q>>2]}if(!e){break i}Ed(e,r,d)}if(p[d+32|0]&2){Yb(q,d+16|0,r)}j:{if(!(m[d+72|0]&1)){break j}a=o[a+20>>2];if(a){Ca(a,d+40|0,t)}a=o[u>>2];if(!a){break j}Ed(a,t,d+40|0)}if(!(p[d+72|0]&2)){break f}Yb(u,d+56|0,t)}M=d+80|0}function ve(a,b,c,d,e,f,g){var h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=v(0),J=0,K=v(0),L=v(0),N=v(0),O=v(0),P=0;h=M-9824|0;M=h;o[f>>2]=0;o[f+4>>2]=0;o[f+32>>2]=0;o[f+24>>2]=0;o[f+28>>2]=0;o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[h+9700>>2]=c;o[h+9696>>2]=a;i=s[d+20>>2];j=s[d+36>>2];k=s[b+20>>2];m=s[b+36>>2];n=s[d+24>>2];q=s[b+24>>2];p=s[d+40>>2];t=s[b+40>>2];w=s[d+32>>2];x=s[d>>2];y=s[d+16>>2];z=s[d+4>>2];A=s[b+32>>2];B=s[b>>2];C=s[b+16>>2];E=s[b+4>>2];D=s[d+8>>2];F=s[b+8>>2];o[h+9748>>2]=0;o[h+9732>>2]=0;o[h+9716>>2]=0;G=v(v(v(F*D)+v(q*n))+v(t*p));s[h+9744>>2]=G;I=v(v(v(E*D)+v(k*n))+v(m*p));s[h+9740>>2]=I;n=v(v(v(B*D)+v(C*n))+v(A*p));s[h+9736>>2]=n;p=v(v(v(F*z)+v(q*i))+v(t*j));s[h+9728>>2]=p;D=v(v(v(E*z)+v(k*i))+v(m*j));s[h+9724>>2]=D;i=v(v(v(B*z)+v(C*i))+v(A*j));s[h+9720>>2]=i;j=v(v(v(x*F)+v(y*q))+v(w*t));s[h+9712>>2]=j;k=v(v(v(x*E)+v(y*k))+v(w*m));s[h+9708>>2]=k;m=v(v(v(x*B)+v(y*C))+v(w*A));s[h+9704>>2]=m;q=s[b+20>>2];t=s[b+36>>2];w=s[b+24>>2];x=s[b+52>>2];y=s[d+52>>2];z=s[b+40>>2];A=s[b+56>>2];B=s[d+56>>2];C=s[b>>2];E=s[b+16>>2];F=s[b+32>>2];K=s[b+4>>2];L=s[b+8>>2];N=s[b+48>>2];O=s[d+48>>2];o[h+9820>>2]=0;o[h+9812>>2]=0;o[h+9796>>2]=0;s[h+9792>>2]=G;s[h+9788>>2]=p;s[h+9784>>2]=j;o[h+9780>>2]=0;s[h+9776>>2]=I;s[h+9772>>2]=D;s[h+9768>>2]=k;o[h+9764>>2]=0;s[h+9760>>2]=n;s[h+9756>>2]=i;i=v(O-N);j=v(y-x);k=v(B-A);s[h+9808>>2]=v(v(L*i)+v(w*j))+v(z*k);s[h+9804>>2]=v(v(i*K)+v(j*q))+v(k*t);s[h+9800>>2]=v(v(i*C)+v(j*E))+v(k*F);o[h+9816>>2]=g?99:98;s[h+9752>>2]=m;a=h+9448|0;o[a>>2]=0;o[a+4>>2]=0;o[h+9440>>2]=0;o[h+9444>>2]=0;o[h+9676>>2]=0;o[h+9680>>2]=0;o[h+9688>>2]=2;o[h+9456>>2]=0;i=s[e>>2];j=s[e+4>>2];k=s[e+8>>2];o[h+28>>2]=0;s[h+24>>2]=-k;s[h+20>>2]=-j;s[h+16>>2]=-i;a:{b:{c:{switch(we(h+9312|0,h+9696|0,h+16|0)+ -1|0){case 0:a=h+9304|0;o[a>>2]=0;o[a+4>>2]=0;a=h- -64|0;o[a>>2]=0;o[a+4>>2]=0;o[h+72>>2]=0;o[h+9296>>2]=0;o[h+9300>>2]=0;o[h+9292>>2]=0;o[h+16>>2]=9;o[h+56>>2]=0;o[h+60>>2]=0;d=0;while(1){a=(u(0-d|0,56)+h|0)+7128|0;o[a+2152>>2]=0;c=o[h+9304>>2];o[a+2156>>2]=c;a=a+2108|0;if(c){o[c+44>>2]=a}o[h+9304>>2]=a;d=d+1|0;if((d|0)!=128){continue}break}o[h+9308>>2]=128;i=s[e>>2];j=s[e+4>>2];k=s[e+8>>2];o[h+12>>2]=0;s[h+8>>2]=-k;s[h+4>>2]=-j;s[h>>2]=-i;if((Ml(h+16|0,h+9312|0,h)|0)!=9){if(!o[h+52>>2]){i=v(0);j=v(0);k=v(0);break b}k=v(0);d=0;j=v(0);i=v(0);while(1){a=o[h+9816>>2];c=h;e=o[h+9820>>2];g=o[h+9696>>2]+(e>>1)|0;H=g;J=(h+16|0)+(d<<2)|0;P=o[J+4>>2];if(e&1){a=o[a+o[g>>2]>>2]}l[a](c,H,P);m=s[J+20>>2];k=v(k+v(m*s[h+8>>2]));j=v(j+v(m*s[h+4>>2]));i=v(i+v(s[h>>2]*m));d=d+1|0;if(d>>>0<r[h+52>>2]){continue}break}break b}o[f>>2]=3;break a;case 1:break c;default:break a}}o[f>>2]=2;break a}H=1;o[f>>2]=1;m=s[b+48>>2];n=s[b+8>>2];q=s[b>>2];p=s[b+4>>2];t=s[b+52>>2];w=s[b+24>>2];x=s[b+16>>2];y=s[b+20>>2];z=s[b+56>>2];A=s[b+40>>2];B=s[b+32>>2];C=s[b+36>>2];o[f+16>>2]=0;s[f+12>>2]=z+v(v(v(i*B)+v(j*C))+v(k*A));s[f+8>>2]=t+v(v(v(i*x)+v(j*y))+v(k*w));s[f+4>>2]=m+v(v(v(i*q)+v(j*p))+v(k*n));t=s[b+48>>2];w=s[b+8>>2];x=s[b>>2];y=s[b+4>>2];z=s[b+52>>2];A=s[b+24>>2];B=s[b+16>>2];C=s[b+20>>2];E=s[b+56>>2];D=s[b+40>>2];F=s[b+32>>2];G=s[b+36>>2];n=s[h+60>>2];q=s[h- -64>>2];p=s[h+56>>2];m=s[h+72>>2];o[f+48>>2]=0;o[f+32>>2]=0;s[f+52>>2]=-m;s[f+44>>2]=-q;s[f+40>>2]=-n;s[f+36>>2]=-p;i=v(i-v(p*m));j=v(j-v(m*n));k=v(k-v(m*q));s[f+28>>2]=E+v(v(v(F*i)+v(G*j))+v(D*k));s[f+24>>2]=z+v(v(v(i*B)+v(j*C))+v(k*A));s[f+20>>2]=t+v(v(v(i*x)+v(j*y))+v(k*w))}M=h+9824|0;return H}function qB(a,b,c,d,e,f,g,h){var i=0,j=0,k=0,n=0,q=0,r=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;i=M-288|0;M=i;q=o[b+12>>2];o[i+248>>2]=o[b+8>>2];o[i+252>>2]=q;q=o[b+4>>2];o[i+240>>2]=o[b>>2];o[i+244>>2]=q;b=o[c+12>>2];o[i+264>>2]=o[c+8>>2];o[i+268>>2]=b;b=o[c+4>>2];o[i+256>>2]=o[c>>2];o[i+260>>2]=b;b=o[d+12>>2];o[i+280>>2]=o[d+8>>2];o[i+284>>2]=b;b=o[d+4>>2];o[i+272>>2]=o[d>>2];o[i+276>>2]=b;t=o[g>>2];v=o[g+4>>2];w=o[g+8>>2];x=o[g+16>>2];y=o[g+12>>2];z=o[g+20>>2];b=o[i+252>>2];o[i+196>>2]=o[i+248>>2];o[i+200>>2]=b;b=o[i+244>>2];o[i+188>>2]=o[i+240>>2];o[i+192>>2]=b;b=o[i+268>>2];o[i+212>>2]=o[i+264>>2];o[i+216>>2]=b;b=o[i+260>>2];o[i+204>>2]=o[i+256>>2];o[i+208>>2]=b;b=o[i+284>>2];o[i+228>>2]=o[i+280>>2];o[i+232>>2]=b;b=o[i+276>>2];o[i+220>>2]=o[i+272>>2];o[i+224>>2]=b;b=o[a+136>>2];a:{if((b|0)!=o[a+140>>2]){break a}n=b?b<<1:1;if((b|0)>=(n|0)){break a}if(n){o[7717]=o[7717]+1;r=l[o[6606]](u(n,284),16)|0;b=o[a+136>>2]}if((b|0)>=1){c=0;while(1){g=u(c,284);d=g+o[a+144>>2]|0;k=ja(g+r|0,d,92);g=o[d+104>>2];o[k+100>>2]=o[d+100>>2];o[k+104>>2]=g;g=o[d+96>>2];o[k+92>>2]=o[d+92>>2];o[k+96>>2]=g;g=o[d+120>>2];o[k+116>>2]=o[d+116>>2];o[k+120>>2]=g;g=o[d+112>>2];o[k+108>>2]=o[d+108>>2];o[k+112>>2]=g;g=o[d+136>>2];o[k+132>>2]=o[d+132>>2];o[k+136>>2]=g;g=o[d+128>>2];o[k+124>>2]=o[d+124>>2];o[k+128>>2]=g;g=o[d+144>>2];o[k+140>>2]=o[d+140>>2];o[k+144>>2]=g;g=o[d+152>>2];o[k+148>>2]=o[d+148>>2];o[k+152>>2]=g;ja(k+156|0,d+156|0,128);c=c+1|0;if((c|0)!=(b|0)){continue}break}}b=o[a+144>>2];if(b){if(p[a+148|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+144>>2]=0}o[a+144>>2]=r;o[a+140>>2]=n;m[a+148|0]=1;b=o[a+136>>2]}j=ja(o[a+144>>2]+u(b,284)|0,i+32|0,92);b=o[i+136>>2];o[j+100>>2]=o[i+132>>2];o[j+104>>2]=b;b=o[i+128>>2];o[j+92>>2]=o[i+124>>2];o[j+96>>2]=b;b=o[i+152>>2];o[j+116>>2]=o[i+148>>2];o[j+120>>2]=b;b=o[i+144>>2];o[j+108>>2]=o[i+140>>2];o[j+112>>2]=b;b=o[i+168>>2];o[j+132>>2]=o[i+164>>2];o[j+136>>2]=b;b=o[i+160>>2];o[j+124>>2]=o[i+156>>2];o[j+128>>2]=b;b=o[i+184>>2];o[j+148>>2]=o[i+180>>2];o[j+152>>2]=b;b=o[i+176>>2];o[j+140>>2]=o[i+172>>2];o[j+144>>2]=b;A=o[i+228>>2];B=o[i+232>>2];C=o[i+220>>2];D=o[i+224>>2];k=o[i+212>>2];n=o[i+216>>2];r=o[i+204>>2];q=o[i+208>>2];g=o[i+196>>2];d=o[i+200>>2];c=o[i+188>>2];b=o[i+192>>2];s[j+204>>2]=e;o[j+208>>2]=y;s[j+212>>2]=f;o[j+216>>2]=t;o[j+220>>2]=v;o[j+224>>2]=w;o[j+228>>2]=x;o[j+248>>2]=z;o[j+232>>2]=0;o[j+236>>2]=0;o[j+240>>2]=0;o[j+244>>2]=1036831949;o[j+252>>2]=0;o[j+256>>2]=0;o[j+156>>2]=c;o[j+160>>2]=b;o[j+164>>2]=g;o[j+168>>2]=d;o[j+172>>2]=r;o[j+176>>2]=q;o[j+180>>2]=k;o[j+184>>2]=n;o[j+188>>2]=C;o[j+192>>2]=D;o[j+196>>2]=A;o[j+200>>2]=B;m[j+260|0]=h;c=p[i+28|0]|p[i+29|0]<<8|(p[i+30|0]<<16|p[i+31|0]<<24);b=p[i+24|0]|p[i+25|0]<<8|(p[i+26|0]<<16|p[i+27|0]<<24);m[j+276|0]=b;m[j+277|0]=b>>>8;m[j+278|0]=b>>>16;m[j+279|0]=b>>>24;m[j+280|0]=c;m[j+281|0]=c>>>8;m[j+282|0]=c>>>16;m[j+283|0]=c>>>24;c=p[i+21|0]|p[i+22|0]<<8|(p[i+23|0]<<16|p[i+24|0]<<24);b=p[i+17|0]|p[i+18|0]<<8|(p[i+19|0]<<16|p[i+20|0]<<24);m[j+269|0]=b;m[j+270|0]=b>>>8;m[j+271|0]=b>>>16;m[j+272|0]=b>>>24;m[j+273|0]=c;m[j+274|0]=c>>>8;m[j+275|0]=c>>>16;m[j+276|0]=c>>>24;c=p[i+13|0]|p[i+14|0]<<8|(p[i+15|0]<<16|p[i+16|0]<<24);b=p[i+9|0]|p[i+10|0]<<8|(p[i+11|0]<<16|p[i+12|0]<<24);m[j+261|0]=b;m[j+262|0]=b>>>8;m[j+263|0]=b>>>16;m[j+264|0]=b>>>24;m[j+265|0]=c;m[j+266|0]=c>>>8;m[j+267|0]=c>>>16;m[j+268|0]=c>>>24;b=o[a+136>>2];o[a+136>>2]=b+1;b=o[a+144>>2]+u(b,284)|0;Rc(a,b,0);Ef(a,o[a+136>>2]+ -1|0,0);M=i+288|0;return b}function sb(a){var b=0,c=0,d=0,e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=v(0),m=v(0),n=v(0),p=0,q=v(0),r=v(0);d=M-48|0;M=d;a:{b:{c:{d:{e:{f:{g:{c=o[a+372>>2];switch(o[c+32>>2]+ -1|0){case 3:break d;case 2:break e;case 1:break f;case 0:break g;default:break c}}e=o[a+364>>2];b=1;while(1){o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[(d+32|0)+(f<<2)>>2]=1065353216;k=(b<<2)+c|0;o[k+16>>2]=0;e=e+ -1|0;o[a+364>>2]=e;e=o[((e<<2)+a|0)+348>>2];o[k>>2]=e;o[c+32>>2]=b+1;Ya(a,d+32|0,e);if(sb(a)){break b}c=o[a+372>>2];b=o[c+32>>2]+ -1|0;o[c+32>>2]=b;e=o[a+364>>2];b=o[c+(b<<2)>>2];o[((e<<2)+a|0)+348>>2]=b;c=o[a+372>>2];o[d+28>>2]=0;s[d+24>>2]=-s[d+40>>2];s[d+20>>2]=-s[d+36>>2];s[d+16>>2]=-s[d+32>>2];k=o[c+32>>2];p=c+(k<<2)|0;o[p+16>>2]=0;o[a+364>>2]=e;o[p>>2]=b;o[c+32>>2]=k+1;Ya(a,d+16|0,b);if(sb(a)){break b}c=o[a+372>>2];b=o[c+32>>2]+ -1|0;o[c+32>>2]=b;c=o[c+(b<<2)>>2];b=o[a+364>>2];e=b+1|0;o[a+364>>2]=e;o[((b<<2)+a|0)+348>>2]=c;f=f+1|0;if((f|0)==3){break c}c=o[a+372>>2];b=o[c+32>>2];continue}}b=o[c+4>>2];c=o[c>>2];g=v(s[b+24>>2]-s[c+24>>2]);i=v(s[b+20>>2]-s[c+20>>2]);h=v(s[b+16>>2]-s[c+16>>2]);c=0;while(1){o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[(d+32|0)+(c<<2)>>2]=1065353216;o[d+28>>2]=0;j=s[d+32>>2];l=s[d+40>>2];m=v(v(g*j)-v(h*l));s[d+20>>2]=m;n=s[d+36>>2];l=v(v(i*l)-v(g*n));s[d+16>>2]=l;j=v(v(h*n)-v(i*j));s[d+24>>2]=j;if(!!(v(v(j*j)+v(v(l*l)+v(m*m)))>v(0))){b=o[a+372>>2];e=o[b+32>>2];f=(e<<2)+b|0;o[f+16>>2]=0;k=o[a+364>>2]+ -1|0;o[a+364>>2]=k;p=f;f=o[((k<<2)+a|0)+348>>2];o[p>>2]=f;o[b+32>>2]=e+1;Ya(a,d+16|0,f);if(sb(a)){break b}b=o[a+372>>2];e=o[b+32>>2]+ -1|0;o[b+32>>2]=e;f=o[a+364>>2];e=o[b+(e<<2)>>2];o[((f<<2)+a|0)+348>>2]=e;b=o[a+372>>2];o[d+12>>2]=0;s[d+8>>2]=-s[d+24>>2];s[d+4>>2]=-s[d+20>>2];s[d>>2]=-s[d+16>>2];k=o[b+32>>2];p=b+(k<<2)|0;o[p+16>>2]=0;o[a+364>>2]=f;o[p>>2]=e;o[b+32>>2]=k+1;Ya(a,d,e);if(sb(a)){break b}b=o[a+372>>2];e=o[b+32>>2]+ -1|0;o[b+32>>2]=e;b=o[b+(e<<2)>>2];e=o[a+364>>2];o[a+364>>2]=e+1;o[((e<<2)+a|0)+348>>2]=b}c=c+1|0;if((c|0)!=3){continue}break}break c}b=o[c+4>>2];m=s[b+20>>2];e=o[c+8>>2];l=s[e+24>>2];f=o[c>>2];g=s[f+24>>2];j=s[b+24>>2];n=s[e+20>>2];i=s[f+20>>2];q=s[e+16>>2];h=s[f+16>>2];r=s[b+16>>2];o[d+44>>2]=0;m=v(m-i);l=v(l-g);j=v(j-g);n=v(n-i);g=v(v(m*l)-v(j*n));s[d+32>>2]=g;i=j;j=v(q-h);h=v(r-h);i=v(v(i*j)-v(h*l));s[d+36>>2]=i;h=v(v(h*n)-v(m*j));s[d+40>>2]=h;if(!(v(v(h*h)+v(v(g*g)+v(i*i)))>v(0))){break c}o[c+28>>2]=0;b=o[a+364>>2]+ -1|0;o[a+364>>2]=b;b=o[((b<<2)+a|0)+348>>2];o[c+32>>2]=4;o[c+12>>2]=b;Ya(a,d+32|0,b);if(sb(a)){break b}c=o[a+372>>2];b=o[c+32>>2]+ -1|0;o[c+32>>2]=b;e=o[a+364>>2];b=o[c+(b<<2)>>2];o[((e<<2)+a|0)+348>>2]=b;c=o[a+372>>2];o[d+28>>2]=0;s[d+24>>2]=-s[d+40>>2];s[d+20>>2]=-s[d+36>>2];s[d+16>>2]=-s[d+32>>2];f=o[c+32>>2];k=c+(f<<2)|0;o[k+16>>2]=0;o[a+364>>2]=e;o[k>>2]=b;o[c+32>>2]=f+1;Ya(a,d+16|0,b);b=1;if(sb(a)){break a}c=o[a+372>>2];b=o[c+32>>2]+ -1|0;o[c+32>>2]=b;c=o[c+(b<<2)>>2];b=o[a+364>>2];o[a+364>>2]=b+1;o[((b<<2)+a|0)+348>>2]=c;b=0;break a}a=o[c>>2];e=o[c+12>>2];g=s[e+16>>2];m=v(s[a+16>>2]-g);f=o[c+4>>2];i=s[e+20>>2];l=v(s[f+20>>2]-i);c=o[c+8>>2];h=s[e+24>>2];j=v(s[c+24>>2]-h);n=v(s[a+20>>2]-i);q=v(s[f+24>>2]-h);r=v(s[c+16>>2]-g);h=v(s[a+24>>2]-h);g=v(s[f+16>>2]-g);i=v(s[c+20>>2]-i);g=v(v(v(v(m*l)*j)+v(v(v(v(v(n*q)*r)+v(v(h*g)*i))-v(v(m*q)*i))-v(v(n*g)*j)))-v(v(h*l)*r));b=1;if(g!=v(0)&g==g){break a}}b=0;break a}b=1}M=d+48|0;return b}function Uz(a){var b=0,c=v(0),d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=0,D=v(0),E=v(0),F=0,G=0,H=0,I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=0;b=M-144|0;M=b;a:{if(!p[a+473|0]){break a}F=o[a+712>>2];C=(F|0)<1;if(!C){G=o[a+512>>2];H=o[a+720>>2];while(1){w=H+u(d,104)|0;f=s[G+(d<<2)>>2];c=v(c+v(s[w+8>>2]*f));l=v(l+v(f*s[w+16>>2]));n=v(n+v(f*s[w+12>>2]));d=d+1|0;if((F|0)!=(d|0)){continue}break}}o[a+532>>2]=0;s[a+528>>2]=l;s[a+524>>2]=n;s[a+520>>2]=c;o[b+136>>2]=0;o[b+140>>2]=0;o[b+120>>2]=0;o[b+124>>2]=0;o[b+108>>2]=0;o[b+112>>2]=0;o[b+116>>2]=0;o[b+116>>2]=880803840;o[b+136>>2]=884998144;o[b+128>>2]=0;o[b+132>>2]=0;o[b+100>>2]=0;o[b+104>>2]=0;o[b+96>>2]=872415232;if(!C){G=o[a+492>>2];H=o[a+720>>2];S=o[a+512>>2];f=s[b+120>>2];j=v(1.1920928955078125e-7);g=v(2.384185791015625e-7);h=v(3.5762786865234375e-7);k=s[b+112>>2];i=s[b+104>>2];q=s[b+100>>2];w=0;while(1){C=H+u(w,104)|0;r=s[C+16>>2];y=s[C+12>>2];d=G+(w<<4)|0;z=s[d>>2];A=s[d+4>>2];t=s[(w<<2)+S>>2];e=v(v(s[C+8>>2]-c)*t);i=v(v(e*s[d+8>>2])+i);s[b+104>>2]=i;q=v(v(e*A)+q);s[b+100>>2]=q;j=v(v(e*z)+j);s[b+96>>2]=j;z=s[d>>2];A=s[d+4>>2];e=v(t*v(y-n));f=v(v(e*s[d+8>>2])+f);s[b+120>>2]=f;g=v(v(e*A)+g);s[b+116>>2]=g;k=v(v(e*z)+k);s[b+112>>2]=k;e=s[d>>2];y=s[d+4>>2];t=v(t*v(r-l));h=v(v(t*s[d+8>>2])+h);s[b+136>>2]=h;D=v(v(t*y)+D);s[b+132>>2]=D;E=v(v(t*e)+E);s[b+128>>2]=E;w=w+1|0;if((F|0)!=(w|0)){continue}break}}b:{if(m[30644]&1){break b}if(!da(30644)){break b}c=s[5758];o[7660]=o[5759];s[7659]=c;ca(30644)}xi(b+96|0,b+48|0,b);d=o[b+60>>2];o[a+544>>2]=o[b+56>>2];o[a+548>>2]=d;d=o[b+52>>2];o[a+536>>2]=o[b+48>>2];o[a+540>>2]=d;d=o[b+76>>2];o[a+560>>2]=o[b+72>>2];o[a+564>>2]=d;d=o[b+68>>2];o[a+552>>2]=o[b+64>>2];o[a+556>>2]=d;d=o[b+84>>2];o[a+568>>2]=o[b+80>>2];o[a+572>>2]=d;d=o[b+92>>2];o[a+576>>2]=o[b+88>>2];o[a+580>>2]=d;c=s[a+640>>2];l=s[a+632>>2];n=s[a+636>>2];f=s[a+656>>2];j=s[a+648>>2];g=s[a+652>>2];h=s[a+672>>2];k=s[a+664>>2];i=s[a+668>>2];q=s[b+88>>2];t=s[b+84>>2];e=s[b+56>>2];r=s[b+120>>2];y=s[b+72>>2];z=s[b+68>>2];A=s[b+128>>2];D=s[b+96>>2];E=s[b+112>>2];I=s[b+132>>2];J=s[b+100>>2];K=s[b+116>>2];L=s[b+136>>2];N=s[b+80>>2];O=s[b+104>>2];P=s[b+48>>2];Q=s[b+52>>2];R=s[b+64>>2];o[a+628>>2]=0;o[a+612>>2]=0;o[a+596>>2]=0;x=v(v(v(P*k)+v(Q*i))+v(e*h));B=v(v(v(R*k)+v(z*i))+v(y*h));i=v(v(v(N*k)+v(t*i))+v(q*h));h=v(v(v(O*x)+v(r*B))+v(L*i));s[a+624>>2]=h;k=v(v(v(x*J)+v(B*K))+v(i*I));s[a+620>>2]=k;i=v(v(v(D*x)+v(E*B))+v(i*A));s[a+616>>2]=i;x=v(v(v(P*j)+v(Q*g))+v(e*f));B=v(v(v(R*j)+v(z*g))+v(y*f));g=v(v(v(N*j)+v(t*g))+v(q*f));f=v(v(v(O*x)+v(r*B))+v(L*g));s[a+608>>2]=f;j=v(v(v(x*J)+v(B*K))+v(g*I));s[a+604>>2]=j;g=v(v(v(x*D)+v(B*E))+v(g*A));s[a+600>>2]=g;e=v(v(v(P*l)+v(Q*n))+v(e*c));x=r;r=v(v(v(R*l)+v(z*n))+v(y*c));c=v(v(v(N*l)+v(t*n))+v(q*c));l=v(v(v(O*e)+v(x*r))+v(L*c));s[a+592>>2]=l;n=v(v(v(e*J)+v(r*K))+v(c*I));s[a+588>>2]=n;q=v(v(v(e*D)+v(r*E))+v(c*A));s[a+584>>2]=q;c=s[a+364>>2];if(!(c>v(1))){break a}o[a+628>>2]=0;o[a+612>>2]=0;o[a+596>>2]=0;r=h;h=v(v(1)/v(v(l*v(v(k*g)-v(j*i)))+v(v(q*v(v(j*h)-v(f*k)))+v(n*v(v(f*i)-v(h*g))))));c=h<v(1)?v(1):h>c?c:h;s[a+624>>2]=r*c;s[a+620>>2]=k*c;s[a+616>>2]=i*c;s[a+608>>2]=f*c;s[a+604>>2]=j*c;s[a+600>>2]=g*c;s[a+592>>2]=l*c;s[a+588>>2]=n*c;s[a+584>>2]=q*c}M=b+144|0}function Sz(a){var b=0,c=0,d=0,e=v(0),f=0,g=0,h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0);i=M+ -64|0;M=i;Ki(a,0);g=o[a+732>>2];if((g|0)>=1){while(1){b=o[a+740>>2]+u(c,52)|0;d=o[b+8>>2];j=s[d+28>>2];f=o[b+12>>2];k=s[f+28>>2];h=s[d+32>>2];m=s[f+32>>2];e=s[d+24>>2];n=s[f+24>>2];o[b+48>>2]=0;e=v(n-e);s[b+36>>2]=e;h=v(m-h);s[b+44>>2]=h;j=v(k-j);s[b+40>>2]=j;s[b+32>>2]=v(1)/v(s[b+24>>2]*v(v(v(e*e)+v(j*j))+v(h*h)));c=c+1|0;if((g|0)!=(c|0)){continue}break}}f=o[a+792>>2];if((f|0)>=1){d=0;while(1){b=o[a+800>>2]+u(d,96)|0;c=o[b+20>>2];k=s[c+12>>2];m=s[c+8>>2];n=s[c+4>>2];p=s[c+28>>2];q=s[c+20>>2];r=s[c+24>>2];e=s[b+12>>2];t=s[c+44>>2];h=s[b+4>>2];w=s[c+36>>2];j=s[b+8>>2];x=s[c+40>>2];o[i+60>>2]=0;s[i+56>>2]=v(v(h*w)+v(j*x))+v(e*t);s[i+52>>2]=v(v(h*q)+v(j*r))+v(e*p);s[i+48>>2]=v(v(n*h)+v(m*j))+v(k*e);Ji(i,s[a+452>>2],s[o[b>>2]+88>>2],s[c+344>>2],c+264|0,i+48|0);c=i;g=o[c+12>>2];o[b+36>>2]=o[c+8>>2];o[b+40>>2]=g;g=o[c+4>>2];o[b+28>>2]=o[c>>2];o[b+32>>2]=g;g=o[c+28>>2];o[b+52>>2]=o[c+24>>2];o[b+56>>2]=g;g=o[c+20>>2];o[b+44>>2]=o[c+16>>2];o[b+48>>2]=g;g=o[c+44>>2];o[b+68>>2]=o[c+40>>2];o[b+72>>2]=g;g=o[c+36>>2];o[b+60>>2]=o[c+32>>2];o[b+64>>2]=g;g=o[c+60>>2];o[b+84>>2]=o[c+56>>2];o[b+88>>2]=g;g=o[c+52>>2];o[b+76>>2]=o[c+48>>2];o[b+80>>2]=g;s[b+92>>2]=s[a+452>>2]*s[o[b>>2]+88>>2];Na(o[b+20>>2],0);d=d+1|0;if((f|0)!=(d|0)){continue}break}}f=o[a+372>>2];a:{if((f|0)<1){break a}c=o[a+396>>2];d=0;while(1){b=0;if((c|0)>0){while(1){l[o[o[a+404>>2]+(b<<2)>>2]?0:833](a,v(1));b=b+1|0;c=o[a+396>>2];if((b|0)<(c|0)){continue}break}f=o[a+372>>2]}d=d+1|0;if((d|0)<(f|0)){continue}break}d=o[a+712>>2];if((d|0)<1){break a}c=0;while(1){e=s[a+452>>2];b=o[a+720>>2]+u(c,104)|0;o[b+20>>2]=0;s[b+8>>2]=v(e*s[b+40>>2])+s[b+24>>2];s[b+16>>2]=v(e*s[b+48>>2])+s[b+32>>2];s[b+12>>2]=v(e*s[b+44>>2])+s[b+28>>2];c=c+1|0;if((d|0)!=(c|0)){continue}break}}b=o[a+376>>2];b:{if((b|0)<1){break b}c=o[a+416>>2];d=0;while(1){if((c|0)>0){e=v(v(d|0)/v(b|0));b=0;while(1){l[o[(o[o[a+424>>2]+(b<<2)>>2]<<2)+22176>>2]](a,v(1),e);b=b+1|0;c=o[a+416>>2];if((b|0)<(c|0)){continue}break}b=o[a+376>>2]}d=d+1|0;if((d|0)<(b|0)){continue}break}d=o[a+712>>2];if((d|0)<1){break b}e=v(s[a+456>>2]*v(v(1)-s[a+296>>2]));c=0;while(1){b=o[a+720>>2]+u(c,104)|0;o[b+52>>2]=0;o[b+56>>2]=0;o[b+60>>2]=0;o[b+64>>2]=0;o[b+68>>2]=0;s[b+40>>2]=e*v(s[b+8>>2]-s[b+24>>2]);s[b+48>>2]=e*v(s[b+16>>2]-s[b+32>>2]);s[b+44>>2]=e*v(s[b+12>>2]-s[b+28>>2]);c=c+1|0;if((d|0)!=(c|0)){continue}break}}f=o[a+380>>2];c:{if((f|0)<1){break c}e=s[a+456>>2];h=s[a+292>>2];d=o[a+712>>2];d:{if((d|0)>=1){c=0;while(1){b=o[a+720>>2]+u(c,104)|0;f=o[b+12>>2];o[b+24>>2]=o[b+8>>2];o[b+28>>2]=f;f=o[b+20>>2];o[b+32>>2]=o[b+16>>2];o[b+36>>2]=f;c=c+1|0;if((d|0)!=(c|0)){continue}break}f=o[a+380>>2];if((f|0)<1){break d}}c=o[a+436>>2];d=0;while(1){b=0;if((c|0)>0){while(1){l[o[(o[o[a+444>>2]+(b<<2)>>2]<<2)+22176>>2]](a,v(1),v(0));b=b+1|0;c=o[a+436>>2];if((b|0)<(c|0)){continue}break}f=o[a+380>>2]}d=d+1|0;if((d|0)<(f|0)){continue}break}}d=o[a+712>>2];if((d|0)<1){break c}e=v(h*e);f=o[a+720>>2];c=0;while(1){b=f+u(c,104)|0;s[b+40>>2]=v(e*v(s[b+8>>2]-s[b+24>>2]))+s[b+40>>2];s[b+44>>2]=v(e*v(s[b+12>>2]-s[b+28>>2]))+s[b+44>>2];s[b+48>>2]=v(e*v(s[b+16>>2]-s[b+32>>2]))+s[b+48>>2];c=c+1|0;if((d|0)!=(c|0)){continue}break}}Qz(a);Ki(a,1);M=i- -64|0}function be(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),i=v(0),j=v(0),k=v(0),m=0,n=v(0),p=0,q=v(0),r=0,t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);d=M-48|0;M=d;a:{b:{switch(o[b+4>>2]){case 8:o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;break a;case 0:e=s[b+28>>2];f=s[b+32>>2];i=s[b+36>>2];j=s[c>>2];k=s[c+4>>2];n=s[c+8>>2];o[a+12>>2]=0;s[a+8>>2]=n>=v(0)?i:v(-i);s[a+4>>2]=k>=v(0)?f:v(-f);s[a>>2]=j>=v(0)?e:v(-e);break a;case 1:e=s[c>>2];f=s[c+4>>2];i=s[c+8>>2];j=v(v(v(e*s[b+72>>2])+v(f*s[b+76>>2]))+v(i*s[b+80>>2]));k=v(v(v(e*s[b+88>>2])+v(f*s[b+92>>2]))+v(i*s[b+96>>2]));e=v(v(v(e*s[b+56>>2])+v(f*s[b+60>>2]))+v(i*s[b- -64>>2]));b=(b+56|0)+((e<j?j<k?2:1:(e<k)<<1)<<4)|0;c=o[b+4>>2];m=o[b>>2];b=o[b+8>>2];o[a+12>>2]=0;o[a+8>>2]=b;o[a>>2]=m;o[a+4>>2]=c;break a;case 13:m=o[b+40>>2];o[d+40>>2]=o[b+36>>2];o[d+44>>2]=m;m=o[b+32>>2];o[d+32>>2]=o[b+28>>2];o[d+36>>2]=m;o[d+16>>2]=o[c>>2];f=s[c+4>>2];o[d+20>>2]=o[c+4>>2];e=s[c+8>>2];c=o[c+8>>2];o[d+28>>2]=0;o[d+24>>2]=c;c=1;m=2;c:{d:{e:{b=o[b+52>>2];switch(b+ -1|0){case 1:break d;case 0:break e;default:break c}}c=0;p=1;break c}e=f;c=0;p=2;m=1}f=s[(d+32|0)+(b<<2)>>2];b=c<<2;i=s[(b|d+32)>>2];j=s[(b|d+16)>>2];k=v(C(v(v(j*j)+v(e*e))));f:{if(k!=v(0)){i=v(i/k);s[(c<<2|d)>>2]=j*i;b=p<<2;s[b+d>>2]=s[b+(d+16|0)>>2]<v(0)?v(-f):f;s[(m<<2)+d>>2]=e*i;c=d|4;b=d+8|0;break f}s[(c<<2|d)>>2]=i;b=p<<2;s[b+d>>2]=s[b+(d+16|0)>>2]<v(0)?v(-f):f;o[(m<<2)+d>>2]=0;c=d|4;b=d+8|0}o[a>>2]=o[d>>2];o[a+4>>2]=o[c>>2];b=o[b>>2];o[a+12>>2]=0;o[a+8>>2]=b;break a;case 10:p=b+28|0;m=o[b+52>>2];r=m<<2;n=s[p+r>>2];j=s[p+((m+2|0)%3<<2)>>2];f=s[c>>2];e=s[c+4>>2];i=s[c+8>>2];k=v(v(v(f*f)+v(e*e))+v(i*i));g:{if(k<v(9999999747378752e-20)){k=v(0);f=v(1);e=v(0);break g}t=i;i=v(v(1)/v(C(k)));k=v(t*i);f=v(f*i);e=v(e*i)}o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;s[r+(d+32|0)>>2]=n;i=v(-0xde0b6b000000000);c=0;p=0;r=0;x=v(j*k);q=s[b+44>>2];y=v(k*q);w=v(v(x+s[d+40>>2])-y);u=v(j*f);z=v(f*q);t=v(v(u+s[d+32>>2])-z);A=v(j*e);q=v(e*q);B=v(v(A+s[d+36>>2])-q);j=v(v(k*w)+v(v(f*t)+v(e*B)));if(!!(j>v(-0xde0b6b000000000))){r=(g(w),h(0));p=(g(B),h(0));i=j;c=(g(t),h(0))}o[d+40>>2]=0;o[d+44>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;s[(d+32|0)+(m<<2)>>2]=-n;j=s[d+40>>2];n=s[d+32>>2];w=s[d+36>>2];o[a+12>>2]=0;t=f;f=v(v(u+n)-z);n=e;e=v(v(A+w)-q);j=v(v(x+j)-y);b=v(v(v(t*f)+v(n*e))+v(k*j))>i;o[a+8>>2]=b?(g(j),h(0)):r;o[a+4>>2]=b?(g(e),h(0)):p;o[a>>2]=b?(g(f),h(0)):c;break a;case 5:f=s[b+12>>2];i=s[b+20>>2];j=s[b+16>>2];p=o[b+92>>2];m=-1;r=o[b+96>>2];if((r|0)>=1){k=v(s[c>>2]*f);n=v(s[c+8>>2]*i);u=v(s[c+4>>2]*j);b=0;e=v(-3.4028234663852886e+38);while(1){c=p+(b<<4)|0;q=v(v(v(k*s[c>>2])+v(u*s[c+4>>2]))+v(n*s[c+8>>2]));c=q>e;e=c?q:e;m=c?b:m;b=b+1|0;if((r|0)!=(b|0)){continue}break}}b=p+(m<<4)|0;e=s[b>>2];k=s[b+4>>2];n=s[b+8>>2];o[a+12>>2]=0;s[a+8>>2]=i*n;s[a+4>>2]=j*k;s[a>>2]=f*e;break a;case 4:f=s[b+12>>2];i=s[b+20>>2];j=s[b+16>>2];p=o[b+104>>2];m=-1;r=o[b+96>>2];if((r|0)>=1){k=v(s[c>>2]*f);n=v(s[c+8>>2]*i);u=v(s[c+4>>2]*j);b=0;e=v(-3.4028234663852886e+38);while(1){c=p+(b<<4)|0;q=v(v(v(k*s[c>>2])+v(u*s[c+4>>2]))+v(n*s[c+8>>2]));c=q>e;e=c?q:e;m=c?b:m;b=b+1|0;if((r|0)!=(b|0)){continue}break}}b=p+(m<<4)|0;e=s[b>>2];k=s[b+4>>2];n=s[b+8>>2];o[a+12>>2]=0;s[a+8>>2]=i*n;s[a+4>>2]=j*k;s[a>>2]=f*e;break a;default:break b}}l[o[o[b>>2]+68>>2]](a,b,c)}M=d+48|0}function Vi(a){a=a|0;var b=0,c=0;o[a>>2]=20956;b=o[a+192>>2];if(b){l[o[o[b>>2]+4>>2]](b)}if(o[a+1112>>2]>=1){while(1){Df(a,0);if(o[a+1112>>2]>0){continue}break}}if(o[a+872>>2]>=1){b=0;while(1){c=o[o[a+880>>2]+(b<<2)>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}b=b+1|0;if((b|0)<o[a+872>>2]){continue}break}}if(o[a+852>>2]>=1){b=0;while(1){c=o[o[a+860>>2]+(b<<2)>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}b=b+1|0;if((b|0)<o[a+852>>2]){continue}break}}b=o[a+1244>>2];if(b){if(p[a+1248|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1244>>2]=0}o[a+1244>>2]=0;m[a+1248|0]=1;b=a+1236|0;o[b>>2]=0;o[b+4>>2]=0;b=o[a+1140>>2];if(b){if(p[a+1144|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1140>>2]=0}o[a+1140>>2]=0;m[a+1144|0]=1;b=a+1132|0;o[b>>2]=0;o[b+4>>2]=0;b=o[a+1120>>2];if(b){if(p[a+1124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+1120>>2]=0}o[a+1120>>2]=0;o[a+1112>>2]=0;o[a+1116>>2]=0;m[a+1124|0]=1;cb(a+1048|0);cb(a+988|0);cb(a+928|0);b=o[a+880>>2];if(b){if(p[a+884|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+880>>2]=0}o[a+880>>2]=0;o[a+872>>2]=0;o[a+876>>2]=0;m[a+884|0]=1;b=o[a+860>>2];if(b){if(p[a+864|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+860>>2]=0}o[a+860>>2]=0;o[a+852>>2]=0;o[a+856>>2]=0;m[a+864|0]=1;b=o[a+840>>2];if(b){if(p[a+844|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+840>>2]=0}o[a+840>>2]=0;m[a+844|0]=1;o[a+832>>2]=0;o[a+836>>2]=0;b=o[a+820>>2];if(b){if(p[a+824|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+820>>2]=0}o[a+820>>2]=0;m[a+824|0]=1;o[a+812>>2]=0;o[a+816>>2]=0;b=o[a+800>>2];if(b){if(p[a+804|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+800>>2]=0}o[a+800>>2]=0;m[a+804|0]=1;o[a+792>>2]=0;o[a+796>>2]=0;b=o[a+780>>2];if(b){if(p[a+784|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+780>>2]=0}o[a+780>>2]=0;m[a+784|0]=1;o[a+772>>2]=0;o[a+776>>2]=0;b=o[a+760>>2];if(b){if(p[a+764|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+760>>2]=0}o[a+760>>2]=0;m[a+764|0]=1;o[a+752>>2]=0;o[a+756>>2]=0;b=o[a+740>>2];if(b){if(p[a+744|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+740>>2]=0}o[a+740>>2]=0;m[a+744|0]=1;o[a+732>>2]=0;o[a+736>>2]=0;b=o[a+720>>2];if(b){if(p[a+724|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+720>>2]=0}o[a+720>>2]=0;m[a+724|0]=1;o[a+712>>2]=0;o[a+716>>2]=0;b=o[a+700>>2];if(b){if(p[a+704|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+700>>2]=0}o[a+700>>2]=0;m[a+704|0]=1;o[a+692>>2]=0;o[a+696>>2]=0;b=o[a+512>>2];if(b){if(p[a+516|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+512>>2]=0}o[a+512>>2]=0;m[a+516|0]=1;o[a+504>>2]=0;o[a+508>>2]=0;b=o[a+492>>2];if(b){if(p[a+496|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+492>>2]=0}o[a+492>>2]=0;m[a+496|0]=1;o[a+484>>2]=0;o[a+488>>2]=0;b=o[a+444>>2];if(b){if(p[a+448|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+444>>2]=0}o[a+444>>2]=0;m[a+448|0]=1;o[a+436>>2]=0;o[a+440>>2]=0;b=o[a+424>>2];if(b){if(p[a+428|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+424>>2]=0}o[a+424>>2]=0;m[a+428|0]=1;o[a+416>>2]=0;o[a+420>>2]=0;b=o[a+404>>2];if(b){if(p[a+408|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+404>>2]=0}o[a+404>>2]=0;m[a+408|0]=1;o[a+396>>2]=0;o[a+400>>2]=0;b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+276>>2]=0}o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a>>2]=3948;return a|0}function Lf(a,b,c,d,e,f,g,h,i,j,k,l,m){var n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=0,z=0,A=0,B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=0,K=v(0),L=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=0,T=0,U=0,V=0,W=v(0),X=v(0);y=M-16|0;M=y;z=o[i+24>>2];S=p[b+44|0];N=o[b+56>>2];a:{if(N?0:!S){break a}T=o[(l?20:16)+i>>2];J=o[(l?12:8)+i>>2];E=u(j,z);A=E<<2;o[J+A>>2]=o[k>>2];U=E+1|0;z=U<<2;o[z+J>>2]=o[k+4>>2];V=E+2|0;j=V<<2;o[J+j>>2]=o[k+8>>2];s[A+T>>2]=-s[k>>2];s[z+T>>2]=-s[k+4>>2];s[j+T>>2]=-s[k+8>>2];b:{if(l){break b}if(p[a+1301|0]){t=s[a+1112>>2];O=s[c+52>>2];B=s[a+1116>>2];I=s[c+56>>2];x=s[a+1120>>2];P=s[a+1176>>2];Q=s[d+52>>2];R=s[a+1180>>2];C=s[d+56>>2];w=s[a+1184>>2];K=s[a+1276>>2];L=s[a+1272>>2];D=s[b+48>>2];r=s[b+52>>2];q=s[c+48>>2];F=s[k>>2];n=s[d+48>>2];G=s[k+4>>2];H=s[k+8>>2];o[y+12>>2]=0;t=v(t-q);B=v(B-O);x=v(x-I);W=v(v(v(F*t)+v(G*B))+v(H*x));q=v(F*W);I=v(r-D);P=v(P-n);Q=v(R-Q);R=v(w-C);r=v(v(v(F*P)+v(G*Q))+v(H*R));C=v(F*r);X=v(v(q+v(F*I))-C);n=v(G*W);w=v(G*r);O=v(v(n+v(G*I))-w);t=v(v(t-q)+v(L*X));q=v(v(B-n)+v(L*O));D=v(v(G*t)-v(F*q));s[y+8>>2]=D;n=v(H*W);r=v(H*r);I=v(v(n+v(H*I))-r);n=v(v(x-n)+v(L*I));B=v(v(F*n)-v(H*t));s[y+4>>2]=B;x=v(v(H*q)-v(G*n));s[y>>2]=x;t=v(v(P-C)-v(K*X));q=v(v(Q-w)-v(K*O));C=v(v(G*t)-v(F*q));n=v(v(R-r)-v(K*I));w=v(v(F*n)-v(H*t));r=v(v(H*q)-v(G*n));if(!(!p[a+1280|0]|m)){s[y+8>>2]=L*D;s[y+4>>2]=L*B;s[y>>2]=L*x;C=v(K*C);w=v(K*w);r=v(K*r)}a=o[y+4>>2];c=E<<2;d=c+o[i+12>>2]|0;o[d>>2]=o[y>>2];o[d+4>>2]=a;o[d+8>>2]=o[y+8>>2];a=o[i+20>>2];s[a+c>>2]=-r;s[a+(U<<2)>>2]=-w;s[a+(V<<2)>>2]=-C;break b}A=a+1176|0;r=s[A>>2];B=s[c+48>>2];D=s[k>>2];J=o[i+12>>2];z=E<<2;m=a+1180|0;x=v(s[m>>2]-s[c+52>>2]);t=s[k+8>>2];j=a+1184|0;n=v(s[j>>2]-s[c+56>>2]);q=s[k+4>>2];s[J+z>>2]=v(x*t)-v(n*q);c=U<<2;w=v(n*D);n=v(r-B);s[c+J>>2]=w-v(t*n);a=V<<2;s[a+J>>2]=v(n*q)-v(x*D);r=s[A>>2];B=s[d+48>>2];D=s[k>>2];A=z;z=o[i+20>>2];x=v(s[m>>2]-s[d+52>>2]);t=s[k+8>>2];n=v(s[j>>2]-s[d+56>>2]);q=s[k+4>>2];s[A+z>>2]=-v(v(x*t)-v(n*q));w=v(n*D);n=v(r-B);s[c+z>>2]=-v(w-v(t*n));s[a+z>>2]=-v(v(n*q)-v(x*D))}c:{d:{if(N){q=s[b+4>>2];n=s[b>>2];d=o[i+28>>2]+(E<<2)|0;o[d>>2]=0;if(!(!S|n==q)){o[o[i+32>>2]+(E<<2)>>2]=o[b+28>>2]}q=v(s[i>>2]*s[b+32>>2]);n=s[b+48>>2];if(l){break d}n=v(v(q*n)+s[d>>2]);break c}c=E<<2;o[c+o[i+28>>2]>>2]=0;A=1;if(!S){break a}o[c+o[i+32>>2]>>2]=o[b+28>>2];n=s[b+8>>2];n=Tc(s[b+52>>2],s[b>>2],s[b+4>>2],l?n:v(-n),v(s[i>>2]*s[b+32>>2]));a=c+o[i+28>>2]|0;s[a>>2]=v(n*s[b+8>>2])+s[a>>2];s[c+o[i+36>>2]>>2]=-s[b+12>>2];o[c+o[i+40>>2]>>2]=o[b+12>>2];break a}n=v(s[d>>2]-v(q*n))}s[d>>2]=n;c=E<<2;o[c+o[i+32>>2]>>2]=o[b+36>>2];if(s[b>>2]==s[b+4>>2]){o[c+o[i+36>>2]>>2]=-8388609;o[c+o[i+40>>2]>>2]=2139095039;A=1;break a}A=1;a=(N|0)==1;s[c+o[i+36>>2]>>2]=a?v(0):v(-3.4028234663852886e+38);s[c+o[i+40>>2]>>2]=a?v(3.4028234663852886e+38):v(0);t=s[b+40>>2];if(!(t>v(0))){break a}e:{if(l){q=s[k+8>>2];C=v(s[g+8>>2]*q);r=s[k>>2];w=s[k+4>>2];n=v(v(s[g>>2]*r)+v(s[g+4>>2]*w));break e}q=s[k+8>>2];C=v(s[e+8>>2]*q);h=f;r=s[k>>2];w=s[k+4>>2];n=v(v(s[e>>2]*r)+v(s[e+4>>2]*w))}n=v(v(n+C)-v(v(v(r*s[h>>2])+v(w*s[h+4>>2]))+v(q*s[h+8>>2])));if((N|0)==1){if(!(n<v(0))){break a}n=v(n*v(-t));if(!(n>s[d>>2])){break a}s[d>>2]=n;break a}if(!(n>v(0))){break a}n=v(n*v(-t));if(!(n<s[d>>2])){break a}s[d>>2]=n}M=y+16|0;return A}function Wm(a,b,c,d,e,f){a=a|0;b=v(b);c=v(c);d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;g=M-752|0;M=g;o[g+748>>2]=a;s[g+744>>2]=b;s[g+740>>2]=c;o[g+736>>2]=d;o[g+732>>2]=e;o[g+728>>2]=f;a=o[g+748>>2];o[g+724>>2]=30;d=M-16|0;o[d+12>>2]=o[g+732>>2];d=o[d+12>>2]+48|0;e=o[d+4>>2];o[g+704>>2]=o[d>>2];o[g+708>>2]=e;e=o[d+12>>2];o[g+712>>2]=o[d+8>>2];o[g+716>>2]=e;s[g+684>>2]=0;s[g+680>>2]=0;s[g+676>>2]=0;d=g+688|0;Y(d,g+684|0,g+680|0,g+676|0);s[g+672>>2]=s[g+740>>2]*v(.5);b=s[g+672>>2];e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+736>>2]<<2)>>2]=b;s[g+652>>2]=0;s[g+648>>2]=0;s[g+644>>2]=0;d=g+656|0;Y(d,g+652|0,g+648|0,g+644|0);b=s[g+744>>2];e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+736>>2]+1|0)%3<<2)>>2]=b;s[g+620>>2]=0;s[g+616>>2]=0;s[g+612>>2]=0;d=g+624|0;Y(d,g+620|0,g+616|0,g+612|0);b=s[g+744>>2];e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+736>>2]+2|0)%3<<2)>>2]=b;s[g+588>>2]=0;s[g+584>>2]=0;s[g+580>>2]=0;d=g+592|0;Y(d,g+588|0,g+584|0,g+580|0);b=v(-s[g+672>>2]);e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+736>>2]<<2)>>2]=b;o[g+576>>2]=0;while(1){if(o[g+576>>2]<360){b=v(za(v(v(o[g+576>>2])*v(.01745329238474369)))*s[g+744>>2]);e=M-16|0;d=g+592|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+736>>2]+1|0)%3<<2)>>2]=b;b=v(Aa(v(v(o[g+576>>2])*v(.01745329238474369)))*s[g+744>>2]);e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+736>>2]+2|0)%3<<2)>>2]=b;e=M-16|0;o[e+12>>2]=o[g+732>>2];f=g+544|0;ea(f,o[e+12>>2],g+688|0);e=g+560|0;h=g+704|0;ha(e,h,f);f=M-16|0;o[f+12>>2]=o[g+732>>2];i=g+512|0;ea(i,o[f+12>>2],d);d=g+528|0;ha(d,h,i);l[o[o[a>>2]+8>>2]](a,e,d,o[g+728>>2]);o[g+576>>2]=o[g+724>>2]+o[g+576>>2];continue}break}d=M-16|0;o[d+12>>2]=o[g+732>>2];f=g+480|0;e=o[d+12>>2];d=g+688|0;ea(f,e,d);h=g+496|0;e=g+704|0;ha(h,e,f);f=M-16|0;o[f+12>>2]=o[g+732>>2];f=o[f+12>>2];i=g+416|0;yb(i,d);k=g+432|0;j=i;i=g+656|0;ha(k,j,i);j=g+448|0;ea(j,f,k);f=g+464|0;ha(f,e,j);l[o[o[a>>2]+8>>2]](a,h,f,o[g+728>>2]);f=M-16|0;o[f+12>>2]=o[g+732>>2];h=g+384|0;ea(h,o[f+12>>2],d);f=g+400|0;ha(f,e,h);h=M-16|0;o[h+12>>2]=o[g+732>>2];h=o[h+12>>2];k=g+320|0;yb(k,d);j=g+336|0;db(j,k,i);i=g+352|0;ea(i,h,j);h=g+368|0;ha(h,e,i);l[o[o[a>>2]+8>>2]](a,f,h,o[g+728>>2]);f=M-16|0;o[f+12>>2]=o[g+732>>2];h=g+288|0;ea(h,o[f+12>>2],d);f=g+304|0;ha(f,e,h);h=M-16|0;o[h+12>>2]=o[g+732>>2];h=o[h+12>>2];i=g+224|0;yb(i,d);k=g+240|0;j=i;i=g+624|0;ha(k,j,i);j=g+256|0;ea(j,h,k);h=g+272|0;ha(h,e,j);l[o[o[a>>2]+8>>2]](a,f,h,o[g+728>>2]);f=M-16|0;o[f+12>>2]=o[g+732>>2];h=g+192|0;ea(h,o[f+12>>2],d);f=g+208|0;ha(f,e,h);h=M-16|0;o[h+12>>2]=o[g+732>>2];h=o[h+12>>2];k=g+128|0;yb(k,d);j=g+144|0;db(j,k,i);i=g+160|0;ea(i,h,j);h=g+176|0;ha(h,e,i);l[o[o[a>>2]+8>>2]](a,f,h,o[g+728>>2]);s[g+108>>2]=0;s[g+104>>2]=0;s[g+100>>2]=0;f=g+112|0;Y(f,g+108|0,g+104|0,g+100|0);h=M-16|0;o[h+12>>2]=f;s[o[h+12>>2]+(o[g+736>>2]<<2)>>2]=1;s[g+76>>2]=0;s[g+72>>2]=0;s[g+68>>2]=0;h=g+80|0;Y(h,g+76|0,g+72|0,g+68|0);i=M-16|0;o[i+12>>2]=h;s[o[i+12>>2]+((o[g+736>>2]+1|0)%3<<2)>>2]=1;i=M-16|0;o[i+12>>2]=o[g+732>>2];k=g+32|0;ea(k,o[i+12>>2],d);d=g+48|0;db(d,e,k);e=M-16|0;o[e+12>>2]=o[g+732>>2];i=g+16|0;ea(i,o[e+12>>2],f);e=M-16|0;o[e+12>>2]=o[g+732>>2];ea(g,o[e+12>>2],h);l[o[o[a>>2]+60>>2]](a,d,i,g,s[g+744>>2],s[g+744>>2],v(0),v(6.2831854820251465),o[g+728>>2],0,v(10));M=g+752|0}function tD(a,b){a=a|0;b=v(b);var c=0,d=0,e=0,f=v(0),g=0,h=0,i=0,j=v(0),k=v(0),m=v(0),r=0,t=v(0),w=v(0),x=v(0),y=v(0);c=M-304|0;M=c;ia(18412);if(o[a+232>>2]>=1){while(1){d=o[o[a+240>>2]+(h<<2)>>2];o[d+244>>2]=1065353216;a:{b:{switch(o[d+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}if(p[d+204|0]&3){break a}Od(d,b,c+240|0);c:{if(!p[a+44|0]){break c}f=s[d+252>>2];f=v(f*f);if(f==v(0)){break c}k=f;f=v(s[c+288>>2]-s[d+52>>2]);j=v(f*f);f=v(s[c+292>>2]-s[d+56>>2]);j=v(j+v(f*f));f=v(s[c+296>>2]-s[d+60>>2]);if(!(k<v(j+v(f*f)))){break c}ia(18432);if(o[o[d+192>>2]+4>>2]<=19){o[7312]=o[7312]+1;e=o[a+68>>2];e=l[o[o[e>>2]+36>>2]](e)|0;g=o[a+24>>2];o[c+148>>2]=1065353216;o[c+152>>2]=-65535;i=o[d+64>>2];o[c+164>>2]=o[d+60>>2];o[c+168>>2]=i;i=o[d+56>>2];o[c+156>>2]=o[d+52>>2];o[c+160>>2]=i;i=o[c+300>>2];o[c+180>>2]=o[c+296>>2];o[c+184>>2]=i;i=o[c+292>>2];o[c+172>>2]=o[c+288>>2];o[c+176>>2]=i;o[c+220>>2]=0;o[c+144>>2]=18736;o[c+232>>2]=e;o[c+236>>2]=g;o[c+228>>2]=0;o[c+224>>2]=d;g=o[d+248>>2];e=c+88|0;o[e+4>>2]=35;o[e+8>>2]=0;o[e>>2]=13316;o[e+44>>2]=1025758986;o[e+20>>2]=1065353216;o[e+24>>2]=0;o[e+12>>2]=1065353216;o[e+16>>2]=1065353216;o[e>>2]=13444;o[c+132>>2]=g;o[c+116>>2]=g;o[c+92>>2]=8;o[c+88>>2]=11556;o[c+228>>2]=o[a+56>>2];e=o[d+188>>2];n[c+152>>1]=q[e+4>>1];n[c+154>>1]=q[e+6>>1];e=o[c+252>>2];o[c+32>>2]=o[c+248>>2];o[c+36>>2]=e;e=o[c+244>>2];o[c+24>>2]=o[c+240>>2];o[c+28>>2]=e;e=o[c+268>>2];o[c+48>>2]=o[c+264>>2];o[c+52>>2]=e;e=o[c+260>>2];o[c+40>>2]=o[c+256>>2];o[c+44>>2]=e;e=o[c+284>>2];o[c+64>>2]=o[c+280>>2];o[c+68>>2]=e;e=o[c+276>>2];o[c+56>>2]=o[c+272>>2];o[c+60>>2]=e;e=o[c+300>>2];o[c+80>>2]=o[c+296>>2];o[c+84>>2]=e;e=o[c+292>>2];o[c+72>>2]=o[c+288>>2];o[c+76>>2]=e;e=d+4|0;g=o[e+12>>2];o[c+32>>2]=o[e+8>>2];o[c+36>>2]=g;g=o[e+4>>2];o[c+24>>2]=o[e>>2];o[c+28>>2]=g;g=o[d+32>>2];o[c+48>>2]=o[d+28>>2];o[c+52>>2]=g;g=o[d+24>>2];o[c+40>>2]=o[d+20>>2];o[c+44>>2]=g;g=o[d+48>>2];o[c+64>>2]=o[d+44>>2];o[c+68>>2]=g;g=o[d+40>>2];o[c+56>>2]=o[d+36>>2];o[c+60>>2]=g;Kb(a,c+88|0,e,c+24|0,c+144|0,v(0));f=s[c+148>>2];if(!!(f<v(1))){s[d+244>>2]=f;Od(d,v(f*b),c+240|0);o[d+244>>2]=0;Sf(d,c+240|0);ga();break a}}ga()}Sf(d,c+240|0)}h=h+1|0;if((h|0)<o[a+232>>2]){continue}break}}if(p[a+275|0]){ia(18452);h=o[a+308>>2];if((h|0)>=1){while(1){g=o[o[a+316>>2]+(r<<2)>>2];if(o[g+748>>2]>=1){d=o[g+744>>2];h=o[d+236>>2]<<30>>31&d;d=o[g+740>>2];e=o[d+236>>2]<<30>>31&d;i=0;while(1){b=v(s[e+228>>2]*s[h+228>>2]);d:{if(!(b>v(0))){break d}d=g+u(i,184)|0;f=s[d+124>>2];if(f==v(0)){break d}k=s[d+68>>2];j=s[d+72>>2];m=s[d+76>>2];o[c+156>>2]=0;m=v(b*v(f*v(-m)));s[c+152>>2]=m;j=v(b*v(f*v(-j)));s[c+148>>2]=j;b=v(b*v(f*v(-k)));s[c+144>>2]=b;f=s[d+52>>2];k=s[d+56>>2];t=s[d+60>>2];w=s[e+52>>2];x=s[e+56>>2];y=s[e+60>>2];o[c+36>>2]=0;s[c+32>>2]=t-y;s[c+28>>2]=k-x;s[c+24>>2]=f-w;f=s[d+36>>2];k=s[d+40>>2];t=s[d+44>>2];w=s[h+52>>2];x=s[h+56>>2];y=s[h+60>>2];o[c+100>>2]=0;s[c+96>>2]=t-y;s[c+92>>2]=k-x;s[c+88>>2]=f-w;if(e){Ca(e,c+144|0,c+24|0);m=s[c+152>>2];j=s[c+148>>2];b=s[c+144>>2]}o[c+20>>2]=0;s[c+16>>2]=-m;s[c+12>>2]=-j;s[c+8>>2]=-b;Ca(h,c+8|0,c+88|0)}i=i+1|0;if((i|0)<o[g+748>>2]){continue}break}h=o[a+308>>2]}r=r+1|0;if((r|0)<(h|0)){continue}break}}ga()}ga();M=c+304|0}function ll(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,n=v(0),q=0,r=v(0),t=v(0),w=v(0),x=v(0),y=0,z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=0,Q=0,R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0);i=M+ -64|0;M=i;o[i+52>>2]=0;o[i+44>>2]=0;o[i+48>>2]=0;m[i+56|0]=1;h=o[d+4>>2];if((h|0)>=1){o[7717]=o[7717]+1;y=l[o[6606]](h<<4,16)|0;E=o[i+44>>2];if((E|0)>=1){while(1){j=k<<4;q=j+y|0;j=j+o[i+52>>2]|0;z=o[j+4>>2];o[q>>2]=o[j>>2];o[q+4>>2]=z;P=o[j+12>>2];o[q+8>>2]=o[j+8>>2];o[q+12>>2]=P;k=k+1|0;if((E|0)!=(k|0)){continue}break}}j=o[i+52>>2];if(j){if(p[i+56|0]){if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}o[i+52>>2]=0}o[i+52>>2]=y;m[i+56|0]=1;o[i+48>>2]=h}y=o[b+28>>2];a:{if((y|0)<1){break a}A=s[c+40>>2];F=s[c+36>>2];w=s[c+24>>2];G=s[c+20>>2];q=o[b+36>>2];B=s[a+8>>2];H=s[a+4>>2];C=s[a>>2];I=s[c+32>>2];J=s[c+16>>2];K=s[c+8>>2];L=s[c+4>>2];D=s[c>>2];k=0;t=v(3.4028234663852886e+38);h=-1;while(1){j=q+u(k,36)|0;r=s[j+20>>2];n=s[j+24>>2];x=s[j+28>>2];r=v(v(v(v(v(v(r*D)+v(n*L))+v(x*K))*C)+v(v(v(v(r*J)+v(n*G))+v(x*w))*H))+v(v(v(v(r*I)+v(n*F))+v(x*A))*B));j=r<t;t=j?r:t;h=j?k:h;k=k+1|0;if((y|0)!=(k|0)){continue}break}if((h|0)<0){break a}q=o[b+36>>2]+u(h,36)|0;P=o[q+4>>2];b:{if((P|0)<1){j=d;break b}h=i+40|0;k=0;while(1){j=h;y=k+1|0;E=(y|0)==(P|0);Q=o[b+16>>2];z=o[q+12>>2];h=Q+(o[z+((E?0:y)<<2)>>2]<<4)|0;N=s[h+8>>2];D=s[h>>2];O=s[h+4>>2];h=Q+(o[(k<<2)+z>>2]<<4)|0;t=s[h+8>>2];r=s[h>>2];n=s[h+4>>2];W=s[c+56>>2];X=s[c+52>>2];Y=s[c+48>>2];x=s[c+40>>2];A=s[c+32>>2];F=s[c+36>>2];w=s[q+28>>2];G=s[c+8>>2];B=s[q+20>>2];H=s[c>>2];C=s[q+24>>2];I=s[c+4>>2];J=s[c+24>>2];K=s[c+16>>2];L=s[c+20>>2];o[i+36>>2]=0;D=v(r-D);O=v(n-O);N=v(t-N);R=v(v(v(H*D)+v(I*O))+v(G*N));S=v(v(v(K*B)+v(L*C))+v(J*w));T=v(v(v(D*K)+v(O*L))+v(N*J));U=v(v(v(H*B)+v(I*C))+v(G*w));V=v(v(R*S)-v(T*U));s[i+32>>2]=-V;w=v(v(v(A*B)+v(F*C))+v(x*w));B=v(v(v(D*A)+v(O*F))+v(N*x));C=v(v(T*w)-v(B*S));s[i+24>>2]=-C;w=v(-v(v(B*U)-v(R*w)));s[i+28>>2]=w;h=d;sJ(h,j,i+24|0,v(-v(v(v(v(X+v(v(v(r*K)+v(n*L))+v(t*J)))*w)-v(C*v(Y+v(v(v(r*H)+v(n*I))+v(t*G)))))-v(V*v(W+v(v(v(r*A)+v(n*F))+v(t*x)))))));k=o[h+4>>2];if((k|0)<=-1){if(o[h+8>>2]<=-1){d=o[h+12>>2];if(d){if(p[h+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[h+12>>2]=0}m[h+16|0]=1;o[h+8>>2]=0;o[h+12>>2]=0}while(1){Q=o[i+12>>2];d=o[h+12>>2]+(k<<4)|0;o[d>>2]=o[i+8>>2];o[d+4>>2]=Q;z=o[i+20>>2];o[d+8>>2]=o[i+16>>2];o[d+12>>2]=z;d=k+1|0;z=d>>>0>=k>>>0;k=d;if(z){continue}break}}o[h+4>>2]=0;k=y;d=j;if(!E){continue}break}}h=o[j+4>>2];if((h|0)<1){break a}t=s[q+20>>2];r=s[q+24>>2];n=s[q+28>>2];x=v(v(v(t*s[c>>2])+v(r*s[c+4>>2]))+v(n*s[c+8>>2]));A=v(v(v(t*s[c+16>>2])+v(r*s[c+20>>2]))+v(n*s[c+24>>2]));t=v(v(v(t*s[c+32>>2])+v(r*s[c+36>>2]))+v(n*s[c+40>>2]));r=v(s[q+32>>2]-v(v(v(x*s[c+48>>2])+v(A*s[c+52>>2]))+v(t*s[c+56>>2])));c=0;while(1){b=o[j+12>>2]+(c<<4)|0;n=v(r+v(v(v(x*s[b>>2])+v(A*s[b+4>>2]))+v(t*s[b+8>>2])));n=n<=e?e:n;if(!!(n<=f)){d=o[b+12>>2];o[i+32>>2]=o[b+8>>2];o[i+36>>2]=d;d=o[b+4>>2];o[i+24>>2]=o[b>>2];o[i+28>>2]=d;l[o[o[g>>2]+16>>2]](g,a,i+24|0,n);h=o[j+4>>2]}c=c+1|0;if((c|0)<(h|0)){continue}break}}a=o[i+52>>2];if(a){if(p[i+56|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[i+52>>2]=0}M=i- -64|0}function nL(a,b,c,d,e,f){var g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=0,n=v(0),q=v(0),r=v(0),t=0,u=v(0),w=v(0),x=0,y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=0,X=v(0),Y=v(0),Z=v(0),_=0,$=0;h=M-48|0;M=h;m[h+24|0]=0;l=o[a+12>>2];o[f+8>>2]=o[a+8>>2];o[f+12>>2]=l;l=o[a+4>>2];o[f>>2]=o[a>>2];o[f+4>>2]=l;m[f+16|0]=p[f+16|0]|15;R=s[a+8>>2];y=s[b+8>>2];N=v(R-y);z=s[c+8>>2];A=v(z-y);S=s[d>>2];B=s[b>>2];C=v(S-B);L=s[e+4>>2];D=s[b+4>>2];E=v(L-D);F=s[d+4>>2];G=v(F-D);n=s[e>>2];H=v(n-B);q=v(v(C*E)-v(G*H));I=s[c>>2];J=v(I-B);T=s[e+8>>2];r=v(T-y);j=s[d+8>>2];k=v(j-y);g=v(v(G*r)-v(k*E));K=s[c+4>>2];u=v(K-D);i=v(v(k*H)-v(C*r));w=v(v(A*q)+v(v(J*g)+v(u*i)));U=s[a>>2];O=v(U-B);V=s[a+4>>2];P=v(V-D);W=v(w*w)<v(9.99999905104687e-9)?-1:v(v(v(N*q)+v(v(O*g)+v(P*i)))*w)<v(0);X=v(v(u*k)-v(A*G));Y=v(v(A*C)-v(J*k));Z=v(v(J*G)-v(u*C));Q=v(v(v(X*H)+v(Y*E))+v(Z*r));i=k;k=v(v(u*H)-v(J*E));u=v(v(A*E)-v(u*r));w=v(v(J*r)-v(A*H));r=v(v(i*k)+v(v(C*u)+v(G*w)));g=v(F-K);F=v(n-I);n=v(S-I);i=v(L-K);q=v(v(g*F)-v(n*i));j=v(j-z);L=v(j*i);i=v(T-z);g=v(L-v(g*i));i=v(v(n*i)-v(j*F));j=v(v(v(y-z)*q)+v(v(v(B-I)*g)+v(v(D-K)*i)));_=v(j*j)<v(9.99999905104687e-9)?-1:v(v(v(v(R-z)*q)+v(v(v(U-I)*g)+v(v(V-K)*i)))*j)<v(0);$=v(r*r)<v(9.99999905104687e-9)?-1:v(v(v(N*k)+v(v(O*u)+v(P*w)))*r)<v(0);t=v(Q*Q)<v(9.99999905104687e-9)?-1:v(v(v(v(O*X)+v(P*Y))+v(Z*N))*Q)<v(0);l=_|($|(t|W));a:{if((l|0)<=-1){m[f+36|0]=1;break a}if(!l){break a}i=v(3.4028234663852886e+38);b:{if(!t){break b}dd(a,b,c,d,h+8|0);n=s[h+8>>2];g=v(n-s[a>>2]);i=v(g*g);q=s[h+12>>2];g=v(q-s[a+4>>2]);i=v(i+v(g*g));j=s[h+16>>2];g=v(j-s[a+8>>2]);g=v(i+v(g*g));i=v(3.4028234663852886e+38);if(!(g<v(3.4028234663852886e+38))){break b}o[f+12>>2]=o[h+20>>2];s[f+8>>2]=j;s[f+4>>2]=q;s[f>>2]=n;l=p[h+24|0];m[f+16|0]=l&1|p[f+16|0]&240|l&2|l&4;x=o[h+36>>2];t=o[h+32>>2];l=o[h+28>>2];o[f+32>>2]=0;o[f+28>>2]=x;o[f+20>>2]=l;o[f+24>>2]=t;i=g}c:{if(!W){break c}dd(a,b,d,e,h+8|0);n=s[h+8>>2];g=v(n-s[a>>2]);k=v(g*g);q=s[h+12>>2];g=v(q-s[a+4>>2]);k=v(k+v(g*g));j=s[h+16>>2];g=v(j-s[a+8>>2]);g=v(k+v(g*g));if(!(g<i)){break c}o[f+12>>2]=o[h+20>>2];s[f+8>>2]=j;s[f+4>>2]=q;s[f>>2]=n;l=p[h+24|0];t=l<<1;m[f+16|0]=t&8|(t&4|(l&1|p[f+16|0]&240));x=o[h+36>>2];t=o[h+32>>2];l=o[h+28>>2];o[f+24>>2]=0;o[f+28>>2]=t;o[f+32>>2]=x;o[f+20>>2]=l;i=g}d:{if(!$){break d}dd(a,b,e,c,h+8|0);n=s[h+8>>2];g=v(n-s[a>>2]);k=v(g*g);q=s[h+12>>2];g=v(q-s[a+4>>2]);k=v(k+v(g*g));j=s[h+16>>2];g=v(j-s[a+8>>2]);g=v(k+v(g*g));if(!(g<i)){break d}o[f+12>>2]=o[h+20>>2];s[f+8>>2]=j;s[f+4>>2]=q;s[f>>2]=n;b=p[h+24|0];m[f+16|0]=b&1|p[f+16|0]&240|b>>>1&2|b<<2&8;l=o[h+36>>2];b=o[h+28>>2];o[f+32>>2]=o[h+32>>2];o[f+28>>2]=0;o[f+24>>2]=l;o[f+20>>2]=b;i=g}if(!_){x=1;break a}dd(a,c,e,d,h+8|0);x=1;n=s[h+8>>2];g=v(n-s[a>>2]);k=v(g*g);q=s[h+12>>2];g=v(q-s[a+4>>2]);k=v(k+v(g*g));j=s[h+16>>2];g=v(j-s[a+8>>2]);if(!(v(k+v(g*g))<i)){break a}o[f+12>>2]=o[h+20>>2];s[f+8>>2]=j;s[f+4>>2]=q;s[f>>2]=n;a=p[h+24|0];m[f+16|0]=a&4|p[f+16|0]&240|a<<1&2|a<<2&8;b=o[h+36>>2];a=o[h+28>>2];o[f+32>>2]=o[h+32>>2];o[f+28>>2]=b;o[f+24>>2]=a;o[f+20>>2]=0}M=h+48|0;return x}function wl(a,b,c,d){var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=0,G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=0,O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=0,$=0,aa=v(0),ba=v(0),ca=v(0),da=v(0),ea=v(0),fa=v(0);e=M-240|0;M=e;a:{if(o[a+16>>2]){se(o[a+4>>2]);f=o[a+12>>2];F=o[f+4>>2];N=o[a+16>>2];_=f;$=o[N+4>>2];G=v(l[o[o[f>>2]+48>>2]](f));f=o[a+16>>2];a=mL(e+160|0,_,N,F,$,G,v(l[o[o[f>>2]+48>>2]](f)),o[a+4>>2],o[a+8>>2]);o[e+152>>2]=1566444395;f=o[b+12>>2];o[e+32>>2]=o[b+8>>2];o[e+36>>2]=f;f=o[b+4>>2];o[e+24>>2]=o[b>>2];o[e+28>>2]=f;f=o[b+28>>2];o[e+48>>2]=o[b+24>>2];o[e+52>>2]=f;f=o[b+20>>2];o[e+40>>2]=o[b+16>>2];o[e+44>>2]=f;F=o[b+44>>2];f=e- -64|0;o[f>>2]=o[b+40>>2];o[f+4>>2]=F;f=o[b+36>>2];o[e+56>>2]=o[b+32>>2];o[e+60>>2]=f;f=o[b+60>>2];o[e+80>>2]=o[b+56>>2];o[e+84>>2]=f;f=o[b+52>>2];o[e+72>>2]=o[b+48>>2];o[e+76>>2]=f;b=o[c+12>>2];o[e+96>>2]=o[c+8>>2];o[e+100>>2]=b;b=o[c+4>>2];o[e+88>>2]=o[c>>2];o[e+92>>2]=b;b=o[c+20>>2];o[e+104>>2]=o[c+16>>2];o[e+108>>2]=b;b=o[c+28>>2];o[e+112>>2]=o[c+24>>2];o[e+116>>2]=b;b=o[c+44>>2];o[e+128>>2]=o[c+40>>2];o[e+132>>2]=b;b=o[c+36>>2];o[e+120>>2]=o[c+32>>2];o[e+124>>2]=b;b=o[c+52>>2];o[e+136>>2]=o[c+48>>2];o[e+140>>2]=b;b=o[c+60>>2];o[e+144>>2]=o[c+56>>2];o[e+148>>2]=b;fb(a,e+24|0,d,0,0);break a}aa=s[c+52>>2];H=s[c+56>>2];I=s[b+52>>2];J=s[b+56>>2];j=s[b+20>>2];k=s[b+36>>2];i=s[c+20>>2];m=s[c+36>>2];g=s[c+24>>2];n=s[b+24>>2];h=s[c+40>>2];t=s[b+40>>2];K=s[c+48>>2];L=s[b+48>>2];f=o[a+12>>2];u=s[b+32>>2];w=s[b>>2];x=s[b+16>>2];y=s[b+4>>2];q=s[c+32>>2];p=s[c+16>>2];C=s[c>>2];D=s[c+4>>2];E=s[c+8>>2];z=s[b+8>>2];a=o[a+20>>2];r=s[a+52>>2];A=s[a+56>>2];B=s[a+48>>2];o[e+172>>2]=0;O=v(v(v(z*D)+v(n*i))+v(t*m));r=v(-r);P=v(v(v(z*C)+v(n*p))+v(t*q));Q=v(v(v(z*E)+v(n*g))+v(t*h));s[e+168>>2]=v(v(O*r)-v(B*P))-v(A*Q);R=v(v(v(y*D)+v(j*i))+v(k*m));S=v(v(v(y*C)+v(j*p))+v(k*q));T=v(v(v(y*E)+v(j*g))+v(k*h));s[e+164>>2]=v(v(R*r)-v(B*S))-v(A*T);U=v(v(v(w*D)+v(x*i))+v(u*m));V=v(v(v(w*C)+v(x*p))+v(u*q));W=v(v(v(w*E)+v(x*g))+v(u*h));s[e+160>>2]=v(v(U*r)-v(B*V))-v(A*W);l[o[o[f>>2]+64>>2]](e+24|0,f,e+160|0);j=s[a+52>>2];k=s[a+56>>2];ba=s[a+64>>2];n=s[a+48>>2];t=s[e+24>>2];u=s[e+28>>2];w=s[e+32>>2];ca=s[c+52>>2];x=s[c+24>>2];y=s[c+20>>2];da=s[c+56>>2];z=s[c+40>>2];A=s[c+36>>2];ea=s[c+48>>2];B=s[c+8>>2];r=s[c>>2];X=s[c+4>>2];Y=s[c+16>>2];Z=s[c+32>>2];o[e+172>>2]=0;fa=v(v(v(L*C)+v(I*p))+v(J*q));G=p;p=v(-aa);q=v(v(fa+v(v(v(G*p)-v(C*K))-v(q*H)))+v(v(v(V*t)+v(S*u))+v(P*w)));h=v(v(v(v(v(L*E)+v(I*g))+v(J*h))+v(v(v(g*p)-v(E*K))-v(h*H)))+v(v(v(W*t)+v(T*u))+v(Q*w)));g=v(v(v(v(v(L*D)+v(I*i))+v(J*m))+v(v(v(i*p)-v(D*K))-v(m*H)))+v(v(v(U*t)+v(R*u))+v(O*w)));i=v(v(v(k*h)+v(v(n*q)+v(j*g)))-ba);m=v(q-v(n*i));g=v(g-v(j*i));h=v(h-v(k*i));s[e+168>>2]=da+v(v(v(Z*m)+v(A*g))+v(z*h));s[e+164>>2]=ca+v(v(v(m*Y)+v(g*y))+v(h*x));s[e+160>>2]=ea+v(v(B*h)+v(v(r*m)+v(X*g)));o[e+20>>2]=0;s[e+16>>2]=v(v(n*Z)+v(j*A))+v(k*z);s[e+12>>2]=v(v(n*Y)+v(j*y))+v(k*x);s[e+8>>2]=v(v(r*n)+v(X*j))+v(B*k);l[o[o[d>>2]+16>>2]](d,e+8|0,e+160|0,i)}M=e+240|0}function PK(a,b,c,d,e){var f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=0,S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0),$=v(0),aa=v(0),ba=v(0),ca=v(0),da=0,ea=v(0),fa=v(0);h=M-48|0;M=h;da=p[a+16|0];R=da?c:d;u=o[R+12>>2];Z=s[u+56>>2];S=s[u+52>>2];_=s[u+48>>2];d=da?d:c;c=o[d+12>>2];$=s[c+56>>2];aa=s[c+52>>2];ba=s[c+48>>2];d=o[d+4>>2];r=s[u+40>>2];j=s[u+8>>2];k=s[u+24>>2];m=s[u+36>>2];w=s[u+4>>2];z=s[u+20>>2];x=s[u+32>>2];C=s[c+40>>2];D=s[c+32>>2];E=s[c+36>>2];A=s[u>>2];F=s[c+8>>2];G=s[c>>2];H=s[c+4>>2];B=s[u+16>>2];K=s[c+24>>2];L=s[c+16>>2];N=s[c+20>>2];i=s[b+12>>2];q=s[b+8>>2];f=s[b>>2];g=s[b+4>>2];c=o[R+4>>2];O=s[c+56>>2];ca=s[c+52>>2];P=s[c+48>>2];o[h+28>>2]=0;t=v(v(2)/v(v(v(v(f*f)+v(g*g))+v(q*q))+v(i*i)));n=v(q*t);T=v(f*n);I=v(g*t);U=v(i*I);J=v(T+U);V=v(g*n);y=v(f*t);W=v(i*y);t=v(V-W);X=v(f*y);Y=v(g*I);g=v(v(1)-v(X+Y));y=v(v(v(D*J)+v(E*t))+v(C*g));Q=v(v(v(G*J)+v(H*t))+v(F*g));g=v(v(v(L*J)+v(N*t))+v(K*g));t=v(-ca);s[h+24>>2]=v(v(v(v(m*y)+v(v(w*Q)+v(z*g)))*t)-v(P*v(v(x*y)+v(v(A*Q)+v(B*g)))))-v(O*v(v(r*y)+v(v(j*Q)+v(k*g))));g=v(V+W);I=v(f*I);J=v(i*n);f=v(I-J);y=v(q*n);i=v(v(1)-v(X+y));q=v(v(C*g)+v(v(D*f)+v(E*i)));n=v(v(F*g)+v(v(G*f)+v(H*i)));f=v(v(K*g)+v(v(L*f)+v(N*i)));s[h+20>>2]=v(v(v(v(m*q)+v(v(w*n)+v(z*f)))*t)-v(P*v(v(x*q)+v(v(A*n)+v(B*f)))))-v(O*v(v(r*q)+v(v(j*n)+v(k*f))));f=v(T-U);i=v(I+J);g=v(v(1)-v(Y+y));q=v(v(C*f)+v(v(E*i)+v(D*g)));n=v(v(F*f)+v(v(H*i)+v(G*g)));f=v(v(K*f)+v(v(N*i)+v(L*g)));s[h+16>>2]=v(v(v(v(m*q)+v(v(w*n)+v(z*f)))*t)-v(P*v(v(x*q)+v(v(A*n)+v(B*f)))))-v(O*v(v(r*q)+v(v(j*n)+v(k*f))));l[o[o[d>>2]+64>>2]](h+32|0,d,h+16|0);b=o[R+12>>2];t=s[b+48>>2];I=s[b+32>>2];J=s[b+16>>2];y=s[b+8>>2];Q=s[b+4>>2];ca=s[b>>2];T=s[b+56>>2];U=s[b+52>>2];V=s[b+40>>2];W=s[b+36>>2];X=s[b+24>>2];Y=s[b+20>>2];ea=s[c+64>>2];q=s[c+56>>2];O=s[c+48>>2];P=s[c+52>>2];f=s[h+40>>2];i=s[h+32>>2];g=s[h+36>>2];fa=s[o[a+12>>2]+752>>2];o[e+4>>2]=o[a+12>>2];n=v(-S);S=v(v(v(v(v(ba*j)+v(aa*k))+v($*r))+v(v(v(k*n)-v(j*_))-v(r*Z)))+v(v(v(i*v(v(v(G*j)+v(L*k))+v(D*r)))+v(g*v(v(v(H*j)+v(N*k))+v(E*r))))+v(f*v(v(v(F*j)+v(K*k))+v(C*r)))));x=v(v(v(v(v(ba*A)+v(aa*B))+v($*x))+v(v(v(B*n)-v(A*_))-v(x*Z)))+v(v(v(i*v(v(v(G*A)+v(L*B))+v(D*x)))+v(g*v(v(v(H*A)+v(N*B))+v(E*x))))+v(f*v(v(v(F*A)+v(K*B))+v(C*x)))));w=v(v(v(v(v(ba*w)+v(aa*z))+v($*m))+v(v(v(z*n)-v(w*_))-v(m*Z)))+v(v(v(i*v(v(v(G*w)+v(L*z))+v(D*m)))+v(g*v(v(v(H*w)+v(N*z))+v(E*m))))+v(f*v(v(v(F*w)+v(K*z))+v(C*m)))));r=v(v(v(q*S)+v(v(O*x)+v(P*w)))-ea);if(!!(r<fa)){a=o[R+12>>2];z=s[a+24>>2];A=s[a+20>>2];B=s[a+40>>2];C=s[a+36>>2];D=s[a+16>>2];E=s[a+32>>2];j=s[c+56>>2];F=s[a+8>>2];k=s[c+48>>2];G=s[a>>2];m=s[c+52>>2];H=s[a+4>>2];o[h+28>>2]=0;s[h+16>>2]=v(v(G*k)+v(H*m))+v(F*j);s[h+24>>2]=v(v(k*E)+v(m*C))+v(j*B);s[h+20>>2]=v(v(k*D)+v(m*A))+v(j*z);o[h+12>>2]=0;j=v(x-v(O*r));k=v(w-v(P*r));m=v(S-v(q*r));s[h+8>>2]=v(v(v(j*I)+v(k*W))+v(m*V))+T;s[h+4>>2]=v(v(v(j*J)+v(k*Y))+v(m*X))+U;s[h>>2]=v(v(y*m)+v(v(ca*j)+v(Q*k)))+t;l[o[o[e>>2]+16>>2]](e,h+16|0,h,r)}M=h+48|0}function dB(a,b){var c=0,d=0,e=v(0),f=v(0),g=0,h=v(0),i=v(0),j=v(0);c=M-240|0;M=c;a:{if(m[30544]&1){break a}if(!da(30544)){break a}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}d=o[a+176>>2]<<4;h=s[d+30496>>2];f=s[d+30500>>2];e=s[d+30504>>2];o[a+124>>2]=0;i=e;e=s[a+20>>2];e=v(s[a+52>>2]+(e>v(0)?e:v(0)));s[a+120>>2]=v(i*e)+s[a+100>>2];s[a+116>>2]=v(f*e)+s[a+96>>2];s[a+112>>2]=s[a+92>>2]+v(h*e);o[c+132>>2]=1065353216;o[c+136>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;o[c+128>>2]=0;o[c+152>>2]=1065353216;o[c+236>>2]=0;o[c+228>>2]=0;o[c+232>>2]=0;o[c+216>>2]=1065353216;o[c+220>>2]=0;o[c+224>>2]=0;o[c+172>>2]=0;o[c+164>>2]=0;o[c+168>>2]=0;o[c+156>>2]=0;o[c+160>>2]=0;o[c+196>>2]=1065353216;o[c+200>>2]=0;o[c+204>>2]=0;o[c+188>>2]=0;o[c+192>>2]=0;o[c+144>>2]=0;o[c+148>>2]=0;o[c+112>>2]=1065353216;o[c+116>>2]=0;o[c+120>>2]=0;o[c+208>>2]=0;o[c+212>>2]=0;o[c+180>>2]=0;o[c+184>>2]=0;o[c+176>>2]=1065353216;b:{if(m[30544]&1){break b}if(!da(30544)){break b}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}g=o[a+176>>2];d=o[a+12>>2];i=v(l[o[o[d>>2]+48>>2]](d));j=s[a+92>>2];h=s[a+96>>2];f=s[a+100>>2];e=s[a+56>>2];o[c+236>>2]=0;e=v(i+e);d=g<<4;s[c+232>>2]=f+v(e*s[d+30504>>2]);s[c+228>>2]=h+v(e*s[d+30500>>2]);s[c+224>>2]=j+v(s[d+30496>>2]*e);d=o[a+124>>2];o[c+168>>2]=o[a+120>>2];o[c+172>>2]=d;d=o[a+116>>2];o[c+160>>2]=o[a+112>>2];o[c+164>>2]=d;g=o[a+8>>2];c:{if(m[30544]&1){break c}if(!da(30544)){break c}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}d=o[a+176>>2];o[c+28>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;o[c+40>>2]=0;o[c+44>>2]=0;o[c+48>>2]=0;o[c+104>>2]=0;o[c+108>>2]=1060439169;d=d<<4;s[c+100>>2]=-s[d+30504>>2];s[c+96>>2]=-s[d+30500>>2];o[c+84>>2]=0;o[c+12>>2]=1065353216;o[c+20>>2]=0;o[c+24>>2]=0;o[c+88>>2]=g;o[c+8>>2]=20308;s[c+92>>2]=-s[d+30496>>2];g=o[a+8>>2];d=o[g+188>>2];n[c+16>>1]=q[d+4>>1];n[c+18>>1]=q[d+6>>1];d:{if(p[a+170|0]){fd(g,o[a+12>>2],c+176|0,c+112|0,c+8|0,s[b+56>>2]);break d}Kb(b,o[a+12>>2],c+176|0,c+112|0,c+8|0,v(0))}e:{if(!!(s[c+12>>2]<v(1))){f:{if(m[30544]&1){break f}if(!da(30544)){break f}o[7625]=0;o[7626]=0;o[7624]=1065353216;o[7627]=0;o[7628]=0;o[7630]=0;o[7631]=0;o[7629]=1065353216;o[7632]=0;o[7633]=0;o[7634]=1065353216;o[7635]=0;ca(30544)}b=o[a+176>>2]<<4;g:{if(!(v(v(v(s[c+52>>2]*s[b+30496>>2])+v(s[c+56>>2]*s[b+30500>>2]))+v(s[c+60>>2]*s[b+30504>>2]))>v(0))){break g}f=s[c+12>>2];s[a+108>>2]=s[a+52>>2]*f;if(p[a+180|0]){e=v(v(1)-f);s[a+92>>2]=v(e*s[a+92>>2])+v(f*s[a+112>>2]);s[a+96>>2]=v(e*s[a+96>>2])+v(f*s[a+116>>2]);s[a+100>>2]=v(e*s[a+100>>2])+v(f*s[a+120>>2]);break g}b=o[a+116>>2];o[a+92>>2]=o[a+112>>2];o[a+96>>2]=b;b=o[a+124>>2];o[a+100>>2]=o[a+120>>2];o[a+104>>2]=b}o[a+16>>2]=0;o[a+20>>2]=0;break e}o[a+108>>2]=o[a+52>>2];b=o[a+124>>2];o[a+100>>2]=o[a+120>>2];o[a+104>>2]=b;b=o[a+116>>2];o[a+92>>2]=o[a+112>>2];o[a+96>>2]=b}M=c+240|0}function vE(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=v(0),m=v(0),n=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),C=v(0),D=0;e=M-96|0;o[e+24>>2]=0;o[e+28>>2]=0;o[e+16>>2]=0;o[e+20>>2]=0;f=(c|0)<=(b|0);if(!f){z=p[a+60|0];k=b;while(1){a:{if(z){h=o[a+116>>2]+(k<<4)|0;u=s[a+44>>2];m=s[a+12>>2];n=v(v(v(q[h+4>>1])/u)+m);r=s[a+40>>2];A=s[a+8>>2];l=v(v(v(q[h+2>>1])/r)+A);B=s[a+36>>2];C=s[a+4>>2];t=v(v(v(q[h>>1])/B)+C);u=v(v(v(q[h+10>>1])/u)+m);m=v(v(v(q[h+8>>1])/r)+A);r=v(v(v(q[h+6>>1])/B)+C);break a}h=o[a+76>>2]+(k<<6)|0;n=s[h+8>>2];l=s[h+4>>2];t=s[h>>2];u=s[h+24>>2];m=s[h+20>>2];r=s[h+16>>2]}w=v(v(v(u+n)*v(.5))+w);x=v(v(v(m+l)*v(.5))+x);y=v(v(v(r+t)*v(.5))+y);k=k+1|0;if((k|0)!=(c|0)){continue}break}s[e+24>>2]=w;s[e+20>>2]=x;s[e+16>>2]=y}z=c-b|0;l=v(v(1)/v(z|0));s[e+24>>2]=l*w;s[e+20>>2]=l*x;s[e+16>>2]=l*y;h=b;if(!f){d=d<<2;u=s[d+(e+16|0)>>2];D=d+e|0;k=b;h=k;while(1){f=p[a+60|0];b:{if(f){d=o[a+116>>2]+(k<<4)|0;l=s[a+44>>2];t=s[a+12>>2];w=v(v(v(q[d+4>>1])/l)+t);n=s[a+40>>2];m=s[a+8>>2];x=v(v(v(q[d+2>>1])/n)+m);r=s[a+36>>2];A=s[a+4>>2];y=v(v(v(q[d>>1])/r)+A);l=v(v(v(q[d+10>>1])/l)+t);t=v(v(v(q[d+8>>1])/n)+m);n=v(v(v(q[d+6>>1])/r)+A);break b}d=o[a+76>>2]+(k<<6)|0;w=s[d+8>>2];x=s[d+4>>2];y=s[d>>2];l=s[d+24>>2];t=s[d+20>>2];n=s[d+16>>2]}o[e+12>>2]=0;s[e+8>>2]=v(l+w)*v(.5);s[e+4>>2]=v(t+x)*v(.5);s[e>>2]=v(n+y)*v(.5);if(!!(s[D>>2]>u)){c:{if(f){j=o[a+116>>2];f=j+(k<<4)|0;d=f;g=d+8|0;i=o[g+4>>2];o[e+40>>2]=o[g>>2];o[e+44>>2]=i;g=o[d+4>>2];o[e+32>>2]=o[d>>2];o[e+36>>2]=g;f=j;j=h<<4;f=f+j|0;g=o[f+4>>2];o[d>>2]=o[f>>2];o[d+4>>2]=g;g=o[f+12>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=g;d=j+o[a+116>>2]|0;j=o[e+36>>2];o[d>>2]=o[e+32>>2];o[d+4>>2]=j;f=o[e+44>>2];o[d+8>>2]=o[e+40>>2];o[d+12>>2]=f;break c}f=o[a+76>>2];d=f+(k<<6)|0;j=d+56|0;g=o[j+4>>2];o[e+88>>2]=o[j>>2];o[e+92>>2]=g;j=o[d+52>>2];o[e+80>>2]=o[d+48>>2];o[e+84>>2]=j;j=o[d+44>>2];o[e+72>>2]=o[d+40>>2];o[e+76>>2]=j;i=o[d+36>>2];j=e- -64|0;g=j;o[g>>2]=o[d+32>>2];o[g+4>>2]=i;g=o[d+28>>2];o[e+56>>2]=o[d+24>>2];o[e+60>>2]=g;g=o[d+20>>2];o[e+48>>2]=o[d+16>>2];o[e+52>>2]=g;g=o[d+12>>2];o[e+40>>2]=o[d+8>>2];o[e+44>>2]=g;g=o[d+4>>2];o[e+32>>2]=o[d>>2];o[e+36>>2]=g;g=h<<6;f=f+g|0;i=o[f+4>>2];o[d>>2]=o[f>>2];o[d+4>>2]=i;i=o[f+12>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=i;i=o[f+20>>2];o[d+16>>2]=o[f+16>>2];o[d+20>>2]=i;i=o[f+28>>2];o[d+24>>2]=o[f+24>>2];o[d+28>>2]=i;i=o[f+36>>2];o[d+32>>2]=o[f+32>>2];o[d+36>>2]=i;i=o[f+44>>2];o[d+40>>2]=o[f+40>>2];o[d+44>>2]=i;i=o[f+52>>2];o[d+48>>2]=o[f+48>>2];o[d+52>>2]=i;i=o[f+60>>2];o[d+56>>2]=o[f+56>>2];o[d+60>>2]=i;d=o[a+76>>2]+g|0;g=o[e+36>>2];o[d>>2]=o[e+32>>2];o[d+4>>2]=g;f=o[e+44>>2];o[d+8>>2]=o[e+40>>2];o[d+12>>2]=f;f=o[e+52>>2];o[d+16>>2]=o[e+48>>2];o[d+20>>2]=f;f=o[e+60>>2];o[d+24>>2]=o[e+56>>2];o[d+28>>2]=f;f=o[j+4>>2];o[d+32>>2]=o[j>>2];o[d+36>>2]=f;f=o[e+76>>2];o[d+40>>2]=o[e+72>>2];o[d+44>>2]=f;f=o[e+84>>2];o[d+48>>2]=o[e+80>>2];o[d+52>>2]=f;f=o[e+92>>2];o[d+56>>2]=o[e+88>>2];o[d+60>>2]=f}h=h+1|0}k=k+1|0;if((k|0)!=(c|0)){continue}break}}a=(z>>1)+b|0;d=a;a=(z|0)/3|0;return(h|0)<=(a+b|0)?d:(h|0)>=((a^-1)+c|0)?d:h}function ba(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{if(!a){break a}d=a+ -8|0;c=o[a+ -4>>2];a=c&-8;f=d+a|0;b:{if(c&1){break b}if(!(c&3)){break a}c=o[d>>2];d=d-c|0;if(d>>>0<r[7728]){break a}a=a+c|0;if(o[7729]!=(d|0)){if(c>>>0<=255){e=o[d+8>>2];c=c>>>3|0;b=o[d+12>>2];if((b|0)==(e|0)){o[7724]=o[7724]&uL(c);break b}o[e+12>>2]=b;o[b+8>>2]=e;break b}h=o[d+24>>2];c=o[d+12>>2];c:{if((d|0)!=(c|0)){b=o[d+8>>2];o[b+12>>2]=c;o[c+8>>2]=b;break c}d:{e=d+20|0;b=o[e>>2];if(b){break d}e=d+16|0;b=o[e>>2];if(b){break d}c=0;break c}while(1){g=e;c=b;e=c+20|0;b=o[e>>2];if(b){continue}e=c+16|0;b=o[c+16>>2];if(b){continue}break}o[g>>2]=0}if(!h){break b}e=o[d+28>>2];b=(e<<2)+31200|0;e:{if(o[b>>2]==(d|0)){o[b>>2]=c;if(c){break e}o[7725]=o[7725]&uL(e);break b}o[h+(o[h+16>>2]==(d|0)?16:20)>>2]=c;if(!c){break b}}o[c+24>>2]=h;b=o[d+16>>2];if(b){o[c+16>>2]=b;o[b+24>>2]=c}b=o[d+20>>2];if(!b){break b}o[c+20>>2]=b;o[b+24>>2]=c;break b}c=o[f+4>>2];if((c&3)!=3){break b}o[7726]=a;o[f+4>>2]=c&-2;o[d+4>>2]=a|1;o[a+d>>2]=a;return}if(f>>>0<=d>>>0){break a}c=o[f+4>>2];if(!(c&1)){break a}f:{if(!(c&2)){if(o[7730]==(f|0)){o[7730]=d;a=o[7727]+a|0;o[7727]=a;o[d+4>>2]=a|1;if(o[7729]!=(d|0)){break a}o[7726]=0;o[7729]=0;return}if(o[7729]==(f|0)){o[7729]=d;a=o[7726]+a|0;o[7726]=a;o[d+4>>2]=a|1;o[a+d>>2]=a;return}a=(c&-8)+a|0;g:{if(c>>>0<=255){b=o[f+8>>2];c=c>>>3|0;e=o[f+12>>2];if((b|0)==(e|0)){o[7724]=o[7724]&uL(c);break g}o[b+12>>2]=e;o[e+8>>2]=b;break g}h=o[f+24>>2];c=o[f+12>>2];h:{if((f|0)!=(c|0)){b=o[f+8>>2];o[b+12>>2]=c;o[c+8>>2]=b;break h}i:{e=f+20|0;b=o[e>>2];if(b){break i}e=f+16|0;b=o[e>>2];if(b){break i}c=0;break h}while(1){g=e;c=b;e=c+20|0;b=o[e>>2];if(b){continue}e=c+16|0;b=o[c+16>>2];if(b){continue}break}o[g>>2]=0}if(!h){break g}e=o[f+28>>2];b=(e<<2)+31200|0;j:{if(o[b>>2]==(f|0)){o[b>>2]=c;if(c){break j}o[7725]=o[7725]&uL(e);break g}o[h+(o[h+16>>2]==(f|0)?16:20)>>2]=c;if(!c){break g}}o[c+24>>2]=h;b=o[f+16>>2];if(b){o[c+16>>2]=b;o[b+24>>2]=c}b=o[f+20>>2];if(!b){break g}o[c+20>>2]=b;o[b+24>>2]=c}o[d+4>>2]=a|1;o[a+d>>2]=a;if(o[7729]!=(d|0)){break f}o[7726]=a;return}o[f+4>>2]=c&-2;o[d+4>>2]=a|1;o[a+d>>2]=a}if(a>>>0<=255){a=a>>>3|0;c=(a<<3)+30936|0;b=o[7724];a=1<<a;k:{if(!(b&a)){o[7724]=a|b;a=c;break k}a=o[c+8>>2]}o[c+8>>2]=d;o[a+12>>2]=d;o[d+12>>2]=c;o[d+8>>2]=a;return}o[d+16>>2]=0;o[d+20>>2]=0;f=d;e=a>>>8|0;b=0;l:{if(!e){break l}b=31;if(a>>>0>16777215){break l}c=e;e=e+1048320>>>16&8;b=c<<e;h=b+520192>>>16&4;b=b<<h;g=b+245760>>>16&2;b=(b<<g>>>15|0)-(g|(e|h))|0;b=(b<<1|a>>>b+21&1)+28|0}o[f+28>>2]=b;g=(b<<2)+31200|0;m:{n:{e=o[7725];c=1<<b;o:{if(!(e&c)){o[7725]=c|e;o[g>>2]=d;o[d+24>>2]=g;break o}e=a<<((b|0)==31?0:25-(b>>>1|0)|0);c=o[g>>2];while(1){b=c;if((o[c+4>>2]&-8)==(a|0)){break n}c=e>>>29|0;e=e<<1;g=b+(c&4)|0;c=o[g+16>>2];if(c){continue}break}o[g+16>>2]=d;o[d+24>>2]=b}o[d+12>>2]=d;o[d+8>>2]=d;break m}a=o[b+8>>2];o[a+12>>2]=d;o[b+8>>2]=d;o[d+24>>2]=0;o[d+12>>2]=b;o[d+8>>2]=a}a=o[7732]+ -1|0;o[7732]=a;if(a){break a}d=31352;while(1){a=o[d>>2];d=a+8|0;if(a){continue}break}o[7732]=-1}}function RI(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=0,G=0,H=0,I=v(0),J=v(0),K=v(0),L=0,N=0,O=0;d=M-240|0;M=d;o[a+4>>2]=o[a+4>>2]+1;G=o[c+36>>2];L=u(G,80);N=o[a+12>>2];O=o[N+4>>2];E=o[(L+o[O+24>>2]|0)+64>>2];c=o[a+8>>2];H=o[b+36>>2];b=o[o[c+4>>2]+24>>2]+u(H,80)|0;F=o[b+64>>2];c=o[c+12>>2];I=s[c+52>>2];J=s[c+56>>2];e=s[c+24>>2];f=s[c+20>>2];g=s[c+40>>2];h=s[c+36>>2];K=s[c+48>>2];i=s[c+8>>2];j=s[c>>2];k=s[c+4>>2];m=s[c+16>>2];n=s[c+32>>2];p=s[b+32>>2];q=s[b>>2];r=s[b+16>>2];t=s[b+56>>2];w=s[b+48>>2];x=s[b+52>>2];y=s[b+36>>2];z=s[b+4>>2];A=s[b+20>>2];B=s[b+40>>2];C=s[b+8>>2];D=s[b+24>>2];c=0;o[d+236>>2]=0;o[d+220>>2]=0;o[d+204>>2]=0;s[d+216>>2]=v(v(n*C)+v(h*D))+v(g*B);s[d+212>>2]=v(v(n*z)+v(h*A))+v(g*y);s[d+200>>2]=v(v(m*C)+v(f*D))+v(e*B);s[d+196>>2]=v(v(m*z)+v(f*A))+v(e*y);s[d+232>>2]=J+v(v(v(n*w)+v(h*x))+v(g*t));s[d+228>>2]=I+v(v(v(m*w)+v(f*x))+v(e*t));o[d+188>>2]=0;s[d+208>>2]=v(v(n*q)+v(h*r))+v(g*p);s[d+192>>2]=v(v(m*q)+v(f*r))+v(e*p);s[d+184>>2]=v(v(j*C)+v(k*D))+v(i*B);s[d+180>>2]=v(v(j*z)+v(k*A))+v(i*y);s[d+176>>2]=v(v(j*q)+v(k*r))+v(i*p);s[d+224>>2]=K+v(v(v(j*w)+v(k*x))+v(i*t));b=o[N+12>>2];I=s[b+52>>2];J=s[b+56>>2];e=s[b+24>>2];f=s[b+20>>2];g=s[b+40>>2];h=s[b+36>>2];K=s[b+48>>2];i=s[b+8>>2];j=s[b>>2];k=s[b+4>>2];m=s[b+16>>2];n=s[b+32>>2];b=o[O+24>>2]+L|0;p=s[b+32>>2];q=s[b>>2];r=s[b+16>>2];t=s[b+56>>2];w=s[b+48>>2];x=s[b+52>>2];y=s[b+36>>2];z=s[b+4>>2];A=s[b+20>>2];B=s[b+40>>2];C=s[b+8>>2];D=s[b+24>>2];o[d+172>>2]=0;o[d+156>>2]=0;o[d+140>>2]=0;s[d+152>>2]=v(v(n*C)+v(h*D))+v(g*B);s[d+148>>2]=v(v(n*z)+v(h*A))+v(g*y);s[d+136>>2]=v(v(m*C)+v(f*D))+v(e*B);s[d+132>>2]=v(v(m*z)+v(f*A))+v(e*y);s[d+168>>2]=J+v(v(v(n*w)+v(h*x))+v(g*t));s[d+164>>2]=I+v(v(v(m*w)+v(f*x))+v(e*t));o[d+124>>2]=0;s[d+144>>2]=v(v(n*q)+v(h*r))+v(g*p);s[d+128>>2]=v(v(m*q)+v(f*r))+v(e*p);s[d+120>>2]=v(v(j*C)+v(k*D))+v(i*B);s[d+116>>2]=v(v(j*z)+v(k*A))+v(i*y);s[d+112>>2]=v(v(j*q)+v(k*r))+v(i*p);s[d+160>>2]=K+v(v(v(j*w)+v(k*x))+v(i*t));l[o[o[F>>2]+8>>2]](F,d+176|0,d+96|0,d+80|0);l[o[o[E>>2]+8>>2]](E,d+112|0,d- -64|0,d+48|0);b=o[6999];a:{if(b){if(!l[b](F,E)){break a}}c=s[d+80>>2]<s[d+64>>2]|s[d+96>>2]>s[d+48>>2]?c:1;b=0;b=s[d+88>>2]<s[d+72>>2]|s[d+104>>2]>s[d+56>>2]?b:c;if(s[d+84>>2]<s[d+68>>2]|s[d+100>>2]>s[d+52>>2]|b^1){break a}b=o[a+8>>2];c=o[b+8>>2];o[d+44>>2]=H;o[d+40>>2]=-1;o[d+32>>2]=c;o[d+28>>2]=F;o[d+24>>2]=b;o[d+36>>2]=d+176;b=o[a+12>>2];c=o[b+8>>2];o[d+20>>2]=G;o[d+16>>2]=-1;o[d+8>>2]=c;o[d+4>>2]=E;o[d>>2]=b;o[d+12>>2]=d+112;b=_I(o[a+28>>2],H,G);b:{if(b){c=o[b+8>>2];break b}b=o[a+16>>2];c=l[o[o[b>>2]+8>>2]](b,d+24|0,d,o[a+32>>2])|0;b=o[a+28>>2];o[(l[o[o[b>>2]+12>>2]](b,H,G)|0)+8>>2]=c}b=o[a+24>>2];E=o[b+12>>2];F=o[b+8>>2];o[b+12>>2]=d;o[b+8>>2]=d+24;l[o[o[b>>2]+8>>2]](b,-1,H);b=o[a+24>>2];l[o[o[b>>2]+12>>2]](b,-1,G);l[o[o[c>>2]+8>>2]](c,d+24|0,d,o[a+20>>2],o[a+24>>2]);a=o[a+24>>2];o[a+8>>2]=F;o[a+12>>2]=E}M=d+240|0}function Kb(a,b,c,d,e,f){var g=0,h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0);g=M-400|0;M=g;ia(7817);h=o[c+12>>2];o[g+344>>2]=o[c+8>>2];o[g+348>>2]=h;h=o[c+4>>2];o[g+336>>2]=o[c>>2];o[g+340>>2]=h;h=o[c+28>>2];o[g+360>>2]=o[c+24>>2];o[g+364>>2]=h;h=o[c+20>>2];o[g+352>>2]=o[c+16>>2];o[g+356>>2]=h;h=o[c+44>>2];o[g+376>>2]=o[c+40>>2];o[g+380>>2]=h;h=o[c+36>>2];o[g+368>>2]=o[c+32>>2];o[g+372>>2]=h;h=o[c+60>>2];o[g+392>>2]=o[c+56>>2];o[g+396>>2]=h;h=o[c+52>>2];o[g+384>>2]=o[c+48>>2];o[g+388>>2]=h;h=o[d+12>>2];o[g+280>>2]=o[d+8>>2];o[g+284>>2]=h;h=o[d+4>>2];o[g+272>>2]=o[d>>2];o[g+276>>2]=h;h=o[d+28>>2];o[g+296>>2]=o[d+24>>2];o[g+300>>2]=h;h=o[d+20>>2];o[g+288>>2]=o[d+16>>2];o[g+292>>2]=h;h=o[d+44>>2];o[g+312>>2]=o[d+40>>2];o[g+316>>2]=h;h=o[d+36>>2];o[g+304>>2]=o[d+32>>2];o[g+308>>2]=h;h=o[d+60>>2];o[g+328>>2]=o[d+56>>2];o[g+332>>2]=h;h=o[d+52>>2];o[g+320>>2]=o[d+48>>2];o[g+324>>2]=h;tb(g+336|0,g+272|0,g+8|0,g+256|0);o[g+236>>2]=0;i=s[g+256>>2];s[g+232>>2]=i*s[g+16>>2];s[g+228>>2]=i*s[g+12>>2];s[g+224>>2]=i*s[g+8>>2];o[g+216>>2]=0;o[g+220>>2]=0;o[g+208>>2]=0;o[g+212>>2]=0;h=g- -64|0;o[h>>2]=0;o[h+4>>2]=0;o[g+56>>2]=0;o[g+60>>2]=0;ya(g+336|0,g+256|0);o[g+52>>2]=0;o[g+36>>2]=0;i=s[g+256>>2];j=s[g+260>>2];k=s[g+264>>2];p=s[g+268>>2];n=v(v(2)/v(v(v(v(i*i)+v(j*j))+v(k*k))+v(p*p)));r=v(k*n);m=v(j*r);q=v(i*n);t=v(p*q);s[g+44>>2]=m+t;s[g+32>>2]=m-t;m=v(i*q);q=j;j=v(j*n);n=v(q*j);s[g+48>>2]=v(1)-v(m+n);k=v(k*r);s[g+28>>2]=v(1)-v(m+k);o[g+20>>2]=0;m=v(i*r);q=v(p*j);s[g+40>>2]=m-q;i=v(i*j);j=v(p*r);s[g+24>>2]=i+j;s[g+16>>2]=m+q;s[g+12>>2]=i-j;s[g+8>>2]=v(1)-v(n+k);Ok(b,g+8|0,g+208|0,g+224|0,g+256|0,g+240|0);o[g+8>>2]=9368;h=o[c+12>>2];o[g+52>>2]=o[c+8>>2];o[g+56>>2]=h;h=o[c+4>>2];o[g+44>>2]=o[c>>2];o[g+48>>2]=h;h=o[c+28>>2];o[g+68>>2]=o[c+24>>2];o[g+72>>2]=h;h=o[c+20>>2];o[g+60>>2]=o[c+16>>2];o[g+64>>2]=h;h=o[c+44>>2];o[g+84>>2]=o[c+40>>2];o[g+88>>2]=h;h=o[c+36>>2];o[g+76>>2]=o[c+32>>2];o[g+80>>2]=h;h=o[c+60>>2];o[g+100>>2]=o[c+56>>2];o[g+104>>2]=h;h=o[c+52>>2];o[g+92>>2]=o[c+48>>2];o[g+96>>2]=h;c=o[d+12>>2];o[g+116>>2]=o[d+8>>2];o[g+120>>2]=c;c=o[d+4>>2];o[g+108>>2]=o[d>>2];o[g+112>>2]=c;c=o[d+20>>2];o[g+124>>2]=o[d+16>>2];o[g+128>>2]=c;c=o[d+28>>2];o[g+132>>2]=o[d+24>>2];o[g+136>>2]=c;c=o[d+44>>2];o[g+148>>2]=o[d+40>>2];o[g+152>>2]=c;c=o[d+36>>2];o[g+140>>2]=o[d+32>>2];o[g+144>>2]=c;c=o[d+52>>2];o[g+156>>2]=o[d+48>>2];o[g+160>>2]=c;c=o[d+60>>2];o[g+164>>2]=o[d+56>>2];o[g+168>>2]=c;o[g+192>>2]=e;s[g+196>>2]=f;o[g+200>>2]=b;o[g+188>>2]=a;f=v(s[g+156>>2]-s[g+92>>2]);i=v(s[g+160>>2]-s[g+96>>2]);j=v(s[g+164>>2]-s[g+100>>2]);p=v(v(1)/v(C(v(v(v(f*f)+v(i*i))+v(j*j)))));k=v(j*p);r=k==v(0)?v(0xde0b6b000000000):v(v(1)/k);s[g+20>>2]=r;n=v(i*p);m=n==v(0)?v(0xde0b6b000000000):v(v(1)/n);s[g+16>>2]=m;o[g+36>>2]=r<v(0);o[g+32>>2]=m<v(0);q=f;f=v(f*p);s[g+40>>2]=v(j*k)+v(v(q*f)+v(i*n));f=f==v(0)?v(0xde0b6b000000000):v(v(1)/f);s[g+12>>2]=f;o[g+28>>2]=f<v(0);a=o[a+68>>2];l[o[o[a>>2]+24>>2]](a,g+384|0,g+320|0,g+8|0,g+256|0,g+240|0);ga();M=g+400|0}function iK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),n=0,q=v(0),r=0,t=0,x=v(0),A=0,B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=0,T=0;e=M-192|0;M=e;a:{if(s[o[a+4>>2]+752>>2]<d){break a}x=s[c+8>>2];j=v(v(s[b+8>>2]*d)+x);B=s[c+4>>2];k=v(v(s[b+4>>2]*d)+B);D=s[c>>2];q=v(v(s[b>>2]*d)+D);r=o[a+4>>2];n=o[r+740>>2];A=o[o[a+8>>2]+8>>2];t=(n|0)==(A|0);b:{if(!t){f=o[o[a+12>>2]+8>>2];g=v(q-s[f+52>>2]);h=v(k-s[f+56>>2]);i=v(j-s[f+60>>2]);E=v(v(v(g*s[f+12>>2])+v(h*s[f+28>>2]))+v(i*s[f+44>>2]));F=v(v(v(g*s[f+8>>2])+v(h*s[f+24>>2]))+v(i*s[f+40>>2]));g=v(v(v(g*s[f+4>>2])+v(h*s[f+20>>2]))+v(i*s[f+36>>2]));f=A;break b}g=v(q-s[n+52>>2]);h=v(k-s[n+56>>2]);i=v(j-s[n+60>>2]);E=v(v(v(g*s[n+12>>2])+v(h*s[n+28>>2]))+v(i*s[n+44>>2]));F=v(v(v(g*s[n+8>>2])+v(h*s[n+24>>2]))+v(i*s[n+40>>2]));g=v(v(v(g*s[n+4>>2])+v(h*s[n+20>>2]))+v(i*s[n+36>>2]));f=o[o[a+12>>2]+8>>2]}G=s[f+20>>2];H=s[f+36>>2];I=s[f+40>>2];J=s[f+8>>2];K=s[f+24>>2];L=s[f+44>>2];N=s[f+60>>2];h=s[f+12>>2];i=s[f+52>>2];O=s[f+28>>2];P=s[f+56>>2];Q=s[f+4>>2];o[e+36>>2]=0;R=h;h=v(D-i);i=v(B-P);x=v(x-N);s[e+32>>2]=v(v(R*h)+v(O*i))+v(L*x);s[e+28>>2]=v(v(h*J)+v(i*K))+v(x*I);o[e+20>>2]=0;s[e+16>>2]=E;s[e+12>>2]=F;s[e+8>>2]=g;s[e+24>>2]=v(v(h*Q)+v(i*G))+v(x*H);f=o[b+12>>2];o[e+80>>2]=o[b+8>>2];o[e+84>>2]=f;f=o[b>>2];b=o[b+4>>2];o[e+136>>2]=0;o[e+140>>2]=0;o[e+144>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;o[e+156>>2]=0;s[e+60>>2]=k;s[e- -64>>2]=j;o[e+68>>2]=0;o[e+72>>2]=f;o[e+76>>2]=b;o[e+128>>2]=0;o[e+132>>2]=0;m[e+124|0]=0;o[e+120>>2]=0;o[e+100>>2]=0;o[e+92>>2]=0;o[e+96>>2]=0;s[e+88>>2]=d;s[e+56>>2]=q;b=o[c+12>>2];o[e+48>>2]=o[c+8>>2];o[e+52>>2]=b;b=o[c+4>>2];o[e+40>>2]=o[c>>2];o[e+44>>2]=b;f=wm(r,e+8|0);b=o[o[a+8>>2]+8>>2];c=o[o[a+12>>2]+8>>2];s[e+92>>2]=y(v(z(v(s[b+224>>2]*s[c+224>>2]),v(-10))),v(10));s[e+100>>2]=s[b+228>>2]*s[c+228>>2];s[e+96>>2]=y(v(z(v(s[b+232>>2]*s[c+232>>2]),v(-10))),v(10));d=s[e+80>>2];c:{if(!!(v(w(d))>v(.7071067690849304))){k=s[e+76>>2];g=v(v(d*d)+v(k*k));j=v(v(1)/v(C(g)));q=v(g*j);i=s[e+72>>2];g=v(j*v(-d));h=v(i*g);d=v(k*j);j=v(d*v(-i));k=v(0);break c}q=s[e+72>>2];j=s[e+76>>2];k=v(v(q*q)+v(j*j));g=v(v(1)/v(C(k)));h=v(k*g);k=v(g*v(-j));j=v(d*k);g=v(q*g);q=v(g*v(-d));d=v(0)}s[e+184>>2]=h;s[e+180>>2]=j;s[e+168>>2]=d;s[e+164>>2]=g;s[e+176>>2]=q;s[e+160>>2]=k;d:{if(!t){c=a+28|0;r=a+20|0;t=a+24|0;b=a+16|0;break d}c=a+24|0;r=a+16|0;t=a+28|0;b=a+20|0}r=o[r>>2];b=o[b>>2];c=o[c>>2];o[e+116>>2]=o[t>>2];o[e+112>>2]=c;o[e+108>>2]=b;o[e+104>>2]=r;b=o[a+4>>2];e:{if((f|0)>=0){b=b+u(f,184)|0;c=o[b+116>>2];r=o[b+124>>2];t=o[b+128>>2];S=o[b+132>>2];T=o[b+152>>2];ja(b+4|0,e+8|0,184);o[b+152>>2]=T;o[b+132>>2]=S;o[b+124>>2]=r;o[b+128>>2]=t;o[b+116>>2]=c;break e}f=Fg(b,e+8|0)}b=o[6989];if(!b|(p[o[o[a+12>>2]+8>>2]+204|0]&8?0:!(p[o[o[a+8>>2]+8>>2]+204|0]&8))){break a}c=(n|0)!=(A|0);l[b]((o[a+4>>2]+u(f,184)|0)+4|0,o[(c?12:8)+a>>2],o[e+104>>2],o[e+112>>2],o[(c?8:12)+a>>2],o[e+108>>2],o[e+116>>2])|0}M=e+192|0}function gy(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,v=0,x=0,y=0;g=M-560|0;M=g;e=c;c=(c+ -3|0)/24|0;q=(c|0)>0?c:0;k=e+u(q,-24)|0;i=o[5760];if((i|0)>=0){e=i+1|0;c=q;while(1){t[(g+320|0)+(f<<3)>>3]=(c|0)<0?0:+o[(c<<2)+23056>>2];c=c+1|0;f=f+1|0;if((e|0)!=(f|0)){continue}break}}m=k+ -24|0;e=0;f=(i|0)>0?i:0;while(1){c=0;d=0;while(1){d=d+t[(c<<3)+a>>3]*t[(g+320|0)+(e-c<<3)>>3];c=c+1|0;if((c|0)!=1){continue}break}t[(e<<3)+g>>3]=d;c=(e|0)==(f|0);e=e+1|0;if(!c){continue}break}x=47-k|0;r=48-k|0;y=k+ -25|0;e=i;a:{while(1){d=t[(e<<3)+g>>3];c=0;f=e;l=(e|0)<1;if(!l){while(1){j=(g+480|0)+(c<<2)|0;n=d;d=d*5.960464477539063e-8;b:{if(w(d)<2147483648){h=~~d;break b}h=-2147483648}d=+(h|0);n=n+d*-16777216;c:{if(w(n)<2147483648){h=~~n;break c}h=-2147483648}o[j>>2]=h;f=f+ -1|0;d=t[(f<<3)+g>>3]+d;c=c+1|0;if((e|0)!=(c|0)){continue}break}}d=ud(d,m);d=d+A(d*.125)*-8;d:{if(w(d)<2147483648){h=~~d;break d}h=-2147483648}d=d- +(h|0);e:{f:{g:{s=(m|0)<1;h:{if(!s){f=(e<<2)+g|0;j=o[f+476>>2];c=j>>r;p=f;f=j-(c<<r)|0;o[p+476>>2]=f;h=c+h|0;j=f>>x;break h}if(m){break g}j=o[((e<<2)+g|0)+476>>2]>>23}if((j|0)<1){break e}break f}j=2;if(!!(d>=.5)){break f}j=0;break e}c=0;f=0;if(!l){while(1){p=(g+480|0)+(c<<2)|0;v=o[p>>2];l=16777215;i:{j:{if(f){break j}l=16777216;if(v){break j}f=0;break i}o[p>>2]=l-v;f=1}c=c+1|0;if((e|0)!=(c|0)){continue}break}}k:{if(s){break k}l:{switch(y|0){case 0:c=(e<<2)+g|0;o[c+476>>2]=o[c+476>>2]&8388607;break k;case 1:break l;default:break k}}c=(e<<2)+g|0;o[c+476>>2]=o[c+476>>2]&4194303}h=h+1|0;if((j|0)!=2){break e}d=1-d;j=2;if(!f){break e}d=d-ud(1,m)}if(d==0){f=0;m:{c=e;if((c|0)<=(i|0)){break m}while(1){c=c+ -1|0;f=o[(g+480|0)+(c<<2)>>2]|f;if((c|0)>(i|0)){continue}break}if(!f){break m}k=m;while(1){k=k+ -24|0;e=e+ -1|0;if(!o[(g+480|0)+(e<<2)>>2]){continue}break}break a}c=1;while(1){f=c;c=c+1|0;if(!o[(g+480|0)+(i-f<<2)>>2]){continue}break}f=e+f|0;while(1){h=e+1|0;e=e+1|0;t[(g+320|0)+(h<<3)>>3]=o[(q+e<<2)+23056>>2];c=0;d=0;while(1){d=d+t[(c<<3)+a>>3]*t[(g+320|0)+(h-c<<3)>>3];c=c+1|0;if((c|0)!=1){continue}break}t[(e<<3)+g>>3]=d;if((e|0)<(f|0)){continue}break}e=f;continue}break}d=ud(d,0-m|0);n:{if(!!(d>=16777216)){f=(g+480|0)+(e<<2)|0;n=d;d=d*5.960464477539063e-8;o:{if(w(d)<2147483648){c=~~d;break o}c=-2147483648}d=n+ +(c|0)*-16777216;p:{if(w(d)<2147483648){a=~~d;break p}a=-2147483648}o[f>>2]=a;e=e+1|0;break n}if(w(d)<2147483648){c=~~d}else{c=-2147483648}k=m}o[(g+480|0)+(e<<2)>>2]=c}d=ud(1,k);q:{if((e|0)<=-1){break q}c=e;while(1){t[(c<<3)+g>>3]=d*+o[(g+480|0)+(c<<2)>>2];d=d*5.960464477539063e-8;a=(c|0)>0;c=c+ -1|0;if(a){continue}break}l=0;if((e|0)<0){break q}a=(i|0)>0?i:0;f=e;while(1){k=a>>>0<l>>>0?a:l;m=e-f|0;c=0;d=0;while(1){d=d+t[(c<<3)+25824>>3]*t[(c+f<<3)+g>>3];i=(c|0)!=(k|0);c=c+1|0;if(i){continue}break}t[(g+160|0)+(m<<3)>>3]=d;f=f+ -1|0;c=(e|0)!=(l|0);l=l+1|0;if(c){continue}break}}d=0;if((e|0)>=0){while(1){d=d+t[(g+160|0)+(e<<3)>>3];a=(e|0)>0;e=e+ -1|0;if(a){continue}break}}t[b>>3]=j?-d:d;M=g+560|0;return h&7}function Zb(a,b,c,d,e){var f=0,g=0,h=v(0),i=v(0),j=0,k=v(0),n=v(0),q=v(0),r=0,t=0,w=0,x=0;g=M-112|0;M=g;gc(a);m[a+280|0]=1;o[a>>2]=20956;o[a+276>>2]=0;m[a+408|0]=1;o[a+284>>2]=0;o[a+268>>2]=0;o[a+272>>2]=0;o[a+404>>2]=0;m[a+428|0]=1;o[a+396>>2]=0;o[a+400>>2]=0;o[a+424>>2]=0;m[a+448|0]=1;o[a+416>>2]=0;o[a+420>>2]=0;o[a+444>>2]=0;m[a+496|0]=1;o[a+436>>2]=0;o[a+440>>2]=0;o[a+492>>2]=0;o[a+484>>2]=0;o[a+488>>2]=0;m[a+516|0]=1;o[a+512>>2]=0;m[a+704|0]=1;o[a+684>>2]=b;o[a+504>>2]=0;o[a+508>>2]=0;o[a+700>>2]=0;o[a+692>>2]=0;o[a+696>>2]=0;m[a+724|0]=1;o[a+720>>2]=0;o[a+712>>2]=0;o[a+716>>2]=0;m[a+744|0]=1;o[a+740>>2]=0;o[a+732>>2]=0;o[a+736>>2]=0;m[a+764|0]=1;o[a+760>>2]=0;o[a+752>>2]=0;o[a+756>>2]=0;m[a+784|0]=1;o[a+780>>2]=0;o[a+772>>2]=0;o[a+776>>2]=0;m[a+804|0]=1;m[a+824|0]=1;o[a+800>>2]=0;o[a+792>>2]=0;o[a+796>>2]=0;m[a+844|0]=1;o[a+820>>2]=0;o[a+812>>2]=0;o[a+816>>2]=0;m[a+864|0]=1;o[a+840>>2]=0;o[a+832>>2]=0;o[a+836>>2]=0;m[a+884|0]=1;o[a+860>>2]=0;o[a+852>>2]=0;o[a+856>>2]=0;o[a+880>>2]=0;o[a+872>>2]=0;o[a+876>>2]=0;x=ac(a+928|0);ac(a+988|0);ac(a+1048|0);o[a+1120>>2]=0;m[a+1124|0]=1;m[a+1144|0]=1;b=a+1112|0;o[b>>2]=0;o[b+4>>2]=0;o[a+1140>>2]=0;m[a+1248|0]=1;b=a+1132|0;o[b>>2]=0;o[b+4>>2]=0;o[a+1244>>2]=0;b=a+1236|0;o[b>>2]=0;o[b+4>>2]=0;xA(a);r=Wi(a);b=r;o[b+12>>2]=1065353216;o[b+16>>2]=1;o[b+4>>2]=1065353216;o[b+8>>2]=1065353216;b=o[a+192>>2];h=v(l[o[o[b>>2]+48>>2]](b));$(g+8|0,0,100);b=o[a+712>>2];if((b|0)<(c|0)){if(o[a+716>>2]<(c|0)){f=b;if(c){o[7717]=o[7717]+1;t=l[o[6606]](u(c,104),16)|0;f=o[a+712>>2]}if((f|0)>=1){while(1){w=u(j,104);ja(w+t|0,o[a+720>>2]+w|0,104);j=j+1|0;if((j|0)!=(f|0)){continue}break}}f=o[a+720>>2];if(f){if(p[a+724|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[a+720>>2]=0}o[a+720>>2]=t;m[a+724|0]=1;o[a+716>>2]=c}while(1){f=o[a+720>>2]+u(b,104)|0;o[f>>2]=0;ja(f+4|0,g+8|0,100);b=b+1|0;if((c|0)!=(b|0)){continue}break}}o[a+712>>2]=c;if((c|0)>=1){j=0;while(1){f=$(o[a+720>>2]+u(j,104)|0,0,104);k=v(0);n=v(0);q=v(0);i=v(0);b=0;if(d){i=s[d+12>>2];q=s[d+8>>2];k=s[d+4>>2];n=s[d>>2];b=d+16|0}s[f+8>>2]=n;s[f+12>>2]=k;s[f+20>>2]=i;s[f+16>>2]=q;d=o[f+12>>2];o[f+24>>2]=o[f+8>>2];o[f+28>>2]=d;d=o[f+20>>2];o[f+32>>2]=o[f+16>>2];o[f+36>>2]=d;a:{if(!e){i=v(1);e=0;break a}i=s[e>>2];e=e+4|0}s[f+88>>2]=i>v(0)?v(v(1)/i):v(0);o[g+36>>2]=0;s[g+32>>2]=h+q;s[g+28>>2]=h+k;s[g+24>>2]=h+n;o[g+20>>2]=0;s[g+16>>2]=q-h;s[g+12>>2]=k-h;s[g+8>>2]=n-h;o[f+96>>2]=bb(x,g+8|0,f);o[f+4>>2]=r;d=b;j=j+1|0;if((j|0)!=(c|0)){continue}break}}b=a+892|0;c=o[a+928>>2];b:{if(c){d=o[a+192>>2];h=v(l[o[o[d>>2]+48>>2]](d));i=s[c>>2];k=s[c+4>>2];n=s[c+8>>2];o[a+904>>2]=0;s[a+900>>2]=n-h;s[a+896>>2]=k-h;s[a+892>>2]=i-h;i=s[c+20>>2];k=s[c+24>>2];n=s[c+16>>2];o[a+920>>2]=0;s[a+916>>2]=h+k;s[a+912>>2]=h+i;c=a+908|0;s[c>>2]=h+n;d=o[a+188>>2];if(!d){break b}e=o[a+684>>2];f=o[e+32>>2];l[o[o[f>>2]+16>>2]](f,d,b,c,o[e+36>>2]);break b}o[b>>2]=0;o[b+4>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0;o[b+16>>2]=0;o[b+20>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0}M=g+112|0;return a}function uj(a,b,c,d){var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=0,G=v(0),H=v(0),I=v(0);ab(a,6,Jf(),b);o[a>>2]=18896;e=o[c+12>>2];o[a+120>>2]=o[c+8>>2];o[a+124>>2]=e;e=o[c+4>>2];o[a+112>>2]=o[c>>2];o[a+116>>2]=e;e=o[c+28>>2];o[a+136>>2]=o[c+24>>2];o[a+140>>2]=e;e=o[c+20>>2];o[a+128>>2]=o[c+16>>2];o[a+132>>2]=e;e=o[c+44>>2];o[a+152>>2]=o[c+40>>2];o[a+156>>2]=e;e=o[c+36>>2];o[a+144>>2]=o[c+32>>2];o[a+148>>2]=e;e=o[c+56>>2];E=o[c+60>>2];F=o[c+48>>2];c=o[c+52>>2];o[a+784>>2]=0;o[a+776>>2]=0;o[a+780>>2]=0;o[a+768>>2]=0;o[a+772>>2]=0;o[a+756>>2]=1045220557;o[a+760>>2]=1045220557;o[a+764>>2]=1045220557;o[a+740>>2]=0;o[a+744>>2]=0;o[a+748>>2]=0;o[a+752>>2]=0;o[a+720>>2]=0;o[a+724>>2]=0;o[a+712>>2]=0;o[a+716>>2]=0;o[a+704>>2]=0;o[a+708>>2]=0;o[a+696>>2]=0;o[a+700>>2]=0;o[a+688>>2]=0;o[a+692>>2]=0;o[a+680>>2]=0;o[a+684>>2]=0;o[a+168>>2]=e;o[a+172>>2]=E;o[a+160>>2]=F;o[a+164>>2]=c;o[a+728>>2]=1060320051;o[a+732>>2]=1065353216;o[a+736>>2]=1056964608;m[a+790|0]=0;m[a+788|0]=0;m[a+789|0]=0;o[a+792>>2]=0;o[a+796>>2]=0;o[a+800>>2]=0;o[a+808>>2]=0;o[a+812>>2]=0;o[a+816>>2]=0;o[a+876>>2]=0;o[a+880>>2]=1036831949;o[a+884>>2]=1133903872;o[a+868>>2]=1065353216;o[a+872>>2]=-1082130432;o[a+896>>2]=0;o[a+900>>2]=1045220557;o[a+904>>2]=0;o[a+908>>2]=0;o[a+924>>2]=0;o[a+928>>2]=0;o[a+888>>2]=1065353216;o[a+892>>2]=1056964608;o[a+916>>2]=0;o[a+992>>2]=0;m[a+912|0]=0;o[a+940>>2]=0;o[a+944>>2]=1036831949;o[a+948>>2]=1133903872;o[a+968>>2]=0;o[a+972>>2]=0;o[a+960>>2]=0;o[a+964>>2]=1045220557;o[a+932>>2]=1065353216;o[a+936>>2]=-1082130432;o[a+952>>2]=1065353216;o[a+956>>2]=1056964608;o[a+988>>2]=0;o[a+980>>2]=0;m[a+976|0]=0;o[a+1004>>2]=0;o[a+1008>>2]=1036831949;o[a+1012>>2]=1133903872;c=a+1032|0;o[c>>2]=0;o[c+4>>2]=0;c=a+1024|0;o[c>>2]=0;o[c+4>>2]=1045220557;o[a+996>>2]=1065353216;o[a+1e3>>2]=-1082130432;o[a+1016>>2]=1065353216;o[a+1020>>2]=1056964608;c=a+1052|0;o[c>>2]=0;o[c+4>>2]=0;o[a+1044>>2]=0;m[a+1040|0]=0;m[a+1301|0]=1;m[a+1308|0]=0;o[a+1304>>2]=0;m[a+1300|0]=d;G=s[b+52>>2];H=s[b+56>>2];I=s[b+60>>2];q=s[a+168>>2];r=s[a+160>>2];t=s[a+164>>2];f=s[b+8>>2];g=s[b+12>>2];h=s[b+28>>2];i=s[b+20>>2];j=s[b+24>>2];u=s[a+128>>2];w=s[a+144>>2];x=s[a+148>>2];y=s[a+116>>2];z=s[a+132>>2];k=s[b+44>>2];A=s[a+152>>2];l=s[b+36>>2];B=s[a+120>>2];n=s[b+40>>2];C=s[a+136>>2];p=s[b+4>>2];D=s[a+112>>2];o[a+108>>2]=0;o[a+92>>2]=0;o[a+76>>2]=0;o[a+60>>2]=0;s[a+88>>2]=v(v(B*l)+v(C*n))+v(A*k);s[a+84>>2]=v(v(y*l)+v(z*n))+v(x*k);s[a+80>>2]=v(v(D*l)+v(u*n))+v(w*k);s[a+72>>2]=v(v(B*i)+v(C*j))+v(A*h);s[a+68>>2]=v(v(y*i)+v(z*j))+v(x*h);s[a- -64>>2]=v(v(D*i)+v(u*j))+v(w*h);s[a+56>>2]=v(v(p*B)+v(f*C))+v(g*A);s[a+52>>2]=v(v(p*y)+v(f*z))+v(g*x);s[a+48>>2]=v(v(D*p)+v(u*f))+v(w*g);s[a+104>>2]=I+v(v(v(l*r)+v(n*t))+v(k*q));s[a+100>>2]=H+v(v(v(i*r)+v(j*t))+v(h*q));s[a+96>>2]=G+v(v(v(p*r)+v(f*t))+v(g*q));Uc(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function OI(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=M-1136|0;M=b;g=42;e=o[a+44>>2];c=l[o[o[e>>2]+84>>2]](e)|0;if((c|0)>=1){e=0;while(1){d=o[a+44>>2];l[o[o[d>>2]+88>>2]](d,e,b+144|0);cl();d=o[b+156>>2];f=g<<4;h=f+28008|0;o[h>>2]=o[b+152>>2];o[h+4>>2]=d;d=o[b+148>>2];f=f+28e3|0;o[f>>2]=o[b+144>>2];o[f+4>>2]=d;g=g+1|0;e=e+1|0;if((c|0)!=(e|0)){continue}break}}e=0;while(1){c=o[a+44>>2];cl();d=e<<4;l[o[o[c>>2]+64>>2]](b+16|0,c,d+28e3|0);f=o[b+28>>2];c=d+(b+144|0)|0;d=c;o[d+8>>2]=o[b+24>>2];o[d+12>>2]=f;d=o[b+20>>2];o[c>>2]=o[b+16>>2];o[c+4>>2]=d;e=e+1|0;if((g|0)!=(e|0)){continue}break}o[b+132>>2]=4096;o[b+136>>2]=4096;o[b+124>>2]=16;o[b+128>>2]=981668463;o[b+116>>2]=g;o[b+112>>2]=1;o[b+120>>2]=b+144;m[b+108|0]=1;c=0;o[b+104>>2]=0;o[b+96>>2]=0;o[b+100>>2]=0;o[b+84>>2]=0;m[b+88|0]=1;o[b+76>>2]=0;o[b+80>>2]=0;o[b+36>>2]=0;m[b+40|0]=1;m[b+68|0]=1;o[b+28>>2]=0;o[b+32>>2]=0;o[b- -64>>2]=0;o[b+56>>2]=0;o[b+60>>2]=0;o[b+44>>2]=0;o[b+48>>2]=0;o[b+20>>2]=0;m[b+16|0]=1;if((zi(b+72|0,b+112|0,b+16|0)|0)!=1){d=o[b+20>>2];c=d;e=o[a+4>>2];if((e|0)<(d|0)){if(o[a+8>>2]<(d|0)){a:{if(!d){g=0;c=e;break a}o[7717]=o[7717]+1;g=l[o[6606]](d<<4,16)|0;c=o[a+4>>2]}i=c;if((i|0)>=1){c=0;while(1){f=c<<4;h=f+g|0;f=f+o[a+12>>2]|0;j=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=j;j=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=j;c=c+1|0;if((i|0)!=(c|0)){continue}break}}c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+12>>2]=0}o[a+12>>2]=g;m[a+16|0]=1;o[a+8>>2]=d}while(1){f=o[b+4>>2];c=o[a+12>>2]+(e<<4)|0;o[c>>2]=o[b>>2];o[c+4>>2]=f;f=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=f;e=e+1|0;if((d|0)!=(e|0)){continue}break}c=o[b+20>>2]}o[a+4>>2]=d;if((c|0)>=1){e=0;while(1){c=e<<4;d=c+o[a+12>>2]|0;c=c+o[b+36>>2]|0;g=o[c+4>>2];o[d>>2]=o[c>>2];o[d+4>>2]=g;f=o[c+12>>2];o[d+8>>2]=o[c+8>>2];o[d+12>>2]=f;e=e+1|0;if((e|0)<o[b+20>>2]){continue}break}}d=o[b+48>>2];o[a+40>>2]=d;e=d;f=o[a+24>>2];if((d|0)>(f|0)){b:{if(o[a+28>>2]>=(d|0)){g=o[a+32>>2];break b}e=0;c=f;g=0;if(d){o[7717]=o[7717]+1;g=l[o[6606]](d<<2,16)|0;c=o[a+24>>2]}h=o[a+32>>2];c:{if((c|0)>=1){while(1){i=e<<2;o[i+g>>2]=o[h+i>>2];e=e+1|0;if((e|0)!=(c|0)){continue}break c}}if(h){break c}o[a+32>>2]=g;o[a+28>>2]=d;m[a+36|0]=1;break b}if(p[a+36|0]){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}o[a+32>>2]=g;m[a+36|0]=1;o[a+28>>2]=d}$((f<<2)+g|0,0,d-f<<2);e=o[a+40>>2]}o[a+24>>2]=d;c=1;if((e|0)>=1){d=o[a+32>>2];e=0;f=o[b+64>>2];while(1){g=e<<2;o[g+d>>2]=o[f+g>>2];e=e+1|0;if((e|0)<o[a+40>>2]){continue}break}}yi(b+16|0)}a=o[b+64>>2];if(a){if(p[b+68|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[b+64>>2]=0}o[b+64>>2]=0;m[b+68|0]=1;o[b+56>>2]=0;o[b+60>>2]=0;a=o[b+36>>2];if(a){if(p[b+40|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[b+36>>2]=0}a=o[b+104>>2];if(a){if(p[b+108|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[b+104>>2]=0}o[b+104>>2]=0;m[b+108|0]=1;o[b+96>>2]=0;o[b+100>>2]=0;a=o[b+84>>2];if(a){if(p[b+88|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[b+84>>2]=0}M=b+1136|0;return c}function vl(a,b,c,d,f,g){a=a|0;b=b|0;c=c|0;d=d|0;f=f|0;g=g|0;var h=0,j=v(0),k=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=0,x=0,y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=0,H=0,I=0,J=0;h=M-304|0;M=h;j=s[b+52>>2];q=s[c+52>>2];k=s[b+56>>2];r=s[c+56>>2];t=s[b+48>>2];n=s[c+48>>2];o[h+300>>2]=0;k=v(r-k);s[h+296>>2]=k;D=v(q-j);s[h+292>>2]=D;E=v(n-t);s[h+288>>2]=E;tb(b,c,h+112|0,h+48|0);o[h+284>>2]=0;j=s[h+48>>2];q=v(j*s[h+120>>2]);s[h+280>>2]=q;r=v(j*s[h+116>>2]);s[h+276>>2]=r;t=v(j*s[h+112>>2]);s[h+272>>2]=t;j=s[d+52>>2];n=s[f+52>>2];u=s[d+56>>2];y=s[f+56>>2];z=s[d+48>>2];B=s[f+48>>2];o[h+268>>2]=0;y=v(y-u);s[h+264>>2]=y;F=v(n-j);s[h+260>>2]=F;z=v(B-z);s[h+256>>2]=z;tb(d,f,h+112|0,h+48|0);o[h+252>>2]=0;j=s[h+48>>2];n=v(j*s[h+120>>2]);s[h+248>>2]=n;u=v(j*s[h+116>>2]);s[h+244>>2]=u;j=v(j*s[h+112>>2]);s[h+240>>2]=j;c=o[a+12>>2];A=v(l[o[o[c>>2]+16>>2]](c));B=v(0);c=o[a+16>>2];if(c){B=v(l[o[o[c>>2]+16>>2]](c));k=s[h+296>>2];y=s[h+264>>2];D=s[h+292>>2];F=s[h+260>>2];E=s[h+288>>2];z=s[h+256>>2];n=s[h+248>>2];u=s[h+244>>2];q=s[h+280>>2];r=s[h+276>>2];t=s[h+272>>2];j=s[h+240>>2]}n=v(v(A*v(C(v(v(v(t*t)+v(r*r))+v(q*q)))))+v(B*v(C(v(v(v(j*j)+v(u*u))+v(n*n))))));q=v(z-E);r=v(F-D);t=v(y-k);a:{if(v(n+v(C(v(v(v(q*q)+v(r*r))+v(t*t)))))==v(0)){break a}m[h+216|0]=0;o[h+212>>2]=1566444395;o[h+176>>2]=7200;wl(a,b,d,h+176|0);c=o[h+208>>2];o[h+232>>2]=o[h+204>>2];o[h+236>>2]=c;c=o[h+200>>2];o[h+224>>2]=o[h+196>>2];o[h+228>>2]=c;if(!p[h+216|0]){break a}c=o[h+180>>2];G=o[h+184>>2];H=o[h+188>>2];if(v(n+v(v(v(q*s[h+180>>2])+v(r*s[h+184>>2]))+v(t*s[h+188>>2])))<=v(1.1920928955078125e-7)){break a}x=1;j=v(0);b:{k=v(s[h+212>>2]+s[g+172>>2]);A=s[h+192>>2];c:{if(!(k>v(.0010000000474974513))){break c}I=h+20|0;J=h+160|0;f=0;while(1){w=o[g+168>>2];if(w){o[h+120>>2]=1065353216;o[h+124>>2]=0;o[h+112>>2]=1065353216;o[h+116>>2]=1065353216;l[o[o[w>>2]+20>>2]](w,h+224|0,v(.20000000298023224),h+112|0)}u=v(n+v(v(v(q*(e(0,c),i()))+v(r*(e(0,G),i())))+v(t*(e(0,H),i()))));if(u<=v(1.1920928955078125e-7)){x=0;break a}k=v(j+v(k/u));if(k<=j){x=0;break a}if(k>v(1)){x=0;break a}if(k<v(0)){x=0;break a}rb(b,h+288|0,h+272|0,k,h+112|0);rb(d,h+256|0,h+240|0,k,h+48|0);c=o[g+168>>2];if(c){o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=1065353216;o[h+4>>2]=0;l[o[o[c>>2]+20>>2]](c,J,v(.20000000298023224),h)}l[o[o[g>>2]>>2]](g,k);m[h+40|0]=0;o[h+36>>2]=1566444395;o[h>>2]=7200;wl(a,h+112|0,h+48|0,h);if(!p[h+40|0]){break b}u=s[g+172>>2];c=I;w=o[c+12>>2];o[h+232>>2]=o[c+8>>2];o[h+236>>2]=w;w=o[c+4>>2];o[h+224>>2]=o[c>>2];o[h+228>>2]=w;w=f+1|0;if(f>>>0>63){l[o[o[g>>2]+8>>2]](g,-2,w);x=0;break a}c=o[h+4>>2];G=o[h+8>>2];H=o[h+12>>2];f=w;j=k;k=v(s[h+36>>2]+u);if(k>v(.0010000000474974513)){continue}break}A=s[h+16>>2]}k=A;o[g+132>>2]=c;s[g+164>>2]=j;s[g+144>>2]=k;o[g+140>>2]=H;o[g+136>>2]=G;a=o[h+228>>2];o[g+148>>2]=o[h+224>>2];o[g+152>>2]=a;a=o[h+236>>2];o[g+156>>2]=o[h+232>>2];o[g+160>>2]=a;break a}l[o[o[g>>2]+8>>2]](g,-1,f);x=0}M=h+304|0;return x|0}function Yj(a,b){var c=0,d=0,e=v(0),f=v(0),g=0,h=v(0),i=v(0);d=M-16|0;M=d;o[a+312>>2]=0;o[a+316>>2]=0;o[a+236>>2]=2;o[a+544>>2]=1065353216;o[a+548>>2]=1065353216;o[a+348>>2]=1065353216;o[a+352>>2]=1065353216;o[a+412>>2]=0;o[a+416>>2]=0;o[a+320>>2]=0;o[a+324>>2]=0;o[a+328>>2]=0;o[a+332>>2]=0;o[a+336>>2]=0;o[a+340>>2]=0;o[a+552>>2]=1065353216;o[a+556>>2]=0;o[a+360>>2]=0;o[a+364>>2]=0;o[a+356>>2]=1065353216;o[a+368>>2]=0;o[a+372>>2]=0;o[a+376>>2]=0;o[a+380>>2]=0;o[a+384>>2]=0;o[a+388>>2]=0;o[a+392>>2]=0;o[a+420>>2]=0;o[a+424>>2]=0;o[a+428>>2]=0;o[a+432>>2]=0;o[a+436>>2]=0;o[a+440>>2]=0;e=s[b+96>>2];f=s[b+92>>2];s[d+12>>2]=f;s[d+8>>2]=e;o[d+4>>2]=0;o[d>>2]=1065353216;o[a+444>>2]=o[(f<v(0)?d+4|0:f>v(1)?d:d+12|0)>>2];o[d+4>>2]=0;o[d>>2]=1065353216;o[a+448>>2]=o[(e<v(0)?d+4|0:e>v(1)?d:d+8|0)>>2];o[a+472>>2]=o[b+112>>2];o[a+476>>2]=o[b+116>>2];g=o[b+4>>2];o[a+608>>2]=0;o[a+612>>2]=0;o[a+480>>2]=g;m[a+452|0]=p[b+120|0];o[a+456>>2]=o[b+124>>2];o[a+460>>2]=o[b+128>>2];o[a+464>>2]=o[b+132>>2];o[a+468>>2]=o[b+136>>2];a:{if(g){c=a+4|0;l[o[o[g>>2]+8>>2]](g,c);break a}c=o[b+12>>2];o[a+4>>2]=o[b+8>>2];o[a+8>>2]=c;c=o[b+20>>2];o[a+12>>2]=o[b+16>>2];o[a+16>>2]=c;c=o[b+36>>2];o[a+28>>2]=o[b+32>>2];o[a+32>>2]=c;c=o[b+28>>2];o[a+20>>2]=o[b+24>>2];o[a+24>>2]=c;c=o[b+44>>2];o[a+36>>2]=o[b+40>>2];o[a+40>>2]=c;c=o[b+52>>2];o[a+44>>2]=o[b+48>>2];o[a+48>>2]=c;c=b- -64|0;g=o[c+4>>2];o[a+60>>2]=o[c>>2];o[a+64>>2]=g;c=o[b+60>>2];o[a+52>>2]=o[b+56>>2];o[a+56>>2]=c;c=a+4|0}g=o[c+4>>2];o[a+68>>2]=o[c>>2];o[a+72>>2]=g;g=o[c+12>>2];o[a+76>>2]=o[c+8>>2];o[a+80>>2]=g;c=o[a+32>>2];o[a+92>>2]=o[a+28>>2];o[a+96>>2]=c;c=o[a+24>>2];o[a+84>>2]=o[a+20>>2];o[a+88>>2]=c;c=o[a+40>>2];o[a+100>>2]=o[a+36>>2];o[a+104>>2]=c;c=o[a+48>>2];o[a+108>>2]=o[a+44>>2];o[a+112>>2]=c;c=o[a+56>>2];o[a+116>>2]=o[a+52>>2];o[a+120>>2]=c;c=o[a+64>>2];o[a+124>>2]=o[a+60>>2];o[a+128>>2]=c;o[a+132>>2]=0;o[a+136>>2]=0;o[a+140>>2]=0;o[a+144>>2]=0;o[a+148>>2]=0;o[a+152>>2]=0;o[a+156>>2]=0;o[a+160>>2]=0;o[a+224>>2]=o[b+100>>2];o[a+232>>2]=o[b+104>>2];o[a+228>>2]=o[b+108>>2];l[o[o[a>>2]+12>>2]](a,o[b+72>>2]);c=o[7311];o[7311]=c+1;o[a+508>>2]=c;e=v(0);c=o[a+204>>2];f=s[b>>2];b:{if(f==v(0)){o[a+204>>2]=c|1;break b}o[a+204>>2]=c&-2;e=v(v(1)/f)}s[a+344>>2]=e;o[a+376>>2]=0;s[a+364>>2]=f*s[a+380>>2];s[a+372>>2]=f*s[a+388>>2];s[a+368>>2]=f*s[a+384>>2];f=s[b+84>>2];h=s[b+80>>2];i=s[b+76>>2];s[a+560>>2]=e*s[a+348>>2];s[a+564>>2]=e*s[a+352>>2];s[a+568>>2]=e*s[a+356>>2];o[a+572>>2]=0;o[a+408>>2]=0;s[a+396>>2]=i!=v(0)?v(v(1)/i):v(0);s[a+400>>2]=h!=v(0)?v(v(1)/h):v(0);s[a+404>>2]=f!=v(0)?v(v(1)/f):v(0);Uf(a);o[a+512>>2]=0;o[a+516>>2]=0;o[a+504>>2]=0;o[a+520>>2]=0;o[a+524>>2]=0;o[a+528>>2]=0;o[a+532>>2]=0;o[a+536>>2]=0;o[a+540>>2]=0;o[a+572>>2]=0;o[a+576>>2]=0;o[a+580>>2]=0;o[a+584>>2]=0;o[a+588>>2]=0;o[a+592>>2]=0;o[a+596>>2]=0;o[a+600>>2]=0;o[a+604>>2]=0;e=s[a+344>>2];s[a+568>>2]=e*s[a+356>>2];s[a+564>>2]=e*s[a+352>>2];s[a+560>>2]=e*s[a+348>>2];M=d+16|0}function sJ(a,b,c,d){var e=0,f=0,g=0,h=0,i=v(0),j=0,k=0,n=0,q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=0,z=v(0),A=0,B=v(0),C=v(0),D=v(0),E=0;a:{A=o[a+4>>2];if((A|0)<2){break a}g=o[a+12>>2];e=(g+(A<<4)|0)+ -16|0;t=s[e>>2];B=s[c>>2];q=s[e+4>>2];C=s[c+4>>2];r=s[e+8>>2];D=s[c+8>>2];i=v(v(v(v(t*B)+v(q*C))+v(r*D))+d);while(1){e=(E<<4)+g|0;u=s[e>>2];w=s[e+4>>2];x=s[e+8>>2];z=v(v(v(v(u*B)+v(w*C))+v(x*D))+d);y=o[e+12>>2];b:{c:{if(!!(i<v(0))){if(!!(z<v(0))){e=o[b+4>>2];d:{if((e|0)!=o[b+8>>2]){break d}j=e?e<<1:1;if((e|0)>=(j|0)){break d}g=0;k=0;if(j){o[7717]=o[7717]+1;k=l[o[6606]](j<<4,16)|0;e=o[b+4>>2]}if((e|0)>=1){while(1){f=g<<4;h=f+k|0;f=f+o[b+12>>2]|0;n=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=n;n=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=n;g=g+1|0;if((g|0)!=(e|0)){continue}break}}e=o[b+12>>2];if(e){if(p[b+16|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+12>>2]=0}o[b+12>>2]=k;m[b+16|0]=1;o[b+8>>2]=j;e=o[b+4>>2]}e=o[b+12>>2]+(e<<4)|0;o[e+12>>2]=y;s[e+8>>2]=x;s[e+4>>2]=w;s[e>>2]=u;break c}i=v(i/v(i-z));r=v(r+v(v(x-r)*i));q=v(q+v(v(w-q)*i));i=v(t+v(v(u-t)*i));e=o[b+4>>2];e:{if((e|0)!=o[b+8>>2]){break e}k=e?e<<1:1;if((e|0)>=(k|0)){break e}g=0;j=0;if(k){o[7717]=o[7717]+1;j=l[o[6606]](k<<4,16)|0;e=o[b+4>>2]}if((e|0)>=1){while(1){f=g<<4;y=f+j|0;h=y;f=f+o[b+12>>2]|0;n=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=n;h=o[f+12>>2];o[y+8>>2]=o[f+8>>2];o[y+12>>2]=h;g=g+1|0;if((g|0)!=(e|0)){continue}break}}e=o[b+12>>2];if(e){if(p[b+16|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+12>>2]=0}o[b+12>>2]=j;m[b+16|0]=1;o[b+8>>2]=k;e=o[b+4>>2]}e=o[b+12>>2]+(e<<4)|0;o[e+12>>2]=0;s[e+8>>2]=r;s[e+4>>2]=q;s[e>>2]=i;break c}if(!(z<v(0))){break b}i=v(i/v(i-z));r=v(r+v(v(x-r)*i));q=v(q+v(v(w-q)*i));i=v(t+v(v(u-t)*i));e=o[b+4>>2];f:{if((e|0)!=o[b+8>>2]){break f}j=e?e<<1:1;if((e|0)>=(j|0)){break f}g=0;k=0;if(j){o[7717]=o[7717]+1;k=l[o[6606]](j<<4,16)|0;e=o[b+4>>2]}if((e|0)>=1){while(1){f=g<<4;h=f+k|0;f=f+o[b+12>>2]|0;n=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=n;n=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=n;g=g+1|0;if((g|0)!=(e|0)){continue}break}}e=o[b+12>>2];if(e){if(p[b+16|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+12>>2]=0}o[b+12>>2]=k;m[b+16|0]=1;o[b+8>>2]=j;e=o[b+4>>2]}e=o[b+12>>2]+(e<<4)|0;o[e+12>>2]=0;s[e+8>>2]=r;s[e+4>>2]=q;s[e>>2]=i;e=o[b+4>>2]+1|0;o[b+4>>2]=e;g:{if(o[b+8>>2]!=(e|0)){break g}j=e?e<<1:1;if((e|0)>=(j|0)){break g}g=0;k=0;if(j){o[7717]=o[7717]+1;k=l[o[6606]](j<<4,16)|0;e=o[b+4>>2]}if((e|0)>=1){while(1){f=g<<4;h=f+k|0;f=f+o[b+12>>2]|0;n=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=n;n=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=n;g=g+1|0;if((g|0)!=(e|0)){continue}break}}e=o[b+12>>2];if(e){if(p[b+16|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[b+12>>2]=0}o[b+12>>2]=k;m[b+16|0]=1;o[b+8>>2]=j;e=o[b+4>>2]}e=o[b+12>>2]+(e<<4)|0;o[e+12>>2]=y;s[e+8>>2]=x;s[e+4>>2]=w;s[e>>2]=u}o[b+4>>2]=o[b+4>>2]+1}E=E+1|0;if((E|0)==(A|0)){break a}D=s[c+8>>2];C=s[c+4>>2];B=s[c>>2];g=o[a+12>>2];i=z;r=x;q=w;t=u;continue}}}function LB(a,b,c,d,e,f,g,h,i,j,k){var l=v(0),m=v(0),n=0,p=0,q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=0,K=v(0),L=v(0),M=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0);J=o[a+16>>2];n=o[(J+u(e,244)|0)+240>>2];p=o[(u(d,244)+J|0)+240>>2];o[b+148>>2]=e;o[b+144>>2]=d;f=o[f+84>>2];o[b+132>>2]=0;o[b+104>>2]=f;o[b+96>>2]=0;o[b+100>>2]=0;a:{if(p){a=o[c+4>>2];o[b+16>>2]=o[c>>2];o[b+20>>2]=a;a=o[c+12>>2];o[b+24>>2]=o[c+8>>2];o[b+28>>2]=a;q=s[g+8>>2];l=s[g>>2];m=s[g+4>>2];o[b+12>>2]=0;L=s[b+20>>2];M=s[b+16>>2];F=v(v(l*L)-v(m*M));s[b+8>>2]=F;N=s[b+24>>2];G=v(v(q*M)-v(l*N));s[b+4>>2]=G;H=v(v(m*N)-v(q*L));s[b>>2]=H;q=s[p+552>>2];l=s[p+304>>2];m=s[p+296>>2];r=s[p+300>>2];w=s[p+548>>2];t=s[p+288>>2];A=s[p+280>>2];x=s[p+284>>2];y=s[p+272>>2];z=s[p+268>>2];I=s[p+544>>2];D=s[p+264>>2];o[b+76>>2]=0;y=v(I*v(v(v(H*D)+v(G*z))+v(F*y)));s[b+64>>2]=y;w=v(w*v(v(v(H*A)+v(G*x))+v(F*t)));s[b+68>>2]=w;t=v(q*v(v(v(H*m)+v(G*r))+v(F*l)));s[b+72>>2]=t;break a}o[b+64>>2]=0;o[b+68>>2]=0;o[b>>2]=0;o[b+4>>2]=0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;o[b+16>>2]=0;o[b+20>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0}b:{if(n){q=s[c>>2];l=s[c+4>>2];m=s[c+8>>2];o[b+60>>2]=0;I=v(-m);s[b+56>>2]=I;O=v(-l);s[b+52>>2]=O;P=v(-q);s[b+48>>2]=P;r=s[h+8>>2];z=s[h+4>>2];x=s[h>>2];o[b+44>>2]=0;A=v(v(q*z)-v(l*x));s[b+40>>2]=A;x=v(v(m*x)-v(q*r));s[b+36>>2]=x;z=v(v(l*r)-v(m*z));s[b+32>>2]=z;q=s[n+272>>2];r=s[n+268>>2];m=s[n+548>>2];D=s[n+288>>2];C=s[n+280>>2];B=s[n+284>>2];l=s[n+552>>2];E=s[n+304>>2];K=s[n+296>>2];Q=s[n+300>>2];R=s[n+544>>2];S=s[n+264>>2];o[b+92>>2]=0;l=v(l*v(v(v(z*K)+v(x*Q))+v(A*E)));s[b+88>>2]=l;m=v(m*v(v(v(z*C)+v(x*B))+v(A*D)));s[b+84>>2]=m;r=v(R*v(v(v(z*S)+v(x*r))+v(A*q)));s[b+80>>2]=r;break b}o[b+80>>2]=0;o[b+84>>2]=0;o[b+32>>2]=0;o[b+36>>2]=0;o[b+88>>2]=0;o[b+92>>2]=0;o[b+40>>2]=0;o[b+44>>2]=0;o[b+48>>2]=0;o[b+52>>2]=0;o[b+56>>2]=0;o[b+60>>2]=0;A=v(0);x=v(0);z=v(0);I=v(0);l=v(0);m=v(0);r=v(0)}D=v(0);a=b;q=i;if(p){i=s[g+8>>2];C=s[g+4>>2];E=v(v(v(w*i)-v(t*C))*s[c>>2]);B=t;t=s[g>>2];i=v(s[p+344>>2]+v(v(E+v(v(v(B*t)-v(i*y))*s[c+4>>2]))+v(v(v(C*y)-v(w*t))*s[c+8>>2])))}else{i=v(0)}if(n){y=s[h+4>>2];w=s[h+8>>2];B=v(v(v(l*y)-v(m*w))*s[c>>2]);t=l;l=s[h>>2];l=v(s[n+344>>2]+v(v(B+v(v(v(r*w)-v(t*l))*s[c+4>>2]))+v(v(v(m*l)-v(r*y))*s[c+8>>2])))}else{l=v(0)}K=v(q/v(i+l));s[a+108>>2]=K;q=v(0);y=v(0);w=v(0);t=v(0);l=v(0);m=v(0);if(p){a=u(d,244)+J|0;w=v(s[a+176>>2]+s[a+208>>2]);m=s[a+192>>2];t=s[a+200>>2];y=v(s[a+180>>2]+s[a+212>>2]);l=s[a+196>>2];q=v(s[a+184>>2]+s[a+216>>2])}r=v(0);i=v(0);C=v(0);B=v(0);E=v(0);if(n){a=u(e,244)+J|0;D=v(s[a+176>>2]+s[a+208>>2]);r=v(s[a+180>>2]+s[a+212>>2]);E=s[a+192>>2];C=s[a+200>>2];B=s[a+196>>2];i=v(s[a+184>>2]+s[a+216>>2])}o[b+124>>2]=f;s[b+116>>2]=k;o[b+120>>2]=f^-2147483648;s[b+112>>2]=K*v(j-v(v(v(v(v(w*M)+v(y*L))+v(q*N))+v(v(v(m*H)+v(l*G))+v(t*F)))+v(v(v(v(D*P)+v(r*O))+v(i*I))+v(v(v(E*z)+v(B*x))+v(C*A)))))}function ng(a,b,c,d,f,g){a=a|0;b=b|0;c=c|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=v(0),n=v(0),q=0,r=v(0),t=0,u=v(0),w=v(0),x=v(0),y=0,z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0);h=M-288|0;M=h;se(o[a+4>>2]);k=s[b+52>>2];n=s[c+52>>2];r=s[d+52>>2];u=s[f+52>>2];w=s[b+56>>2];x=s[c+56>>2];A=s[d+56>>2];B=s[f+56>>2];C=s[b+48>>2];D=s[c+48>>2];E=s[d+48>>2];F=s[f+48>>2];m[h+264|0]=0;o[h+260>>2]=1566444395;o[h+224>>2]=7200;z=wg(h+144|0,o[a+8>>2],o[a+12>>2],o[a+4>>2],0);o[h+136>>2]=1566444395;a=b;j=o[a+12>>2];o[h+16>>2]=o[a+8>>2];o[h+20>>2]=j;j=o[a+4>>2];o[h+8>>2]=o[a>>2];o[h+12>>2]=j;j=o[a+28>>2];o[h+32>>2]=o[a+24>>2];o[h+36>>2]=j;j=o[a+20>>2];o[h+24>>2]=o[a+16>>2];o[h+28>>2]=j;j=o[a+44>>2];o[h+48>>2]=o[a+40>>2];o[h+52>>2]=j;j=o[a+36>>2];o[h+40>>2]=o[a+32>>2];o[h+44>>2]=j;t=o[a+60>>2];j=h- -64|0;o[j>>2]=o[a+56>>2];o[j+4>>2]=t;j=o[a+52>>2];o[h+56>>2]=o[a+48>>2];o[h+60>>2]=j;a=d;j=o[a+12>>2];o[h+80>>2]=o[a+8>>2];o[h+84>>2]=j;j=o[a+4>>2];o[h+72>>2]=o[a>>2];o[h+76>>2]=j;j=o[a+20>>2];o[h+88>>2]=o[a+16>>2];o[h+92>>2]=j;j=o[a+28>>2];o[h+96>>2]=o[a+24>>2];o[h+100>>2]=j;j=o[a+44>>2];o[h+112>>2]=o[a+40>>2];o[h+116>>2]=j;j=o[a+36>>2];o[h+104>>2]=o[a+32>>2];o[h+108>>2]=j;j=o[a+52>>2];o[h+120>>2]=o[a+48>>2];o[h+124>>2]=j;j=o[a+60>>2];o[h+128>>2]=o[a+56>>2];o[h+132>>2]=j;fb(z,h+8|0,h+224|0,0,0);a=o[h+256>>2];o[h+280>>2]=o[h+252>>2];o[h+284>>2]=a;a=o[h+248>>2];o[h+272>>2]=o[h+244>>2];o[h+276>>2]=a;q=0;a:{if(!p[h+264|0]){break a}w=v(v(x-w)-v(B-A));u=v(v(n-k)-v(u-r));x=v(v(D-C)-v(F-E));t=o[h+232>>2];j=o[h+236>>2];y=o[h+228>>2];r=s[h+260>>2];b:{c:{if(!(r>v(.0010000000474974513))){k=v(0);n=s[h+240>>2];break c}a=0;n=v(0);while(1){q=0;if((a|0)==32){break a}k=v(n-v(r/v(v(w*(e(0,j),i()))+v(v(u*(e(0,t),i()))+v(x*(e(0,y),i()))))));q=0;if(k<=n){break a}q=0;if(k>v(1)){break a}q=0;if(k<v(0)){break a}l[o[o[g>>2]>>2]](g,k);n=v(v(1)-k);s[h+56>>2]=v(n*s[b+48>>2])+v(k*s[c+48>>2]);s[h+60>>2]=v(n*s[b+52>>2])+v(k*s[c+52>>2]);s[h+64>>2]=v(n*s[b+56>>2])+v(k*s[c+56>>2]);s[h+120>>2]=v(n*s[d+48>>2])+v(k*s[f+48>>2]);s[h+124>>2]=v(n*s[d+52>>2])+v(k*s[f+52>>2]);s[h+128>>2]=v(n*s[d+56>>2])+v(k*s[f+56>>2]);fb(z,h+8|0,h+224|0,0,0);q=0;if(!p[h+264|0]){break a}r=s[h+260>>2];if(!!(r<v(0))){s[g+164>>2]=k;a=o[h+228>>2];b=o[h+232>>2];c=o[h+240>>2];o[g+140>>2]=o[h+236>>2];o[g+144>>2]=c;o[g+132>>2]=a;o[g+136>>2]=b;a=o[h+256>>2];o[g+156>>2]=o[h+252>>2];o[g+160>>2]=a;a=o[h+248>>2];o[g+148>>2]=o[h+244>>2];o[g+152>>2]=a;break b}a=a+1|0;j=o[h+256>>2];o[h+280>>2]=o[h+252>>2];o[h+284>>2]=j;j=o[h+248>>2];o[h+272>>2]=o[h+244>>2];o[h+276>>2]=j;y=o[h+228>>2];t=o[h+232>>2];j=o[h+236>>2];n=k;if(r>v(.0010000000474974513)){continue}break}n=s[h+240>>2]}q=0;if(v(v(w*(e(0,j),i()))+v(v(u*(e(0,t),i()))+v(x*(e(0,y),i()))))>=v(-s[g+172>>2])){break a}o[g+132>>2]=y;s[g+164>>2]=k;s[g+144>>2]=n;o[g+140>>2]=j;o[g+136>>2]=t;a=o[h+276>>2];o[g+148>>2]=o[h+272>>2];o[g+152>>2]=a;a=o[h+284>>2];o[g+156>>2]=o[h+280>>2];o[g+160>>2]=a}q=1}j=q;M=h+288|0;return j|0}function qz(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;e=M-400|0;M=e;c=o[b+36>>2];b=e+344|0;o[b+4>>2]=35;o[b+8>>2]=0;o[b>>2]=13316;o[b+44>>2]=1025758986;o[b+20>>2]=1065353216;o[b+24>>2]=0;o[b+12>>2]=1065353216;o[b+16>>2]=1065353216;o[b>>2]=13444;o[e+396>>2]=c;o[e+344>>2]=21856;o[e+388>>2]=0;b=o[a+28>>2];d=o[b+4>>2];a:{if(p[c+376|0]?p[o[b+8>>2]+204|0]&3:0){break a}b:{if(m[26880]&1){break b}if(!da(26880)){break b}c:{if(m[26932]&1){break c}if(!da(26932)){break c}o[6722]=0;o[6723]=0;o[6721]=1065353216;o[6724]=0;o[6725]=0;o[6727]=0;o[6728]=0;o[6726]=1065353216;o[6729]=0;o[6730]=0;o[6731]=1065353216;o[6732]=0;ca(26932)}o[6716]=0;o[6717]=0;o[6718]=0;o[6719]=0;b=o[6724];o[6706]=o[6723];o[6707]=b;b=o[6722];o[6704]=o[6721];o[6705]=b;b=o[6726];o[6708]=o[6725];o[6709]=b;b=o[6728];o[6710]=o[6727];o[6711]=b;b=o[6730];o[6712]=o[6729];o[6713]=b;b=o[6732];o[6714]=o[6731];o[6715]=b;ca(26880)}b=o[o[a+28>>2]+12>>2];o[e+80>>2]=0;o[e+84>>2]=0;o[e+72>>2]=1065353216;o[e+76>>2]=0;if(!Ag(e+344|0,d,b,e+72|0,e+288|0)){break a}b=e;o[b+92>>2]=0;o[b+96>>2]=0;o[b+84>>2]=0;o[b+88>>2]=0;o[b+76>>2]=0;o[b+80>>2]=0;m[b+224|0]=0;o[b+72>>2]=21376;o[b+60>>2]=0;o[b+64>>2]=0;o[b+56>>2]=c;c=o[o[a+28>>2]+8>>2];o[b+48>>2]=c;o[b+40>>2]=0;d=o[c+236>>2];o[b+32>>2]=0;o[b+16>>2]=c;o[b+44>>2]=c&d<<30>>31;c=o[b+60>>2];o[b+24>>2]=o[b+56>>2];o[b+28>>2]=c;c=o[b+44>>2];o[b+8>>2]=o[b+40>>2];o[b+12>>2]=c;if(!Fi(a,b+288|0,b+24|0,b+8|0,b+72|0)){break a}o[7717]=o[7717]+1;b=l[o[6606]](216,16)|0;c=$(b+4|0,0,212);o[b>>2]=21376;ja(c,e+72|4,100);c=e;d=o[c+188>>2];o[b+112>>2]=o[c+184>>2];o[b+116>>2]=d;d=o[c+180>>2];o[b+104>>2]=o[c+176>>2];o[b+108>>2]=d;d=o[c+204>>2];o[b+128>>2]=o[c+200>>2];o[b+132>>2]=d;d=o[c+196>>2];o[b+120>>2]=o[c+192>>2];o[b+124>>2]=d;d=o[c+212>>2];o[b+136>>2]=o[c+208>>2];o[b+140>>2]=d;d=o[c+220>>2];o[b+144>>2]=o[c+216>>2];o[b+148>>2]=d;m[b+152|0]=p[c+224|0];o[b+212>>2]=o[c+284>>2];d=o[c+280>>2];o[b+204>>2]=o[c+276>>2];o[b+208>>2]=d;d=o[c+272>>2];o[b+196>>2]=o[c+268>>2];o[b+200>>2]=d;d=o[c+264>>2];o[b+188>>2]=o[c+260>>2];o[b+192>>2]=d;d=o[c+256>>2];o[b+180>>2]=o[c+252>>2];o[b+184>>2]=d;d=o[c+248>>2];o[b+172>>2]=o[c+244>>2];o[b+176>>2]=d;d=o[c+240>>2];o[b+164>>2]=o[c+236>>2];o[b+168>>2]=d;d=o[c+232>>2];o[b+156>>2]=o[c+228>>2];o[b+160>>2]=d;c=o[a+24>>2];d=o[c+852>>2];d:{if((d|0)!=o[c+856>>2]){break d}g=d?d<<1:1;if((d|0)>=(g|0)){break d}if(g){o[7717]=o[7717]+1;h=l[o[6606]](g<<2,16)|0;d=o[c+852>>2]}if((d|0)>=1){while(1){i=f<<2;o[i+h>>2]=o[o[c+860>>2]+i>>2];f=f+1|0;if((f|0)!=(d|0)){continue}break}}f=o[c+860>>2];if(f){if(p[c+864|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}d=o[c+852>>2]}o[c+860>>2]=0}o[c+860>>2]=h;o[c+856>>2]=g;m[c+864|0]=1}o[o[c+860>>2]+(d<<2)>>2]=b;o[c+852>>2]=d+1;d=o[a+24>>2];c=b;e:{if(p[o[o[a+28>>2]+8>>2]+204|0]&3){s[b+64>>2]=s[d+344>>2]*s[b+64>>2];a=d+356|0;break e}s[b+64>>2]=s[d+340>>2]*s[b+64>>2];a=d+352|0}s[c+68>>2]=s[a>>2]*s[b+68>>2]}M=e+400|0}function Hy(a,b){var c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=0,H=v(0),I=v(0),J=v(0);c=M+ -64|0;M=c;a:{if(!p[a+473|0]){break a}j=o[a+532>>2];o[c+24>>2]=o[a+528>>2];o[c+28>>2]=j;j=o[a+524>>2];o[c+16>>2]=o[a+520>>2];o[c+20>>2]=j;e=s[a+576>>2];f=s[a+568>>2];g=s[a+572>>2];d=s[a+544>>2];h=s[a+536>>2];k=s[a+540>>2];m=s[a+624>>2];n=s[a+592>>2];q=s[a+608>>2];i=s[a+620>>2];t=s[a+588>>2];u=s[a+604>>2];y=s[a+616>>2];r=s[a+560>>2];z=s[a+584>>2];w=s[a+552>>2];A=s[a+600>>2];x=s[a+556>>2];o[c+60>>2]=0;B=v(v(v(z*h)+v(A*k))+v(y*d));D=v(v(v(h*t)+v(k*u))+v(d*i));H=v(D*v(0));k=v(v(v(h*n)+v(k*q))+v(d*m));I=v(k*v(0));d=v(v(B+H)+I);E=v(v(v(n*w)+v(q*x))+v(m*r));J=v(E*v(0));F=v(v(v(z*w)+v(A*x))+v(y*r));r=v(v(v(t*w)+v(u*x))+v(i*r));w=v(r*v(0));h=v(J+v(F+w));m=v(v(v(n*f)+v(q*g))+v(m*e));x=v(m*v(0));n=v(v(v(z*f)+v(A*g))+v(y*e));q=v(v(v(t*f)+v(u*g))+v(i*e));i=v(q*v(0));f=v(x+v(n+i));e=v(v(1)/v(C(v(v(v(d*d)+v(h*h))+v(f*f)))));s[c+56>>2]=s[c+24>>2]+v(v(f*e)*v(10));s[c+52>>2]=s[c+20>>2]+v(v(h*e)*v(10));s[c+48>>2]=s[c+16>>2]+v(v(d*e)*v(10));o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=1065353216;o[c+36>>2]=0;l[o[o[b>>2]+8>>2]](b,c+16|0,c+48|0,c+32|0);o[c+60>>2]=0;h=v(B*v(0));f=v(v(h+D)+I);t=v(F*v(0));g=v(J+v(r+t));u=v(n*v(0));d=v(x+v(q+u));e=v(v(1)/v(C(v(v(v(f*f)+v(g*g))+v(d*d)))));s[c+56>>2]=v(v(d*e)*v(10))+s[c+24>>2];s[c+52>>2]=v(v(g*e)*v(10))+s[c+20>>2];s[c+48>>2]=v(v(f*e)*v(10))+s[c+16>>2];o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=1065353216;l[o[o[b>>2]+8>>2]](b,c+16|0,c+48|0,c+32|0);o[c+60>>2]=0;f=v(v(h+H)+k);g=v(E+v(t+w));d=v(m+v(u+i));e=v(v(1)/v(C(v(v(v(f*f)+v(g*g))+v(d*d)))));s[c+56>>2]=v(v(d*e)*v(10))+s[c+24>>2];s[c+52>>2]=v(v(g*e)*v(10))+s[c+20>>2];s[c+48>>2]=v(v(f*e)*v(10))+s[c+16>>2];o[c+40>>2]=1065353216;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;l[o[o[b>>2]+8>>2]](b,c+16|0,c+48|0,c+32|0);if(o[a+484>>2]<1){break a}while(1){j=o[a+492>>2]+(G<<4)|0;g=s[j+8>>2];d=s[j>>2];h=s[j+4>>2];i=s[c+16>>2];f=s[c+20>>2];e=s[c+24>>2];o[c+8>>2]=1065353216;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=0;o[c+60>>2]=0;e=v(e+v(v(v(n*d)+v(q*h))+v(m*g)));s[c+56>>2]=e;f=v(f+v(v(v(F*d)+v(r*h))+v(E*g)));s[c+52>>2]=f;g=v(i+v(v(v(B*d)+v(D*h))+v(k*g)));s[c+48>>2]=g+v(-.10000000149011612);o[c+44>>2]=0;d=v(e+v(0));s[c+40>>2]=d;h=v(f+v(0));s[c+36>>2]=h;s[c+32>>2]=g+v(.10000000149011612);l[o[o[b>>2]+8>>2]](b,c+48|0,c+32|0,c);o[c+60>>2]=0;s[c+56>>2]=e;s[c+52>>2]=f+v(-.10000000149011612);s[c+48>>2]=g;o[c+44>>2]=0;s[c+40>>2]=d;s[c+36>>2]=f+v(.10000000149011612);d=v(g+v(0));s[c+32>>2]=d;l[o[o[b>>2]+8>>2]](b,c+48|0,c+32|0,c);o[c+60>>2]=0;s[c+56>>2]=e+v(-.10000000149011612);s[c+52>>2]=f;s[c+48>>2]=g;o[c+44>>2]=0;s[c+40>>2]=e+v(.10000000149011612);s[c+36>>2]=h;s[c+32>>2]=d;l[o[o[b>>2]+8>>2]](b,c+48|0,c+32|0,c);G=G+1|0;if((G|0)<o[a+484>>2]){continue}break}}M=c- -64|0}function re(){a:{if(m[27952]&1){break a}if(!da(27952)){break a}o[6906]=1062847606;o[6907]=0;o[6904]=1042701022;o[6905]=1056964440;o[6902]=1062847606;o[6903]=0;o[6900]=-1093024784;o[6901]=1050556081;o[6898]=1062847606;o[6899]=0;o[6896]=-1093024784;o[6897]=-1096927567;o[6894]=1062847606;o[6895]=0;o[6892]=1042701022;o[6893]=-1090519208;o[6890]=1062847572;o[6891]=0;o[6888]=1057396286;o[6889]=0;o[6886]=1057396386;o[6887]=0;o[6884]=1060121912;o[6885]=1056964507;o[6882]=1057396420;o[6883]=0;o[6880]=-1098475836;o[6881]=1062148969;o[6878]=1057396386;o[6879]=0;o[6876]=-1084636143;o[6877]=0;o[6874]=1057396420;o[6875]=0;o[6872]=-1098475836;o[6873]=-1085334679;o[6870]=1057396386;o[6871]=0;o[6868]=1060121912;o[6869]=-1090519141;o[6866]=-2147483648;o[6867]=0;o[6864]=1058437413;o[6865]=1062149053;o[6862]=-2147483648;o[6863]=0;o[6860]=-2147483648;o[6861]=1065353216;o[6858]=-2147483648;o[6859]=0;o[6856]=-1089046235;o[6857]=1062149053;o[6854]=-2147483648;o[6855]=0;o[6852]=-1082951543;o[6853]=1050556148;o[6850]=-2147483648;o[6851]=0;o[6848]=-1082951543;o[6849]=-1096927500;o[6846]=0;o[6847]=0;o[6844]=-1089046235;o[6845]=-1085334595;o[6842]=0;o[6843]=0;o[6840]=0;o[6841]=-1082130432;o[6838]=0;o[6839]=0;o[6836]=1058437413;o[6837]=-1085334595;o[6834]=0;o[6835]=0;o[6832]=1064532105;o[6833]=-1096927500;o[6830]=0;o[6831]=0;o[6828]=1064532105;o[6829]=1050556148;o[6826]=-1090087228;o[6827]=0;o[6824]=1049007812;o[6825]=1062148969;o[6822]=-1090087262;o[6823]=0;o[6820]=-1087361736;o[6821]=1056964507;o[6818]=-1084636042;o[6819]=0;o[6816]=-1104782626;o[6817]=1056964440;o[6814]=-1090087262;o[6815]=0;o[6812]=-1087361736;o[6813]=-1090519141;o[6810]=-1084636076;o[6811]=0;o[6808]=-1090087362;o[6809]=-2147483648;o[6806]=-1090087262;o[6807]=0;o[6804]=1062847505;o[6805]=-2147483648;o[6802]=-1084636042;o[6803]=0;o[6800]=1054458864;o[6801]=1050556081;o[6798]=-1090087228;o[6799]=0;o[6796]=1049007812;o[6797]=-1085334679;o[6794]=-1084636042;o[6795]=0;o[6792]=-1104782626;o[6793]=-1090519208;o[6790]=-1084636042;o[6791]=0;o[6788]=1054458864;o[6789]=-1096927567;o[6786]=1065353216;o[6787]=0;o[6784]=-2147483648;o[6785]=0;o[6782]=1055193471;o[6783]=0;o[6780]=1063581978;o[6781]=0;o[6778]=1055193572;o[6779]=0;o[6776]=1049461434;o[6777]=1062847522;o[6774]=1055193572;o[6775]=0;o[6772]=-1086767520;o[6773]=1057396202;o[6770]=1055193572;o[6771]=0;o[6768]=-1086767520;o[6769]=-1090087446;o[6766]=1055193605;o[6767]=0;o[6764]=1049461434;o[6765]=-1084636126;o[6762]=-1092290076;o[6763]=0;o[6760]=1060716128;o[6761]=1057396202;o[6758]=-1092290043;o[6759]=0;o[6756]=-1098022214;o[6757]=1062847522;o[6754]=-1092290177;o[6755]=0;o[6752]=-1083901670;o[6753]=-2147483648;o[6750]=-1092290076;o[6751]=0;o[6748]=-1098022214;o[6749]=-1084636126;o[6746]=-1092290076;o[6747]=0;o[6744]=1060716128;o[6745]=-1090087446;o[6742]=-1082130432;o[6743]=0;o[6740]=0;o[6741]=-2147483648;ca(27952)}}function cl(){a:{if(m[28992]&1){break a}if(!da(28992)){break a}o[7166]=1062847606;o[7167]=0;o[7164]=1042701022;o[7165]=1056964440;o[7162]=1062847606;o[7163]=0;o[7160]=-1093024784;o[7161]=1050556081;o[7158]=1062847606;o[7159]=0;o[7156]=-1093024784;o[7157]=-1096927567;o[7154]=1062847606;o[7155]=0;o[7152]=1042701022;o[7153]=-1090519208;o[7150]=1062847572;o[7151]=0;o[7148]=1057396286;o[7149]=0;o[7146]=1057396386;o[7147]=0;o[7144]=1060121912;o[7145]=1056964507;o[7142]=1057396420;o[7143]=0;o[7140]=-1098475836;o[7141]=1062148969;o[7138]=1057396386;o[7139]=0;o[7136]=-1084636143;o[7137]=0;o[7134]=1057396420;o[7135]=0;o[7132]=-1098475836;o[7133]=-1085334679;o[7130]=1057396386;o[7131]=0;o[7128]=1060121912;o[7129]=-1090519141;o[7126]=-2147483648;o[7127]=0;o[7124]=1058437413;o[7125]=1062149053;o[7122]=-2147483648;o[7123]=0;o[7120]=-2147483648;o[7121]=1065353216;o[7118]=-2147483648;o[7119]=0;o[7116]=-1089046235;o[7117]=1062149053;o[7114]=-2147483648;o[7115]=0;o[7112]=-1082951543;o[7113]=1050556148;o[7110]=-2147483648;o[7111]=0;o[7108]=-1082951543;o[7109]=-1096927500;o[7106]=0;o[7107]=0;o[7104]=-1089046235;o[7105]=-1085334595;o[7102]=0;o[7103]=0;o[7100]=0;o[7101]=-1082130432;o[7098]=0;o[7099]=0;o[7096]=1058437413;o[7097]=-1085334595;o[7094]=0;o[7095]=0;o[7092]=1064532105;o[7093]=-1096927500;o[7090]=0;o[7091]=0;o[7088]=1064532105;o[7089]=1050556148;o[7086]=-1090087228;o[7087]=0;o[7084]=1049007812;o[7085]=1062148969;o[7082]=-1090087262;o[7083]=0;o[7080]=-1087361736;o[7081]=1056964507;o[7078]=-1084636042;o[7079]=0;o[7076]=-1104782626;o[7077]=1056964440;o[7074]=-1090087262;o[7075]=0;o[7072]=-1087361736;o[7073]=-1090519141;o[7070]=-1084636076;o[7071]=0;o[7068]=-1090087362;o[7069]=-2147483648;o[7066]=-1090087262;o[7067]=0;o[7064]=1062847505;o[7065]=-2147483648;o[7062]=-1084636042;o[7063]=0;o[7060]=1054458864;o[7061]=1050556081;o[7058]=-1090087228;o[7059]=0;o[7056]=1049007812;o[7057]=-1085334679;o[7054]=-1084636042;o[7055]=0;o[7052]=-1104782626;o[7053]=-1090519208;o[7050]=-1084636042;o[7051]=0;o[7048]=1054458864;o[7049]=-1096927567;o[7046]=1065353216;o[7047]=0;o[7044]=-2147483648;o[7045]=0;o[7042]=1055193471;o[7043]=0;o[7040]=1063581978;o[7041]=0;o[7038]=1055193572;o[7039]=0;o[7036]=1049461434;o[7037]=1062847522;o[7034]=1055193572;o[7035]=0;o[7032]=-1086767520;o[7033]=1057396202;o[7030]=1055193572;o[7031]=0;o[7028]=-1086767520;o[7029]=-1090087446;o[7026]=1055193605;o[7027]=0;o[7024]=1049461434;o[7025]=-1084636126;o[7022]=-1092290076;o[7023]=0;o[7020]=1060716128;o[7021]=1057396202;o[7018]=-1092290043;o[7019]=0;o[7016]=-1098022214;o[7017]=1062847522;o[7014]=-1092290177;o[7015]=0;o[7012]=-1083901670;o[7013]=-2147483648;o[7010]=-1092290076;o[7011]=0;o[7008]=-1098022214;o[7009]=-1084636126;o[7006]=-1092290076;o[7007]=0;o[7004]=1060716128;o[7005]=-1090087446;o[7002]=-1082130432;o[7003]=0;o[7e3]=0;o[7001]=-2147483648;ca(28992)}}function Lz(a,b,c,d,e){var f=v(0),g=0,h=v(0),i=v(0),j=0,k=0,l=0,m=0,n=v(0),p=v(0),q=v(0),r=v(0),t=0,u=v(0),x=0,y=v(0),z=0,A=0,B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=0,I=0,J=v(0),K=v(0),L=v(0),M=v(0),N=v(0),O=v(0),P=v(0);n=v(v(1)/s[a+20>>2]);h=v(v(s[b>>2]*n)/v(3));g=h<v(0);f=h;i=f;h=v(v(1)-f);a:{if(v(w(h))<v(2147483648)){k=~~h;break a}k=-2147483648}g=g?k:0;q=v(i+v(g|0));b:{if(v(w(q))<v(2147483648)){l=~~q;break b}l=-2147483648}z=l-g|0;j=(z&65535)+16|0;i=v(v(n*s[b+4>>2])/v(3));g=i<v(0);h=v(v(n*s[b+8>>2])/v(3));t=h<v(0);k=j^z>>>5&134215680^j<<16;j=k;f=i;u=f;i=v(v(1)-f);c:{if(v(w(i))<v(2147483648)){b=~~i;break c}b=-2147483648}b=g?b:0;i=v(u+v(b|0));d:{if(v(w(i))<v(2147483648)){g=~~i;break d}g=-2147483648}A=g-b|0;b=j+(A&65535)+(k>>>11)|0;H=o[a+12>>2];x=H;b=b^A>>>5&134215680^b<<16;m=b>>>11|0;f=h;u=f;h=v(v(1)-f);e:{if(v(w(h))<v(2147483648)){k=~~h;break e}k=-2147483648}j=t?k:0;f=v(u+v(j|0));f:{if(v(w(f))<v(2147483648)){k=~~f;break f}k=-2147483648}B=k-j|0;b=m+((B&65535)+b|0)|0;b=b^B>>>5&134215680^b<<16;b=b+(c&65535)+(b>>>11)|0;b=b^c>>>5&134215680^b<<16;b=(b>>>11|0)+b|0;b=b<<3^b;b=(b>>>5|0)+b|0;b=b<<4^b;b=(b>>>17|0)+b|0;b=b<<25^b;I=(b>>>6|0)+b|0;t=o[a+4>>2];x=((I>>>0)%(t>>>0)<<2)+x|0;b=o[x>>2];o[a+40>>2]=o[a+40>>2]+1;m=o[a+36>>2]+1|0;o[a+36>>2]=m;r=v(v(f-v(k|0))*v(3));g:{if(v(w(r))<v(2147483648)){k=~~r;break g}k=-2147483648}h=v(k|0);n=v(v(i-v(g|0))*v(3));h:{if(v(w(n))<v(2147483648)){j=~~n;break h}j=-2147483648}f=v(j|0);i=v(v(q-v(l|0))*v(3));i:{if(v(w(i))<v(2147483648)){l=~~i;break i}l=-2147483648}J=v(r-h);y=v(n-f);p=v(i-v(l|0));j:{if(b){while(1){if(!((I|0)!=o[b+272>>2]|(z|0)!=o[b+256>>2]|((A|0)!=o[b+260>>2]|o[b+264>>2]!=(B|0)))){if(o[b+276>>2]==(c|0)){break j}}b=o[b+280>>2];m=m+1|0;o[a+36>>2]=m;if(b){continue}break}}b=o[a+28>>2];o[a+28>>2]=b+1;if((b|0)>=o[a+32>>2]){m=0;o[7689]=o[7689]+1;k:{if((t|0)<1){break k}while(1){g=(m<<2)+H|0;b=o[g>>2];o[g>>2]=0;if(b){while(1){g=o[b+280>>2];ba(b);b=g;if(b){continue}break}}m=m+1|0;if((t|0)==(m|0)){break k}H=o[a+12>>2];continue}}o[a+36>>2]=1;o[a+40>>2]=1;o[a+28>>2]=0;o[a+20>>2]=1048576e3;o[a+24>>2]=0}b=fa(284);g=$(b,0,284);o[g+280>>2]=o[x>>2];o[x>>2]=g;o[g+272>>2]=I;o[g+276>>2]=c;o[g+264>>2]=B;o[g+260>>2]=A;o[g+256>>2]=z;Kz(a,g)}o[b+268>>2]=o[a+24>>2];g=(l<<6)+b|0;b=j<<4;a=g+b|0;j=k<<2;l=j+4|0;D=s[a+l>>2];E=s[a+j>>2];f=v(D-E);c=g- -64|0;a=c+b|0;K=s[a+l>>2];L=s[a+j>>2];h=v(f+v(p*v(v(K-L)-f)));b=b+16|0;a=b+g|0;F=s[a+l>>2];G=s[a+j>>2];f=v(F-G);a=b+c|0;M=s[a+l>>2];N=s[a+j>>2];f=v(h+v(y*v(v(f+v(p*v(v(M-N)-f)))-h)));u=f;P=v(f*f);O=v(L-E);n=v(N-G);f=v(O+v(y*v(n-O)));q=v(K-D);i=v(M-F);r=v(f+v(J*v(v(q+v(y*v(i-q)))-f)));f=v(G-E);h=v(f+v(p*v(v(N-L)-f)));f=v(F-D);h=v(h+v(J*v(v(f+v(p*v(v(M-K)-f)))-h)));f=v(v(1)/v(C(v(P+v(v(r*r)+v(h*h))))));s[d+8>>2]=u*f;s[d+4>>2]=h*f;s[d>>2]=r*f;f=v(E+v(p*O));h=v(f+v(y*v(v(G+v(p*n))-f)));f=v(D+v(p*q));return v(v(h+v(J*v(v(f+v(y*v(v(F+v(p*i))-f)))-h)))-e)}function hA(a,b,c){var d=v(0),e=v(0),f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=0,t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=0,D=0,E=0,F=v(0);F=s[a+452>>2];a:{z=s[a+304>>2];y=s[a+300>>2];if(y>v(0)^1?!(z>v(0)):0){break a}E=o[a+288>>2];if((E|0)<4){break a}A=o[a+760>>2];r=A+u(c,44)|0;g=o[r+8>>2];q=s[g+40>>2];B=o[r+12>>2];D=o[r+16>>2];e=v(v(v(v(q+s[B+40>>2])+s[D+40>>2])*v(.3333333432674408))-s[b>>2]);j=s[g+44>>2];m=v(v(v(v(j+s[B+44>>2])+s[D+44>>2])*v(.3333333432674408))-s[b+4>>2]);n=s[g+48>>2];h=v(v(v(v(n+s[B+48>>2])+s[D+48>>2])*v(.3333333432674408))-s[b+8>>2]);t=v(v(v(e*e)+v(m*m))+v(h*h));if(!(t>v(1.1920928955078125e-7))){break a}i=s[o[a+684>>2]>>2];w=v(C(t));d=v(v(1)/w);l=v(h*d);f=v(m*d);d=v(e*d);k=s[r+20>>2];p=s[r+28>>2];x=s[r+24>>2];b:{switch(E+ -4|0){case 1:j=v(v(v(e*k)+v(m*x))+v(h*p))<v(0)?v(-1):v(1);e=v(p*j);m=v(k*j);h=v(x*j);n=v(v(l*e)+v(v(d*m)+v(f*h)));j=i;c=u(c,44)+A|0;p=v(s[c+36>>2]*v(.5));i=v(n*v(v(t*v(v(y*v(.5))*j))*p));x=v(i*v(-l));t=v(i*v(-f));y=v(i*v(-d));q=v(0);k=v(0);i=v(0);c:{if(!(n>v(0))){break c}i=v(0);if(!(n<v(.9847999811172485))){break c}q=v(v(l*h)-v(f*e));e=v(v(d*e)-v(l*m));i=v(v(C(v(v(1)-v(n*n))))*v(v(v(v(z*v(.5))*j)*w)*p));k=v(v(v(v(f*q)-v(d*e))*i)*v(.3333333432674408));j=v(v(f*m)-v(d*h));q=v(v(v(v(d*j)-v(l*q))*i)*v(.3333333432674408));i=v(v(v(v(l*e)-v(f*j))*i)*v(.3333333432674408))}j=v(x*v(.3333333432674408));n=v(t*v(.3333333432674408));l=v(y*v(.3333333432674408));b=0;while(1){f=s[g+88>>2];if(!!(f>v(0))){d=s[a+452>>2];e=v(v(j*f)*d);h=v(e*e);e=v(v(l*f)*d);f=v(v(n*f)*d);f=v(h+v(v(e*e)+v(f*f)));d:{if(!(f>v(0))){break d}d=s[g+40>>2];h=v(d*d);d=s[g+44>>2];h=v(h+v(d*d));d=s[g+48>>2];d=v(h+v(d*d));if(!(f>=d)){break d}f=v(v(v(C(d))/v(C(f)))*v(.800000011920929));j=v(j*f);n=v(n*f);l=v(l*f)}s[g+56>>2]=i+v(l+s[g+56>>2]);r=g- -64|0;s[r>>2]=k+v(j+s[r>>2]);s[g+60>>2]=q+v(n+s[g+60>>2])}b=b+1|0;if((b|0)==3){break a}g=o[(c+(b<<2)|0)+8>>2];continue};case 0:case 2:break b;default:break a}}w=h;h=v(v(v(e*k)+v(m*x))+v(h*p))<v(0)?v(-1):v(1);p=v(p*h);k=v(k*h);h=v(x*h);e=v(v(w*p)+v(v(e*k)+v(m*h)));if(!(e>v(0))){break a}b=u(c,44)+A|0;i=v(v(t*v(e*v(-s[b+36>>2])))*i);e=v(y*i);m=v(z*i);i=v(v(v(l*e)+v(v(p*m)+v(0)))*v(.3333333432674408));l=v(v(v(d*e)+v(v(k*m)+v(0)))*v(.3333333432674408));f=v(v(v(f*e)+v(v(h*m)+v(0)))*v(.3333333432674408));d=v(v(1)/v(C(v(v(i*i)+v(v(l*l)+v(f*f))))));e=v(i*d);m=v(f*d);h=v(l*d);a=0;while(1){d=v(F*s[g+88>>2]);k=v(i*d);w=v(k*k);k=v(l*d);p=v(k*k);k=v(f*d);e:{if(!!(v(w+v(p+v(k*k)))>v(v(v(q*q)+v(j*j))+v(n*n)))){d=v(v(1)/d);j=v(v(e*n)+v(v(h*q)+v(m*j)));s[g+56>>2]=s[g+56>>2]-v(d*v(h*j));s[g+60>>2]=s[g+60>>2]-v(d*v(m*j));c=g- -64|0;s[c>>2]=s[c>>2]-v(d*v(e*j));break e}s[g+56>>2]=l+s[g+56>>2];s[g+60>>2]=f+s[g+60>>2];c=g- -64|0;s[c>>2]=i+s[c>>2]}a=a+1|0;if((a|0)==3){break a}g=o[(b+(a<<2)|0)+8>>2];q=s[g+40>>2];n=s[g+48>>2];j=s[g+44>>2];continue}}}function fD(a,b){a=a|0;b=b|0;var c=v(0),d=0,e=0,f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=0,w=v(0),x=v(0),y=0,z=0,A=v(0),B=v(0),C=v(0),D=0,E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=0,L=0,N=v(0),O=v(0),P=v(0);e=M-96|0;M=e;f=o[a+32>>2];g=o[a+28>>2];d=o[b+8>>2];o[d>>2]=1065353216;z=o[b+24>>2];h=z+1<<2;o[h+d>>2]=1065353216;D=z<<1;K=D+2<<2;o[d+K>>2]=1065353216;m=s[g+8>>2];j=s[g+12>>2];k=s[g+20>>2];r=s[g+24>>2];n=s[g+28>>2];l=s[g+36>>2];p=s[g+40>>2];c=s[a+52>>2];w=s[g+44>>2];q=s[a+56>>2];x=s[g+4>>2];i=s[a+48>>2];t=o[b+12>>2];o[t+12>>2]=0;o[t>>2]=0;l=v(v(v(i*l)+v(c*p))+v(q*w));s[t+4>>2]=l;k=v(v(v(i*k)+v(c*r))+v(q*n));s[t+8>>2]=-k;y=z<<2;d=y+t|0;o[d+12>>2]=0;m=v(v(v(x*i)+v(m*c))+v(j*q));s[d+8>>2]=m;o[d+4>>2]=0;s[d>>2]=-l;L=z<<3;d=L+t|0;o[d+8>>2]=0;o[d+12>>2]=0;s[d+4>>2]=-m;s[d>>2]=k;d=o[b+16>>2];if(d){o[d>>2]=-1082130432;o[d+h>>2]=-1082130432;o[d+K>>2]=-1082130432}n=s[f+8>>2];p=s[f+12>>2];r=s[f+36>>2];w=s[f+40>>2];x=s[f+44>>2];j=s[f+20>>2];A=s[f+24>>2];c=s[a+68>>2];B=s[f+28>>2];q=s[a+72>>2];C=s[f+4>>2];i=s[a+64>>2];d=o[b+20>>2];o[d+12>>2]=0;o[d>>2]=0;j=v(v(v(i*j)+v(c*A))+v(q*B));s[d+8>>2]=j;r=v(v(v(i*r)+v(c*w))+v(q*x));s[d+4>>2]=-r;h=d+y|0;o[h+12>>2]=0;c=v(v(v(C*i)+v(n*c))+v(p*q));s[h+8>>2]=-c;o[h+4>>2]=0;s[h>>2]=r;h=d+(D<<2)|0;o[h+8>>2]=0;o[h+12>>2]=0;s[h+4>>2]=c;s[h>>2]=-j;i=s[g+60>>2];n=s[f+60>>2];p=s[g+56>>2];w=s[f+56>>2];h=o[b+28>>2];q=v(s[b>>2]*s[b+4>>2]);s[h>>2]=q*v(v(v(c+s[f+52>>2])-m)-s[g+52>>2]);s[h+y>>2]=q*v(v(v(j+w)-k)-p);s[h+L>>2]=q*v(v(v(r+n)-l)-i);h=u(z,3);o[(h<<2)+t>>2]=1065353216;y=y|1;o[(y<<2)+t>>2]=1065353216;D=t;t=u(z,5)+2|0;o[D+(t<<2)>>2]=1065353216;if(d){o[d+(h<<2)>>2]=-1082130432;o[d+(y<<2)>>2]=-1082130432;o[d+(t<<2)>>2]=-1082130432}x=s[g+12>>2];A=s[g+4>>2];B=s[g+8>>2];C=s[g+28>>2];E=s[g+20>>2];F=s[g+24>>2];G=s[g+44>>2];H=s[g+36>>2];I=s[g+40>>2];i=s[f+12>>2];l=s[f+4>>2];m=s[f+24>>2];j=s[f+40>>2];k=s[f+8>>2];r=s[f+36>>2];n=s[f+28>>2];p=s[f+20>>2];w=s[f+44>>2];o[e+68>>2]=0;o[e+52>>2]=0;N=v(v(m*w)-v(n*j));O=v(v(n*r)-v(w*p));P=v(v(j*p)-v(m*r));c=v(v(1)/v(v(v(l*N)+v(k*O))+v(i*P)));J=v(v(v(n*k)-v(m*i))*c);n=v(v(v(p*i)-v(n*l))*c);m=v(v(v(m*l)-v(p*k))*c);s[e- -64>>2]=v(v(H*J)+v(I*n))+v(G*m);p=v(v(v(j*i)-v(w*k))*c);i=v(v(v(w*l)-v(r*i))*c);l=v(v(v(r*k)-v(j*l))*c);s[e+60>>2]=v(v(H*p)+v(I*i))+v(G*l);s[e+48>>2]=v(v(J*E)+v(n*F))+v(m*C);s[e+44>>2]=v(v(p*E)+v(i*F))+v(l*C);o[e+36>>2]=0;k=v(N*c);j=v(O*c);c=v(P*c);s[e+56>>2]=v(v(H*k)+v(I*j))+v(G*c);s[e+40>>2]=v(v(k*E)+v(j*F))+v(c*C);s[e+32>>2]=v(x*m)+v(v(A*J)+v(B*n));s[e+28>>2]=v(x*l)+v(v(A*p)+v(B*i));s[e+24>>2]=v(x*c)+v(v(A*k)+v(B*j));ya(e+24|0,e+8|0);eD(a+80|0,e+8|0,e+80|0,e+76|0);c=v(-s[e+76>>2]);s[e+84>>2]=s[e+84>>2]*c;s[e+88>>2]=s[e+88>>2]*c;c=v(s[e+80>>2]*c);s[e+80>>2]=c;a=o[b+24>>2];b=o[b+28>>2];s[u(a,12)+b>>2]=q*c;s[b+(a<<4)>>2]=q*s[e+84>>2];s[b+u(a,20)>>2]=q*s[e+88>>2];M=e+96|0}function Zy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0);d=M-240|0;M=d;Z=v(1);e=p[a+8|0];a=e?c:b;f=v(s[a+116>>2]-s[a+52>>2]);g=v(f*f);f=v(s[a+120>>2]-s[a+56>>2]);g=v(g+v(f*f));f=v(s[a+124>>2]-s[a+60>>2]);g=v(g+v(f*f));f=s[a+252>>2];a:{if(g<v(f*f)){break a}b=e?b:c;c=o[b+192>>2];if(o[c+4>>2]+ -21>>>0>8){break a}G=s[a+92>>2];H=s[a+76>>2];I=s[a+108>>2];J=s[a+88>>2];K=s[a+72>>2];L=s[a+104>>2];N=s[a+100>>2];O=s[a+84>>2];P=s[a+68>>2];m=s[b+36>>2];n=s[b+20>>2];q=s[b+4>>2];Q=s[a+28>>2];R=s[a+12>>2];S=s[a+44>>2];T=s[a+24>>2];U=s[a+8>>2];V=s[a+40>>2];W=s[a+36>>2];X=s[a+20>>2];Y=s[a+4>>2];r=s[b+12>>2];A=s[a+116>>2];t=s[b+28>>2];g=s[a+120>>2];u=s[b+44>>2];B=s[a+124>>2];_=v(v(v(r*A)+v(t*g))+v(u*B));w=s[b+24>>2];C=v(-s[b+56>>2]);x=s[b+8>>2];y=s[b+52>>2];z=s[b+40>>2];D=s[b+60>>2];k=v(v(v(w*C)-v(x*y))-v(z*D));f=v(k+v(v(v(x*A)+v(w*g))+v(z*B)));h=s[a+56>>2];i=s[a+52>>2];j=s[a+60>>2];o[d+236>>2]=0;F=v(v(v(t*C)-v(r*y))-v(u*D));E=v(F+v(v(v(r*i)+v(t*h))+v(u*j)));s[d+232>>2]=E;k=v(k+v(v(v(x*i)+v(w*h))+v(z*j)));s[d+228>>2]=k;y=v(v(v(n*C)-v(q*y))-v(m*D));h=v(y+v(v(v(q*i)+v(n*h))+v(m*j)));s[d+224>>2]=h;C=h;i=v(y+v(v(v(q*A)+v(n*g))+v(m*B)));if(!!(i<h)){s[d+224>>2]=i;C=i}A=k;if(!!(f<k)){s[d+228>>2]=f;A=f}j=v(F+_);g=E;if(!!(j<g)){s[d+232>>2]=j;g=j}o[d+220>>2]=0;s[d+216>>2]=E;s[d+212>>2]=k;s[d+208>>2]=h;B=h;if(!!(h<i)){s[d+208>>2]=i;B=i}y=k;if(!!(k<f)){s[d+212>>2]=f;y=f}D=E;if(!!(E<j)){s[d+216>>2]=j;D=j}F=g;g=s[a+248>>2];s[d+232>>2]=F-g;s[d+228>>2]=A-g;s[d+224>>2]=C-g;s[d+216>>2]=g+D;s[d+212>>2]=g+y;s[d+208>>2]=g+B;o[d+128>>2]=0;s[d+124>>2]=j;s[d+120>>2]=f;s[d+116>>2]=i;o[d+112>>2]=0;s[d+108>>2]=v(v(r*H)+v(t*G))+v(u*I);s[d+104>>2]=v(v(r*K)+v(t*J))+v(u*L);s[d+100>>2]=v(v(r*P)+v(t*O))+v(u*N);o[d+96>>2]=0;s[d+92>>2]=v(v(x*H)+v(w*G))+v(z*I);s[d+88>>2]=v(v(x*K)+v(w*J))+v(z*L);s[d+84>>2]=v(v(x*P)+v(w*O))+v(z*N);o[d+80>>2]=0;s[d+76>>2]=v(v(q*H)+v(n*G))+v(m*I);s[d+72>>2]=v(v(q*K)+v(n*J))+v(m*L);o[d- -64>>2]=0;s[d+60>>2]=E;s[d+56>>2]=k;s[d+52>>2]=h;o[d+48>>2]=0;s[d+44>>2]=v(v(r*R)+v(t*Q))+v(u*S);s[d+40>>2]=v(v(r*U)+v(t*T))+v(u*V);s[d+36>>2]=v(v(r*Y)+v(t*X))+v(u*W);o[d+32>>2]=0;s[d+28>>2]=v(v(x*R)+v(w*Q))+v(z*S);s[d+24>>2]=v(v(x*U)+v(w*T))+v(z*V);s[d+20>>2]=v(v(x*Y)+v(w*X))+v(z*W);o[d+16>>2]=0;s[d+12>>2]=v(v(q*R)+v(n*Q))+v(m*S);s[d+8>>2]=v(v(q*U)+v(n*T))+v(m*V);s[d+196>>2]=g;s[d+68>>2]=v(v(q*P)+v(n*O))+v(m*N);s[d+4>>2]=v(v(q*Y)+v(n*X))+v(m*W);o[d>>2]=22416;o[d+200>>2]=o[a+244>>2];b:{if(!c){break b}l[o[o[c>>2]+64>>2]](c,d,d+224|0,d+208|0);f=s[d+200>>2];if(!(f<s[a+244>>2])){break b}s[a+244>>2]=f;Z=f}}M=d+240|0;return v(Z)}function DK(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0),X=v(0),Y=v(0),Z=v(0),_=v(0);d=M-240|0;M=d;Z=v(1);e=p[a+8|0];a=e?c:b;f=v(s[a+116>>2]-s[a+52>>2]);g=v(f*f);f=v(s[a+120>>2]-s[a+56>>2]);g=v(g+v(f*f));f=v(s[a+124>>2]-s[a+60>>2]);g=v(g+v(f*f));f=s[a+252>>2];a:{if(g<v(f*f)){break a}b=e?b:c;c=o[b+192>>2];if(o[c+4>>2]+ -21>>>0>8){break a}G=s[a+92>>2];H=s[a+76>>2];I=s[a+108>>2];J=s[a+88>>2];K=s[a+72>>2];L=s[a+104>>2];N=s[a+100>>2];O=s[a+84>>2];P=s[a+68>>2];m=s[b+36>>2];n=s[b+20>>2];q=s[b+4>>2];Q=s[a+28>>2];R=s[a+12>>2];S=s[a+44>>2];T=s[a+24>>2];U=s[a+8>>2];V=s[a+40>>2];W=s[a+36>>2];X=s[a+20>>2];Y=s[a+4>>2];r=s[b+12>>2];A=s[a+116>>2];t=s[b+28>>2];g=s[a+120>>2];u=s[b+44>>2];B=s[a+124>>2];_=v(v(v(r*A)+v(t*g))+v(u*B));w=s[b+24>>2];C=v(-s[b+56>>2]);x=s[b+8>>2];y=s[b+52>>2];z=s[b+40>>2];D=s[b+60>>2];k=v(v(v(w*C)-v(x*y))-v(z*D));f=v(k+v(v(v(x*A)+v(w*g))+v(z*B)));h=s[a+56>>2];i=s[a+52>>2];j=s[a+60>>2];o[d+236>>2]=0;F=v(v(v(t*C)-v(r*y))-v(u*D));E=v(F+v(v(v(r*i)+v(t*h))+v(u*j)));s[d+232>>2]=E;k=v(k+v(v(v(x*i)+v(w*h))+v(z*j)));s[d+228>>2]=k;y=v(v(v(n*C)-v(q*y))-v(m*D));h=v(y+v(v(v(q*i)+v(n*h))+v(m*j)));s[d+224>>2]=h;C=h;i=v(y+v(v(v(q*A)+v(n*g))+v(m*B)));if(!!(i<h)){s[d+224>>2]=i;C=i}A=k;if(!!(f<k)){s[d+228>>2]=f;A=f}j=v(F+_);g=E;if(!!(j<g)){s[d+232>>2]=j;g=j}o[d+220>>2]=0;s[d+216>>2]=E;s[d+212>>2]=k;s[d+208>>2]=h;B=h;if(!!(h<i)){s[d+208>>2]=i;B=i}y=k;if(!!(k<f)){s[d+212>>2]=f;y=f}D=E;if(!!(E<j)){s[d+216>>2]=j;D=j}F=g;g=s[a+248>>2];s[d+232>>2]=F-g;s[d+228>>2]=A-g;s[d+224>>2]=C-g;s[d+216>>2]=g+D;s[d+212>>2]=g+y;s[d+208>>2]=g+B;o[d+128>>2]=0;s[d+124>>2]=j;s[d+120>>2]=f;s[d+116>>2]=i;o[d+112>>2]=0;s[d+108>>2]=v(v(r*H)+v(t*G))+v(u*I);s[d+104>>2]=v(v(r*K)+v(t*J))+v(u*L);s[d+100>>2]=v(v(r*P)+v(t*O))+v(u*N);o[d+96>>2]=0;s[d+92>>2]=v(v(x*H)+v(w*G))+v(z*I);s[d+88>>2]=v(v(x*K)+v(w*J))+v(z*L);s[d+84>>2]=v(v(x*P)+v(w*O))+v(z*N);o[d+80>>2]=0;s[d+76>>2]=v(v(q*H)+v(n*G))+v(m*I);s[d+72>>2]=v(v(q*K)+v(n*J))+v(m*L);o[d- -64>>2]=0;s[d+60>>2]=E;s[d+56>>2]=k;s[d+52>>2]=h;o[d+48>>2]=0;s[d+44>>2]=v(v(r*R)+v(t*Q))+v(u*S);s[d+40>>2]=v(v(r*U)+v(t*T))+v(u*V);s[d+36>>2]=v(v(r*Y)+v(t*X))+v(u*W);o[d+32>>2]=0;s[d+28>>2]=v(v(x*R)+v(w*Q))+v(z*S);s[d+24>>2]=v(v(x*U)+v(w*T))+v(z*V);s[d+20>>2]=v(v(x*Y)+v(w*X))+v(z*W);o[d+16>>2]=0;s[d+12>>2]=v(v(q*R)+v(n*Q))+v(m*S);s[d+8>>2]=v(v(q*U)+v(n*T))+v(m*V);s[d+196>>2]=g;s[d+68>>2]=v(v(q*P)+v(n*O))+v(m*N);s[d+4>>2]=v(v(q*Y)+v(n*X))+v(m*W);o[d>>2]=6704;o[d+200>>2]=o[a+244>>2];b:{if(!c){break b}l[o[o[c>>2]+64>>2]](c,d,d+224|0,d+208|0);f=s[d+200>>2];if(!(f<s[a+244>>2])){break b}s[a+244>>2]=f;Z=f}}M=d+240|0;return v(Z)}function Ym(a,b,c,d,e,f){a=a|0;b=v(b);c=v(c);d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=M-496|0;M=g;o[g+492>>2]=a;s[g+488>>2]=b;s[g+484>>2]=c;o[g+480>>2]=d;o[g+476>>2]=e;o[g+472>>2]=f;a=o[g+492>>2];o[g+468>>2]=30;s[g+444>>2]=0;s[g+440>>2]=0;s[g+436>>2]=0;e=g+448|0;Y(e,g+444|0,g+440|0,g+436|0);b=v(-s[g+484>>2]);d=M-16|0;o[d+12>>2]=e;s[o[d+12>>2]+(o[g+480>>2]<<2)>>2]=b;s[g+412>>2]=0;s[g+408>>2]=0;s[g+404>>2]=0;h=g+416|0;Y(h,g+412|0,g+408|0,g+404|0);b=s[g+484>>2];d=M-16|0;o[d+12>>2]=h;s[o[d+12>>2]+(o[g+480>>2]<<2)>>2]=b;d=g+336|0;rc(d,o[g+476>>2]);ka(g+320|0,o[g+476>>2],e);e=M-16|0;o[e+12>>2]=d;f=o[g+324>>2];e=o[e+12>>2]+48|0;o[e>>2]=o[g+320>>2];o[e+4>>2]=f;f=o[g+332>>2];o[e+8>>2]=o[g+328>>2];o[e+12>>2]=f;f=M-16|0;o[f+12>>2]=d;f=o[f+12>>2]+48|0;i=o[f+4>>2];e=g+304|0;o[e>>2]=o[f>>2];o[e+4>>2]=i;i=o[f+12>>2];o[e+8>>2]=o[f+8>>2];o[e+12>>2]=i;f=M-16|0;o[f+12>>2]=d;i=g+288|0;Mb(i,o[f+12>>2],(o[g+480>>2]+1|0)%3|0);f=M-16|0;o[f+12>>2]=d;d=g+256|0;Mb(d,o[f+12>>2],o[g+480>>2]);f=g+272|0;yb(f,d);s[g+252>>2]=-1.5707963705062866;s[g+248>>2]=1.5707963705062866;s[g+244>>2]=-1.5707963705062866;s[g+240>>2]=1.5707963705062866;l[o[o[a>>2]+64>>2]](a,e,i,f,s[g+488>>2],s[g+252>>2],s[g+248>>2],s[g+244>>2],s[g+240>>2],o[g+472>>2],v(o[g+468>>2]),0);d=g+176|0;rc(d,o[g+476>>2]);ka(g+160|0,o[g+476>>2],h);e=M-16|0;o[e+12>>2]=d;f=o[g+164>>2];e=o[e+12>>2]+48|0;o[e>>2]=o[g+160>>2];o[e+4>>2]=f;f=o[g+172>>2];o[e+8>>2]=o[g+168>>2];o[e+12>>2]=f;f=M-16|0;o[f+12>>2]=d;f=o[f+12>>2]+48|0;h=o[f+4>>2];e=g+144|0;o[e>>2]=o[f>>2];o[e+4>>2]=h;h=o[f+12>>2];o[e+8>>2]=o[f+8>>2];o[e+12>>2]=h;f=M-16|0;o[f+12>>2]=d;h=g+128|0;Mb(h,o[f+12>>2],(o[g+480>>2]+1|0)%3|0);f=M-16|0;o[f+12>>2]=d;d=g+112|0;Mb(d,o[f+12>>2],o[g+480>>2]);s[g+108>>2]=-1.5707963705062866;s[g+104>>2]=1.5707963705062866;s[g+100>>2]=-1.5707963705062866;s[g+96>>2]=1.5707963705062866;l[o[o[a>>2]+64>>2]](a,e,h,d,s[g+488>>2],s[g+108>>2],s[g+104>>2],s[g+100>>2],s[g+96>>2],o[g+472>>2],v(o[g+468>>2]),0);d=M-16|0;o[d+12>>2]=o[g+476>>2];d=o[d+12>>2]+48|0;e=o[d+4>>2];o[g+80>>2]=o[d>>2];o[g+84>>2]=e;e=o[d+12>>2];o[g+88>>2]=o[d+8>>2];o[g+92>>2]=e;o[g+76>>2]=0;while(1){if(o[g+76>>2]<360){b=v(za(v(v(o[g+76>>2])*v(.01745329238474369)))*s[g+488>>2]);e=M-16|0;d=g+448|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+480>>2]+1|0)%3<<2)>>2]=b;f=M-16|0;e=g+416|0;o[f+12>>2]=e;s[o[f+12>>2]+((o[g+480>>2]+1|0)%3<<2)>>2]=b;b=v(Aa(v(v(o[g+76>>2])*v(.01745329238474369)))*s[g+488>>2]);f=M-16|0;o[f+12>>2]=d;s[o[f+12>>2]+((o[g+480>>2]+2|0)%3<<2)>>2]=b;f=M-16|0;o[f+12>>2]=e;s[o[f+12>>2]+((o[g+480>>2]+2|0)%3<<2)>>2]=b;f=M-16|0;o[f+12>>2]=o[g+476>>2];h=g+40|0;ea(h,o[f+12>>2],d);d=g+56|0;f=g+80|0;ha(d,f,h);h=M-16|0;o[h+12>>2]=o[g+476>>2];i=g+8|0;ea(i,o[h+12>>2],e);e=g+24|0;ha(e,f,i);l[o[o[a>>2]+8>>2]](a,d,e,o[g+472>>2]);o[g+76>>2]=o[g+468>>2]+o[g+76>>2];continue}break}M=g+496|0}function Yd(a,b,c){var d=0,e=0,f=0,g=0,h=v(0),i=0,j=v(0),k=v(0),n=v(0),q=v(0),r=v(0),t=0;a:{if(p[a+165|0]){d=o[a+88>>2];if(!(!c|(d|0)<1)){f=o[a+96>>2];k=s[a+168>>2];n=s[b+8>>2];q=s[b+4>>2];r=s[b>>2];c=0;while(1){e=f+(c<<4)|0;h=v(s[e>>2]-r);j=v(h*h);h=v(s[e+4>>2]-q);j=v(j+v(h*h));h=v(s[e+8>>2]-n);if(v(j+v(h*h))<=k){break a}c=c+1|0;if((c|0)<(d|0)){continue}break}}c=o[a+32>>2];o[c+12>>2]=o[c+12>>2]+1;b:{if(o[a+92>>2]!=(d|0)){break b}e=d?d<<1:1;if((d|0)>=(e|0)){break b}if(e){o[7717]=o[7717]+1;g=l[o[6606]](e<<4,16)|0;d=o[a+88>>2]}if((d|0)>=1){c=0;while(1){f=c<<4;i=f+g|0;f=f+o[a+96>>2]|0;t=o[f+4>>2];o[i>>2]=o[f>>2];o[i+4>>2]=t;t=o[f+12>>2];o[i+8>>2]=o[f+8>>2];o[i+12>>2]=t;c=c+1|0;if((d|0)!=(c|0)){continue}break}}c=o[a+96>>2];if(c){if(p[a+100|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+96>>2]=0}o[a+96>>2]=g;o[a+92>>2]=e;m[a+100|0]=1;d=o[a+88>>2]}c=o[a+96>>2]+(d<<4)|0;d=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=d;d=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=d;b=o[a+88>>2];o[a+88>>2]=b+1;o[o[a+32>>2]+16>>2]=o[a+96>>2];return b}c:{d=o[a+108>>2];if(!c|(d|0)<1){break c}f=o[a+116>>2];k=s[a+168>>2];n=s[b+8>>2];q=s[b+4>>2];r=s[b>>2];c=0;while(1){e=f+(c<<2)|0;h=v(s[e>>2]-r);j=v(h*h);h=v(s[e+4>>2]-q);j=v(j+v(h*h));h=v(s[e+8>>2]-n);if(!(v(j+v(h*h))<=k)){c=c+3|0;if((c|0)<(d|0)){continue}break c}break}return(c>>>0)/3|0}e=o[a+112>>2];d:{if((e|0)!=(d|0)){break d}e=d?d<<1:1;if((d|0)>=(e|0)){e=d;break d}c=0;if(e){o[7717]=o[7717]+1;g=l[o[6606]](e<<2,16)|0;d=o[a+108>>2]}f=o[a+116>>2];e:{f:{if((d|0)>=1){while(1){i=c<<2;o[i+g>>2]=o[f+i>>2];c=c+1|0;if((d|0)!=(c|0)){continue}break f}}if(!f){break e}}if(p[a+120|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}d=o[a+108>>2]}o[a+116>>2]=0}o[a+116>>2]=g;o[a+112>>2]=e;m[a+120|0]=1}g=o[a+116>>2];o[g+(d<<2)>>2]=o[b>>2];c=d+1|0;o[a+108>>2]=c;g:{if((c|0)!=(e|0)){d=g;f=e;e=c;break g}f=e?e<<1:1;if((e|0)>=(f|0)){d=g;f=e;break g}c=0;d=0;if(f){o[7717]=o[7717]+1;d=l[o[6606]](f<<2,16)|0;e=o[a+108>>2];g=o[a+116>>2]}h:{i:{if((e|0)>=1){while(1){i=c<<2;o[i+d>>2]=o[g+i>>2];c=c+1|0;if((e|0)!=(c|0)){continue}break i}}if(!g){break h}}if(p[a+120|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}e=o[a+108>>2]}o[a+116>>2]=0}o[a+116>>2]=d;o[a+112>>2]=f;m[a+120|0]=1}o[(e<<2)+d>>2]=o[b+4>>2];c=e+1|0;o[a+108>>2]=c;j:{if((c|0)!=(f|0)){g=d;f=c;break j}e=f?f<<1:1;if((f|0)>=(e|0)){g=d;break j}c=0;g=0;if(e){o[7717]=o[7717]+1;g=l[o[6606]](e<<2,16)|0;f=o[a+108>>2];d=o[a+116>>2]}k:{l:{if((f|0)>=1){while(1){i=c<<2;o[i+g>>2]=o[d+i>>2];c=c+1|0;if((f|0)!=(c|0)){continue}break l}}if(!d){break k}}if(p[a+120|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}f=o[a+108>>2]}o[a+116>>2]=0}o[a+116>>2]=g;o[a+112>>2]=e;m[a+120|0]=1}o[(f<<2)+g>>2]=o[b+8>>2];b=f+1|0;o[a+108>>2]=b;a=o[a+32>>2];o[a+16>>2]=g;o[a+12>>2]=o[a+12>>2]+1;c=((b|0)/3|0)+ -1|0}return c}function Vf(a,b,c){var d=0,e=0,f=0,g=v(0),h=0,i=v(0),j=v(0),k=0,l=0,m=v(0),r=v(0),t=v(0),u=0,w=0,x=0,y=v(0),z=0;h=M-32|0;M=h;u=o[a+56>>2];a:{if((c-b|0)==1){b:{if(p[a+60|0]){b=o[a+116>>2]+(b<<4)|0;d=b;l=o[d+4>>2];c=o[a+136>>2]+(u<<4)|0;e=c;o[e>>2]=o[d>>2];o[e+4>>2]=l;break b}b=o[a+76>>2]+(b<<6)|0;e=b;l=o[e+4>>2];c=o[a+96>>2]+(u<<6)|0;d=c;o[d>>2]=o[e>>2];o[d+4>>2]=l;d=o[e+60>>2];o[c+56>>2]=o[e+56>>2];o[c+60>>2]=d;d=o[e+52>>2];o[c+48>>2]=o[e+48>>2];o[c+52>>2]=d;d=o[e+44>>2];o[c+40>>2]=o[e+40>>2];o[c+44>>2]=d;d=o[e+36>>2];o[c+32>>2]=o[e+32>>2];o[c+36>>2]=d;d=o[e+28>>2];o[c+24>>2]=o[e+24>>2];o[c+28>>2]=d;d=o[e+20>>2];o[c+16>>2]=o[e+16>>2];o[c+20>>2]=d}e=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=e;o[a+56>>2]=o[a+56>>2]+1;break a}x=vE(a,b,c,wE(a,b,c));l=o[a+56>>2];c:{if(p[a+60|0]){i=s[a+40>>2];j=s[a+8>>2];m=s[a+24>>2];r=s[a+44>>2];t=s[a+12>>2];y=s[a+28>>2];e=o[a+136>>2]+(l<<4)|0;d=e;g=v(v(s[a+20>>2]-s[a+4>>2])*s[a+36>>2]);d:{if(g<v(4294967296)&g>=v(0)){f=~~g>>>0;break d}f=0}n[d>>1]=f&65534;d=e;g=v(v(y-t)*r);e:{if(g<v(4294967296)&g>=v(0)){f=~~g>>>0;break e}f=0}n[d+4>>1]=f&65534;g=v(v(m-j)*i);f:{if(g<v(4294967296)&g>=v(0)){d=~~g>>>0;break f}d=0}n[e+2>>1]=d&65534;break c}k=o[a+24>>2];e=o[a+96>>2]+(l<<6)|0;o[e>>2]=o[a+20>>2];o[e+4>>2]=k;d=o[a+32>>2];o[e+8>>2]=o[a+28>>2];o[e+12>>2]=d}e=o[a+56>>2];g:{if(p[a+60|0]){m=s[a+40>>2];g=s[a+8>>2];r=s[a+44>>2];i=s[a+12>>2];e=o[a+136>>2]+(e<<4)|0;d=e;j=s[a+4>>2];j=v(v(v(j-j)*s[a+36>>2])+v(1));h:{if(j<v(4294967296)&j>=v(0)){f=~~j>>>0;break h}f=0}n[d+6>>1]=f|1;d=e;i=v(v(v(i-i)*r)+v(1));i:{if(i<v(4294967296)&i>=v(0)){f=~~i>>>0;break i}f=0}n[d+10>>1]=f|1;g=v(v(v(g-g)*m)+v(1));j:{if(g<v(4294967296)&g>=v(0)){d=~~g>>>0;break j}d=0}n[e+8>>1]=d|1;break g}k=o[a+8>>2];e=o[a+96>>2]+(e<<6)|0;o[e+16>>2]=o[a+4>>2];o[e+20>>2]=k;d=o[a+16>>2];o[e+24>>2]=o[a+12>>2];o[e+28>>2]=d}k=o[a+56>>2];if((c|0)>(b|0)){e=b;while(1){k:{if(p[a+60|0]){d=o[a+116>>2]+(e<<4)|0;f=q[d+4>>1];w=q[d+2>>1];z=q[d>>1];g=s[a+44>>2];i=s[a+40>>2];j=s[a+36>>2];o[h+28>>2]=0;m=s[a+4>>2];s[h+16>>2]=v(v(z>>>0)/j)+m;r=s[a+8>>2];s[h+20>>2]=v(v(w>>>0)/i)+r;t=s[a+12>>2];s[h+24>>2]=v(v(f>>>0)/g)+t;f=q[d+6>>1];w=q[d+8>>1];d=q[d+10>>1];o[h+12>>2]=0;s[h+8>>2]=t+v(v(d>>>0)/g);s[h+4>>2]=r+v(v(w>>>0)/i);s[h>>2]=m+v(v(f>>>0)/j);break k}d=o[a+76>>2]+(e<<6)|0;f=o[d+12>>2];o[h+24>>2]=o[d+8>>2];o[h+28>>2]=f;f=o[d+4>>2];o[h+16>>2]=o[d>>2];o[h+20>>2]=f;f=o[d+28>>2];o[h+8>>2]=o[d+24>>2];o[h+12>>2]=f;f=o[d+20>>2];o[h>>2]=o[d+16>>2];o[h+4>>2]=f}uE(a,k,h+16|0,h);k=o[a+56>>2];e=e+1|0;if((e|0)!=(c|0)){continue}break}}d=k+1|0;o[a+56>>2]=d;Vf(a,b,x);k=o[a+56>>2];Vf(a,x,c);e=p[a+60|0];b=o[a+56>>2]-u|0;if(!(!e|(b|0)<129)){tE(a,d,k);e=p[a+60|0]}if(e&255){o[(o[a+136>>2]+(l<<4)|0)+12>>2]=0-b;break a}o[(o[a+96>>2]+(l<<6)|0)+32>>2]=b}M=h+32|0}function pF(a,b,c,d,e,f,g,h){var i=0,j=0,k=0,l=0,m=0;k=M-16|0;M=k;Wd(a,k+10|0,b,0);Wd(a,k+4|0,c,1);b=o[a+60>>2];l=q[a+64>>1];j=b+(l<<6)|0;n[a+64>>1]=q[j+48>>1];c=q[a+56>>1]+1|0;n[a+56>>1]=c;o[j+8>>2]=h;n[j+6>>1]=f;n[j+4>>1]=e;o[j>>2]=d;o[j+12>>2]=l;n[b+54>>1]=q[b+54>>1]+2;b=o[a+68>>2];c=c<<1;e=c&65534;d=e<<2;f=d|4;h=b+f|0;i=b;e=e+ -1|0;b=e<<2;i=i+b|0;i=q[i>>1]|q[i+2>>1]<<16;n[h>>1]=i;n[h+2>>1]=i>>>16;h=q[k+10>>1];i=o[a+68>>2];m=i+b|0;n[m+2>>1]=l;n[m>>1]=h;h=q[k+4>>1];i=d+i|0;n[i+2>>1]=l;n[i>>1]=h;n[j+54>>1]=c;n[j+48>>1]=e;h=o[a+60>>2];n[h+56>>1]=q[h+56>>1]+2;h=o[a+72>>2];i=h+f|0;h=b+h|0;h=q[h>>1]|q[h+2>>1]<<16;n[i>>1]=h;n[i+2>>1]=h>>>16;h=q[k+12>>1];i=o[a+72>>2];m=i+b|0;n[m+2>>1]=l;n[m>>1]=h;h=q[k+6>>1];i=d+i|0;n[i+2>>1]=l;n[i>>1]=h;n[j+56>>1]=c;n[j+50>>1]=e;h=o[a+60>>2];n[h+58>>1]=q[h+58>>1]+2;h=f;f=o[a+76>>2];h=h+f|0;f=b+f|0;f=q[f>>1]|q[f+2>>1]<<16;n[h>>1]=f;n[h+2>>1]=f>>>16;f=q[k+14>>1];h=b;b=o[a+76>>2];h=h+b|0;n[h+2>>1]=l;n[h>>1]=f;f=q[k+8>>1];b=b+d|0;n[b+2>>1]=l;n[b>>1]=f;n[j+58>>1]=c;n[j+52>>1]=e;d=o[a+68>>2];f=q[j+48>>1]<<2;c=d+f|0;b=c+ -4|0;e=q[b>>1];if(q[c>>1]<e>>>0){h=o[a+60>>2];f=h+(q[(d+f|0)+2>>1]<<6)|0;while(1){d=c+ -4|0;h=(q[d+2>>1]<<6)+h|0;e=e&1?h+54|0:h+48|0;n[e>>1]=q[e>>1]+1;n[f+48>>1]=q[f+48>>1]+ -1;e=q[c>>1]|q[c+2>>1]<<16;h=q[b>>1]|q[b+2>>1]<<16;n[c>>1]=h;n[c+2>>1]=h>>>16;n[b>>1]=e;n[b+2>>1]=e>>>16;b=b+ -4|0;e=q[b>>1];if(q[d>>1]<e>>>0){h=o[a+60>>2];c=d;continue}break}d=o[a+68>>2]}f=q[j+54>>1];c=(f<<2)+d|0;b=c+ -4|0;e=q[b>>1];a:{if(q[c>>1]>=e>>>0){break a}h=o[a+60>>2];f=h+(q[((f<<2)+d|0)+2>>1]<<6)|0;while(1){d=c+ -4|0;h=(q[d+2>>1]<<6)+h|0;e=e&1?h+54|0:h+48|0;n[e>>1]=q[e>>1]+1;n[f+54>>1]=q[f+54>>1]+ -1;e=q[c>>1]|q[c+2>>1]<<16;h=q[b>>1]|q[b+2>>1]<<16;n[c>>1]=h;n[c+2>>1]=h>>>16;n[b>>1]=e;n[b+2>>1]=e>>>16;b=b+ -4|0;e=q[b>>1];if(q[d>>1]>=e>>>0){break a}h=o[a+60>>2];c=d;continue}}d=o[a+72>>2];f=q[j+50>>1]<<2;c=d+f|0;b=c+ -4|0;e=q[b>>1];if(q[c>>1]<e>>>0){h=o[a+60>>2];f=h+(q[(d+f|0)+2>>1]<<6)|0;while(1){d=c+ -4|0;h=(q[d+2>>1]<<6)+h|0;e=e&1?h+56|0:h+50|0;n[e>>1]=q[e>>1]+1;n[f+50>>1]=q[f+50>>1]+ -1;e=q[c>>1]|q[c+2>>1]<<16;h=q[b>>1]|q[b+2>>1]<<16;n[c>>1]=h;n[c+2>>1]=h>>>16;n[b>>1]=e;n[b+2>>1]=e>>>16;b=b+ -4|0;e=q[b>>1];if(q[d>>1]<e>>>0){h=o[a+60>>2];c=d;continue}break}d=o[a+72>>2]}f=q[j+56>>1];c=(f<<2)+d|0;b=c+ -4|0;e=q[b>>1];b:{if(q[c>>1]>=e>>>0){break b}h=o[a+60>>2];f=h+(q[((f<<2)+d|0)+2>>1]<<6)|0;while(1){d=c+ -4|0;h=(q[d+2>>1]<<6)+h|0;e=e&1?h+56|0:h+50|0;n[e>>1]=q[e>>1]+1;n[f+56>>1]=q[f+56>>1]+ -1;e=q[c>>1]|q[c+2>>1]<<16;h=q[b>>1]|q[b+2>>1]<<16;n[c>>1]=h;n[c+2>>1]=h>>>16;n[b>>1]=e;n[b+2>>1]=e>>>16;b=b+ -4|0;e=q[b>>1];if(q[d>>1]>=e>>>0){break b}h=o[a+60>>2];c=d;continue}}nk(a,2,q[j+52>>1]);mk(a,2,q[j+58>>1],g);M=k+16|0;return l}function $j(a,b,c,d,e,f,g){var h=v(0),i=v(0),j=0,k=v(0),m=0,n=v(0),p=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;m=M-32|0;M=m;B=s[c+4>>2];D=s[d+4>>2];E=s[c>>2];F=s[d>>2];p=s[a+28>>2];z=s[a+12>>2];u=s[d+8>>2];w=s[c+8>>2];h=v((u<w?u:w)+s[e+8>>2]);h=h<z?z:h;k=s[a+44>>2];h=v(v((p<h?p:h)-z)*k);a:{if(h<v(4294967296)&h>=v(0)){G=~~h>>>0;break a}G=0}r=s[a+24>>2];A=s[a+8>>2];h=v((D<B?D:B)+s[e+4>>2]);h=h<A?A:h;x=s[a+40>>2];h=v(v((r<h?r:h)-A)*x);b:{if(h<v(4294967296)&h>=v(0)){H=~~h>>>0;break b}H=0}n=s[a+20>>2];t=s[a+4>>2];h=v((F<E?F:E)+s[e>>2]);h=h<t?t:h;i=s[a+36>>2];h=v(v((n<h?n:h)-t)*i);c:{if(h<v(4294967296)&h>=v(0)){I=~~h>>>0;break c}I=0}h=v((w<u?u:w)+s[f+8>>2]);h=h<z?z:h;h=v(v(v((p<h?p:h)-z)*k)+v(1));d:{if(h<v(4294967296)&h>=v(0)){y=~~h>>>0;break d}y=0}h=v((B<D?D:B)+s[f+4>>2]);h=h<A?A:h;h=v(v(v((r<h?r:h)-A)*x)+v(1));e:{if(h<v(4294967296)&h>=v(0)){j=~~h>>>0;break e}j=0}h=v((E<F?F:E)+s[f>>2]);h=h<t?t:h;h=v(v(v((n<h?n:h)-t)*i)+v(1));f:{if(h<v(4294967296)&h>=v(0)){d=~~h>>>0;break f}d=0}if(0<(g|0)){n=v(F-E);x=v(D-B);i=v(u-w);h=v(v(1)/v(C(v(v(v(n*n)+v(x*x))+v(i*i)))));k=v(i*h);p=v(i*k);i=v(n*h);h=v(x*h);x=v(p+v(v(n*i)+v(x*h)));O=G&65534;P=H&65534;Q=I&65534;R=y|1;S=j|1;T=d|1;d=o[a+136>>2];t=k==v(0)?v(0xde0b6b000000000):v(v(1)/k);y=t<v(0);U=(y<<4)+m|8;u=h==v(0)?v(0xde0b6b000000000):v(v(1)/h);j=u<v(0);V=(j<<4)+m|4;W=((y^1)<<4)+m|8;X=((j^1)<<4)+m|4;w=i==v(0)?v(0xde0b6b000000000):v(v(1)/i);j=w<v(0);Y=(j<<4)+m|0;Z=((j^1)<<4)+m|0;while(1){L=o[d+12>>2];j=0;g:{h:{i:{j:{if(Q>>>0>q[d+6>>1]){break j}N=q[d>>1];if(T>>>0<N>>>0|O>>>0>q[d+10>>1]){break j}G=q[d+4>>1];if(R>>>0<G>>>0|P>>>0>q[d+8>>1]){break j}H=q[d+2>>1];if(S>>>0<H>>>0){break j}p=s[a+12>>2];r=s[a+44>>2];n=s[a+8>>2];k=s[a+40>>2];i=s[a+4>>2];h=s[a+36>>2];o[m+12>>2]=0;I=q[d+10>>1];y=q[d+8>>1];j=q[d+6>>1];o[m+28>>2]=0;s[m>>2]=v(i+v(v(N>>>0)/h))-s[f>>2];s[m+4>>2]=v(n+v(v(H>>>0)/k))-s[f+4>>2];s[m+8>>2]=v(p+v(v(G>>>0)/r))-s[f+8>>2];s[m+16>>2]=v(i+v(v(j>>>0)/h))-s[e>>2];s[m+20>>2]=v(n+v(v(y>>>0)/k))-s[e+4>>2];s[m+24>>2]=v(p+v(v(I>>>0)/r))-s[e+8>>2];k:{i=s[c+4>>2];p=v(u*v(s[V>>2]-i));h=s[c>>2];k=v(w*v(s[Z>>2]-h));if(p>k){break k}r=v(w*v(s[Y>>2]-h));i=v(u*v(s[X>>2]-i));if(r>i){break k}h=s[c+8>>2];n=v(t*v(s[U>>2]-h));k=i<k?i:k;if(n>k){break k}i=p>r?p:r;h=v(t*v(s[W>>2]-h));if(i>h){break k}j=(n>i?n:i)<x&(h<k?h:k)>v(0);if(!j|(L|0)<0){break j}j=o[d+12>>2];l[o[o[b>>2]+8>>2]](b,j>>21,j&2097151);break i}j=0}if((L|0)>-1){break i}if(!j){break h}}J=J+1|0;d=d+16|0;break g}j=o[d+12>>2];J=J-j|0;d=d-(j<<4)|0}K=K+1|0;if((J|0)<(g|0)){continue}break}}if(o[7309]<(K|0)){o[7309]=K}M=m+32|0}function CF(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,r=0,s=0,t=0,v=0,w=0,x=0;e=M-32|0;M=e;d=l[o[o[a>>2]+28>>2]](a)|0;o[b>>2]=0;o[b+20>>2]=d;if(d){w=l[o[o[c>>2]+16>>2]](c,32,d)|0;i=o[w+8>>2];o[b>>2]=l[o[o[c>>2]+28>>2]](c,i);x=l[o[o[a>>2]+28>>2]](a)|0;if((x|0)>0){while(1){l[o[o[a>>2]+16>>2]](a,e+28|0,e+4|0,e+16|0,e+8|0,e+24|0,e+20|0,e,e+12|0,v);d=o[e>>2];o[i+24>>2]=d;f=o[e+4>>2];o[i>>2]=0;o[i+4>>2]=0;o[i+28>>2]=f;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[i+20>>2]=0;a:{b:{switch(o[e+12>>2]+ -2|0){case 0:if(!d){break a}f=l[o[o[c>>2]+16>>2]](c,4,u(d,3))|0;j=o[f+8>>2];o[i+8>>2]=l[o[o[c>>2]+28>>2]](c,j);if(o[e>>2]>=1){d=0;k=o[e+24>>2];while(1){g=j+u(d,12)|0;h=k+u(o[e+20>>2],d)|0;o[g>>2]=o[h>>2];o[g+4>>2]=o[h+4>>2];o[g+8>>2]=o[h+8>>2];d=d+1|0;if((d|0)<o[e>>2]){continue}break}}l[o[o[c>>2]+20>>2]](c,f,16074,1497453121,o[f+8>>2]);break a;case 1:if(!d){break a}f=l[o[o[c>>2]+16>>2]](c,8,d)|0;j=o[f+8>>2];o[i+12>>2]=l[o[o[c>>2]+28>>2]](c,j);k=o[e>>2];if((k|0)>=1){d=0;r=o[e+20>>2];s=o[e+24>>2];while(1){g=j+(d<<3)|0;h=s+u(d,r)|0;n[g>>1]=q[h>>1];n[g+2>>1]=q[h+2>>1];n[g+4>>1]=q[h+4>>1];d=d+1|0;if((k|0)!=(d|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,f,16089,1497453121,o[f+8>>2]);break a;case 3:break b;default:break a}}if(!d){break a}f=l[o[o[c>>2]+16>>2]](c,4,d)|0;j=o[f+8>>2];o[i+16>>2]=l[o[o[c>>2]+28>>2]](c,j);d=0;if(o[e>>2]>=1){while(1){g=j+(d<<2)|0;h=o[e+24>>2]+u(o[e+20>>2],d)|0;m[g|0]=p[h|0];m[g+1|0]=p[h+1|0];m[g+2|0]=p[h+2|0];d=d+1|0;if((d|0)<o[e>>2]){continue}break}}l[o[o[c>>2]+20>>2]](c,f,16116,1497453121,o[f+8>>2])}c:{d:{switch(o[e+16>>2]){case 0:d=o[e+4>>2];if(!d){break c}f=l[o[o[c>>2]+16>>2]](c,16,d)|0;j=o[f+8>>2];o[i>>2]=l[o[o[c>>2]+28>>2]](c,j);k=o[e+4>>2];if((k|0)>=1){d=0;r=o[e+8>>2];s=o[e+28>>2];while(1){g=j+(d<<4)|0;h=s+u(d,r)|0;o[g>>2]=o[h>>2];o[g+4>>2]=o[h+4>>2];o[g+8>>2]=o[h+8>>2];d=d+1|0;if((k|0)!=(d|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,f,16139,1497453121,o[f+8>>2]);break c;case 1:break d;default:break c}}d=o[e+4>>2];if(!d){break c}h=l[o[o[c>>2]+16>>2]](c,32,d)|0;j=o[h+8>>2];o[i+4>>2]=l[o[o[c>>2]+28>>2]](c,j);k=o[e+4>>2];if((k|0)>=1){d=0;r=o[e+8>>2];s=o[e+28>>2];while(1){g=s+u(d,r)|0;t=o[g+4>>2];f=j+(d<<5)|0;o[f>>2]=o[g>>2];o[f+4>>2]=t;t=o[g+12>>2];o[f+8>>2]=o[g+8>>2];o[f+12>>2]=t;t=o[g+20>>2];o[f+16>>2]=o[g+16>>2];o[f+20>>2]=t;d=d+1|0;if((k|0)!=(d|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,h,16158,1497453121,o[h+8>>2])}l[o[o[a>>2]+24>>2]](a,v);i=i+32|0;v=v+1|0;if((x|0)!=(v|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,w,16178,1497453121,o[w+8>>2])}o[b+4>>2]=o[a+4>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];M=e+32|0;return 16193}function qf(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;j=b+12|0;k=c+12|0;n=o[a+12>>2];while(1){a=l+2|0;l=l+1|0;d=o[(((l&255)>>>0)%3<<2)+b>>2];g=o[c+4>>2];a:{b:{e=o[(((a&255)>>>0)%3<<2)+b>>2];h=o[c>>2];if((e|0)==(h|0)){a=2;if((d|0)==(g|0)){break b}}c:{if((d|0)==(h|0)){f=2;if((e|0)==(g|0)){break c}}i=o[c+8>>2];if((e|0)==(g|0)){a=0;if((d|0)==(i|0)){break b}}if((d|0)==(g|0)){f=0;if((e|0)==(i|0)){break c}}if((e|0)==(i|0)){a=1;if((d|0)==(h|0)){break b}}a=26440;if((d|0)!=(i|0)){break a}f=1;if((e|0)!=(h|0)){break a}}a=(f<<2)+k|0;break a}a=(a<<2)+k|0}f=o[b+4>>2];m=o[a>>2];d:{e:{h=o[b>>2];if((h|0)==(d|0)){a=2;if((e|0)==(f|0)){break e}}f:{if((e|0)==(h|0)){a=2;if((d|0)==(f|0)){break f}}i=o[b+8>>2];if((d|0)==(f|0)){a=0;if((e|0)==(i|0)){break e}}if((e|0)==(f|0)){a=0;if((d|0)==(i|0)){break f}}if((d|0)==(i|0)){a=1;if((e|0)==(h|0)){break e}}g=26440;if((e|0)!=(i|0)){break d}a=1;if((d|0)!=(h|0)){break d}}g=(a<<2)+j|0;break d}g=(a<<2)+j|0}f=2;g=o[(o[g>>2]<<2)+n>>2];a=o[g+4>>2];g:{h:{h=o[g>>2];if((a|0)==(d|0)?(h|0)==(e|0):0){break h}i:{if((a|0)==(e|0)?(d|0)==(h|0):0){break i}i=o[g+8>>2];if((a|0)==(e|0)){f=0;if((d|0)==(i|0)){break h}}if((a|0)==(d|0)){f=0;if((e|0)==(i|0)){break i}}if((e|0)==(i|0)){f=1;if((d|0)==(h|0)){break h}}a=26440;if((d|0)!=(i|0)){break g}f=1;if((e|0)!=(h|0)){break g}}a=(g+(f<<2)|0)+12|0;break g}a=(g+(f<<2)|0)+12|0}o[a>>2]=m;g=o[b+4>>2];j:{k:{h=o[b>>2];if((h|0)==(d|0)){a=2;if((e|0)==(g|0)){break k}}l:{if((e|0)==(h|0)){f=2;if((d|0)==(g|0)){break l}}i=o[b+8>>2];if((d|0)==(g|0)){a=0;if((e|0)==(i|0)){break k}}if((e|0)==(g|0)){f=0;if((d|0)==(i|0)){break l}}if((d|0)==(i|0)){a=1;if((e|0)==(h|0)){break k}}a=26440;if((e|0)!=(i|0)){break j}f=1;if((d|0)!=(h|0)){break j}}a=(f<<2)+j|0;break j}a=(a<<2)+j|0}f=o[c+4>>2];m=o[a>>2];m:{n:{h=o[c>>2];if((h|0)==(e|0)){a=2;if((d|0)==(f|0)){break n}}o:{if((d|0)==(h|0)){a=2;if((e|0)==(f|0)){break o}}i=o[c+8>>2];if((e|0)==(f|0)){a=0;if((d|0)==(i|0)){break n}}if((d|0)==(f|0)){a=0;if((e|0)==(i|0)){break o}}if((e|0)==(i|0)){a=1;if((d|0)==(h|0)){break n}}g=26440;if((d|0)!=(i|0)){break m}a=1;if((e|0)!=(h|0)){break m}}g=(a<<2)+k|0;break m}g=(a<<2)+k|0}f=2;g=o[(o[g>>2]<<2)+n>>2];a=o[g+4>>2];p:{q:{h=o[g>>2];if((a|0)==(e|0)?(h|0)==(d|0):0){break q}r:{if((a|0)==(d|0)?(e|0)==(h|0):0){break r}i=o[g+8>>2];if((a|0)==(d|0)){f=0;if((e|0)==(i|0)){break q}}if((a|0)==(e|0)){f=0;if((d|0)==(i|0)){break r}}if((d|0)==(i|0)){f=1;if((e|0)==(h|0)){break q}}a=26440;if((e|0)!=(i|0)){break p}f=1;if((d|0)!=(h|0)){break p}}a=(g+(f<<2)|0)+12|0;break p}a=(g+(f<<2)|0)+12|0}o[a>>2]=m;if((l|0)!=3){continue}break}}function ry(a,b,c,d){var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=0,m=v(0),n=v(0),p=v(0),q=0,r=v(0),t=0,u=0,w=0,x=v(0),y=0,z=0,A=v(0),B=v(0),D=v(0);e=M+ -64|0;M=e;o[e+24>>2]=1065353216;o[e+28>>2]=0;o[e+16>>2]=1008981770;o[e+20>>2]=1017370378;u=mb(b,c,e+16|0,d);o[e+12>>2]=0;s[e+8>>2]=-s[e+24>>2];s[e+4>>2]=-s[e+20>>2];s[e>>2]=-s[e+16>>2];w=mb(b,c,e,d);q=(u<<4)+b|0;p=s[q>>2];y=(w<<4)+b|0;h=s[y>>2];i=s[q+4>>2];j=s[y+4>>2];g=s[q+8>>2];f=s[y+8>>2];o[e+28>>2]=0;x=v(g-f);s[e+24>>2]=x;m=v(i-j);s[e+20>>2]=m;h=v(p-h);s[e+16>>2]=h;a:{b:{if((u|0)!=(w|0)){if(x!=v(0)|m!=v(0)|h!=v(0)){break b}}o[a>>2]=-1;o[a+4>>2]=-1;o[a+8>>2]=-1;o[a+12>>2]=-1;break a}o[e+60>>2]=0;o[e+44>>2]=0;i=v(v(m*v(-.019999999552965164))-h);s[e+56>>2]=i;g=v(h*v(0));f=v(x*v(.019999999552965164));j=v(g+f);s[e+52>>2]=j;n=v(m+v(h*v(-.019999999552965164)));s[e+40>>2]=n;p=v(g-x);s[e+36>>2]=p;r=f;f=v(m*v(0));h=v(r-f);s[e+32>>2]=h;g=v(x-f);s[e+48>>2]=g;z=e+48|0;k=e+32|0;t=e;f=v(C(v(v(v(h*h)+v(p*p))+v(n*n))));c:{if(!!(f>v(C(v(v(v(g*g)+v(j*j))+v(i*i)))))){f=v(v(1)/f);s[e+36>>2]=p*f;s[e+32>>2]=h*f;r=v(n*f);break c}l=o[z+4>>2];o[k>>2]=o[z>>2];o[k+4>>2]=l;l=o[z+12>>2];o[k+8>>2]=o[z+8>>2];o[k+12>>2]=l;j=s[e+32>>2];g=s[e+36>>2];f=s[e+40>>2];i=v(v(1)/v(C(v(v(v(j*j)+v(g*g))+v(f*f)))));s[e+36>>2]=g*i;s[e+32>>2]=j*i;r=v(f*i)}s[t+40>>2]=r;k=mb(b,c,k,d);if(!((k|0)!=(w|0)?(u|0)!=(k|0):0)){o[e+12>>2]=0;s[e+8>>2]=-s[e+40>>2];s[e+4>>2]=-s[e+36>>2];s[e>>2]=-s[e+32>>2];k=mb(b,c,e,d)}if(!((k|0)!=(w|0)?(k|0)!=(u|0):0)){o[a>>2]=-1;o[a+4>>2]=-1;o[a+8>>2]=-1;o[a+12>>2]=-1;break a}t=(k<<4)+b|0;p=s[t+4>>2];h=s[t+8>>2];i=s[t>>2];j=s[q+4>>2];g=s[q+8>>2];f=s[q>>2];o[e+44>>2]=0;o[e+60>>2]=0;m=v(i-f);s[e+32>>2]=m;n=s[e+24>>2];h=v(h-g);s[e+40>>2]=h;i=s[e+16>>2];g=s[e+20>>2];f=v(p-j);s[e+36>>2]=f;j=v(v(g*m)-v(f*i));g=v(v(f*n)-v(h*g));f=v(v(h*i)-v(n*m));i=v(v(1)/v(C(v(v(j*j)+v(v(g*g)+v(f*f))))));s[e+56>>2]=j*i;s[e+52>>2]=f*i;s[e+48>>2]=g*i;l=mb(b,c,z,d);if(!((l|0)!=(w|0)?!((k|0)==(l|0)|(l|0)==(u|0)):0)){o[e+12>>2]=0;s[e+8>>2]=-s[e+56>>2];s[e+4>>2]=-s[e+52>>2];s[e>>2]=-s[e+48>>2];l=mb(b,c,e,d)}if(!((l|0)!=(w|0)?!((k|0)==(l|0)|(l|0)==(u|0)):0)){o[a>>2]=-1;o[a+4>>2]=-1;o[a+8>>2]=-1;o[a+12>>2]=-1;break a}b=(l<<4)+b|0;h=s[b+8>>2];x=s[b>>2];m=s[b+4>>2];n=s[y+4>>2];i=s[t+4>>2];A=s[q+4>>2];p=s[y+8>>2];j=s[t>>2];f=s[y>>2];B=s[q>>2];g=s[t+8>>2];D=s[q+8>>2];o[a+4>>2]=w;o[a>>2]=u;r=v(h-D);h=v(f-B);i=v(i-A);f=v(n-A);j=v(j-B);n=v(r*v(v(h*i)-v(f*j)));g=v(g-D);r=v(f*g);f=v(p-D);b=v(n+v(v(v(x-B)*v(r-v(f*i)))+v(v(m-A)*v(v(f*j)-v(h*g)))))<v(0);o[a+12>>2]=b?k:l;o[a+8>>2]=b?l:k}M=e- -64|0}function Qc(a,b){var c=0,d=0,e=0,f=v(0),g=v(0),h=0,i=0,j=0,k=v(0),n=v(0),q=v(0),r=0,t=0,w=0,x=0,y=0;d=M-96|0;M=d;c=o[a+12>>2];l[o[o[c>>2]+8>>2]](c,o[a+8>>2]+4|0,d+80|0,d- -64|0);c=o[b+68>>2];l[o[o[c>>2]+16>>2]](c,o[o[a+8>>2]+188>>2],d+80|0,d- -64|0,o[b+24>>2]);c=o[b+24>>2];l[o[o[c>>2]+32>>2]](c,o[o[a+8>>2]+284>>2],b+28|0,c);b=o[a+8>>2];c=o[b+56>>2];o[a+92>>2]=o[b+52>>2];o[a+96>>2]=c;c=o[b+64>>2];o[a+100>>2]=o[b+60>>2];o[a+104>>2]=c;b=o[b+284>>2];if((l[o[o[b>>2]+36>>2]](b)|0)>=1){t=a+128|0;while(1){b=o[a+132>>2];if((b|0)<=-1){if(o[a+136>>2]<=-1){c=o[a+140>>2];if(c){if(p[a+144|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+140>>2]=0}m[a+144|0]=1;o[a+136>>2]=0;o[a+140>>2]=0}while(1){o[o[a+140>>2]+(b<<2)>>2]=0;c=b+1|0;e=c>>>0>=b>>>0;b=c;if(e){continue}break}}o[a+132>>2]=0;b=o[o[a+8>>2]+284>>2];b=o[(l[o[o[b>>2]+28>>2]](b)|0)+12>>2]+(i<<4)|0;c=o[o[b+4>>2]>>2];e=o[o[b>>2]>>2];a:{if((p[e+204|0]&4?e:0)|(p[c+204|0]&4?c:0)){break a}b=o[b+8>>2];if(b){l[o[o[b>>2]+16>>2]](b,t)}r=o[a+132>>2];if((r|0)<1){break a}w=o[a+8>>2];x=o[a+140>>2];c=0;while(1){e=o[(c<<2)+x>>2];j=o[e+748>>2];if((j|0)>0){f=o[e+740>>2]==(w|0)?v(-1):v(1);h=0;while(1){b=e+u(h,184)|0;g=s[b+84>>2];if(!!(g<v(0))){if(!!(g<k)){k=s[b+68>>2];n=s[b+72>>2];q=s[b+76>>2];o[a+164>>2]=0;s[a+160>>2]=f*q;s[a+156>>2]=f*n;s[a+152>>2]=f*k;j=o[e+748>>2];k=g}n=s[b+76>>2];q=s[b+72>>2];s[a+92>>2]=v(v(g*v(f*s[b+68>>2]))*v(.20000000298023224))+s[a+92>>2];s[a+96>>2]=v(v(g*v(f*q))*v(.20000000298023224))+s[a+96>>2];s[a+100>>2]=v(v(g*v(f*n))*v(.20000000298023224))+s[a+100>>2];y=1}h=h+1|0;if((h|0)<(j|0)){continue}break}}c=c+1|0;if((r|0)!=(c|0)){continue}break}}i=i+1|0;b=o[o[a+8>>2]+284>>2];if((i|0)<(l[o[o[b>>2]+36>>2]](b)|0)){continue}break}}b=o[a+8>>2];c=o[b+16>>2];o[d+8>>2]=o[b+12>>2];o[d+12>>2]=c;c=o[b+8>>2];o[d>>2]=o[b+4>>2];o[d+4>>2]=c;c=o[b+32>>2];o[d+24>>2]=o[b+28>>2];o[d+28>>2]=c;c=o[b+24>>2];o[d+16>>2]=o[b+20>>2];o[d+20>>2]=c;c=o[b+48>>2];o[d+40>>2]=o[b+44>>2];o[d+44>>2]=c;c=o[b+40>>2];o[d+32>>2]=o[b+36>>2];o[d+36>>2]=c;c=o[a+104>>2];o[d+56>>2]=o[a+100>>2];o[d+60>>2]=c;c=o[a+96>>2];o[d+48>>2]=o[a+92>>2];o[d+52>>2]=c;o[b+260>>2]=o[b+260>>2]+1;a=o[d+12>>2];o[b+12>>2]=o[d+8>>2];o[b+16>>2]=a;a=o[d+4>>2];o[b+4>>2]=o[d>>2];o[b+8>>2]=a;a=o[d+28>>2];o[b+28>>2]=o[d+24>>2];o[b+32>>2]=a;a=o[d+20>>2];o[b+20>>2]=o[d+16>>2];o[b+24>>2]=a;a=o[d+36>>2];o[b+36>>2]=o[d+32>>2];o[b+40>>2]=a;a=o[d+44>>2];o[b+44>>2]=o[d+40>>2];o[b+48>>2]=a;a=o[d+52>>2];o[b+52>>2]=o[d+48>>2];o[b+56>>2]=a;a=o[d+60>>2];o[b+60>>2]=o[d+56>>2];o[b+64>>2]=a;M=d+96|0;return y}function aG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var f=0,g=0,h=v(0),j=0,k=0,q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=0,y=v(0),z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=0,H=0,I=v(0),J=v(0);f=o[b+40>>2];j=o[b+24>>2];k=o[b+8>>2];h=s[b+8>>2];g=h>v(-0xde0b6b000000000)?k:-581039253;r=s[b+24>>2];g=r>(e(0,g),i())?j:g;q=s[b+40>>2];y=(e(0,q>(e(0,g),i())?f:g),i());g=f;f=h<v(0xde0b6b000000000)?k:1566444395;f=r<(e(0,f),i())?j:f;q=(e(0,q<(e(0,f),i())?g:f),i());F=v(y-q);f=o[b+36>>2];j=o[b+20>>2];k=o[b+4>>2];r=s[b+4>>2];g=r<v(0xde0b6b000000000)?k:1566444395;t=s[b+20>>2];g=t<(e(0,g),i())?j:g;u=s[b+36>>2];h=(e(0,u<(e(0,g),i())?f:g),i());g=f;f=r>v(-0xde0b6b000000000)?k:-581039253;f=t>(e(0,f),i())?j:f;r=(e(0,u>(e(0,f),i())?g:f),i());f=o[b+32>>2];j=o[b+16>>2];k=o[b>>2];t=s[b>>2];g=t<v(0xde0b6b000000000)?k:1566444395;u=s[b+16>>2];g=u<(e(0,g),i())?j:g;w=s[b+32>>2];G=w<(e(0,g),i())?f:g;b=t>v(-0xde0b6b000000000)?k:-581039253;b=u>(e(0,b),i())?j:b;H=w>(e(0,b),i())?f:b;b=o[a+8>>2];t=s[b+44>>2];u=s[b+40>>2];w=s[b+12>>2];C=s[b+8>>2];D=s[b+36>>2];E=s[b+4>>2];f=o[a+4>>2];a=o[f+4>>2];a:{if((a|0)!=o[f+8>>2]){break a}j=a?a<<1:1;if((a|0)>=(j|0)){break a}b:{if(!j){k=0;break b}o[7717]=o[7717]+1;k=l[o[6606]](j<<4,16)|0;a=o[f+4>>2]}if((a|0)>=1){b=0;while(1){g=b<<4;x=g+k|0;g=g+o[f+12>>2]|0;z=o[g+4>>2];o[x>>2]=o[g>>2];o[x+4>>2]=z;z=o[g+12>>2];o[x+8>>2]=o[g+8>>2];o[x+12>>2]=z;b=b+1|0;if((b|0)!=(a|0)){continue}break}}a=o[f+12>>2];if(a){if(p[f+16|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[f+12>>2]=0}o[f+12>>2]=k;m[f+16|0]=1;o[f+8>>2]=j;a=o[f+4>>2]}I=v(r-h);a=o[f+12>>2]+(a<<4)|0;o[a+12>>2]=c<<21|d;A=(e(0,H),i());B=(e(0,G),i());J=v(A-B);b=a;d=F<v(.0020000000949949026);q=v(v((d?v(q+v(-.0010000000474974513)):q)-w)*t);c:{if(q<v(4294967296)&q>=v(0)){c=~~q>>>0;break c}c=0}n[b+4>>1]=c&65534;b=a;j=I<v(.0020000000949949026);h=v(v((j?v(h+v(-.0010000000474974513)):h)-C)*u);d:{if(h<v(4294967296)&h>=v(0)){c=~~h>>>0;break d}c=0}n[b+2>>1]=c&65534;b=a;k=J<v(.0020000000949949026);h=v(v((k?v(B+v(-.0010000000474974513)):B)-E)*D);e:{if(h<v(4294967296)&h>=v(0)){c=~~h>>>0;break e}c=0}n[b>>1]=c&65534;b=a;h=v(v(v((d?v(y+v(.0010000000474974513)):y)-w)*t)+v(1));f:{if(h<v(4294967296)&h>=v(0)){c=~~h>>>0;break f}c=0}n[b+10>>1]=c|1;b=a;h=v(v(v((j?v(r+v(.0010000000474974513)):r)-C)*u)+v(1));g:{if(h<v(4294967296)&h>=v(0)){c=~~h>>>0;break g}c=0}n[b+8>>1]=c|1;h=v(v(v((k?v(A+v(.0010000000474974513)):A)-E)*D)+v(1));h:{if(h<v(4294967296)&h>=v(0)){b=~~h>>>0;break h}b=0}n[a+6>>1]=b|1;o[f+4>>2]=o[f+4>>2]+1}function Xm(a,b,c,d,e,f){a=a|0;b=v(b);c=v(c);d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0;g=M-400|0;M=g;o[g+396>>2]=a;s[g+392>>2]=b;s[g+388>>2]=c;o[g+384>>2]=d;o[g+380>>2]=e;o[g+376>>2]=f;a=o[g+396>>2];d=M-16|0;o[d+12>>2]=o[g+380>>2];d=o[d+12>>2]+48|0;e=o[d+4>>2];o[g+360>>2]=o[d>>2];o[g+364>>2]=e;e=o[d+12>>2];o[g+368>>2]=o[d+8>>2];o[g+372>>2]=e;s[g+340>>2]=0;s[g+336>>2]=0;s[g+332>>2]=0;d=g+344|0;Y(d,g+340|0,g+336|0,g+332|0);b=s[g+388>>2];e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+384>>2]<<2)>>2]=b;o[g+328>>2]=30;s[g+308>>2]=0;s[g+304>>2]=0;s[g+300>>2]=0;d=g+312|0;Y(d,g+308|0,g+304|0,g+300|0);b=v(-s[g+388>>2]);e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+384>>2]<<2)>>2]=b;s[g+276>>2]=0;s[g+272>>2]=0;s[g+268>>2]=0;d=g+280|0;Y(d,g+276|0,g+272|0,g+268|0);b=s[g+388>>2];e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+384>>2]<<2)>>2]=b;o[g+264>>2]=0;while(1){if(o[g+264>>2]<360){b=v(za(v(v(o[g+264>>2])*v(.01745329238474369)))*s[g+392>>2]);e=M-16|0;d=g+312|0;o[e+12>>2]=d;s[o[e+12>>2]+((o[g+384>>2]+1|0)%3<<2)>>2]=b;f=M-16|0;e=g+280|0;o[f+12>>2]=e;s[o[f+12>>2]+((o[g+384>>2]+1|0)%3<<2)>>2]=b;b=v(Aa(v(v(o[g+264>>2])*v(.01745329238474369)))*s[g+392>>2]);f=M-16|0;o[f+12>>2]=d;s[o[f+12>>2]+((o[g+384>>2]+2|0)%3<<2)>>2]=b;f=M-16|0;o[f+12>>2]=e;s[o[f+12>>2]+((o[g+384>>2]+2|0)%3<<2)>>2]=b;f=M-16|0;o[f+12>>2]=o[g+380>>2];h=g+232|0;ea(h,o[f+12>>2],d);d=g+248|0;f=g+360|0;ha(d,f,h);h=M-16|0;o[h+12>>2]=o[g+380>>2];i=g+200|0;ea(i,o[h+12>>2],e);e=g+216|0;ha(e,f,i);l[o[o[a>>2]+8>>2]](a,d,e,o[g+376>>2]);o[g+264>>2]=o[g+328>>2]+o[g+264>>2];continue}break}s[g+180>>2]=0;s[g+176>>2]=0;s[g+172>>2]=0;d=g+184|0;Y(d,g+180|0,g+176|0,g+172|0);e=M-16|0;o[e+12>>2]=d;s[o[e+12>>2]+(o[g+384>>2]<<2)>>2]=1;s[g+148>>2]=0;s[g+144>>2]=0;s[g+140>>2]=0;e=g+152|0;Y(e,g+148|0,g+144|0,g+140|0);f=M-16|0;o[f+12>>2]=e;s[o[f+12>>2]+((o[g+384>>2]+1|0)%3<<2)>>2]=1;f=M-16|0;o[f+12>>2]=o[g+380>>2];h=g+104|0;i=o[f+12>>2];f=g+344|0;ea(h,i,f);i=g+120|0;j=g+360|0;db(i,j,h);h=M-16|0;o[h+12>>2]=o[g+380>>2];k=g+88|0;ea(k,o[h+12>>2],d);h=M-16|0;o[h+12>>2]=o[g+380>>2];m=g+72|0;ea(m,o[h+12>>2],e);l[o[o[a>>2]+60>>2]](a,i,k,m,s[g+392>>2],s[g+392>>2],v(0),v(6.2831854820251465),o[g+376>>2],0,v(10));h=M-16|0;o[h+12>>2]=o[g+380>>2];i=g+40|0;ea(i,o[h+12>>2],f);f=g+56|0;ha(f,j,i);h=M-16|0;o[h+12>>2]=o[g+380>>2];i=g+24|0;ea(i,o[h+12>>2],d);d=M-16|0;o[d+12>>2]=o[g+380>>2];h=g+8|0;ea(h,o[d+12>>2],e);l[o[o[a>>2]+60>>2]](a,f,i,h,s[g+392>>2],s[g+392>>2],v(0),v(6.2831854820251465),o[g+376>>2],0,v(10));M=g+400|0}function Ai(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,p=0,q=0,r=0;h=o[b>>2];m=o[a+4>>2];i=o[b+4>>2];f=o[b+8>>2];p=Db(a,c,i,f);d=2;e=o[b+12>>2];q=m+2|0;o[p+20>>2]=q;r=m+1|0;o[p+16>>2]=r;o[p+12>>2]=e;j=o[o[a+12>>2]+(o[b+12>>2]<<2)>>2];e=o[j+4>>2];a:{b:{k=o[j>>2];if((e|0)==(f|0)?(k|0)==(i|0):0){break b}c:{if((e|0)==(i|0)?(f|0)==(k|0):0){break c}g=o[j+8>>2];if((e|0)==(i|0)){d=0;if((f|0)==(g|0)){break b}}if((e|0)==(f|0)){d=0;if((g|0)==(i|0)){break c}}if((g|0)==(i|0)){d=1;if((f|0)==(k|0)){break b}}e=26440;if((f|0)!=(g|0)){break a}d=1;if((i|0)!=(k|0)){break a}}e=(j+(d<<2)|0)+12|0;break a}e=(j+(d<<2)|0)+12|0}o[e>>2]=m;j=Db(a,c,f,h);e=o[b+16>>2];o[j+20>>2]=m;o[j+16>>2]=q;o[j+12>>2]=e;e=2;g=o[o[a+12>>2]+(o[b+16>>2]<<2)>>2];d=o[g+4>>2];d:{e:{n=o[g>>2];if((d|0)==(h|0)?(n|0)==(f|0):0){break e}f:{if((d|0)==(f|0)?(h|0)==(n|0):0){break f}k=o[g+8>>2];if((d|0)==(f|0)){e=0;if((h|0)==(k|0)){break e}}if((d|0)==(h|0)){e=0;if((f|0)==(k|0)){break f}}if((f|0)==(k|0)){e=1;if((h|0)==(n|0)){break e}}d=26440;if((h|0)!=(k|0)){break d}e=1;if((f|0)!=(n|0)){break d}}d=(g+(e<<2)|0)+12|0;break d}d=(g+(e<<2)|0)+12|0}o[d>>2]=r;f=Db(a,c,h,i);e=o[b+20>>2];o[f+20>>2]=r;o[f+16>>2]=m;o[f+12>>2]=e;d=2;e=o[a+12>>2];m=o[e+(o[b+20>>2]<<2)>>2];g=o[m+4>>2];g:{h:{n=o[m>>2];if((g|0)==(i|0)?(n|0)==(h|0):0){break h}i:{if((g|0)==(h|0)?(i|0)==(n|0):0){break i}k=o[m+8>>2];if((g|0)==(h|0)){d=0;if((i|0)==(k|0)){break h}}if((g|0)==(i|0)){d=0;if((h|0)==(k|0)){break i}}if((h|0)==(k|0)){d=1;if((i|0)==(n|0)){break h}}g=26440;if((i|0)!=(k|0)){break g}d=1;if((h|0)!=(n|0)){break g}}g=(m+(d<<2)|0)+12|0;break g}g=(m+(d<<2)|0)+12|0}o[g>>2]=q;d=o[(o[p+12>>2]<<2)+e>>2];if(!(o[d+8>>2]!=(c|0)?!(o[d>>2]==(c|0)|o[d+4>>2]==(c|0)):0)){qf(a,p,d);o[o[a+12>>2]+(o[p+24>>2]<<2)>>2]=0;if(p){o[7718]=o[7718]+1;l[o[6607]](p)}o[o[a+12>>2]+(o[d+24>>2]<<2)>>2]=0;if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[a+12>>2]}d=o[(o[j+12>>2]<<2)+e>>2];if(!(o[d+8>>2]!=(c|0)?!(o[d>>2]==(c|0)|o[d+4>>2]==(c|0)):0)){qf(a,j,d);o[o[a+12>>2]+(o[j+24>>2]<<2)>>2]=0;if(j){o[7718]=o[7718]+1;l[o[6607]](j)}o[o[a+12>>2]+(o[d+24>>2]<<2)>>2]=0;if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[a+12>>2]}d=o[(o[f+12>>2]<<2)+e>>2];if(!(o[d+8>>2]!=(c|0)?!(o[d>>2]==(c|0)|o[d+4>>2]==(c|0)):0)){qf(a,f,d);o[o[a+12>>2]+(o[f+24>>2]<<2)>>2]=0;if(f){o[7718]=o[7718]+1;l[o[6607]](f)}o[o[a+12>>2]+(o[d+24>>2]<<2)>>2]=0;if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[a+12>>2]}o[(o[b+24>>2]<<2)+e>>2]=0;if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}function rl(a){a=a|0;var b=0,c=0,d=v(0),e=0,f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=0,q=0,r=0;b=M-80|0;M=b;a:{if(!l[o[o[a>>2]+20>>2]](a)){break a}c=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[c>>2]+48>>2]](c)&8)){break a}c=o[a+24>>2];g=l[o[o[c>>2]+36>>2]](c)|0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+64>>2]=1065353216;o[b+68>>2]=1065353216;if((g|0)<=0){break a}while(1){c=0;f=o[a+24>>2];n=l[o[o[f>>2]+40>>2]](f,e)|0;q=o[n+748>>2];if((q|0)>0){while(1){r=l[o[o[a>>2]+20>>2]](a)|0;f=u(c,184)+n|0;l[o[o[r>>2]+32>>2]](r,f+36|0,f+68|0,s[f+84>>2],o[f+152>>2],b- -64|0);c=c+1|0;if((q|0)!=(c|0)){continue}break}}e=e+1|0;if((g|0)!=(e|0)){continue}break}}b:{if(!l[o[o[a>>2]+20>>2]](a)){break b}c=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[c>>2]+48>>2]](c)&3)|o[a+8>>2]<1){break b}g=0;while(1){e=o[o[a+16>>2]+(g<<2)>>2];c:{if(p[e+204|0]&32){break c}d:{if(!l[o[o[a>>2]+20>>2]](a)){break d}c=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[c>>2]+48>>2]](c)&1)){break d}o[b+72>>2]=1065353216;o[b+76>>2]=0;o[b+64>>2]=1065353216;o[b+68>>2]=1065353216;e:{f:{g:{switch(o[e+216>>2]+ -1|0){case 0:c=1065353216;o[b+64>>2]=1065353216;f=1065353216;break e;case 1:o[b+64>>2]=0;c=1065353216;f=0;break e;case 2:o[b+64>>2]=0;c=1065353216;f=1065353216;break e;case 4:o[b+64>>2]=1065353216;c=1065353216;break f;default:break g}}o[b+64>>2]=1065353216;c=0}f=0}o[b+76>>2]=0;o[b+72>>2]=f;o[b+68>>2]=c;l[o[o[a>>2]+28>>2]](a,e+4|0,o[e+192>>2],b- -64|0)}c=o[a+72>>2];if(!c){break c}if(!(l[o[o[c>>2]+48>>2]](c)&2)){break c}o[b+40>>2]=0;o[b+44>>2]=0;o[b+32>>2]=1065353216;o[b+36>>2]=0;c=o[e+192>>2];l[o[o[c>>2]+8>>2]](c,e+4|0,b- -64|0,b+48|0);d=s[6601];s[b+64>>2]=s[b+64>>2]-d;s[b+68>>2]=s[b+68>>2]-d;s[b+72>>2]=s[b+72>>2]-d;s[b+48>>2]=d+s[b+48>>2];s[b+52>>2]=d+s[b+52>>2];s[b+56>>2]=d+s[b+56>>2];h:{if(p[e+204|0]&3|(!p[a+44|0]|o[e+236>>2]!=2)){break h}c=o[e+192>>2];l[o[o[c>>2]+8>>2]](c,e+68|0,b+16|0,b);h=v(s[b+16>>2]-d);s[b+16>>2]=h;i=v(s[b+20>>2]-d);s[b+20>>2]=i;j=v(s[b+24>>2]-d);s[b+24>>2]=j;k=v(d+s[b>>2]);s[b>>2]=k;m=v(d+s[b+4>>2]);s[b+4>>2]=m;d=v(d+s[b+8>>2]);s[b+8>>2]=d;if(!!(h<s[b+64>>2])){s[b+64>>2]=h}if(!!(i<s[b+68>>2])){s[b+68>>2]=i}if(!!(j<s[b+72>>2])){s[b+72>>2]=j}h=s[b+28>>2];if(!!(h<s[b+76>>2])){s[b+76>>2]=h}if(!!(s[b+48>>2]<k)){s[b+48>>2]=k}if(!!(s[b+52>>2]<m)){s[b+52>>2]=m}if(!!(s[b+56>>2]<d)){s[b+56>>2]=d}d=s[b+12>>2];if(!(s[b+60>>2]<d)){break h}s[b+60>>2]=d}c=o[a+72>>2];l[o[o[c>>2]+52>>2]](c,b- -64|0,b+48|0,b+32|0)}g=g+1|0;if((g|0)<o[a+8>>2]){continue}break}}M=b+80|0}function kD(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;a:{b:{if((f|0)>=0){h=o[a+16>>2];c:{if((h|0)>=1){n=o[a+12>>2];while(1){q=n+(g<<2)|0;k=o[q>>2];i=o[o[k+28>>2]+208>>2];if((i|0)<=-1){i=o[o[k+32>>2]+208>>2]}if((f|0)==(i|0)){break c}g=g+1|0;if((g|0)<(h|0)){continue}break}}q=0}k=0;if((g|0)<(h|0)){r=o[a+12>>2];while(1){n=o[r+(g<<2)>>2];i=o[o[n+28>>2]+208>>2];if((i|0)<=-1){i=o[o[n+32>>2]+208>>2]}k=((f|0)==(i|0))+k|0;g=g+1|0;if((h|0)!=(g|0)){continue}break}}g=o[a+4>>2];if(o[g+72>>2]<2){break a}if((c|0)<1){break b}f=o[a+36>>2];g=o[a+32>>2];while(1){r=(j<<2)+b|0;d:{if((f|0)!=(g|0)){break d}i=f?f<<1:1;if((f|0)>=(i|0)){g=f;break d}g=0;h=0;if(i){o[7717]=o[7717]+1;h=l[o[6606]](i<<2,16)|0;f=o[a+32>>2]}if((f|0)>=1){while(1){n=g<<2;o[n+h>>2]=o[o[a+40>>2]+n>>2];g=g+1|0;if((g|0)!=(f|0)){continue}break}}g=o[a+40>>2];if(g){if(p[a+44|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}f=o[a+32>>2]}o[a+40>>2]=0}g=f;o[a+40>>2]=h;m[a+44|0]=1;o[a+36>>2]=i;f=i}o[o[a+40>>2]+(g<<2)>>2]=o[r>>2];g=g+1|0;o[a+32>>2]=g;j=j+1|0;if((j|0)!=(c|0)){continue}break}break b}f=o[a+8>>2];v(l[o[o[f>>2]+12>>2]](f,b,c,d,e,o[a+12>>2],o[a+16>>2],o[a+4>>2],o[a+20>>2],o[a+24>>2]));return}if((e|0)>=1){f=o[a+56>>2];g=o[a+52>>2];j=0;while(1){i=(j<<2)+d|0;e:{if((f|0)!=(g|0)){break e}b=f?f<<1:1;if((f|0)>=(b|0)){g=f;break e}g=0;h=0;if(b){o[7717]=o[7717]+1;h=l[o[6606]](b<<2,16)|0;f=o[a+52>>2]}if((f|0)>=1){while(1){c=g<<2;o[c+h>>2]=o[c+o[a+60>>2]>>2];g=g+1|0;if((g|0)!=(f|0)){continue}break}}c=o[a+60>>2];if(c){if(p[a+64|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}f=o[a+52>>2]}o[a+60>>2]=0}g=f;o[a+60>>2]=h;m[a+64|0]=1;o[a+56>>2]=b;f=b}o[o[a+60>>2]+(g<<2)>>2]=o[i>>2];g=g+1|0;o[a+52>>2]=g;j=j+1|0;if((j|0)!=(e|0)){continue}break}}f:{if(!k){g=o[a+72>>2];break f}f=o[a+76>>2];g=o[a+72>>2];j=0;while(1){d=(j<<2)+q|0;g:{if((f|0)!=(g|0)){break g}b=f?f<<1:1;if((f|0)>=(b|0)){g=f;break g}g=0;h=0;if(b){o[7717]=o[7717]+1;h=l[o[6606]](b<<2,16)|0;f=o[a+72>>2]}if((f|0)>=1){while(1){c=g<<2;o[c+h>>2]=o[c+o[a+80>>2]>>2];g=g+1|0;if((g|0)!=(f|0)){continue}break}}c=o[a+80>>2];if(c){if(p[a+84|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}f=o[a+72>>2]}o[a+80>>2]=0}g=f;o[a+80>>2]=h;m[a+84|0]=1;o[a+76>>2]=b;f=b}o[o[a+80>>2]+(g<<2)>>2]=o[d>>2];g=g+1|0;o[a+72>>2]=g;j=j+1|0;if((k|0)!=(j|0)){continue}break}}if((o[a+52>>2]+g|0)>o[o[a+4>>2]+72>>2]){Dj(a)}return}f=o[a+8>>2];v(l[o[o[f>>2]+12>>2]](f,b,c,d,e,q,k,g,o[a+20>>2],o[a+24>>2]))}function KB(a,b,c,d,e,f){var i=0,j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=0,t=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),C=0,D=v(0),E=0,F=0,G=0,H=0,I=v(0),J=v(0),K=v(0),L=v(0),M=v(0);o[b+48>>2]=-2147483648;o[b+52>>2]=-2147483648;o[b+16>>2]=0;o[b+20>>2]=0;o[b+56>>2]=-2147483648;o[b+60>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0;r=o[a+16>>2];a=o[(r+u(d,244)|0)+240>>2];i=o[(u(e,244)+r|0)+240>>2];o[b+148>>2]=e;o[b+144>>2]=d;z=o[f+88>>2];o[b+132>>2]=0;o[b+104>>2]=z;o[b+96>>2]=0;o[b+100>>2]=0;j=s[c>>2];A=s[c+4>>2];l=s[c+8>>2];o[b+12>>2]=0;s[b+8>>2]=-l;k=v(-A);s[b+4>>2]=k;B=v(-j);s[b>>2]=B;f=0;E=b;if(a){F=(g(v(v(v(v(s[a+300>>2]*k)-v(j*s[a+296>>2]))-v(l*s[a+304>>2]))*s[a+552>>2])),h(0));G=(g(v(v(v(v(s[a+284>>2]*k)-v(j*s[a+280>>2]))-v(l*s[a+288>>2]))*s[a+548>>2])),h(0));C=(g(v(v(v(v(s[a+268>>2]*k)-v(j*s[a+264>>2]))-v(l*s[a+272>>2]))*s[a+544>>2])),h(0))}else{C=0}o[E+64>>2]=C;o[b+76>>2]=0;o[b+72>>2]=F;o[b+68>>2]=G;m=s[c>>2];n=s[c+4>>2];p=s[c+8>>2];o[b+44>>2]=o[c+12>>2];s[b+40>>2]=p;s[b+36>>2]=n;s[b+32>>2]=m;c=0;if(i){f=(g(v(v(v(v(m*s[i+296>>2])+v(n*s[i+300>>2]))+v(p*s[i+304>>2]))*s[i+552>>2])),h(0));H=(g(v(v(v(v(m*s[i+264>>2])+v(n*s[i+268>>2]))+v(p*s[i+272>>2]))*s[i+544>>2])),h(0));c=(g(v(v(v(v(m*s[i+280>>2])+v(n*s[i+284>>2]))+v(p*s[i+288>>2]))*s[i+548>>2])),h(0))}o[b+80>>2]=H;o[b+92>>2]=0;o[b+88>>2]=f;o[b+84>>2]=c;c=b;if(a){t=v(v(v(s[a+268>>2]*k)-v(j*s[a+264>>2]))-v(l*s[a+272>>2]));w=v(v(v(s[a+300>>2]*k)-v(j*s[a+296>>2]))-v(l*s[a+304>>2]));q=v(v(v(s[a+284>>2]*k)-v(j*s[a+280>>2]))-v(l*s[a+288>>2]))}else{q=v(0)}k=v(v(v(v(q*k)-v(j*t))-v(l*w))+v(0));if(i){x=v(v(v(m*s[i+296>>2])+v(n*s[i+300>>2]))+v(p*s[i+304>>2]));y=v(v(v(m*s[i+280>>2])+v(n*s[i+284>>2]))+v(p*s[i+288>>2]));j=v(v(v(s[i+264>>2]*m)+v(s[i+268>>2]*n))+v(s[i+272>>2]*p))}else{j=v(0)}q=v(v(1)/v(k+v(v(v(j*m)+v(y*n))+v(x*p))));s[c+108>>2]=q;j=v(0);k=v(0);t=v(0);w=v(0);if(a){a=u(d,244)+r|0;j=v(v(s[a+176>>2]+s[a+208>>2])*v(0));I=v(v(s[a+184>>2]+s[a+216>>2])*v(0));w=s[a+192>>2];t=s[a+200>>2];J=s[a+196>>2];k=v(v(s[a+180>>2]+s[a+212>>2])*v(0))}a:{if(!i){x=v(-0);D=v(-0);y=v(-0);break a}a=u(e,244)+r|0;x=v(v(s[a+176>>2]+s[a+208>>2])*v(-0));K=s[a+192>>2];L=s[a+200>>2];M=s[a+196>>2];D=v(v(s[a+180>>2]+s[a+212>>2])*v(-0));y=v(v(s[a+184>>2]+s[a+216>>2])*v(-0))}o[b+124>>2]=z;s[b+116>>2]=0;o[b+120>>2]=z^-2147483648;s[b+112>>2]=q*v(v(0)-v(v(v(v(j+k)+I)+v(v(v(w*B)-v(A*J))-v(l*t)))+v(v(v(x+D)+y)+v(v(p*L)+v(v(n*M)+v(m*K))))))}function MB(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0);b=b?o[b+236>>2]<<30>>31&b:0;o[a+64>>2]=0;o[a+68>>2]=0;o[a+144>>2]=0;o[a+148>>2]=0;o[a+88>>2]=0;o[a+92>>2]=0;o[a+80>>2]=0;o[a+84>>2]=0;o[a+72>>2]=0;o[a+76>>2]=0;o[a+152>>2]=0;o[a+156>>2]=0;o[a+160>>2]=0;o[a+164>>2]=0;o[a+168>>2]=0;o[a+172>>2]=0;a:{if(b){d=o[b+8>>2];o[a>>2]=o[b+4>>2];o[a+4>>2]=d;d=o[b+16>>2];o[a+8>>2]=o[b+12>>2];o[a+12>>2]=d;d=o[b+32>>2];o[a+24>>2]=o[b+28>>2];o[a+28>>2]=d;d=o[b+24>>2];o[a+16>>2]=o[b+20>>2];o[a+20>>2]=d;d=o[b+48>>2];o[a+40>>2]=o[b+44>>2];o[a+44>>2]=d;d=o[b+40>>2];o[a+32>>2]=o[b+36>>2];o[a+36>>2]=d;d=o[b+64>>2];o[a+56>>2]=o[b+60>>2];o[a+60>>2]=d;d=o[b+56>>2];o[a+48>>2]=o[b+52>>2];o[a+52>>2]=d;f=s[b+352>>2];g=s[b+356>>2];h=s[b+348>>2];e=s[b+344>>2];o[a+240>>2]=b;o[a+140>>2]=0;s[a+136>>2]=e*g;s[a+132>>2]=e*f;s[a+128>>2]=e*h;d=o[b+556>>2];o[a+104>>2]=o[b+552>>2];o[a+108>>2]=d;d=o[b+548>>2];o[a+96>>2]=o[b+544>>2];o[a+100>>2]=d;d=o[b+360>>2];o[a+120>>2]=o[b+356>>2];o[a+124>>2]=d;d=o[b+352>>2];o[a+112>>2]=o[b+348>>2];o[a+116>>2]=d;d=o[b+324>>2];o[a+184>>2]=o[b+320>>2];o[a+188>>2]=d;d=o[b+316>>2];o[a+176>>2]=o[b+312>>2];o[a+180>>2]=d;d=o[b+340>>2];o[a+200>>2]=o[b+336>>2];o[a+204>>2]=d;d=o[b+332>>2];o[a+192>>2]=o[b+328>>2];o[a+196>>2]=d;f=s[b+416>>2];g=s[b+420>>2];h=s[b+412>>2];e=s[b+344>>2];o[a+220>>2]=0;s[a+216>>2]=v(e*g)*c;s[a+212>>2]=v(e*f)*c;s[a+208>>2]=v(e*h)*c;h=s[b+280>>2];i=s[b+296>>2];j=s[b+268>>2];k=s[b+284>>2];l=s[b+300>>2];m=s[b+264>>2];e=s[b+428>>2];f=s[b+432>>2];g=s[b+436>>2];s[a+232>>2]=v(v(v(e*s[b+272>>2])+v(f*s[b+288>>2]))+v(g*s[b+304>>2]))*c;s[a+228>>2]=v(v(v(e*j)+v(f*k))+v(g*l))*c;s[a+224>>2]=v(v(v(m*e)+v(h*f))+v(i*g))*c;break a}o[a+4>>2]=0;o[a+8>>2]=0;o[a>>2]=1065353216;o[a+32>>2]=0;o[a+36>>2]=0;o[a+240>>2]=0;o[a+128>>2]=0;o[a+132>>2]=0;o[a+112>>2]=1065353216;o[a+116>>2]=1065353216;o[a+96>>2]=1065353216;o[a+100>>2]=1065353216;o[a+176>>2]=0;o[a+180>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0;o[a+20>>2]=1065353216;o[a+44>>2]=0;o[a+48>>2]=0;o[a+40>>2]=1065353216;o[a+52>>2]=0;o[a+56>>2]=0;o[a+60>>2]=0;o[a+136>>2]=0;o[a+140>>2]=0;o[a+120>>2]=1065353216;o[a+124>>2]=0;o[a+104>>2]=1065353216;o[a+108>>2]=0;o[a+232>>2]=0;o[a+224>>2]=0;o[a+228>>2]=0;o[a+216>>2]=0;o[a+220>>2]=0;o[a+208>>2]=0;o[a+212>>2]=0;o[a+200>>2]=0;o[a+204>>2]=0;o[a+192>>2]=0;o[a+196>>2]=0;o[a+184>>2]=0;o[a+188>>2]=0}o[a+236>>2]=0}function Cf(a,b){var c=0,d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=0,k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=v(0);i=M-32|0;M=i;c=o[a+192>>2];h=v(l[o[o[c>>2]+48>>2]](c));j=o[a+712>>2];if((j|0)>=1){z=a+928|0;while(1){k=s[b+48>>2];m=s[b+8>>2];n=s[b+4>>2];p=s[b>>2];q=s[b+52>>2];r=s[b+24>>2];t=s[b+20>>2];w=s[b+16>>2];e=s[b+56>>2];f=s[b+40>>2];g=s[b+36>>2];x=s[b+32>>2];c=o[a+720>>2]+u(d,104)|0;o[c+20>>2]=0;A=e;e=s[c+8>>2];B=g;g=s[c+12>>2];y=f;f=s[c+16>>2];x=v(A+v(v(v(x*e)+v(B*g))+v(y*f)));s[c+16>>2]=x;q=v(q+v(v(v(e*w)+v(g*t))+v(f*r)));s[c+12>>2]=q;k=v(k+v(v(v(e*p)+v(g*n))+v(f*m)));s[c+8>>2]=k;m=s[b+48>>2];n=s[b+8>>2];p=s[b>>2];r=s[b+4>>2];t=s[b+52>>2];w=s[b+24>>2];y=s[b+16>>2];C=s[b+20>>2];e=s[b+56>>2];f=s[b+40>>2];g=s[b+32>>2];D=s[b+36>>2];o[c+36>>2]=0;A=e;e=s[c+24>>2];E=v(g*e);g=s[c+28>>2];B=f;f=s[c+32>>2];s[c+32>>2]=A+v(v(E+v(D*g))+v(B*f));s[c+28>>2]=t+v(v(v(e*y)+v(g*C))+v(f*w));s[c+24>>2]=m+v(v(v(e*p)+v(g*r))+v(f*n));e=s[c+80>>2];g=s[c+72>>2];f=s[c+76>>2];m=s[b+8>>2];n=s[b>>2];p=s[b+4>>2];r=s[b+24>>2];t=s[b+16>>2];w=s[b+20>>2];y=s[b+40>>2];C=s[b+32>>2];D=s[b+36>>2];o[c+84>>2]=0;s[c+80>>2]=v(v(g*C)+v(f*D))+v(e*y);s[c+76>>2]=v(v(g*t)+v(f*w))+v(e*r);s[c+72>>2]=v(v(n*g)+v(p*f))+v(m*e);o[i+28>>2]=0;s[i+24>>2]=h+x;s[i+20>>2]=h+q;s[i+16>>2]=h+k;o[i+12>>2]=0;s[i+8>>2]=x-h;s[i+4>>2]=q-h;s[i>>2]=k-h;Wc(z,o[c+96>>2],i);d=d+1|0;if((j|0)!=(d|0)){continue}break}}Bf(a);c=o[a+928>>2];a:{if(c){d=o[a+192>>2];h=v(l[o[o[d>>2]+48>>2]](d));e=s[c>>2];g=s[c+4>>2];f=s[c+8>>2];o[a+904>>2]=0;s[a+900>>2]=f-h;s[a+896>>2]=g-h;s[a+892>>2]=e-h;e=s[c+20>>2];g=s[c+24>>2];f=s[c+16>>2];o[a+920>>2]=0;s[a+916>>2]=h+g;s[a+912>>2]=h+e;c=a+908|0;s[c>>2]=h+f;d=o[a+188>>2];if(!d){break a}j=o[a+684>>2];z=o[j+32>>2];l[o[o[z>>2]+16>>2]](z,d,a+892|0,c,o[j+36>>2]);break a}o[a+892>>2]=0;o[a+896>>2]=0;o[a+916>>2]=0;o[a+920>>2]=0;o[a+908>>2]=0;o[a+912>>2]=0;o[a+900>>2]=0;o[a+904>>2]=0}Af(a);d=o[b+12>>2];c=a+1156|0;o[c>>2]=o[b+8>>2];o[c+4>>2]=d;c=o[b+4>>2];o[a+1148>>2]=o[b>>2];o[a+1152>>2]=c;d=o[b+28>>2];c=a+1172|0;o[c>>2]=o[b+24>>2];o[c+4>>2]=d;d=o[b+20>>2];c=a+1164|0;o[c>>2]=o[b+16>>2];o[c+4>>2]=d;d=o[b+36>>2];c=a+1180|0;o[c>>2]=o[b+32>>2];o[c+4>>2]=d;d=o[b+44>>2];c=a+1188|0;o[c>>2]=o[b+40>>2];o[c+4>>2]=d;d=o[b+60>>2];c=a+1204|0;o[c>>2]=o[b+56>>2];o[c+4>>2]=d;c=o[b+52>>2];a=a+1196|0;o[a>>2]=o[b+48>>2];o[a+4>>2]=c;M=i+32|0}function eC(a){a=a|0;var b=0,c=0,d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),q=v(0),r=0,t=v(0),x=v(0),y=v(0),z=v(0);b=M-176|0;M=b;if(p[a+527|0]){o[a+36>>2]=0;o[a+576>>2]=0;o[a+580>>2]=0;o[a+516>>2]=0;o[a+520>>2]=0;o[a+584>>2]=0;o[a+588>>2]=0;a:{if(p[a+524|0]){break a}i=s[a+412>>2];c=o[a+32>>2];l=s[a+416>>2];m=s[a+420>>2];t=v(v(v(v(i*s[c+4>>2])+v(l*s[c+8>>2]))+v(m*s[c+12>>2]))+s[c+52>>2]);n=s[a+348>>2];d=o[a+28>>2];g=s[a+352>>2];e=s[a+356>>2];x=v(v(v(v(n*s[d+4>>2])+v(g*s[d+8>>2]))+v(e*s[d+12>>2]))+s[d+52>>2]);q=v(t-x);y=v(v(v(v(i*s[c+20>>2])+v(l*s[c+24>>2]))+v(m*s[c+28>>2]))+s[c+56>>2]);z=v(v(v(v(n*s[d+20>>2])+v(g*s[d+24>>2]))+v(e*s[d+28>>2]))+s[d+56>>2]);f=v(y-z);m=v(v(v(v(i*s[c+36>>2])+v(l*s[c+40>>2]))+v(m*s[c+44>>2]))+s[c+60>>2]);n=v(v(v(v(n*s[d+36>>2])+v(g*s[d+40>>2]))+v(e*s[d+44>>2]))+s[d+60>>2]);g=v(m-n);e=v(v(v(q*q)+v(f*f))+v(g*g));b:{if(!!(e>v(1.1920928955078125e-7))){o[b+140>>2]=0;e=v(v(1)/v(C(e)));j=v(g*e);s[b+136>>2]=j;k=v(f*e);s[b+132>>2]=k;i=v(q*e);s[b+128>>2]=i;break b}o[b+136>>2]=0;o[b+140>>2]=0;o[b+128>>2]=1065353216;o[b+132>>2]=0;i=v(1)}c:{if(!!(v(w(j))>v(.7071067690849304))){e=v(v(j*j)+v(k*k));l=v(v(1)/v(C(e)));q=v(e*l);f=v(l*v(-j));g=v(i*f);j=v(k*l);k=v(j*v(-i));e=v(0);break c}e=v(v(i*i)+v(k*k));f=v(v(1)/v(C(e)));g=v(e*f);e=v(f*v(-k));k=v(j*e);f=v(i*f);q=v(f*v(-j));j=v(0)}s[b+168>>2]=g;s[b+164>>2]=k;s[b+152>>2]=j;s[b+148>>2]=f;s[b+160>>2]=q;s[b+144>>2]=e;while(1){h=o[a+28>>2];o[b+80>>2]=o[h+4>>2];o[b+84>>2]=o[h+20>>2];d=o[h+36>>2];o[b+92>>2]=0;o[b+88>>2]=d;o[b+96>>2]=o[h+8>>2];o[b+100>>2]=o[h+24>>2];d=o[h+40>>2];o[b+108>>2]=0;o[b+104>>2]=d;o[b+112>>2]=o[h+12>>2];o[b+116>>2]=o[h+28>>2];d=o[h+44>>2];o[b+124>>2]=0;o[b+120>>2]=d;o[b+32>>2]=o[c+4>>2];o[b+36>>2]=o[c+20>>2];d=o[c+36>>2];o[b+44>>2]=0;o[b+40>>2]=d;o[b+48>>2]=o[c+8>>2];o[b+52>>2]=o[c+24>>2];d=o[c+40>>2];o[b+60>>2]=0;o[b+56>>2]=d;o[b+64>>2]=o[c+12>>2];o[b+68>>2]=o[c+28>>2];d=o[c+44>>2];o[b+76>>2]=0;o[b+72>>2]=d;f=s[h+52>>2];g=s[h+56>>2];e=s[h+60>>2];o[b+28>>2]=0;s[b+24>>2]=n-e;s[b+20>>2]=z-g;s[b+16>>2]=x-f;f=s[c+52>>2];g=s[c+56>>2];e=s[c+60>>2];o[b+12>>2]=0;s[b+8>>2]=m-e;s[b+4>>2]=y-g;s[b>>2]=t-f;Ld((u(r,84)+a|0)+48|0,b+80|0,b+32|0,b+16|0,b,(b+128|0)+(r<<4)|0,h+396|0,s[h+344>>2],c+396|0,s[c+344>>2]);r=r+1|0;if((r|0)==3){break a}c=o[a+32>>2];continue}}c=a;d=o[a+28>>2];a=o[a+32>>2];Hf(c,d+4|0,a+4|0,d+264|0,a+264|0)}M=b+176|0}function iJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=0,t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0);r=M-16|0;M=r;G=s[b+8>>2];E=s[c+8>>2];k=v(v(G*d)+E);H=s[b+4>>2];F=s[c+4>>2];I=v(v(H*d)+F);J=s[b>>2];e=v(J*d);d=s[c>>2];K=v(e+d);a:{if(p[a+228|0]){t=s[a+52>>2];m=v(-s[a+88>>2]);u=s[a+36>>2];j=s[a+84>>2];i=s[a+68>>2];e=s[a+92>>2];z=v(v(v(t*m)-v(u*j))-v(i*e));f=s[a+196>>2];w=s[a+56>>2];x=s[a+40>>2];n=s[a+72>>2];C=v(v(v(w*m)-v(x*j))-v(n*e));g=s[a+200>>2];y=s[a+60>>2];h=v(y*m);m=s[a+44>>2];h=v(h-v(m*j));j=s[a+76>>2];A=v(h-v(j*e));e=s[a+204>>2];h=v(v(v(v(v(z*f)+v(C*g))+v(A*e))+s[a+220>>2])+v(v(k*v(v(v(i*f)+v(n*g))+v(j*e)))+v(v(K*v(v(v(u*f)+v(x*g))+v(m*e)))+v(I*v(v(v(t*f)+v(w*g))+v(y*e))))));f=s[a+164>>2];g=s[a+168>>2];e=s[a+172>>2];f=v(v(v(k*v(v(v(i*f)+v(n*g))+v(j*e)))+v(v(K*v(v(v(u*f)+v(x*g))+v(m*e)))+v(I*v(v(v(t*f)+v(w*g))+v(y*e)))))+v(v(v(v(f*z)+v(C*g))+v(A*e))+s[a+212>>2]));g=v(J*v(f-d));e=k;d=s[a+180>>2];k=s[a+184>>2];n=v(v(i*d)+v(n*k));i=s[a+188>>2];k=v(v(v(e*v(n+v(j*i)))+v(v(K*v(v(v(u*d)+v(x*k))+v(m*i)))+v(I*v(v(v(t*d)+v(w*k))+v(y*i)))))+v(v(v(v(z*d)+v(C*k))+v(A*i))+s[a+216>>2]));d=v(v(g+v(H*v(k-F)))+v(G*v(h-E)));s[r+8>>2]=h+v(G*d);s[r+4>>2]=k+v(H*d);s[r>>2]=f+v(J*d);break a}O=s[a+220>>2];t=s[a+204>>2];u=s[a+196>>2];i=s[a+200>>2];P=s[a+212>>2];f=s[a+168>>2];w=s[a+172>>2];x=s[a+164>>2];n=s[a+116>>2];h=v(-s[a+152>>2]);g=s[a+100>>2];B=s[a+148>>2];y=s[a+132>>2];D=s[a+156>>2];m=v(v(v(n*h)-v(g*B))-v(y*D));j=s[a+120>>2];e=s[a+104>>2];z=s[a+136>>2];C=v(v(v(j*h)-v(e*B))-v(z*D));A=s[a+124>>2];q=v(A*h);h=s[a+108>>2];q=v(q-v(h*B));B=s[a+140>>2];D=v(q-v(B*D));q=s[a+180>>2];L=s[a+184>>2];N=s[a+188>>2];q=v(v(v(E*v(v(v(y*q)+v(z*L))+v(B*N)))+v(v(d*v(v(v(g*q)+v(e*L))+v(h*N)))+v(F*v(v(v(n*q)+v(j*L))+v(A*N)))))+v(v(v(v(m*q)+v(C*L))+v(D*N))+s[a+216>>2]));s[r+4>>2]=q;f=v(v(v(E*v(v(v(y*x)+v(z*f))+v(B*w)))+v(v(d*v(v(v(g*x)+v(e*f))+v(h*w)))+v(F*v(v(v(n*x)+v(j*f))+v(A*w)))))+v(P+v(v(v(x*m)+v(C*f))+v(D*w))));s[r>>2]=f;d=v(v(O+v(v(v(m*u)+v(C*i))+v(D*t)))+v(v(E*v(v(v(y*u)+v(z*i))+v(B*t)))+v(v(d*v(v(v(g*u)+v(e*i))+v(h*t)))+v(F*v(v(v(n*u)+v(j*i))+v(A*t))))));s[r+8>>2]=d;d=v(v(v(J*v(K-f))+v(H*v(I-q)))+v(G*v(k-d)))}o[r+12>>2]=0;a=o[a+32>>2];l[o[o[a>>2]+16>>2]](a,b,r,d);M=r+16|0}function Nl(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=0,x=0,y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=0;g=M-96|0;M=g;o[g+92>>2]=d;o[g+88>>2]=c;o[g+84>>2]=b;o[g+80>>2]=a;h=s[d>>2];j=s[a>>2];i=s[d+4>>2];y=s[a+4>>2];m=s[d+8>>2];z=s[a+8>>2];o[g+44>>2]=0;n=v(z-m);s[g+40>>2]=n;p=v(y-i);s[g+36>>2]=p;r=v(j-h);s[g+32>>2]=r;A=s[b>>2];B=s[b+4>>2];G=s[b+8>>2];o[g+60>>2]=0;q=v(G-m);s[g+56>>2]=q;C=v(B-i);s[g+52>>2]=C;D=v(A-h);s[g+48>>2]=D;t=s[c>>2];k=s[c+4>>2];F=s[c+8>>2];o[g+76>>2]=0;H=v(F-m);s[g+72>>2]=H;I=v(k-i);s[g+68>>2]=I;J=v(t-h);s[g+64>>2]=J;l=v(-1);q=v(v(v(v(r*C)*H)+v(v(v(v(v(p*q)*J)+v(v(n*D)*I))-v(v(r*q)*I))-v(v(p*D)*H)))-v(v(n*C)*J));a:{if(q==v(0)|q!=q){break a}C=v(y-B);D=v(A-t);A=v(j-A);B=v(B-k);t=v(z*v(v(C*D)-v(A*B)));k=j;j=v(z-G);z=v(G-F);if(!(v(q*v(t+v(v(k*v(v(j*B)-v(C*z)))+v(y*v(v(A*z)-v(j*D))))))<=v(0))){break a}o[g+24>>2]=0;o[g+16>>2]=0;o[g+20>>2]=0;o[g+12>>2]=0;while(1){u=E<<2;w=o[u+4396>>2];x=(g+32|0)+(w<<4)|0;j=s[x+8>>2];y=s[x+4>>2];k=v(v(v(p*j)-v(n*y))*h);h=s[x>>2];b:{if(!(v(q*v(v(k+v(i*v(v(n*h)-v(j*r))))+v(v(v(y*r)-v(p*h))*m)))>v(0))){break b}x=w<<2;h=Bg(o[u+(g+80|0)>>2],o[x+(g+80|0)>>2],d,g+16|0,g+12|0);if(h<l^1?!(l<v(0)):0){break b}K=1<<w;w=o[g+12>>2];o[f>>2]=((K&w<<30>>31)+(w<<1&8)|0)+(0-(w&1)&1<<E);o[e+u>>2]=o[g+16>>2];o[e+x>>2]=o[g+20>>2];o[(o[x+4396>>2]<<2)+e>>2]=0;o[e+12>>2]=o[g+24>>2];l=h}E=E+1|0;if((E|0)!=3){u=(g+32|0)+(E<<4)|0;r=s[u>>2];n=s[u+8>>2];p=s[u+4>>2];m=s[d+8>>2];i=s[d+4>>2];h=s[d>>2];continue}break}if(!(l<v(0))){break a}o[f>>2]=15;l=s[c+4>>2];h=s[b+8>>2];i=s[d>>2];m=s[c+8>>2];n=s[b>>2];p=s[d+4>>2];t=v(v(v(l*h)*i)+v(v(m*n)*p));k=h;h=s[c>>2];j=v(l*n);l=s[d+8>>2];j=v(v(t-v(p*v(k*h)))-v(j*l));k=l;l=s[b+4>>2];l=v(v(v(j+v(k*v(h*l)))-v(i*v(m*l)))/q);s[e>>2]=l;h=s[a+4>>2];i=s[c+8>>2];m=s[d>>2];n=s[a+8>>2];p=s[c>>2];r=s[d+4>>2];t=v(v(v(h*i)*m)+v(v(n*p)*r));k=i;i=s[a>>2];j=v(h*p);h=s[d+8>>2];j=v(v(t-v(r*v(k*i)))-v(j*h));k=h;h=s[c+4>>2];h=v(v(v(j+v(k*v(i*h)))-v(m*v(n*h)))/q);s[e+4>>2]=h;i=s[b+4>>2];m=s[a+8>>2];n=s[d>>2];p=s[b+8>>2];r=s[a>>2];j=s[d+4>>2];F=v(v(v(i*m)*n)+v(v(p*r)*j));k=m;m=s[b>>2];t=v(i*r);i=s[d+8>>2];j=v(v(F-v(j*v(k*m)))-v(t*i));k=i;i=s[a+4>>2];q=v(v(v(j+v(k*v(m*i)))-v(n*v(p*i)))/q);s[e+8>>2]=q;s[e+12>>2]=v(1)-v(v(l+h)+q);l=v(0)}M=g+96|0;return l}function wj(a,b,c,d,e,f){ab(a,6,b,c);o[a>>2]=18896;b=o[d+12>>2];o[a+56>>2]=o[d+8>>2];o[a+60>>2]=b;b=o[d+4>>2];o[a+48>>2]=o[d>>2];o[a+52>>2]=b;b=o[d+28>>2];o[a+72>>2]=o[d+24>>2];o[a+76>>2]=b;c=o[d+20>>2];b=a- -64|0;o[b>>2]=o[d+16>>2];o[b+4>>2]=c;b=o[d+44>>2];o[a+88>>2]=o[d+40>>2];o[a+92>>2]=b;b=o[d+36>>2];o[a+80>>2]=o[d+32>>2];o[a+84>>2]=b;b=o[d+60>>2];o[a+104>>2]=o[d+56>>2];o[a+108>>2]=b;b=o[d+52>>2];o[a+96>>2]=o[d+48>>2];o[a+100>>2]=b;b=o[e+12>>2];o[a+120>>2]=o[e+8>>2];o[a+124>>2]=b;b=o[e+4>>2];o[a+112>>2]=o[e>>2];o[a+116>>2]=b;b=o[e+20>>2];o[a+128>>2]=o[e+16>>2];o[a+132>>2]=b;b=o[e+28>>2];o[a+136>>2]=o[e+24>>2];o[a+140>>2]=b;b=o[e+36>>2];o[a+144>>2]=o[e+32>>2];o[a+148>>2]=b;b=o[e+44>>2];o[a+152>>2]=o[e+40>>2];o[a+156>>2]=b;b=o[e+52>>2];o[a+160>>2]=o[e+48>>2];o[a+164>>2]=b;b=o[e+60>>2];o[a+168>>2]=o[e+56>>2];o[a+172>>2]=b;o[a+680>>2]=0;o[a+684>>2]=0;o[a+688>>2]=0;o[a+692>>2]=0;o[a+696>>2]=0;o[a+700>>2]=0;o[a+704>>2]=0;o[a+708>>2]=0;o[a+712>>2]=0;o[a+716>>2]=0;o[a+720>>2]=0;o[a+724>>2]=0;o[a+740>>2]=0;o[a+744>>2]=0;o[a+748>>2]=0;o[a+752>>2]=0;o[a+756>>2]=1045220557;o[a+760>>2]=1045220557;o[a+764>>2]=1045220557;o[a+784>>2]=0;o[a+776>>2]=0;o[a+780>>2]=0;o[a+768>>2]=0;o[a+772>>2]=0;o[a+736>>2]=1056964608;o[a+728>>2]=1060320051;o[a+732>>2]=1065353216;m[a+790|0]=0;m[a+788|0]=0;m[a+789|0]=0;o[a+800>>2]=0;o[a+792>>2]=0;o[a+796>>2]=0;o[a+816>>2]=0;o[a+808>>2]=0;o[a+812>>2]=0;o[a+928>>2]=0;o[a+884>>2]=1133903872;o[a+876>>2]=0;o[a+880>>2]=1036831949;o[a+904>>2]=0;o[a+908>>2]=0;o[a+896>>2]=0;o[a+900>>2]=1045220557;o[a+868>>2]=1065353216;o[a+872>>2]=-1082130432;o[a+924>>2]=0;o[a+888>>2]=1065353216;o[a+892>>2]=1056964608;o[a+916>>2]=0;o[a+992>>2]=0;m[a+912|0]=0;o[a+948>>2]=1133903872;o[a+940>>2]=0;o[a+944>>2]=1036831949;o[a+968>>2]=0;o[a+972>>2]=0;o[a+960>>2]=0;o[a+964>>2]=1045220557;o[a+932>>2]=1065353216;o[a+936>>2]=-1082130432;o[a+988>>2]=0;o[a+952>>2]=1065353216;o[a+956>>2]=1056964608;o[a+980>>2]=0;o[a+1056>>2]=0;m[a+976|0]=0;o[a+1012>>2]=1133903872;o[a+1004>>2]=0;o[a+1008>>2]=1036831949;b=a+1032|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1024|0;o[b>>2]=0;o[b+4>>2]=1045220557;o[a+996>>2]=1065353216;o[a+1e3>>2]=-1082130432;o[a+1052>>2]=0;o[a+1016>>2]=1065353216;o[a+1020>>2]=1056964608;o[a+1044>>2]=0;m[a+1308|0]=0;o[a+1304>>2]=0;m[a+1301|0]=1;m[a+1300|0]=f;m[a+1040|0]=0;Uc(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function ml(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0);d=M-144|0;M=d;o[d+108>>2]=0;f=s[b+80>>2];h=s[b+96>>2];q=s[b+120>>2];E=s[b+56>>2];z=s[b+112>>2];A=s[b+116>>2];F=s[b+52>>2];i=s[b+68>>2];r=s[b+84>>2];t=s[b+100>>2];g=s[b+20>>2];n=s[b+36>>2];u=s[b+72>>2];j=s[b+88>>2];p=s[b+24>>2];k=s[b+104>>2];w=s[b+40>>2];m=s[b+64>>2];x=s[b+32>>2];y=s[b>>2];B=s[b+16>>2];G=s[b+48>>2];C=s[b+4>>2];D=s[b+8>>2];o[d+100>>2]=0;o[d+84>>2]=0;o[d+68>>2]=0;s[d+80>>2]=v(v(D*u)+v(p*j))+v(w*k);s[d+76>>2]=v(v(C*u)+v(g*j))+v(n*k);s[d- -64>>2]=v(v(D*i)+v(p*r))+v(w*t);s[d+60>>2]=v(v(C*i)+v(g*r))+v(n*t);z=v(G-z);A=v(F-A);q=v(E-q);s[d+96>>2]=v(v(u*z)+v(j*A))+v(k*q);s[d+92>>2]=v(v(z*i)+v(A*r))+v(q*t);o[d+52>>2]=0;s[d+72>>2]=v(v(y*u)+v(B*j))+v(x*k);s[d+56>>2]=v(v(y*i)+v(B*r))+v(x*t);s[d+48>>2]=v(v(m*D)+v(f*p))+v(h*w);s[d+44>>2]=v(v(m*C)+v(f*g))+v(h*n);s[d+40>>2]=v(v(m*y)+v(f*B))+v(h*x);s[d+88>>2]=v(v(z*m)+v(A*f))+v(q*h);a:{if(!yJ(a,d+88|0,d+128|0,d+112|0,d+108|0,s[a+12>>2])){break a}if(e){r=s[b+72>>2];t=s[b+64>>2];u=s[b+68>>2];j=s[b+88>>2];k=s[b+80>>2];m=s[b+84>>2];g=s[b+104>>2];n=s[b+96>>2];p=s[b+100>>2];f=s[d+120>>2];h=s[d+112>>2];i=s[d+116>>2];o[d+36>>2]=0;w=v(v(v(h*n)+v(i*p))+v(f*g));s[d+32>>2]=-w;x=v(v(v(h*k)+v(i*m))+v(f*j));s[d+28>>2]=-x;y=v(v(v(t*h)+v(u*i))+v(r*f));s[d+24>>2]=-y;B=s[b+112>>2];C=s[b+116>>2];f=s[b+120>>2];o[d+20>>2]=0;h=s[d+128>>2];i=s[d+132>>2];q=g;g=s[d+136>>2];q=v(f+v(v(v(n*h)+v(p*i))+v(q*g)));f=s[d+108>>2];s[d+16>>2]=q+v(w*f);s[d+12>>2]=v(C+v(v(v(h*k)+v(i*m))+v(g*j)))+v(x*f);s[d+8>>2]=v(B+v(v(v(h*t)+v(i*u))+v(g*r)))+v(y*f);l[o[o[c>>2]+16>>2]](c,d+24|0,d+8|0,f);break a}f=s[b+72>>2];h=s[b+64>>2];i=s[b+68>>2];r=s[b+88>>2];t=s[b+80>>2];u=s[b+84>>2];j=s[b+104>>2];k=s[b+96>>2];m=s[b+100>>2];o[d+36>>2]=0;g=s[d+112>>2];n=s[d+116>>2];p=s[d+120>>2];s[d+32>>2]=v(v(k*g)+v(m*n))+v(j*p);s[d+28>>2]=v(v(g*t)+v(n*u))+v(p*r);s[d+24>>2]=v(v(h*g)+v(i*n))+v(f*p);g=s[b+112>>2];n=s[b+116>>2];p=s[b+120>>2];o[d+20>>2]=0;q=k;k=s[d+128>>2];w=m;m=s[d+132>>2];x=j;j=s[d+136>>2];s[d+16>>2]=p+v(v(v(q*k)+v(w*m))+v(x*j));s[d+12>>2]=n+v(v(v(k*t)+v(m*u))+v(j*r));s[d+8>>2]=g+v(v(v(k*h)+v(m*i))+v(j*f));l[o[o[c>>2]+16>>2]](c,d+24|0,d+8|0,s[d+108>>2])}M=d+144|0}function nj(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=0,t=v(0),u=v(0);r=o[b+12>>2];o[a+564>>2]=o[b+8>>2];o[a+568>>2]=r;r=o[b+4>>2];o[a+556>>2]=o[b>>2];o[a+560>>2]=r;j=v(-0);l=v(1);d=s[a+564>>2];c=s[a+568>>2];f=v(c*v(0));g=s[a+556>>2];h=v(g*v(0));e=v(v(d+f)-h);i=s[a+560>>2];k=v(v(f+h)-i);f=v(i*v(0));h=v(d*v(0));q=v(v(v(-g)-f)-h);f=v(v(c+f)-h);h=v(v(g*e)+v(v(v(c*k)-v(d*q))-v(i*f)));n=v(v(d*f)+v(v(v(c*e)-v(i*q))-v(g*k)));e=v(v(i*k)+v(v(v(c*f)-v(g*q))-v(d*e)));k=v(v(h*v(0))+v(v(n*v(0))+e));if(!(k<v(-.9999998807907104))){j=v(e*v(0));e=v(k+v(1));k=v(C(v(e+e)));e=v(v(1)/k);m=v(v(n-j)*e);l=v(v(j-h)*e);p=v(k*v(.5));j=v(v(v(h*v(0))-v(n*v(0)))*e)}e=v(v(1)/v(C(v(v(v(v(j*j)+v(l*l))+v(m*m))+v(p*p)))));m=v(m*e);l=v(l*e);p=v(p*e);j=v(j*e);e=v(v(d*m)+v(v(i*l)+v(v(c*p)+v(g*j))));k=v(v(g*l)+v(v(v(d*p)-v(c*m))-v(i*j)));q=v(v(i*m)+v(v(v(g*p)-v(c*j))-v(d*l)));t=v(v(d*j)+v(v(v(i*p)-v(c*l))-v(g*m)));i=v(v(1)/v(C(v(v(e*e)+v(v(k*k)+v(v(q*q)+v(t*t)))))));g=s[a+444>>2];a:{if(!(g>=v(.05000000074505806))){break a}c=s[a+448>>2];if(!(c>=v(.05000000074505806))){break a}d=Sa(v(y(v(z(p,v(-1))),v(1))));d=v(d+d);b:{if(!(d>v(1.1920928955078125e-7))){break b}f=v(v(1)/v(C(v(v(m*m)+v(v(j*j)+v(l*l))))));h=v(m*f);n=v(j*f);f=v(l*f);if(!(v(w(f))>v(1.1920928955078125e-7))){break b}u=v(v(h*h)/v(f*f));g=v(C(v(v(u+v(1))/v(v(u/v(g*g))+v(v(1)/v(c*c))))))}if(!(v(w(d))>v(1.1920928955078125e-7))){break a}c:{if(d>g){d=g;break c}c=v(-g);if(!(d<c)){break c}d=c}c=v(d*v(.5));d=v(qa(c)/v(C(v(v(v(n*n)+v(f*f))+v(h*h)))));m=v(h*d);l=v(f*d);j=v(n*d);p=ra(c)}g=v(e*i);d=v(k*i);n=v(t*i);e=v(q*i);k=s[a+452>>2];d:{if(!(k>=v(.05000000074505806))){break d}i=e;h=n;f=d;c=Sa(v(y(v(z(g,v(-1))),v(1))));c=v(c+c);if(!!(c>v(3.1415927410125732))){f=v(-d);h=v(-n);i=v(-e);c=Sa(v(y(v(z(v(-g),v(-1))),v(1))));c=v(c+c)}if(!!(c>v(1.1920928955078125e-7))){q=v(v(1)/v(C(v(v(v(i*i)+v(h*h))+v(f*f)))));f=v(f*q);i=v(i*q);h=v(h*q)}if(!(v(w(c))>v(1.1920928955078125e-7))){break d}e:{if(c>k){c=k;break e}d=v(-k);if(!(c<d)){break e}c=d}g=v(c*v(.5));c=v(qa(g)/v(C(v(v(f*f)+v(v(h*h)+v(i*i))))));d=v(f*c);n=v(h*c);e=v(i*c);g=ra(g)}s[a+568>>2]=v(v(v(p*g)-v(j*e))-v(l*n))-v(m*d);s[a+564>>2]=v(v(j*n)+v(v(p*d)+v(m*g)))-v(l*e);s[a+560>>2]=v(v(m*e)+v(v(p*n)+v(l*g)))-v(j*d);s[a+556>>2]=v(v(l*d)+v(v(p*e)+v(j*g)))-v(m*n)}function fd(a,b,c,d,e,f){var g=0,h=0,i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=0,x=0;g=M-272|0;M=g;h=c;i=o[h+12>>2];o[g+216>>2]=o[h+8>>2];o[g+220>>2]=i;i=o[h+4>>2];o[g+208>>2]=o[h>>2];o[g+212>>2]=i;i=o[h+28>>2];o[g+232>>2]=o[h+24>>2];o[g+236>>2]=i;i=o[h+20>>2];o[g+224>>2]=o[h+16>>2];o[g+228>>2]=i;i=o[h+44>>2];o[g+248>>2]=o[h+40>>2];o[g+252>>2]=i;i=o[h+36>>2];o[g+240>>2]=o[h+32>>2];o[g+244>>2]=i;i=o[h+60>>2];o[g+264>>2]=o[h+56>>2];o[g+268>>2]=i;i=o[h+52>>2];o[g+256>>2]=o[h+48>>2];o[g+260>>2]=i;h=d;i=o[h+12>>2];o[g+152>>2]=o[h+8>>2];o[g+156>>2]=i;i=o[h+4>>2];o[g+144>>2]=o[h>>2];o[g+148>>2]=i;i=o[h+28>>2];o[g+168>>2]=o[h+24>>2];o[g+172>>2]=i;i=o[h+20>>2];o[g+160>>2]=o[h+16>>2];o[g+164>>2]=i;i=o[h+44>>2];o[g+184>>2]=o[h+40>>2];o[g+188>>2]=i;i=o[h+36>>2];o[g+176>>2]=o[h+32>>2];o[g+180>>2]=i;i=o[h+60>>2];o[g+200>>2]=o[h+56>>2];o[g+204>>2]=i;i=o[h+52>>2];o[g+192>>2]=o[h+48>>2];o[g+196>>2]=i;o[g+108>>2]=0;s[g+104>>2]=s[g+200>>2]-s[g+264>>2];s[g+100>>2]=s[g+196>>2]-s[g+260>>2];s[g+96>>2]=s[g+192>>2]-s[g+256>>2];tb(g+208|0,g+144|0,g+16|0,g+128|0);o[g+92>>2]=0;j=s[g+128>>2];s[g+88>>2]=j*s[g+24>>2];s[g+84>>2]=j*s[g+20>>2];s[g+80>>2]=j*s[g+16>>2];o[g+72>>2]=0;o[g+76>>2]=0;h=g- -64|0;o[h>>2]=0;o[h+4>>2]=0;ya(g+208|0,g+128|0);o[g+60>>2]=0;o[g+44>>2]=0;j=s[g+128>>2];k=s[g+132>>2];n=s[g+136>>2];r=s[g+140>>2];q=v(v(2)/v(v(v(v(j*j)+v(k*k))+v(n*n))+v(r*r)));t=v(n*q);m=v(k*t);p=v(j*q);u=v(r*p);s[g+52>>2]=m+u;s[g+40>>2]=m-u;m=v(j*p);p=k;k=v(k*q);q=v(p*k);s[g+56>>2]=v(1)-v(m+q);n=v(n*t);s[g+36>>2]=v(1)-v(m+n);o[g+28>>2]=0;m=v(j*t);p=v(r*k);s[g+48>>2]=m-p;j=v(j*k);k=v(r*t);s[g+32>>2]=j+k;s[g+24>>2]=m+p;s[g+20>>2]=j-k;s[g+16>>2]=v(1)-v(q+n);Ok(b,g+16|0,g+96|0,g+80|0,g+128|0,g+112|0);if(o[a+268>>2]>=1){h=d+48|0;i=c+48|0;d=0;while(1){c=o[o[a+276>>2]+(d<<2)>>2];a:{if(!l[o[o[e>>2]+8>>2]](e,o[c+188>>2])){break a}w=o[c+192>>2];x=c+4|0;l[o[o[w>>2]+8>>2]](w,x,g+16|0,g+96|0);o[g+28>>2]=0;o[g+108>>2]=0;s[g+24>>2]=s[g+24>>2]+s[g+136>>2];s[g+20>>2]=s[g+20>>2]+s[g+132>>2];s[g+16>>2]=s[g+16>>2]+s[g+128>>2];s[g+96>>2]=s[g+96>>2]+s[g+112>>2];s[g+100>>2]=s[g+100>>2]+s[g+116>>2];s[g+104>>2]=s[g+104>>2]+s[g+120>>2];o[g+12>>2]=1065353216;if(!fm(i,h,g+16|0,g+96|0,g+12|0,g+80|0)){break a}XJ(b,g+208|0,g+144|0,c,o[c+192>>2],x,e,f)}d=d+1|0;if((d|0)<o[a+268>>2]){continue}break}}M=g+272|0}function my(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0;f=o[a+12>>2];l=o[b+8>>2];a:{b:{if(o[f+88>>2]!=o[l+88>>2]|o[f+92>>2]!=o[l+92>>2]){break b}e=o[l+4>>2];if((e|0)==(l|0)){o[c>>2]=f;b=o[l+8>>2];a=0;if(!b){break a}o[d>>2]=o[b+12>>2];return 0}f=o[l>>2];o[e>>2]=f;o[f+4>>2]=e;if(o[b>>2]==(l|0)){h=b;i=f;g=o[f+88>>2];j=o[e+88>>2];if(!((g|0)<(j|0)|(o[f+92>>2]<o[e+92>>2]?(g|0)==(j|0):0))){i=e}o[h>>2]=i}if(o[b+4>>2]!=(l|0)){break b}g=o[f+88>>2];j=o[e+88>>2];if(!((g|0)!=(j|0)|o[f+92>>2]<=o[e+92>>2]?(g|0)<=(j|0):0)){o[b+4>>2]=f;break b}o[b+4>>2]=e}t=o[b>>2];x=o[a>>2];y=o[a+4>>2];g=y;v=o[b+4>>2];e=v;j=0;f=0;i=1;z=1;while(1){l=f;w=j;k=o[g+88>>2];h=u(o[e+88>>2]-k|0,i);c:{if((h|0)>=1){j=g;while(1){f=e;k=o[e+92>>2];g=h;while(1){d:{h=o[j+92>>2];n=k-h|0;p=s?0:4;e=o[p+j>>2];if((e|0)==(j|0)){break d}m=o[e+92>>2]-h|0;if((m|0)>0){break d}q=o[e+88>>2];h=u(q-o[j+88>>2]|0,i);if((h|0)>-1|(u(g,m)|0)>(u(h,n)|0)?h:0){break d}g=u(o[f+88>>2]-q|0,i);j=e;continue}break}e=o[f+p>>2];if((f|0)==(e|0)){break c}p=o[e+92>>2]-k|0;if((p|0)>-1){break c}k=o[e+88>>2];h=u(k-o[j+88>>2]|0,i);if((h|0)<1){break c}k=u(k-o[f+88>>2]|0,i);if(!k){continue}if((k|0)>-1){break c}if((u(g,p)|0)<(u(k,n)|0)){continue}break}break c}if((h|0)<=-1){e:while(1){n=o[e+92>>2];q=s?4:0;f=o[q+e>>2];while(1){k=h;j=g;h=o[g+92>>2];p=n-h|0;f:{if((e|0)==(f|0)){break f}m=o[f+92>>2]-n|0;if((m|0)<0){break f}r=o[f+88>>2];g=u(r-o[e+88>>2]|0,i);if((g|0)>-1|(u(k,m)|0)>(u(g,p)|0)?g:0){break f}h=u(r-o[j+88>>2]|0,i);e=f;g=j;continue e}g=o[j+q>>2];if((j|0)==(g|0)){f=e;break c}r=o[g+92>>2]-h|0;if((r|0)<1){f=e;break c}m=o[g+88>>2];h=u(o[e+88>>2]-m|0,i);if((h|0)>-1){f=e;break c}m=u(m-o[j+88>>2]|0,i);if(!m){continue}if((m|0)>-1){f=e;break c}if((u(k,r)|0)<(u(m,p)|0)){continue}break}break}f=e;break c}f=o[g+92>>2];i=g;while(1){g:{j=i;i=o[(s?0:4)+i>>2];if((i|0)==(g|0)|(k|0)!=o[i+88>>2]){break g}h=o[i+92>>2];n=(h|0)<=(f|0);f=h;if(n){continue}}break}g=o[e+92>>2];i=e;while(1){f=i;i=o[f+(s?4:0)>>2];if((i|0)==(e|0)|(k|0)!=o[i+88>>2]){break c}h=o[i+92>>2];n=(h|0)>=(g|0);g=h;if(n){continue}break}}s=1;h=z;z=0;i=-1;g=x;e=t;if(h){continue}break}o[j+4>>2]=f;o[f>>2]=j;o[w>>2]=l;o[l+4>>2]=w;if(o[t+88>>2]<o[x+88>>2]){o[a>>2]=t}if(o[v+88>>2]>=o[y+88>>2]){o[a+4>>2]=v}o[a+12>>2]=o[b+12>>2];o[c>>2]=w;a=1}o[d>>2]=l;return a}function tC(a,b,c,d){var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=0,F=0,G=v(0),H=v(0),I=v(0);ab(a,7,Jf(),b);m[a+48|0]=0;o[a>>2]=19436;e=o[c+12>>2];o[a+124>>2]=o[c+8>>2];o[a+128>>2]=e;e=o[c+4>>2];o[a+116>>2]=o[c>>2];o[a+120>>2]=e;e=o[c+28>>2];o[a+140>>2]=o[c+24>>2];o[a+144>>2]=e;e=o[c+20>>2];o[a+132>>2]=o[c+16>>2];o[a+136>>2]=e;e=o[c+36>>2];o[a+148>>2]=o[c+32>>2];o[a+152>>2]=e;e=o[c+44>>2];o[a+156>>2]=o[c+40>>2];o[a+160>>2]=e;e=o[c+56>>2];E=o[c+60>>2];F=o[c+52>>2];c=o[c+48>>2];m[a+180|0]=d;o[a+164>>2]=c;o[a+168>>2]=F;o[a+172>>2]=e;o[a+176>>2]=E;G=s[b+52>>2];H=s[b+56>>2];I=s[b+60>>2];q=s[a+172>>2];r=s[a+164>>2];t=s[a+168>>2];f=s[b+8>>2];g=s[b+12>>2];h=s[b+28>>2];i=s[b+20>>2];j=s[b+24>>2];u=s[a+132>>2];w=s[a+148>>2];x=s[a+152>>2];y=s[a+120>>2];z=s[a+136>>2];k=s[b+44>>2];A=s[a+156>>2];l=s[b+36>>2];B=s[a+124>>2];n=s[b+40>>2];C=s[a+140>>2];p=s[b+4>>2];D=s[a+116>>2];o[a+288>>2]=1065353216;o[a+292>>2]=0;o[a+280>>2]=1065353216;o[a+284>>2]=1060320051;o[a+272>>2]=1065353216;o[a+276>>2]=0;o[a+264>>2]=1065353216;o[a+268>>2]=1060320051;o[a+224>>2]=0;o[a+228>>2]=0;o[a+216>>2]=1065353216;o[a+220>>2]=1060320051;o[a+208>>2]=0;o[a+212>>2]=0;o[a+200>>2]=1065353216;o[a+204>>2]=1060320051;o[a+192>>2]=0;o[a+196>>2]=0;o[a+184>>2]=1065353216;o[a+188>>2]=-1082130432;o[a+112>>2]=0;o[a+96>>2]=0;o[a+80>>2]=0;o[a- -64>>2]=0;s[a+92>>2]=v(v(B*l)+v(C*n))+v(A*k);s[a+88>>2]=v(v(y*l)+v(z*n))+v(x*k);s[a+84>>2]=v(v(D*l)+v(u*n))+v(w*k);s[a+76>>2]=v(v(B*i)+v(C*j))+v(A*h);s[a+72>>2]=v(v(y*i)+v(z*j))+v(x*h);s[a+68>>2]=v(v(D*i)+v(u*j))+v(w*h);s[a+60>>2]=v(v(p*B)+v(f*C))+v(g*A);s[a+56>>2]=v(v(p*y)+v(f*z))+v(g*x);s[a+52>>2]=v(v(D*p)+v(u*f))+v(w*g);s[a+108>>2]=I+v(v(v(l*r)+v(n*t))+v(k*q));s[a+104>>2]=H+v(v(v(i*r)+v(j*t))+v(h*q));s[a+100>>2]=G+v(v(v(p*r)+v(f*t))+v(g*q));o[a+1124>>2]=0;o[a+1116>>2]=0;o[a+1120>>2]=0;m[a+1096|0]=0;o[a+256>>2]=1065353216;o[a+260>>2]=0;o[a+248>>2]=1065353216;o[a+252>>2]=1060320051;o[a+240>>2]=1065353216;o[a+244>>2]=0;o[a+232>>2]=1065353216;o[a+236>>2]=1060320051;o[a+1100>>2]=0;o[a+1104>>2]=0;o[a+300>>2]=0;b=a+1105|0;m[b|0]=0;m[b+1|0]=0;m[b+2|0]=0;m[b+3|0]=0;m[b+4|0]=0;m[b+5|0]=0;m[b+6|0]=0;m[b+7|0]=0;m[a+49|0]=1;If(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function wA(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=o[a+404>>2];if(c){if(p[a+408|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+404>>2]=0}o[a+404>>2]=0;m[a+408|0]=1;o[a+396>>2]=0;o[a+400>>2]=0;c=o[a+424>>2];if(c){if(p[a+428|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+424>>2]=0}o[a+424>>2]=0;m[a+428|0]=1;b=a;h=b;o[b+416>>2]=0;o[b+420>>2]=0;a=o[b+444>>2];if(a){if(p[b+448|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[b+444>>2]=0}o[b+444>>2]=0;m[b+448|0]=1;o[b+436>>2]=0;o[b+440>>2]=0;a=o[b+416>>2];d=o[b+420>>2];a:{if((a|0)!=(d|0)){break a}d=a?a<<1:1;if((a|0)>=(d|0)){d=a;break a}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<2,16)|0;a=o[b+416>>2]}c=o[b+424>>2];b:{c:{if((a|0)>=1){while(1){g=e<<2;o[g+f>>2]=o[c+g>>2];e=e+1|0;if((e|0)!=(a|0)){continue}break c}}if(!c){break b}}if(p[b+428|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}a=o[b+416>>2]}o[b+424>>2]=0}o[b+424>>2]=f;m[b+428|0]=1;o[b+420>>2]=d}c=o[b+424>>2];o[c+(a<<2)>>2]=1;e=a+1|0;o[b+416>>2]=e;d:{if((d|0)!=(e|0)){a=c;f=d;d=e;break d}f=d?d<<1:1;if((d|0)>=(f|0)){a=c;f=d;break d}e=0;a=0;if(f){o[7717]=o[7717]+1;a=l[o[6606]](f<<2,16)|0;d=o[b+416>>2];c=o[b+424>>2]}e:{f:{if((d|0)>=1){while(1){g=e<<2;o[g+a>>2]=o[c+g>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break f}}if(!c){break e}}if(p[b+428|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}d=o[b+416>>2]}o[b+424>>2]=0}o[b+424>>2]=a;m[b+428|0]=1;o[b+420>>2]=f}o[(d<<2)+a>>2]=2;d=d+1|0;o[b+416>>2]=d;g:{if((d|0)!=(f|0)){c=a;e=f;f=d;break g}e=f?f<<1:1;if((f|0)>=(e|0)){c=a;e=f;break g}d=0;c=0;if(e){o[7717]=o[7717]+1;c=l[o[6606]](e<<2,16)|0;f=o[b+416>>2];a=o[b+424>>2]}h:{i:{if((f|0)>=1){while(1){g=d<<2;o[g+c>>2]=o[a+g>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break i}}if(!a){break h}}if(p[b+428|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}f=o[b+416>>2]}o[b+424>>2]=0}o[b+424>>2]=c;m[b+428|0]=1;o[b+420>>2]=e}o[(f<<2)+c>>2]=3;a=f+1|0;o[b+416>>2]=a;j:{if((a|0)!=(e|0)){f=c;e=a;break j}a=e?e<<1:1;if((e|0)>=(a|0)){f=c;break j}d=0;f=0;if(a){o[7717]=o[7717]+1;f=l[o[6606]](a<<2,16)|0;e=o[b+416>>2];c=o[b+424>>2]}k:{l:{if((e|0)>=1){while(1){g=d<<2;o[g+f>>2]=o[c+g>>2];d=d+1|0;if((e|0)!=(d|0)){continue}break l}}if(!c){break k}}if(p[b+428|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}e=o[b+416>>2]}o[b+424>>2]=0}o[b+424>>2]=f;m[b+428|0]=1;o[b+420>>2]=a}o[(e<<2)+f>>2]=0;o[h+416>>2]=e+1}function Ey(a,b,c,d,e,f,g,h,i,j){var k=0,n=0,p=v(0),q=v(0),r=0,t=v(0),w=v(0),x=0,y=v(0),z=0,A=0,B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=0;if(!((f|0)<2|(g|0)<2)){B=v(f+ -1|0);C=v(g+ -1|0);o[7717]=o[7717]+1;r=u(f,g);x=l[o[6606]]((r|0)!=(r&268435455)?-1:r<<4,16)|0;A=fa((r|0)!=(r&1073741823)?-1:r<<2);while(1){w=s[b+8>>2];p=v(v(k|0)/C);w=v(w+v(p*v(s[d+8>>2]-w)));y=s[c+8>>2];y=v(v(y+v(p*v(s[e+8>>2]-y)))-w);q=s[c+4>>2];t=v(q+v(p*v(s[e+4>>2]-q)));q=s[b+4>>2];q=v(q+v(p*v(s[d+4>>2]-q)));F=v(t-q);t=s[c>>2];D=v(t+v(p*v(s[e>>2]-t)));t=s[b>>2];t=v(t+v(p*v(s[d>>2]-t)));D=v(D-t);G=u(f,k);n=0;while(1){E=n+G|0;z=x+(E<<4)|0;o[z+12>>2]=0;p=v(v(n|0)/B);s[z+8>>2]=w+v(y*p);s[z+4>>2]=q+v(F*p);s[z>>2]=t+v(D*p);o[A+(E<<2)>>2]=1065353216;n=n+1|0;if((n|0)!=(f|0)){continue}break}k=k+1|0;if((k|0)!=(g|0)){continue}break}o[7717]=o[7717]+1;k=Zb(l[o[6606]](1252,16)|0,a,r,x,A);if(h&1){s[o[k+720>>2]+88>>2]=0;m[k+924|0]=1}if(h&2){s[(o[k+720>>2]+u(f+ -1|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(h&4){s[(o[k+720>>2]+u(u(g+ -1|0,f),104)|0)+88>>2]=0;m[k+924|0]=1}if(h&8){s[(o[k+720>>2]+u((u(g+ -1|0,f)+f|0)+ -1|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(h&16){s[(o[k+720>>2]+u((f+ -1|0)/2|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(h&32){s[(o[k+720>>2]+u(u((g+ -1|0)/2|0,f),104)|0)+88>>2]=0;m[k+924|0]=1}if(h&64){s[(o[k+720>>2]+u((u((g+ -1|0)/2|0,f)+f|0)+ -1|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(h&128){s[(o[k+720>>2]+u(u(g+ -1|0,f)+((f+ -1|0)/2|0)|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(h&256){s[(o[k+720>>2]+u(u((g+ -1|0)/2|0,f)+((f+ -1|0)/2|0)|0,104)|0)+88>>2]=0;m[k+924|0]=1}if(x){if(x){o[7718]=o[7718]+1;l[o[6607]](x)}}ba(A);r=g+ -1|0;B=v(v(1)/v(r|0));C=v(v(1)/v(f+ -1|0));n=0;d=0;while(1){a=n+1|0;if((f|0)>=1){x=u(a,f);A=u(f,n);p=v(B*v(r-n|0));w=v(B*v(r+(n^-1)|0));n=0;while(1){b=n;c=n+x|0;e=n+A|0;a:{b:{c:{n=n+1|0;if((n|0)<(f|0)){z=n+A|0;va(k,e,z,0,0);if((a|0)>=(g|0)){break a}va(k,e,c,0,0);h=n+x|0;Va(k,e,c,h,0);if(!j){break c}c=(d<<2)+j|0;y=v(C*v(b|0));s[c>>2]=y;s[c+20>>2]=w;q=v(C*v(n|0));s[c+16>>2]=q;s[c+12>>2]=w;s[c+8>>2]=y;s[c+4>>2]=p;Va(k,h,z,e,0);s[c+44>>2]=p;s[c+40>>2]=y;s[c+36>>2]=p;s[c+32>>2]=q;s[c+28>>2]=w;s[c+24>>2]=q;break b}if((a|0)>=(g|0)){break a}va(k,e,c,0,0);break a}Va(k,h,z,e,0)}if(i){va(k,e,h,0,0)}d=d+12|0}if((f|0)!=(n|0)){continue}break}}n=a;if((n|0)!=(g|0)){continue}break}}return k}function tE(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,r=0,s=0,t=0,u=0;r=M-32|0;M=r;s=o[a+136>>2];d=o[(s+(c<<4)|0)+12>>2];t=(d|0)>-1?1:0-d|0;d=o[((b<<4)+s|0)+12>>2];u=(d|0)>-1?1:0-d|0;if((u|0)<=128){f=o[a+152>>2];d=f;a:{if((d|0)!=o[a+156>>2]){break a}d=f;i=d?d<<1:1;if((d|0)>=(i|0)){break a}b:{if(!i){d=0;g=f;break b}o[7717]=o[7717]+1;d=l[o[6606]](i<<5,16)|0;g=o[a+152>>2]}if((g|0)>=1){while(1){e=j<<5;h=e+d|0;e=e+o[a+160>>2]|0;k=o[e+4>>2];o[h>>2]=o[e>>2];o[h+4>>2]=k;k=o[e+28>>2];o[h+24>>2]=o[e+24>>2];o[h+28>>2]=k;k=o[e+20>>2];o[h+16>>2]=o[e+16>>2];o[h+20>>2]=k;k=o[e+12>>2];o[h+8>>2]=o[e+8>>2];o[h+12>>2]=k;j=j+1|0;if((g|0)!=(j|0)){continue}break}}g=o[a+160>>2];if(g){if(p[a+164|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+160>>2]=0}o[a+160>>2]=d;o[a+156>>2]=i;m[a+164|0]=1;d=o[a+152>>2]}o[a+152>>2]=d+1;d=r;e=o[d+4>>2];g=f<<5;f=g+o[a+160>>2]|0;o[f>>2]=o[d>>2];o[f+4>>2]=e;e=o[d+28>>2];o[f+24>>2]=o[d+24>>2];o[f+28>>2]=e;e=o[d+20>>2];o[f+16>>2]=o[d+16>>2];o[f+20>>2]=e;e=o[d+12>>2];o[f+8>>2]=o[d+8>>2];o[f+12>>2]=e;d=g+o[a+160>>2]|0;f=(b<<4)+s|0;n[d>>1]=q[f>>1];n[d+2>>1]=q[f+2>>1];n[d+4>>1]=q[f+4>>1];n[d+6>>1]=q[f+6>>1];n[d+8>>1]=q[f+8>>1];f=q[f+10>>1];o[d+16>>2]=u;o[d+12>>2]=b;n[d+10>>1]=f}if((t|0)<=128){f=o[a+152>>2];d=f;c:{if((d|0)!=o[a+156>>2]){break c}d=f;h=d?d<<1:1;if((d|0)>=(h|0)){break c}d:{if(!h){b=0;d=f;break d}o[7717]=o[7717]+1;b=l[o[6606]](h<<5,16)|0;d=o[a+152>>2]}if((d|0)>=1){j=0;while(1){e=j<<5;g=e+b|0;e=e+o[a+160>>2]|0;i=o[e+4>>2];o[g>>2]=o[e>>2];o[g+4>>2]=i;i=o[e+28>>2];o[g+24>>2]=o[e+24>>2];o[g+28>>2]=i;i=o[e+20>>2];o[g+16>>2]=o[e+16>>2];o[g+20>>2]=i;i=o[e+12>>2];o[g+8>>2]=o[e+8>>2];o[g+12>>2]=i;j=j+1|0;if((d|0)!=(j|0)){continue}break}}d=o[a+160>>2];if(d){if(p[a+164|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+160>>2]=0}o[a+160>>2]=b;o[a+156>>2]=h;m[a+164|0]=1;d=o[a+152>>2]}o[a+152>>2]=d+1;b=r;e=o[b+4>>2];f=f<<5;d=f+o[a+160>>2]|0;o[d>>2]=o[b>>2];o[d+4>>2]=e;g=o[b+28>>2];o[d+24>>2]=o[b+24>>2];o[d+28>>2]=g;g=o[b+20>>2];o[d+16>>2]=o[b+16>>2];o[d+20>>2]=g;g=o[b+12>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=g;b=f+o[a+160>>2]|0;d=(c<<4)+s|0;n[b>>1]=q[d>>1];n[b+2>>1]=q[d+2>>1];n[b+4>>1]=q[d+4>>1];n[b+6>>1]=q[d+6>>1];n[b+8>>1]=q[d+8>>1];d=q[d+10>>1];o[b+16>>2]=t;o[b+12>>2]=c;n[b+10>>1]=d}o[a+168>>2]=o[a+152>>2];M=r+32|0}function Jz(a,b,c,d,e,f,g){var h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),M=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=v(0),U=v(0),V=v(0),W=v(0);p=s[c+40>>2];q=s[c+24>>2];r=s[c+36>>2];k=s[c+20>>2];t=s[f+40>>2];z=s[f+24>>2];u=s[f+36>>2];w=s[f+20>>2];h=s[d+4>>2];x=s[c+8>>2];y=s[c+4>>2];D=s[c+32>>2];i=s[d>>2];E=s[c>>2];l=s[d+8>>2];F=s[c+16>>2];j=s[g+4>>2];G=s[f+8>>2];H=s[f+4>>2];I=s[f+32>>2];m=s[g>>2];J=s[f>>2];n=s[g+8>>2];K=s[f+16>>2];o[a+44>>2]=0;o[a+28>>2]=0;o[a+12>>2]=0;L=v(v(v(l*y)+v(k*v(0)))-v(i*r));M=v(v(v(l*E)+v(F*v(0)))-v(i*D));N=v(v(v(l*x)+v(q*v(0)))-v(i*p));O=v(v(v(n*H)+v(w*v(0)))-v(m*u));P=v(v(v(n*J)+v(K*v(0)))-v(m*I));Q=v(v(v(n*G)+v(z*v(0)))-v(m*t));C=v(v(b-v(v(v(L*v(0))-v(l*M))+v(i*N)))+v(e-v(v(v(O*v(0))-v(n*P))+v(m*Q))));R=v(v(v(E*v(0))-v(l*F))+v(h*D));S=v(v(v(y*v(0))-v(l*k))+v(h*r));T=v(v(v(x*v(0))-v(l*q))+v(h*p));U=v(v(v(J*v(0))-v(n*K))+v(j*I));V=v(v(v(H*v(0))-v(n*w))+v(j*u));W=v(v(v(G*v(0))-v(n*z))+v(j*t));A=v(v(b-v(v(v(R*v(0))+v(l*S))-v(h*T)))+v(e-v(v(v(U*v(0))+v(n*V))-v(j*W))));B=v(v(v(0)-v(v(v(h*R)-v(i*S))+v(T*v(0))))+v(v(0)-v(v(v(j*U)-v(m*V))+v(W*v(0)))));k=v(v(v(i*k)-v(h*y))+v(r*v(0)));y=v(v(v(i*F)-v(h*E))+v(D*v(0)));x=v(v(v(i*q)-v(h*x))+v(p*v(0)));u=v(v(v(m*w)-v(j*H))+v(u*v(0)));w=v(v(v(m*K)-v(j*J))+v(I*v(0)));t=v(v(v(m*z)-v(j*G))+v(t*v(0)));p=v(v(v(0)-v(v(v(k*v(0))-v(l*y))+v(i*x)))+v(v(0)-v(v(v(u*v(0))-v(n*w))+v(m*t))));q=v(v(v(v(h*N)-v(v(M*v(0))+v(l*L)))+v(0))+v(v(v(j*Q)-v(v(P*v(0))+v(n*O)))+v(0)));r=v(v(v(v(h*x)-v(v(y*v(0))+v(l*k)))+v(0))+v(v(v(j*t)-v(v(w*v(0))+v(n*u)))+v(0)));z=v(v(p*q)-v(C*r));k=v(v(b-v(v(v(h*y)-v(i*k))+v(x*v(0))))+v(e-v(v(v(j*w)-v(m*u))+v(t*v(0)))));h=v(v(v(0)-v(v(v(h*M)-v(i*L))+v(N*v(0))))+v(v(0)-v(v(v(j*P)-v(m*O))+v(Q*v(0)))));j=v(v(C*k)-v(h*p));e=v(v(v(0)-v(v(v(S*v(0))-v(l*R))+v(i*T)))+v(v(0)-v(v(v(V*v(0))-v(n*U))+v(m*W))));i=v(v(h*r)-v(k*q));b=v(v(1)/v(v(B*z)+v(v(A*j)+v(e*i))));s[a+40>>2]=v(v(C*A)-v(q*e))*b;s[a+36>>2]=v(v(r*e)-v(p*A))*b;s[a+32>>2]=z*b;s[a+24>>2]=v(v(q*B)-v(h*A))*b;s[a+20>>2]=v(v(k*A)-v(r*B))*b;s[a+16>>2]=i*b;s[a+8>>2]=v(v(h*e)-v(C*B))*b;s[a+4>>2]=v(v(p*B)-v(k*e))*b;s[a>>2]=j*b}function Ri(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=0,p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0);r=s[a+300>>2];A=s[a+452>>2];B=s[a+304>>2];a:{if(!(B>v(0))){n=0;if(!(r>v(0))){break a}}n=o[a+288>>2]<4}y=o[a+720>>2];z=s[(y+u(c,104)|0)+88>>2];b:{if(!n|z>v(0)^1){break b}n=u(c,104)+y|0;t=s[n+40>>2];g=v(t-s[b>>2]);w=s[n+44>>2];i=v(w-s[b+4>>2]);x=s[n+48>>2];h=v(x-s[b+8>>2]);q=v(v(v(g*g)+v(i*i))+v(h*h));if(!(q>v(1.1920928955078125e-7))){break b}d=s[o[a+684>>2]>>2];F=v(C(q));f=v(v(1)/F);e=v(h*f);l=v(i*f);f=v(g*f);j=s[n+72>>2];k=s[n+80>>2];m=s[n+76>>2];c:{switch(o[a+288>>2]){case 2:g=v(v(v(g*j)+v(i*m))+v(h*k))<v(0)?v(-1):v(1);p=v(k*g);D=v(j*g);E=v(m*g);g=v(v(e*p)+v(v(f*D)+v(l*E)));h=v(v(v(r*v(.5))*d)*q);r=v(s[(u(c,104)+y|0)+92>>2]*v(.5));j=v(g*v(h*r));i=v(j*v(-e));h=v(j*v(-l));j=v(j*v(-f));d:{if(!(g>v(0))){k=v(0);m=v(0);break d}k=v(0);m=v(0);if(!(g<v(.9847999811172485))){break d}k=v(v(e*E)-v(l*p));q=v(v(f*p)-v(e*D));d=v(v(C(v(v(1)-v(g*g))))*v(v(v(v(B*v(.5))*d)*F)*r));m=v(v(v(l*k)-v(f*q))*d);p=f;f=v(v(l*D)-v(f*E));k=v(v(v(p*f)-v(e*k))*d);G=v(v(v(e*q)-v(l*f))*d)}d=v(A*v(z*i));e=v(d*d);d=v(A*v(z*j));f=v(d*d);d=v(A*v(z*h));d=v(e+v(f+v(d*d)));e=v(v(v(t*t)+v(w*w))+v(x*x));if(!(d>=e^1|d>v(0)^1)){d=v(v(v(C(e))/v(C(d)))*v(.800000011920929));i=v(i*d);j=v(j*d);h=v(h*d)}a=u(c,104)+y|0;s[a+56>>2]=G+v(j+s[a+56>>2]);b=a- -64|0;s[b>>2]=m+v(i+s[b>>2]);s[a+60>>2]=k+v(h+s[a+60>>2]);return;case 0:case 1:case 3:break c;default:break b}}p=h;h=v(v(v(g*j)+v(i*m))+v(h*k))<v(0)?v(-1):v(1);k=v(k*h);j=v(j*h);m=v(m*h);i=v(v(p*k)+v(v(g*j)+v(i*m)));if(!(i>v(0))){break b}g=v(A*z);a=u(c,104)+y|0;d=v(v(v(q*v(i*s[a+92>>2]))*v(-.5))*d);i=v(r*d);h=v(B*d);d=v(v(e*i)+v(v(k*h)+v(0)));e=v(g*d);p=v(e*e);e=v(v(f*i)+v(v(j*h)+v(0)));f=v(g*e);j=v(f*f);l=v(v(l*i)+v(v(m*h)+v(0)));f=v(g*l);if(!!(v(p+v(j+v(f*f)))>v(v(v(t*t)+v(w*w))+v(x*x)))){f=v(v(1)/g);h=e;e=v(v(1)/v(C(v(v(d*d)+v(v(e*e)+v(l*l))))));g=v(h*e);i=v(d*e);e=v(l*e);d=v(v(x*i)+v(v(t*g)+v(w*e)));s[a+56>>2]=s[a+56>>2]-v(f*v(g*d));s[a+60>>2]=s[a+60>>2]-v(f*v(e*d));a=a- -64|0;s[a>>2]=s[a>>2]-v(f*v(i*d));return}s[a+56>>2]=e+s[a+56>>2];s[a+60>>2]=l+s[a+60>>2];a=a- -64|0;s[a>>2]=d+s[a>>2]}}function lj(a,b,c,d,e,f,i,j){var k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);ab(a,4,b,c);o[a+748>>2]=0;m[a+740|0]=j;o[a+736>>2]=16777216;m[a+716|0]=0;o[a+708>>2]=0;o[a+712>>2]=0;o[a+704>>2]=1065353216;o[a+696>>2]=1063675494;o[a+700>>2]=1050253722;o[a+688>>2]=0;o[a+692>>2]=-1082130432;o[a>>2]=19668;c=o[d+12>>2];o[a+608>>2]=o[d+8>>2];o[a+612>>2]=c;c=o[d+4>>2];o[a+600>>2]=o[d>>2];o[a+604>>2]=c;p=s[b+4>>2];k=s[f>>2];q=s[b+20>>2];l=s[f+4>>2];r=s[b+36>>2];n=s[f+8>>2];t=v(v(v(p*k)+v(q*l))+v(r*n));a:{if(!!(t>=v(.9999998807907104))){d=o[b+40>>2];c=o[b+8>>2];r=v(-s[b+44>>2]);q=v(-s[b+28>>2]);t=v(-s[b+12>>2]);b=o[b+24>>2];break a}if(!!(t<=v(-.9999998807907104))){d=o[b+40>>2];c=o[b+8>>2];r=s[b+44>>2];q=s[b+28>>2];t=s[b+12>>2];b=o[b+24>>2];break a}x=v(v(r*l)-v(q*n));y=v(v(p*n)-v(r*k));r=v(v(l*x)-v(k*y));u=k;k=v(v(q*k)-v(p*l));q=v(v(u*k)-v(n*x));t=v(v(n*y)-v(l*k));d=(g(k),h(0));c=(g(x),h(0));b=(g(y),h(0))}s[a+552>>2]=t;o[a+556>>2]=c;c=o[f>>2];o[a+572>>2]=b;s[a+568>>2]=q;o[a+564>>2]=0;o[a+560>>2]=c;b=o[f+4>>2];o[a+588>>2]=d;s[a+584>>2]=r;o[a+580>>2]=0;o[a+576>>2]=b;b=o[f+8>>2];o[a+596>>2]=0;o[a+592>>2]=b;x=s[i+8>>2];p=s[f+8>>2];k=s[f+4>>2];y=s[i+4>>2];A=s[i>>2];n=s[f>>2];l=v(v(x*p)+v(v(k*y)+v(A*n)));b:{if(!!(l<v(-.9999998807907104))){if(!!(v(w(p))>v(.7071067690849304))){u=k;k=v(v(1)/v(C(v(v(k*k)+v(p*p)))));l=v(u*k);n=v(k*v(-p));p=v(0);k=v(0);break b}l=v(v(1)/v(C(v(v(k*k)+v(n*n)))));n=v(n*l);p=v(l*v(-k));l=v(0);k=v(0);break b}l=v(l+v(1));z=v(C(v(l+l)));u=v(v(1)/z);l=v(v(v(y*n)-v(k*A))*u);n=v(v(v(p*A)-v(x*n))*u);p=v(v(v(k*x)-v(p*y))*u);k=v(z*v(.5))}b=o[e+4>>2];o[a+664>>2]=o[e>>2];o[a+668>>2]=b;b=o[e+12>>2];o[a+672>>2]=o[e+8>>2];o[a+676>>2]=b;u=v(v(v(r*k)+v(q*p))-v(t*n));z=v(v(v(t*k)+v(r*n))-v(q*l));B=v(v(v(t*v(-p))-v(q*n))-v(r*l));r=v(v(v(q*k)+v(t*l))-v(r*p));q=v(v(n*u)+v(v(v(k*z)-v(p*B))-v(l*r)));s[a+616>>2]=q;t=v(v(p*r)+v(v(v(k*u)-v(l*B))-v(n*z)));k=v(v(l*z)+v(v(v(k*r)-v(n*B))-v(p*u)));s[a+620>>2]=v(y*t)-v(x*k);b=o[i>>2];s[a+632>>2]=k;s[a+636>>2]=v(x*q)-v(A*t);o[a+628>>2]=0;o[a+624>>2]=b;b=o[i+4>>2];s[a+652>>2]=v(A*k)-v(y*q);s[a+648>>2]=t;o[a+644>>2]=0;o[a+640>>2]=b;b=o[i+8>>2];s[a+732>>2]=j?v(-1):v(1);o[a+660>>2]=0;o[a+656>>2]=b}function HB(a,b,c,d,e,f){var g=v(0),h=v(0),i=0,j=v(0),k=v(0),l=0,m=0,n=0,p=0,q=v(0),r=v(0),t=0,w=0,x=v(0),y=v(0),z=v(0);p=o[a+76>>2];t=o[b+140>>2];w=o[f+64>>2];a:{if(w&4){n=o[a+16>>2];b=o[(n+u(d,244)|0)+240>>2];m=o[(u(c,244)+n|0)+240>>2];i=u(t,152)+p|0;g=v(s[e+124>>2]*s[f+60>>2]);s[i+100>>2]=g;if(m){j=s[m+356>>2];k=s[i+24>>2];q=s[m+352>>2];r=s[i+20>>2];a=u(c,244)+n|0;h=s[m+344>>2];s[a+64>>2]=v(v(g*v(v(h*s[i+16>>2])*s[m+348>>2]))*s[a+112>>2])+s[a+64>>2];s[a+68>>2]=v(v(g*v(q*v(h*r)))*s[a+116>>2])+s[a+68>>2];s[a+72>>2]=v(v(g*v(j*v(h*k)))*s[a+120>>2])+s[a+72>>2];h=s[i+72>>2];j=s[i+68>>2];s[a+80>>2]=v(v(g*s[a+96>>2])*s[i+64>>2])+s[a+80>>2];k=s[a+104>>2];s[a+84>>2]=v(j*v(g*s[a+100>>2]))+s[a+84>>2];s[a+88>>2]=v(h*v(g*k))+s[a+88>>2]}if(b){l=u(t,152)+p|0;j=s[l+88>>2];k=s[l+84>>2];q=s[l+80>>2];r=s[b+356>>2];x=s[l+56>>2];y=s[b+352>>2];z=s[l+52>>2];a=u(d,244)+n|0;h=s[b+344>>2];g=s[i+100>>2];s[a+64>>2]=s[a+64>>2]+v(v(v(v(h*s[l+48>>2])*s[b+348>>2])*g)*s[a+112>>2]);s[a+68>>2]=s[a+68>>2]+v(v(g*v(y*v(h*z)))*s[a+116>>2]);s[a+72>>2]=s[a+72>>2]+v(v(g*v(r*v(h*x)))*s[a+120>>2]);s[a+80>>2]=s[a+80>>2]+v(q*v(g*s[a+96>>2]));h=s[a+104>>2];s[a+84>>2]=s[a+84>>2]+v(k*v(g*s[a+100>>2]));s[a+88>>2]=s[a+88>>2]+v(j*v(h*g))}if(!(w&16)){break a}l=t+1|0;i=u(l,152)+p|0;g=v(s[e+128>>2]*s[f+60>>2]);s[i+100>>2]=g;if(m){j=s[i+24>>2];k=s[i+20>>2];a=u(c,244)+n|0;h=s[m+344>>2];s[a+64>>2]=v(v(g*v(h*s[i+16>>2]))*s[a+112>>2])+s[a+64>>2];s[a+68>>2]=v(v(g*v(h*k))*s[a+116>>2])+s[a+68>>2];s[a+72>>2]=v(v(g*v(h*j))*s[a+120>>2])+s[a+72>>2];h=s[i+72>>2];j=s[i+68>>2];s[a+80>>2]=v(v(g*s[a+96>>2])*s[i+64>>2])+s[a+80>>2];k=s[a+104>>2];s[a+84>>2]=v(j*v(g*s[a+100>>2]))+s[a+84>>2];s[a+88>>2]=v(h*v(g*k))+s[a+88>>2]}if(!b){break a}c=u(l,152)+p|0;j=s[c+88>>2];k=s[c+84>>2];q=s[c+56>>2];r=s[c+52>>2];x=s[c+48>>2];h=s[b+344>>2];a=u(d,244)+n|0;g=s[i+100>>2];s[a+80>>2]=s[a+80>>2]+v(s[c+80>>2]*v(s[a+96>>2]*g));s[a+64>>2]=s[a+64>>2]+v(v(g*v(h*x))*s[a+112>>2]);s[a+68>>2]=s[a+68>>2]+v(v(g*v(h*r))*s[a+116>>2]);s[a+72>>2]=s[a+72>>2]+v(v(g*v(h*q))*s[a+120>>2]);h=s[a+104>>2];s[a+84>>2]=s[a+84>>2]+v(k*v(g*s[a+100>>2]));s[a+88>>2]=s[a+88>>2]+v(j*v(h*g));return}a=u(t,152)+p|0;o[a+100>>2]=0;if(!(w&16)){break a}o[a+252>>2]=0}}function py(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;if(!qy(a,b,c,f)){return 0}b=o[a+4>>2];a:{if((b|0)<1){c=0;break a}c=0;while(1){q=r<<2;g=o[q+o[a+12>>2]>>2];if(g){b:{c:{if((h|0)!=(j|0)){break c}i=h?h<<1:1;if((h|0)>=(i|0)){break c}b=0;f=0;if(i){o[7717]=o[7717]+1;f=l[o[6606]](i<<2,16)|0}d:{if((h|0)>=1){while(1){k=b<<2;o[k+f>>2]=o[c+k>>2];b=b+1|0;if((h|0)!=(b|0)){continue}break d}}if(!c){break b}}if(c){o[7718]=o[7718]+1;l[o[6607]](c)}break b}i=h;f=c}o[(j<<2)+f>>2]=o[g>>2];c=o[o[a+12>>2]+q>>2];e:{f:{h=j+1|0;if((h|0)!=(i|0)){break f}k=i?i<<1:1;if((i|0)>=(k|0)){break f}b=0;g=0;if(k){o[7717]=o[7717]+1;g=l[o[6606]](k<<2,16)|0}g:{if((i|0)<=0){if(f){break g}break e}while(1){n=b<<2;o[n+g>>2]=o[f+n>>2];b=b+1|0;if((i|0)!=(b|0)){continue}break}}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}break e}k=i;g=f}o[(h<<2)+g>>2]=o[c+4>>2];f=o[o[a+12>>2]+q>>2];h:{i:{i=j+2|0;if((i|0)!=(k|0)){break i}h=k?k<<1:1;if((k|0)>=(h|0)){break i}b=0;c=0;if(h){o[7717]=o[7717]+1;c=l[o[6606]](h<<2,16)|0}j:{if((k|0)<=0){if(g){break j}break h}while(1){n=b<<2;o[n+c>>2]=o[g+n>>2];b=b+1|0;if((k|0)!=(b|0)){continue}break}}if(g){o[7718]=o[7718]+1;l[o[6607]](g)}break h}h=k;c=g}o[(i<<2)+c>>2]=o[f+8>>2];f=o[a+12>>2];b=o[f+q>>2];o[(o[b+24>>2]<<2)+f>>2]=0;if(b){o[7718]=o[7718]+1;l[o[6607]](b)}j=j+3|0;b=o[a+4>>2]}r=r+1|0;if((r|0)<(b|0)){continue}break}}o[e>>2]=(j|0)/3;e=o[d+4>>2];if((j|0)>(e|0)){k:{if(o[d+8>>2]>=(j|0)){g=o[d+12>>2];break k}b=0;h=e;g=0;if(j){o[7717]=o[7717]+1;g=l[o[6606]](j<<2,16)|0;h=o[d+4>>2]}f=o[d+12>>2];l:{m:{if((h|0)>=1){while(1){i=b<<2;o[i+g>>2]=o[f+i>>2];b=b+1|0;if((h|0)!=(b|0)){continue}break m}}if(f){break m}break l}if(p[d+16|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}}o[d+12>>2]=g;m[d+16|0]=1;o[d+8>>2]=j}$((e<<2)+g|0,0,j-e<<2)}o[d+4>>2]=j;if((j|0)>=1){d=o[d+12>>2];b=0;while(1){e=b<<2;o[e+d>>2]=o[c+e>>2];b=b+1|0;if((j|0)!=(b|0)){continue}break}}b=o[a+4>>2];if((b|0)<=-1){if(o[a+8>>2]<=-1){d=o[a+12>>2];if(d){if(p[a+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+12>>2]=0}m[a+16|0]=1;o[a+8>>2]=0;o[a+12>>2]=0}while(1){o[o[a+12>>2]+(b<<2)>>2]=0;d=b+1|0;e=d>>>0>=b>>>0;b=d;if(e){continue}break}}o[a+4>>2]=0;if(c){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}return 1}function $i(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0),r=v(0),t=0;e=M-240|0;M=e;i=s[c>>2];f=s[c+4>>2];g=s[c+8>>2];o[a+124>>2]=0;s[a+120>>2]=g+s[a+100>>2];s[a+116>>2]=f+s[a+96>>2];s[a+112>>2]=i+s[a+92>>2];o[e+132>>2]=1065353216;c=e;o[c+136>>2]=0;o[c+140>>2]=0;o[c+124>>2]=0;o[c+128>>2]=0;o[c+152>>2]=1065353216;o[c+236>>2]=0;o[c+228>>2]=0;o[c+232>>2]=0;o[c+216>>2]=1065353216;o[c+220>>2]=0;o[c+224>>2]=0;o[c+172>>2]=0;o[c+164>>2]=0;o[c+168>>2]=0;o[c+156>>2]=0;o[c+160>>2]=0;o[c+196>>2]=1065353216;o[c+200>>2]=0;o[c+204>>2]=0;o[c+188>>2]=0;o[c+192>>2]=0;o[c+144>>2]=0;o[c+148>>2]=0;o[c+112>>2]=1065353216;o[c+116>>2]=0;o[c+120>>2]=0;o[c+208>>2]=0;o[c+212>>2]=0;o[c+180>>2]=0;o[c+184>>2]=0;o[c+176>>2]=1065353216;t=c+52|0;c=10;i=v(1);while(1){a:{if(!c){break a}d=o[a+96>>2];o[e+224>>2]=o[a+92>>2];o[e+228>>2]=d;d=o[a+104>>2];o[e+232>>2]=o[a+100>>2];o[e+236>>2]=d;d=o[a+124>>2];o[e+168>>2]=o[a+120>>2];o[e+172>>2]=d;h=o[a+116>>2];d=e;o[d+160>>2]=o[a+112>>2];o[d+164>>2]=h;f=s[a+92>>2];g=s[a+112>>2];j=s[a+96>>2];k=s[a+116>>2];m=s[a+100>>2];r=s[a+120>>2];h=o[a+8>>2];o[d+84>>2]=0;o[d+12>>2]=1065353216;o[d+44>>2]=0;o[d+48>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;o[d+28>>2]=0;o[d+32>>2]=0;o[d+20>>2]=0;o[d+24>>2]=0;o[d+104>>2]=0;o[d+108>>2]=0;s[d+100>>2]=m-r;s[d+96>>2]=j-k;s[d+92>>2]=f-g;o[d+88>>2]=h;o[d+8>>2]=20308;h=o[h+188>>2];n[d+16>>1]=q[h+4>>1];n[d+18>>1]=q[h+6>>1];d=o[a+12>>2];f=v(l[o[o[d>>2]+48>>2]](d));d=o[a+12>>2];l[o[o[d>>2]+44>>2]](d,v(f+s[a+56>>2]));b:{if(p[a+170|0]){fd(o[a+8>>2],o[a+12>>2],e+176|0,e+112|0,e+8|0,s[b+56>>2]);break b}Kb(b,o[a+12>>2],e+176|0,e+112|0,e+8|0,s[b+56>>2])}d=o[a+12>>2];l[o[o[d>>2]+44>>2]](d,f);k=s[e+12>>2];c:{if(!!(k<v(1))){cB(a,t);f=v(s[a+112>>2]-s[a+92>>2]);g=v(s[a+116>>2]-s[a+96>>2]);j=v(s[a+120>>2]-s[a+100>>2]);m=v(v(v(f*f)+v(g*g))+v(j*j));if(!(m>v(1.1920928955078125e-7))){break a}r=f;f=v(v(1)/v(C(m)));if(!(v(v(v(v(r*f)*s[a+76>>2])+v(v(g*f)*s[a+80>>2]))+v(v(j*f)*s[a+84>>2]))<=v(0))){break c}break a}d=o[a+116>>2];o[a+92>>2]=o[a+112>>2];o[a+96>>2]=d;d=o[a+124>>2];o[a+100>>2]=o[a+120>>2];o[a+104>>2]=d}c=c+ -1|0;i=v(i-k);if(i>v(.009999999776482582)){continue}}break}M=e+240|0}function Um(a,b,c){var d=0,e=v(0),f=v(0);d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;a=M-16|0;o[a+12>>2]=o[d+28>>2];b=M-16|0;s[b+12>>2]=s[o[a+12>>2]+8>>2];a:{if(v(w(s[b+12>>2]))>v(.7071067690849304)){a=M-16|0;o[a+12>>2]=o[d+28>>2];e=s[o[a+12>>2]+4>>2];a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(e*s[o[a+12>>2]+4>>2]);a=M-16|0;o[a+12>>2]=o[d+28>>2];f=s[o[a+12>>2]+8>>2];a=M-16|0;o[a+12>>2]=o[d+28>>2];s[d+16>>2]=e+v(f*s[o[a+12>>2]+8>>2]);a=M-16|0;s[a+12>>2]=s[d+16>>2];s[d+12>>2]=v(1)/v(C(s[a+12>>2]));a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]>>2]=0;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(v(-s[o[a+12>>2]+8>>2])*s[d+12>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]+4>>2]=e;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(s[o[a+12>>2]+4>>2]*s[d+12>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]+8>>2]=e;e=v(s[d+16>>2]*s[d+12>>2]);a=M-16|0;o[a+12>>2]=o[d+20>>2];s[o[a+12>>2]>>2]=e;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(-s[o[a+12>>2]>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];e=v(e*s[o[a+12>>2]+8>>2]);a=M-16|0;o[a+12>>2]=o[d+20>>2];s[o[a+12>>2]+4>>2]=e;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=s[o[a+12>>2]>>2];a=M-16|0;o[a+12>>2]=o[d+24>>2];e=v(e*s[o[a+12>>2]+4>>2]);break a}a=M-16|0;o[a+12>>2]=o[d+28>>2];e=s[o[a+12>>2]>>2];a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(e*s[o[a+12>>2]>>2]);a=M-16|0;o[a+12>>2]=o[d+28>>2];f=s[o[a+12>>2]+4>>2];a=M-16|0;o[a+12>>2]=o[d+28>>2];s[d+8>>2]=e+v(f*s[o[a+12>>2]+4>>2]);a=M-16|0;s[a+12>>2]=s[d+8>>2];s[d+4>>2]=v(1)/v(C(s[a+12>>2]));a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(v(-s[o[a+12>>2]+4>>2])*s[d+4>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]>>2]=e;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(s[o[a+12>>2]>>2]*s[d+4>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]+4>>2]=e;a=M-16|0;o[a+12>>2]=o[d+24>>2];s[o[a+12>>2]+8>>2]=0;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=v(-s[o[a+12>>2]+8>>2]);a=M-16|0;o[a+12>>2]=o[d+24>>2];e=v(e*s[o[a+12>>2]+4>>2]);a=M-16|0;o[a+12>>2]=o[d+20>>2];s[o[a+12>>2]>>2]=e;a=M-16|0;o[a+12>>2]=o[d+28>>2];e=s[o[a+12>>2]+8>>2];a=M-16|0;o[a+12>>2]=o[d+24>>2];e=v(e*s[o[a+12>>2]>>2]);a=M-16|0;o[a+12>>2]=o[d+20>>2];s[o[a+12>>2]+4>>2]=e;e=v(s[d+8>>2]*s[d+4>>2])}a=M-16|0;o[a+12>>2]=o[d+20>>2];s[o[a+12>>2]+8>>2]=e;M=d+32|0}function vg(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;o[a>>2]=5228;o[7717]=o[7717]+1;c=l[o[6606]](360,16)|0;o[c+308>>2]=953267991;m[c+332|0]=p[c+332|0]&240;o[a+24>>2]=c;e=o[b+20>>2];o[7717]=o[7717]+1;c=l[o[6606]](4,16)|0;o[c>>2]=e?4440:4648;o[a+28>>2]=c;o[7717]=o[7717]+1;d=l[o[6606]](24,16)|0;e=o[a+24>>2];c=o[a+28>>2];o[d+16>>2]=0;o[d+20>>2]=3;o[d>>2]=9788;m[d+4|0]=0;o[d+12>>2]=e;o[d+8>>2]=c;o[a+32>>2]=d;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5344;m[c+4|0]=0;o[a+36>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5468;m[c+4|0]=0;o[a+40>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5560;m[c+4|0]=0;o[a+44>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5640;m[c+4|0]=0;o[a+48>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5728;m[c+4|0]=0;o[a+52>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5812;m[c+4|0]=0;o[a+56>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5880;m[c+4|0]=0;o[a+60>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5964;m[c+4|0]=0;o[a+76>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=5964;o[a+80>>2]=c;m[c+4|0]=1;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=6048;m[c+4|0]=0;o[a+72>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](16,16)|0;o[c+8>>2]=1;o[c+12>>2]=0;o[c>>2]=6124;m[c+4|0]=0;o[a+88>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](16,16)|0;o[c+8>>2]=1;o[c+12>>2]=0;o[c>>2]=6124;o[a+84>>2]=c;m[c+4|0]=1;h=o[b+16>>2];c=o[b>>2];a:{if(c){o[a+8>>2]=c;m[a+12|0]=0;break a}m[a+12|0]=1;o[7717]=o[7717]+1;g=l[o[6606]](20,16)|0;c=o[b+8>>2];o[g+4>>2]=c;o[g>>2]=772;o[7717]=o[7717]+1;e=l[o[6606]](u(c,772),16)|0;o[g+12>>2]=e;o[g+16>>2]=e;c=o[g+4>>2];o[g+8>>2]=c;f=c+ -1|0;b:{if(!f){c=e;break b}d=o[g>>2];while(1){c=d+e|0;o[e>>2]=c;e=c;f=f+ -1|0;if(f){continue}break}}o[c>>2]=0;o[a+8>>2]=g}c=o[b+4>>2];if(c){o[a+16>>2]=c;m[a+20|0]=0;return}m[a+20|0]=1;o[7717]=o[7717]+1;d=l[o[6606]](20,16)|0;c=o[b+12>>2];o[d+4>>2]=c;b=(h|0)>80?h:80;o[d>>2]=b;o[7717]=o[7717]+1;e=l[o[6606]](u(b,c),16)|0;o[d+12>>2]=e;o[d+16>>2]=e;b=o[d+4>>2];o[d+8>>2]=b;f=b+ -1|0;c:{if(!f){c=e;break c}b=o[d>>2];while(1){c=b+e|0;o[e>>2]=c;e=c;f=f+ -1|0;if(f){continue}break}}o[c>>2]=0;o[a+16>>2]=d}function Bg(a,b,c,d,e){var f=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=0,n=v(0),p=v(0),q=v(0),r=v(0),t=0,u=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),D=0,E=v(0),F=v(0),G=v(0),H=v(0),I=0,J=v(0),K=v(0),L=v(0),N=0,O=0,P=0,Q=0;m=M+ -64|0;o[m+60>>2]=c;o[m+56>>2]=b;o[m+52>>2]=a;f=s[b>>2];k=s[a>>2];p=s[b+4>>2];j=s[a+4>>2];r=s[b+8>>2];n=s[a+8>>2];o[m+12>>2]=0;i=v(n-r);s[m+8>>2]=i;q=v(j-p);s[m+4>>2]=q;l=v(k-f);s[m>>2]=l;w=s[c>>2];x=s[c+4>>2];y=s[c+8>>2];o[m+44>>2]=0;o[m+28>>2]=0;E=v(y-n);s[m+40>>2]=E;F=v(x-j);s[m+36>>2]=F;y=v(r-y);s[m+24>>2]=y;A=v(p-x);s[m+20>>2]=A;G=v(w-k);s[m+32>>2]=G;B=v(f-w);s[m+16>>2]=B;p=v(-1);r=v(v(l*A)-v(q*B));w=v(v(q*y)-v(i*A));x=v(v(i*B)-v(l*y));H=v(v(r*r)+v(v(w*w)+v(x*x)));if(!(H>v(0))){return v(-1)}while(1){a:{if(!(v(v(v(k*v(v(r*q)-v(x*i)))+v(j*v(v(w*i)-v(r*l))))+v(v(v(x*l)-v(w*q))*n))>v(0))){f=p;break a}P=z<<2;Q=o[P+4384>>2];t=Q<<2;I=o[t+(m+52|0)>>2];J=s[I>>2];i=v(J-k);K=s[I+4>>2];q=v(K-j);L=s[I+8>>2];l=v(L-n);f=v(v(v(i*i)+v(q*q))+v(l*l));u=v(-1);b:{if(!(f>v(0))){break b}f=v(v(-v(v(v(k*i)+v(j*q))+v(n*l)))/f);if(!!(f>=v(1))){N=1065353216;O=0;D=2;u=v(v(v(J*J)+v(K*K))+v(L*L));break b}if(!!(f<=v(0))){N=0;O=1065353216;D=1;u=v(v(v(k*k)+v(j*j))+v(n*n));break b}O=(g(v(v(1)-f)),h(0));N=(g(f),h(0));D=3;n=v(n+v(l*f));k=v(k+v(i*f));f=v(j+v(q*f));u=v(v(n*n)+v(v(k*k)+v(f*f)))}f=u;if(!(!!(f<p)|p<v(0))){f=p;break a}o[e>>2]=(0-(D&1)&1<<z)+(1<<Q&D<<30>>31);o[d+P>>2]=O;o[d+t>>2]=N;o[(o[t+4384>>2]<<2)+d>>2]=0}z=z+1|0;if((z|0)!=3){t=(z<<4)+m|0;l=s[t>>2];i=s[t+8>>2];q=s[t+4>>2];t=o[(m+52|0)+(z<<2)>>2];n=s[t+8>>2];j=s[t+4>>2];k=s[t>>2];p=f;continue}break}if(f<v(0)){f=s[a+8>>2];p=s[a>>2];k=s[a+4>>2];o[e>>2]=7;k=v(v(v(v(w*p)+v(x*k))+v(r*f))/H);f=v(x*k);j=v(s[b+4>>2]-f);p=v(w*k);n=v(s[b>>2]-p);i=v(v(B*j)-v(A*n));u=v(i*i);k=v(r*k);i=v(s[b+8>>2]-k);j=v(v(A*i)-v(y*j));l=v(j*j);j=v(v(y*n)-v(B*i));u=v(C(v(u+v(l+v(j*j)))));j=v(C(H));n=v(u/j);s[d>>2]=n;i=v(s[c+4>>2]-f);q=v(s[c>>2]-p);l=v(v(G*i)-v(F*q));u=v(l*l);l=v(s[c+8>>2]-k);i=v(v(F*l)-v(E*i));r=v(i*i);i=v(v(E*q)-v(G*l));j=v(v(C(v(u+v(r+v(i*i)))))/j);s[d+4>>2]=j;s[d+8>>2]=v(1)-v(n+j);f=v(v(k*k)+v(v(p*p)+v(f*f)))}return f}function oB(a,b){a=a|0;b=v(b);var c=0,d=v(0),e=0,f=v(0),g=0,h=0,i=v(0),j=v(0),k=v(0),m=0,n=v(0),q=v(0),r=0,t=v(0),w=v(0),x=v(0),y=v(0),A=0,B=v(0);h=M-32|0;M=h;e=o[a+136>>2];if((e|0)>0){while(1){Ef(a,c,0);c=c+1|0;e=o[a+136>>2];if((c|0)<(e|0)){continue}break}}c=o[a+116>>2];d=s[c+312>>2];f=v(d*d);d=s[c+316>>2];f=v(f+v(d*d));d=s[c+320>>2];d=v(v(C(v(f+v(d*d))))*v(3.5999999046325684));s[a+112>>2]=d;g=c+(o[a+128>>2]<<2)|0;if(v(v(v(s[g+4>>2]*s[c+312>>2])+v(s[g+20>>2]*s[c+316>>2]))+v(s[g+36>>2]*s[c+320>>2]))<v(0)){s[a+112>>2]=-d}a:{if((e|0)<1){break a}c=0;while(1){bj(a,o[a+144>>2]+u(c,284)|0);c=c+1|0;e=o[a+136>>2];if((c|0)<(e|0)){continue}break}if((e|0)<1){break a}f=v(v(1)/s[o[a+116>>2]+344>>2]);e=0;while(1){d=v(0);c=o[a+144>>2]+u(e,284)|0;if(p[c+84|0]){d=s[c+272>>2];d=v(z(v(f*v(v(v(s[c+216>>2]*v(s[c+204>>2]-s[c+32>>2]))*s[c+268>>2])-v(d*s[(d<v(0)?c+220|0:c+224|0)>>2]))),v(0)))}s[c+276>>2]=d;e=e+1|0;c=o[a+136>>2];if((e|0)<(c|0)){continue}break}if((c|0)<1){break a}g=0;while(1){c=o[a+144>>2]+u(g,284)|0;d=s[c+248>>2];f=s[c+276>>2];i=s[c>>2];j=s[c+4>>2];k=s[c+8>>2];o[h+28>>2]=0;d=f>d?d:f;s[h+24>>2]=v(k*d)*b;s[h+20>>2]=v(d*j)*b;s[h+16>>2]=v(i*d)*b;d=s[c+16>>2];e=o[a+116>>2];f=s[e+52>>2];i=s[c+20>>2];j=s[e+56>>2];k=s[c+24>>2];q=s[e+60>>2];o[h+12>>2]=0;s[h+8>>2]=k-q;s[h+4>>2]=i-j;s[h>>2]=d-f;Ca(e,h+16|0,h);g=g+1|0;if((g|0)<o[a+136>>2]){continue}break}}l[o[o[a>>2]+20>>2]](a,b);r=o[a+136>>2];if((r|0)>=1){A=o[a+144>>2];e=o[a+116>>2];g=0;while(1){c=u(g,284)+A|0;b:{if(p[c+84|0]){m=e+(o[a+128>>2]<<2)|0;f=s[m+36>>2];i=s[m+4>>2];j=s[c>>2];k=s[m+20>>2];q=s[c+4>>2];n=s[c+8>>2];d=v(v(v(i*j)+v(k*q))+v(f*n));t=v(s[c+40>>2]-s[e+56>>2]);w=s[e+328>>2];x=v(s[c+36>>2]-s[e+52>>2]);y=s[e+332>>2];B=v(v(v(v(t*w)-v(x*y))+s[e+320>>2])*v(f-v(n*d)));f=v(s[c+44>>2]-s[e+60>>2]);n=s[e+336>>2];d=v(v(v(B+v(v(v(v(v(y*f)-v(t*n))+s[e+312>>2])*v(i-v(j*d)))+v(v(v(v(x*n)-v(f*w))+s[e+316>>2])*v(k-v(q*d)))))*b)/s[c+212>>2]);s[c+240>>2]=d;m=c+236|0;i=s[c+236>>2];f=d;break b}m=c+236|0;d=s[c+236>>2];i=s[c+240>>2];f=i}s[m>>2]=i+d;s[c+240>>2]=f*v(.9900000095367432);g=g+1|0;if((r|0)!=(g|0)){continue}break}}M=h+32|0}function mb(a,b,c,d){var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=v(0),m=v(0),n=v(0),p=v(0),q=0,r=0,t=v(0),u=v(0),w=v(0),x=v(0),y=0,z=v(0),A=0,B=0,D=0,E=0,F=v(0);t=s[c+4>>2];u=s[c+8>>2];i=v(u*v(0));l=v(t-i);p=s[c>>2];m=v(i-p);j=v(p*v(0));f=v(t*v(0));g=v(j-f);w=v(C(v(v(v(l*l)+v(m*m))+v(g*g))));n=v(v(1)/w);h=v(p-f);f=v(f-u);j=v(i-j);x=v(C(v(v(h*h)+v(v(f*f)+v(j*j)))));i=v(v(1)/x);e=w>x;l=e?v(l*n):v(f*i);m=e?v(m*n):v(j*i);j=v(v(t*l)-v(p*m));n=e?v(g*n):v(h*i);w=v(v(p*n)-v(u*l));x=v(v(u*m)-v(t*n));A=o[d+12>>2];B=(b|0)<1;a:{while(1){k=-1;if(!B){i=s[c+8>>2];f=s[c+4>>2];g=s[c>>2];e=0;while(1){b:{if(!o[(e<<2)+A>>2]){break b}if((k|0)!=-1){d=(e<<4)+a|0;h=v(v(v(g*s[d>>2])+v(f*s[d+4>>2]))+v(i*s[d+8>>2]));d=(k<<4)+a|0;if(!(h>v(v(v(g*s[d>>2])+v(f*s[d+4>>2]))+v(i*s[d+8>>2])))){break b}}k=e}e=e+1|0;if((e|0)!=(b|0)){continue}break}}q=-1;e=0;D=(k<<2)+A|0;if(o[D>>2]==3){break a}c:{while(1){y=q;E=e;i=v(e|0);g=v(i*v(.01745329238474369));f=ra(g);g=qa(g);q=-1;if(!B){h=v(u+v(v(v(n*g)+v(j*f))*v(.02500000037252903)));z=v(t+v(v(v(m*g)+v(w*f))*v(.02500000037252903)));f=v(p+v(v(v(l*g)+v(x*f))*v(.02500000037252903)));e=0;while(1){d:{if(!o[(e<<2)+A>>2]){break d}if((q|0)!=-1){d=(e<<4)+a|0;g=v(v(v(f*s[d>>2])+v(z*s[d+4>>2]))+v(h*s[d+8>>2]));d=(q<<4)+a|0;if(!(g>v(v(v(f*s[d>>2])+v(z*s[d+4>>2]))+v(h*s[d+8>>2])))){break d}}q=e}e=e+1|0;if((e|0)!=(b|0)){continue}break}}if((k|0)==(q|0)?(k|0)==(y|0):0){break c}e:{if((y|0)==-1|(q|0)==(y|0)){break e}f=v(i+v(-40));if(!(f<=i)){break e}while(1){h=v(f*v(.01745329238474369));g=ra(h);h=qa(h);d=-1;if(!B){z=v(u+v(v(v(n*h)+v(j*g))*v(.02500000037252903)));F=v(t+v(v(v(m*h)+v(w*g))*v(.02500000037252903)));g=v(p+v(v(v(l*h)+v(x*g))*v(.02500000037252903)));e=0;while(1){f:{if(!o[(e<<2)+A>>2]){break f}if((d|0)!=-1){r=(e<<4)+a|0;h=v(v(v(g*s[r>>2])+v(F*s[r+4>>2]))+v(z*s[r+8>>2]));r=(d<<4)+a|0;if(!(h>v(v(v(g*s[r>>2])+v(F*s[r+4>>2]))+v(z*s[r+8>>2])))){break f}}d=e}e=e+1|0;if((e|0)!=(b|0)){continue}break}}if((d|0)==(k|0)?(k|0)==(y|0):0){break c}y=d;f=v(f+v(5));if(f<=i){continue}break}}e=E+45|0;if(E>>>0<316){continue}break}o[D>>2]=0;continue}break}o[D>>2]=3}return k}function Uc(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0);E=s[b+52>>2];F=s[b+56>>2];n=s[a+96>>2];q=s[a+100>>2];r=s[a+104>>2];d=s[b+20>>2];e=s[b+24>>2];t=s[a- -64>>2];u=s[a+80>>2];w=s[a+52>>2];x=s[a+68>>2];y=s[a+84>>2];z=s[a+56>>2];f=s[b+36>>2];A=s[a+72>>2];g=s[b+40>>2];B=s[a+88>>2];D=s[b+48>>2];h=s[b+8>>2];i=s[b>>2];j=s[b+4>>2];k=s[b+16>>2];C=s[a+48>>2];l=s[b+32>>2];o[a+1124>>2]=0;o[a+1108>>2]=0;o[a+1092>>2]=0;o[a+1076>>2]=0;s[a+1104>>2]=v(v(z*l)+v(A*f))+v(B*g);s[a+1100>>2]=v(v(w*l)+v(x*f))+v(y*g);s[a+1096>>2]=v(v(C*l)+v(t*f))+v(u*g);s[a+1088>>2]=v(v(z*k)+v(A*d))+v(B*e);s[a+1084>>2]=v(v(w*k)+v(x*d))+v(y*e);s[a+1080>>2]=v(v(C*k)+v(t*d))+v(u*e);s[a+1072>>2]=v(v(i*z)+v(j*A))+v(h*B);s[a+1068>>2]=v(v(i*w)+v(j*x))+v(h*y);s[a+1064>>2]=v(v(C*i)+v(t*j))+v(u*h);s[a+1120>>2]=F+v(v(v(l*n)+v(f*q))+v(g*r));s[a+1116>>2]=E+v(v(v(k*n)+v(d*q))+v(e*r));s[a+1112>>2]=D+v(v(v(i*n)+v(j*q))+v(h*r));E=s[c+52>>2];F=s[c+56>>2];n=s[a+160>>2];q=s[a+164>>2];r=s[a+168>>2];d=s[c+20>>2];e=s[c+24>>2];t=s[a+128>>2];u=s[a+144>>2];w=s[a+116>>2];x=s[a+132>>2];y=s[a+148>>2];z=s[a+120>>2];A=s[a+136>>2];f=s[c+36>>2];B=s[a+152>>2];g=s[c+40>>2];D=s[c+48>>2];h=s[c+8>>2];i=s[c>>2];j=s[c+4>>2];k=s[c+16>>2];C=s[a+112>>2];l=s[c+32>>2];o[a+1188>>2]=0;o[a+1172>>2]=0;o[a+1156>>2]=0;o[a+1140>>2]=0;s[a+1168>>2]=v(v(z*l)+v(A*f))+v(B*g);s[a+1164>>2]=v(v(w*l)+v(x*f))+v(y*g);s[a+1160>>2]=v(v(C*l)+v(t*f))+v(u*g);s[a+1152>>2]=v(v(z*k)+v(A*d))+v(B*e);s[a+1148>>2]=v(v(w*k)+v(x*d))+v(y*e);s[a+1144>>2]=v(v(C*k)+v(t*d))+v(u*e);s[a+1136>>2]=v(v(i*z)+v(j*A))+v(h*B);s[a+1132>>2]=v(v(i*w)+v(j*x))+v(h*y);s[a+1128>>2]=v(v(C*i)+v(t*j))+v(u*h);s[a+1184>>2]=F+v(v(v(l*n)+v(f*q))+v(g*r));s[a+1180>>2]=E+v(v(v(k*n)+v(d*q))+v(e*r));s[a+1176>>2]=D+v(v(v(i*n)+v(j*q))+v(h*r));_C(a);$C(a);if(p[a+1301|0]){e=s[o[a+28>>2]+344>>2];d=s[o[a+32>>2]+344>>2];m[a+1280|0]=e<v(1.1920928955078125e-7)|d<v(1.1920928955078125e-7);D=d;d=v(e+d);d=d>v(0)?v(D/d):v(.5);s[a+1272>>2]=d;s[a+1276>>2]=v(1)-d}}function Oi(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0;d=M+ -64|0;h=243703;g=o[a+732>>2];if((g|0)>=1){while(1){e=o[a+740>>2];c=e+u(f,52)|0;o[d+56>>2]=o[c+48>>2];b=o[c+44>>2];o[d+48>>2]=o[c+40>>2];o[d+52>>2]=b;b=o[c+36>>2];o[d+40>>2]=o[c+32>>2];o[d+44>>2]=b;b=o[c+28>>2];o[d+32>>2]=o[c+24>>2];o[d+36>>2]=b;b=o[c+20>>2];o[d+24>>2]=o[c+16>>2];o[d+28>>2]=b;b=o[c+12>>2];o[d+16>>2]=o[c+8>>2];o[d+20>>2]=b;b=o[c+4>>2];o[d+8>>2]=o[c>>2];o[d+12>>2]=b;h=u(h,1664525)+1013904223|0;b=e+u((h>>>0)%(g>>>0)|0,52)|0;e=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=e;o[c+48>>2]=o[b+48>>2];e=o[b+44>>2];o[c+40>>2]=o[b+40>>2];o[c+44>>2]=e;e=o[b+36>>2];o[c+32>>2]=o[b+32>>2];o[c+36>>2]=e;e=o[b+28>>2];o[c+24>>2]=o[b+24>>2];o[c+28>>2]=e;e=o[b+20>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=e;e=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=e;o[b+48>>2]=o[d+56>>2];c=o[d+52>>2];o[b+40>>2]=o[d+48>>2];o[b+44>>2]=c;c=o[d+44>>2];o[b+32>>2]=o[d+40>>2];o[b+36>>2]=c;c=o[d+36>>2];o[b+24>>2]=o[d+32>>2];o[b+28>>2]=c;c=o[d+28>>2];o[b+16>>2]=o[d+24>>2];o[b+20>>2]=c;c=o[d+20>>2];o[b+8>>2]=o[d+16>>2];o[b+12>>2]=c;c=o[d+12>>2];o[b>>2]=o[d+8>>2];o[b+4>>2]=c;f=f+1|0;if((g|0)!=(f|0)){continue}break}}g=o[a+752>>2];if((g|0)>=1){f=0;while(1){e=o[a+760>>2];c=e+u(f,44)|0;o[d+48>>2]=o[c+40>>2];b=o[c+36>>2];o[d+40>>2]=o[c+32>>2];o[d+44>>2]=b;b=o[c+28>>2];o[d+32>>2]=o[c+24>>2];o[d+36>>2]=b;b=o[c+20>>2];o[d+24>>2]=o[c+16>>2];o[d+28>>2]=b;b=o[c+12>>2];o[d+16>>2]=o[c+8>>2];o[d+20>>2]=b;b=o[c+4>>2];o[d+8>>2]=o[c>>2];o[d+12>>2]=b;h=u(h,1664525)+1013904223|0;b=e+u((h>>>0)%(g>>>0)|0,44)|0;e=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=e;o[c+40>>2]=o[b+40>>2];e=o[b+36>>2];o[c+32>>2]=o[b+32>>2];o[c+36>>2]=e;e=o[b+28>>2];o[c+24>>2]=o[b+24>>2];o[c+28>>2]=e;e=o[b+20>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=e;e=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=e;o[b+40>>2]=o[d+48>>2];c=o[d+44>>2];o[b+32>>2]=o[d+40>>2];o[b+36>>2]=c;c=o[d+36>>2];o[b+24>>2]=o[d+32>>2];o[b+28>>2]=c;c=o[d+28>>2];o[b+16>>2]=o[d+24>>2];o[b+20>>2]=c;c=o[d+20>>2];o[b+8>>2]=o[d+16>>2];o[b+12>>2]=c;c=o[d+12>>2];o[b>>2]=o[d+8>>2];o[b+4>>2]=c;f=f+1|0;if((g|0)!=(f|0)){continue}break}}}function $F(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var f=0,g=0,h=0,j=0,k=v(0),n=v(0),q=v(0),r=0,t=0,u=v(0),w=0,x=0,y=0,z=0,A=0,B=0,C=v(0),D=v(0),E=v(0),F=v(0),G=0,H=0,I=0,J=0;r=M-32|0;M=r;n=s[b+28>>2];q=s[b+12>>2];k=q>v(0)?q:v(0);C=k<n?n:k;k=q<v(0)?q:v(0);D=n<k?n:k;t=o[b+24>>2];w=o[b+8>>2];E=s[b+8>>2];f=E>v(-0xde0b6b000000000)?w:-581039253;F=s[b+24>>2];G=F>(e(0,f),i())?t:f;x=o[b+20>>2];y=o[b+4>>2];u=s[b+4>>2];f=u>v(-0xde0b6b000000000)?y:-581039253;n=s[b+20>>2];H=n>(e(0,f),i())?x:f;z=o[b+16>>2];A=o[b>>2];q=s[b>>2];f=q>v(-0xde0b6b000000000)?A:-581039253;k=s[b+16>>2];I=k>(e(0,f),i())?z:f;f=E<v(0xde0b6b000000000)?w:1566444395;w=F<(e(0,f),i())?t:f;f=u<v(0xde0b6b000000000)?y:1566444395;x=n<(e(0,f),i())?x:f;f=q<v(0xde0b6b000000000)?A:1566444395;y=k<(e(0,f),i())?z:f;u=s[b+44>>2];z=o[b+40>>2];n=s[b+40>>2];A=o[b+36>>2];q=s[b+36>>2];f=o[b+32>>2];k=s[b+32>>2];j=o[a+4>>2];b=o[j+4>>2];a:{if((b|0)!=o[j+8>>2]){break a}B=b?b<<1:1;if((b|0)>=(B|0)){break a}b:{if(!B){break b}o[7717]=o[7717]+1;J=l[o[6606]](B<<6,16)|0;b=o[j+4>>2]}if((b|0)>=1){t=0;while(1){a=t<<6;g=a+J|0;h=a+o[j+12>>2]|0;a=o[h+4>>2];o[g>>2]=o[h>>2];o[g+4>>2]=a;a=o[h+60>>2];o[g+56>>2]=o[h+56>>2];o[g+60>>2]=a;a=o[h+52>>2];o[g+48>>2]=o[h+48>>2];o[g+52>>2]=a;a=o[h+44>>2];o[g+40>>2]=o[h+40>>2];o[g+44>>2]=a;a=o[h+36>>2];o[g+32>>2]=o[h+32>>2];o[g+36>>2]=a;a=o[h+28>>2];o[g+24>>2]=o[h+24>>2];o[g+28>>2]=a;a=o[h+20>>2];o[g+16>>2]=o[h+16>>2];o[g+20>>2]=a;a=o[h+12>>2];o[g+8>>2]=o[h+8>>2];o[g+12>>2]=a;t=t+1|0;if((t|0)!=(b|0)){continue}break}}a=o[j+12>>2];if(a){if(p[j+16|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[j+12>>2]=0}o[j+12>>2]=J;m[j+16|0]=1;o[j+8>>2]=B;b=o[j+4>>2]}b=o[j+12>>2]+(b<<6)|0;o[b+40>>2]=d;o[b+36>>2]=c;o[b+32>>2]=-1;s[b+12>>2]=u<D?u:D;s[b+28>>2]=C<u?u:C;o[b+24>>2]=n>(e(0,G),i())?z:G;o[b+20>>2]=q>(e(0,H),i())?A:H;o[b+16>>2]=k>(e(0,I),i())?f:I;o[b+8>>2]=n<(e(0,w),i())?z:w;o[b+4>>2]=q<(e(0,x),i())?A:x;o[b>>2]=k<(e(0,y),i())?f:y;a=o[r+16>>2];o[b+44>>2]=o[r+12>>2];o[b+48>>2]=a;a=o[r+24>>2];o[b+52>>2]=o[r+20>>2];o[b+56>>2]=a;o[b+60>>2]=o[r+28>>2];o[j+4>>2]=o[j+4>>2]+1;M=r+32|0}function ya(a,b){var c=0,d=0,e=v(0);c=M+ -64|0;M=c;o[c+60>>2]=a;o[c+56>>2]=b;a=M-16|0;b=o[c+60>>2];o[a+12>>2]=b;e=s[o[a+12>>2]>>2];a=M-16|0;o[a+12>>2]=b+16;e=v(e+s[o[a+12>>2]+4>>2]);a=M-16|0;o[a+12>>2]=b+32;s[c+52>>2]=e+s[o[a+12>>2]+8>>2];a:{if(s[c+52>>2]>v(0)){a=M-16|0;s[a+12>>2]=s[c+52>>2]+v(1);s[c+28>>2]=C(s[a+12>>2]);s[c+44>>2]=s[c+28>>2]*v(.5);s[c+28>>2]=v(.5)/s[c+28>>2];a=M-16|0;o[a+12>>2]=b+32;e=s[o[a+12>>2]+4>>2];a=M-16|0;o[a+12>>2]=b+16;s[c+32>>2]=v(e-s[o[a+12>>2]+8>>2])*s[c+28>>2];a=M-16|0;o[a+12>>2]=b;e=s[o[a+12>>2]+8>>2];a=M-16|0;o[a+12>>2]=b+32;s[c+36>>2]=v(e-s[o[a+12>>2]>>2])*s[c+28>>2];a=M-16|0;o[a+12>>2]=b+16;e=s[o[a+12>>2]>>2];a=M-16|0;o[a+12>>2]=b;s[c+40>>2]=v(e-s[o[a+12>>2]+4>>2])*s[c+28>>2];break a}a=c;d=M-16|0;o[d+12>>2]=b;e=s[o[d+12>>2]>>2];d=M-16|0;o[d+12>>2]=b+16;b:{if(e<s[o[d+12>>2]+4>>2]){d=M-16|0;o[d+12>>2]=b+16;e=s[o[d+12>>2]+4>>2];d=M-16|0;o[d+12>>2]=b+32;d=e<s[o[d+12>>2]+8>>2]?2:1;break b}d=M-16|0;o[d+12>>2]=b;e=s[o[d+12>>2]>>2];d=M-16|0;o[d+12>>2]=b+32;d=e<s[o[d+12>>2]+8>>2]?2:0}o[a+24>>2]=d;o[c+20>>2]=(o[c+24>>2]+1|0)%3;o[c+16>>2]=(o[c+24>>2]+2|0)%3;a=M-16|0;o[a+12>>2]=b+(o[c+24>>2]<<4);e=s[o[a+12>>2]+(o[c+24>>2]<<2)>>2];a=M-16|0;o[a+12>>2]=b+(o[c+20>>2]<<4);e=v(e-s[o[a+12>>2]+(o[c+20>>2]<<2)>>2]);a=M-16|0;o[a+12>>2]=b+(o[c+16>>2]<<4);d=M-16|0;s[d+12>>2]=v(e-s[o[a+12>>2]+(o[c+16>>2]<<2)>>2])+v(1);s[c+12>>2]=C(s[d+12>>2]);a=c+32|0;s[a+(o[c+24>>2]<<2)>>2]=s[c+12>>2]*v(.5);s[c+12>>2]=v(.5)/s[c+12>>2];d=M-16|0;o[d+12>>2]=b+(o[c+16>>2]<<4);e=s[o[d+12>>2]+(o[c+20>>2]<<2)>>2];d=M-16|0;o[d+12>>2]=b+(o[c+20>>2]<<4);s[c+44>>2]=v(e-s[o[d+12>>2]+(o[c+16>>2]<<2)>>2])*s[c+12>>2];d=M-16|0;o[d+12>>2]=b+(o[c+20>>2]<<4);e=s[o[d+12>>2]+(o[c+24>>2]<<2)>>2];d=M-16|0;o[d+12>>2]=b+(o[c+24>>2]<<4);s[a+(o[c+20>>2]<<2)>>2]=v(e+s[o[d+12>>2]+(o[c+20>>2]<<2)>>2])*s[c+12>>2];d=M-16|0;o[d+12>>2]=b+(o[c+16>>2]<<4);e=s[o[d+12>>2]+(o[c+24>>2]<<2)>>2];d=M-16|0;o[d+12>>2]=b+(o[c+24>>2]<<4);s[a+(o[c+16>>2]<<2)>>2]=v(e+s[o[d+12>>2]+(o[c+16>>2]<<2)>>2])*s[c+12>>2]}a=c+32|0;Wb(o[c+56>>2],a,a+4|0,a+8|0,a+12|0);M=c- -64|0}function sa(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=v(0),i=0,j=0,k=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0);a:{d=o[a+748>>2];if((d|0)<1){break a}while(1){p=s[b+48>>2];w=s[b+8>>2];x=s[b>>2];y=s[b+4>>2];q=s[b+52>>2];z=s[b+24>>2];k=s[b+16>>2];A=s[b+20>>2];f=s[b+56>>2];g=s[b+40>>2];h=s[b+32>>2];r=s[b+36>>2];i=d+ -1|0;e=u(i,184)+a|0;o[e- -64>>2]=0;B=f;f=s[e+4>>2];C=v(h*f);h=s[e+8>>2];n=g;g=s[e+12>>2];r=v(B+v(v(C+v(r*h))+v(n*g)));s[e+60>>2]=r;q=v(q+v(v(v(f*k)+v(h*A))+v(g*z)));s[e+56>>2]=q;p=v(p+v(v(v(f*x)+v(h*y))+v(g*w)));s[e+52>>2]=p;w=s[c+56>>2];x=s[c+40>>2];y=s[c+32>>2];z=s[c+36>>2];k=s[c+52>>2];A=s[c+24>>2];D=s[c+16>>2];E=s[c+20>>2];f=s[c+48>>2];g=s[c+8>>2];h=s[c>>2];t=s[c+4>>2];o[e+48>>2]=0;B=f;f=s[e+20>>2];C=v(h*f);h=s[e+24>>2];n=g;g=s[e+28>>2];t=v(B+v(v(C+v(t*h))+v(n*g)));s[e+36>>2]=t;k=v(k+v(v(v(f*D)+v(h*E))+v(g*A)));s[e+40>>2]=k;f=v(w+v(v(v(f*y)+v(h*z))+v(g*x)));s[e+44>>2]=f;s[e+84>>2]=v(v(v(p-t)*s[e+68>>2])+v(v(q-k)*s[e+72>>2]))+v(v(r-f)*s[e+76>>2]);o[e+152>>2]=o[e+152>>2]+1;e=(d|0)>1;d=i;if(e){continue}break}c=o[a+748>>2];if((c|0)<1){break a}while(1){b=c;c=b+ -1|0;d=u(c,184)+a|0;e=d+4|0;f=s[d+84>>2];h=s[a+752>>2];b:{if(!(f<=h)){i=o[d+116>>2];c:{if(!i){break c}j=o[6734];if(!j){break c}l[j](i)|0;o[d+116>>2]=0}j=o[a+748>>2];d=j+ -1|0;i=a;if((b|0)!=(j|0)){d=u(d,184)+a|0;ja(e,d+4|0,184);o[d+124>>2]=0;o[d+116>>2]=0;o[d+152>>2]=0;o[d+128>>2]=0;o[d+132>>2]=0;m[d+120|0]=0;d=o[a+748>>2]+ -1|0}o[i+748>>2]=d;break b}g=v(s[d+36>>2]-v(s[d+52>>2]-v(s[d+68>>2]*f)));n=v(g*g);g=v(s[d+40>>2]-v(s[d+56>>2]-v(f*s[d+72>>2])));f=v(s[d+44>>2]-v(s[d+60>>2]-v(f*s[d+76>>2])));if(!!(v(v(n+v(g*g))+v(f*f))>v(h*h))){i=o[d+116>>2];d:{if(!i){break d}j=o[6734];if(!j){break d}l[j](i)|0;o[d+116>>2]=0}j=o[a+748>>2];d=j+ -1|0;i=a;if((b|0)!=(j|0)){d=u(d,184)+a|0;ja(e,d+4|0,184);o[d+124>>2]=0;o[d+116>>2]=0;o[d+152>>2]=0;o[d+128>>2]=0;o[d+132>>2]=0;m[d+120|0]=0;d=o[a+748>>2]+ -1|0}o[i+748>>2]=d;break b}d=o[6735];if(!d){break b}l[d](e,o[a+740>>2],o[a+744>>2])|0}if((b|0)>1){continue}break}}}function RD(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;ia(17892);d=o[a+28>>2];if((d|0)<=-1){if(o[a+32>>2]<=-1){f=o[a+36>>2];if(f){if(p[a+40|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[a+36>>2]=0}o[a+32>>2]=0;o[a+36>>2]=0;m[a+40|0]=1}while(1){o[o[a+36>>2]+(d<<2)>>2]=0;f=d+1|0;e=f>>>0>=d>>>0;d=f;if(e){continue}break}}o[a+28>>2]=0;YD(a+4|0);j=o[a+8>>2];if((j|0)>=1){f=0;while(1){e=f;d=e+1|0;g=(j|0)>(d|0)?j:d;i=g+ -1|0;h=o[a+16>>2];n=o[h+(e<<3)>>2];while(1){a:{d=f;f=d+1|0;if((f|0)>=(j|0)){d=i;f=g;break a}if(o[(f<<3)+h>>2]==(n|0)){continue}}break}b:{q=(e|0)>(d|0);if(q){break b}i=(d|0)>(e|0)?d:e;r=o[c+16>>2];g=1;d=e;while(1){k=o[(o[((d<<3)+h|0)+4>>2]<<2)+r>>2];if(o[k+208>>2]==(n|0)){k=o[k+216>>2];g=(k|0)!=4&((k|0)!=1&g)}k=(d|0)!=(i|0);d=d+1|0;if(k){continue}break}if(!g){if(q){break b}while(1){d=o[o[c+16>>2]+(o[((e<<3)+h|0)+4>>2]<<2)>>2];if(!(o[d+208>>2]!=(n|0)|o[d+216>>2]!=2)){if((o[d+216>>2]&-2)!=4){o[d+216>>2]=3}o[d+220>>2]=0}if((e|0)==(i|0)){break b}e=e+1|0;h=o[a+16>>2];continue}}if(q){break b}while(1){d=o[o[c+16>>2]+(o[((e<<3)+h|0)+4>>2]<<2)>>2];if(o[d+208>>2]==(n|0)){if((o[d+216>>2]&-2)!=4){o[d+216>>2]=2}}if((e|0)==(i|0)){break b}e=e+1|0;h=o[a+16>>2];continue}}if((f|0)<(j|0)){continue}break}}h=l[o[o[b>>2]+36>>2]](b)|0;if((h|0)>=1){f=0;while(1){i=l[o[o[b>>2]+40>>2]](b,f)|0;c=o[i+744>>2];d=o[i+740>>2];c:{if(!c|o[c+216>>2]==2?!(o[d+216>>2]!=2?d:0):0){break c}e=o[d+204>>2];if(!(!(e&2)|e&4|o[d+216>>2]==2)){Na(c,0)}e=o[c+204>>2];if(!(!(e&2)|e&4|o[c+216>>2]==2)){Na(d,0)}if(!p[a+64|0]){break c}if(!l[o[o[b>>2]+28>>2]](b,d,c)){break c}e=o[a+28>>2];d:{if((e|0)!=o[a+32>>2]){break d}c=e?e<<1:1;if((e|0)>=(c|0)){break d}d=0;g=0;if(c){o[7717]=o[7717]+1;g=l[o[6606]](c<<2,16)|0;e=o[a+28>>2]}if((e|0)>=1){while(1){j=d<<2;o[j+g>>2]=o[j+o[a+36>>2]>>2];d=d+1|0;if((e|0)!=(d|0)){continue}break}}d=o[a+36>>2];if(d){if(p[a+40|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}e=o[a+28>>2]}o[a+36>>2]=0}o[a+36>>2]=g;m[a+40|0]=1;o[a+32>>2]=c}o[o[a+36>>2]+(e<<2)>>2]=i;o[a+28>>2]=e+1}f=f+1|0;if((h|0)!=(f|0)){continue}break}}ga()}function Ef(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),M=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=0;T=a;a=o[a+144>>2]+u(b,284)|0;Rc(T,a,c);o[a+136>>2]=0;o[a+120>>2]=0;o[a+104>>2]=0;x=s[a+68>>2];y=s[a+72>>2];z=s[a+76>>2];m=v(s[a+236>>2]*v(-.5));j=qa(m);f=ra(m);F=s[a+56>>2];m=s[a+52>>2];k=s[a+60>>2];g=v(j/v(C(v(v(z*z)+v(v(y*y)+v(x*x))))));j=v(y*g);n=v(z*g);g=v(x*g);d=v(v(2)/v(v(f*f)+v(v(n*n)+v(v(g*g)+v(j*j)))));A=v(n*d);r=v(j*A);t=v(g*d);p=v(f*t);J=v(r+p);i=v(s[a+232>>2]*v(.5));e=v(qa(i)/v(C(v(v(v(m*m)+v(F*F))+v(k*k)))));h=v(e*v(-m));i=ra(i);B=v(e*v(-k));H=v(-F);e=v(e*H);q=v(v(2)/v(v(i*i)+v(v(B*B)+v(v(h*h)+v(e*e)))));l=v(h*q);L=v(h*l);G=v(e*q);M=v(e*G);D=v(v(1)-v(L+M));q=v(B*q);N=v(h*q);O=v(i*G);E=v(N-O);d=v(j*d);w=v(g*d);I=v(f*A);K=v(w-I);P=v(e*q);Q=v(i*l);e=v(P+Q);l=v(g*t);R=v(n*A);n=v(v(1)-v(l+R));t=v(v(J*D)+v(v(E*K)+v(e*n)));S=v(g*A);f=v(f*d);g=v(S-f);A=v(w+I);w=v(j*d);j=v(v(1)-v(w+R));d=v(v(g*D)+v(v(e*A)+v(E*j)));I=E;E=v(S+f);f=e;e=v(r-p);p=D;D=v(v(1)-v(l+w));r=v(v(v(I*E)+v(f*e))+v(p*D));s[a+132>>2]=v(v(t*H)-v(m*d))-v(k*r);p=v(v(F*x)-v(m*y));l=v(v(k*y)-v(F*z));w=v(v(m*z)-v(k*x));f=v(v(1)/v(C(v(v(p*p)+v(v(l*l)+v(w*w))))));p=v(p*f);l=v(l*f);f=v(w*f);s[a+128>>2]=v(p*r)+v(v(l*d)+v(f*t));s[a+124>>2]=v(z*r)+v(v(x*d)+v(y*t));d=v(P-Q);G=v(h*G);t=v(i*q);h=v(G+t);r=v(B*q);i=v(v(1)-v(L+r));B=v(v(d*J)+v(v(h*K)+v(i*n)));q=v(v(d*g)+v(v(A*i)+v(h*j)));h=v(v(v(h*E)+v(e*i))+v(d*D));s[a+116>>2]=v(v(B*H)-v(m*q))-v(k*h);s[a+112>>2]=v(p*h)+v(v(l*q)+v(f*B));s[a+108>>2]=v(z*h)+v(v(x*q)+v(y*B));h=v(N+O);i=v(v(1)-v(M+r));d=v(G-t);n=v(v(h*J)+v(v(i*K)+v(d*n)));j=v(v(h*g)+v(v(d*A)+v(i*j)));g=v(v(v(i*E)+v(d*e))+v(h*D));s[a+100>>2]=v(v(n*H)-v(m*j))-v(k*g);s[a+96>>2]=v(p*g)+v(v(l*j)+v(f*n));s[a+92>>2]=v(z*g)+v(v(x*j)+v(y*n));o[a+152>>2]=0;e=k;k=s[a+32>>2];s[a+148>>2]=v(e*k)+s[a+44>>2];s[a+144>>2]=v(F*k)+s[a+40>>2];s[a+140>>2]=s[a+36>>2]+v(m*k)}function LC(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);g=o[a+28>>2];q=s[g+20>>2];r=s[g+36>>2];t=s[g+40>>2];u=s[g+24>>2];w=s[g+8>>2];e=s[g+60>>2];h=s[g+44>>2];i=s[g+28>>2];f=s[g+56>>2];j=s[g+52>>2];k=s[g+12>>2];l=s[c+8>>2];m=s[c>>2];n=s[c+4>>2];p=s[b+8>>2];d=s[b>>2];x=s[b+4>>2];y=s[g+4>>2];o[a+108>>2]=0;o[a+92>>2]=0;o[a+76>>2]=0;o[a+60>>2]=0;f=v(-f);s[a+104>>2]=v(v(v(k*v(0))+v(i*v(0)))+v(h*v(0)))+v(v(v(i*f)-v(k*j))-v(h*e));s[a+100>>2]=v(v(v(w*v(0))+v(u*v(0)))+v(t*v(0)))+v(v(v(u*f)-v(w*j))-v(t*e));s[a+96>>2]=v(v(v(y*v(0))+v(q*v(0)))+v(r*v(0)))+v(v(v(q*f)-v(y*j))-v(r*e));f=d;d=v(v(1)/v(C(v(v(v(d*d)+v(x*x))+v(p*p)))));e=v(f*d);j=v(x*d);p=v(p*d);s[a+88>>2]=v(v(k*e)+v(i*j))+v(h*p);d=v(v(1)/v(C(v(v(v(m*m)+v(n*n))+v(l*l)))));m=v(m*d);n=v(n*d);l=v(l*d);s[a+84>>2]=v(v(k*m)+v(i*n))+v(h*l);s[a+72>>2]=v(v(e*w)+v(j*u))+v(p*t);s[a+68>>2]=v(v(m*w)+v(n*u))+v(l*t);s[a+56>>2]=v(v(y*e)+v(j*q))+v(p*r);s[a+52>>2]=v(r*l)+v(v(y*m)+v(q*n));d=k;k=v(v(p*n)-v(j*l));f=i;i=v(v(e*l)-v(p*m));x=h;h=v(v(j*m)-v(e*n));s[a+80>>2]=v(v(d*k)+v(f*i))+v(x*h);s[a- -64>>2]=v(h*t)+v(v(w*k)+v(u*i));s[a+48>>2]=v(r*h)+v(v(y*k)+v(q*i));b=o[a+32>>2];z=s[b+60>>2];B=s[b+56>>2];A=s[b+52>>2];q=s[b+20>>2];r=s[b+36>>2];t=s[b+40>>2];u=s[b+8>>2];w=s[b+24>>2];y=s[b+44>>2];d=s[b+12>>2];x=s[b+28>>2];f=s[b+4>>2];o[a+172>>2]=0;o[a+156>>2]=0;o[a+140>>2]=0;o[a+124>>2]=0;s[a+152>>2]=v(v(e*d)+v(j*x))+v(p*y);s[a+148>>2]=v(v(m*d)+v(n*x))+v(l*y);s[a+144>>2]=v(v(k*d)+v(i*x))+v(h*y);s[a+136>>2]=v(v(e*u)+v(j*w))+v(p*t);s[a+132>>2]=v(v(m*u)+v(n*w))+v(l*t);s[a+128>>2]=v(v(k*u)+v(i*w))+v(h*t);s[a+120>>2]=v(v(e*f)+v(j*q))+v(p*r);s[a+116>>2]=v(v(m*f)+v(n*q))+v(l*r);s[a+112>>2]=v(v(k*f)+v(i*q))+v(h*r);e=v(-B);s[a+168>>2]=v(v(v(d*v(0))+v(x*v(0)))+v(y*v(0)))+v(v(v(x*e)-v(d*A))-v(y*z));s[a+164>>2]=v(v(v(u*v(0))+v(w*v(0)))+v(t*v(0)))+v(v(v(w*e)-v(u*A))-v(t*z));s[a+160>>2]=v(v(v(f*v(0))+v(q*v(0)))+v(r*v(0)))+v(v(v(q*e)-v(f*A))-v(r*z));Pf(a)}function dd(a,b,c,d,e){var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0);k=p[e+16|0]&-16;m[e+16|0]=k;G=s[d>>2];n=s[b>>2];w=v(G-n);l=s[a>>2];f=v(l-n);H=s[d+4>>2];q=s[b+4>>2];x=v(H-q);i=s[a+4>>2];g=v(i-q);I=s[d+8>>2];r=s[b+8>>2];y=v(I-r);t=s[a+8>>2];h=v(t-r);j=v(v(v(w*f)+v(x*g))+v(y*h));a=e;C=s[c>>2];z=v(C-n);D=s[c+4>>2];A=v(D-q);E=s[c+8>>2];B=v(E-r);g=v(v(v(z*f)+v(A*g))+v(B*h));a:{if(!(g<=v(0)^1|j<=v(0)^1)){c=o[b+4>>2];o[e>>2]=o[b>>2];o[e+4>>2]=c;c=o[b+12>>2];o[e+8>>2]=o[b+8>>2];o[e+12>>2]=c;m[e+16|0]=k|1;g=v(0);f=v(0);h=v(1);break a}f=v(l-C);h=v(i-D);u=v(t-E);F=v(v(v(w*f)+v(x*h))+v(y*u));h=v(v(v(z*f)+v(A*h))+v(B*u));if(!(h>=v(0)^1|F<=h^1)){b=o[c+4>>2];o[e>>2]=o[c>>2];o[e+4>>2]=b;b=o[c+12>>2];o[e+8>>2]=o[c+8>>2];o[e+12>>2]=b;m[e+16|0]=k|2;g=v(1);f=v(0);h=v(0);break a}u=v(v(g*F)-v(h*j));b:{if(h<=v(0)^1|g>=v(0)^1){break b}f=v(0);if(!(u<=v(0))){break b}o[e+12>>2]=0;m[e+16|0]=k|3;g=v(g/v(g-h));s[e+8>>2]=r+v(B*g);s[e+4>>2]=q+v(A*g);s[e>>2]=n+v(z*g);h=v(v(1)-g);break a}f=v(l-G);i=v(i-H);t=v(t-I);l=v(v(v(z*f)+v(A*i))+v(B*t));f=v(v(v(w*f)+v(x*i))+v(y*t));if(!(f>=v(0)^1|l<=f^1)){b=o[d+4>>2];o[e>>2]=o[d>>2];o[e+4>>2]=b;b=o[d+12>>2];o[e+8>>2]=o[d+8>>2];o[e+12>>2]=b;m[e+16|0]=k|4;f=v(1);g=v(0);h=v(0);break a}i=v(v(l*j)-v(g*f));c:{if(f<=v(0)^1|j>=v(0)^1){break c}g=v(0);if(!(i<=v(0))){break c}o[e+12>>2]=0;m[e+16|0]=k|5;f=v(j/v(j-f));s[e+8>>2]=r+v(y*f);s[e+4>>2]=q+v(x*f);s[e>>2]=n+v(w*f);h=v(v(1)-f);break a}d:{j=v(v(h*f)-v(l*F));if(!(j<=v(0))){break d}g=v(F-h);if(!(g>=v(0))){break d}f=v(l-f);if(!(f>=v(0))){break d}o[e+12>>2]=0;m[e+16|0]=k|6;f=v(g/v(g+f));s[e+8>>2]=E+v(v(I-E)*f);s[e+4>>2]=D+v(v(H-D)*f);s[e>>2]=C+v(v(G-C)*f);g=v(v(1)-f);h=v(0);break a}o[e+12>>2]=0;m[e+16|0]=k|7;g=v(v(1)/v(u+v(j+i)));f=v(u*g);g=v(i*g);s[e+8>>2]=v(y*f)+v(r+v(B*g));s[e+4>>2]=v(x*f)+v(q+v(A*g));s[e>>2]=v(w*f)+v(n+v(z*g));h=v(v(v(1)-g)-f)}s[a+20>>2]=h;o[e+32>>2]=0;s[e+28>>2]=f;s[e+24>>2]=g}function bk(a,b,c,d,e,f){var g=0,h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=0,D=0,E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=0,L=0,N=0,O=0,P=0,Q=0;g=M-32|0;M=g;a:{if(o[a+56>>2]<1){break a}k=s[d+8>>2];j=s[c+8>>2];p=v(k-j);x=p;i=s[d>>2];q=s[c>>2];m=v(i-q);r=s[d+4>>2];t=s[c+4>>2];n=v(r-t);w=v(v(1)/v(C(v(v(v(m*m)+v(n*n))+v(p*p)))));p=v(p*w);y=m;m=v(m*w);A=n;n=v(n*w);A=v(v(x*p)+v(v(y*m)+v(A*n)));w=s[f+8>>2];E=v((j<k?k:j)+w);x=s[f+4>>2];F=v((t<r?r:t)+x);y=s[f>>2];G=v((q<i?i:q)+y);j=k<j?k:j;k=s[e+8>>2];H=v(j+k);j=s[e+4>>2];I=v((r<t?r:t)+j);q=i<q?i:q;i=s[e>>2];J=v(q+i);d=o[a+96>>2];q=p==v(0)?v(0xde0b6b000000000):v(v(1)/p);h=q<v(0);K=(h<<4)+g|8;r=n==v(0)?v(0xde0b6b000000000):v(v(1)/n);u=r<v(0);L=(u<<4)+g|4;N=((h^1)<<4)+g|8;O=((u^1)<<4)+g|4;t=m==v(0)?v(0xde0b6b000000000):v(v(1)/m);h=t<v(0);P=(h<<4)+g|0;Q=((h^1)<<4)+g|0;while(1){h=o[d+4>>2];o[g>>2]=o[d>>2];o[g+4>>2]=h;h=o[d+12>>2];o[g+8>>2]=o[d+8>>2];o[g+12>>2]=h;h=o[d+28>>2];o[g+24>>2]=o[d+24>>2];o[g+28>>2]=h;h=o[d+20>>2];o[g+16>>2]=o[d+16>>2];o[g+20>>2]=h;s[g>>2]=s[g>>2]-y;s[g+4>>2]=s[g+4>>2]-x;s[g+16>>2]=s[g+16>>2]-i;s[g+20>>2]=s[g+20>>2]-j;s[g+8>>2]=s[g+8>>2]-w;s[g+24>>2]=s[g+24>>2]-k;h=0;b:{if(J>s[d+16>>2]){break b}h=0;if(G<s[d>>2]){break b}h=1}u=0;u=E<s[d+8>>2]|H>s[d+24>>2]?u:h;c:{d:{e:{f:{g:{if(F<s[d+4>>2]|I>s[d+20>>2]|u^1){break g}m=s[c+4>>2];k=v(r*v(s[L>>2]-m));i=s[c>>2];j=v(t*v(s[Q>>2]-i));if(k>j){break g}i=v(t*v(s[P>>2]-i));m=v(r*v(s[O>>2]-m));if(i>m){break g}p=s[c+8>>2];n=v(q*v(s[K>>2]-p));j=m<j?m:j;if(n>j){break g}k=k>i?k:i;i=v(q*v(s[N>>2]-p));if(k>i){break g}D=o[d+32>>2];u=(D|0)==-1;h=(n>k?n:k)<A&(i<j?i:j)>v(0);if((h|0)!=1|(D|0)!=-1){break f}l[o[o[b>>2]+8>>2]](b,o[d+36>>2],o[d+40>>2]);break e}u=o[d+32>>2]==-1;h=0}if(u){break e}if(!h){break d}}z=z+1|0;d=d- -64|0;break c}h=o[d+32>>2];z=h+z|0;d=(h<<6)+d|0}B=B+1|0;if((z|0)>=o[a+56>>2]){break a}k=s[e+8>>2];j=s[e+4>>2];i=s[e>>2];w=s[f+8>>2];x=s[f+4>>2];y=s[f>>2];continue}}if(o[7309]<(B|0)){o[7309]=B}M=g+32|0}function vy(a,b){var c=0,d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=v(0),n=v(0),q=v(0),r=0,t=0,u=0,x=0,y=0,z=0,A=0,B=0,C=0,D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=0,K=0,L=0;t=o[a+4>>2];if((t|0)>=1){while(1){a:{c=y;y=c+1|0;if((y|0)>=(t|0)){break a}d=o[a+12>>2];z=d+(c<<4)|0;K=z;c=y;while(1){b:{A=c+1|0;if((A|0)>=(t|0)){break b}B=(c<<4)+d|0;L=B;C=A;while(1){c=(C<<4)+d|0;f=s[c+4>>2];g=s[B>>2];k=s[B+4>>2];n=s[c>>2];q=v(v(f*g)-v(k*n));h=s[c+8>>2];D=s[B+8>>2];E=v(v(k*h)-v(D*f));F=v(v(D*n)-v(h*g));c:{if(!(v(v(q*q)+v(v(E*E)+v(F*F)))>v(9999999747378752e-20))){break c}e=s[z+4>>2];i=s[z>>2];G=v(v(n*e)-v(f*i));H=f;f=s[z+8>>2];I=v(v(H*f)-v(h*e));n=v(v(h*i)-v(n*f));if(!(v(v(G*G)+v(v(I*I)+v(n*n)))>v(9999999747378752e-20))){break c}h=v(v(k*i)-v(g*e));k=v(v(D*e)-v(k*f));g=v(v(g*f)-v(D*i));if(!(v(v(h*h)+v(v(k*k)+v(g*g)))>v(9999999747378752e-20))){break c}e=v(v(f*q)+v(v(e*F)+v(E*i)));if(!(v(w(e))>v(9.999999974752427e-7))){break c}e=v(v(-1)/e);i=s[c+12>>2];f=s[K+12>>2];H=v(q*f);q=s[L+12>>2];h=v(e*v(v(h*i)+v(H+v(G*q))));g=v(e*v(v(g*i)+v(v(F*f)+v(n*q))));e=v(e*v(v(k*i)+v(v(E*f)+v(I*q))));c=0;u=o[a+4>>2];if((u|0)>0){while(1){j=(c<<4)+d|0;if(!!(v(v(s[j+12>>2]+v(v(v(e*s[j>>2])+v(g*s[j+4>>2]))+v(h*s[j+8>>2])))+v(-.009999999776482582))>v(0))){break c}c=c+1|0;if((u|0)!=(c|0)){continue}break}}d=o[b+4>>2];d:{if((d|0)!=o[b+8>>2]){break d}j=d?d<<1:1;if((d|0)>=(j|0)){break d}c=0;u=0;if(j){o[7717]=o[7717]+1;u=l[o[6606]](j<<4,16)|0;d=o[b+4>>2]}if((d|0)>=1){while(1){r=c<<4;x=r+u|0;r=r+o[b+12>>2]|0;J=o[r+4>>2];o[x>>2]=o[r>>2];o[x+4>>2]=J;J=o[r+12>>2];o[x+8>>2]=o[r+8>>2];o[x+12>>2]=J;c=c+1|0;if((d|0)!=(c|0)){continue}break}}c=o[b+12>>2];if(c){if(p[b+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+12>>2]=0}o[b+12>>2]=u;m[b+16|0]=1;o[b+8>>2]=j;d=o[b+4>>2]}c=o[b+12>>2]+(d<<4)|0;o[c+12>>2]=0;s[c+8>>2]=h;s[c+4>>2]=g;s[c>>2]=e;o[b+4>>2]=o[b+4>>2]+1}C=C+1|0;if((C|0)>=(t|0)){break b}d=o[a+12>>2];continue}}if((t|0)==(A|0)){break a}d=o[a+12>>2];c=A;continue}}if((t|0)!=(y|0)){continue}break}}}function EJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0,f=0,g=0,h=v(0),i=v(0),j=v(0),k=0,n=v(0),p=0,q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0);e=M-192|0;M=e;n=s[c+8>>2];q=v(v(s[b+8>>2]*d)+n);u=s[c+4>>2];r=v(v(s[b+4>>2]*d)+u);w=s[c>>2];t=v(v(s[b>>2]*d)+w);g=o[o[a+4>>2]+740>>2];p=o[o[a+8>>2]+8>>2];k=(g|0)==(p|0);a:{if(!k){f=o[o[a+12>>2]+8>>2];j=v(t-s[f+52>>2]);h=v(r-s[f+56>>2]);i=v(q-s[f+60>>2]);x=v(v(v(j*s[f+12>>2])+v(h*s[f+28>>2]))+v(i*s[f+44>>2]));y=v(v(v(j*s[f+8>>2])+v(h*s[f+24>>2]))+v(i*s[f+40>>2]));j=v(v(v(j*s[f+4>>2])+v(h*s[f+20>>2]))+v(i*s[f+36>>2]));f=p;break a}j=v(t-s[g+52>>2]);h=v(r-s[g+56>>2]);i=v(q-s[g+60>>2]);x=v(v(v(j*s[g+12>>2])+v(h*s[g+28>>2]))+v(i*s[g+44>>2]));y=v(v(v(j*s[g+8>>2])+v(h*s[g+24>>2]))+v(i*s[g+40>>2]));j=v(v(v(j*s[g+4>>2])+v(h*s[g+20>>2]))+v(i*s[g+36>>2]));f=o[o[a+12>>2]+8>>2]}A=s[f+20>>2];B=s[f+36>>2];C=s[f+40>>2];D=s[f+8>>2];E=s[f+24>>2];F=s[f+44>>2];G=s[f+60>>2];h=s[f+12>>2];i=s[f+52>>2];H=s[f+28>>2];I=s[f+56>>2];J=s[f+4>>2];o[e+36>>2]=0;K=h;h=v(w-i);i=v(u-I);n=v(n-G);s[e+32>>2]=v(v(K*h)+v(H*i))+v(F*n);s[e+28>>2]=v(v(h*D)+v(i*E))+v(n*C);o[e+20>>2]=0;s[e+16>>2]=x;s[e+12>>2]=y;s[e+8>>2]=j;s[e+24>>2]=v(v(h*J)+v(i*A))+v(n*B);f=o[b+12>>2];o[e+80>>2]=o[b+8>>2];o[e+84>>2]=f;f=o[b>>2];b=o[b+4>>2];o[e+136>>2]=0;o[e+140>>2]=0;o[e+144>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;o[e+156>>2]=0;s[e+60>>2]=r;s[e- -64>>2]=q;o[e+68>>2]=0;o[e+72>>2]=f;o[e+76>>2]=b;o[e+128>>2]=0;o[e+132>>2]=0;m[e+124|0]=0;o[e+120>>2]=0;o[e+100>>2]=0;o[e+92>>2]=0;o[e+96>>2]=0;s[e+88>>2]=d;s[e+56>>2]=t;b=o[c+12>>2];o[e+48>>2]=o[c+8>>2];o[e+52>>2]=b;b=o[c+4>>2];o[e+40>>2]=o[c>>2];o[e+44>>2]=b;b:{if(!k){c=a+16|0;f=a+20|0;k=a+28|0;b=a+24|0;break b}c=a+20|0;f=a+16|0;k=a+24|0;b=a+28|0}f=o[f>>2];c=o[c>>2];k=o[k>>2];b=o[b>>2];o[e+116>>2]=b;o[e+112>>2]=k;o[e+108>>2]=c;o[e+104>>2]=f;z=o[a+32>>2];p=(g|0)!=(p|0);v(l[o[o[z>>2]+12>>2]](z,e+8|0,o[(p?12:8)+a>>2],f,k,o[(p?8:12)+a>>2],c,b));M=e+192|0}function hl(a,b,c){var d=0,e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=0,H=v(0),I=v(0),J=v(0);d=M-160|0;M=d;f=o[a+4>>2];e=o[f+12>>2];H=s[e+52>>2];I=s[e+56>>2];g=s[e+24>>2];h=s[e+20>>2];i=s[e+40>>2];j=s[e+36>>2];J=s[e+48>>2];k=s[e+8>>2];m=s[e>>2];n=s[e+4>>2];p=s[e+16>>2];q=s[e+32>>2];e=o[o[f+4>>2]+24>>2]+u(c,80)|0;r=s[e+32>>2];t=s[e>>2];w=s[e+16>>2];x=s[e+56>>2];y=s[e+52>>2];z=s[e+48>>2];A=s[e+36>>2];B=s[e+20>>2];C=s[e+4>>2];D=s[e+40>>2];E=s[e+24>>2];F=s[e+8>>2];f=0;o[d+156>>2]=0;o[d+140>>2]=0;o[d+124>>2]=0;s[d+136>>2]=v(v(q*F)+v(j*E))+v(i*D);s[d+132>>2]=v(v(q*C)+v(j*B))+v(i*A);s[d+120>>2]=v(v(p*F)+v(h*E))+v(g*D);s[d+116>>2]=v(v(p*C)+v(h*B))+v(g*A);s[d+152>>2]=I+v(v(v(q*z)+v(j*y))+v(i*x));s[d+148>>2]=H+v(v(v(p*z)+v(h*y))+v(g*x));o[d+108>>2]=0;s[d+128>>2]=v(v(q*t)+v(j*w))+v(i*r);s[d+112>>2]=v(v(p*t)+v(h*w))+v(g*r);s[d+96>>2]=v(v(m*t)+v(n*w))+v(k*r);s[d+104>>2]=v(v(m*F)+v(n*E))+v(k*D);s[d+100>>2]=v(v(m*C)+v(n*B))+v(k*A);s[d+144>>2]=J+v(v(v(m*z)+v(n*y))+v(k*x));l[o[o[b>>2]+8>>2]](b,d+96|0,d+80|0,d- -64|0);e=o[a+8>>2];G=o[e+4>>2];l[o[o[G>>2]+8>>2]](G,o[e+12>>2],d+48|0,d+32|0);e=o[6995];a:{if(e){if(!l[e](o[o[a+8>>2]+4>>2],b)){break a}}f=s[d+64>>2]<s[d+48>>2]|s[d+80>>2]>s[d+32>>2]?f:1;e=0;e=s[d+72>>2]<s[d+56>>2]|s[d+88>>2]>s[d+40>>2]?e:f;if(s[d+68>>2]<s[d+52>>2]|s[d+84>>2]>s[d+36>>2]|e^1){break a}e=o[a+4>>2];f=o[e+8>>2];o[d+24>>2]=-1;o[d+16>>2]=f;o[d+12>>2]=b;o[d+8>>2]=e;o[d+28>>2]=c;o[d+20>>2]=d+96;b=c<<2;if(!o[b+o[a+24>>2]>>2]){e=o[a+12>>2];e=l[o[o[e>>2]+8>>2]](e,d+8|0,o[a+8>>2],o[a+28>>2])|0;o[b+o[a+24>>2]>>2]=e;e=o[a+4>>2]}f=o[a+20>>2];b=o[f+8>>2];b:{if(o[b+8>>2]==o[e+8>>2]){o[f+8>>2]=d+8;l[o[o[f>>2]+8>>2]](f,-1,c);break b}b=o[f+12>>2];o[f+12>>2]=d+8;l[o[o[f>>2]+12>>2]](f,-1,c)}c=o[o[a+24>>2]+(c<<2)>>2];l[o[o[c>>2]+8>>2]](c,d+8|0,o[a+8>>2],o[a+16>>2],o[a+20>>2]);c=o[a+20>>2];o[(o[o[c+8>>2]+8>>2]==o[o[a+4>>2]+8>>2]?8:12)+c>>2]=b}M=d+160|0}function sz(a,b){var c=0,d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0);c=M-176|0;M=c;a:{if(m[b+100|0]&1){break a}if(!Mz(o[a+4>>2],o[a+8>>2],b+8|0,s[(s[b+88>>2]>v(0)?16:20)+a>>2],c+72|0)){break a}g=s[b+88>>2];d=o[a+12>>2];b:{if(!d){if(!(v(g+v(0))>v(0))){break a}d=o[o[a+8>>2]+8>>2]+4|0;break b}t=s[d+344>>2];if(!(v(g+t)>v(0))){break a}d=d+4|0}c:{if(m[30748]&1){break c}if(!da(30748)){break c}o[7685]=0;o[7686]=0;o[7683]=0;o[7684]=0;o[7681]=0;o[7682]=0;o[7679]=0;o[7680]=0;o[7677]=0;o[7678]=0;o[7675]=0;o[7676]=0;ca(30748)}i=o[a+12>>2];e=s[d+52>>2];j=s[b+12>>2];h=s[d+56>>2];f=s[b+16>>2];k=s[d+48>>2];n=s[b+8>>2];o[c+68>>2]=0;h=v(f-h);s[c+64>>2]=h;l=v(j-e);s[c+60>>2]=l;k=v(n-k);s[c+56>>2]=k;u=i?i+264|0:30700;d:{if(!i){d=o[a+4>>2];e=s[d+452>>2];k=v(0);h=v(0);break d}p=s[i+328>>2];q=s[i+332>>2];d=o[a+4>>2];e=s[d+452>>2];w=v(v(v(v(l*p)-v(k*q))+s[i+320>>2])*e);r=s[i+336>>2];k=v(v(s[i+316>>2]+v(v(k*r)-v(h*p)))*e);h=v(v(v(v(h*q)-v(l*r))+s[i+312>>2])*e)}r=s[d+316>>2];x=s[b+32>>2];y=s[b+28>>2];z=s[o[o[a+8>>2]+8>>2]+224>>2];A=s[b+24>>2];o[c+96>>2]=b;l=s[c+84>>2];p=s[c+80>>2];q=s[c+76>>2];Ji(c+8|0,e,g,t,u,c+56|0);b=o[c+20>>2];o[c+108>>2]=o[c+16>>2];o[c+112>>2]=b;b=o[c+28>>2];o[c+116>>2]=o[c+24>>2];o[c+120>>2]=b;b=o[c+36>>2];o[c+124>>2]=o[c+32>>2];o[c+128>>2]=b;b=o[c+44>>2];o[c+132>>2]=o[c+40>>2];o[c+136>>2]=b;b=o[c+52>>2];o[c+140>>2]=o[c+48>>2];o[c+144>>2]=b;b=c- -64|0;d=o[b+4>>2];o[c+156>>2]=o[b>>2];o[c+160>>2]=d;b=o[c+12>>2];o[c+100>>2]=o[c+8>>2];o[c+104>>2]=b;b=o[c+60>>2];o[c+148>>2]=o[c+56>>2];o[c+152>>2]=b;b=o[a+4>>2];s[c+164>>2]=g*s[b+452>>2];n=v(v(n-A)-h);j=v(v(j-y)-k);f=v(v(f-x)-w);g=v(v(v(q*n)+v(p*j))+v(f*l));e=v(r*z);f=v(f-v(l*g));h=v(f*f);f=v(n-v(q*g));j=v(j-v(p*g));s[c+168>>2]=v(h+v(v(f*f)+v(j*j)))<v(e*v(g*v(g*e)))?v(0):v(v(1)-e);o[c+172>>2]=o[(o[o[o[a+8>>2]+8>>2]+204>>2]&3?b+328|0:b+324|0)>>2];rz(b+808|0,c+72|0);a=o[a+12>>2];if(!a){break a}Na(a,0)}M=c+176|0}function Vd(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;if(!(!b|!c)){if(!(o[a+24>>2]>127|o[a+28>>2]>127)){o[7717]=o[7717]+1;e=l[o[6606]](1024,16)|0;i=o[a+24>>2];if((i|0)>=1){while(1){f=g<<3;h=f+e|0;f=f+o[a+32>>2]|0;j=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=j;g=g+1|0;if((i|0)!=(g|0)){continue}break}}i=o[a+32>>2];if(i){if(p[a+36|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+32>>2]=0}o[a+32>>2]=e;o[a+28>>2]=128;m[a+36|0]=1}o[a+24>>2]=128;e=o[a+32>>2];o[e+4>>2]=c;o[e>>2]=b;b=124;e=1;while(1){c=o[a+32>>2];i=e;e=e+ -1|0;j=e<<3;f=c+j|0;h=o[f+4>>2];f=o[f>>2];if((e|0)>(b|0)){g=o[a+24>>2];b=g<<1;if(!((g|0)>=(b|0)|o[a+28>>2]>=(b|0))){a:{if(!g){c=0;break a}o[7717]=o[7717]+1;c=l[o[6606]](g<<4,16)|0;g=0;n=o[a+24>>2];if((n|0)<1){break a}while(1){k=g<<3;q=k+c|0;k=o[a+32>>2]+k|0;r=o[k+4>>2];o[q>>2]=o[k>>2];o[q+4>>2]=r;g=g+1|0;if((n|0)!=(g|0)){continue}break}}g=o[a+32>>2];if(g){if(p[a+36|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+32>>2]=0}o[a+32>>2]=c;m[a+36|0]=1;o[a+28>>2]=b}o[a+24>>2]=b;b=b+ -4|0}b:{if((f|0)==(h|0)){if(!o[f+40>>2]){break b}c=c+j|0;e=o[f+36>>2];o[c+4>>2]=e;o[c>>2]=e;c=i<<3;e=c+o[a+32>>2]|0;h=o[f+40>>2];o[e+4>>2]=h;o[e>>2]=h;e=o[f+40>>2];c=c+o[a+32>>2]|0;o[c+8>>2]=o[f+36>>2];o[c+12>>2]=e;e=i+2|0;break b}if(s[f>>2]<=s[h+16>>2]^1|s[f+16>>2]>=s[h>>2]^1|(s[f+4>>2]<=s[h+20>>2]^1|s[f+20>>2]>=s[h+4>>2]^1)){break b}if(s[f+8>>2]<=s[h+24>>2]^1|s[f+24>>2]>=s[h+8>>2]^1){break b}g=o[h+40>>2];if(o[f+40>>2]){e=o[f+36>>2];if(g){c=c+j|0;o[c+4>>2]=o[h+36>>2];o[c>>2]=e;e=o[f+40>>2];c=i<<3;g=c+o[a+32>>2]|0;o[g+4>>2]=o[h+36>>2];o[g>>2]=e;e=o[f+36>>2];g=c+o[a+32>>2]|0;o[g+12>>2]=o[h+40>>2];o[g+8>>2]=e;e=o[f+40>>2];c=c+o[a+32>>2]|0;o[c+20>>2]=o[h+40>>2];o[c+16>>2]=e;e=i+3|0;break b}c=c+j|0;o[c+4>>2]=h;o[c>>2]=e;c=o[f+40>>2];e=o[a+32>>2]+(i<<3)|0;o[e+4>>2]=h;o[e>>2]=c;e=i+1|0;break b}if(g){c=c+j|0;o[c+4>>2]=o[h+36>>2];o[c>>2]=f;c=o[a+32>>2]+(i<<3)|0;o[c+4>>2]=o[h+40>>2];o[c>>2]=f;e=i+1|0;break b}l[o[o[d>>2]+8>>2]](d,f,h)}if(e){continue}break}}}function Kz(a,b){var c=0,d=v(0),e=0,f=0,g=0,h=0,i=0,j=v(0),k=0,l=0,m=v(0),n=v(0),p=0,q=v(0),r=v(0),t=v(0);c=M-144|0;M=c;d=s[a+20>>2];j=v(v(v(o[b+256>>2])*v(3))*d);r=v(d*v(v(o[b+264>>2])*v(3)));t=v(d*v(v(o[b+260>>2])*v(3)));f=c+104|0;g=c+80|4;e=c+124|0;k=e;while(1){m=v(r+v(d*v(l|0)));i=0;while(1){o[c+20>>2]=0;s[c+16>>2]=m;s[c+8>>2]=j+v(d*v(0));n=v(t+v(d*v(i|0)));s[c+12>>2]=n;h=o[b+276>>2];o[c+80>>2]=1065353216;o[g+8>>2]=0;o[g+12>>2]=0;o[g>>2]=0;o[g+4>>2]=0;o[c+100>>2]=1065353216;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[c+120>>2]=1065353216;o[k+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;a:{if(o[h+4>>2]>19){d=v(0);break a}d=ed(c+8|0,h,c+80|0,c+24|0);h=o[b+276>>2]}p=((i<<4)+b|0)+(l<<2)|0;s[p>>2]=d;d=s[a+20>>2];o[c+20>>2]=0;s[c+16>>2]=m;s[c+12>>2]=n;s[c+8>>2]=j+d;o[c+80>>2]=1065353216;o[g+8>>2]=0;o[g+12>>2]=0;o[g>>2]=0;o[g+4>>2]=0;o[c+100>>2]=1065353216;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[c+120>>2]=1065353216;o[k+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;if(o[h+4>>2]<=19){q=ed(c+8|0,h,c+80|0,c+24|0);h=o[b+276>>2]}s[p- -64>>2]=q;d=s[a+20>>2];o[c+20>>2]=0;s[c+16>>2]=m;s[c+12>>2]=n;s[c+8>>2]=j+v(d+d);o[c+80>>2]=1065353216;o[g+8>>2]=0;o[g+12>>2]=0;o[g>>2]=0;o[g+4>>2]=0;o[c+100>>2]=1065353216;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[c+120>>2]=1065353216;o[k+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;q=v(0);b:{if(o[h+4>>2]>19){d=v(0);break b}d=ed(c+8|0,h,c+80|0,c+24|0);h=o[b+276>>2]}s[p+128>>2]=d;d=s[a+20>>2];o[c+20>>2]=0;s[c+16>>2]=m;s[c+12>>2]=n;s[c+8>>2]=j+v(d*v(3));o[c+80>>2]=1065353216;o[g+8>>2]=0;o[g+12>>2]=0;o[g>>2]=0;o[g+4>>2]=0;o[c+100>>2]=1065353216;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[c+120>>2]=1065353216;o[k+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;if(o[h+4>>2]<=19){d=ed(c+8|0,h,c+80|0,c+24|0)}else{d=v(0)}s[p+192>>2]=d;i=i+1|0;if((i|0)!=4){d=s[a+20>>2];continue}break}l=l+1|0;if((l|0)!=4){d=s[a+20>>2];continue}break}M=c+144|0}function qJ(a,b,c,d,e,f,g,h){var i=0,j=v(0),k=v(0),n=v(0),q=0,r=0,t=v(0),w=0,x=0,y=0,z=0,A=v(0),B=0,D=0,E=0,F=0,G=v(0),H=v(0),I=0,J=v(0),K=v(0),L=v(0),N=v(0),O=v(0),P=v(0),Q=v(0),R=v(0),S=v(0),T=0;i=M-48|0;M=i;j=s[a+8>>2];k=s[a>>2];n=s[a+4>>2];o[i+44>>2]=o[a+12>>2];t=j;j=v(v(1)/v(C(v(v(v(k*k)+v(n*n))+v(j*j)))));A=v(t*j);s[i+40>>2]=A;G=v(n*j);s[i+36>>2]=G;H=v(k*j);s[i+32>>2]=H;q=o[c+36>>2];w=o[c+28>>2];a:{if((w|0)<1){y=-1;break a}J=s[e+40>>2];K=s[e+36>>2];L=s[e+24>>2];N=s[e+20>>2];O=s[e+32>>2];P=s[e+16>>2];Q=s[e+8>>2];R=s[e+4>>2];S=s[e>>2];a=0;j=v(-3.4028234663852886e+38);y=-1;while(1){r=q+u(a,36)|0;k=s[r+20>>2];n=s[r+24>>2];t=s[r+28>>2];k=v(v(v(H*v(v(v(k*S)+v(n*R))+v(t*Q)))+v(G*v(v(v(k*P)+v(n*N))+v(t*L))))+v(A*v(v(v(k*O)+v(n*K))+v(t*J))));r=k>j;j=r?k:j;y=r?a:y;a=a+1|0;if((w|0)!=(a|0)){continue}break}}o[i+20>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;m[i+24|0]=1;b:{I=o[(q+u(y,36)|0)+4>>2];if((I|0)<1){break b}T=q+u(y,36)|0;q=0;w=0;while(1){a=o[c+16>>2]+(o[o[T+12>>2]+(D<<2)>>2]<<4)|0;j=s[a>>2];k=s[a+4>>2];n=s[a+8>>2];t=v(v(v(v(j*s[e+32>>2])+v(k*s[e+36>>2]))+v(n*s[e+40>>2]))+s[e+56>>2]);A=v(v(v(v(j*s[e+16>>2])+v(k*s[e+20>>2]))+v(n*s[e+24>>2]))+s[e+52>>2]);j=v(v(v(v(j*s[e>>2])+v(k*s[e+4>>2]))+v(n*s[e+8>>2]))+s[e+48>>2]);c:{if((q|0)!=(w|0)){break c}B=q?q<<1:1;if((q|0)>=(B|0)){break c}a=0;E=0;if(B){o[7717]=o[7717]+1;E=l[o[6606]](B<<4,16)|0}r=o[i+20>>2];d:{e:{if((q|0)>=1){while(1){x=a<<4;z=x+E|0;x=r+x|0;F=o[x+4>>2];o[z>>2]=o[x>>2];o[z+4>>2]=F;F=o[x+12>>2];o[z+8>>2]=o[x+8>>2];o[z+12>>2]=F;a=a+1|0;if((q|0)!=(a|0)){continue}break e}}if(!r){break d}}if(p[i+24|0]){if(r){o[7718]=o[7718]+1;l[o[6607]](r)}}o[i+20>>2]=0}o[i+20>>2]=E;m[i+24|0]=1;o[i+16>>2]=B}a=o[i+20>>2]+(w<<4)|0;o[a+12>>2]=0;s[a+8>>2]=t;s[a+4>>2]=A;s[a>>2]=j;w=o[i+12>>2]+1|0;o[i+12>>2]=w;D=D+1|0;if((I|0)==(D|0)){break b}q=o[i+16>>2];continue}}if((y|0)>-1){ll(i+32|0,b,d,i+8|0,f,g,h)}a=o[i+20>>2];if(a){if(p[i+24|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[i+20>>2]=0}M=i+48|0}function fm(a,b,c,d,e,f){var g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=0,x=0,y=0,z=0,A=v(0),B=0,C=0,D=0,E=0,F=0;h=M-16|0;j=s[d>>2];g=s[c>>2];k=v(v(j+g)*v(.5));i=v(s[b>>2]-k);j=v(j-g);u=v(j*v(.5));w=i>u;j=v(j*v(-.5));x=i<j;g=s[d+4>>2];l=s[c+4>>2];m=v(v(g+l)*v(.5));q=v(s[b+4>>2]-m);g=v(g-l);n=v(g*v(-.5));y=q<n;l=v(g*v(.5));z=q>l;g=s[d+8>>2];p=s[c+8>>2];t=v(v(g+p)*v(.5));r=v(s[b+8>>2]-t);g=v(g-p);A=v(g*v(-.5));d=r<A;p=v(g*v(.5));b=x|w<<3|y<<1|z<<4|d<<2|(r>p)<<5;k=v(s[a>>2]-k);c=k>u;B=k<j;m=v(s[a+4>>2]-m);C=m<n;D=m>l;n=v(s[a+8>>2]-t);E=n<A;F=B|c<<3|C<<1|D<<4|E<<2|(n>p)<<5;if(!(b&F)){j=s[e>>2];o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=0;o[h+4>>2]=0;t=v(i-k);g=v(-k);a=h|4;a:{if(!!B){i=v(v(g-u)/t);if(!(i>=v(0))){i=v(0);break a}o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[h>>2]=1065353216;break a}i=v(0);if(!x){break a}g=v(v(g-u)/t);if(!(g<j)){break a}j=g}q=v(q-m);g=v(-m);b:{c:{if(C){g=v(v(g-l)/q);if(!(i<=g)){break c}o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=0;o[h+4>>2]=0;o[h+4>>2]=1065353216;break b}if(!y){break c}g=v(v(g-l)/q);if(!(g<j)){break c}j=g}g=i}r=v(r-n);i=v(-n);d:{e:{if(!!E){i=v(v(i-p)/r);if(!(g<=i)){break e}o[h+8>>2]=0;o[h+12>>2]=0;o[h+8>>2]=1065353216;o[h>>2]=0;o[h+4>>2]=0;break d}if(!d){break e}i=v(v(i-p)/r);if(!(i<j)){break e}j=i}i=g}f:{g:{if(!!c){g=v(v(u-k)/t);if(!(i<=g)){break g}o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[h>>2]=-1082130432;break f}if(!w){break g}g=v(v(u-k)/t);if(!(g<j)){break g}j=g}g=i}h:{i:{if(!!D){i=v(v(l-m)/q);if(!(g<=i)){break i}o[h+8>>2]=0;o[h+12>>2]=0;o[h>>2]=0;o[h+4>>2]=0;o[h+4>>2]=-1082130432;break h}if(!z){break i}i=v(v(l-m)/q);if(!(i<j)){break i}j=i}i=g}j:{k:{if(F&32){g=v(v(p-n)/r);if(!(i<=g)){break k}o[h+8>>2]=0;o[h+12>>2]=0;o[h+8>>2]=-1082130432;o[h>>2]=0;o[h+4>>2]=0;break j}if(!(b&32)){break k}g=v(v(p-n)/r);if(!(g<j)){break k}j=g}g=i}if(!!(g<=j)){s[e>>2]=g;a=o[h+12>>2];o[f+8>>2]=o[h+8>>2];o[f+12>>2]=a;a=o[h+4>>2];o[f>>2]=o[h>>2];o[f+4>>2]=a;return 1}}return 0}function xA(a){var b=0;o[a+288>>2]=0;o[a+292>>2]=1065353216;o[a+236>>2]=8;n[a+472>>1]=0;o[a+296>>2]=0;o[a+300>>2]=0;o[a+304>>2]=0;o[a+308>>2]=0;o[a+312>>2]=0;o[a+476>>2]=0;o[a+388>>2]=1;o[a+380>>2]=0;o[a+384>>2]=4;o[a+372>>2]=0;o[a+376>>2]=1;o[a+364>>2]=1065353216;o[a+368>>2]=1065353216;o[a+356>>2]=1056964608;o[a+360>>2]=1056964608;o[a+348>>2]=1056964608;o[a+352>>2]=1056964608;o[a+340>>2]=1036831949;o[a+344>>2]=1065353216;o[a+332>>2]=1065353216;o[a+336>>2]=1060320051;o[a+324>>2]=1065353216;o[a+328>>2]=1036831949;o[a+316>>2]=1045220557;o[a+320>>2]=0;o[a+528>>2]=0;o[a+532>>2]=0;o[a+520>>2]=0;o[a+524>>2]=0;o[a+540>>2]=0;o[a+544>>2]=0;o[a+536>>2]=1065353216;o[a+548>>2]=0;o[a+552>>2]=0;o[a+560>>2]=0;o[a+564>>2]=0;o[a+556>>2]=1065353216;o[a+568>>2]=0;o[a+572>>2]=0;o[a+584>>2]=1065353216;o[a+576>>2]=1065353216;o[a+580>>2]=0;o[a+588>>2]=0;o[a+592>>2]=0;o[a+596>>2]=0;o[a+600>>2]=0;o[a+608>>2]=0;o[a+612>>2]=0;o[a+604>>2]=1065353216;o[a+616>>2]=0;o[a+620>>2]=0;m[a+924|0]=1;o[a+624>>2]=1065353216;o[a+628>>2]=0;o[a+888>>2]=0;o[a+680>>2]=0;o[a+916>>2]=0;o[a+920>>2]=0;o[a+908>>2]=0;o[a+912>>2]=0;o[a+900>>2]=0;o[a+904>>2]=0;o[a+892>>2]=0;o[a+896>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;o[a+4>>2]=1065353216;o[a+8>>2]=0;o[a+12>>2]=0;o[a+36>>2]=0;o[a+40>>2]=0;o[a+24>>2]=1065353216;o[a+28>>2]=0;o[a+32>>2]=0;o[a- -64>>2]=0;o[a+44>>2]=1065353216;o[a+56>>2]=0;o[a+60>>2]=0;o[a+48>>2]=0;o[a+52>>2]=0;wA(a);o[7717]=o[7717]+1;b=l[o[6606]](20,16)|0;o[b+4>>2]=35;o[b+8>>2]=0;o[b+12>>2]=0;o[b>>2]=14720;o[b+16>>2]=a;o[b+4>>2]=32;o[b>>2]=21516;o[a+192>>2]=b;o[b+12>>2]=1048576e3;b=a+1152|0;o[b>>2]=0;o[b+4>>2]=0;o[a+1148>>2]=1065353216;b=a+1160|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1172|0;o[b>>2]=0;o[b+4>>2]=0;o[a+1168>>2]=1065353216;b=a+1180|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1192|0;o[b>>2]=0;o[b+4>>2]=0;o[a+1188>>2]=1065353216;b=a+1200|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1208|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1216|0;o[b>>2]=0;o[b+4>>2]=0;a=a+1224|0;o[a>>2]=0;o[a+4>>2]=1065353216}function CI(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0);c=M-144|0;M=c;if(o[a+16>>2]>=1){f=c- -64|0;while(1){g=u(h,80);d=g+o[a+24>>2]|0;e=o[d+12>>2];o[c+24>>2]=o[d+8>>2];o[c+28>>2]=e;e=o[d+4>>2];o[c+16>>2]=o[d>>2];o[c+20>>2]=e;e=o[d+28>>2];o[c+40>>2]=o[d+24>>2];o[c+44>>2]=e;e=o[d+20>>2];o[c+32>>2]=o[d+16>>2];o[c+36>>2]=e;e=o[d+44>>2];o[c+56>>2]=o[d+40>>2];o[c+60>>2]=e;e=o[d+36>>2];o[c+48>>2]=o[d+32>>2];o[c+52>>2]=e;e=o[d+60>>2];o[f+8>>2]=o[d+56>>2];o[f+12>>2]=e;e=o[d+52>>2];o[f>>2]=o[d+48>>2];o[f+4>>2]=e;d=o[d+64>>2];d=l[o[o[d>>2]+28>>2]](d)|0;o[c+8>>2]=o[d+8>>2];e=o[d+4>>2];o[c>>2]=o[d>>2];o[c+4>>2]=e;i=s[a+80>>2];j=s[b+4>>2];k=s[a+76>>2];m=s[b>>2];s[c+8>>2]=v(s[c+8>>2]*s[b+8>>2])/s[a+84>>2];o[c+12>>2]=0;s[c>>2]=v(m*s[c>>2])/k;s[c+4>>2]=v(j*s[c+4>>2])/i;d=o[(o[a+24>>2]+g|0)+64>>2];l[o[o[d>>2]+24>>2]](d,c);i=s[a+76>>2];j=s[b>>2];k=s[a+80>>2];m=s[b+4>>2];n=s[a+84>>2];p=s[b+8>>2];o[c+76>>2]=0;s[c+72>>2]=v(p*s[c+72>>2])/n;s[c+68>>2]=v(m*s[c+68>>2])/k;s[c+64>>2]=v(j*s[c+64>>2])/i;e=o[c+20>>2];d=o[a+24>>2]+g|0;o[d>>2]=o[c+16>>2];o[d+4>>2]=e;e=o[c+28>>2];o[d+8>>2]=o[c+24>>2];o[d+12>>2]=e;e=o[c+44>>2];o[d+24>>2]=o[c+40>>2];o[d+28>>2]=e;e=o[c+36>>2];o[d+16>>2]=o[c+32>>2];o[d+20>>2]=e;e=o[c+60>>2];o[d+40>>2]=o[c+56>>2];o[d+44>>2]=e;e=o[c+52>>2];o[d+32>>2]=o[c+48>>2];o[d+36>>2]=e;e=o[f+12>>2];o[d+56>>2]=o[f+8>>2];o[d+60>>2]=e;e=o[f+4>>2];o[d+48>>2]=o[f>>2];o[d+52>>2]=e;if(o[a+64>>2]){d=o[(o[a+24>>2]+g|0)+64>>2];l[o[o[d>>2]+8>>2]](d,c+16|0,c+128|0,c+112|0);d=o[c+140>>2];o[c+88>>2]=o[c+136>>2];o[c+92>>2]=d;d=o[c+132>>2];o[c+80>>2]=o[c+128>>2];o[c+84>>2]=d;d=o[c+124>>2];o[c+104>>2]=o[c+120>>2];o[c+108>>2]=d;d=o[c+116>>2];o[c+96>>2]=o[c+112>>2];o[c+100>>2]=d;Wc(o[a+64>>2],o[(o[a+24>>2]+g|0)+76>>2],c+80|0)}h=h+1|0;if((h|0)<o[a+16>>2]){continue}break}}d=o[b+4>>2];o[a+76>>2]=o[b>>2];o[a+80>>2]=d;d=o[b+12>>2];o[a+84>>2]=o[b+8>>2];o[a+88>>2]=d;l[o[o[a>>2]+68>>2]](a);M=c+144|0}function hk(a,b,c,d,e,f,g,h,i){var j=0,k=0,n=0,q=v(0),r=0,t=0,u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,C=0,D=v(0),E=0;k=M-32|0;M=k;if(b){j=o[a+44>>2];if((j|0)<=127){if(o[a+48>>2]<=127){o[7717]=o[7717]+1;r=l[o[6606]](512,16)|0;u=o[a+44>>2];if((u|0)>=1){while(1){n=t<<2;o[n+r>>2]=o[n+o[a+52>>2]>>2];t=t+1|0;if((u|0)!=(t|0)){continue}break}}t=o[a+52>>2];if(t){if(p[a+56|0]){if(t){o[7718]=o[7718]+1;l[o[6607]](t)}}o[a+52>>2]=0}o[a+52>>2]=r;o[a+48>>2]=128;m[a+56|0]=1}while(1){o[o[a+52>>2]+(j<<2)>>2]=0;j=j+1|0;if((j|0)!=128){continue}break}}o[a+44>>2]=128;o[o[a+52>>2]>>2]=b;j=126;t=1;while(1){u=o[a+52>>2];b=t+ -1|0;C=b<<2;r=o[u+C>>2];w=s[r>>2];x=s[r+4>>2];q=s[r+8>>2];y=s[h>>2];z=s[h+4>>2];A=s[h+8>>2];o[k+12>>2]=0;s[k+8>>2]=q-A;s[k+4>>2]=x-z;s[k>>2]=w-y;w=s[r+16>>2];x=s[r+20>>2];q=s[r+24>>2];y=s[g>>2];z=s[g+4>>2];A=s[g+8>>2];o[k+28>>2]=0;s[k+24>>2]=q-A;s[k+20>>2]=x-z;s[k+16>>2]=w-y;n=o[e+4>>2];y=s[c+4>>2];z=s[d+4>>2];w=v(v(s[((n<<4)+k|0)+4>>2]-y)*z);q=s[d>>2];B=o[e>>2];A=s[c>>2];x=v(q*v(s[(1-B<<4)+k>>2]-A));a:{if(w>x){break a}q=v(v(s[(B<<4)+k>>2]-A)*q);y=v(z*v(s[((1-n<<4)+k|0)+4>>2]-y));if(q>y){break a}n=o[e+8>>2];A=s[c+8>>2];D=s[d+8>>2];z=v(v(s[((n<<4)+k|0)+8>>2]-A)*D);x=y<x?y:x;if(z>x){break a}w=w>q?w:q;q=v(D*v(s[((1-n<<4)+k|0)+8>>2]-A));if(w>q|(z>w?z:w)<f^1|(q<x?q:x)>v(0)^1){break a}if(o[r+40>>2]){if((b|0)>(j|0)){j=o[a+44>>2];n=j<<1;if((j|0)<(n|0)){if(o[a+48>>2]<(n|0)){b:{if(!j){u=0;break b}o[7717]=o[7717]+1;u=l[o[6606]](j<<3,16)|0;b=0;B=o[a+44>>2];if((B|0)<1){break b}while(1){E=b<<2;o[E+u>>2]=o[o[a+52>>2]+E>>2];b=b+1|0;if((B|0)!=(b|0)){continue}break}}b=o[a+52>>2];if(b){if(p[a+56|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+52>>2]=0}o[a+52>>2]=u;m[a+56|0]=1;o[a+48>>2]=n}while(1){o[(j<<2)+u>>2]=0;u=o[a+52>>2];j=j+1|0;if((n|0)!=(j|0)){continue}break}}o[a+44>>2]=n;j=n+ -2|0}o[u+C>>2]=o[r+36>>2];o[o[a+52>>2]+(t<<2)>>2]=o[r+40>>2];b=t+1|0;break a}l[o[o[i>>2]+12>>2]](i,r)}t=b;if(b){continue}break}}M=k+32|0}function jE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;o[b+16>>2]=o[a+20>>2];o[b+20>>2]=o[a+24>>2];o[b+24>>2]=o[a+28>>2];o[b+28>>2]=o[a+32>>2];o[b>>2]=o[a+4>>2];o[b+4>>2]=o[a+8>>2];o[b+8>>2]=o[a+12>>2];o[b+12>>2]=o[a+16>>2];o[b+32>>2]=o[a+36>>2];o[b+36>>2]=o[a+40>>2];o[b+40>>2]=o[a+44>>2];o[b+44>>2]=o[a+48>>2];o[b+48>>2]=o[a+56>>2];o[b+52>>2]=p[a+60|0];d=o[a+88>>2];o[b+56>>2]=d;a:{if(!d){o[b+64>>2]=0;break a}d=l[o[o[c>>2]+28>>2]](c,o[a+96>>2])|0;o[b+64>>2]=d;if(!d){break a}g=o[a+88>>2];h=l[o[o[c>>2]+16>>2]](c,48,g)|0;i=o[a+96>>2];if((g|0)>=1){d=o[h+8>>2];while(1){e=i+(f<<6)|0;o[d+16>>2]=o[e+16>>2];o[d+20>>2]=o[e+20>>2];o[d+24>>2]=o[e+24>>2];o[d+28>>2]=o[e+28>>2];o[d>>2]=o[e>>2];o[d+4>>2]=o[e+4>>2];o[d+8>>2]=o[e+8>>2];o[d+12>>2]=o[e+12>>2];o[d+32>>2]=o[e+32>>2];o[d+36>>2]=o[e+36>>2];o[d+40>>2]=o[e+40>>2];d=d+48|0;f=f+1|0;if((g|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,h,17640,1497453121,i)}d=o[a+128>>2];o[b+60>>2]=d;b:{if(!d){o[b+68>>2]=0;break b}d=l[o[o[c>>2]+28>>2]](c,o[a+136>>2])|0;o[b+68>>2]=d;if(!d){break b}g=o[a+128>>2];h=l[o[o[c>>2]+16>>2]](c,16,g)|0;i=o[a+136>>2];if((g|0)>=1){d=o[h+8>>2];f=0;while(1){e=i+(f<<4)|0;o[d+12>>2]=o[e+12>>2];n[d+6>>1]=q[e+6>>1];n[d+8>>1]=q[e+8>>1];n[d+10>>1]=q[e+10>>1];n[d>>1]=q[e>>1];n[d+2>>1]=q[e+2>>1];n[d+4>>1]=q[e+4>>1];d=d+16|0;f=f+1|0;if((g|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,h,17663,1497453121,i)}o[b+76>>2]=o[a+144>>2];d=o[a+152>>2];o[b+80>>2]=d;if(!d){o[b+72>>2]=0;return 17707}d=b;b=l[o[o[c>>2]+28>>2]](c,o[a+160>>2])|0;o[d+72>>2]=b;if(b){b=o[a+152>>2];e=l[o[o[c>>2]+16>>2]](c,20,b)|0;g=o[a+160>>2];if((b|0)>=1){d=o[e+8>>2];f=0;while(1){a=g+(f<<5)|0;n[d+14>>1]=q[a+6>>1];n[d+16>>1]=q[a+8>>1];n[d+18>>1]=q[a+10>>1];n[d+8>>1]=q[a>>1];n[d+10>>1]=q[a+2>>1];n[d+12>>1]=q[a+4>>1];o[d>>2]=o[a+12>>2];o[d+4>>2]=o[a+16>>2];d=d+20|0;f=f+1|0;if((b|0)!=(f|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,e,17686,1497453121,g)}return 17707}function yJ(a,b,c,d,e,f){var g=v(0),h=0,i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=0,D=v(0),E=v(0),F=v(0),G=v(0),H=0;h=M-32|0;M=h;i=o[a+4>>2];A=v(s[i+28>>2]*s[i+12>>2]);g=v(A+f);j=s[b+8>>2];i=o[a+8>>2];f=s[i- -64>>2];x=v(j-f);k=s[i+56>>2];t=v(s[i+72>>2]-k);r=s[i+60>>2];p=v(s[i+92>>2]-r);m=v(s[i+76>>2]-r);q=v(s[i+88>>2]-k);n=v(v(t*p)-v(m*q));w=n;y=v(n*n);n=v(s[i+96>>2]-f);z=v(m*n);m=v(s[i+80>>2]-f);f=v(z-v(m*p));m=v(v(m*q)-v(t*n));q=v(v(1)/v(C(v(y+v(v(f*f)+v(m*m))))));n=v(w*q);p=s[b>>2];t=v(f*q);f=v(v(p-k)*t);k=s[b+4>>2];w=v(k-r);r=v(m*q);f=v(v(x*n)+v(f+v(w*r)));if(!!(f<v(0))){n=v(-n);r=v(-r);t=v(-t);f=v(-f)}a:{if(!(f<g)){break a}B=o[b+12>>2];o[h+24>>2]=o[b+8>>2];o[h+28>>2]=B;B=o[b+4>>2];o[h+16>>2]=o[b>>2];o[h+20>>2]=B;o[h+12>>2]=0;s[h+8>>2]=n;s[h+4>>2]=r;s[h>>2]=t;b:{if(xJ(i+56|0,h,h+16|0)){D=v(j-v(f*n));E=v(k-v(f*r));F=v(p-v(f*t));w=v(g*g);break b}if((l[o[o[i>>2]+100>>2]](i)|0)<1){break a}w=v(g*g);i=0;while(1){u=o[a+8>>2];l[o[o[u>>2]+104>>2]](u,i,h+16|0,h);g=v(0);x=s[h+16>>2];f=v(s[b>>2]-x);p=v(s[h>>2]-x);y=s[h+20>>2];k=v(s[b+4>>2]-y);m=v(s[h+4>>2]-y);z=s[h+24>>2];j=v(s[b+8>>2]-z);q=v(s[h+8>>2]-z);G=v(v(v(f*p)+v(k*m))+v(j*q));c:{if(!(G>v(0))){break c}g=v(v(v(p*p)+v(m*m))+v(q*q));if(!!(G<g)){g=v(G/g);j=v(j-v(q*g));k=v(k-v(m*g));f=v(f-v(p*g));break c}j=v(j-q);k=v(k-m);f=v(f-p);g=v(1)}if(!!(v(v(v(f*f)+v(k*k))+v(j*j))<w)){F=v(x+v(p*g));E=v(y+v(m*g));H=1;D=v(z+v(q*g))}i=i+1|0;u=o[a+8>>2];if((i|0)<(l[o[o[u>>2]+100>>2]](u)|0)){continue}break}u=0;if(!H){break a}j=s[b+8>>2];k=s[b+4>>2];p=s[b>>2]}f=v(p-F);k=v(k-E);j=v(j-D);g=v(v(v(f*f)+v(k*k))+v(j*j));if(!(g<w)){break a}d:{if(!!(g>v(1.1920928955078125e-7))){o[d+12>>2]=0;n=j;g=v(C(g));j=v(v(1)/g);s[d+8>>2]=n*j;s[d+4>>2]=k*j;s[d>>2]=f*j;A=v(A-g);break d}o[d+12>>2]=0;s[d+8>>2]=n;s[d+4>>2]=r;s[d>>2]=t}o[c+12>>2]=0;s[c+8>>2]=D;s[c+4>>2]=E;s[c>>2]=F;s[e>>2]=-A;u=1}M=h+32|0;return u}function cn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=0;e=M-272|0;M=e;o[e+268>>2]=a;o[e+264>>2]=b;o[e+260>>2]=c;o[e+256>>2]=d;d=o[e+268>>2];a=e+224|0;db(a,o[e+260>>2],o[e+264>>2]);s[e+220>>2]=.5;ta(e+240|0,a,e+220|0);a=e+184|0;ha(a,o[e+260>>2],o[e+264>>2]);s[e+180>>2]=.5;ta(e+200|0,a,e+180|0);s[e+148>>2]=1;s[e+144>>2]=1;s[e+140>>2]=1;Y(e+152|0,e+148|0,e+144|0,e+140|0);o[(M-16|0)+12>>2]=e+120;o[(M-16|0)+12>>2]=e+104;o[e+176>>2]=0;while(1){if(o[e+176>>2]<4){o[e+172>>2]=0;while(1){if(o[e+172>>2]<3){b=M-16|0;a=e+152|0;o[b+12>>2]=a;g=s[o[b+12>>2]>>2];c=M-16|0;b=e+240|0;o[c+12>>2]=b;s[e+84>>2]=g*s[o[c+12>>2]>>2];c=M-16|0;o[c+12>>2]=a;g=s[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=b;s[e+80>>2]=g*s[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=a;g=s[o[c+12>>2]+8>>2];c=M-16|0;o[c+12>>2]=b;s[e+76>>2]=g*s[o[c+12>>2]+8>>2];Y(e+88|0,e+84|0,e+80|0,e+76|0);h=o[e+92>>2];c=e+120|0;o[c>>2]=o[e+88>>2];o[c+4>>2]=h;h=o[e+100>>2];o[c+8>>2]=o[e+96>>2];o[c+12>>2]=h;h=e+200|0;Wa(c,h);o[e+72>>2]=o[e+172>>2]%3;f=M-16|0;o[f+12>>2]=a;f=o[f+12>>2]+(o[e+72>>2]<<2)|0;s[f>>2]=s[f>>2]*v(-1);f=M-16|0;o[f+12>>2]=a;g=s[o[f+12>>2]>>2];f=M-16|0;o[f+12>>2]=b;s[e+52>>2]=g*s[o[f+12>>2]>>2];f=M-16|0;o[f+12>>2]=a;g=s[o[f+12>>2]+4>>2];f=M-16|0;o[f+12>>2]=b;s[e+48>>2]=g*s[o[f+12>>2]+4>>2];f=M-16|0;o[f+12>>2]=a;g=s[o[f+12>>2]+8>>2];a=M-16|0;o[a+12>>2]=b;s[e+44>>2]=g*s[o[a+12>>2]+8>>2];Y(e+56|0,e+52|0,e+48|0,e+44|0);b=o[e+60>>2];a=e+104|0;o[a>>2]=o[e+56>>2];o[a+4>>2]=b;b=o[e+68>>2];o[a+8>>2]=o[e+64>>2];o[a+12>>2]=b;Wa(a,h);l[o[o[d>>2]+8>>2]](d,c,a,o[e+256>>2]);o[e+172>>2]=o[e+172>>2]+1;continue}break}s[e+20>>2]=-1;s[e+16>>2]=-1;s[e+12>>2]=-1;Y(e+24|0,e+20|0,e+16|0,e+12|0);a=o[e+28>>2];o[e+152>>2]=o[e+24>>2];o[e+156>>2]=a;a=o[e+36>>2];o[e+160>>2]=o[e+32>>2];o[e+164>>2]=a;if(o[e+176>>2]<3){a=M-16|0;o[a+12>>2]=e+152;a=o[a+12>>2]+(o[e+176>>2]<<2)|0;s[a>>2]=s[a>>2]*v(-1)}o[e+176>>2]=o[e+176>>2]+1;continue}break}M=e+272|0}function iF(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,r=0;k=M-16|0;M=k;d=o[a+92>>2];if(l[o[o[d>>2]+56>>2]](d)){d=o[a+92>>2];e=l[o[o[d>>2]+28>>2]](d)|0;i=o[e+4>>2];if((i|0)>=2){bc(e,k+8|0,0,i+ -1|0);i=o[e+4>>2]}c=o[a+104>>2];d=i-c|0;if((c|0)<=-1){if(o[e+8>>2]<(d|0)){if(d){o[7717]=o[7717]+1;g=l[o[6606]](d<<4,16)|0;c=o[e+4>>2]}else{c=i}if((c|0)>=1){while(1){f=j<<4;h=f+g|0;f=f+o[e+12>>2]|0;o[h>>2]=o[f>>2];o[h+4>>2]=o[f+4>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=o[f+12>>2];j=j+1|0;if((c|0)!=(j|0)){continue}break}}c=o[e+12>>2];if(c){if(p[e+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[e+12>>2]=0}o[e+12>>2]=g;m[e+16|0]=1;o[e+8>>2]=d}while(1){c=o[e+12>>2]+(i<<4)|0;o[c>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;i=i+1|0;if((d|0)!=(i|0)){continue}break}}o[e+4>>2]=d;o[a+104>>2]=0;i=e;if((d|0)>=1){f=0;g=0;j=0;while(1){h=o[e+12>>2]+(f<<4)|0;c=o[h+4>>2];r=g;g=o[h>>2];a:{b:{if(((c|0)==(j|0)?(r|0)==(g|0):0)|q[g+54>>1]<q[c+48>>1]|(q[c+54>>1]<q[g+48>>1]|q[g+56>>1]<q[c+50>>1])){break b}if(q[c+56>>1]<q[g+50>>1]|q[g+58>>1]<q[c+52>>1]){break b}if(q[c+58>>1]>=q[g+52>>1]){break a}}d=o[a+92>>2];l[o[o[d>>2]+32>>2]](d,h,b);o[h>>2]=0;o[h+4>>2]=0;n=o[a+104>>2]+1|0;o[a+104>>2]=n;o[7305]=o[7305]+ -1;d=o[e+4>>2]}j=c;f=f+1|0;if((f|0)<(d|0)){continue}break}if((d|0)>=2){bc(e,k,0,d+ -1|0);n=o[a+104>>2];d=o[e+4>>2]}c=d-n|0;if((n|0)<=-1){if(o[e+8>>2]<(c|0)){c:{if(!c){g=0;b=d;break c}o[7717]=o[7717]+1;g=l[o[6606]](c<<4,16)|0;b=o[e+4>>2]}if((b|0)>=1){j=0;while(1){f=j<<4;h=f+g|0;f=f+o[e+12>>2]|0;o[h>>2]=o[f>>2];o[h+4>>2]=o[f+4>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=o[f+12>>2];j=j+1|0;if((b|0)!=(j|0)){continue}break}}b=o[e+12>>2];if(b){if(p[e+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[e+12>>2]=0}o[e+12>>2]=g;m[e+16|0]=1;o[e+8>>2]=c}while(1){b=o[e+12>>2]+(d<<4)|0;o[b>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;d=d+1|0;if((c|0)!=(d|0)){continue}break}}d=c}o[i+4>>2]=d;o[a+104>>2]=0}M=k+16|0}function wz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=0,B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0);a=o[a+16>>2];e=s[a+900>>2];i=s[a+896>>2];j=s[a+908>>2];m=s[a+912>>2];t=s[a+916>>2];u=s[a+892>>2];f=s[b+52>>2];n=s[b+20>>2];w=s[b+24>>2];g=s[b+56>>2];p=s[b+36>>2];x=s[b+40>>2];h=s[b+48>>2];B=s[b+8>>2];C=s[b>>2];D=s[b+4>>2];q=s[b+16>>2];r=s[b+32>>2];b=M-128|0;o[b+124>>2]=0;o[b+108>>2]=0;o[b+92>>2]=0;o[b+76>>2]=0;o[b+60>>2]=0;o[b+44>>2]=0;o[b+28>>2]=0;E=v(u*r);y=v(m*p);F=v(E+y);k=v(t*x);s[b+120>>2]=g+v(F+k);G=v(u*q);z=v(m*n);H=v(G+z);l=v(t*w);s[b+116>>2]=f+v(H+l);r=v(j*r);y=v(r+y);s[b+104>>2]=g+v(y+k);q=v(j*q);z=v(q+z);s[b+100>>2]=f+v(z+l);p=v(i*p);r=v(r+p);s[b+88>>2]=g+v(r+k);n=v(i*n);q=v(q+n);s[b+84>>2]=f+v(q+l);p=v(E+p);s[b+72>>2]=g+v(p+k);n=v(G+n);s[b+68>>2]=f+v(n+l);k=v(e*x);s[b+56>>2]=g+v(F+k);l=v(e*w);s[b+52>>2]=f+v(H+l);s[b+40>>2]=g+v(y+k);s[b+36>>2]=f+v(z+l);s[b+24>>2]=g+v(r+k);s[b+20>>2]=f+v(q+l);o[b+12>>2]=0;u=v(u*C);w=v(m*D);x=v(u+w);m=v(t*B);s[b+112>>2]=h+v(x+m);j=v(j*C);t=v(j+w);s[b+96>>2]=h+v(t+m);i=v(i*D);j=v(j+i);s[b+80>>2]=h+v(j+m);i=v(u+i);s[b+64>>2]=h+v(i+m);e=v(e*B);s[b+48>>2]=h+v(x+e);s[b+32>>2]=h+v(t+e);s[b+16>>2]=h+v(j+e);s[b+8>>2]=g+v(p+k);s[b+4>>2]=f+v(n+l);s[b>>2]=h+v(i+e);a=o[b+12>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=a;a=o[b+4>>2];o[d>>2]=o[b>>2];o[d+4>>2]=a;a=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=a;a=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=a;a=1;while(1){A=b+(a<<4)|0;f=s[A>>2];if(!!(f<s[c>>2])){s[c>>2]=f}g=s[A+4>>2];if(!!(g<s[c+4>>2])){s[c+4>>2]=g}h=s[A+8>>2];if(!!(h<s[c+8>>2])){s[c+8>>2]=h}e=s[A+12>>2];if(!!(e<s[c+12>>2])){s[c+12>>2]=e}if(!!(s[d>>2]<f)){s[d>>2]=f}if(!!(s[d+4>>2]<g)){s[d+4>>2]=g}if(!!(s[d+8>>2]<h)){s[d+8>>2]=h}if(!!(s[d+12>>2]<e)){s[d+12>>2]=e}a=a+1|0;if((a|0)!=8){continue}break}}function wy(a,b){var c=0,d=v(0),e=0,f=v(0),g=v(0),h=0,i=0,j=0,k=0,n=v(0),q=0,r=0,t=v(0),u=0,w=0,x=0,y=v(0),z=v(0),A=0,B=0,D=0,E=0,F=0,G=v(0);r=o[a+4>>2];if((r|0)>=1){while(1){a:{k=w;w=k+1|0;if((w|0)>=(r|0)){break a}i=o[a+12>>2];u=i+(k<<4)|0;D=u;c=w;while(1){b:{k=c+1|0;if((k|0)>=(r|0)){break b}B=(c<<4)+i|0;F=B;x=k;while(1){n=s[u>>2];f=v(s[B>>2]-n);c=(x<<4)+i|0;d=s[u+4>>2];t=v(s[c+4>>2]-d);g=v(s[B+4>>2]-d);y=v(s[c>>2]-n);G=v(v(f*t)-v(g*y));d=s[D+8>>2];n=v(s[F+8>>2]-d);d=v(s[c+8>>2]-d);y=v(v(n*y)-v(f*d));n=v(v(g*d)-v(n*t));d=v(1);E=1;while(1){f=v(G*d);t=v(n*d);g=v(y*d);d=v(v(f*f)+v(v(t*t)+v(g*g)));c:{if(!(d>v(9999999747378752e-20))){break c}d=v(v(1)/v(C(d)));z=v(f*d);f=v(g*d);g=v(t*d);h=o[b+4>>2];if((h|0)>=1){q=o[b+12>>2];c=0;while(1){e=q+(c<<4)|0;if(!!(v(v(v(g*s[e>>2])+v(f*s[e+4>>2]))+v(z*s[e+8>>2]))>v(.9990000128746033))){break c}c=c+1|0;if((h|0)!=(c|0)){continue}break}}d=v(v(v(g*s[u>>2])+v(f*s[u+4>>2]))+v(z*s[D+8>>2]));e=o[a+4>>2];if((e|0)>=1){q=o[a+12>>2];c=0;while(1){j=q+(c<<4)|0;if(!!(v(v(v(v(v(g*s[j>>2])+v(f*s[j+4>>2]))+v(z*s[j+8>>2]))-d)+v(-.009999999776482582))>v(0))){break c}c=c+1|0;if((e|0)!=(c|0)){continue}break}}d=v(-d);d:{if(o[b+8>>2]!=(h|0)){break d}A=h?h<<1:1;if((h|0)>=(A|0)){break d}i=0;q=0;if(A){o[7717]=o[7717]+1;q=l[o[6606]](A<<4,16)|0;h=o[b+4>>2]}if((h|0)>=1){while(1){c=i<<4;e=c+q|0;j=c+o[b+12>>2]|0;c=o[j+4>>2];o[e>>2]=o[j>>2];o[e+4>>2]=c;c=o[j+12>>2];o[e+8>>2]=o[j+8>>2];o[e+12>>2]=c;i=i+1|0;if((i|0)!=(h|0)){continue}break}}c=o[b+12>>2];if(c){if(p[b+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[b+12>>2]=0}o[b+12>>2]=q;m[b+16|0]=1;o[b+8>>2]=A;h=o[b+4>>2]}c=o[b+12>>2]+(h<<4)|0;s[c+12>>2]=d;s[c+8>>2]=z;s[c+4>>2]=f;s[c>>2]=g;o[b+4>>2]=o[b+4>>2]+1}c=E;d=v(-1);E=0;if(c){continue}break}x=x+1|0;if((x|0)>=(r|0)){break b}i=o[a+12>>2];continue}}if((r|0)==(k|0)){break a}i=o[a+12>>2];c=k;continue}}if((r|0)!=(w|0)){continue}break}}}function DE(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=v(0);f=M-32|0;M=f;h=a+4|0;Xc(h,((u(o[a+152>>2],o[a+16>>2])|0)/100|0)+1|0);if(o[a+164>>2]){c=((u(o[a+148>>2],o[a+76>>2])|0)/100|0)+1|0;Xc(a- -64|0,c);c=o[a+164>>2]-c|0;o[a+164>>2]=(c|0)>0?c:0}c=(o[a+144>>2]+1|0)%2|0;o[a+144>>2]=c;d=o[((c<<2)+a|0)+124>>2];if(d){g=a- -64|0;while(1){c=o[d+56>>2];e=o[d+52>>2];a:{if(e){i=e+56|0;break a}i=((o[d+60>>2]<<2)+a|0)+124|0}o[i>>2]=c;e=o[d+56>>2];if(e){o[e+52>>2]=o[d+52>>2]}o[d+52>>2]=0;o[d+56>>2]=o[a+132>>2];e=o[a+132>>2];if(e){o[e+52>>2]=d}o[a+132>>2]=d;Vc(h,o[d+48>>2]);e=o[d+28>>2];o[f+8>>2]=o[d+24>>2];o[f+12>>2]=e;e=o[d+20>>2];o[f>>2]=o[d+16>>2];o[f+4>>2]=e;e=o[d+44>>2];o[f+24>>2]=o[d+40>>2];o[f+28>>2]=e;e=o[d+36>>2];o[f+16>>2]=o[d+32>>2];o[f+20>>2]=e;e=bb(g,f,d);o[d+60>>2]=2;o[d+48>>2]=e;d=c;if(d){continue}break}m[a+194|0]=1;o[a+164>>2]=o[a+76>>2]}o[f>>2]=17372;o[f+4>>2]=a;b:{if(!p[a+193|0]){break b}Vd(h,o[a+4>>2],o[a- -64>>2],f);if(!p[a+193|0]){break b}c=o[h>>2];Vd(h,c,c,f)}c:{if(!p[a+194|0]){break c}c=o[a+136>>2];h=l[o[o[c>>2]+28>>2]](c)|0;g=o[h+4>>2];if((g|0)<1){break c}e=a+184|0;d=o[a+160>>2];c=(u(o[a+156>>2],g)|0)/100|0;c=(d|0)>(c|0)?d:c;i=(g|0)<(c|0)?g:c;d:{if((i|0)>=1){d=0;while(1){c=o[h+12>>2]+((o[a+184>>2]+d|0)%(g|0)<<4)|0;g=o[c>>2];j=o[g+48>>2];e=o[c+4>>2];c=o[e+48>>2];e:{f:{if(s[j>>2]<=s[c+16>>2]^1|s[j+16>>2]>=s[c>>2]^1|(s[j+4>>2]<=s[c+20>>2]^1|s[j+20>>2]>=s[c+4>>2]^1)){break f}if(!(s[j+8>>2]<=s[c+24>>2])){break f}if(s[j+24>>2]>=s[c+8>>2]){break e}}c=o[a+136>>2];l[o[o[c>>2]+12>>2]](c,g,e,b)|0;d=d+ -1|0;i=i+ -1|0}g=o[h+4>>2];d=d+1|0;if((d|0)<(i|0)){continue}break}e=a+184|0;b=0;if((g|0)<=0){break d}}b=(o[e>>2]+i|0)%(g|0)|0}o[e>>2]=b}m[a+194|0]=0;o[a+160>>2]=1;o[a+180>>2]=o[a+180>>2]+1;d=o[a+172>>2];b=a;c=o[a+168>>2];k=v(0);g:{if(!c){break g}k=v(v(d>>>0)/v(c>>>0))}s[b+176>>2]=k;o[a+172>>2]=d>>>1;o[a+168>>2]=c>>>1;M=f+32|0}function Ki(a,b){var c=0,d=0,e=v(0),f=0,g=0,h=0,i=0,j=0,k=0,m=v(0),n=v(0),p=0,q=v(0),r=0,t=v(0),w=0,x=0,y=v(0),z=v(0),A=0,B=0,C=v(0),D=v(0),E=v(0),F=0,G=0,H=0,I=v(0);ia(21087);j=o[a+712>>2];a:{if((j|0)<1){break a}o[7717]=o[7717]+1;c=j<<4;g=l[o[6606]](c,16)|0;$(g,0,c);c=o[a+712>>2];if((c|0)<1){break a}o[7717]=o[7717]+1;c=c<<2;h=l[o[6606]](c,16)|0;$(h,0,c)}k=o[a+1112>>2];b:{if(b){if((k|0)<1){break b}i=o[a+1120>>2];while(1){c=o[i+(d<<2)>>2];f=o[c+312>>2];if(f){e=v(v(1)/v(f|0));s[c+276>>2]=e*s[c+276>>2];s[c+280>>2]=e*s[c+280>>2];s[c+284>>2]=e*s[c+284>>2];s[c+292>>2]=e*s[c+292>>2];s[c+296>>2]=e*s[c+296>>2];s[c+300>>2]=e*s[c+300>>2]}d=d+1|0;if((k|0)!=(d|0)){continue}break}}if((k|0)<1){break b}A=o[a+1120>>2];i=0;B=b?312:308;while(1){c=o[(i<<2)+A>>2];c:{if(o[c+B>>2]<1){break c}r=o[c+24>>2];if((r|0)<1){break c}e=s[a+452>>2];d=b?c+292|0:c+260|0;m=v(e*s[d+8>>2]);n=v(e*s[d+4>>2]);t=v(e*s[d>>2]);d=b?c+276|0:c+244|0;C=v(e*s[d+8>>2]);D=v(e*s[d+4>>2]);E=v(s[d>>2]*e);F=o[c+32>>2];G=o[c+12>>2];H=o[a+720>>2];f=0;while(1){w=f<<2;p=o[w+F>>2];q=s[p+8>>2];I=s[c+228>>2];x=(p-H|0)/104|0;d=(x<<4)+g|0;e=s[G+w>>2];y=v(s[p+16>>2]-s[c+236>>2]);z=v(s[p+12>>2]-s[c+232>>2]);s[d>>2]=s[d>>2]+v(e*v(E+v(v(n*y)-v(m*z))));q=v(q-I);s[d+4>>2]=s[d+4>>2]+v(e*v(D+v(v(m*q)-v(t*y))));s[d+8>>2]=v(e*v(C+v(v(t*z)-v(n*q))))+s[d+8>>2];d=(x<<2)+h|0;s[d>>2]=e+s[d>>2];f=f+1|0;if((r|0)!=(f|0)){continue}break}}i=i+1|0;if((k|0)!=(i|0)){continue}break}}d:{e:{if((j|0)>=1){b=0;while(1){e=s[(b<<2)+h>>2];if(!!(e>v(0))){d=(b<<4)+g|0;m=s[d+8>>2];n=s[d+4>>2];c=o[a+720>>2]+u(b,104)|0;e=v(v(1)/e);s[c+8>>2]=v(e*s[d>>2])+s[c+8>>2];s[c+12>>2]=v(e*n)+s[c+12>>2];s[c+16>>2]=v(e*m)+s[c+16>>2]}b=b+1|0;if((j|0)!=(b|0)){continue}break}break e}if(!h){break d}}if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}if(g){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}ga()}function CC(a,b,c,d){var e=0,f=v(0),g=v(0),h=0,i=0,j=v(0),k=v(0),l=v(0),m=0,n=0,p=0,q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=0,A=0;i=o[b+8>>2];o[i>>2]=1065353216;n=o[b+24>>2];m=n<<2;z=m+4|0;o[i+z>>2]=1065353216;p=n<<3;A=p+8|0;o[i+A>>2]=1065353216;j=s[c+20>>2];q=s[c+24>>2];k=s[c+36>>2];f=s[a+304>>2];r=s[c+40>>2];g=s[a+308>>2];t=s[c+8>>2];u=s[c>>2];w=s[c+4>>2];x=s[c+16>>2];y=s[c+32>>2];l=s[a+300>>2];i=M-16|0;o[i+12>>2]=0;k=v(v(v(l*y)+v(f*k))+v(g*r));s[i+8>>2]=k;j=v(v(v(l*x)+v(f*j))+v(g*q));s[i+4>>2]=j;f=v(v(v(u*l)+v(w*f))+v(t*g));s[i>>2]=f;e=o[b+12>>2];o[e+12>>2]=0;s[e+8>>2]=-j;s[e+4>>2]=k;o[e>>2]=0;h=e+m|0;o[h+12>>2]=0;s[h+8>>2]=f;o[h+4>>2]=0;s[h>>2]=-k;e=e+p|0;o[e+8>>2]=0;o[e+12>>2]=0;s[e+4>>2]=-f;s[e>>2]=j;e=o[b+16>>2];o[e>>2]=-1082130432;o[e+z>>2]=-1082130432;o[e+A>>2]=-1082130432;j=s[d+36>>2];q=s[d+40>>2];k=s[d+20>>2];f=s[a+320>>2];r=s[d+24>>2];g=s[a+324>>2];t=s[d+8>>2];u=s[d>>2];w=s[d+4>>2];x=s[d+32>>2];y=s[d+16>>2];l=s[a+316>>2];e=o[b+20>>2];o[e+12>>2]=0;o[e>>2]=0;k=v(v(v(l*y)+v(f*k))+v(g*r));s[e+8>>2]=k;j=v(v(v(l*x)+v(f*j))+v(g*q));s[e+4>>2]=-j;h=e+m|0;o[h+12>>2]=0;f=v(v(v(u*l)+v(w*f))+v(t*g));s[h+8>>2]=-f;o[h+4>>2]=0;s[h>>2]=j;e=e+p|0;o[e+8>>2]=0;o[e+12>>2]=0;s[e+4>>2]=f;s[e>>2]=-k;e=o[b+28>>2];h=o[a+332>>2];g=v(s[(h&1?a+336|0:b+4|0)>>2]*s[b>>2]);s[e>>2]=g*v(v(v(f+s[d+48>>2])-s[i>>2])-s[c+48>>2]);s[e+m>>2]=g*v(v(v(k+s[d+52>>2])-s[i+4>>2])-s[c+52>>2]);s[e+p>>2]=g*v(v(v(j+s[d+56>>2])-s[i+8>>2])-s[c+56>>2]);c=n<<1;if(h&2){d=o[b+32>>2];o[d>>2]=o[a+340>>2];o[d+m>>2]=o[a+340>>2];o[d+(c<<2)>>2]=o[a+340>>2]}g=s[a+356>>2];l=v(-g);f=g;if(!!(g>v(0))){s[o[b+36>>2]>>2]=l;s[o[b+40>>2]>>2]=g;f=s[a+356>>2]}if(!!(f>v(0))){d=n<<2;s[d+o[b+36>>2]>>2]=l;s[d+o[b+40>>2]>>2]=g;f=s[a+356>>2]}if(!!(f>v(0))){c=c<<2;s[c+o[b+36>>2]>>2]=l;s[c+o[b+40>>2]>>2]=g}o[b+52>>2]=o[a+352>>2]}function sl(a,b,c,d){var e=0,f=0,g=v(0),h=v(0),i=v(0),j=0,k=v(0),m=v(0),n=0,p=v(0),q=v(0),r=0,t=0,u=0,w=v(0),x=0,y=v(0),z=v(0),A=0,B=0,D=0,E=0,F=0,G=0;e=M-32|0;M=e;a:{if(!a){break a}g=s[b+8>>2];h=s[c+8>>2];k=s[b>>2];p=s[c>>2];i=s[b+4>>2];q=s[c+4>>2];o[7717]=o[7717]+1;c=l[o[6606]](512,16)|0;$(c+4|0,0,508);o[c>>2]=a;m=v(h-g);w=m;g=v(p-k);h=v(q-i);k=v(v(1)/v(C(v(v(v(g*g)+v(h*h))+v(m*m)))));m=v(m*k);i=g;g=v(g*k);p=h;h=v(h*k);z=v(v(w*m)+v(v(i*g)+v(p*h)));m=m==v(0)?v(0xde0b6b000000000):v(v(1)/m);a=m<v(0);A=(a<<4)+e|8;h=h==v(0)?v(0xde0b6b000000000):v(v(1)/h);f=h<v(0);B=(f<<4)+e|4;D=((a^1)<<4)+e|8;E=((f^1)<<4)+e|4;g=g==v(0)?v(0xde0b6b000000000):v(v(1)/g);a=g<v(0);F=(a<<4)+e|0;G=((a^1)<<4)+e|0;t=126;u=128;r=128;a=1;while(1){f=a+ -1|0;x=f<<2;n=o[x+c>>2];j=o[n+4>>2];o[e>>2]=o[n>>2];o[e+4>>2]=j;j=o[n+12>>2];o[e+8>>2]=o[n+8>>2];o[e+12>>2]=j;j=o[n+28>>2];o[e+24>>2]=o[n+24>>2];o[e+28>>2]=j;j=o[n+20>>2];o[e+16>>2]=o[n+16>>2];o[e+20>>2]=j;b:{c:{d:{e:{f:{g:{q=s[b+4>>2];k=v(h*v(s[B>>2]-q));i=s[b>>2];p=v(g*v(s[G>>2]-i));h:{if(k>p){break h}i=v(g*v(s[F>>2]-i));q=v(h*v(s[E>>2]-q));if(i>q){break h}y=s[b+8>>2];w=v(m*v(s[A>>2]-y));p=q<p?q:p;if(w>p){break h}k=k>i?k:i;i=v(m*v(s[D>>2]-y));if(k>i|(w>k?w:k)<z^1|(i<p?i:p)>v(0)^1){break h}if(o[n+40>>2]){if((f|0)<=(t|0)){f=c;break c}j=r<<1;if((r|0)>=(j|0)){f=c;break d}if((u|0)>=(j|0)){f=c;break e}if(!r){f=0;break g}t=0;o[7717]=o[7717]+1;f=l[o[6606]](r<<3,16)|0;if((r|0)<1){break g}while(1){u=t<<2;o[u+f>>2]=o[c+u>>2];t=t+1|0;if((t|0)!=(r|0)){continue}break}break f}l[o[o[d>>2]+12>>2]](d,n)}a=f;break b}u=j;if(!c){break e}}if(c){o[7718]=o[7718]+1;l[o[6607]](c)}u=j}c=r<<2;$(c+f|0,0,c)}t=j+ -2|0;c=f;r=j}o[f+x>>2]=o[n+36>>2];o[(a<<2)+f>>2]=o[n+40>>2];a=a+1|0}if(a){continue}break}if(!c){break a}if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}M=e+32|0}function QD(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0,s=0,t=0,u=0;s=M-16|0;M=s;RD(a,b,c);n=o[a+8>>2];ia(17920);a:{if(!p[a+64|0]){a=l[o[o[b>>2]+44>>2]](b)|0;b=l[o[o[b>>2]+36>>2]](b)|0;l[o[o[d>>2]+8>>2]](d,o[c+16>>2],o[c+8>>2],a,b,-1);break a}j=o[a+28>>2];if((j|0)>=2){Oj(a+24|0,s+8|0,0,j+ -1|0)}if((n|0)<1){break a}h=1;while(1){b=o[a+16>>2];r=o[b+(i<<3)>>2];t=1;b:{if((i|0)>=(n|0)){break b}while(1){q=o[o[c+16>>2]+(o[((i<<3)+b|0)+4>>2]<<2)>>2];e=o[a+48>>2];c:{if((e|0)!=o[a+52>>2]){break c}g=e?e<<1:1;if((e|0)>=(g|0)){break c}b=0;f=0;if(g){o[7717]=o[7717]+1;f=l[o[6606]](g<<2,16)|0;e=o[a+48>>2]}if((e|0)>=1){while(1){u=b<<2;o[u+f>>2]=o[u+o[a+56>>2]>>2];b=b+1|0;if((e|0)!=(b|0)){continue}break}}b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}e=o[a+48>>2]}o[a+56>>2]=0}o[a+56>>2]=f;m[a+60|0]=1;o[a+52>>2]=g}o[o[a+56>>2]+(e<<2)>>2]=q;o[a+48>>2]=e+1;b=o[q+216>>2];t=((b|0)==2|(b|0)==5)&t;i=i+1|0;if((n|0)==(i|0)){i=n;break b}b=o[a+16>>2];if(o[b+(i<<3)>>2]==(r|0)){continue}break}}f=0;b=0;d:{if((k|0)>=(j|0)){break d}q=o[a+36>>2];g=q+(k<<2)|0;b=o[g>>2];e=o[o[b+740>>2]+208>>2];if((e|0)<=-1){e=o[o[b+744>>2]+208>>2]}b=0;if((e|0)!=(r|0)){break d}b=k+1|0;e=(j|0)>(b|0)?j:b;h=k;while(1){e:{h=h+1|0;if((h|0)>=(j|0)){h=e;break e}f=o[(h<<2)+q>>2];b=o[o[f+740>>2]+208>>2];if((b|0)<=-1){b=o[o[f+744>>2]+208>>2]}if((b|0)==(r|0)){continue}}break}f=h-k|0;b=g}if(!t){l[o[o[d>>2]+8>>2]](d,o[a+56>>2],o[a+48>>2],b,f,r)}b=o[a+48>>2];if((b|0)<=-1){if(o[a+52>>2]<=-1){e=o[a+56>>2];if(e){if(p[a+60|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+56>>2]=0}m[a+60|0]=1;o[a+52>>2]=0;o[a+56>>2]=0}while(1){o[o[a+56>>2]+(b<<2)>>2]=0;e=b+1|0;g=e>>>0>=b>>>0;b=e;if(g){continue}break}}k=f?h:k;o[a+48>>2]=0;if((i|0)<(n|0)){continue}break}}ga();M=s+16|0}function XG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=0,C=0;e=M-80|0;M=e;A=v(l[o[o[a>>2]+48>>2]](a));while(1){o[e+72>>2]=0;o[e+76>>2]=0;o[e+64>>2]=0;o[e+68>>2]=0;u=w<<2;B=u+(e- -64|0)|0;o[B>>2]=1065353216;i=s[b+32>>2];j=s[b>>2];k=s[b+16>>2];m=s[b+36>>2];n=s[b+4>>2];p=s[b+20>>2];f=s[b+40>>2];g=s[b+8>>2];h=s[b+24>>2];o[e+44>>2]=0;q=g;g=s[e+64>>2];r=h;h=s[e+68>>2];t=f;f=s[e+72>>2];s[e+40>>2]=v(v(q*g)+v(r*h))+v(t*f);s[e+36>>2]=v(v(g*n)+v(h*p))+v(f*m);s[e+32>>2]=v(v(j*g)+v(k*h))+v(i*f);l[o[o[a>>2]+64>>2]](e+48|0,a,e+32|0);i=s[b+48>>2];j=s[b+8>>2];k=s[b>>2];m=s[b+4>>2];n=s[b+52>>2];p=s[b+24>>2];t=s[b+16>>2];x=s[b+20>>2];g=s[b+56>>2];f=s[b+40>>2];h=s[b+32>>2];y=s[b+36>>2];o[e+44>>2]=0;q=g;g=s[e+48>>2];z=v(h*g);h=s[e+52>>2];r=f;f=s[e+56>>2];s[e+40>>2]=q+v(v(z+v(y*h))+v(r*f));s[e+36>>2]=n+v(v(v(g*t)+v(h*x))+v(f*p));s[e+32>>2]=i+v(v(v(g*k)+v(h*m))+v(f*j));C=(e+32|0)+u|0;s[d+u>>2]=A+s[C>>2];o[B>>2]=-1082130432;i=s[b+32>>2];j=s[b>>2];k=s[b+16>>2];m=s[b+36>>2];n=s[b+4>>2];p=s[b+20>>2];f=s[b+40>>2];g=s[b+8>>2];h=s[b+24>>2];o[e+12>>2]=0;q=g;g=s[e+64>>2];r=h;h=s[e+68>>2];t=f;f=s[e+72>>2];s[e+8>>2]=v(v(q*g)+v(r*h))+v(t*f);s[e+4>>2]=v(v(g*n)+v(h*p))+v(f*m);s[e>>2]=v(v(j*g)+v(k*h))+v(i*f);l[o[o[a>>2]+64>>2]](e+16|0,a,e);i=s[b+48>>2];j=s[b+8>>2];k=s[b>>2];m=s[b+4>>2];n=s[b+52>>2];p=s[b+24>>2];t=s[b+16>>2];x=s[b+20>>2];g=s[b+56>>2];f=s[b+40>>2];h=s[b+32>>2];y=s[b+36>>2];o[e+44>>2]=0;q=g;g=s[e+16>>2];z=v(h*g);h=s[e+20>>2];r=f;f=s[e+24>>2];s[e+40>>2]=q+v(v(z+v(y*h))+v(r*f));s[e+36>>2]=n+v(v(v(g*t)+v(h*x))+v(f*p));s[e+32>>2]=i+v(v(v(g*k)+v(h*m))+v(f*j));s[c+u>>2]=s[C>>2]-A;w=w+1|0;if((w|0)!=3){continue}break}M=e+80|0}function JC(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+48>>2];o[b+56>>2]=o[a+52>>2];o[b+60>>2]=o[a+56>>2];o[b+64>>2]=o[a+60>>2];o[b+68>>2]=o[a- -64>>2];o[b+72>>2]=o[a+68>>2];o[b+76>>2]=o[a+72>>2];o[b+80>>2]=o[a+76>>2];o[b+84>>2]=o[a+80>>2];o[b+88>>2]=o[a+84>>2];o[b+92>>2]=o[a+88>>2];o[b+96>>2]=o[a+92>>2];o[b+100>>2]=o[a+96>>2];o[b+104>>2]=o[a+100>>2];o[b+108>>2]=o[a+104>>2];o[b+112>>2]=o[a+108>>2];o[b+116>>2]=o[a+112>>2];o[b+120>>2]=o[a+116>>2];o[b+124>>2]=o[a+120>>2];o[b+128>>2]=o[a+124>>2];o[b+132>>2]=o[a+128>>2];o[b+136>>2]=o[a+132>>2];o[b+140>>2]=o[a+136>>2];o[b+144>>2]=o[a+140>>2];o[b+148>>2]=o[a+144>>2];o[b+152>>2]=o[a+148>>2];o[b+156>>2]=o[a+152>>2];o[b+160>>2]=o[a+156>>2];o[b+164>>2]=o[a+160>>2];o[b+168>>2]=o[a+164>>2];o[b+172>>2]=o[a+168>>2];o[b+176>>2]=o[a+172>>2];o[b+228>>2]=o[a+868>>2];o[b+212>>2]=o[a+872>>2];o[b+196>>2]=o[a+680>>2];o[b+180>>2]=o[a+696>>2];o[b+232>>2]=o[a+932>>2];o[b+216>>2]=o[a+936>>2];o[b+200>>2]=o[a+684>>2];o[b+184>>2]=o[a+700>>2];o[b+236>>2]=o[a+996>>2];o[b+220>>2]=o[a+1e3>>2];o[b+204>>2]=o[a+688>>2];o[b+188>>2]=o[a+704>>2];o[b+244>>2]=p[a+1300|0];o[b+248>>2]=p[a+1301|0];o[b+276>>2]=o[a+1316>>2];o[b+324>>2]=o[a+1364>>2];o[b+252>>2]=p[a+1309|0];o[b+300>>2]=o[a+1340>>2];o[b+280>>2]=o[a+1320>>2];o[b+328>>2]=o[a+1368>>2];o[b+256>>2]=p[a+1310|0];o[b+304>>2]=o[a+1344>>2];o[b+284>>2]=o[a+1324>>2];o[b+332>>2]=o[a+1372>>2];o[b+260>>2]=p[a+1311|0];o[b+308>>2]=o[a+1348>>2];o[b+288>>2]=o[a+1328>>2];o[b+336>>2]=o[a+1376>>2];o[b+264>>2]=p[a+1312|0];o[b+312>>2]=o[a+1352>>2];o[b+292>>2]=o[a+1332>>2];o[b+340>>2]=o[a+1380>>2];o[b+268>>2]=p[a+1313|0];o[b+316>>2]=o[a+1356>>2];o[b+296>>2]=o[a+1336>>2];o[b+344>>2]=o[a+1384>>2];o[b+272>>2]=p[a+1314|0];o[b+320>>2]=o[a+1360>>2];return 19116}function $k(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=M-80|0;M=d;o[a+68>>2]=o[a+68>>2]+1;c=o[a+64>>2];if(c){Vc(c,o[(o[a+24>>2]+u(b,80)|0)+76>>2])}f=o[a+16>>2];h=u(b,80);g=o[a+24>>2];c=h+g|0;e=c+8|0;i=o[e+4>>2];o[d+8>>2]=o[e>>2];o[d+12>>2]=i;e=o[c+4>>2];o[d>>2]=o[c>>2];o[d+4>>2]=e;e=o[c+28>>2];o[d+24>>2]=o[c+24>>2];o[d+28>>2]=e;e=o[c+20>>2];o[d+16>>2]=o[c+16>>2];o[d+20>>2]=e;e=o[c+44>>2];o[d+40>>2]=o[c+40>>2];o[d+44>>2]=e;e=o[c+36>>2];o[d+32>>2]=o[c+32>>2];o[d+36>>2]=e;e=o[c+60>>2];o[d+56>>2]=o[c+56>>2];o[d+60>>2]=e;e=o[c+52>>2];o[d+48>>2]=o[c+48>>2];o[d+52>>2]=e;e=o[c+76>>2];o[d+72>>2]=o[c+72>>2];o[d+76>>2]=e;e=o[c+68>>2];o[d+64>>2]=o[c+64>>2];o[d+68>>2]=e;e=g;g=u(f,80)+ -80|0;f=e+g|0;e=o[f+4>>2];o[c>>2]=o[f>>2];o[c+4>>2]=e;e=o[f+12>>2];o[c+8>>2]=o[f+8>>2];o[c+12>>2]=e;e=o[f+20>>2];o[c+16>>2]=o[f+16>>2];o[c+20>>2]=e;e=o[f+28>>2];o[c+24>>2]=o[f+24>>2];o[c+28>>2]=e;e=o[f+44>>2];o[c+40>>2]=o[f+40>>2];o[c+44>>2]=e;e=o[f+36>>2];o[c+32>>2]=o[f+32>>2];o[c+36>>2]=e;e=o[f+52>>2];o[c+48>>2]=o[f+48>>2];o[c+52>>2]=e;e=o[f+60>>2];o[c+56>>2]=o[f+56>>2];o[c+60>>2]=e;e=o[f+76>>2];o[c+72>>2]=o[f+72>>2];o[c+76>>2]=e;e=o[f+68>>2];o[c+64>>2]=o[f+64>>2];o[c+68>>2]=e;c=g+o[a+24>>2]|0;g=o[d+4>>2];o[c>>2]=o[d>>2];o[c+4>>2]=g;f=o[d+12>>2];o[c+8>>2]=o[d+8>>2];o[c+12>>2]=f;f=o[d+20>>2];o[c+16>>2]=o[d+16>>2];o[c+20>>2]=f;f=o[d+28>>2];o[c+24>>2]=o[d+24>>2];o[c+28>>2]=f;f=o[d+36>>2];o[c+32>>2]=o[d+32>>2];o[c+36>>2]=f;f=o[d+44>>2];o[c+40>>2]=o[d+40>>2];o[c+44>>2]=f;f=o[d+52>>2];o[c+48>>2]=o[d+48>>2];o[c+52>>2]=f;f=o[d+60>>2];o[c+56>>2]=o[d+56>>2];o[c+60>>2]=f;f=o[d+68>>2];o[c+64>>2]=o[d+64>>2];o[c+68>>2]=f;f=o[d+76>>2];o[c+72>>2]=o[d+72>>2];o[c+76>>2]=f;if(o[a+64>>2]){o[o[(o[a+24>>2]+h|0)+76>>2]+36>>2]=b}o[a+16>>2]=o[a+16>>2]+ -1;M=d+80|0}function $C(a){var b=v(0),c=v(0),d=v(0),e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=0,E=0,F=0,G=0,H=0,I=v(0);f=M-48|0;M=f;D=a+1160|0;p=s[D>>2];E=a+1144|0;q=s[E>>2];r=s[a+1164>>2];t=s[a+1132>>2];u=s[a+1148>>2];w=s[a+1168>>2];x=s[a+1136>>2];y=s[a+1152>>2];F=a+1072|0;e=s[F>>2];k=s[a+1084>>2];d=s[a+1100>>2];g=s[a+1068>>2];h=s[a+1096>>2];G=a+1088|0;l=s[G>>2];i=s[a+1080>>2];H=a+1104|0;j=s[H>>2];z=s[a+1128>>2];b=s[a+1064>>2];o[f+44>>2]=0;o[f+28>>2]=0;I=v(v(k*j)-v(l*d));m=v(v(l*h)-v(j*i));n=v(v(d*i)-v(k*h));c=v(v(1)/v(v(v(b*I)+v(g*m))+v(n*e)));n=v(n*c);A=v(v(v(h*g)-v(d*b))*c);B=v(v(v(k*b)-v(i*g))*c);s[f+40>>2]=v(v(x*n)+v(y*A))+v(w*B);s[f+36>>2]=v(v(t*n)+v(A*u))+v(B*r);m=v(m*c);h=v(v(v(j*b)-v(h*e))*c);b=v(v(v(i*e)-v(l*b))*c);s[f+24>>2]=v(v(x*m)+v(y*h))+v(w*b);s[f+20>>2]=v(v(t*m)+v(h*u))+v(b*r);o[f+12>>2]=0;s[f+32>>2]=v(p*B)+v(v(z*n)+v(q*A));s[f+16>>2]=v(p*b)+v(v(z*m)+v(q*h));b=v(I*c);d=v(v(v(d*e)-v(j*g))*c);c=v(v(v(l*g)-v(k*e))*c);s[f+8>>2]=v(v(x*b)+v(y*d))+v(w*c);s[f+4>>2]=v(v(b*t)+v(d*u))+v(c*r);s[f>>2]=v(p*c)+v(v(z*b)+v(q*d));aD(f,a+1192|0);o[a+1236>>2]=0;o[a+1252>>2]=0;o[a+1220>>2]=0;b=s[E>>2];k=s[F>>2];d=s[a+1128>>2];h=s[G>>2];c=v(v(b*k)-v(d*h));l=s[H>>2];i=s[D>>2];e=v(v(d*l)-v(i*k));g=v(v(i*h)-v(b*l));j=v(v(1)/v(C(v(v(c*c)+v(v(e*e)+v(g*g))))));s[a+1232>>2]=c*j;s[a+1228>>2]=e*j;s[a+1224>>2]=g*j;j=v(v(b*c)-v(i*e));i=v(v(i*g)-v(d*c));d=v(v(d*e)-v(b*g));b=v(v(1)/v(C(v(v(v(j*j)+v(i*i))+v(d*d)))));s[a+1248>>2]=d*b;s[a+1244>>2]=i*b;s[a+1240>>2]=j*b;b=v(v(l*e)-v(h*c));d=v(v(k*c)-v(l*g));e=v(v(h*g)-v(k*e));c=v(v(1)/v(C(v(v(v(b*b)+v(d*d))+v(e*e)))));s[a+1216>>2]=e*c;s[a+1212>>2]=d*c;s[a+1208>>2]=b*c;M=f+48|0}function Qd(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=0;if(!o[a>>2]){o[a>>2]=c;o[c+32>>2]=0;return}d=o[b+40>>2];if(d){f=v(s[c>>2]+s[c+16>>2]);e=v(s[c+8>>2]+s[c+24>>2]);g=v(s[c+4>>2]+s[c+20>>2]);while(1){h=b+36|0;b=o[b+36>>2];b=o[h+((v(v(v(w(v(f-v(s[b>>2]+s[b+16>>2]))))+v(w(v(g-v(s[b+4>>2]+s[b+20>>2])))))+v(w(v(e-v(s[b+8>>2]+s[b+24>>2])))))<v(v(v(w(v(f-v(s[d>>2]+s[d+16>>2]))))+v(w(v(g-v(s[d+4>>2]+s[d+20>>2])))))+v(w(v(e-v(s[d+8>>2]+s[d+24>>2])))))^1)<<2)>>2];d=o[b+40>>2];if(d){continue}break}}h=o[b+32>>2];d=o[a+4>>2];a:{if(d){o[a+4>>2]=0;break a}o[7717]=o[7717]+1;d=l[o[6606]](44,16)|0;o[d>>2]=0;o[d+4>>2]=0;o[d+40>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0}o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=h;f=s[c>>2];e=s[b>>2];s[d>>2]=f<e?f:e;f=s[c+16>>2];e=s[b+16>>2];s[d+16>>2]=f>e?f:e;f=s[c+4>>2];e=s[b+4>>2];s[d+4>>2]=f<e?f:e;f=s[c+20>>2];e=s[b+20>>2];s[d+20>>2]=f>e?f:e;f=s[c+8>>2];e=s[b+8>>2];s[d+8>>2]=f<e?f:e;f=s[c+24>>2];e=s[b+24>>2];s[d+24>>2]=f>e?f:e;b:{if(h){o[(((o[o[b+32>>2]+40>>2]==(b|0))<<2)+h|0)+36>>2]=d;o[d+36>>2]=b;o[b+32>>2]=d;o[d+40>>2]=c;o[c+32>>2]=d;f=s[d>>2];while(1){a=d;d=h;c:{if(s[d>>2]<=f^1|s[d+4>>2]<=s[a+4>>2]^1|(s[d+8>>2]<=s[a+8>>2]^1|s[d+16>>2]>=s[a+16>>2]^1)){break c}if(!(s[d+20>>2]>=s[a+20>>2])){break c}if(s[d+24>>2]>=s[a+24>>2]){break b}}a=o[d+36>>2];f=s[a>>2];b=o[d+40>>2];e=s[b>>2];f=f<e?f:e;s[d>>2]=f;e=s[a+16>>2];g=s[b+16>>2];s[d+16>>2]=e>g?e:g;e=s[a+4>>2];g=s[b+4>>2];s[d+4>>2]=e<g?e:g;e=s[a+20>>2];g=s[b+20>>2];s[d+20>>2]=e>g?e:g;e=s[a+8>>2];g=s[b+8>>2];s[d+8>>2]=e<g?e:g;e=s[a+24>>2];g=s[b+24>>2];s[d+24>>2]=e>g?e:g;h=o[d+32>>2];if(h){continue}break}break b}o[d+36>>2]=b;o[b+32>>2]=d;o[d+40>>2]=c;o[c+32>>2]=d;o[a>>2]=d}}function FE(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=0;e=M-48|0;M=e;f=o[c+12>>2];o[e+24>>2]=o[c+8>>2];o[e+28>>2]=f;f=o[c+4>>2];o[e+16>>2]=o[c>>2];o[e+20>>2]=f;f=d;g=o[f+12>>2];o[e+40>>2]=o[f+8>>2];o[e+44>>2]=g;g=o[f+4>>2];o[e+32>>2]=o[f>>2];o[e+36>>2]=g;a:{if(o[b+60>>2]==2){Vc(a- -64|0,o[b+48>>2]);o[b+48>>2]=bb(a+4|0,e+16|0,b);g=1;break a}g=1;o[a+168>>2]=o[a+168>>2]+1;b:{f=o[b+48>>2];if(s[f>>2]<=s[e+32>>2]^1|s[f+16>>2]>=s[e+16>>2]^1|(s[f+4>>2]<=s[e+36>>2]^1|s[f+20>>2]>=s[e+20>>2]^1)){break b}if(s[f+8>>2]<=s[e+40>>2]^1|s[f+24>>2]>=s[e+24>>2]^1){break b}k=s[b+20>>2];l=s[b+24>>2];q=s[c>>2];r=s[c+4>>2];t=s[c+8>>2];n=s[b+16>>2];i=s[b+36>>2];j=s[b+40>>2];u=s[b+32>>2];h=s[a+140>>2];o[e+12>>2]=0;j=v(h*v(v(j-l)*v(.5)));s[e+8>>2]=j;i=v(h*v(v(i-k)*v(.5)));s[e+4>>2]=i;h=v(h*v(v(u-n)*v(.5)));s[e>>2]=h;if(!!(v(q-n)<v(0))){s[e>>2]=-h}if(!!(v(r-k)<v(0))){s[e+4>>2]=-i}if(!!(v(t-l)<v(0))){s[e+8>>2]=-j}g=0;if(!Pd(a+4|0,f,e+16|0,e,v(.05000000074505806))){break a}g=1;o[a+172>>2]=o[a+172>>2]+1;break a}Wc(a+4|0,f,e+16|0);o[a+172>>2]=o[a+172>>2]+1}w=o[b+56>>2];f=o[b+52>>2];c:{if(f){f=f+56|0;break c}f=((o[b+60>>2]<<2)+a|0)+124|0}o[f>>2]=w;f=o[b+56>>2];if(f){o[f+52>>2]=o[b+52>>2]}f=o[c+4>>2];o[b+16>>2]=o[c>>2];o[b+20>>2]=f;f=o[c+12>>2];o[b+24>>2]=o[c+8>>2];o[b+28>>2]=f;c=o[d+4>>2];o[b+32>>2]=o[d>>2];o[b+36>>2]=c;c=o[d+12>>2];o[b+40>>2]=o[d+8>>2];o[b+44>>2]=c;c=o[a+144>>2];o[b+60>>2]=c;o[b+52>>2]=0;c=(c<<2)+a|0;o[b+56>>2]=o[c+124>>2];d=o[c+124>>2];if(d){o[d+52>>2]=b}o[c+124>>2]=b;d:{if(!g){break d}m[a+194|0]=1;if(p[a+193|0]){break d}o[e>>2]=17372;o[e+4>>2]=a;c=a- -64|0;Vd(c,o[c>>2],o[b+48>>2],e);Vd(a+4|0,o[a+4>>2],o[b+48>>2],e)}M=e+48|0}function rz(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=o[a+4>>2];a:{if((f|0)!=o[a+8>>2]){break a}g=f?f<<1:1;if((f|0)>=(g|0)){break a}if(g){o[7717]=o[7717]+1;i=l[o[6606]](u(g,104),16)|0;f=o[a+4>>2]}if((f|0)>=1){while(1){c=u(h,104);d=c+i|0;c=c+o[a+12>>2]|0;e=o[c+4>>2];o[d>>2]=o[c>>2];o[d+4>>2]=e;o[d+24>>2]=o[c+24>>2];e=o[c+20>>2];o[d+16>>2]=o[c+16>>2];o[d+20>>2]=e;e=o[c+12>>2];o[d+8>>2]=o[c+8>>2];o[d+12>>2]=e;e=o[c+40>>2];o[d+36>>2]=o[c+36>>2];o[d+40>>2]=e;e=o[c+32>>2];o[d+28>>2]=o[c+28>>2];o[d+32>>2]=e;e=o[c+56>>2];o[d+52>>2]=o[c+52>>2];o[d+56>>2]=e;e=o[c+48>>2];o[d+44>>2]=o[c+44>>2];o[d+48>>2]=e;e=o[c+64>>2];o[d+60>>2]=o[c+60>>2];o[d+64>>2]=e;e=o[c+72>>2];o[d+68>>2]=o[c+68>>2];o[d+72>>2]=e;e=o[c+80>>2];o[d+76>>2]=o[c+76>>2];o[d+80>>2]=e;e=o[c+88>>2];o[d+84>>2]=o[c+84>>2];o[d+88>>2]=e;e=o[c+96>>2];o[d+92>>2]=o[c+92>>2];o[d+96>>2]=e;o[d+100>>2]=o[c+100>>2];h=h+1|0;if((h|0)!=(f|0)){continue}break}}c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+12>>2]=0}o[a+12>>2]=i;m[a+16|0]=1;o[a+8>>2]=g;f=o[a+4>>2]}c=o[a+12>>2]+u(f,104)|0;f=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=f;o[c+24>>2]=o[b+24>>2];d=o[b+20>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=d;d=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=d;d=o[b+40>>2];o[c+36>>2]=o[b+36>>2];o[c+40>>2]=d;d=o[b+32>>2];o[c+28>>2]=o[b+28>>2];o[c+32>>2]=d;d=o[b+56>>2];o[c+52>>2]=o[b+52>>2];o[c+56>>2]=d;d=o[b+48>>2];o[c+44>>2]=o[b+44>>2];o[c+48>>2]=d;d=o[b+72>>2];o[c+68>>2]=o[b+68>>2];o[c+72>>2]=d;d=o[b+64>>2];o[c+60>>2]=o[b+60>>2];o[c+64>>2]=d;d=o[b+80>>2];o[c+76>>2]=o[b+76>>2];o[c+80>>2]=d;d=o[b+88>>2];o[c+84>>2]=o[b+84>>2];o[c+88>>2]=d;d=o[b+96>>2];o[c+92>>2]=o[b+92>>2];o[c+96>>2]=d;o[c+100>>2]=o[b+100>>2];o[a+4>>2]=o[a+4>>2]+1}function DJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0);c=M-96|0;M=c;e=s[a+76>>2];f=s[a+36>>2];j=s[a+32>>2];k=s[a+80>>2];p=s[a+52>>2];q=s[a+44>>2];r=s[a+48>>2];m=s[a+84>>2];n=s[a+68>>2];y=s[a+60>>2];z=s[a- -64>>2];A=s[a+28>>2];g=s[b+8>>2];h=s[b>>2];i=s[b+4>>2];o[c+92>>2]=0;u=v(m+v(v(v(h*y)+v(i*z))+v(g*n)));s[c+88>>2]=u;w=v(k+v(v(v(h*q)+v(i*r))+v(g*p)));s[c+84>>2]=w;x=v(e+v(v(v(h*A)+v(i*j))+v(g*f)));s[c+80>>2]=x;g=s[b+20>>2];h=s[b+24>>2];i=s[b+16>>2];o[c+76>>2]=0;B=v(m+v(v(v(y*i)+v(z*g))+v(n*h)));s[c+72>>2]=B;D=v(k+v(v(v(q*i)+v(r*g))+v(p*h)));s[c+68>>2]=D;t=v(e+v(v(v(A*i)+v(j*g))+v(f*h)));s[c+64>>2]=t;g=s[b+36>>2];h=s[b+40>>2];i=s[b+32>>2];o[c+60>>2]=0;m=v(m+v(v(v(y*i)+v(z*g))+v(n*h)));s[c+56>>2]=m;k=v(k+v(v(v(q*i)+v(r*g))+v(p*h)));s[c+52>>2]=k;e=v(e+v(v(v(A*i)+v(j*g))+v(f*h)));s[c+48>>2]=e;o[c+44>>2]=0;p=v(v(v(u+B)+m)*v(.3333333432674408));s[c+40>>2]=p;q=v(v(v(w+D)+k)*v(.3333333432674408));s[c+36>>2]=q;r=v(v(v(x+t)+e)*v(.3333333432674408));s[c+32>>2]=r;b=o[a+8>>2];if(l[o[o[b>>2]+48>>2]](b)&16384){f=s[c+80>>2];o[c+24>>2]=0;o[c+28>>2]=0;o[c+16>>2]=1065353216;o[c+20>>2]=1065353216;b=o[a+8>>2];o[c+12>>2]=0;j=v(t-f);k=v(k-w);n=v(D-w);f=v(e-f);e=v(v(j*k)-v(n*f));x=e;t=v(e*e);m=v(m-u);e=v(n*m);n=v(B-u);e=v(e-v(n*k));f=v(v(n*f)-v(j*m));j=v(v(1)/v(C(v(t+v(v(e*e)+v(f*f))))));s[c+8>>2]=v(x*j)+p;s[c+4>>2]=q+v(f*j);s[c>>2]=r+v(e*j);l[o[o[b>>2]+8>>2]](b,c+32|0,c,c+16|0)}d=o[a+8>>2];b=a+12|0;l[o[o[d>>2]+8>>2]](d,c+80|0,c- -64|0,b);d=o[a+8>>2];l[o[o[d>>2]+8>>2]](d,c- -64|0,c+48|0,b);a=o[a+8>>2];l[o[o[a>>2]+8>>2]](a,c+48|0,c+80|0,b);M=c+96|0}function Ji(a,b,c,d,e,f){var g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0);l=s[e+40>>2];m=s[e+24>>2];j=s[e+36>>2];k=s[e+20>>2];g=s[f+4>>2];p=s[e+8>>2];t=s[e+4>>2];u=s[e+32>>2];h=s[f>>2];w=s[e>>2];i=s[f+8>>2];y=s[e+16>>2];o[a+44>>2]=0;o[a+28>>2]=0;o[a+12>>2]=0;z=v(v(v(i*t)+v(k*v(0)))-v(h*j));A=v(v(v(i*w)+v(y*v(0)))-v(h*u));B=v(v(v(i*p)+v(m*v(0)))-v(h*l));r=v(v(d-v(v(v(z*v(0))-v(i*A))+v(h*B)))+c);C=v(v(v(w*v(0))-v(i*y))+v(g*u));D=v(v(v(t*v(0))-v(i*k))+v(g*j));E=v(v(v(p*v(0))-v(i*m))+v(g*l));n=v(v(d-v(v(v(C*v(0))+v(i*D))-v(g*E)))+c);q=v(v(v(0)-v(v(v(g*C)-v(h*D))+v(E*v(0))))+v(0));x=v(v(v(g*B)-v(v(A*v(0))+v(i*z)))+v(0));j=v(v(v(h*k)-v(g*t))+v(j*v(0)));k=v(v(v(h*y)-v(g*w))+v(u*v(0)));p=v(v(v(h*m)-v(g*p))+v(l*v(0)));l=v(v(v(0)-v(v(v(j*v(0))-v(i*k))+v(h*p)))+v(0));m=v(v(v(g*p)-v(v(k*v(0))+v(i*j)))+v(0));t=v(v(x*l)-v(m*r));j=v(v(d-v(v(v(g*k)-v(h*j))+v(p*v(0))))+c);g=v(v(v(0)-v(v(v(g*A)-v(h*z))+v(B*v(0))))+v(0));k=v(v(r*j)-v(g*l));d=v(v(v(0)-v(v(v(D*v(0))-v(i*C))+v(h*E)))+v(0));h=v(v(m*g)-v(x*j));c=v(v(1)/v(v(q*t)+v(v(n*k)+v(d*h))));b=v(v(1)/b);i=v(v(v(r*n)-v(x*d))*c);r=v(v(v(g*d)-v(r*q))*c);p=v(r*v(0));g=v(v(v(x*q)-v(g*n))*c);u=v(g*v(0));s[a+40>>2]=v(b*i)+v(p+u);w=v(v(v(m*d)-v(l*n))*c);d=v(v(v(l*q)-v(j*d))*c);l=v(d*v(0));n=v(v(v(j*n)-v(m*q))*c);q=v(n*v(0));s[a+36>>2]=v(b*w)+v(l+q);m=v(t*c);j=v(k*c);k=v(j*v(0));c=v(h*c);h=v(c*v(0));s[a+32>>2]=v(b*m)+v(k+h);i=v(i*v(0));s[a+24>>2]=i+v(p+v(b*g));g=v(w*v(0));s[a+20>>2]=g+v(l+v(b*n));n=v(m*v(0));s[a+16>>2]=n+v(k+v(b*c));s[a+8>>2]=i+v(v(b*r)+u);s[a+4>>2]=g+v(v(b*d)+q);s[a>>2]=n+v(v(b*j)+h)}function uC(a,b,c,d,e,f){ab(a,7,b,c);m[a+48|0]=0;o[a>>2]=19436;b=o[d+12>>2];o[a+60>>2]=o[d+8>>2];o[a+64>>2]=b;b=o[d+4>>2];o[a+52>>2]=o[d>>2];o[a+56>>2]=b;b=o[d+28>>2];o[a+76>>2]=o[d+24>>2];o[a+80>>2]=b;b=o[d+20>>2];o[a+68>>2]=o[d+16>>2];o[a+72>>2]=b;b=o[d+44>>2];o[a+92>>2]=o[d+40>>2];o[a+96>>2]=b;b=o[d+36>>2];o[a+84>>2]=o[d+32>>2];o[a+88>>2]=b;b=o[d+60>>2];o[a+108>>2]=o[d+56>>2];o[a+112>>2]=b;b=o[d+52>>2];o[a+100>>2]=o[d+48>>2];o[a+104>>2]=b;b=o[e+12>>2];o[a+124>>2]=o[e+8>>2];o[a+128>>2]=b;b=o[e+4>>2];o[a+116>>2]=o[e>>2];o[a+120>>2]=b;b=o[e+28>>2];o[a+140>>2]=o[e+24>>2];o[a+144>>2]=b;b=o[e+20>>2];o[a+132>>2]=o[e+16>>2];o[a+136>>2]=b;b=o[e+44>>2];o[a+156>>2]=o[e+40>>2];o[a+160>>2]=b;b=o[e+36>>2];o[a+148>>2]=o[e+32>>2];o[a+152>>2]=b;b=o[e+60>>2];o[a+172>>2]=o[e+56>>2];o[a+176>>2]=b;b=o[e+52>>2];o[a+164>>2]=o[e+48>>2];o[a+168>>2]=b;o[a+288>>2]=1065353216;o[a+292>>2]=0;o[a+280>>2]=1065353216;o[a+284>>2]=1060320051;o[a+272>>2]=1065353216;o[a+276>>2]=0;o[a+264>>2]=1065353216;o[a+268>>2]=1060320051;o[a+224>>2]=0;o[a+228>>2]=0;o[a+216>>2]=1065353216;o[a+220>>2]=1060320051;o[a+208>>2]=0;o[a+212>>2]=0;o[a+200>>2]=1065353216;o[a+204>>2]=1060320051;o[a+192>>2]=0;o[a+196>>2]=0;o[a+184>>2]=1065353216;o[a+188>>2]=-1082130432;m[a+180|0]=f;o[a+1124>>2]=0;o[a+1116>>2]=0;o[a+1120>>2]=0;m[a+1096|0]=0;o[a+256>>2]=1065353216;o[a+260>>2]=0;o[a+248>>2]=1065353216;o[a+252>>2]=1060320051;o[a+240>>2]=1065353216;o[a+244>>2]=0;o[a+232>>2]=1065353216;o[a+236>>2]=1060320051;o[a+300>>2]=0;b=a+1105|0;m[b|0]=0;m[b+1|0]=0;m[b+2|0]=0;m[b+3|0]=0;m[b+4|0]=0;m[b+5|0]=0;m[b+6|0]=0;m[b+7|0]=0;o[a+1100>>2]=0;o[a+1104>>2]=0;m[a+49|0]=1;If(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function mJ(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=0,j=0,k=0,l=0,n=0;a=M-608|0;M=a;g=v(s[b+116>>2]-s[b+52>>2]);f=v(g*g);g=v(s[b+120>>2]-s[b+56>>2]);f=v(f+v(g*g));g=v(s[b+124>>2]-s[b+60>>2]);f=v(f+v(g*g));g=s[b+252>>2];a:{if(!!(f<v(g*g))){g=v(1);f=v(s[c+116>>2]-s[c+52>>2]);h=v(f*f);f=v(s[c+120>>2]-s[c+56>>2]);h=v(h+v(f*f));f=v(s[c+124>>2]-s[c+60>>2]);h=v(h+v(f*f));f=s[c+252>>2];if(h<v(f*f)){break a}}g=v(1);if(p[27976]){break a}i=o[b+192>>2];e=o[c+248>>2];d=a+552|0;o[d+4>>2]=35;o[d+8>>2]=0;o[d>>2]=13316;o[d+44>>2]=1025758986;o[d+20>>2]=1065353216;o[d+24>>2]=0;o[d+12>>2]=1065353216;o[d+16>>2]=1065353216;o[d>>2]=13444;o[a+596>>2]=e;o[a+580>>2]=e;o[a+556>>2]=8;o[a+552>>2]=11556;o[a+548>>2]=0;o[a+540>>2]=1566444395;o[a+544>>2]=0;o[a+376>>2]=6896;m[a+348|0]=0;o[a+324>>2]=953267991;o[a+12>>2]=a+552;o[a+8>>2]=i;o[a+4>>2]=a+16;o[a>>2]=7148;i=b+4|0;j=b+68|0;k=c+4|0;l=c+68|0;g=v(1);b:{if(!ng(a,i,j,k,l,a+376|0)){break b}f=s[a+540>>2];if(!!(s[b+244>>2]>f)){s[b+244>>2]=f}if(!!(s[c+244>>2]>f)){s[c+244>>2]=f}g=v(1);if(!(f<v(1))){break b}g=f}n=o[c+192>>2];e=o[b+248>>2];d=a+552|0;o[d+4>>2]=35;o[d+8>>2]=0;o[d>>2]=13316;o[d+44>>2]=1025758986;o[d+20>>2]=1065353216;o[d+24>>2]=0;o[d+12>>2]=1065353216;o[d+16>>2]=1065353216;o[d>>2]=13444;o[a+596>>2]=e;o[a+580>>2]=e;o[a+556>>2]=8;o[a+552>>2]=11556;o[a+548>>2]=0;o[a+540>>2]=1566444395;o[a+544>>2]=0;o[a+376>>2]=6896;m[a+348|0]=0;o[a+324>>2]=953267991;o[a+12>>2]=n;o[a+8>>2]=a+552;o[a+4>>2]=a+16;o[a>>2]=7148;c:{if(!ng(a,i,j,k,l,a+376|0)){break c}f=s[a+540>>2];if(!!(s[b+244>>2]>f)){s[b+244>>2]=f}if(!!(s[c+244>>2]>f)){s[c+244>>2]=f}if(!(g>f)){break c}g=f}}M=a+608|0;return v(g)}function dI(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,s=0;a:{e=n[b>>1];i=q[b+2>>1];j=o[a+48>>2];s=e+(i<<16)&j+ -1;b:{if(s>>>0>=r[a+4>>2]){break b}d=o[o[a+12>>2]+(s<<2)>>2];if((d|0)==-1){break b}k=o[a+72>>2];h=e&65535;while(1){f=d<<2;e=f+k|0;if((i|0)==q[e+2>>1]?(h|0)==q[e>>1]:0){break a}d=o[f+o[a+32>>2]>>2];if((d|0)!=-1){continue}break}}k=o[a+44>>2];d=k;c:{if((j|0)!=(d|0)){break c}d=j;i=d?d<<1:1;if((d|0)>=(i|0)){break c}d:{if(!i){d=j;break d}o[7717]=o[7717]+1;g=l[o[6606]](i<<2,16)|0;d=o[a+44>>2]}e=d;if((e|0)>=1){d=0;while(1){f=d<<2;h=f+g|0;f=f+o[a+52>>2]|0;f=q[f>>1]|q[f+2>>1]<<16;n[h>>1]=f;n[h+2>>1]=f>>>16;d=d+1|0;if((e|0)!=(d|0)){continue}break}}e=o[a+52>>2];if(e){if(p[a+56|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+52>>2]=0}o[a+52>>2]=g;o[a+48>>2]=i;m[a+56|0]=1;d=o[a+44>>2]}e=o[a+52>>2]+(d<<2)|0;c=q[c>>1]|q[c+2>>1]<<16;n[e>>1]=c;n[e+2>>1]=c>>>16;o[a+44>>2]=o[a+44>>2]+1;g=o[a- -64>>2];e:{if((g|0)!=o[a+68>>2]){break e}h=g?g<<1:1;if((g|0)>=(h|0)){break e}f:{if(!h){f=0;break f}o[7717]=o[7717]+1;f=l[o[6606]](h<<2,16)|0;g=o[a+64>>2]}if((g|0)>=1){d=0;while(1){c=d<<2;e=c+f|0;c=c+o[a+72>>2]|0;c=q[c>>1]|q[c+2>>1]<<16;n[e>>1]=c;n[e+2>>1]=c>>>16;d=d+1|0;if((g|0)!=(d|0)){continue}break}}c=o[a+72>>2];if(c){if(p[a+76|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+72>>2]=0}o[a+72>>2]=f;o[a+68>>2]=h;m[a+76|0]=1;g=o[a+64>>2]}e=o[a+72>>2]+(g<<2)|0;c=q[b>>1]|q[b+2>>1]<<16;n[e>>1]=c;n[e+2>>1]=c>>>16;o[a+64>>2]=o[a+64>>2]+1;if((j|0)<o[a+48>>2]){cI(a);s=n[b>>1]+(q[b+2>>1]<<16)&o[a+48>>2]+ -1}b=o[a+32>>2]+(k<<2)|0;a=o[a+12>>2]+(s<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=k;return}b=o[a+52>>2]+(d<<2)|0;a=q[c>>1]|q[c+2>>1]<<16;n[b>>1]=a;n[b+2>>1]=a>>>16}function Bz(a,b){var c=0,d=v(0),e=0,f=v(0),g=v(0),h=v(0),i=0,j=0,k=v(0);c=M-160|0;M=c;a:{b:{switch((o[a+388>>2]&15)+ -1|0){case 0:o[c>>2]=21644;e=o[b+12>>2];f=s[e+56>>2];g=s[e+52>>2];i=o[b+8>>2];j=o[i+236>>2];h=s[e+48>>2];e=o[a+192>>2];d=v(l[o[o[e>>2]+48>>2]](e));e=o[b+4>>2];l[o[o[e>>2]+8>>2]](e,o[b+12>>2],c+144|0,c+128|0);e=o[c+156>>2];o[c+104>>2]=o[c+152>>2];o[c+108>>2]=e;e=o[c+132>>2];o[c+112>>2]=o[c+128>>2];o[c+116>>2]=e;e=o[c+140>>2];o[c+120>>2]=o[c+136>>2];o[c+124>>2]=e;s[c+104>>2]=s[c+104>>2]-d;s[c+112>>2]=d+s[c+112>>2];e=o[c+148>>2];o[c+96>>2]=o[c+144>>2];o[c+100>>2]=e;s[c+96>>2]=s[c+96>>2]-d;s[c+100>>2]=s[c+100>>2]-d;s[c+116>>2]=d+s[c+116>>2];s[c+120>>2]=d+s[c+120>>2];s[c+20>>2]=d;k=d;d=v(h-h);h=v(d*d);d=v(g-g);g=v(h+v(d*d));d=v(f-f);s[c+16>>2]=k+v(C(v(g+v(d*d))));o[c+12>>2]=j<<30>>31&i;o[c+8>>2]=b;o[c+4>>2]=a;Jb(a+928|0,o[a+928>>2],c+96|0,c);break a;case 1:break b;default:break a}}o[c+20>>2]=0;o[c+4>>2]=1065353216;o[c>>2]=21728;o[c+24>>2]=a;o[c+28>>2]=b;o[c+8>>2]=o[a+456>>2];e=o[b+4>>2];d=v(l[o[o[e>>2]+48>>2]](e));e=o[a+192>>2];d=v(d+v(l[o[o[e>>2]+48>>2]](e)));s[c+12>>2]=d;f=s[o[b+8>>2]+224>>2];s[c+96>>2]=f;o[c+16>>2]=o[(s[a+316>>2]<f?a+316|0:c+96|0)>>2];e=o[b+4>>2];l[o[o[e>>2]+8>>2]](e,o[b+12>>2],c+144|0,c+128|0);b=o[c+156>>2];o[c+104>>2]=o[c+152>>2];o[c+108>>2]=b;b=o[c+132>>2];o[c+112>>2]=o[c+128>>2];o[c+116>>2]=b;b=o[c+140>>2];o[c+120>>2]=o[c+136>>2];o[c+124>>2]=b;s[c+104>>2]=s[c+104>>2]-d;s[c+112>>2]=d+s[c+112>>2];s[c+116>>2]=d+s[c+116>>2];b=o[c+148>>2];o[c+96>>2]=o[c+144>>2];o[c+100>>2]=b;s[c+96>>2]=s[c+96>>2]-d;s[c+100>>2]=s[c+100>>2]-d;s[c+120>>2]=d+s[c+120>>2];Jb(a+1048|0,o[a+1048>>2],c+96|0,c)}M=c+160|0}function FC(a){a=a|0;var b=0,c=0,d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=0,m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=0;b=M-144|0;M=b;o[a+36>>2]=0;o[b+136>>2]=0;o[b+140>>2]=0;o[b+128>>2]=0;o[b+132>>2]=0;while(1){z=(b+128|0)+(l<<2)|0;o[z>>2]=1065353216;d=o[a+28>>2];o[b+80>>2]=o[d+4>>2];o[b+84>>2]=o[d+20>>2];c=o[d+36>>2];o[b+92>>2]=0;o[b+88>>2]=c;o[b+96>>2]=o[d+8>>2];o[b+100>>2]=o[d+24>>2];c=o[d+40>>2];o[b+108>>2]=0;o[b+104>>2]=c;o[b+112>>2]=o[d+12>>2];o[b+116>>2]=o[d+28>>2];c=o[d+44>>2];o[b+124>>2]=0;o[b+120>>2]=c;c=o[a+32>>2];o[b+32>>2]=o[c+4>>2];o[b+36>>2]=o[c+20>>2];h=o[c+36>>2];o[b+44>>2]=0;o[b+40>>2]=h;o[b+48>>2]=o[c+8>>2];o[b+52>>2]=o[c+24>>2];h=o[c+40>>2];o[b+60>>2]=0;o[b+56>>2]=h;o[b+64>>2]=o[c+12>>2];o[b+68>>2]=o[c+28>>2];h=o[c+44>>2];o[b+76>>2]=0;o[b+72>>2]=h;i=s[d+52>>2];m=s[d+12>>2];n=s[d+8>>2];j=s[d+56>>2];p=s[d+28>>2];q=s[d+20>>2];r=s[d+24>>2];k=s[d+60>>2];t=s[d+44>>2];w=s[d+36>>2];x=s[d+40>>2];y=s[d+4>>2];e=s[a+308>>2];f=s[a+300>>2];g=s[a+304>>2];o[b+28>>2]=0;s[b+24>>2]=v(k+v(v(v(f*w)+v(g*x))+v(e*t)))-k;s[b+20>>2]=v(j+v(v(v(f*q)+v(g*r))+v(e*p)))-j;s[b+16>>2]=v(i+v(v(v(f*y)+v(g*n))+v(e*m)))-i;i=s[c+52>>2];m=s[c+12>>2];n=s[c+8>>2];j=s[c+56>>2];p=s[c+28>>2];q=s[c+20>>2];r=s[c+24>>2];k=s[c+60>>2];t=s[c+44>>2];w=s[c+36>>2];x=s[c+40>>2];y=s[c+4>>2];e=s[a+324>>2];f=s[a+316>>2];g=s[a+320>>2];o[b+12>>2]=0;s[b+8>>2]=v(k+v(v(v(f*w)+v(g*x))+v(e*t)))-k;s[b+4>>2]=v(j+v(v(v(f*q)+v(g*r))+v(e*p)))-j;s[b>>2]=v(i+v(v(v(f*y)+v(g*n))+v(e*m)))-i;Ld((u(l,84)+a|0)+48|0,b+80|0,b+32|0,b+16|0,b,b+128|0,d+396|0,s[d+344>>2],c+396|0,s[c+344>>2]);o[z>>2]=0;l=l+1|0;if((l|0)!=3){continue}break}M=b+144|0}function sF(a,b,c,d,e,f){var g=v(0);o[a+104>>2]=0;o[a+108>>2]=0;m[a+100|0]=0;o[a+96>>2]=0;o[a+92>>2]=e;n[a+6>>1]=65535;n[a+4>>1]=65534;o[a>>2]=16640;if(!e){o[7717]=o[7717]+1;e=l[o[6606]](76,16)|0;Wf(e);m[a+100|0]=1;o[a+92>>2]=e}if(!f){o[7717]=o[7717]+1;e=l[o[6606]](24,16)|0;o[e+20>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e>>2]=16704;o[e+12>>2]=0;o[e+16>>2]=0;m[e+20|0]=1;o[e+8>>2]=0;o[a+112>>2]=e;o[7717]=o[7717]+1;e=l[o[6606]](196,16)|0;ik(e,o[a+112>>2]);o[a+108>>2]=e;m[e+193|0]=1}e=o[b+4>>2];o[a+8>>2]=o[b>>2];o[a+12>>2]=e;e=o[b+12>>2];o[a+16>>2]=o[b+8>>2];o[a+20>>2]=e;b=o[c+12>>2];o[a+32>>2]=o[c+8>>2];o[a+36>>2]=b;b=o[c+4>>2];o[a+24>>2]=o[c>>2];o[a+28>>2]=b;o[a+52>>2]=0;g=v(q[a+6>>1]);s[a+48>>2]=g/v(s[a+32>>2]-s[a+16>>2]);s[a+44>>2]=g/v(s[a+28>>2]-s[a+12>>2]);s[a+40>>2]=g/v(s[a+24>>2]-s[a+8>>2]);o[7717]=o[7717]+1;d=d+1|0;c=d&65535;e=c<<6;b=l[o[6606]](e,16)|0;if(c){f=b+e|0;e=b;while(1){o[e+8>>2]=0;o[e>>2]=0;e=e- -64|0;if((f|0)!=(e|0)){continue}break}}n[a+58>>1]=d;o[a+60>>2]=b;e=1;n[a+64>>1]=1;n[a+56>>1]=0;if(c>>>0>1){while(1){d=b+(e<<6)|0;e=e+1|0;n[d+48>>1]=e;if((c|0)!=(e|0)){continue}break}}n[(b+(c<<6)|0)+ -16>>1]=0;o[7717]=o[7717]+1;b=c<<3;c=l[o[6606]](b,16)|0;o[a+68>>2]=c;o[a+80>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](b,16)|0;o[a+72>>2]=c;o[a+84>>2]=c;o[7717]=o[7717]+1;b=l[o[6606]](b,16)|0;o[a+76>>2]=b;o[a+88>>2]=b;b=o[a+60>>2];n[b+48>>1]=0;o[b>>2]=0;n[b+54>>1]=1;c=o[a+68>>2];n[c>>1]=0;n[c+2>>1]=0;d=q[a+6>>1];n[c+6>>1]=0;n[c+4>>1]=d;n[b+56>>1]=1;n[b+50>>1]=0;c=o[a+72>>2];n[c>>1]=0;n[c+2>>1]=0;d=q[a+6>>1];n[c+6>>1]=0;n[c+4>>1]=d;n[b+58>>1]=1;n[b+52>>1]=0;b=o[a+76>>2];n[b>>1]=0;n[b+2>>1]=0;a=q[a+6>>1];n[b+6>>1]=0;n[b+4>>1]=a}function Fy(a,b,c,d,e,f,g,h,i){var j=0,k=0,n=0,p=v(0),q=v(0),r=0,t=v(0),w=0,x=0,y=v(0),z=v(0),A=v(0),B=0,C=v(0),D=v(0),E=v(0),F=0;if(!((f|0)<2|(g|0)<2)){C=v(f+ -1|0);D=v(g+ -1|0);o[7717]=o[7717]+1;j=u(f,g);n=l[o[6606]]((j|0)!=(j&268435455)?-1:j<<4,16)|0;r=fa((j|0)!=(j&1073741823)?-1:j<<2);while(1){y=s[b+8>>2];p=v(v(w|0)/D);y=v(y+v(p*v(s[d+8>>2]-y)));z=s[c+8>>2];z=v(v(z+v(p*v(s[e+8>>2]-z)))-y);t=s[c+4>>2];q=v(t+v(p*v(s[e+4>>2]-t)));t=s[b+4>>2];t=v(t+v(p*v(s[d+4>>2]-t)));E=v(q-t);q=s[c>>2];A=v(q+v(p*v(s[e>>2]-q)));q=s[b>>2];q=v(q+v(p*v(s[d>>2]-q)));A=v(A-q);F=u(f,w);k=0;while(1){B=k+F|0;x=n+(B<<4)|0;o[x+12>>2]=0;p=v(v(k|0)/C);s[x+8>>2]=y+v(z*p);s[x+4>>2]=t+v(E*p);s[x>>2]=q+v(A*p);o[r+(B<<2)>>2]=1065353216;k=k+1|0;if((k|0)!=(f|0)){continue}break}w=w+1|0;if((w|0)!=(g|0)){continue}break}o[7717]=o[7717]+1;j=Zb(l[o[6606]](1252,16)|0,a,j,n,r);if(h&1){s[o[j+720>>2]+88>>2]=0;m[j+924|0]=1}if(h&2){s[(o[j+720>>2]+u(f+ -1|0,104)|0)+88>>2]=0;m[j+924|0]=1}if(h&4){s[(o[j+720>>2]+u(u(g+ -1|0,f),104)|0)+88>>2]=0;m[j+924|0]=1}if(h&8){s[(o[j+720>>2]+u((u(g+ -1|0,f)+f|0)+ -1|0,104)|0)+88>>2]=0;m[j+924|0]=1}if(n){if(n){o[7718]=o[7718]+1;l[o[6607]](n)}}ba(r);x=(f|0)>0;d=0;while(1){c=g;if(x){w=u(d,f);a=d+1|0;h=u(a,f);k=0;while(1){b=k;e=k+w|0;a:{b:{k=k+1|0;if((k|0)<(f|0)){n=k+w|0;va(j,e,n,0,0);if((a|0)>=(g|0)){break a}r=b+h|0;va(j,e,r,0,0);if(!(b+d&1)){break b}b=h+k|0;Va(j,e,n,b,0);Va(j,e,b,r,0);if(!i){break a}va(j,e,b,0,0);break a}if((a|0)>=(g|0)){break a}va(j,e,b+h|0,0,0);break a}Va(j,r,e,n,0);Va(j,r,n,h+k|0,0);if(!i){break a}va(j,n,r,0,0)}if((f|0)!=(k|0)){continue}break}}else{a=d+1|0}d=a;if((c|0)!=(d|0)){continue}break}}return j}function eJ(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=0,y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=0,K=v(0),L=v(0),M=v(0),N=0,O=0,P=0,Q=0,R=0,S=0;J=o[a+12>>2];if((J|0)<1){return v(v(1))}f=p[a+28|0];N=f?b:c;b=f?c:b;O=o[b- -64>>2];K=s[b+60>>2];L=s[b+56>>2];M=s[b+52>>2];P=o[b+48>>2];h=s[b+44>>2];i=s[b+40>>2];j=s[b+36>>2];Q=o[b+32>>2];k=s[b+28>>2];m=s[b+24>>2];n=s[b+20>>2];R=o[b+16>>2];q=s[b+12>>2];r=s[b+8>>2];x=o[b+260>>2];t=s[b+4>>2];S=o[b+192>>2];w=v(1);f=0;while(1){c=o[S+24>>2]+u(f,80)|0;g=s[c+56>>2];y=s[c+52>>2];z=s[c+48>>2];A=s[c+36>>2];B=s[c+20>>2];C=s[c+4>>2];D=s[c+40>>2];E=s[c+24>>2];F=s[c+8>>2];G=s[c+32>>2];H=s[c>>2];I=s[c+16>>2];o[b+64>>2]=0;o[b+48>>2]=0;o[b+32>>2]=0;o[b+16>>2]=0;o[b+260>>2]=x+1;s[b+36>>2]=v(v(j*H)+v(i*I))+v(h*G);s[b+20>>2]=v(v(n*H)+v(m*I))+v(k*G);s[b+4>>2]=v(v(t*H)+v(r*I))+v(q*G);s[b+44>>2]=v(v(j*F)+v(i*E))+v(h*D);s[b+40>>2]=v(v(j*C)+v(i*B))+v(h*A);s[b+28>>2]=v(v(n*F)+v(m*E))+v(k*D);s[b+24>>2]=v(v(n*C)+v(m*B))+v(k*A);s[b+12>>2]=v(v(t*F)+v(r*E))+v(q*D);s[b+8>>2]=v(v(t*C)+v(r*B))+v(q*A);s[b+60>>2]=K+v(v(v(j*z)+v(i*y))+v(h*g));s[b+56>>2]=L+v(v(v(n*z)+v(m*y))+v(k*g));s[b+52>>2]=M+v(v(v(t*z)+v(r*y))+v(q*g));c=o[o[a+20>>2]+(f<<2)>>2];g=v(l[o[o[c>>2]+12>>2]](c,b,N,d,e));o[b+64>>2]=O;s[b+60>>2]=K;s[b+56>>2]=L;s[b+52>>2]=M;o[b+48>>2]=P;s[b+44>>2]=h;s[b+40>>2]=i;s[b+36>>2]=j;o[b+32>>2]=Q;s[b+28>>2]=k;s[b+24>>2]=m;s[b+20>>2]=n;o[b+16>>2]=R;s[b+12>>2]=q;s[b+8>>2]=r;s[b+4>>2]=t;x=o[b+260>>2]+1|0;o[b+260>>2]=x;w=g<w?g:w;f=f+1|0;if((J|0)!=(f|0)){continue}break}return v(w)}function vi(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,u=0;i=M-48|0;M=i;h=o[c+8>>2];if(h){q=h;while(1){if(o[q+20>>2]>o[a+100>>2]){h=o[q+12>>2];m=o[h+92>>2];n=o[h+96>>2];k=o[c+88>>2];l=o[h+88>>2];j=o[c+92>>2];h=o[c+96>>2];o[i+44>>2]=-1;p=n-h|0;o[i+40>>2]=p;j=m-j|0;o[i+36>>2]=j;h=l-k|0;o[i+32>>2]=h;n=j;s=j>>31;j=e;k=tL(n,s,o[j+8>>2],o[j+12>>2]);l=N;m=k;k=h;t=h>>31;h=tL(h,t,o[j>>2],o[j+4>>2]);j=m+h|0;m=N+l|0;m=j>>>0<h>>>0?m+1|0:m;l=p;u=l>>31;h=tL(l,u,o[e+16>>2],o[e+20>>2]);p=h+j|0;j=N+m|0;j=p>>>0<h>>>0?j+1|0:j;h=p;p=f;m=tL(o[p+8>>2],o[p+12>>2],n,s);n=N;k=tL(o[p>>2],o[p+4>>2],k,t);p=k+m|0;n=N+n|0;n=p>>>0<k>>>0?n+1|0:n;l=tL(o[f+16>>2],o[f+20>>2],l,u);k=l+p|0;m=N+n|0;m=k>>>0<l>>>0?m+1|0:m;l=k;k=m;a:{if((k|0)>0?1:(k|0)>=0?l>>>0<1?0:1:0){o[i+8>>2]=l;o[i+12>>2]=k;o[i+24>>2]=1;n=-1;l=0;break a}if((k|0)<-1?1:(k|0)<=-1?l>>>0>4294967295?0:1:0){o[i+24>>2]=-1;o[i+8>>2]=0-l;o[i+12>>2]=0-((0<l>>>0)+k|0);n=1;l=0;break a}o[i+8>>2]=0;o[i+12>>2]=0;n=0;o[i+24>>2]=0;l=1}b:{c:{d:{k=i;p=i;if((j|0)<0?1:(j|0)<=0?h>>>0>0?0:1:0){if((j|0)>-1?1:(j|0)>=-1?h>>>0<=4294967295?0:1:0){break d}o[i+24>>2]=n;j=0-((0<h>>>0)+j|0)|0;h=0-h|0}o[p+16>>2]=h;o[k+20>>2]=j;break c}o[i+16>>2]=0;o[i+20>>2]=0;if(l){break b}}if(!r){h=o[i+12>>2];o[g>>2]=o[i+8>>2];o[g+4>>2]=h;o[g+16>>2]=o[i+24>>2];h=o[i+20>>2];o[g+8>>2]=o[i+16>>2];o[g+12>>2]=h;r=q;break b}h=Xb(i+8|0,g);if((h|0)<=-1){h=o[i+12>>2];o[g>>2]=o[i+8>>2];o[g+4>>2]=h;o[g+16>>2]=o[i+24>>2];h=o[i+20>>2];o[g+8>>2]=o[i+16>>2];o[g+12>>2]=h;r=q;break b}if(h){break b}r=(nf(r,q,d,i+32|0)|0)!=2^b?q:r}h=o[c+8>>2]}q=o[q>>2];if((q|0)!=(h|0)){continue}break}}M=i+48|0;return r}function ye(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;o[b+16>>2]=o[a+4>>2];o[b+20>>2]=o[a+8>>2];o[b+24>>2]=o[a+12>>2];o[b+28>>2]=o[a+16>>2];o[b+32>>2]=o[a+20>>2];o[b+36>>2]=o[a+24>>2];o[b+40>>2]=o[a+28>>2];o[b+44>>2]=o[a+32>>2];o[b+48>>2]=o[a+36>>2];o[b+52>>2]=o[a+40>>2];o[b+56>>2]=o[a+44>>2];o[b+60>>2]=o[a+48>>2];o[b+64>>2]=o[a+52>>2];o[b+68>>2]=o[a+56>>2];o[b+72>>2]=o[a+60>>2];o[b+76>>2]=o[a- -64>>2];o[b+80>>2]=o[a+68>>2];o[b+84>>2]=o[a+72>>2];o[b+88>>2]=o[a+76>>2];o[b+92>>2]=o[a+80>>2];o[b+96>>2]=o[a+84>>2];o[b+100>>2]=o[a+88>>2];o[b+104>>2]=o[a+92>>2];o[b+108>>2]=o[a+96>>2];o[b+112>>2]=o[a+100>>2];o[b+116>>2]=o[a+104>>2];o[b+120>>2]=o[a+108>>2];o[b+124>>2]=o[a+112>>2];o[b+128>>2]=o[a+116>>2];o[b+132>>2]=o[a+120>>2];o[b+136>>2]=o[a+124>>2];o[b+140>>2]=o[a+128>>2];o[b+144>>2]=o[a+132>>2];o[b+148>>2]=o[a+136>>2];o[b+152>>2]=o[a+140>>2];o[b+156>>2]=o[a+144>>2];o[b+160>>2]=o[a+148>>2];o[b+164>>2]=o[a+152>>2];o[b+168>>2]=o[a+156>>2];o[b+172>>2]=o[a+160>>2];o[b+176>>2]=o[a+164>>2];o[b+180>>2]=o[a+168>>2];o[b+184>>2]=o[a+172>>2];o[b+188>>2]=o[a+176>>2];o[b+224>>2]=o[a+180>>2];d=o[a+184>>2];o[b>>2]=0;o[b+192>>2]=d;d=l[o[o[c>>2]+28>>2]](c,o[a+192>>2])|0;o[b+8>>2]=0;o[b+4>>2]=d;o[b+228>>2]=o[a+204>>2];o[b+232>>2]=o[a+208>>2];o[b+236>>2]=o[a+212>>2];o[b+240>>2]=o[a+216>>2];o[b+196>>2]=o[a+220>>2];o[b+200>>2]=o[a+224>>2];o[b+204>>2]=o[a+232>>2];o[b+208>>2]=o[a+228>>2];o[b+244>>2]=o[a+236>>2];d=l[o[o[c>>2]+40>>2]](c,a)|0;e=l[o[o[c>>2]+28>>2]](c,d)|0;o[b+12>>2]=e;if(e){l[o[o[c>>2]+48>>2]](c,d)}o[b+212>>2]=o[a+244>>2];o[b+216>>2]=o[a+248>>2];o[b+220>>2]=o[a+252>>2];o[b+248>>2]=o[a+256>>2];return 3976}function xg(a,b){var c=0,d=0,e=0;a:{b:{c:{d:{e:{c=o[a>>2];f:{if((c|0)>=4){if(p[b|0]&8){e=c;break f}e=c+ -1|0;o[a>>2]=e;d=(e<<4)+a|0;c=o[d+16>>2];o[a+60>>2]=o[d+12>>2];o[a+64>>2]=c;c=o[d+8>>2];o[a+52>>2]=o[d+4>>2];o[a+56>>2]=c;c=o[d+88>>2];o[a+132>>2]=o[d+84>>2];o[a+136>>2]=c;c=o[d+96>>2];o[a+140>>2]=o[d+92>>2];o[a+144>>2]=c;c=o[d+176>>2];o[a+220>>2]=o[d+172>>2];o[a+224>>2]=c;c=o[d+168>>2];o[a+212>>2]=o[d+164>>2];o[a+216>>2]=c;break f}e=3;if((c|0)!=3){break e}}if(p[b|0]&4){break d}e=e+ -1|0;o[a>>2]=e;d=(e<<4)+a|0;c=o[d+16>>2];o[a+44>>2]=o[d+12>>2];o[a+48>>2]=c;c=o[d+8>>2];o[a+36>>2]=o[d+4>>2];o[a+40>>2]=c;c=o[d+88>>2];o[a+116>>2]=o[d+84>>2];o[a+120>>2]=c;c=o[d+96>>2];o[a+124>>2]=o[d+92>>2];o[a+128>>2]=c;c=o[d+176>>2];o[a+204>>2]=o[d+172>>2];o[a+208>>2]=c;c=o[d+168>>2];o[a+196>>2]=o[d+164>>2];o[a+200>>2]=c;break d}e=2;if((c|0)<2){break c}}if(p[b|0]&2){break b}e=e+ -1|0;o[a>>2]=e;d=(e<<4)+a|0;c=o[d+16>>2];o[a+28>>2]=o[d+12>>2];o[a+32>>2]=c;c=o[d+8>>2];o[a+20>>2]=o[d+4>>2];o[a+24>>2]=c;c=o[d+88>>2];o[a+100>>2]=o[d+84>>2];o[a+104>>2]=c;c=o[d+96>>2];o[a+108>>2]=o[d+92>>2];o[a+112>>2]=c;c=o[d+176>>2];o[a+188>>2]=o[d+172>>2];o[a+192>>2]=c;c=o[d+168>>2];o[a+180>>2]=o[d+164>>2];o[a+184>>2]=c;break b}e=1;if((c|0)!=1){break a}}if(m[b|0]&1){break a}b=e+ -1|0;o[a>>2]=b;c=b<<4;e=c+(a+4|0)|0;b=o[e+4>>2];o[a+4>>2]=o[e>>2];o[a+8>>2]=b;b=o[e+12>>2];o[a+12>>2]=o[e+8>>2];o[a+16>>2]=b;e=c+(a+84|0)|0;b=o[e+4>>2];o[a+84>>2]=o[e>>2];o[a+88>>2]=b;b=o[e+12>>2];o[a+92>>2]=o[e+8>>2];o[a+96>>2]=b;c=c+(a+164|0)|0;b=o[c+12>>2];o[a+172>>2]=o[c+8>>2];o[a+176>>2]=b;b=o[c+4>>2];o[a+164>>2]=o[c>>2];o[a+168>>2]=b}}function $l(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=v(0),h=v(0),i=0,j=0,k=0;f=M-16|0;M=f;o[6736]=o[6736]+1;if(o[a+4>>2]&2){d=o[b+192>>2];g=v(l[o[o[d>>2]+20>>2]](d,s[6601]));s[f+12>>2]=g;d=o[c+192>>2];h=v(l[o[o[d>>2]+20>>2]](d,s[6601]));s[f+8>>2]=h;d=g<h?f+12|0:f+8|0}else{d=26404}i=o[d>>2];g=s[c+184>>2];h=s[b+184>>2];e=o[a+68>>2];j=o[e+8>>2];a:{b:{if(j){d=o[e+12>>2];k=o[d>>2];o[e+8>>2]=j+ -1;o[e+12>>2]=k;break b}d=0;if(p[a+4|0]&4){break a}o[7717]=o[7717]+1;d=l[o[6606]](772,16)|0}o[d>>2]=1025;o[d+124>>2]=0;o[d+128>>2]=0;m[d+120|0]=0;o[d+116>>2]=0;o[d+132>>2]=0;o[d+136>>2]=0;o[d+140>>2]=0;o[d+144>>2]=0;o[d+148>>2]=0;o[d+152>>2]=0;o[d+308>>2]=0;o[d+312>>2]=0;m[d+304|0]=0;o[d+300>>2]=0;o[d+316>>2]=0;o[d+320>>2]=0;o[d+324>>2]=0;o[d+328>>2]=0;o[d+332>>2]=0;o[d+336>>2]=0;o[d+492>>2]=0;o[d+496>>2]=0;m[d+488|0]=0;o[d+484>>2]=0;o[d+500>>2]=0;o[d+504>>2]=0;o[d+508>>2]=0;o[d+512>>2]=0;o[d+516>>2]=0;o[d+520>>2]=0;m[d+672|0]=0;o[d+668>>2]=0;o[d+700>>2]=0;o[d+704>>2]=0;o[d+692>>2]=0;o[d+696>>2]=0;o[d+684>>2]=0;o[d+688>>2]=0;o[d+676>>2]=0;o[d+680>>2]=0;o[d+740>>2]=b;o[d+744>>2]=c;o[d+748>>2]=0;o[d+752>>2]=i;s[d+756>>2]=h<g?h:g;c=o[a+12>>2];o[d+768>>2]=c;c:{if(o[a+16>>2]!=(c|0)){break c}e=c?c<<1:1;if((c|0)>=(e|0)){break c}d:{if(!e){i=0;break d}o[7717]=o[7717]+1;i=l[o[6606]](e<<2,16)|0;c=o[a+12>>2]}if((c|0)>=1){b=0;while(1){j=b<<2;o[j+i>>2]=o[j+o[a+20>>2]>>2];b=b+1|0;if((c|0)!=(b|0)){continue}break}}b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}c=o[a+12>>2]}o[a+20>>2]=0}o[a+20>>2]=i;o[a+16>>2]=e;m[a+24|0]=1}o[o[a+20>>2]+(c<<2)>>2]=d;o[a+12>>2]=c+1}M=f+16|0;return d|0}function bz(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0;a:{i=o[a+48>>2];g=o[b>>2];e=(g<<15^-1)+g|0;e=u(e>>10^e,9);e=e>>6^e;e=(e<<11^-1)+e|0;j=i+ -1&(e>>16^e);b:{if(j>>>0>=r[a+4>>2]){break b}d=o[o[a+12>>2]+(j<<2)>>2];if((d|0)==-1){break b}h=o[a+72>>2];while(1){e=d<<2;if((g|0)==o[e+h>>2]){break a}d=o[e+o[a+32>>2]>>2];if((d|0)!=-1){continue}break}}n=o[a+44>>2];d=n;c:{if((i|0)!=(d|0)){break c}d=i;k=d?d<<1:1;if((d|0)>=(k|0)){break c}d:{if(!k){d=i;break d}o[7717]=o[7717]+1;f=l[o[6606]](k<<3,16)|0;d=o[a+44>>2]}e=d;if((e|0)>=1){d=0;while(1){h=d<<3;q=h+f|0;g=h+o[a+52>>2]|0;h=o[g+4>>2];o[q>>2]=o[g>>2];o[q+4>>2]=h;d=d+1|0;if((e|0)!=(d|0)){continue}break}}e=o[a+52>>2];if(e){if(p[a+56|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+52>>2]=0}o[a+52>>2]=f;o[a+48>>2]=k;m[a+56|0]=1;d=o[a+44>>2]}e=o[c+4>>2];d=o[a+52>>2]+(d<<3)|0;o[d>>2]=o[c>>2];o[d+4>>2]=e;o[a+44>>2]=o[a+44>>2]+1;f=o[a- -64>>2];e:{if((f|0)!=o[a+68>>2]){break e}h=f?f<<1:1;if((f|0)>=(h|0)){break e}d=0;e=0;if(h){o[7717]=o[7717]+1;e=l[o[6606]](h<<2,16)|0;f=o[a+64>>2]}g=o[a+72>>2];f:{g:{if((f|0)>=1){while(1){c=d<<2;o[c+e>>2]=o[c+g>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break g}}if(!g){break f}}if(p[a+76|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+72>>2]=0;f=o[a+64>>2]}o[a+72>>2]=e;o[a+68>>2]=h;m[a+76|0]=1}o[o[a+72>>2]+(f<<2)>>2]=o[b>>2];o[a+64>>2]=o[a+64>>2]+1;if((i|0)<o[a+48>>2]){az(a);b=o[b>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;j=o[a+48>>2]+ -1&(b>>16^b)}b=o[a+32>>2]+(n<<2)|0;a=o[a+12>>2]+(j<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=n;return}b=o[a+52>>2]+(d<<3)|0;a=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=a}function qE(a,b,c,d){var e=v(0),f=v(0),g=0,h=v(0),i=0,j=v(0),k=v(0),m=v(0),r=v(0),t=v(0),u=0,w=v(0),x=v(0),y=v(0),z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;i=M-16|0;M=i;a:{if(p[a+60|0]){j=s[a+28>>2];h=s[a+12>>2];e=s[c+8>>2];e=e<h?h:e;w=s[a+44>>2];e=v(v((j<e?j:e)-h)*w);b:{if(e<v(4294967296)&e>=v(0)){g=~~e>>>0;break b}g=0}x=s[a+40>>2];r=s[a+24>>2];e=s[a+8>>2];y=s[a+36>>2];t=s[a+20>>2];m=s[a+4>>2];f=s[c>>2];k=s[c+4>>2];z=g&65534;n[i+14>>1]=z;c=i;k=k<e?e:k;k=v(x*v((r<k?r:k)-e));c:{if(k<v(4294967296)&k>=v(0)){g=~~k>>>0;break c}g=0}A=g&65534;n[c+12>>1]=A;c=i;f=f<m?m:f;f=v(v((t<f?t:f)-m)*y);d:{if(f<v(4294967296)&f>=v(0)){g=~~f>>>0;break d}g=0}B=g&65534;n[c+10>>1]=B;f=s[d+8>>2];f=f<h?h:f;h=v(v(w*v((j<f?j:f)-h))+v(1));e:{if(h<v(4294967296)&h>=v(0)){c=~~h>>>0;break e}c=0}h=s[d>>2];j=s[d+4>>2];C=c|1;n[i+8>>1]=C;c=i;j=j<e?e:j;e=v(v(x*v((r<j?r:j)-e))+v(1));f:{if(e<v(4294967296)&e>=v(0)){d=~~e>>>0;break f}d=0}D=d|1;n[c+6>>1]=D;c=i;e=h<m?m:h;e=v(v(y*v((t<e?t:e)-m))+v(1));g:{if(e<v(4294967296)&e>=v(0)){d=~~e>>>0;break g}d=0}E=d|1;n[c+4>>1]=E;h:{switch(o[a+144>>2]){case 0:d=0;F=o[a+56>>2];if((F|0)>=1){a=o[a+136>>2];c=0;while(1){u=o[a+12>>2];G=(u|0)<0;g=B>>>0<=q[a+6>>1]&E>>>0>=q[a>>1]&z>>>0<=q[a+10>>1]&C>>>0>=q[a+4>>1]&A>>>0<=q[a+8>>1]&D>>>0>=q[a+2>>1];if(!(G|!g)){l[o[o[b>>2]+8>>2]](b,u>>>21|0,u&2097151)}i:{if(!((g^-1)&G)){c=c+1|0;a=a+16|0;break i}g=o[a+12>>2];c=c-g|0;a=a-(g<<4)|0}d=d+1|0;if((c|0)<(F|0)){continue}break}}if(o[7309]>=(d|0)){break a}o[7309]=d;break a;case 1:pE(a,b,i+10|0,i+4|0);break a;case 2:break h;default:break a}}ck(a,o[a+136>>2],b,i+10|0,i+4|0);break a}oE(a,b,c,d)}M=i+16|0}function Xz(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=v(0),l=0,m=0,n=0,p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=0;g=M-112|0;M=g;k=s[b>>2];r=s[c>>2];p=s[b+4>>2];t=s[c+4>>2];q=s[b+8>>2];w=s[c+8>>2];o[g+108>>2]=0;q=v(w-q);s[g+104>>2]=q;p=v(t-p);s[g+100>>2]=p;k=v(r-k);s[g+96>>2]=k;j=o[a+988>>2];a:{if(!j){h=o[a+752>>2];if((h|0)<1){break a}c=0;while(1){j=o[a+760>>2]+u(c,44)|0;k=yf(b,g+96|0,o[j+8>>2]+8|0,o[j+12>>2]+8|0,o[j+16>>2]+8|0,s[d>>2]);if(!!(k>v(0))){o[e>>2]=3;o[f>>2]=c;s[d>>2]=k;m=m+1|0}c=c+1|0;if((h|0)!=(c|0)){continue}break}break a}h=o[d>>2];o[g+32>>2]=20996;i=o[b+12>>2];o[g+44>>2]=o[b+8>>2];o[g+48>>2]=i;i=o[b+4>>2];n=o[b>>2];o[g+80>>2]=0;s[g+76>>2]=q;s[g+72>>2]=p;o[g+36>>2]=n;o[g+40>>2]=i;s[g+68>>2]=k;i=o[c+12>>2];o[g+60>>2]=o[c+8>>2];o[g+64>>2]=i;i=o[c+4>>2];o[g+52>>2]=o[c>>2];o[g+56>>2]=i;o[g+88>>2]=0;o[g+92>>2]=0;o[g+84>>2]=h;sl(j,b,c,g+32|0);c=o[g+88>>2];if(!c){break a}o[d>>2]=o[g+84>>2];o[e>>2]=3;o[f>>2]=(c-o[a+760>>2]|0)/44;m=1}if(o[a+772>>2]>=1){j=0;while(1){x=o[a+780>>2];c=0;while(1){n=(u(j,104)+x|0)+8|0;i=u(c,12);h=o[n+(o[i+21024>>2]<<2)>>2];l=o[h+20>>2];o[g+40>>2]=o[h+16>>2];o[g+44>>2]=l;l=o[h+12>>2];o[g+32>>2]=o[h+8>>2];o[g+36>>2]=l;h=o[n+(o[i+21028>>2]<<2)>>2];l=o[h+20>>2];o[g+24>>2]=o[h+16>>2];o[g+28>>2]=l;l=o[h+12>>2];o[g+16>>2]=o[h+8>>2];o[g+20>>2]=l;h=o[n+(o[i+21032>>2]<<2)>>2];i=o[h+20>>2];o[g+8>>2]=o[h+16>>2];o[g+12>>2]=i;i=o[h+12>>2];o[g>>2]=o[h+8>>2];o[g+4>>2]=i;k=yf(b,g+96|0,g+32|0,g+16|0,g,s[d>>2]);if(!!(k>v(0))){o[e>>2]=4;o[f>>2]=j;s[d>>2]=k;m=m+1|0}c=c+1|0;if((c|0)!=4){continue}break}j=j+1|0;if((j|0)<o[a+772>>2]){continue}break}}M=g+112|0;return m}function $b(a,b){var c=v(0),d=v(0),e=0,f=v(0),g=v(0),h=v(0),i=0;d=s[((b<<2)+a|0)+1192>>2];e=(b<<6)+a|0;f=s[e+868>>2];g=s[e+872>>2];a:{if(f>=g){break a}if(!!(d<f)){c=xa(v(f-d),v(6.2831854820251465));b:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break b}if(!(c>v(3.1415927410125732))){break b}c=v(c+v(-6.2831854820251465))}h=v(w(c));c=xa(v(g-d),v(6.2831854820251465));c:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break c}if(!(c>v(3.1415927410125732))){break c}c=v(c+v(-6.2831854820251465))}d=h<v(w(c))?d:v(d+v(6.2831854820251465));break a}if(!(d>g)){break a}c=xa(v(d-g),v(6.2831854820251465));d:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break d}if(!(c>v(3.1415927410125732))){break d}c=v(c+v(-6.2831854820251465))}h=v(w(c));c=xa(v(d-f),v(6.2831854820251465));e:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break e}if(!(c>v(3.1415927410125732))){break e}c=v(c+v(-6.2831854820251465))}d=v(w(c))<h?v(d+v(-6.2831854820251465)):d}s[e+920>>2]=d;f:{g:{h:{if(!!(f>g)){i=((b<<6)+a|0)+924|0;break h}if(!!(f>d)){a=(b<<6)+a|0;c=v(d-f);s[a+916>>2]=c;o[a+924>>2]=1;if(!!(c>v(3.1415927410125732))){s[a+916>>2]=c+v(-6.2831854820251465);break g}if(!(c<v(-3.1415927410125732))){break g}s[a+916>>2]=c+v(6.2831854820251465);break g}e=(b<<6)+a|0;i=e+924|0;if(!(g<d)){break h}o[e+924>>2]=2;c=v(d-g);s[e+916>>2]=c;if(!!(c>v(3.1415927410125732))){s[e+916>>2]=c+v(-6.2831854820251465);break g}if(!(c<v(-3.1415927410125732))){break g}s[e+916>>2]=c+v(6.2831854820251465);break g}o[i>>2]=0;e=0;if(!p[((b<<6)+a|0)+912|0]){break f}}e=1}return e}function Qy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=0;e=M-256|0;M=e;ia(22843);o[e+32>>2]=22900;f=o[b+12>>2];o[e+76>>2]=o[b+8>>2];o[e+80>>2]=f;f=o[b+4>>2];o[e+68>>2]=o[b>>2];o[e+72>>2]=f;f=o[c+12>>2];o[e+92>>2]=o[c+8>>2];o[e+96>>2]=f;f=o[c>>2];n=o[c+4>>2];o[e+104>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;o[e+116>>2]=0;o[e+124>>2]=0;o[e+128>>2]=0;o[e+120>>2]=1065353216;o[e+132>>2]=0;o[e+136>>2]=0;o[e+140>>2]=1065353216;o[e+144>>2]=0;o[e+84>>2]=f;o[e+88>>2]=n;o[e+248>>2]=d;o[e+100>>2]=1065353216;o[e+244>>2]=a;d=o[e+72>>2];o[e+148>>2]=o[e+68>>2];o[e+152>>2]=d;d=o[e+80>>2];o[e+156>>2]=o[e+76>>2];o[e+160>>2]=d;o[e+164>>2]=1065353216;o[e+176>>2]=0;o[e+180>>2]=0;o[e+168>>2]=0;o[e+172>>2]=0;o[e+184>>2]=1065353216;o[e+196>>2]=0;o[e+200>>2]=0;o[e+188>>2]=0;o[e+192>>2]=0;o[e+204>>2]=1065353216;o[e+208>>2]=0;d=o[c+12>>2];o[e+220>>2]=o[c+8>>2];o[e+224>>2]=d;d=o[c+4>>2];o[e+212>>2]=o[c>>2];o[e+216>>2]=d;j=v(s[c>>2]-s[b>>2]);g=v(s[c+4>>2]-s[b+4>>2]);h=v(s[c+8>>2]-s[b+8>>2]);i=v(v(1)/v(C(v(v(v(j*j)+v(g*g))+v(h*h)))));h=v(h*i);k=h==v(0)?v(1.0000000150474662e+30):v(v(1)/h);s[e+44>>2]=k;g=v(g*i);m=g==v(0)?v(1.0000000150474662e+30):v(v(1)/g);s[e+40>>2]=m;o[e+60>>2]=k<v(0);o[e+56>>2]=m<v(0);i=v(j*i);j=i==v(0)?v(1.0000000150474662e+30):v(v(1)/i);s[e+36>>2]=j;o[e+52>>2]=j<v(0);s[e+64>>2]=v(v(i*v(s[e+84>>2]-s[e+68>>2]))+v(g*v(s[e+88>>2]-s[e+72>>2])))+v(h*v(s[e+92>>2]-s[e+76>>2]));a=o[a+68>>2];o[e+24>>2]=0;o[e+28>>2]=0;o[e+16>>2]=0;o[e+20>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;l[o[o[a>>2]+24>>2]](a,b,c,e+32|0,e+16|0,e);ga();M=e+256|0}function qe(a){a=a|0;var b=0;o[a>>2]=5228;if(p[a+20|0]){b=o[o[a+16>>2]+16>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+16>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}if(p[a+12|0]){b=o[o[a+8>>2]+16>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+8>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+32>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+32>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+36>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+36>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+40>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+40>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+44>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+44>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+48>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+48>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+52>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+52>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+56>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+56>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+60>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+60>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+76>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+76>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+80>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+80>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+72>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+72>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+88>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+88>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+84>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+84>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+24>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+28>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+28>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}return a|0}function WJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=0;e=M-256|0;M=e;o[e+32>>2]=9240;f=o[b+12>>2];o[e+76>>2]=o[b+8>>2];o[e+80>>2]=f;f=o[b+4>>2];o[e+68>>2]=o[b>>2];o[e+72>>2]=f;f=o[c+12>>2];o[e+92>>2]=o[c+8>>2];o[e+96>>2]=f;f=o[c>>2];n=o[c+4>>2];o[e+104>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;o[e+116>>2]=0;o[e+124>>2]=0;o[e+128>>2]=0;o[e+120>>2]=1065353216;o[e+132>>2]=0;o[e+136>>2]=0;o[e+140>>2]=1065353216;o[e+144>>2]=0;o[e+84>>2]=f;o[e+88>>2]=n;o[e+248>>2]=d;o[e+100>>2]=1065353216;o[e+244>>2]=a;d=o[e+72>>2];o[e+148>>2]=o[e+68>>2];o[e+152>>2]=d;d=o[e+80>>2];o[e+156>>2]=o[e+76>>2];o[e+160>>2]=d;o[e+164>>2]=1065353216;o[e+176>>2]=0;o[e+180>>2]=0;o[e+168>>2]=0;o[e+172>>2]=0;o[e+184>>2]=1065353216;o[e+196>>2]=0;o[e+200>>2]=0;o[e+188>>2]=0;o[e+192>>2]=0;o[e+204>>2]=1065353216;o[e+208>>2]=0;d=o[c+12>>2];o[e+220>>2]=o[c+8>>2];o[e+224>>2]=d;d=o[c+4>>2];o[e+212>>2]=o[c>>2];o[e+216>>2]=d;j=v(s[c>>2]-s[b>>2]);g=v(s[c+4>>2]-s[b+4>>2]);h=v(s[c+8>>2]-s[b+8>>2]);i=v(v(1)/v(C(v(v(v(j*j)+v(g*g))+v(h*h)))));h=v(h*i);k=h==v(0)?v(0xde0b6b000000000):v(v(1)/h);s[e+44>>2]=k;g=v(g*i);m=g==v(0)?v(0xde0b6b000000000):v(v(1)/g);s[e+40>>2]=m;o[e+60>>2]=k<v(0);o[e+56>>2]=m<v(0);i=v(j*i);j=i==v(0)?v(0xde0b6b000000000):v(v(1)/i);s[e+36>>2]=j;o[e+52>>2]=j<v(0);s[e+64>>2]=v(v(i*v(s[e+84>>2]-s[e+68>>2]))+v(g*v(s[e+88>>2]-s[e+72>>2])))+v(h*v(s[e+92>>2]-s[e+76>>2]));a=o[a+68>>2];o[e+24>>2]=0;o[e+28>>2]=0;o[e+16>>2]=0;o[e+20>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;l[o[o[a>>2]+24>>2]](a,b,c,e+32|0,e+16|0,e);M=e+256|0}function yz(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0;a:{j=o[a+48>>2];f=o[b>>2];d=(f<<15^-1)+f|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;k=j+ -1&(d>>16^d);b:{if(k>>>0>=r[a+4>>2]){break b}e=o[o[a+12>>2]+(k<<2)>>2];if((e|0)==-1){break b}d=o[a+72>>2];while(1){if((f|0)==o[d+(e<<3)>>2]){break a}e=o[o[a+32>>2]+(e<<2)>>2];if((e|0)!=-1){continue}break}}n=o[a+44>>2];d=n;c:{if((j|0)!=(d|0)){break c}d=j;g=d?d<<1:1;if((d|0)>=(g|0)){break c}e=0;if(g){o[7717]=o[7717]+1;i=l[o[6606]](g<<2,16)|0;d=o[a+44>>2]}h=o[a+52>>2];d:{e:{if((d|0)>=1){while(1){f=e<<2;o[f+i>>2]=o[f+h>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break e}}if(!h){break d}}if(p[a+56|0]){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}o[a+52>>2]=0;d=o[a+44>>2]}o[a+52>>2]=i;o[a+48>>2]=g;m[a+56|0]=1}o[o[a+52>>2]+(d<<2)>>2]=o[c>>2];o[a+44>>2]=o[a+44>>2]+1;d=o[a- -64>>2];f:{if((d|0)!=o[a+68>>2]){break f}g=d?d<<1:1;if((d|0)>=(g|0)){break f}g:{if(!g){i=0;break g}o[7717]=o[7717]+1;i=l[o[6606]](g<<3,16)|0;d=o[a+64>>2]}if((d|0)>=1){e=0;while(1){c=e<<3;h=c+i|0;f=c+o[a+72>>2]|0;c=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=c;e=e+1|0;if((e|0)!=(d|0)){continue}break}}c=o[a+72>>2];if(c){if(p[a+76|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+72>>2]=0}o[a+72>>2]=i;o[a+68>>2]=g;m[a+76|0]=1;d=o[a+64>>2]}c=o[b+4>>2];d=o[a+72>>2]+(d<<3)|0;o[d>>2]=o[b>>2];o[d+4>>2]=c;o[a+64>>2]=o[a+64>>2]+1;if((j|0)<o[a+48>>2]){ql(a);b=o[b>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;k=o[a+48>>2]+ -1&(b>>16^b)}b=o[a+32>>2]+(n<<2)|0;a=o[a+12>>2]+(k<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=n;return}o[o[a+52>>2]+(e<<2)>>2]=o[c>>2]}function Dz(a,b,c){a=a|0;b=v(b);c=v(c);var d=0,e=0,f=v(0),g=0,h=0,i=v(0),j=0,k=v(0),l=v(0),m=v(0),n=v(0),p=0,q=v(0),r=v(0),t=v(0),w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=0;w=o[a+832>>2];if((w|0)>=1){C=o[a+840>>2];while(1){d=u(p,56)+C|0;a=d;x=v(0);y=v(0);z=v(0);j=o[d>>2];q=s[j+8>>2];e=o[d+4>>2];g=o[e+8>>2];f=s[d+8>>2];h=o[e+12>>2];i=s[d+12>>2];e=o[e+16>>2];b=s[d+16>>2];A=v(v(v(s[g+8>>2]*f)+v(s[h+8>>2]*i))+v(s[e+8>>2]*b));B=v(v(q-s[j+24>>2])-v(A-v(v(v(f*s[g+24>>2])+v(i*s[h+24>>2]))+v(b*s[e+24>>2]))));m=s[d+24>>2];r=s[j+12>>2];k=v(v(v(f*s[g+12>>2])+v(i*s[h+12>>2]))+v(b*s[e+12>>2]));l=v(v(r-s[j+28>>2])-v(k-v(v(v(f*s[g+28>>2])+v(i*s[h+28>>2]))+v(b*s[e+28>>2]))));n=s[d+28>>2];t=s[j+16>>2];c=v(v(v(f*s[g+16>>2])+v(i*s[h+16>>2]))+v(b*s[e+16>>2]));b=v(v(t-s[j+32>>2])-v(c-v(v(v(f*s[g+32>>2])+v(i*s[h+32>>2]))+v(b*s[e+32>>2]))));f=s[d+32>>2];i=v(v(v(B*m)+v(l*n))+v(b*f));if(!!(i<v(0))){c=v(s[d+40>>2]-v(v(v(v(q*m)+v(r*n))+v(t*f))-v(v(v(A*m)+v(k*n))+v(c*f))));z=v(v(f*c)+v(0));x=v(v(m*c)+v(0));y=v(v(n*c)+v(0))}c=s[d+48>>2];f=v(b-v(f*i));b=s[d+44>>2];k=v(z-v(f*b));s[j+16>>2]=t+v(c*k);l=v(y-v(b*v(l-v(n*i))));s[j+12>>2]=r+v(c*l);f=c;c=v(x-v(b*v(B-v(m*i))));s[j+8>>2]=q+v(f*c);b=v(s[d+52>>2]*s[a+8>>2]);s[g+8>>2]=s[g+8>>2]-v(c*b);s[g+12>>2]=s[g+12>>2]-v(l*b);s[g+16>>2]=s[g+16>>2]-v(k*b);b=v(s[d+52>>2]*s[d+12>>2]);s[h+8>>2]=s[h+8>>2]-v(c*b);s[h+12>>2]=s[h+12>>2]-v(l*b);s[h+16>>2]=s[h+16>>2]-v(k*b);b=v(s[d+52>>2]*s[d+16>>2]);s[e+8>>2]=s[e+8>>2]-v(c*b);s[e+12>>2]=s[e+12>>2]-v(l*b);s[e+16>>2]=s[e+16>>2]-v(k*b);p=p+1|0;if((w|0)!=(p|0)){continue}break}}}function SJ(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0;a:{h=o[a+48>>2];d=o[b>>2];e=(d<<15^-1)+d|0;e=u(e>>10^e,9);e=e>>6^e;e=(e<<11^-1)+e|0;j=h+ -1&(e>>16^e);b:{if(j>>>0>=r[a+4>>2]){break b}e=o[o[a+12>>2]+(j<<2)>>2];if((e|0)==-1){break b}f=o[a+72>>2];while(1){if((d|0)==o[f+(e<<3)>>2]){break a}e=o[o[a+32>>2]+(e<<2)>>2];if((e|0)!=-1){continue}break}}k=o[a+44>>2];d=k;c:{if((h|0)!=(d|0)){break c}d=h;f=d?d<<1:1;if((d|0)>=(f|0)){break c}if(f){o[7717]=o[7717]+1;g=l[o[6606]](f<<2,16)|0;d=o[a+44>>2]}else{d=h}if((d|0)>=1){e=0;while(1){i=e<<2;o[i+g>>2]=o[i+o[a+52>>2]>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break}}e=o[a+52>>2];if(e){if(p[a+56|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}d=o[a+44>>2]}o[a+52>>2]=0}o[a+52>>2]=g;o[a+48>>2]=f;m[a+56|0]=1}o[o[a+52>>2]+(d<<2)>>2]=o[c>>2];o[a+44>>2]=d+1;d=o[a- -64>>2];d:{if((d|0)!=o[a+68>>2]){break d}c=d?d<<1:1;if((d|0)>=(c|0)){break d}e:{if(!c){g=0;break e}o[7717]=o[7717]+1;g=l[o[6606]](c<<3,16)|0;d=o[a+64>>2]}if((d|0)>=1){e=0;while(1){f=e<<3;i=f+g|0;f=f+o[a+72>>2]|0;n=o[f+4>>2];o[i>>2]=o[f>>2];o[i+4>>2]=n;e=e+1|0;if((e|0)!=(d|0)){continue}break}}d=o[a+72>>2];if(d){if(p[a+76|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+72>>2]=0}o[a+72>>2]=g;o[a+68>>2]=c;m[a+76|0]=1;d=o[a+64>>2]}c=o[a+72>>2]+(d<<3)|0;d=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=d;o[a+64>>2]=o[a+64>>2]+1;if((h|0)<o[a+48>>2]){ql(a);b=o[b>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;j=o[a+48>>2]+ -1&(b>>16^b)}b=o[a+32>>2]+(k<<2)|0;a=o[a+12>>2]+(j<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=k;return}o[o[a+52>>2]+(e<<2)>>2]=o[c>>2]}function tb(a,b,c,d){var e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),A=v(0),B=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0);f=M+ -64|0;M=f;q=s[b+24>>2];r=s[b+20>>2];t=s[b+40>>2];u=s[b+36>>2];j=s[a+40>>2];k=s[a+20>>2];n=s[a+36>>2];l=s[a+24>>2];w=s[b+8>>2];x=s[b>>2];A=s[b+4>>2];B=s[b+16>>2];D=s[b+32>>2];g=s[a+8>>2];h=s[a+4>>2];p=s[a+32>>2];m=s[a+16>>2];i=s[a>>2];o[f+60>>2]=0;o[f+44>>2]=0;F=v(v(k*j)-v(l*n));G=v(v(l*p)-v(j*m));H=v(v(n*m)-v(k*p));e=v(v(1)/v(v(v(i*F)+v(h*G))+v(g*H)));E=v(v(v(l*h)-v(k*g))*e);l=v(v(v(m*g)-v(l*i))*e);k=v(v(v(k*i)-v(m*h))*e);s[f+56>>2]=v(v(D*E)+v(u*l))+v(t*k);m=v(v(v(n*g)-v(j*h))*e);g=v(v(v(j*i)-v(p*g))*e);h=v(v(v(p*h)-v(n*i))*e);s[f+52>>2]=v(v(D*m)+v(u*g))+v(t*h);s[f+40>>2]=v(v(E*B)+v(l*r))+v(k*q);s[f+36>>2]=v(v(m*B)+v(g*r))+v(h*q);o[f+28>>2]=0;i=v(F*e);j=v(G*e);e=v(H*e);s[f+48>>2]=v(v(D*i)+v(u*j))+v(t*e);s[f+32>>2]=v(v(i*B)+v(j*r))+v(e*q);s[f+24>>2]=v(w*k)+v(v(x*E)+v(A*l));s[f+20>>2]=v(w*h)+v(v(x*m)+v(A*g));s[f+16>>2]=v(w*e)+v(v(x*i)+v(A*j));ya(f+16|0,f);i=s[f>>2];h=s[f+4>>2];g=s[f+8>>2];j=s[f+12>>2];e=v(v(1)/v(C(v(v(v(v(i*i)+v(h*h))+v(g*g))+v(j*j)))));g=v(g*e);s[f+8>>2]=g;h=v(h*e);s[f+4>>2]=h;i=v(i*e);s[f>>2]=i;e=v(j*e);s[f+12>>2]=e;e=Sa(v(y(v(z(e,v(-1))),v(1))));s[d>>2]=e+e;o[c+12>>2]=0;s[c+8>>2]=g;s[c+4>>2]=h;s[c>>2]=i;e=v(v(v(i*i)+v(h*h))+v(g*g));a:{if(!!(e<v(1.4210854715202004e-14))){o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=0;break a}e=v(v(1)/v(C(e)));s[c+8>>2]=g*e;s[c+4>>2]=h*e;s[c>>2]=i*e}M=f- -64|0}function xf(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,p=0;a:{if(!a|!b){break a}o[7717]=o[7717]+1;f=l[o[6606]](1024,16)|0;o[f+4>>2]=b;o[f>>2]=a;b=124;j=128;a=128;e=1;while(1){i=e;e=e+ -1|0;k=e<<3;d=k+f|0;h=o[d+4>>2];g=o[d>>2];if((e|0)>(b|0)){b=j<<1;b:{if((j|0)>=(b|0)){d=f;break b}if((a|0)>=(b|0)){d=f;break b}c:{d:{if(!j){d=0;break d}a=0;o[7717]=o[7717]+1;d=l[o[6606]](j<<4,16)|0;if((j|0)<1){break d}while(1){m=a<<3;n=m+d|0;p=f+m|0;m=o[p+4>>2];o[n>>2]=o[p>>2];o[n+4>>2]=m;a=a+1|0;if((j|0)!=(a|0)){continue}break}break c}a=b;if(!f){break b}}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}a=b}f=d;j=b;b=b+ -4|0}e:{if((g|0)==(h|0)){if(!o[g+40>>2]){break e}e=f+k|0;d=o[g+36>>2];o[e+4>>2]=d;o[e>>2]=d;e=(i<<3)+f|0;d=o[g+40>>2];o[e+4>>2]=d;o[e>>2]=d;d=o[g+40>>2];o[e+8>>2]=o[g+36>>2];o[e+12>>2]=d;e=i+2|0;break e}if(s[g>>2]<=s[h+16>>2]^1|s[g+16>>2]>=s[h>>2]^1|(s[g+4>>2]<=s[h+20>>2]^1|s[g+20>>2]>=s[h+4>>2]^1)){break e}if(s[g+8>>2]<=s[h+24>>2]^1|s[g+24>>2]>=s[h+8>>2]^1){break e}d=o[h+40>>2];if(o[g+40>>2]){e=o[g+36>>2];if(d){d=f+k|0;o[d+4>>2]=o[h+36>>2];o[d>>2]=e;d=o[g+40>>2];e=(i<<3)+f|0;o[e+4>>2]=o[h+36>>2];o[e>>2]=d;d=o[g+36>>2];o[e+12>>2]=o[h+40>>2];o[e+8>>2]=d;d=o[g+40>>2];o[e+20>>2]=o[h+40>>2];o[e+16>>2]=d;e=i+3|0;break e}d=f+k|0;o[d+4>>2]=h;o[d>>2]=e;e=o[g+40>>2];d=(i<<3)+f|0;o[d+4>>2]=h;o[d>>2]=e;e=i+1|0;break e}if(d){d=f+k|0;o[d+4>>2]=o[h+36>>2];o[d>>2]=g;d=(i<<3)+f|0;o[d+4>>2]=o[h+40>>2];o[d>>2]=g;e=i+1|0;break e}l[o[o[c>>2]+8>>2]](c,g,h)}if(e){continue}break}if(!f){break a}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}}function dK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),D=v(0),E=v(0);h=M-32|0;M=h;r=s[b+24>>2];E=s[b+40>>2];t=s[b+36>>2];k=s[b+20>>2];m=s[b+8>>2];u=s[b+16>>2];p=s[b+4>>2];w=s[b+32>>2];q=s[b>>2];o[h+28>>2]=0;f=v(u-q);i=v(t-p);g=v(k-p);n=v(w-q);e=v(v(f*i)-v(g*n));s[h+24>>2]=e;j=v(r-m);x=v(j*n);n=v(E-m);f=v(x-v(f*n));s[h+20>>2]=f;i=v(v(g*n)-v(j*i));s[h+16>>2]=i;y=s[a+4>>2];j=s[a+8>>2];z=s[a+12>>2];g=v(v(m*e)+v(v(q*i)+v(p*f)));n=v(v(v(v(i*y)+v(f*j))+v(e*z))-g);B=s[a+20>>2];A=s[a+24>>2];D=s[a+28>>2];g=v(v(v(v(i*B)+v(f*A))+v(e*D))-g);a:{if(v(n*g)>=v(0)){break a}b=o[a+36>>2];if(b&1?!!(n<=v(0)):0){break a}g=v(n/v(n-g));if(!(g<s[a+40>>2])){break a}x=j;j=v(v(1)-g);A=v(v(A*g)+v(x*j));k=v(k-A);y=v(v(B*g)+v(y*j));q=v(q-y);p=v(p-A);u=v(u-y);j=v(v(D*g)+v(z*j));r=v(r-j);m=v(m-j);B=v(v(e*e)+v(v(i*i)+v(f*f)));z=v(B*v(-9999999747378752e-20));if(!(v(v(e*v(v(k*q)-v(p*u)))+v(v(i*v(v(p*r)-v(m*k)))+v(f*v(v(m*u)-v(r*q)))))>=z)){break a}t=v(t-A);w=v(w-y);D=v(e*v(v(t*u)-v(k*w)));x=k;k=v(E-j);if(v(D+v(v(i*v(v(x*k)-v(r*t)))+v(f*v(v(r*w)-v(k*u)))))>=z^1|v(v(e*v(v(p*w)-v(t*q)))+v(v(i*v(v(t*m)-v(k*p)))+v(f*v(v(k*q)-v(m*w)))))>=z^1){break a}x=e;e=v(v(1)/v(C(B)));m=v(x*e);s[h+24>>2]=m;f=v(f*e);s[h+20>>2]=f;e=v(i*e);s[h+16>>2]=e;if(!(b&2|n<=v(0)^1)){o[h+12>>2]=0;s[h+8>>2]=-m;s[h+4>>2]=-f;s[h>>2]=-e;s[a+40>>2]=l[o[o[a>>2]+12>>2]](a,h,g,c,d);break a}s[a+40>>2]=l[o[o[a>>2]+12>>2]](a,h+16|0,g,c,d)}M=h+32|0}function bI(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0;i=M-16|0;M=i;n=WG(a);m[a+104|0]=1;o[a>>2]=11368;o[a+100>>2]=0;m[a+124|0]=1;o[a+92>>2]=0;o[a+96>>2]=0;o[a+120>>2]=0;o[a+112>>2]=0;o[a+116>>2]=0;o[a+4>>2]=9;if((d|0)>=1){o[7717]=o[7717]+1;e=l[o[6606]](d<<4,16)|0;j=o[a+92>>2];if((j|0)>=1){while(1){f=g<<4;h=f+e|0;f=f+o[a+100>>2]|0;k=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=k;k=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=k;g=g+1|0;if((j|0)!=(g|0)){continue}break}}f=o[a+100>>2];if(f){if(p[a+104|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[a+100>>2]=0}o[a+100>>2]=e;g=1;m[a+104|0]=1;o[a+96>>2]=d;f=o[i+12>>2];o[e+8>>2]=o[i+8>>2];o[e+12>>2]=f;f=o[i+4>>2];o[e>>2]=o[i>>2];o[e+4>>2]=f;if((d|0)!=1){while(1){h=o[i+4>>2];e=o[a+100>>2]+(g<<4)|0;o[e>>2]=o[i>>2];o[e+4>>2]=h;f=o[i+12>>2];o[e+8>>2]=o[i+8>>2];o[e+12>>2]=f;g=g+1|0;if((g|0)!=(d|0)){continue}break}}e=o[a+112>>2]}o[a+92>>2]=d;if((e|0)<(d|0)){a:{if(o[a+116>>2]>=(d|0)){h=o[a+120>>2];break a}g=0;f=e;h=0;if(d){o[7717]=o[7717]+1;h=l[o[6606]](d<<2,16)|0;f=o[a+112>>2]}j=o[a+120>>2];b:{c:{if((f|0)>=1){while(1){k=g<<2;o[k+h>>2]=o[j+k>>2];g=g+1|0;if((f|0)!=(g|0)){continue}break c}}if(j){break c}break b}if(p[a+124|0]){if(j){o[7718]=o[7718]+1;l[o[6607]](j)}}}o[a+120>>2]=h;m[a+124|0]=1;o[a+116>>2]=d}$((e<<2)+h|0,0,d-e<<2)}o[a+112>>2]=d;g=0;if((d|0)>0){while(1){e=g<<4;f=e+o[a+100>>2]|0;e=b+e|0;j=o[e+4>>2];o[f>>2]=o[e>>2];o[f+4>>2]=j;h=o[e+12>>2];o[f+8>>2]=o[e+8>>2];o[f+12>>2]=h;e=g<<2;o[e+o[a+120>>2]>>2]=o[c+e>>2];g=g+1|0;if((g|0)!=(d|0)){continue}break}}Mk(n);M=i+16|0}function XA(a,b,c){a=a|0;b=b|0;c=v(c);var d=0,e=0,f=v(0),g=0,h=v(0),i=v(0),j=v(0);d=M-80|0;M=d;if(!(s[a+172>>2]<=v(0)?!p[a+171|0]:0)){m[a+168|0]=l[o[o[a>>2]+48>>2]](a);f=v(s[a+16>>2]-v(s[a+44>>2]*c));s[a+16>>2]=f;a:{if(!(f>v(0))){break a}h=s[a+28>>2];if(!(f>h)){break a}s[a+16>>2]=h;f=h}b:{if(!(f<v(0))){break b}h=v(w(s[a+24>>2]));if(!(v(w(f))>h)){break b}f=v(-h);s[a+16>>2]=f}s[a+20>>2]=f*c;e=o[a+8>>2];g=o[e+16>>2];o[d+24>>2]=o[e+12>>2];o[d+28>>2]=g;g=o[e+8>>2];o[d+16>>2]=o[e+4>>2];o[d+20>>2]=g;g=o[e+32>>2];o[d+40>>2]=o[e+28>>2];o[d+44>>2]=g;g=o[e+24>>2];o[d+32>>2]=o[e+20>>2];o[d+36>>2]=g;g=o[e+48>>2];o[d+56>>2]=o[e+44>>2];o[d+60>>2]=g;g=o[e+40>>2];o[d+48>>2]=o[e+36>>2];o[d+52>>2]=g;g=o[e+64>>2];o[d+72>>2]=o[e+60>>2];o[d+76>>2]=g;g=o[e+56>>2];o[d+64>>2]=o[e+52>>2];o[d+68>>2]=g;dB(a,b);e=d- -64|0;c:{if(p[a+171|0]){$i(a,b,a+60|0);break c}f=s[a+172>>2];s[a+172>>2]=f-c;h=s[a- -64>>2];i=s[a+68>>2];j=s[a+60>>2];o[d+12>>2]=0;f=f>c?c:f;s[d+8>>2]=i*f;s[d+4>>2]=f*h;s[d>>2]=f*j;$i(a,b,d)}bB(a,b,c);b=o[a+104>>2];o[e+8>>2]=o[a+100>>2];o[e+12>>2]=b;b=o[a+96>>2];o[e>>2]=o[a+92>>2];o[e+4>>2]=b;a=o[a+8>>2];o[a+260>>2]=o[a+260>>2]+1;b=o[d+28>>2];o[a+12>>2]=o[d+24>>2];o[a+16>>2]=b;b=o[d+20>>2];o[a+4>>2]=o[d+16>>2];o[a+8>>2]=b;b=o[d+44>>2];o[a+28>>2]=o[d+40>>2];o[a+32>>2]=b;b=o[d+36>>2];o[a+20>>2]=o[d+32>>2];o[a+24>>2]=b;b=o[d+52>>2];o[a+36>>2]=o[d+48>>2];o[a+40>>2]=b;b=o[d+60>>2];o[a+44>>2]=o[d+56>>2];o[a+48>>2]=b;b=o[e+4>>2];o[a+52>>2]=o[e>>2];o[a+56>>2]=b;b=o[e+12>>2];o[a+60>>2]=o[e+8>>2];o[a+64>>2]=b}M=d+80|0}function Ez(a,b,c){a=a|0;b=v(b);c=v(c);var d=0,e=v(0),f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=0,m=0,n=v(0),p=0,q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0);m=M-16|0;M=m;c=s[a+452>>2];d=o[a+192>>2];x=v(l[o[o[d>>2]+48>>2]](d));y=o[a+812>>2];if((y|0)>=1){while(1){d=o[a+820>>2]+u(p,104)|0;g=o[d>>2];k=o[g+236>>2]<<30>>31&g;a:{if(!k){e=v(0);h=v(0);f=v(0);break a}f=s[k+332>>2];j=s[d+84>>2];n=s[k+336>>2];h=s[d+80>>2];e=v(c*v(v(v(f*j)-v(n*h))+s[k+312>>2]));i=s[k+328>>2];q=f;f=s[d+76>>2];h=v(c*v(v(v(h*i)-v(q*f))+s[k+320>>2]));f=v(c*v(s[k+316>>2]+v(v(n*f)-v(j*i))))}g=o[d+24>>2];z=s[g+8>>2];i=v(v(z-s[g+24>>2])-e);e=s[d+4>>2];A=s[g+12>>2];r=v(v(A-s[g+28>>2])-f);f=s[d+8>>2];t=s[g+16>>2];w=v(v(t-s[g+32>>2])-h);h=s[d+12>>2];j=v(v(v(i*e)+v(r*f))+v(w*h));b:{if(!(j<=v(1.1920928955078125e-7))){break b}B=s[d+20>>2];C=s[d+36>>2];D=s[d+28>>2];E=s[d+32>>2];F=s[d+52>>2];G=s[d+44>>2];H=s[d+48>>2];I=s[d+68>>2];J=s[d+60>>2];K=s[d- -64>>2];n=s[d+96>>2];L=s[d+100>>2];o[m+12>>2]=0;i=v(i-v(n*v(i-v(e*j))));q=e;e=v(B+v(v(v(z*e)+v(A*f))+v(t*h)));e=v(L*(e<x?e:x));i=v(v(i+v(q*e))*b);f=v(v(v(r-v(n*v(r-v(f*j))))+v(e*f))*b);e=v(v(v(w-v(n*v(w-v(h*j))))+v(e*h))*b);h=v(v(v(J*i)+v(K*f))+v(I*e));s[m+8>>2]=h;j=v(v(v(i*G)+v(f*H))+v(e*F));s[m+4>>2]=j;e=v(v(v(D*i)+v(E*f))+v(C*e));s[m>>2]=e;f=e;e=s[d+92>>2];s[g+8>>2]=s[g+8>>2]-v(f*e);s[g+12>>2]=s[g+12>>2]-v(j*e);s[g+16>>2]=t-v(h*e);if(!k){break b}Ca(k,m,d+76|0)}p=p+1|0;if((y|0)!=(p|0)){continue}break}}M=m+16|0}function jj(a,b,c,d){var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0);Kf(a,4,b);o[a>>2]=19668;b=o[c+12>>2];o[a+560>>2]=o[c+8>>2];o[a+564>>2]=b;b=o[c+4>>2];o[a+552>>2]=o[c>>2];o[a+556>>2]=b;b=o[c+28>>2];o[a+576>>2]=o[c+24>>2];o[a+580>>2]=b;b=o[c+20>>2];o[a+568>>2]=o[c+16>>2];o[a+572>>2]=b;b=o[c+44>>2];o[a+592>>2]=o[c+40>>2];o[a+596>>2]=b;b=o[c+36>>2];o[a+584>>2]=o[c+32>>2];o[a+588>>2]=b;b=o[c+60>>2];o[a+608>>2]=o[c+56>>2];o[a+612>>2]=b;b=o[c+52>>2];o[a+600>>2]=o[c+48>>2];o[a+604>>2]=b;b=o[c+12>>2];o[a+624>>2]=o[c+8>>2];o[a+628>>2]=b;b=o[c+4>>2];o[a+616>>2]=o[c>>2];o[a+620>>2]=b;b=o[c+20>>2];o[a+632>>2]=o[c+16>>2];o[a+636>>2]=b;b=o[c+28>>2];o[a+640>>2]=o[c+24>>2];o[a+644>>2]=b;b=o[c+36>>2];o[a+648>>2]=o[c+32>>2];o[a+652>>2]=b;b=o[c+44>>2];o[a+656>>2]=o[c+40>>2];o[a+660>>2]=b;b=o[c+52>>2];o[a+664>>2]=o[c+48>>2];o[a+668>>2]=b;b=o[c+60>>2];o[a+672>>2]=o[c+56>>2];o[a+676>>2]=b;o[a+688>>2]=0;o[a+692>>2]=-1082130432;o[a+696>>2]=1063675494;o[a+700>>2]=1050253722;o[a+704>>2]=1065353216;o[a+708>>2]=0;o[a+712>>2]=0;m[a+716|0]=0;m[a+740|0]=d;o[a+748>>2]=0;o[a+736>>2]=16777216;b=o[a+28>>2];h=s[b+52>>2];i=s[b+8>>2];j=s[b+12>>2];k=s[b+56>>2];l=s[b+28>>2];n=s[b+20>>2];p=s[b+24>>2];q=s[b+60>>2];e=s[a+608>>2];r=s[b+44>>2];f=s[a+600>>2];t=s[b+36>>2];g=s[a+604>>2];u=s[b+40>>2];w=s[b+4>>2];s[a+732>>2]=d?v(-1):v(1);o[a+676>>2]=0;s[a+672>>2]=q+v(v(v(f*t)+v(g*u))+v(e*r));s[a+668>>2]=k+v(v(v(f*n)+v(g*p))+v(e*l));s[a+664>>2]=h+v(v(v(f*w)+v(g*i))+v(e*j))}function ZC(a){a=a|0;var b=0,c=0,d=0,e=0;b=M-48|0;M=b;a:{if(!p[a+1308|0]){break a}o[a+1056>>2]=0;o[a+992>>2]=0;o[a+928>>2]=0;o[a+712>>2]=0;o[a+716>>2]=0;o[a+720>>2]=0;o[a+724>>2]=0;Uc(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0);l[o[o[a>>2]+44>>2]](a);c=a+1292|0;e=o[c+4>>2];o[b+40>>2]=o[c>>2];o[b+44>>2]=e;d=o[a+1288>>2];o[b+32>>2]=o[a+1284>>2];o[b+36>>2]=d;d=o[c+4>>2];o[b+24>>2]=o[c>>2];o[b+28>>2]=d;c=o[a+1288>>2];o[b+16>>2]=o[a+1284>>2];o[b+20>>2]=c;if(!!(s[a+696>>2]>=s[a+680>>2])){c=p[a+1300|0];d=o[(c?a+1064|0:a+1128|0)>>2];e=o[(c?a+1080|0:a+1144|0)>>2];c=o[(c?a+1096|0:a+1160|0)>>2];o[b+12>>2]=0;o[b+8>>2]=c;o[b+4>>2]=e;o[b>>2]=d;Of(a,a+176|0,b,b+32|0,b+16|0)}if(!!(s[a+700>>2]>=s[a+684>>2])){c=p[a+1300|0];d=o[(c?a+1068|0:a+1132|0)>>2];e=o[(c?a+1084|0:a+1148|0)>>2];c=o[(c?a+1100|0:a+1164|0)>>2];o[b+12>>2]=0;o[b+8>>2]=c;o[b+4>>2]=e;o[b>>2]=d;Of(a,a+260|0,b,b+32|0,b+16|0)}if(!!(s[a+704>>2]>=s[a+688>>2])){c=p[a+1300|0];d=o[(c?a+1072|0:a+1136|0)>>2];e=o[(c?a+1088|0:a+1152|0)>>2];c=o[(c?a+1104|0:a+1168|0)>>2];o[b+12>>2]=0;o[b+8>>2]=c;o[b+4>>2]=e;o[b>>2]=d;Of(a,a+344|0,b,b+32|0,b+16|0)}if($b(a,0)){c=a+1216|0;d=o[c+4>>2];o[b+8>>2]=o[c>>2];o[b+12>>2]=d;c=o[a+1212>>2];o[b>>2]=o[a+1208>>2];o[b+4>>2]=c;Nf(a,a+428|0,b)}if($b(a,1)){c=a+1232|0;d=o[c+4>>2];o[b+8>>2]=o[c>>2];o[b+12>>2]=d;c=a+1224|0;d=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=d;Nf(a,a+512|0,b)}if(!$b(a,2)){break a}c=a+1248|0;d=o[c+4>>2];o[b+8>>2]=o[c>>2];o[b+12>>2]=d;c=a+1240|0;d=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=d;Nf(a,a+596|0,b)}M=b+48|0}function sA(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=v(0),j=0,k=v(0),n=v(0);f=M-112|0;M=f;if(o[a+716>>2]==o[a+712>>2]){rA(a);d=o[a+712>>2]<<1|1;if(o[a+716>>2]<(d|0)){o[7717]=o[7717]+1;g=l[o[6606]](u(d,104),16)|0;h=o[a+712>>2];if((h|0)>=1){while(1){j=u(e,104);ja(j+g|0,j+o[a+720>>2]|0,104);e=e+1|0;if((h|0)!=(e|0)){continue}break}}e=o[a+720>>2];if(e){if(p[a+724|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+720>>2]=0}o[a+720>>2]=g;o[a+716>>2]=d;m[a+724|0]=1}qA(a)}d=o[a+192>>2];i=v(l[o[o[d>>2]+48>>2]](d));$(f+8|0,0,100);d=o[a+712>>2];a:{if((d|0)!=o[a+716>>2]){break a}g=d?d<<1:1;if((d|0)>=(g|0)){break a}b:{if(!g){h=0;break b}o[7717]=o[7717]+1;h=l[o[6606]](u(g,104),16)|0;d=o[a+712>>2]}if((d|0)>=1){e=0;while(1){j=u(e,104);ja(j+h|0,j+o[a+720>>2]|0,104);e=e+1|0;if((e|0)!=(d|0)){continue}break}}d=o[a+720>>2];if(d){if(p[a+724|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+720>>2]=0}o[a+720>>2]=h;o[a+716>>2]=g;m[a+724|0]=1;d=o[a+712>>2]}d=o[a+720>>2]+u(d,104)|0;o[d>>2]=0;ja(d+4|0,f+8|0,100);d=o[a+712>>2];o[a+712>>2]=d+1;d=$(o[a+720>>2]+u(d,104)|0,0,104);e=o[b+12>>2];o[d+16>>2]=o[b+8>>2];o[d+20>>2]=e;e=o[b+4>>2];o[d+8>>2]=o[b>>2];o[d+12>>2]=e;e=o[b>>2];g=o[b+4>>2];h=o[b+12>>2];o[d+32>>2]=o[b+8>>2];o[d+36>>2]=h;o[d+24>>2]=e;o[d+28>>2]=g;s[d+88>>2]=c>v(0)?v(v(1)/c):v(0);o[d+4>>2]=o[o[a+880>>2]>>2];c=s[d+8>>2];k=s[d+12>>2];n=s[d+16>>2];o[f+36>>2]=0;s[f+32>>2]=i+n;s[f+28>>2]=i+k;o[f+20>>2]=0;s[f+24>>2]=i+c;s[f+16>>2]=n-i;s[f+12>>2]=k-i;s[f+8>>2]=c-i;o[d+96>>2]=bb(a+928|0,f+8|0,d);M=f+112|0}function ig(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=M-96|0;M=c;g=o[a+8>>2];if((g|0)>=1){while(1){f=o[o[a+16>>2]+(e<<2)>>2];if(o[f+236>>2]==1){l[o[o[f>>2]+24>>2]](f,b);g=o[a+8>>2]}e=e+1|0;if((e|0)<(g|0)){continue}break}}m[c+52|0]=1;o[c+48>>2]=0;m[c+72|0]=1;o[c+40>>2]=0;o[c+44>>2]=0;o[c+68>>2]=0;m[c+92|0]=1;o[c+60>>2]=0;o[c+64>>2]=0;o[c+88>>2]=0;o[c+80>>2]=0;o[c+84>>2]=0;o[c+28>>2]=0;m[c+32|0]=1;o[c+20>>2]=0;o[c+24>>2]=0;a:{if((g|0)<1){break a}e=0;while(1){f=o[o[o[a+16>>2]+(h<<2)>>2]+192>>2];o[c+12>>2]=f;i=d+ -1|0;d=f+(f<<15^-1)|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;d=i&(d>>16^d);b:{c:{if(d>>>0>=e>>>0){break c}e=o[o[c+28>>2]+(d<<2)>>2];if((e|0)==-1){break c}d=o[c+48>>2];i=o[c+88>>2];while(1){if((f|0)!=o[(e<<3)+i>>2]){e=o[d+(e<<2)>>2];if((e|0)!=-1){continue}break c}break}if(o[c+68>>2]){break b}}o[c>>2]=f;SJ(c+16|0,c,c+12|0);e=o[c+12>>2];l[o[o[e>>2]+60>>2]](e,b);g=o[a+8>>2]}h=h+1|0;if((h|0)<(g|0)){e=o[c+20>>2];d=o[c+64>>2];continue}break}a=o[c+88>>2];if(!a){break a}if(p[c+92|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+88>>2]=0}o[c+88>>2]=0;m[c+92|0]=1;o[c+80>>2]=0;o[c+84>>2]=0;a=o[c+68>>2];if(a){if(p[c+72|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+68>>2]=0}o[c+68>>2]=0;m[c+72|0]=1;o[c+60>>2]=0;o[c+64>>2]=0;a=o[c+48>>2];if(a){if(p[c+52|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+48>>2]=0}o[c+48>>2]=0;m[c+52|0]=1;o[c+40>>2]=0;o[c+44>>2]=0;a=o[c+28>>2];if(a){if(p[c+32|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[c+28>>2]=0}M=c+96|0}function an(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e);f=v(f);g=v(g);h=v(h);i=i|0;j=j|0;k=v(k);var n=0;n=M-304|0;M=n;o[n+300>>2]=a;o[n+296>>2]=b;o[n+292>>2]=c;o[n+288>>2]=d;s[n+284>>2]=e;s[n+280>>2]=f;s[n+276>>2]=g;s[n+272>>2]=h;o[n+268>>2]=i;m[n+267|0]=j;s[n+260>>2]=k;b=o[n+300>>2];o[n+256>>2]=o[n+288>>2];ad(n+240|0,o[n+292>>2],o[n+288>>2]);s[n+236>>2]=s[n+260>>2]*v(.01745329238474369);a=n;e=v(v(s[n+272>>2]-s[n+276>>2])/s[n+236>>2]);a:{if(v(w(e))<v(2147483648)){c=~~e;break a}c=-2147483648}o[a+232>>2]=c;if(!o[n+232>>2]){o[n+232>>2]=1}a=o[n+296>>2];c=n+168|0;ub(c,n+284|0,o[n+256>>2]);s[n+164>>2]=Aa(s[n+276>>2]);d=n+184|0;ta(d,c,n+164|0);c=n+200|0;ha(c,a,d);a=n+128|0;ub(a,n+280|0,n+240|0);s[n+124>>2]=za(s[n+276>>2]);d=n+144|0;ta(d,a,n+124|0);ha(n+216|0,c,d);if(m[n+267|0]&1){l[o[o[b>>2]+8>>2]](b,o[n+296>>2],n+216|0,o[n+268>>2])}o[n+120>>2]=1;while(1){if(o[n+120>>2]<=o[n+232>>2]){s[n+116>>2]=s[n+276>>2]+v(v(v(s[n+272>>2]-s[n+276>>2])*v(o[n+120>>2]))/v(o[n+232>>2]));a=o[n+296>>2];c=n+48|0;ub(c,n+284|0,o[n+256>>2]);s[n+44>>2]=Aa(s[n+116>>2]);d=n- -64|0;ta(d,c,n+44|0);c=n+80|0;ha(c,a,d);a=n+8|0;ub(a,n+280|0,n+240|0);s[n+4>>2]=za(s[n+116>>2]);d=n+24|0;ta(d,a,n+4|0);a=n+96|0;ha(a,c,d);c=n+216|0;l[o[o[b>>2]+8>>2]](b,c,a,o[n+268>>2]);d=o[a+4>>2];o[c>>2]=o[a>>2];o[c+4>>2]=d;d=o[a+12>>2];o[c+8>>2]=o[a+8>>2];o[c+12>>2]=d;o[n+120>>2]=o[n+120>>2]+1;continue}break}if(m[n+267|0]&1){l[o[o[b>>2]+8>>2]](b,o[n+296>>2],n+216|0,o[n+268>>2])}M=n+304|0}function TE(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;o[7306]=o[7306]+1;e=o[b+12>>2]>o[c+12>>2];h=e?b:c;f=o[h+12>>2];i=e?c:b;g=o[i+12>>2];b=f<<16|g;b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;j=o[a+12>>2]+ -1&(b>>16^b);b=o[o[a+44>>2]+(j<<2)>>2];a:{if((b|0)==-1){break a}e=o[a+16>>2];while(1){c=e+(b<<4)|0;if(!((f|0)==o[o[c+4>>2]+12>>2]?(g|0)==o[o[c>>2]+12>>2]:0)){b=o[o[a+64>>2]+(b<<2)>>2];if((b|0)!=-1){continue}break a}break}l[o[o[a>>2]+32>>2]](a,c,d);k=o[(e+(b<<4)|0)+12>>2];f=o[a+64>>2];b:{c:{g=o[a+44>>2]+(j<<2)|0;b=o[g>>2];e=c-o[a+16>>2]>>4;if((b|0)==(e|0)){b=o[f+(e<<2)>>2];break c}while(1){c=b;b=o[f+(b<<2)>>2];if((e|0)!=(b|0)){continue}break}b=o[f+(e<<2)>>2];if((c|0)==-1){break c}o[f+(c<<2)>>2]=b;break b}o[g>>2]=b}f=o[a+8>>2]+ -1|0;b=o[a+72>>2];if(b){l[o[o[b>>2]+12>>2]](b,i,h,d)|0}if((f|0)==(e|0)){o[a+8>>2]=o[a+8>>2]+ -1;return k|0}h=o[a+64>>2];d:{e:{i=o[a+16>>2];d=i+(f<<4)|0;b=o[o[d+4>>2]+12>>2]<<16|o[o[d>>2]+12>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;g=o[a+12>>2]+ -1&(b>>16^b);j=o[a+44>>2]+(g<<2)|0;b=o[j>>2];if((f|0)==(b|0)){b=o[h+(f<<2)>>2];break e}while(1){c=b;b=o[h+(b<<2)>>2];if((f|0)!=(b|0)){continue}break}b=o[h+(f<<2)>>2];if((c|0)==-1){break e}o[h+(c<<2)>>2]=b;break d}o[j>>2]=b}c=o[d+4>>2];b=i+(e<<4)|0;o[b>>2]=o[d>>2];o[b+4>>2]=c;c=o[d+12>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=c;b=o[a+44>>2]+(g<<2)|0;o[o[a+64>>2]+(e<<2)>>2]=o[b>>2];o[b>>2]=e;o[a+8>>2]=o[a+8>>2]+ -1}return k|0}function HK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=0,k=v(0),m=0,n=0;f=M-128|0;M=f;g=s[b>>2];h=s[b+16>>2];k=g<h?g:h;i=s[b+32>>2];a:{if((k<i?k:i)>s[a+28>>2]){break a}e=(g>h^1)<<4;if(s[(s[b+e>>2]>i?e:32)+b>>2]<s[a+12>>2]){break a}g=s[b+8>>2];e=b+24|0;h=s[e>>2];k=g<h?g:h;j=b+40|0;i=s[j>>2];if((k<i?k:i)>s[a+36>>2]){break a}e=g>h?b+8|0:e;if(s[(s[e>>2]>i?e:j)>>2]<s[a+20>>2]){break a}g=s[b+4>>2];e=b+20|0;h=s[e>>2];k=g<h?g:h;j=b+36|0;i=s[j>>2];if((k<i?k:i)>s[a+32>>2]){break a}e=g>h?b+4|0:e;if(o[o[o[a+4>>2]+4>>2]+4>>2]>19|s[(s[e>>2]>i?e:j)>>2]<s[a+16>>2]){break a}j=o[a+48>>2];n=de(f+24|0);o[f+28>>2]=1;o[f+24>>2]=6500;e=o[b+12>>2];o[f+88>>2]=o[b+8>>2];o[f+92>>2]=e;e=o[b+4>>2];o[f+80>>2]=o[b>>2];o[f+84>>2]=e;e=o[b+28>>2];o[f+104>>2]=o[b+24>>2];o[f+108>>2]=e;e=o[b+20>>2];o[f+96>>2]=o[b+16>>2];o[f+100>>2]=e;e=o[b+44>>2];o[f+120>>2]=o[b+40>>2];o[f+124>>2]=e;e=o[b+36>>2];o[f+112>>2]=o[b+32>>2];o[f+116>>2]=e;o[f+68>>2]=o[a+56>>2];b=o[a+8>>2];e=o[b+12>>2];o[f+8>>2]=o[b+8>>2];o[f+12>>2]=e;o[f+20>>2]=d;o[f+16>>2]=c;o[f>>2]=b;o[f+4>>2]=f+24;e=l[o[o[j>>2]+8>>2]](j,o[a+4>>2],f,o[a+64>>2])|0;b=o[a+44>>2];m=o[b+8>>2];b:{if(o[m+8>>2]==o[o[a+8>>2]+8>>2]){o[b+8>>2]=f;l[o[o[b>>2]+8>>2]](b,c,d);break b}m=o[b+12>>2];o[b+12>>2]=f;l[o[o[b>>2]+12>>2]](b,c,d)}l[o[o[e>>2]+8>>2]](e,o[a+4>>2],f,o[a+52>>2],o[a+44>>2]);b=o[a+44>>2];o[(o[o[b+8>>2]+8>>2]==o[o[a+8>>2]+8>>2]?8:12)+b>>2]=m;l[o[o[e>>2]>>2]](e)|0;l[o[o[j>>2]+60>>2]](j,e);Hb(n)}M=f+128|0}function bj(a,b){var c=v(0),d=0,e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),n=v(0),p=v(0),q=v(0),r=v(0);e=M-48|0;M=e;Rc(a,b,0);c=s[b+204>>2];o[b+28>>2]=0;c=v(c+s[b+212>>2]);s[b+24>>2]=v(c*s[b+60>>2])+s[b+44>>2];s[b+20>>2]=v(c*s[b+56>>2])+s[b+40>>2];s[b+16>>2]=v(s[b+52>>2]*c)+s[b+36>>2];o[e+40>>2]=-1082130432;d=o[a+100>>2];d=l[o[o[d>>2]+8>>2]](d,b+36|0,b+16|0,e+8|0)|0;o[b+88>>2]=0;a:{if(d){g=s[e+40>>2];d=o[e+28>>2];o[b>>2]=o[e+24>>2];o[b+4>>2]=d;d=o[e+36>>2];o[b+8>>2]=o[e+32>>2];o[b+12>>2]=d;m[b+84|0]=1;uB();o[b+88>>2]=29876;g=v(c*g);s[b+32>>2]=g-s[b+212>>2];c=s[b+32>>2];f=v(s[b+204>>2]-v(s[b+208>>2]*v(.009999999776482582)));d=c<f;c=d?f:c;f=v(s[b+204>>2]+v(s[b+208>>2]*v(.009999999776482582)));if(!(c>f^1?!d:0)){s[b+32>>2]=c>f?f:c}d=o[e+12>>2];o[b+16>>2]=o[e+8>>2];o[b+20>>2]=d;d=o[e+20>>2];o[b+24>>2]=o[e+16>>2];o[b+28>>2]=d;f=s[b>>2];h=s[b+4>>2];k=s[b+8>>2];c=v(v(v(f*s[b+52>>2])+v(h*s[b+56>>2]))+v(k*s[b+60>>2]));if(!!(c>=v(-.10000000149011612))){o[b+272>>2]=0;c=v(10);break a}c=v(v(-1)/c);j=f;a=o[a+116>>2];f=s[a+332>>2];i=v(s[b+24>>2]-s[a+60>>2]);n=v(s[b+20>>2]-s[a+56>>2]);p=s[a+336>>2];q=v(j*v(v(v(f*i)-v(n*p))+s[a+312>>2]));j=h;h=v(s[b+16>>2]-s[a+52>>2]);r=i;i=s[a+328>>2];s[b+272>>2]=c*v(v(q+v(j*v(v(v(h*p)-v(r*i))+s[a+316>>2])))+v(k*v(v(v(n*i)-v(h*f))+s[a+320>>2])));break a}c=s[b+204>>2];o[b+272>>2]=0;s[b+32>>2]=c;o[b+12>>2]=0;s[b+8>>2]=-s[b+60>>2];s[b+4>>2]=-s[b+56>>2];s[b>>2]=-s[b+52>>2];g=v(-1);c=v(1)}s[b+268>>2]=c;M=e+48|0;return g}function bE(a,b,c){a=a|0;b=b|0;c=c|0;ye(a,b,c);o[b+256>>2]=o[a+264>>2];o[b+260>>2]=o[a+268>>2];o[b+264>>2]=o[a+272>>2];o[b+268>>2]=o[a+276>>2];o[b+272>>2]=o[a+280>>2];o[b+276>>2]=o[a+284>>2];o[b+280>>2]=o[a+288>>2];o[b+284>>2]=o[a+292>>2];o[b+288>>2]=o[a+296>>2];o[b+292>>2]=o[a+300>>2];o[b+296>>2]=o[a+304>>2];o[b+300>>2]=o[a+308>>2];o[b+304>>2]=o[a+312>>2];o[b+308>>2]=o[a+316>>2];o[b+312>>2]=o[a+320>>2];o[b+316>>2]=o[a+324>>2];o[b+320>>2]=o[a+328>>2];o[b+324>>2]=o[a+332>>2];o[b+328>>2]=o[a+336>>2];o[b+332>>2]=o[a+340>>2];o[b+448>>2]=o[a+344>>2];o[b+336>>2]=o[a+544>>2];o[b+340>>2]=o[a+548>>2];o[b+344>>2]=o[a+552>>2];o[b+348>>2]=o[a+556>>2];o[b+352>>2]=o[a+348>>2];o[b+356>>2]=o[a+352>>2];o[b+360>>2]=o[a+356>>2];o[b+364>>2]=o[a+360>>2];o[b+368>>2]=o[a+364>>2];o[b+372>>2]=o[a+368>>2];o[b+376>>2]=o[a+372>>2];o[b+380>>2]=o[a+376>>2];o[b+384>>2]=o[a+380>>2];o[b+388>>2]=o[a+384>>2];o[b+392>>2]=o[a+388>>2];o[b+396>>2]=o[a+392>>2];o[b+400>>2]=o[a+396>>2];o[b+404>>2]=o[a+400>>2];o[b+408>>2]=o[a+404>>2];o[b+412>>2]=o[a+408>>2];o[b+416>>2]=o[a+412>>2];o[b+420>>2]=o[a+416>>2];o[b+424>>2]=o[a+420>>2];o[b+428>>2]=o[a+424>>2];o[b+432>>2]=o[a+428>>2];o[b+436>>2]=o[a+432>>2];o[b+440>>2]=o[a+436>>2];o[b+444>>2]=o[a+440>>2];o[b+452>>2]=o[a+444>>2];o[b+456>>2]=o[a+448>>2];o[b+484>>2]=p[a+452|0];o[b+460>>2]=o[a+456>>2];o[b+464>>2]=o[a+460>>2];o[b+468>>2]=o[a+464>>2];o[b+472>>2]=o[a+468>>2];o[b+476>>2]=o[a+472>>2];o[b+480>>2]=o[a+476>>2];return 17820}function fc(a,b,c,d,e){var f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=0,t=v(0);f=o[a+9288>>2];if(f){g=o[f+48>>2];if(g){o[g+44>>2]=o[f+44>>2]}g=o[f+44>>2];if(g){o[g+48>>2]=o[f+48>>2]}if(o[a+9288>>2]==(f|0)){o[a+9288>>2]=o[f+48>>2]}g=a+9292|0;o[g>>2]=o[g>>2]+ -1;o[f+44>>2]=0;o[f+48>>2]=o[a+9280>>2];g=o[a+9280>>2];if(g){o[g+44>>2]=f}o[a+9280>>2]=f;g=a+9284|0;o[g>>2]=o[g>>2]+1;o[f+28>>2]=d;o[f+24>>2]=c;o[f+20>>2]=b;m[f+55|0]=0;k=s[c+24>>2];t=s[d+24>>2];h=s[b+24>>2];l=s[d+20>>2];j=s[b+20>>2];n=s[c+20>>2];p=s[c+16>>2];q=s[d+16>>2];i=s[b+16>>2];o[f+12>>2]=0;p=v(p-i);l=v(l-j);n=v(n-j);i=v(q-i);j=v(v(p*l)-v(n*i));s[f+8>>2]=j;k=v(k-h);q=v(k*i);i=v(t-h);h=v(q-v(p*i));s[f+4>>2]=h;i=v(v(n*i)-v(k*l));s[f>>2]=i;r=2;a:{h=v(C(v(v(v(i*i)+v(h*h))+v(j*j))));if(!(h>v(9999999747378752e-20))){break a}g=f+16|0;b:{if(yg(f,b,c,g)){break b}if(yg(f,c,d,g)){break b}if(yg(f,d,b,g)){break b}s[f+16>>2]=v(v(v(s[b+16>>2]*s[f>>2])+v(s[b+20>>2]*s[f+4>>2]))+v(s[b+24>>2]*s[f+8>>2]))/h}h=v(v(1)/h);s[f>>2]=h*s[f>>2];s[f+4>>2]=h*s[f+4>>2];s[f+8>>2]=h*s[f+8>>2];if(e){return f}r=3;if(!(s[g>>2]>=v(-9999999747378752e-21))){break a}return f}o[a>>2]=r;b=o[f+48>>2];if(b){o[b+44>>2]=o[f+44>>2]}b=o[f+44>>2];if(b){o[b+48>>2]=o[f+48>>2]}if(o[a+9280>>2]==(f|0)){o[a+9280>>2]=o[f+48>>2]}o[a+9284>>2]=o[a+9284>>2]+ -1;o[f+44>>2]=0;o[f+48>>2]=o[a+9288>>2];b=o[a+9288>>2];if(b){o[b+44>>2]=f}o[a+9288>>2]=f;o[a+9292>>2]=o[a+9292>>2]+1;return 0}o[a>>2]=5;return 0}function vB(a,b,c,d,e,f){var g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0);g=s[e>>2];h=s[e+4>>2];i=s[e+8>>2];if(v(v(v(g*g)+v(h*h))+v(i*i))>v(1.100000023841858)){g=v(0)}else{l=v(s[b+4>>2]-s[a+56>>2]);j=v(s[b+8>>2]-s[a+60>>2]);r=v(v(i*l)-v(h*j));m=v(s[b>>2]-s[a+52>>2]);t=v(v(g*j)-v(i*m));u=v(v(h*m)-v(g*l));z=v(v(v(r*s[a+4>>2])+v(t*s[a+20>>2]))+v(u*s[a+36>>2]));n=v(s[d+8>>2]-s[c+60>>2]);o=v(s[d+4>>2]-s[c+56>>2]);w=v(v(h*n)-v(i*o));p=v(s[d>>2]-s[c+52>>2]);x=v(v(i*p)-v(g*n));y=v(v(g*o)-v(h*p));A=v(v(v(w*s[c+4>>2])+v(x*s[c+20>>2]))+v(y*s[c+36>>2]));k=g;g=s[a+332>>2];q=s[a+336>>2];B=s[c+332>>2];C=s[c+336>>2];D=v(k*v(v(v(v(j*g)-v(l*q))+s[a+312>>2])-v(v(v(n*B)-v(o*C))+s[c+312>>2])));k=h;h=s[a+328>>2];q=v(s[a+316>>2]+v(v(m*q)-v(j*h)));j=s[c+328>>2];h=v(v(v(D+v(k*v(q-v(s[c+316>>2]+v(v(p*C)-v(n*j))))))+v(i*v(v(v(v(l*h)-v(m*g))+s[a+320>>2])-v(v(v(o*j)-v(p*B))+s[c+320>>2]))))*v(-.20000000298023224));g=v(v(v(r*s[a+8>>2])+v(t*s[a+24>>2]))+v(u*s[a+40>>2]));k=v(v(z*v(z*s[a+396>>2]))+v(g*v(g*s[a+400>>2])));g=v(v(v(r*s[a+12>>2])+v(t*s[a+28>>2]))+v(u*s[a+44>>2]));k=v(s[c+344>>2]+v(s[a+344>>2]+v(k+v(g*v(g*s[a+404>>2])))));g=v(v(v(w*s[c+8>>2])+v(x*s[c+24>>2]))+v(y*s[c+40>>2]));i=v(v(A*v(A*s[c+396>>2]))+v(g*v(g*s[c+400>>2])));g=v(v(v(w*s[c+12>>2])+v(x*s[c+28>>2]))+v(y*s[c+44>>2]));g=v(h*v(v(1)/v(k+v(i+v(g*v(g*s[c+404>>2]))))))}s[f>>2]=g}function tl(a,b){var c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0;c=M+ -64|0;M=c;k=o[b+192>>2];l[o[o[k>>2]+8>>2]](k,b+4|0,c+48|0,c+32|0);d=s[6601];f=v(s[c+48>>2]-d);s[c+48>>2]=f;g=v(s[c+52>>2]-d);s[c+52>>2]=g;h=v(s[c+56>>2]-d);s[c+56>>2]=h;e=v(d+s[c+32>>2]);s[c+32>>2]=e;i=v(d+s[c+36>>2]);s[c+36>>2]=i;j=v(d+s[c+40>>2]);s[c+40>>2]=j;a:{if(p[b+204|0]&3|(!p[a+44|0]|o[b+236>>2]!=2)){break a}k=o[b+192>>2];l[o[o[k>>2]+8>>2]](k,b+68|0,c+16|0,c);g=v(s[c+16>>2]-d);s[c+16>>2]=g;h=v(s[c+20>>2]-d);s[c+20>>2]=h;e=v(s[c+24>>2]-d);s[c+24>>2]=e;i=v(d+s[c>>2]);s[c>>2]=i;j=v(d+s[c+4>>2]);s[c+4>>2]=j;d=v(d+s[c+8>>2]);s[c+8>>2]=d;f=s[c+48>>2];if(!!(g<f)){s[c+48>>2]=g;f=g}g=s[c+52>>2];if(!!(h<g)){s[c+52>>2]=h;g=h}h=s[c+56>>2];if(!!(e<h)){s[c+56>>2]=e;h=e}e=s[c+28>>2];if(!!(e<s[c+60>>2])){s[c+60>>2]=e}e=s[c+32>>2];if(!!(e<i)){s[c+32>>2]=i;e=i}i=s[c+36>>2];if(!!(i<j)){s[c+36>>2]=j;i=j}j=s[c+40>>2];if(!!(j<d)){s[c+40>>2]=d;j=d}d=s[c+12>>2];if(!(s[c+44>>2]<d)){break a}s[c+44>>2]=d}k=o[a+68>>2];b:{c:{if(!(m[b+204|0]&1)){f=v(e-f);e=v(f*f);f=v(i-g);e=v(e+v(f*f));f=v(j-h);if(!(v(e+v(f*f))<v(999999995904))){break c}}l[o[o[k>>2]+16>>2]](k,o[b+188>>2],c+48|0,c+32|0,o[a+24>>2]);break b}if((o[b+216>>2]&-2)!=4){o[b+216>>2]=5}if(p[27960]){break b}b=o[a+72>>2];if(!b){break b}m[27960]=1;l[o[o[b>>2]+36>>2]](b,7508);b=o[a+72>>2];l[o[o[b>>2]+36>>2]](b,7557);b=o[a+72>>2];l[o[o[b>>2]+36>>2]](b,7625);a=o[a+72>>2];l[o[o[a>>2]+36>>2]](a,7690)}M=c- -64|0}function wE(a,b,c){var d=0,e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=0,y=v(0),z=v(0),A=0,B=v(0);x=c-b|0;a:{b:{c:{if((c|0)<=(b|0)){k=v(x|0);break c}A=p[a+60|0];d=b;while(1){d:{if(A){f=o[a+116>>2]+(d<<4)|0;i=s[a+44>>2];j=s[a+12>>2];e=v(v(v(q[f+4>>1])/i)+j);k=s[a+40>>2];m=s[a+8>>2];l=v(v(v(q[f+2>>1])/k)+m);u=s[a+36>>2];w=s[a+4>>2];r=v(v(v(q[f>>1])/u)+w);i=v(v(v(q[f+10>>1])/i)+j);j=v(v(v(q[f+8>>1])/k)+m);k=v(v(v(q[f+6>>1])/u)+w);break d}f=o[a+76>>2]+(d<<6)|0;e=s[f+8>>2];l=s[f+4>>2];r=s[f>>2];i=s[f+24>>2];j=s[f+20>>2];k=s[f+16>>2]}g=v(g+v(v(i+e)*v(.5)));h=v(h+v(v(j+l)*v(.5)));t=v(t+v(v(k+r)*v(.5)));d=d+1|0;if((d|0)!=(c|0)){continue}break}k=v(x|0);e=v(0);if((c|0)>(b|0)){break b}}g=v(0);h=v(0);break a}e=v(v(1)/k);u=v(e*g);w=v(e*h);B=v(e*t);h=v(0);f=p[a+60|0];g=v(0);e=v(0);while(1){e:{if(f){d=o[a+116>>2]+(b<<4)|0;i=s[a+44>>2];j=s[a+12>>2];t=v(v(v(q[d+4>>1])/i)+j);m=s[a+40>>2];n=s[a+8>>2];l=v(v(v(q[d+2>>1])/m)+n);y=s[a+36>>2];z=s[a+4>>2];r=v(v(v(q[d>>1])/y)+z);i=v(v(v(q[d+10>>1])/i)+j);j=v(v(v(q[d+8>>1])/m)+n);m=v(v(v(q[d+6>>1])/y)+z);break e}d=o[a+76>>2]+(b<<6)|0;t=s[d+8>>2];l=s[d+4>>2];r=s[d>>2];i=s[d+24>>2];j=s[d+20>>2];m=s[d+16>>2]}n=h;h=v(v(v(i+t)*v(.5))-u);h=v(n+v(h*h));n=g;g=v(v(v(j+l)*v(.5))-w);g=v(n+v(g*g));n=e;e=v(v(v(m+r)*v(.5))-B);e=v(n+v(e*e));b=b+1|0;if((c|0)!=(b|0)){continue}break}}l=v(v(1)/v(k+v(-1)));g=v(l*g);h=v(l*h);e=v(l*e);return e<g?g<h?2:1:(e<h)<<1}function BH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=v(0),k=v(0),m=v(0),n=v(0),r=0,w=0,x=0,y=0;e=M-32|0;M=e;g=o[a+4>>2];l[o[o[g>>2]+16>>2]](g,e+28|0,e+24|0,e+20|0,e+16|0,e+12|0,e+8|0,e+4|0,e,b);i=o[e+12>>2]+u(o[e+8>>2],c)|0;r=o[e+20>>2];f=o[a+4>>2];g=f+12|0;h=o[e+28>>2];d=h;a:{b:{c:{d:{w=o[e>>2];switch(w+ -2|0){case 0:break c;case 1:break d;default:break b}}x=q[i+4>>1];break a}x=o[i+8>>2];break a}x=p[i+2|0]}y=o[e+16>>2];d=d+u(x,y)|0;e:{if(!r){j=v(s[d+4>>2]*s[f+8>>2]);k=v(s[d>>2]*s[f+4>>2]);m=s[f+12>>2];d=d+8|0;break e}j=v(s[f+8>>2]*v(t[d+8>>3]));k=v(s[f+4>>2]*v(t[d>>3]));m=v(t[d+16>>3]);d=g}n=s[d>>2];o[a+56>>2]=0;s[a+48>>2]=j;s[a+44>>2]=k;s[a+52>>2]=n*m;f:{g:{switch(w+ -2|0){case 0:d=o[i+4>>2];break f;case 1:d=q[i+2>>1];break f;default:break g}}d=p[i+1|0]}d=u(d,y)+h|0;h:{if(r){j=v(s[f+8>>2]*v(t[d+8>>3]));k=v(s[f+4>>2]*v(t[d>>3]));m=v(t[d+16>>3]);d=g;break h}j=v(s[d+4>>2]*s[f+8>>2]);k=v(s[d>>2]*s[f+4>>2]);m=s[f+12>>2];d=d+8|0}n=s[d>>2];o[a+40>>2]=0;s[a+32>>2]=j;s[a+28>>2]=k;s[a+36>>2]=n*m;i:{j:{switch(w+ -2|0){case 0:d=o[i>>2];break i;case 1:d=q[i>>1];break i;default:break j}}d=p[i|0]}h=u(d,y)+h|0;k:{if(r){m=v(t[h+16>>3]);j=v(s[f+8>>2]*v(t[h+8>>3]));k=v(s[f+4>>2]*v(t[h>>3]));break k}g=h+8|0;m=s[f+12>>2];j=v(s[h+4>>2]*s[f+8>>2]);k=v(s[h>>2]*s[f+4>>2])}n=s[g>>2];o[a+24>>2]=0;s[a+16>>2]=j;s[a+12>>2]=k;s[a+20>>2]=n*m;g=o[a+8>>2];l[o[o[g>>2]+8>>2]](g,a+12|0,b,c);a=o[a+4>>2];l[o[o[a>>2]+24>>2]](a,b);M=e+32|0}function oK(a,b,c,d,e){var f=0,g=v(0),h=v(0),i=0,j=0,k=v(0),l=v(0),m=0,n=v(0),p=v(0),q=v(0),r=0,t=v(0),u=v(0);j=M+ -64|0;M=j;a:{b:{c:{switch(a+ -1|0){default:if((a|0)>=2){r=a+ -1|0;while(1){m=f<<3;i=m+b|0;l=s[i>>2];n=s[i+12>>2];p=s[i+8>>2];q=s[(m|4)+b>>2];k=v(v(l*n)-v(p*q));g=v(g+k);h=v(h+v(v(n+q)*k));t=v(t+v(v(l+p)*k));f=f+1|0;if((r|0)!=(f|0)){continue}break}}k=v(0xde0b6b000000000);u=g;f=(a<<3)+b|0;l=s[f+ -8>>2];n=s[b+4>>2];p=s[b>>2];q=s[f+ -4>>2];g=v(v(l*n)-v(p*q));u=v(u+g);if(!!(v(w(u))>v(1.1920928955078125e-7))){k=v(v(1)/v(u*v(3)))}r=0;if((a|0)<=0){break a}h=v(v(h+v(v(n+q)*g))*k);g=v(v(t+v(v(l+p)*g))*k);break b;case 0:h=s[b+4>>2];g=s[b>>2];break b;case 1:break c}}h=v(v(s[b+4>>2]+s[b+12>>2])*v(.5));g=v(v(s[b>>2]+s[b+8>>2])*v(.5))}f=0;while(1){i=f<<3;s[(j+32|0)+(f<<2)>>2]=_a(v(s[(i|4)+b>>2]-h),v(s[b+i>>2]-g));f=f+1|0;if((f|0)!=(a|0)){continue}break}f=0;while(1){r=1;o[(f<<2)+j>>2]=1;f=f+1|0;if((f|0)!=(a|0)){continue}break}}b=d<<2;o[b+j>>2]=0;o[e>>2]=d;if((c|0)>=2){k=v(v(6.2831854820251465)/v(c|0));t=s[b+(j+32|0)>>2];i=1;while(1){o[e+4>>2]=d;e=e+4|0;b=d;if(r){g=v(v(k*v(i|0))+t);l=g>v(3.1415927410125732)?v(g+v(-6.2831854820251465)):g;f=0;g=v(1e9);while(1){m=f<<2;d:{if(!o[m+j>>2]){break d}h=v(w(v(s[m+(j+32|0)>>2]-l)));h=h>v(3.1415927410125732)?v(v(6.2831854820251465)-h):h;if(!(h<g)){break d}o[e>>2]=f;b=f;g=h}f=f+1|0;if((f|0)!=(a|0)){continue}break}}o[(b<<2)+j>>2]=0;i=i+1|0;if((i|0)!=(c|0)){continue}break}}M=j- -64|0}function sE(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0);e=s[b>>2];g=s[b+4>>2];h=s[b+8>>2];o[a+16>>2]=0;f=v(h-v(1));s[a+12>>2]=f;g=v(g-v(1));s[a+8>>2]=g;e=v(e-v(1));s[a+4>>2]=e;h=s[c>>2];i=s[c+4>>2];j=s[c+8>>2];m[a+60|0]=1;o[a+48>>2]=0;o[a+32>>2]=0;j=v(j+v(1));s[a+28>>2]=j;i=v(i+v(1));s[a+24>>2]=i;h=v(h+v(1));s[a+20>>2]=h;n=v(v(65533)/v(j-f));s[a+44>>2]=n;k=v(v(65533)/v(i-g));s[a+40>>2]=k;p=v(v(65533)/v(h-e));s[a+36>>2]=p;d=v(v(f-f)*n);a:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break a}b=0}q=v((b&65534)>>>0);d=g;l=d;d=v(v(d-d)*k);b:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break b}b=0}r=v(l+v(v((b&65534)>>>0)/k));d=e;l=d;d=v(v(d-d)*p);c:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break c}b=0}d=v(v(l+v(v((b&65534)>>>0)/p))-v(1));if(!!(d<e)){s[a+4>>2]=d;e=d}d=v(r-v(1));if(!!(d<g)){s[a+8>>2]=d;g=d}d=v(v(f+v(q/n))-v(1));if(!!(d<f)){s[a+12>>2]=d;f=d}d=v(v(n*v(j-f))+v(1));d:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break d}b=0}q=v((b|1)>>>0);d=g;l=d;d=v(v(k*v(i-d))+v(1));e:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break e}b=0}r=v(l+v(v((b|1)>>>0)/k));d=h;l=d;k=e;d=v(v(p*v(d-e))+v(1));f:{if(d<v(4294967296)&d>=v(0)){b=~~d>>>0;break f}b=0}d=v(v(k+v(v((b|1)>>>0)/p))+v(1));if(!!(l<d)){s[a+20>>2]=d;h=d}d=v(r+v(1));if(!!(i<d)){s[a+24>>2]=d;i=d}d=v(v(f+v(q/n))+v(1));if(!!(j<d)){s[a+28>>2]=d;j=d}o[a+48>>2]=0;s[a+44>>2]=v(65533)/v(j-f);s[a+40>>2]=v(65533)/v(i-g);s[a+36>>2]=v(65533)/v(h-e)}function uD(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;ia(18296);b=o[a+204>>2];l[o[o[b>>2]+8>>2]](b,a,o[a+24>>2]);h=o[a+308>>2];if((h|0)>=1){i=o[a+316>>2];while(1){b=o[i+(g<<2)>>2];c=o[b+740>>2];a:{if(!c){break a}b=o[b+744>>2];if(!b|o[c+204>>2]&3|p[b+204|0]&3){break a}b=o[b+208>>2];d=o[o[a+204>>2]+16>>2];e=o[c+208>>2];f=d+(e<<3)|0;c=o[f>>2];if((c|0)!=(e|0)){while(1){c=d+(c<<3)|0;o[f>>2]=o[c>>2];e=o[c>>2];f=d+(e<<3)|0;c=o[f>>2];if((c|0)!=(e|0)){continue}break}}f=d+(b<<3)|0;c=o[f>>2];if((c|0)!=(b|0)){while(1){b=d+(c<<3)|0;o[f>>2]=o[b>>2];b=o[b>>2];f=d+(b<<3)|0;c=o[f>>2];if((b|0)!=(c|0)){continue}break}}if((b|0)==(e|0)){break a}c=d+(e<<3)|0;o[c>>2]=b;b=d+(b<<3)|0;o[b+4>>2]=o[b+4>>2]+o[c+4>>2]}g=g+1|0;if((h|0)!=(g|0)){continue}break}}h=o[a+212>>2];if((h|0)>=1){i=o[a+220>>2];f=0;while(1){b=o[i+(f<<2)>>2];b:{if(!p[b+20|0]){break b}c=o[b+28>>2];if(p[c+204|0]&3){break b}b=o[b+32>>2];if(p[b+204|0]&3){break b}b=o[b+208>>2];d=o[o[a+204>>2]+16>>2];e=o[c+208>>2];c=d+(e<<3)|0;g=o[c>>2];if((g|0)!=(e|0)){while(1){e=c;c=d+(g<<3)|0;o[e>>2]=o[c>>2];e=o[c>>2];c=d+(e<<3)|0;g=o[c>>2];if((g|0)!=(e|0)){continue}break}}c=d+(b<<3)|0;g=o[c>>2];if((g|0)!=(b|0)){while(1){b=d+(g<<3)|0;o[c>>2]=o[b>>2];b=o[b>>2];c=d+(b<<3)|0;g=o[c>>2];if((b|0)!=(g|0)){continue}break}}if((b|0)==(e|0)){break b}c=d+(e<<3)|0;o[c>>2]=b;b=d+(b<<3)|0;o[b+4>>2]=o[b+4>>2]+o[c+4>>2]}f=f+1|0;if((h|0)!=(f|0)){continue}break}}b=o[a+204>>2];l[o[o[b>>2]+12>>2]](b,a);ga()}function Nj(a,b,c,d){var e=0;bK(a,b,c);c=a;o[c+100>>2]=1050253722;o[c+104>>2]=1015580809;o[c+92>>2]=1058642330;o[c+96>>2]=1065353216;o[c+88>>2]=0;o[c+80>>2]=0;o[c+84>>2]=0;o[c+124>>2]=1045220557;o[c+128>>2]=1061997773;o[c+108>>2]=0;o[c+112>>2]=10;o[c+168>>2]=1120403456;o[c+172>>2]=1900671690;o[c+164>>2]=128;o[c+156>>2]=260;o[c+160>>2]=2;o[c+148>>2]=0;o[c+152>>2]=1062836634;o[c+140>>2]=-1121724662;o[c+144>>2]=1036831949;o[c+132>>2]=0;o[c+136>>2]=1;o[c+116>>2]=1101004800;o[c+120>>2]=1065353216;m[c+192|0]=1;o[c>>2]=17980;o[c+188>>2]=0;o[c+180>>2]=0;o[c+184>>2]=0;m[c+224|0]=1;o[c+200>>2]=d;o[c+196>>2]=0;o[c+212>>2]=0;o[c+216>>2]=0;o[c+220>>2]=0;m[c+244|0]=1;n[c+274>>1]=0;o[c+240>>2]=0;o[c+232>>2]=0;o[c+236>>2]=0;o[c+248>>2]=0;o[c+252>>2]=-1054867456;o[c+256>>2]=0;o[c+260>>2]=0;o[c+264>>2]=0;o[c+268>>2]=0;m[c+292|0]=1;o[c+296>>2]=0;o[c+288>>2]=0;o[c+280>>2]=0;o[c+284>>2]=0;m[c+320|0]=1;m[c+300|0]=1;o[c+316>>2]=0;o[c+308>>2]=0;o[c+312>>2]=0;e=c;if(d){c=0}else{o[7717]=o[7717]+1;c=l[o[6606]](196,16)|0;ij(c);o[a+200>>2]=c;c=1}m[e+273|0]=c;o[7717]=o[7717]+1;c=l[o[6606]](68,16)|0;XD(c);m[a+272|0]=1;o[a+204>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](88,16)|0;d=o[a+200>>2];m[c+44|0]=1;o[c+24>>2]=b;o[c+20>>2]=0;o[c+12>>2]=0;o[c+16>>2]=0;o[c+8>>2]=d;o[c+4>>2]=0;o[c>>2]=18620;o[c+40>>2]=0;m[c+64|0]=1;o[c+32>>2]=0;o[c+36>>2]=0;o[c+60>>2]=0;m[c+84|0]=1;o[c+52>>2]=0;o[c+56>>2]=0;o[c+80>>2]=0;o[c+72>>2]=0;o[c+76>>2]=0;o[a+196>>2]=c}function Sf(a,b){var c=0,d=0;a:{if(p[a+204|0]&2){c=o[a+8>>2];o[a+68>>2]=o[a+4>>2];o[a+72>>2]=c;c=o[a+16>>2];o[a+76>>2]=o[a+12>>2];o[a+80>>2]=c;c=o[a+24>>2];o[a+84>>2]=o[a+20>>2];o[a+88>>2]=c;c=o[a+32>>2];o[a+92>>2]=o[a+28>>2];o[a+96>>2]=c;c=o[a+40>>2];o[a+100>>2]=o[a+36>>2];o[a+104>>2]=c;c=o[a+48>>2];o[a+108>>2]=o[a+44>>2];o[a+112>>2]=c;c=o[a+56>>2];o[a+116>>2]=o[a+52>>2];o[a+120>>2]=c;c=o[a+64>>2];o[a+124>>2]=o[a+60>>2];o[a+128>>2]=c;break a}c=b;d=o[c+4>>2];o[a+68>>2]=o[c>>2];o[a+72>>2]=d;d=o[c+12>>2];o[a+76>>2]=o[c+8>>2];o[a+80>>2]=d;d=o[c+28>>2];o[a+92>>2]=o[c+24>>2];o[a+96>>2]=d;d=o[c+20>>2];o[a+84>>2]=o[c+16>>2];o[a+88>>2]=d;d=o[c+36>>2];o[a+100>>2]=o[c+32>>2];o[a+104>>2]=d;d=o[c+44>>2];o[a+108>>2]=o[c+40>>2];o[a+112>>2]=d;d=o[c+60>>2];o[a+124>>2]=o[c+56>>2];o[a+128>>2]=d;d=o[c+52>>2];o[a+116>>2]=o[c+48>>2];o[a+120>>2]=d}c=o[a+332>>2];o[a+148>>2]=o[a+328>>2];o[a+152>>2]=c;c=o[a+316>>2];o[a+132>>2]=o[a+312>>2];o[a+136>>2]=c;c=o[a+340>>2];o[a+156>>2]=o[a+336>>2];o[a+160>>2]=c;c=o[a+324>>2];o[a+140>>2]=o[a+320>>2];o[a+144>>2]=c;c=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=c;c=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=c;c=o[b+28>>2];o[a+28>>2]=o[b+24>>2];o[a+32>>2]=c;c=o[b+20>>2];o[a+20>>2]=o[b+16>>2];o[a+24>>2]=c;c=o[b+44>>2];o[a+44>>2]=o[b+40>>2];o[a+48>>2]=c;c=o[b+36>>2];o[a+36>>2]=o[b+32>>2];o[a+40>>2]=c;c=o[b+60>>2];o[a+60>>2]=o[b+56>>2];o[a+64>>2]=c;c=o[b+52>>2];o[a+52>>2]=o[b+48>>2];o[a+56>>2]=c;Uf(a)}function uE(a,b,c,d){var e=v(0),f=v(0),g=0,h=v(0),i=0,j=v(0),k=v(0),l=0,m=0,r=0,t=0,u=0,w=0;a:{if(p[a+60|0]){k=s[a+12>>2];f=s[a+44>>2];e=v(v(s[c+8>>2]-k)*f);b:{if(e<v(4294967296)&e>=v(0)){l=~~e>>>0;break b}l=0}h=s[a+8>>2];e=s[a+40>>2];j=v(v(s[c+4>>2]-h)*e);c:{if(j<v(4294967296)&j>=v(0)){m=~~j>>>0;break c}m=0}f=v(v(f*v(s[d+8>>2]-k))+v(1));d:{if(f<v(4294967296)&f>=v(0)){r=~~f>>>0;break d}r=0}e=v(v(e*v(s[d+4>>2]-h))+v(1));e:{if(e<v(4294967296)&e>=v(0)){g=~~e>>>0;break e}g=0}i=o[a+136>>2];t=i+(b<<4)|0;w=q[t>>1];h=s[a+4>>2];e=s[a+36>>2];f=v(v(s[c>>2]-h)*e);f:{if(f<v(4294967296)&f>=v(0)){a=~~f>>>0;break f}a=0}u=a&65534;c=w>>>0<=u>>>0;e=v(v(e*v(s[d>>2]-h))+v(1));g:{if(e<v(4294967296)&e>=v(0)){a=~~e>>>0;break g}a=0}if(!c){n[t>>1]=u}c=i+(b<<4)|0;a=a|1;if(q[c+6>>1]<a>>>0){n[c+6>>1]=a}a=m&65534;if(q[c+2>>1]>a>>>0){n[c+2>>1]=a}d=i+(b<<4)|0;c=d;a=g|1;if(q[c+8>>1]<a>>>0){n[c+8>>1]=a}a=l&65534;if(q[d+4>>1]>a>>>0){n[d+4>>1]=a}b=i+(b<<4)|0;a=r|1;if(q[b+10>>1]>=a>>>0){break a}n[b+10>>1]=a;return}e=s[c>>2];g=o[a+96>>2];a=g+(b<<6)|0;if(!!(e<s[a>>2])){s[a>>2]=e}e=s[c+4>>2];if(!!(e<s[a+4>>2])){s[a+4>>2]=e}e=s[c+8>>2];a=g+(b<<6)|0;if(!!(e<s[a+8>>2])){s[a+8>>2]=e}e=s[c+12>>2];if(!!(e<s[a+12>>2])){s[a+12>>2]=e}a=g+(b<<6)|0;e=s[d>>2];if(!!(s[a+16>>2]<e)){s[a+16>>2]=e}e=s[d+4>>2];if(!!(s[a+20>>2]<e)){s[a+20>>2]=e}b=g+(b<<6)|0;a=b;e=s[d+8>>2];if(!!(s[a+24>>2]<e)){s[a+24>>2]=e}e=s[d+12>>2];if(!(s[b+28>>2]<e)){break a}s[b+28>>2]=e}}function ZG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0);f=M-48|0;M=f;j=s[b+36>>2];k=s[b+20>>2];m=s[b+40>>2];n=s[b+24>>2];p=s[b+4>>2];q=s[b+8>>2];g=s[c+8>>2];r=s[b+32>>2];h=s[c>>2];t=s[b>>2];i=s[c+4>>2];u=s[b+16>>2];o[f+44>>2]=0;s[f+32>>2]=v(v(t*h)+v(u*i))+v(r*g);s[f+40>>2]=v(v(h*q)+v(i*n))+v(g*m);s[f+36>>2]=v(v(h*p)+v(i*k))+v(g*j);l[o[o[a>>2]+64>>2]](f+16|0,a,f+32|0);n=s[b+56>>2];p=s[b+40>>2];q=s[b+36>>2];r=s[b+52>>2];t=s[b+24>>2];u=s[b+20>>2];w=s[b+32>>2];x=s[b+48>>2];y=s[b+8>>2];z=s[b>>2];A=s[b+4>>2];B=s[b+16>>2];g=s[f+24>>2];h=s[f+16>>2];i=s[f+20>>2];o[f+12>>2]=0;s[f+8>>2]=-s[f+40>>2];s[f+4>>2]=-s[f+36>>2];s[f>>2]=-s[f+32>>2];l[o[o[a>>2]+64>>2]](f+16|0,a,f);C=s[b+56>>2];D=s[b+40>>2];E=s[b+36>>2];F=s[b+52>>2];G=s[b+24>>2];H=s[b+20>>2];I=s[b+32>>2];J=s[b+48>>2];K=s[b+8>>2];L=s[b>>2];N=s[b+4>>2];O=s[b+16>>2];j=s[f+24>>2];k=s[f+16>>2];m=s[f+20>>2];s[d>>2]=v(v(v(x+v(v(v(h*z)+v(i*A))+v(g*y)))*s[c>>2])+v(v(r+v(v(v(h*B)+v(i*u))+v(g*t)))*s[c+4>>2]))+v(v(n+v(v(v(h*w)+v(i*q))+v(g*p)))*s[c+8>>2]);g=v(v(v(v(J+v(v(v(k*L)+v(m*N))+v(j*K)))*s[c>>2])+v(v(F+v(v(v(k*O)+v(m*H))+v(j*G)))*s[c+4>>2]))+v(v(C+v(v(v(k*I)+v(m*E))+v(j*D)))*s[c+8>>2]));s[e>>2]=g;h=s[d>>2];if(!!(h>g)){s[d>>2]=g;s[e>>2]=h}M=f+48|0}function II(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=o[a+4>>2];a:{if((f|0)!=o[a+8>>2]){break a}g=f?f<<1:1;if((f|0)>=(g|0)){break a}if(g){o[7717]=o[7717]+1;i=l[o[6606]](u(g,80),16)|0;f=o[a+4>>2]}if((f|0)>=1){while(1){c=u(h,80);d=c+i|0;c=c+o[a+12>>2]|0;e=o[c+4>>2];o[d>>2]=o[c>>2];o[d+4>>2]=e;e=o[c+12>>2];o[d+8>>2]=o[c+8>>2];o[d+12>>2]=e;e=o[c+28>>2];o[d+24>>2]=o[c+24>>2];o[d+28>>2]=e;e=o[c+20>>2];o[d+16>>2]=o[c+16>>2];o[d+20>>2]=e;e=o[c+44>>2];o[d+40>>2]=o[c+40>>2];o[d+44>>2]=e;e=o[c+36>>2];o[d+32>>2]=o[c+32>>2];o[d+36>>2]=e;e=o[c+60>>2];o[d+56>>2]=o[c+56>>2];o[d+60>>2]=e;e=o[c+52>>2];o[d+48>>2]=o[c+48>>2];o[d+52>>2]=e;e=o[c+68>>2];o[d+64>>2]=o[c+64>>2];o[d+68>>2]=e;e=o[c+76>>2];o[d+72>>2]=o[c+72>>2];o[d+76>>2]=e;h=h+1|0;if((h|0)!=(f|0)){continue}break}}c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+12>>2]=0}o[a+12>>2]=i;m[a+16|0]=1;o[a+8>>2]=g;f=o[a+4>>2]}c=o[a+12>>2]+u(f,80)|0;f=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=f;d=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=d;d=o[b+28>>2];o[c+24>>2]=o[b+24>>2];o[c+28>>2]=d;d=o[b+20>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=d;d=o[b+44>>2];o[c+40>>2]=o[b+40>>2];o[c+44>>2]=d;d=o[b+36>>2];o[c+32>>2]=o[b+32>>2];o[c+36>>2]=d;d=o[b+60>>2];o[c+56>>2]=o[b+56>>2];o[c+60>>2]=d;d=o[b+52>>2];o[c+48>>2]=o[b+48>>2];o[c+52>>2]=d;d=o[b+76>>2];o[c+72>>2]=o[b+72>>2];o[c+76>>2]=d;d=o[b+68>>2];o[c+64>>2]=o[b+64>>2];o[c+68>>2]=d;o[a+4>>2]=o[a+4>>2]+1}function oh(a,b){var c=0;c=M-112|0;M=c;o[c+108>>2]=a;o[c+104>>2]=b;a=o[c+108>>2];s[c+100>>2]=xb(o[c+104>>2]);s[c+96>>2]=v(2)/s[c+100>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+92>>2]=s[o[b+12>>2]>>2]*s[c+96>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+88>>2]=s[o[b+12>>2]+4>>2]*s[c+96>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+84>>2]=s[o[b+12>>2]+8>>2]*s[c+96>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+80>>2]=s[o[b+12>>2]+12>>2]*s[c+92>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+76>>2]=s[o[b+12>>2]+12>>2]*s[c+88>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+72>>2]=s[o[b+12>>2]+12>>2]*s[c+84>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+68>>2]=s[o[b+12>>2]>>2]*s[c+92>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+64>>2]=s[o[b+12>>2]>>2]*s[c+88>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+60>>2]=s[o[b+12>>2]>>2]*s[c+84>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+56>>2]=s[o[b+12>>2]+4>>2]*s[c+88>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+52>>2]=s[o[b+12>>2]+4>>2]*s[c+84>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];s[c+48>>2]=s[o[b+12>>2]+8>>2]*s[c+84>>2];s[c+44>>2]=v(1)-v(s[c+56>>2]+s[c+48>>2]);s[c+40>>2]=s[c+64>>2]-s[c+72>>2];s[c+36>>2]=s[c+60>>2]+s[c+76>>2];s[c+32>>2]=s[c+64>>2]+s[c+72>>2];s[c+28>>2]=v(1)-v(s[c+68>>2]+s[c+48>>2]);s[c+24>>2]=s[c+52>>2]-s[c+80>>2];s[c+20>>2]=s[c+60>>2]-s[c+76>>2];s[c+16>>2]=s[c+52>>2]+s[c+80>>2];s[c+12>>2]=v(1)-v(s[c+68>>2]+s[c+56>>2]);Oc(a,c+44|0,c+40|0,c+36|0,c+32|0,c+28|0,c+24|0,c+20|0,c+16|0,c+12|0);M=c+112|0}function fj(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0;a:{d=s[c+128>>2];if(d==v(0)){break a}o[7468]=o[7468]+1;h=d;d=s[c+96>>2];g=s[c+16>>2];i=s[c+20>>2];j=s[c+24>>2];e=s[c+108>>2];e=v(v(v(h-v(d*s[c+116>>2]))-v(v(v(v(v(g*s[a+144>>2])+v(i*s[a+148>>2]))+v(j*s[a+152>>2]))+v(v(v(s[c>>2]*s[a+160>>2])+v(s[c+4>>2]*s[a+164>>2]))+v(s[c+8>>2]*s[a+168>>2])))*e))-v(e*v(v(v(v(s[c+48>>2]*s[b+144>>2])+v(s[c+52>>2]*s[b+148>>2]))+v(s[c+56>>2]*s[b+152>>2]))+v(v(v(s[c+32>>2]*s[b+160>>2])+v(s[c+36>>2]*s[b+164>>2]))+v(s[c+40>>2]*s[b+168>>2])))));h=v(d+e);f=s[c+120>>2];k=h<f;s[c+96>>2]=k?f:h;d=k?v(f-d):e;if(o[a+240>>2]){s[a+144>>2]=v(s[a+112>>2]*v(d*v(g*s[a+128>>2])))+s[a+144>>2];s[a+148>>2]=v(v(d*v(i*s[a+132>>2]))*s[a+116>>2])+s[a+148>>2];s[a+152>>2]=v(v(d*v(j*s[a+136>>2]))*s[a+120>>2])+s[a+152>>2];e=s[c+72>>2];f=s[c+68>>2];s[a+160>>2]=v(v(d*s[a+96>>2])*s[c+64>>2])+s[a+160>>2];g=s[a+104>>2];s[a+164>>2]=v(f*v(d*s[a+100>>2]))+s[a+164>>2];s[a+168>>2]=v(e*v(d*g))+s[a+168>>2]}if(!o[b+240>>2]){break a}e=s[c+56>>2];f=s[c+52>>2];s[b+144>>2]=v(s[b+112>>2]*v(d*v(s[c+48>>2]*s[b+128>>2])))+s[b+144>>2];s[b+148>>2]=v(v(d*v(f*s[b+132>>2]))*s[b+116>>2])+s[b+148>>2];s[b+152>>2]=v(v(d*v(e*s[b+136>>2]))*s[b+120>>2])+s[b+152>>2];e=s[c+88>>2];f=s[c+84>>2];s[b+160>>2]=v(v(d*s[b+96>>2])*s[c+80>>2])+s[b+160>>2];g=s[b+104>>2];s[b+164>>2]=v(f*v(d*s[b+100>>2]))+s[b+164>>2];s[b+168>>2]=v(e*v(d*g))+s[b+168>>2]}}function PJ(a,b){a=a|0;b=b|0;var c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=0,n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=0,E=v(0),F=v(0),G=v(0);c=M-128|0;M=c;m=o[b+36>>2];b=o[o[a+8>>2]+24>>2]+u(m,80)|0;D=o[b+64>>2];n=s[b+32>>2];p=s[b>>2];q=s[b+16>>2];r=s[b+56>>2];t=s[b+52>>2];w=s[b+48>>2];x=s[b+36>>2];y=s[b+20>>2];z=s[b+4>>2];A=s[b+40>>2];B=s[b+24>>2];C=s[b+8>>2];b=o[a+12>>2];E=s[b+52>>2];F=s[b+56>>2];d=s[b+24>>2];e=s[b+20>>2];f=s[b+40>>2];g=s[b+36>>2];G=s[b+48>>2];h=s[b+8>>2];i=s[b>>2];j=s[b+4>>2];k=s[b+16>>2];l=s[b+32>>2];o[c+124>>2]=0;o[c+108>>2]=0;o[c+92>>2]=0;s[c+104>>2]=v(v(C*l)+v(B*g))+v(A*f);s[c+100>>2]=v(v(z*l)+v(y*g))+v(x*f);s[c+88>>2]=v(v(C*k)+v(B*e))+v(A*d);s[c+84>>2]=v(v(z*k)+v(y*e))+v(x*d);s[c+120>>2]=F+v(v(v(l*w)+v(g*t))+v(f*r));s[c+116>>2]=E+v(v(v(k*w)+v(e*t))+v(d*r));o[c+76>>2]=0;s[c+72>>2]=v(v(i*C)+v(j*B))+v(h*A);s[c+68>>2]=v(v(i*z)+v(j*y))+v(h*x);s[c+64>>2]=v(v(p*i)+v(q*j))+v(n*h);s[c+112>>2]=G+v(v(v(i*w)+v(j*t))+v(h*r));s[c+96>>2]=v(v(p*l)+v(q*g))+v(n*f);s[c+80>>2]=v(v(p*k)+v(q*e))+v(n*d);b=o[a+4>>2];o[c+60>>2]=m;o[c+56>>2]=-1;o[c+48>>2]=b;o[c+44>>2]=D;o[c+40>>2]=0;o[c+52>>2]=c- -64;b=o[a+24>>2];o[c+20>>2]=-65535;o[c+24>>2]=0;o[c+12>>2]=1065353216;o[c+16>>2]=0;o[c+32>>2]=m;o[c+28>>2]=b;o[c+8>>2]=8444;o[c+12>>2]=o[b+4>>2];o[c+24>>2]=o[b+16>>2];le(o[a+16>>2],o[a+20>>2],c+40|0,c+8|0);M=c+128|0}function dg(a,b,c,d){var e=v(0),f=0,g=0,h=0,i=0,j=0,k=v(0),l=0,m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=0,w=0,x=v(0),y=v(0),z=v(0);j=M-32|0;M=j;g=o[a+12>>2];h=g+u((c+d|0)/2|0,24)|0;t=o[h+20>>2];n=s[h+16>>2];x=s[h+8>>2];y=s[h+4>>2];z=s[h>>2];h=c;l=d;while(1){p=s[b>>2];k=v(z-p);e=v(k*k);q=s[b+4>>2];k=v(y-q);e=v(e+v(k*k));r=s[b+8>>2];k=v(x-r);k=v(e+v(k*k));while(1){a:{f=u(h,24)+g|0;e=s[f+16>>2];b:{if(e!=n){if(e<n){break b}break a}e=v(s[f>>2]-p);m=v(e*e);e=v(s[f+4>>2]-q);m=v(m+v(e*e));e=v(s[f+8>>2]-r);e=v(m+v(e*e));if(((e!=k?e<k:o[f+20>>2]<(t|0))|0)!=1){break a}}h=h+1|0;continue}break}while(1){c:{w=u(l,24);i=w+g|0;e=s[i+16>>2];d:{if(n!=e){if(n<e){break d}break c}e=v(s[i>>2]-p);m=v(e*e);e=v(s[i+4>>2]-q);m=v(m+v(e*e));e=v(s[i+8>>2]-r);e=v(m+v(e*e));if(((k!=e?k<e:(t|0)<o[i+20>>2])|0)!=1){break c}}l=l+ -1|0;continue}break}if((h|0)<=(l|0)){g=o[f+20>>2];o[j+24>>2]=o[f+16>>2];o[j+28>>2]=g;g=o[f+12>>2];o[j+16>>2]=o[f+8>>2];o[j+20>>2]=g;g=o[f+4>>2];o[j+8>>2]=o[f>>2];o[j+12>>2]=g;g=o[i+4>>2];o[f>>2]=o[i>>2];o[f+4>>2]=g;g=o[i+12>>2];o[f+8>>2]=o[i+8>>2];o[f+12>>2]=g;g=o[i+20>>2];o[f+16>>2]=o[i+16>>2];o[f+20>>2]=g;g=o[j+12>>2];f=o[a+12>>2]+w|0;o[f>>2]=o[j+8>>2];o[f+4>>2]=g;i=o[j+28>>2];o[f+16>>2]=o[j+24>>2];o[f+20>>2]=i;i=o[j+20>>2];o[f+8>>2]=o[j+16>>2];o[f+12>>2]=i;l=l+ -1|0;h=h+1|0}if((h|0)<=(l|0)){g=o[a+12>>2];continue}break}if((l|0)>(c|0)){dg(a,b,c,l)}if((h|0)<(d|0)){dg(a,b,h,d)}M=j+32|0}function FK(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0);g=M+ -64|0;M=g;s[a+56>>2]=b;o[a+52>>2]=c;o[a+8>>2]=e;o[a+4>>2]=d;o[a+44>>2]=f;c=o[e+12>>2];h=s[c+52>>2];u=s[c+56>>2];e=o[d+12>>2];w=s[e+52>>2];x=s[e+56>>2];i=s[c+20>>2];j=s[c+36>>2];y=s[e+20>>2];z=s[e+36>>2];A=s[e+24>>2];k=s[c+24>>2];B=s[e+40>>2];m=s[c+40>>2];C=s[e+32>>2];n=s[c+32>>2];D=s[e>>2];p=s[c>>2];E=s[e+16>>2];q=s[c+16>>2];F=s[c+48>>2];G=s[e+48>>2];r=s[c+4>>2];H=s[e+4>>2];I=s[e+8>>2];t=s[c+8>>2];o[g+60>>2]=0;o[g+44>>2]=0;o[g+28>>2]=0;s[g+40>>2]=v(v(t*I)+v(k*A))+v(m*B);s[g+36>>2]=v(v(t*H)+v(k*y))+v(m*z);s[g+24>>2]=v(v(r*I)+v(i*A))+v(j*B);s[g+20>>2]=v(v(r*H)+v(i*y))+v(j*z);h=v(-h);s[g+56>>2]=v(v(v(k*h)-v(t*F))-v(m*u))+v(v(v(t*G)+v(k*w))+v(m*x));s[g+52>>2]=v(v(v(i*h)-v(r*F))-v(j*u))+v(v(v(r*G)+v(i*w))+v(j*x));o[g+12>>2]=0;s[g>>2]=v(v(p*D)+v(q*E))+v(n*C);s[g+32>>2]=v(v(t*D)+v(k*E))+v(m*C);s[g+16>>2]=v(v(r*D)+v(i*E))+v(j*C);s[g+8>>2]=v(v(p*I)+v(q*A))+v(n*B);s[g+4>>2]=v(v(p*H)+v(q*y))+v(n*z);s[g+48>>2]=v(v(v(q*h)-v(p*F))-v(n*u))+v(v(v(p*G)+v(q*w))+v(n*x));c=o[d+4>>2];l[o[o[c>>2]+8>>2]](c,g,a+12|0,a+28|0);s[a+28>>2]=s[a+28>>2]+b;s[a+32>>2]=s[a+32>>2]+b;s[a+36>>2]=s[a+36>>2]+b;s[a+12>>2]=s[a+12>>2]-b;s[a+16>>2]=s[a+16>>2]-b;s[a+20>>2]=s[a+20>>2]-b;M=g- -64|0}function dA(a){var b=0,c=v(0),d=0,e=0,f=0,g=0,h=v(0),i=0,j=v(0),k=0,m=0,n=v(0),p=v(0),q=v(0),r=v(0);i=o[a+752>>2];if((i|0)>=1){m=o[a+760>>2];while(1){d=m+u(b,44)|0;g=o[d+12>>2];e=o[d+8>>2];c=s[e+8>>2];n=v(s[g+8>>2]-c);f=o[d+16>>2];h=s[e+12>>2];j=v(s[f+12>>2]-h);h=v(s[g+12>>2]-h);p=v(s[f+8>>2]-c);c=v(v(n*j)-v(h*p));q=v(c*c);r=h;c=s[e+16>>2];h=v(s[f+16>>2]-c);c=v(s[g+16>>2]-c);j=v(v(r*h)-v(c*j));c=v(v(c*p)-v(n*h));s[d+36>>2]=C(v(q+v(v(j*j)+v(c*c))));b=b+1|0;if((i|0)!=(b|0)){continue}break}}d=o[a+712>>2];a:{if((d|0)<1){g=0;break a}o[7717]=o[7717]+1;b=d<<2;g=l[o[6606]](b,16)|0;$(g,0,b);d=o[a+712>>2];if((d|0)<1){break a}e=o[a+720>>2];b=0;while(1){o[(e+u(b,104)|0)+92>>2]=0;b=b+1|0;if((d|0)!=(b|0)){continue}break}}i=o[a+752>>2];if((i|0)>=1){b=o[a+720>>2];m=o[a+760>>2];d=0;while(1){e=u(d,44)+m|0;c=s[e+36>>2];f=o[e+8>>2];k=((f-b|0)/104<<2)+g|0;o[k>>2]=o[k>>2]+1;c=v(w(c));s[f+92>>2]=c+s[f+92>>2];f=o[e+12>>2];k=((f-b|0)/104<<2)+g|0;o[k>>2]=o[k>>2]+1;s[f+92>>2]=c+s[f+92>>2];e=o[e+16>>2];f=((e-b|0)/104<<2)+g|0;o[f>>2]=o[f>>2]+1;s[e+92>>2]=c+s[e+92>>2];d=d+1|0;if((i|0)!=(d|0)){continue}break}d=o[a+712>>2]}b:{c:{if((d|0)>=1){b=0;while(1){e=o[(b<<2)+g>>2];d:{if((e|0)>=1){f=o[a+720>>2]+u(b,104)|0;s[f+92>>2]=s[f+92>>2]/v(e|0);break d}o[(o[a+720>>2]+u(b,104)|0)+92>>2]=0}b=b+1|0;if((d|0)!=(b|0)){continue}break}break c}if(!g){break b}}if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}}function pb(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0);g=s[c+100>>2];h=s[c+16>>2];i=s[c+20>>2];j=s[c+24>>2];e=s[c+108>>2];d=v(v(v(s[c+112>>2]-v(g*s[c+116>>2]))-v(v(v(v(v(h*s[a+64>>2])+v(i*s[a+68>>2]))+v(j*s[a+72>>2]))+v(v(v(s[c>>2]*s[a+80>>2])+v(s[c+4>>2]*s[a+84>>2]))+v(s[c+8>>2]*s[a+88>>2])))*e))-v(e*v(v(v(v(s[c+48>>2]*s[b+64>>2])+v(s[c+52>>2]*s[b+68>>2]))+v(s[c+56>>2]*s[b+72>>2]))+v(v(v(s[c+32>>2]*s[b+80>>2])+v(s[c+36>>2]*s[b+84>>2]))+v(s[c+40>>2]*s[b+88>>2])))));e=v(g+d);f=s[c+120>>2];a:{if(!!(e<f)){d=v(f-g);e=f;break a}f=s[c+124>>2];if(!(e>f)){break a}d=v(f-g);e=f}s[c+100>>2]=e;if(o[a+240>>2]){s[a+64>>2]=v(s[a+112>>2]*v(d*v(h*s[a+128>>2])))+s[a+64>>2];s[a+68>>2]=v(v(d*v(i*s[a+132>>2]))*s[a+116>>2])+s[a+68>>2];s[a+72>>2]=v(v(d*v(j*s[a+136>>2]))*s[a+120>>2])+s[a+72>>2];e=s[c+72>>2];f=s[c+68>>2];s[a+80>>2]=v(v(d*s[a+96>>2])*s[c+64>>2])+s[a+80>>2];g=s[a+104>>2];s[a+84>>2]=v(f*v(d*s[a+100>>2]))+s[a+84>>2];s[a+88>>2]=v(e*v(d*g))+s[a+88>>2]}if(o[b+240>>2]){e=s[c+56>>2];f=s[c+52>>2];s[b+64>>2]=v(s[b+112>>2]*v(d*v(s[c+48>>2]*s[b+128>>2])))+s[b+64>>2];s[b+68>>2]=v(v(d*v(f*s[b+132>>2]))*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(v(d*v(e*s[b+136>>2]))*s[b+120>>2])+s[b+72>>2];e=s[c+88>>2];f=s[c+84>>2];s[b+80>>2]=v(v(d*s[b+96>>2])*s[c+80>>2])+s[b+80>>2];g=s[b+104>>2];s[b+84>>2]=v(f*v(d*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(e*v(d*g))+s[b+88>>2]}}function RE(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;c=M-32|0;M=c;o[c+20>>2]=0;o[c+12>>2]=0;o[c+16>>2]=0;m[c+24|0]=1;a:{if(o[a+8>>2]<1){break a}while(1){f=o[a+16>>2]+(k<<4)|0;b:{if((d|0)!=(e|0)){break b}e=d?d<<1:1;if((d|0)>=(e|0)){e=d;break b}i=0;g=0;if(e){o[7717]=o[7717]+1;g=l[o[6606]](e<<4,16)|0}if((d|0)>=1){while(1){h=i<<4;j=h+g|0;h=h+o[c+20>>2]|0;o[j>>2]=o[h>>2];o[j+4>>2]=o[h+4>>2];o[j+8>>2]=o[h+8>>2];o[j+12>>2]=o[h+12>>2];i=i+1|0;if((i|0)!=(d|0)){continue}break}}d=o[c+20>>2];if(d){if(p[c+24|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+20>>2]=0}o[c+20>>2]=g;m[c+24|0]=1;o[c+16>>2]=e;e=o[c+12>>2]}d=o[c+20>>2]+(e<<4)|0;o[d>>2]=o[f>>2];o[d+4>>2]=o[f+4>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=o[f+12>>2];f=o[c+12>>2];e=f+1|0;o[c+12>>2]=e;k=k+1|0;if((k|0)<o[a+8>>2]){d=o[c+16>>2];continue}break}d=0;if((f|0)<0){break a}i=o[c+20>>2];while(1){g=i+(d<<4)|0;l[o[o[a>>2]+12>>2]](a,o[g>>2],o[g+4>>2],b)|0;g=(d|0)==(f|0);d=d+1|0;if(!g){continue}break}}if(o[a+56>>2]>=1){b=o[a- -64>>2];e=0;while(1){o[b+(e<<2)>>2]=-1;e=e+1|0;if((e|0)<o[a+56>>2]){continue}break}e=o[c+12>>2]}if((e|0)>=2){bc(c+8|0,c,0,e+ -1|0);e=o[c+12>>2]}d=o[c+20>>2];if((e|0)>=1){e=0;while(1){b=(e<<4)+d|0;l[o[o[a>>2]+8>>2]](a,o[b>>2],o[b+4>>2])|0;d=o[c+20>>2];e=e+1|0;if((e|0)<o[c+12>>2]){continue}break}}if(d){if(p[c+24|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[c+20>>2]=0}M=c+32|0}function $y(a,b,c,d,e){var f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0);h=M-32|0;M=h;o[a+52>>2]=d;o[a+44>>2]=e;s[a+56>>2]=b+v(.05999999865889549);d=o[a+4>>2];l[o[o[d>>2]+28>>2]](d,h+16|0,h);c=o[c+12>>2];b=s[c+20>>2];m=s[c+36>>2];n=s[c+24>>2];i=s[c+40>>2];r=s[c+56>>2];x=s[c+52>>2];y=s[c+4>>2];p=s[c+8>>2];j=s[a+56>>2];A=s[c+48>>2];k=s[c+32>>2];g=s[c>>2];f=s[c+16>>2];t=s[h+24>>2];q=s[h+8>>2];u=s[h+16>>2];E=s[h>>2];F=s[h+20>>2];G=s[h+4>>2];o[a+40>>2]=0;o[a+24>>2]=0;B=v(v(E+u)*v(.5));C=v(v(G+F)*v(.5));D=v(v(q+t)*v(.5));x=v(-x);H=v(v(v(v(g*B)+v(f*C))+v(k*D))+v(v(v(f*x)-v(g*A))-v(k*r)));I=v(g*v(0));z=v(f*v(0));t=v(j+v(v(q-t)*v(.5)));q=v(v(w(v(k+v(I+z))))*t);z=v(g+z);g=v(k*v(0));k=v(j+v(v(E-u)*v(.5)));u=v(v(w(v(z+g)))*k);f=v(w(v(v(I+f)+g)));g=v(j+v(v(G-F)*v(.5)));f=v(q+v(u+v(f*g)));s[a+28>>2]=H+f;s[a+12>>2]=H-f;f=v(v(v(v(B*p)+v(C*n))+v(D*i))+v(v(v(n*x)-v(p*A))-v(i*r)));j=v(p*v(0));q=v(n*v(0));u=v(v(w(v(i+v(j+q))))*t);i=v(i*v(0));n=v(u+v(v(v(w(v(v(p+q)+i)))*k)+v(v(w(v(v(j+n)+i)))*g)));s[a+36>>2]=f+n;i=v(v(v(v(B*y)+v(C*b))+v(D*m))+v(v(v(b*x)-v(y*A))-v(m*r)));p=v(y*v(0));r=v(b*v(0));j=v(v(w(v(m+v(p+r))))*t);m=v(m*v(0));b=v(j+v(v(v(w(v(v(y+r)+m)))*k)+v(v(w(v(v(p+b)+m)))*g)));s[a+32>>2]=i+b;s[a+20>>2]=f-n;s[a+16>>2]=i-b;M=h+32|0}function nb(a,b,c,d,e,f,g){var h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=0,q=0,r=v(0),t=v(0),u=v(0);h=M-128|0;M=h;a:{if(!b){break a}if(!(!o[b+40>>2]|((g|0)>-1?(c|0)>=(g|0):0))){p=c+1|0;nb(a,o[b+36>>2],p,d,e,f,g);nb(a,o[b+40>>2],p,d,e,f,g)}if((c|0)<(f|0)){break a}i=s[b+20>>2];j=s[b+24>>2];f=o[b+40>>2];k=s[b+16>>2];r=s[b>>2];m=s[b+4>>2];n=s[b+8>>2];o[h+124>>2]=0;o[h+108>>2]=0;o[h+92>>2]=0;o[h+76>>2]=0;o[h+60>>2]=0;o[h+44>>2]=0;o[h+28>>2]=0;t=v(v(n+j)*v(.5));n=v(v(j-n)*v(.5));j=v(t+n);s[h+120>>2]=j;u=v(v(m+i)*v(.5));m=v(v(i-m)*v(.5));i=v(u+m);s[h+116>>2]=i;s[h+104>>2]=j;s[h+100>>2]=i;s[h+88>>2]=j;m=v(u-m);s[h+84>>2]=m;s[h+72>>2]=j;s[h+68>>2]=m;j=v(t-n);s[h+56>>2]=j;s[h+52>>2]=i;s[h+40>>2]=j;s[h+36>>2]=i;s[h+24>>2]=j;s[h+20>>2]=m;o[h+12>>2]=0;n=v(v(r+k)*v(.5));k=v(v(k-r)*v(.5));i=v(n-k);s[h+112>>2]=i;k=v(n+k);s[h+96>>2]=k;s[h+80>>2]=k;s[h+64>>2]=i;s[h+48>>2]=i;s[h+32>>2]=k;s[h+16>>2]=k;s[h>>2]=i;s[h+8>>2]=j;s[h+4>>2]=m;c=h+16|0;b=f?d:e;l[o[o[a>>2]+8>>2]](a,h,c,b);d=h+32|0;l[o[o[a>>2]+8>>2]](a,c,d,b);e=h+48|0;l[o[o[a>>2]+8>>2]](a,d,e,b);l[o[o[a>>2]+8>>2]](a,e,h,b);f=h- -64|0;g=h+80|0;l[o[o[a>>2]+8>>2]](a,f,g,b);p=h+96|0;l[o[o[a>>2]+8>>2]](a,g,p,b);q=h+112|0;l[o[o[a>>2]+8>>2]](a,p,q,b);l[o[o[a>>2]+8>>2]](a,q,f,b);l[o[o[a>>2]+8>>2]](a,h,f,b);l[o[o[a>>2]+8>>2]](a,c,g,b);l[o[o[a>>2]+8>>2]](a,d,p,b);l[o[o[a>>2]+8>>2]](a,e,q,b)}M=h+128|0}function nF(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,p=0,r=0;k=o[a+60>>2];d=o[a+92>>2];if(!l[o[o[d>>2]+56>>2]](d)){d=o[a+92>>2];l[o[o[d>>2]+16>>2]](d,(b<<6)+k|0,c)}d=q[a+56>>1];c=o[a+60>>2];n[c+54>>1]=q[c+54>>1]+ -2;n[c+56>>1]=q[c+56>>1]+ -2;n[c+58>>1]=q[c+58>>1]+ -2;c=q[a+6>>1];r=(d<<1)+ -1<<2;while(1){m=(j<<2)+a|0;h=o[m+68>>2];i=j<<1;p=i+((b<<6)+k|0)|0;f=q[p+54>>1]<<2;d=h+f|0;n[d>>1]=c;e=q[d+6>>1];g=h;a:{if(!e){break a}f=(o[a+60>>2]+(q[(f+h|0)+2>>1]<<6)|0)+i|0;while(1){g=c&65535;c=q[d+4>>1];if(g>>>0>=c>>>0){e=(o[a+60>>2]+(e<<6)|0)+i|0;c=c&1?e+54|0:e+48|0;n[c>>1]=q[c>>1]+ -1;n[f+54>>1]=q[f+54>>1]+1;e=q[d+4>>1]|q[d+6>>1]<<16;c=q[d>>1]|q[d+2>>1]<<16;n[d+4>>1]=c;n[d+6>>1]=c>>>16;n[d>>1]=e;n[d+2>>1]=e>>>16;e=d;d=d+4|0;e=q[e+10>>1];if(e){continue}}break}c=q[a+6>>1];g=o[m+68>>2]}e=g;d=q[p+48>>1]<<2;n[d+h>>1]=c;d=d+e|0;e=q[d+6>>1];if(e){f=(o[a+60>>2]+(q[d+2>>1]<<6)|0)+i|0;c=q[d>>1];while(1){g=c&65535;c=q[d+4>>1];if(g>>>0>=c>>>0){e=(o[a+60>>2]+(e<<6)|0)+i|0;c=c&1?e+54|0:e+48|0;n[c>>1]=q[c>>1]+ -1;n[f+48>>1]=q[f+48>>1]+1;e=q[d+4>>1]|q[d+6>>1]<<16;c=q[d>>1]|q[d+2>>1]<<16;n[d+4>>1]=c;n[d+6>>1]=c>>>16;n[d>>1]=e;n[d+2>>1]=e>>>16;e=d;d=d+4|0;e=q[e+10>>1];if(e){continue}}break}c=q[a+6>>1]}d=h+r|0;n[d>>1]=c;n[d+2>>1]=0;j=j+1|0;if((j|0)!=3){continue}break}n[(o[a+60>>2]+(b<<6)|0)+48>>1]=q[a+64>>1];n[a+64>>1]=b;n[a+56>>1]=q[a+56>>1]+ -1}function Xc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=M-32|0;M=f;a:{b=(b|0)<=-1?o[a+12>>2]:b;if((b|0)<1){break a}d=o[a>>2];if(!d){break a}while(1){j=0;g=d+40|0;if(o[g>>2]){while(1){e=o[d+32>>2];b:{if(e>>>0<=d>>>0){e=d;break b}c=o[e+40>>2];h=(c|0)==(d|0);k=((d|0)!=(c|0))<<2;l=o[(k+e|0)+36>>2];c=o[e+32>>2];i=a;c:{if(!c){break c}i=(c+((o[c+40>>2]==(e|0))<<2)|0)+36|0}o[i>>2]=d;o[l+32>>2]=d;o[e+32>>2]=d;o[d+32>>2]=c;o[e+36>>2]=o[d+36>>2];o[e+40>>2]=o[g>>2];o[o[d+36>>2]+32>>2]=e;o[o[g>>2]+32>>2]=e;c=d+36|0;o[c+(h<<2)>>2]=e;o[c+k>>2]=l;c=e+24|0;g=o[c+4>>2];o[f+24>>2]=o[c>>2];o[f+28>>2]=g;c=e+16|0;g=o[c+4>>2];o[f+16>>2]=o[c>>2];o[f+20>>2]=g;c=e+8|0;g=o[c+4>>2];o[f+8>>2]=o[c>>2];o[f+12>>2]=g;c=o[e+4>>2];o[f>>2]=o[e>>2];o[f+4>>2]=c;c=d+24|0;g=o[c+4>>2];o[e+24>>2]=o[c>>2];o[e+28>>2]=g;c=d+16|0;g=o[c+4>>2];o[e+16>>2]=o[c>>2];o[e+20>>2]=g;c=d+8|0;g=o[c+4>>2];o[e+8>>2]=o[c>>2];o[e+12>>2]=g;c=o[d+4>>2];o[e>>2]=o[d>>2];o[e+4>>2]=c;c=o[f+28>>2];o[d+24>>2]=o[f+24>>2];o[d+28>>2]=c;c=o[f+20>>2];o[d+16>>2]=o[f+16>>2];o[d+20>>2]=c;c=o[f+12>>2];o[d+8>>2]=o[f+8>>2];o[d+12>>2]=c;c=o[f+4>>2];o[d>>2]=o[f>>2];o[d+4>>2]=c}d=o[a+16>>2]>>>j|0;j=j+1&31;d=o[(((d&1)<<2)+e|0)+36>>2];g=d+40|0;if(o[g>>2]){continue}break}}e=a;i=e;h=0;d:{if(!Rd(e,d)){break d}h=o[a>>2]}Qd(i,h,d);o[a+16>>2]=o[a+16>>2]+1;b=b+ -1|0;if(!b){break a}d=o[a>>2];continue}}M=f+32|0}function Fz(a,b,c){a=a|0;b=v(b);c=v(c);var d=0,e=0,f=v(0),g=0,h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=0,n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=0,z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0);h=M-16|0;M=h;y=o[a+792>>2];if((y|0)>=1){b=v(s[a+336>>2]*b);c=s[a+452>>2];while(1){d=o[a+800>>2]+u(m,96)|0;B=s[d+36>>2];C=s[d+28>>2];D=s[d+32>>2];E=s[d+52>>2];F=s[d+44>>2];G=s[d+48>>2];g=o[d>>2];f=s[g+16>>2];e=o[d+20>>2];k=s[e+332>>2];H=f;n=s[d+92>>2];p=s[d+24>>2];i=s[d+4>>2];q=s[d+8>>2];r=s[d+12>>2];t=s[g+8>>2];j=s[d+84>>2];l=s[e+336>>2];z=s[d+80>>2];w=v(v(b*v(v(v(v(v(i*s[e+4>>2])+v(q*s[e+8>>2]))+v(r*s[e+12>>2]))+s[e+52>>2])-t))+v(v(c*v(v(v(k*j)-v(l*z))+s[e+312>>2]))-v(t-s[g+24>>2])));x=s[g+12>>2];I=l;l=s[d+76>>2];A=s[e+328>>2];j=v(v(b*v(v(v(v(v(i*s[e+20>>2])+v(q*s[e+24>>2]))+v(r*s[e+28>>2]))+s[e+56>>2])-x))+v(v(c*v(s[e+316>>2]+v(v(I*l)-v(j*A))))-v(x-s[g+28>>2])));f=v(v(b*v(v(v(v(v(i*s[e+36>>2])+v(q*s[e+40>>2]))+v(r*s[e+44>>2]))+s[e+60>>2])-f))+v(v(c*v(v(v(z*A)-v(k*l))+s[e+320>>2]))-v(f-s[g+32>>2])));k=v(p*v(v(v(w*s[d+60>>2])+v(j*s[d- -64>>2]))+v(f*s[d+68>>2])));s[g+16>>2]=H+v(n*k);i=v(p*v(v(v(w*F)+v(j*G))+v(f*E)));s[g+12>>2]=x+v(n*i);f=v(p*v(v(v(w*C)+v(j*D))+v(B*f)));s[g+8>>2]=t+v(n*f);o[h+12>>2]=0;s[h+8>>2]=-k;s[h+4>>2]=-i;s[h>>2]=-f;Ca(e,h,d+76|0);m=m+1|0;if((y|0)!=(m|0)){continue}break}}M=h+16|0}function qH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0);e=M-48|0;M=e;k=s[d>>2];i=s[c>>2];h=v(v(k-i)*v(.5));j=v(h*h);g=s[d+4>>2];f=s[c+4>>2];h=v(v(g-f)*v(.5));p=v(j+v(h*h));j=s[d+8>>2];m=s[c+8>>2];h=v(v(j-m)*v(.5));h=v(C(v(p+v(h*h))));j=v(v(j+m)*v(.5));m=v(v(g+f)*v(.5));q=v(v(k+i)*v(.5));k=s[a+56>>2];a:{if(!!(v(w(k))>v(.7071067690849304))){i=s[a+52>>2];g=v(v(k*k)+v(i*i));f=v(v(1)/v(C(g)));r=v(g*f);n=v(i*f);g=s[a+48>>2];t=v(n*v(-g));f=v(f*v(-k));u=v(g*f);break a}g=s[a+48>>2];i=s[a+52>>2];r=v(v(g*g)+v(i*i));f=v(v(1)/v(C(r)));u=v(r*f);y=v(f*v(-i));t=v(k*y);f=v(g*f);r=v(f*v(-k))}x=s[a+64>>2];o[e+44>>2]=0;o[e+28>>2]=0;p=j;j=v(v(v(k*j)+v(v(q*g)+v(m*i)))-x);x=v(p-v(k*j));n=v(h*n);p=v(x-n);k=v(h*u);u=v(p-k);s[e+40>>2]=u;m=v(m-v(i*j));f=v(h*f);z=v(m-f);i=v(h*t);t=v(z-i);s[e+36>>2]=t;n=v(n+x);s[e+24>>2]=n-k;f=v(f+m);s[e+20>>2]=f-i;o[e+12>>2]=0;g=v(q-v(g*j));j=v(h*y);m=v(g-j);h=v(h*r);q=v(m-h);s[e+32>>2]=q;g=v(j+g);s[e+16>>2]=g-h;j=v(k+n);s[e+8>>2]=j;f=v(i+f);s[e+4>>2]=f;g=v(h+g);s[e>>2]=g;l[o[o[b>>2]+8>>2]](b,e,0,0);o[e+44>>2]=0;s[e+40>>2]=j;s[e+36>>2]=f;o[e+28>>2]=0;s[e+24>>2]=k+p;s[e+20>>2]=i+z;s[e+32>>2]=g;s[e+16>>2]=h+m;o[e+12>>2]=0;s[e+8>>2]=u;s[e+4>>2]=t;s[e>>2]=q;l[o[o[b>>2]+8>>2]](b,e,0,1);M=e+48|0}function lk(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{h=o[a+36>>2];c=o[a+12>>2];if((h|0)>=(c|0)){break a}b:{if(o[a+40>>2]>=(c|0)){b=o[a+44>>2];break b}d=h;if(c){o[7717]=o[7717]+1;b=l[o[6606]](c<<2,16)|0;d=o[a+36>>2]}f=o[a+44>>2];c:{if((d|0)>=1){while(1){g=e<<2;o[g+b>>2]=o[f+g>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break c}}if(f){break c}o[a+44>>2]=b;o[a+40>>2]=c;m[a+48|0]=1;break b}if(p[a+48|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[a+44>>2]=b;m[a+48|0]=1;o[a+40>>2]=c}d=h<<2;g=c<<2;$(d+b|0,0,g-d|0);o[a+36>>2]=c;f=o[a+56>>2];if((f|0)<(c|0)){d:{if(o[a+60>>2]>=(c|0)){b=o[a- -64>>2];break d}e=0;d=f;b=0;if(c){o[7717]=o[7717]+1;b=l[o[6606]](g,16)|0;d=o[a+56>>2]}i=o[a- -64>>2];e:{if((d|0)>=1){while(1){j=e<<2;o[j+b>>2]=o[i+j>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break e}}if(i){break e}o[a+64>>2]=b;o[a+60>>2]=c;m[a+68|0]=1;break d}if(p[a+68|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+64>>2]=b;m[a+68|0]=1;o[a+60>>2]=c}d=f<<2;$(d+b|0,0,g-d|0)}o[a+56>>2]=c;if((c|0)>=1){$(o[a+44>>2],255,g);$(o[a- -64>>2],255,g)}if((h|0)<1){break a}d=o[a- -64>>2];f=o[a+16>>2];c=o[a+44>>2];e=0;while(1){b=f+(e<<4)|0;b=o[o[b+4>>2]+12>>2]<<16|o[o[b>>2]+12>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;b=c+((o[a+12>>2]+ -1&(b>>16^b))<<2)|0;o[d+(e<<2)>>2]=o[b>>2];o[b>>2]=e;e=e+1|0;if((h|0)!=(e|0)){continue}break}}}function ej(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=o[a+4>>2];g=d;a:{if((d|0)!=o[a+8>>2]){break a}g=d;h=d?d<<1:1;if((d|0)>=(h|0)){break a}if(h){o[7717]=o[7717]+1;j=l[o[6606]](u(h,244),16)|0;g=o[a+4>>2]}else{g=d}if((g|0)>=1){while(1){c=u(i,244);e=c+j|0;c=c+o[a+12>>2]|0;f=o[c+4>>2];o[e>>2]=o[c>>2];o[e+4>>2]=f;f=o[c+12>>2];o[e+8>>2]=o[c+8>>2];o[e+12>>2]=f;f=o[c+28>>2];o[e+24>>2]=o[c+24>>2];o[e+28>>2]=f;f=o[c+20>>2];o[e+16>>2]=o[c+16>>2];o[e+20>>2]=f;f=o[c+44>>2];o[e+40>>2]=o[c+40>>2];o[e+44>>2]=f;f=o[c+36>>2];o[e+32>>2]=o[c+32>>2];o[e+36>>2]=f;f=o[c+52>>2];o[e+48>>2]=o[c+48>>2];o[e+52>>2]=f;f=o[c+60>>2];o[e+56>>2]=o[c+56>>2];o[e+60>>2]=f;ja(e- -64|0,c- -64|0,180);i=i+1|0;if((g|0)!=(i|0)){continue}break}}g=o[a+12>>2];if(g){if(p[a+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+12>>2]=0}o[a+12>>2]=j;m[a+16|0]=1;o[a+8>>2]=h;g=o[a+4>>2]}o[a+4>>2]=g+1;e=o[b+12>>2];g=u(d,244);d=g+o[a+12>>2]|0;c=d;o[c+8>>2]=o[b+8>>2];o[c+12>>2]=e;c=o[b+4>>2];o[d>>2]=o[b>>2];o[d+4>>2]=c;c=o[b+28>>2];o[d+24>>2]=o[b+24>>2];o[d+28>>2]=c;c=o[b+20>>2];o[d+16>>2]=o[b+16>>2];o[d+20>>2]=c;c=o[b+36>>2];o[d+32>>2]=o[b+32>>2];o[d+36>>2]=c;c=o[b+44>>2];o[d+40>>2]=o[b+40>>2];o[d+44>>2]=c;c=o[b+52>>2];o[d+48>>2]=o[b+48>>2];o[d+52>>2]=c;c=o[b+60>>2];o[d+56>>2]=o[b+56>>2];o[d+60>>2]=c;ja(d- -64|0,b- -64|0,180);return g+o[a+12>>2]|0}function Ff(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0;d=s[c+100>>2];g=s[c+16>>2];h=s[c+20>>2];i=s[c+24>>2];e=s[c+108>>2];e=v(v(v(s[c+112>>2]-v(d*s[c+116>>2]))-v(v(v(v(v(g*s[a+64>>2])+v(h*s[a+68>>2]))+v(i*s[a+72>>2]))+v(v(v(s[c>>2]*s[a+80>>2])+v(s[c+4>>2]*s[a+84>>2]))+v(s[c+8>>2]*s[a+88>>2])))*e))-v(e*v(v(v(v(s[c+48>>2]*s[b+64>>2])+v(s[c+52>>2]*s[b+68>>2]))+v(s[c+56>>2]*s[b+72>>2]))+v(v(v(s[c+32>>2]*s[b+80>>2])+v(s[c+36>>2]*s[b+84>>2]))+v(s[c+40>>2]*s[b+88>>2])))));j=v(d+e);f=s[c+120>>2];k=j<f;s[c+100>>2]=k?f:j;d=k?v(f-d):e;if(o[a+240>>2]){s[a+64>>2]=v(s[a+112>>2]*v(d*v(g*s[a+128>>2])))+s[a+64>>2];s[a+68>>2]=v(v(d*v(h*s[a+132>>2]))*s[a+116>>2])+s[a+68>>2];s[a+72>>2]=v(v(d*v(i*s[a+136>>2]))*s[a+120>>2])+s[a+72>>2];e=s[c+72>>2];f=s[c+68>>2];s[a+80>>2]=v(v(d*s[a+96>>2])*s[c+64>>2])+s[a+80>>2];g=s[a+104>>2];s[a+84>>2]=v(f*v(d*s[a+100>>2]))+s[a+84>>2];s[a+88>>2]=v(e*v(d*g))+s[a+88>>2]}if(o[b+240>>2]){e=s[c+56>>2];f=s[c+52>>2];s[b+64>>2]=v(s[b+112>>2]*v(d*v(s[c+48>>2]*s[b+128>>2])))+s[b+64>>2];s[b+68>>2]=v(v(d*v(f*s[b+132>>2]))*s[b+116>>2])+s[b+68>>2];s[b+72>>2]=v(v(d*v(e*s[b+136>>2]))*s[b+120>>2])+s[b+72>>2];e=s[c+88>>2];f=s[c+84>>2];s[b+80>>2]=v(v(d*s[b+96>>2])*s[c+80>>2])+s[b+80>>2];g=s[b+104>>2];s[b+84>>2]=v(f*v(d*s[b+100>>2]))+s[b+84>>2];s[b+88>>2]=v(e*v(d*g))+s[b+88>>2]}}function tJ(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=M-160|0;M=f;g=o[a+12>>2];a:{if(!g){break a}h=p[a+16|0];i=h?b:c;j=o[i+4>>2];b=h?c:b;h=o[b+4>>2];o[e+4>>2]=g;c=f+144|0;s[c+12>>2]=s[g+752>>2];o[c+8>>2]=j;o[c+4>>2]=h;o[c>>2]=9648;o[f+136>>2]=1566444395;b=o[b+12>>2];g=o[b+12>>2];o[f+16>>2]=o[b+8>>2];o[f+20>>2]=g;g=o[b+4>>2];o[f+8>>2]=o[b>>2];o[f+12>>2]=g;g=o[b+28>>2];o[f+32>>2]=o[b+24>>2];o[f+36>>2]=g;g=o[b+20>>2];o[f+24>>2]=o[b+16>>2];o[f+28>>2]=g;g=o[b+44>>2];o[f+48>>2]=o[b+40>>2];o[f+52>>2]=g;g=o[b+36>>2];o[f+40>>2]=o[b+32>>2];o[f+44>>2]=g;h=o[b+60>>2];g=f- -64|0;o[g>>2]=o[b+56>>2];o[g+4>>2]=h;g=o[b+52>>2];o[f+56>>2]=o[b+48>>2];o[f+60>>2]=g;b=o[i+12>>2];g=o[b+12>>2];o[f+80>>2]=o[b+8>>2];o[f+84>>2]=g;g=o[b+4>>2];o[f+72>>2]=o[b>>2];o[f+76>>2]=g;g=o[b+20>>2];o[f+88>>2]=o[b+16>>2];o[f+92>>2]=g;g=o[b+28>>2];o[f+96>>2]=o[b+24>>2];o[f+100>>2]=g;g=o[b+36>>2];o[f+104>>2]=o[b+32>>2];o[f+108>>2]=g;g=o[b+44>>2];o[f+112>>2]=o[b+40>>2];o[f+116>>2]=g;g=o[b+52>>2];o[f+120>>2]=o[b+48>>2];o[f+124>>2]=g;g=o[b+60>>2];o[f+128>>2]=o[b+56>>2];o[f+132>>2]=g;ml(c,f+8|0,e,o[d+20>>2],p[a+16|0]);if(!p[a+8|0]){break a}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0)}M=f+160|0}function gj(a){a=a|0;var b=0;o[a>>2]=19780;b=o[a+176>>2];if(b){if(p[a+180|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+176>>2]=0}o[a+176>>2]=0;m[a+180|0]=1;o[a+168>>2]=0;o[a+172>>2]=0;b=o[a+156>>2];if(b){if(p[a+160|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+156>>2]=0}o[a+156>>2]=0;m[a+160|0]=1;o[a+148>>2]=0;o[a+152>>2]=0;b=o[a+136>>2];if(b){if(p[a+140|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+136>>2]=0}o[a+136>>2]=0;m[a+140|0]=1;o[a+128>>2]=0;o[a+132>>2]=0;b=o[a+116>>2];if(b){if(p[a+120|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+116>>2]=0}o[a+116>>2]=0;m[a+120|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;b=o[a+96>>2];if(b){if(p[a+100|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+96>>2]=0}o[a+96>>2]=0;m[a+100|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;b=o[a+76>>2];if(b){if(p[a+80|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+76>>2]=0}o[a+76>>2]=0;m[a+80|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+56>>2]=0;m[a+60|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+36>>2]=0;m[a+40|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function gg(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{h=o[a+32>>2];c=o[a+12>>2];if((h|0)>=(c|0)){break a}b:{if(o[a+36>>2]>=(c|0)){b=o[a+40>>2];break b}d=h;if(c){o[7717]=o[7717]+1;b=l[o[6606]](c<<2,16)|0;d=o[a+32>>2]}f=o[a+40>>2];c:{if((d|0)>=1){while(1){g=e<<2;o[g+b>>2]=o[f+g>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break c}}if(f){break c}o[a+40>>2]=b;o[a+36>>2]=c;m[a+44|0]=1;break b}if(p[a+44|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[a+40>>2]=b;m[a+44|0]=1;o[a+36>>2]=c}d=h<<2;g=c<<2;$(d+b|0,0,g-d|0);o[a+32>>2]=c;f=o[a+52>>2];if((f|0)<(c|0)){d:{if(o[a+56>>2]>=(c|0)){b=o[a+60>>2];break d}e=0;d=f;b=0;if(c){o[7717]=o[7717]+1;b=l[o[6606]](g,16)|0;d=o[a+52>>2]}i=o[a+60>>2];e:{if((d|0)>=1){while(1){j=e<<2;o[j+b>>2]=o[i+j>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break e}}if(i){break e}o[a+60>>2]=b;o[a+56>>2]=c;m[a- -64|0]=1;break d}if(p[a- -64|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+60>>2]=b;m[a+64|0]=1;o[a+56>>2]=c}d=f<<2;$(d+b|0,0,g-d|0)}o[a+52>>2]=c;if((c|0)>=1){$(o[a+40>>2],255,g);$(o[a+60>>2],255,g)}if((h|0)<1){break a}d=o[a+60>>2];f=o[a+16>>2];c=o[a+40>>2];e=0;while(1){b=f+u(e,12)|0;b=o[b+4>>2]<<16|o[b>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;b=c+((o[a+12>>2]+ -1&(b>>16^b))<<2)|0;o[d+(e<<2)>>2]=o[b>>2];o[b>>2]=e;e=e+1|0;if((h|0)!=(e|0)){continue}break}}}function Rc(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=0,x=v(0),y=v(0),z=v(0);d=M+ -64|0;M=d;m[b+84|0]=0;w=o[a+116>>2];a=w;e=o[a+16>>2];o[d+8>>2]=o[a+12>>2];o[d+12>>2]=e;e=o[a+8>>2];o[d>>2]=o[a+4>>2];o[d+4>>2]=e;e=o[a+32>>2];o[d+24>>2]=o[a+28>>2];o[d+28>>2]=e;e=o[a+24>>2];o[d+16>>2]=o[a+20>>2];o[d+20>>2]=e;e=o[a+48>>2];o[d+40>>2]=o[a+44>>2];o[d+44>>2]=e;e=o[a+40>>2];o[d+32>>2]=o[a+36>>2];o[d+36>>2]=e;e=o[a+64>>2];o[d+56>>2]=o[a+60>>2];o[d+60>>2]=e;e=o[a+56>>2];o[d+48>>2]=o[a+52>>2];o[d+52>>2]=e;a:{if(!c){break a}a=o[w+480>>2];if(!a){break a}l[o[o[a>>2]+8>>2]](a,d)}x=s[d+52>>2];i=s[d+24>>2];j=s[d+20>>2];f=s[d+56>>2];k=s[d+40>>2];n=s[d+36>>2];y=s[d+48>>2];p=s[d+8>>2];q=s[d+4>>2];r=s[d>>2];t=s[d+16>>2];u=s[d+32>>2];o[b+48>>2]=0;z=f;f=s[b+156>>2];g=s[b+160>>2];h=s[b+164>>2];s[b+44>>2]=z+v(v(v(u*f)+v(n*g))+v(k*h));s[b+40>>2]=x+v(v(v(f*t)+v(g*j))+v(h*i));s[b+36>>2]=y+v(v(v(f*r)+v(g*q))+v(h*p));o[b- -64>>2]=0;f=s[b+172>>2];g=s[b+176>>2];h=s[b+180>>2];s[b+60>>2]=v(v(u*f)+v(n*g))+v(k*h);s[b+56>>2]=v(v(f*t)+v(g*j))+v(h*i);s[b+52>>2]=v(v(r*f)+v(q*g))+v(p*h);f=s[b+196>>2];g=s[b+192>>2];h=s[b+188>>2];o[b+80>>2]=0;s[b+76>>2]=v(v(u*h)+v(n*g))+v(k*f);s[b+72>>2]=v(v(t*h)+v(j*g))+v(i*f);s[b+68>>2]=v(v(r*h)+v(q*g))+v(p*f);M=d- -64|0}function _C(a){var b=v(0),c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=0;o[a+1268>>2]=0;g=s[a+1084>>2];h=s[a+1104>>2];i=s[a+1088>>2];j=s[a+1100>>2];q=v(v(g*h)-v(i*j));c=s[a+1064>>2];d=s[a+1068>>2];k=s[a+1096>>2];l=s[a+1080>>2];r=v(v(i*k)-v(h*l));e=v(v(j*l)-v(g*k));f=s[a+1072>>2];b=v(v(1)/v(v(v(q*c)+v(d*r))+v(e*f)));m=v(s[a+1184>>2]-s[a+1120>>2]);n=v(s[a+1176>>2]-s[a+1112>>2]);p=v(s[a+1180>>2]-s[a+1116>>2]);e=v(v(m*v(v(v(g*c)-v(l*d))*b))+v(v(n*v(e*b))+v(p*v(v(v(k*d)-v(j*c))*b))));s[a+1264>>2]=e;c=v(v(m*v(v(v(l*f)-v(i*c))*b))+v(v(n*v(r*b))+v(p*v(v(v(h*c)-v(k*f))*b))));s[a+1260>>2]=c;b=v(v(m*v(v(v(i*d)-v(g*f))*b))+v(v(n*v(q*b))+v(p*v(v(v(j*f)-v(h*d))*b))));s[a+1256>>2]=b;s[a+840>>2]=b;d=s[a+680>>2];f=s[a+696>>2];a:{if(!(d>f)){if(!!(d>b)){o[a+856>>2]=2;b=v(b-d);break a}if(!!(f<b)){o[a+856>>2]=1;b=v(b-f);break a}}o[a+856>>2]=0;b=v(0)}s[a+844>>2]=c;s[a+824>>2]=b;b=s[a+684>>2];d=s[a+700>>2];b:{if(!(b>d)){c:{if(!(b>c)){if(!(d<c)){break c}o[a+860>>2]=1;b=v(c-d);break b}o[a+860>>2]=2;b=v(c-b);break b}}o[a+860>>2]=0;b=v(0)}s[a+848>>2]=e;s[a+828>>2]=b;t=a;b=s[a+688>>2];c=s[a+704>>2];d:{if(!(b>c)){e:{if(!(b>e)){if(!(c<e)){break e}o[a+864>>2]=1;b=v(e-c);break d}o[a+864>>2]=2;b=v(e-b);break d}}o[a+864>>2]=0;b=v(0)}s[t+832>>2]=b}function Ld(a,b,c,d,e,f,g,h,i,j){var k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=0,A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0);z=o[f+4>>2];o[a>>2]=o[f>>2];o[a+4>>2]=z;z=o[f+12>>2];o[a+8>>2]=o[f+8>>2];o[a+12>>2]=z;y=s[b+24>>2];t=s[b+20>>2];n=s[b+40>>2];l=s[b+36>>2];u=s[b+8>>2];w=s[b>>2];A=s[b+4>>2];B=s[b+16>>2];k=s[b+32>>2];q=s[d+4>>2];p=s[d+8>>2];x=s[d>>2];o[a+28>>2]=0;C=k;k=s[a+8>>2];m=s[a+4>>2];r=v(v(q*k)-v(p*m));D=l;E=p;p=s[a>>2];l=v(v(E*p)-v(k*x));q=v(v(m*x)-v(q*p));x=v(v(v(C*r)+v(D*l))+v(n*q));s[a+24>>2]=x;y=v(v(v(r*B)+v(l*t))+v(q*y));s[a+20>>2]=y;q=v(v(v(r*w)+v(A*l))+v(q*u));s[a+16>>2]=q;u=s[c+24>>2];w=s[c+20>>2];A=s[c+40>>2];B=s[c+36>>2];F=s[c+8>>2];G=s[c>>2];C=s[c+4>>2];D=s[c+16>>2];n=s[c+32>>2];r=s[e+4>>2];l=s[e>>2];t=s[e+8>>2];o[a+44>>2]=0;E=n;n=v(v(m*t)-v(k*r));k=v(v(k*l)-v(p*t));m=v(v(p*r)-v(m*l));p=v(v(v(E*n)+v(B*k))+v(A*m));s[a+40>>2]=p;r=v(v(v(n*D)+v(k*w))+v(m*u));s[a+36>>2]=r;k=v(v(v(G*n)+v(C*k))+v(m*F));s[a+32>>2]=k;m=s[g+8>>2];l=s[g+4>>2];t=s[g>>2];o[a+60>>2]=0;t=v(t*q);s[a+48>>2]=t;l=v(l*y);s[a+52>>2]=l;m=v(m*x);s[a+56>>2]=m;n=s[i+8>>2];u=s[i+4>>2];w=s[i>>2];o[a+76>>2]=0;w=v(w*k);s[a+64>>2]=w;u=v(u*r);s[a+68>>2]=u;n=v(n*p);s[a+72>>2]=n;s[a+80>>2]=v(v(v(v(v(q*t)+v(y*l))+v(x*m))+h)+j)+v(v(v(k*w)+v(r*u))+v(p*n))}function $H(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=v(0),n=0,p=v(0),q=0,r=0,t=0,u=v(0),w=v(0),x=v(0),y=0,z=0,A=0,B=v(0),C=v(0),D=v(0),E=0,F=v(0),G=v(0),H=0,I=v(0),J=v(0),K=v(0),L=v(0),N=v(0),O=v(0);j=M-2048|0;M=j;if((d|0)>=1){while(1){q=o[a+92>>2];if((q|0)>=1){g=y<<4;r=g+c|0;h=b+g|0;z=h;k=o[a+100>>2];A=o[a+120>>2];D=v(-0xde0b6b000000000);t=0;g=q;while(1){m=v(-3.4028234663852886e+38);i=-1;n=q-t|0;E=(n|0)<1;a:{if(E){break a}e=(g|0)<128?g:128;H=(e|0)>1?e:1;u=s[z+8>>2];w=s[h+4>>2];x=s[h>>2];e=0;while(1){I=s[k>>2];J=s[a+12>>2];K=s[k+4>>2];L=s[a+16>>2];N=s[k+8>>2];B=s[A>>2];O=s[a+20>>2];C=v(l[o[o[a>>2]+48>>2]](a));p=s[h>>2];F=s[h+4>>2];G=s[z+8>>2];f=(e<<4)+j|0;o[f+12>>2]=0;s[f+8>>2]=v(N+v(B*v(u*O)))-v(C*G);s[f+4>>2]=v(K+v(B*v(w*L)))-v(C*F);s[f>>2]=v(I+v(B*v(x*J)))-v(C*p);A=A+4|0;k=k+16|0;u=G;w=F;x=p;e=e+1|0;if((H|0)!=(e|0)){continue}break}if(E){break a}n=(n|0)<128?n:128;u=s[z+8>>2];w=s[h+4>>2];x=s[h>>2];e=0;while(1){f=(e<<4)+j|0;p=v(v(v(x*s[f>>2])+v(w*s[f+4>>2]))+v(u*s[f+8>>2]));f=p>m;m=f?p:m;i=f?e:i;e=e+1|0;if((n|0)!=(e|0)){continue}break}}if(m>D){e=(i<<4)+j|0;i=o[e+12>>2];o[r+8>>2]=o[e+8>>2];o[r+12>>2]=i;i=o[e+4>>2];o[r>>2]=o[e>>2];o[r+4>>2]=i;D=m}g=g+ -128|0;t=t+128|0;if((q|0)>(t|0)){continue}break}}y=y+1|0;if((y|0)!=(d|0)){continue}break}}M=j+2048|0}function of(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=M-16|0;M=i;a:{b:{c:{d:{e:{f:{e=c-b|0;switch(e|0){case 1:break d;case 2:break e;case 0:break f;default:break b}}o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;break a}c=o[o[a+92>>2]+(b<<2)>>2];e=o[c+204>>2];h=o[c+88>>2];g=o[c+200>>2];f=o[c+92>>2];if(!((h|0)!=(g|0)|(f|0)!=(e|0))){e=f;if(o[c+96>>2]==o[c+208>>2]){break c}}b=c+112|0;e=f-e|0;f=h-g|0;g:{if(!(e|f)){f=o[c+96>>2]>o[c+208>>2];e=f?b:c;o[e+4>>2]=e;o[e>>2]=e;o[d+8>>2]=e;o[d+4>>2]=e;o[d>>2]=e;b=f?c:b;c=e;break g}o[c+4>>2]=b;o[c>>2]=b;o[c+116>>2]=c;o[c+112>>2]=c;h=(e|0)<0;g=h&!f;f=(f|0)<0;g=g|f;o[d+4>>2]=g?b:c;o[d>>2]=g?c:b;if(!(f&!e?0:!h)){o[d+8>>2]=c;e=b;break g}o[d+8>>2]=b;e=c}o[d+12>>2]=e;a=pf(a,c,b);o[a+4>>2]=a;o[a>>2]=a;o[c+8>>2]=a;a=o[a+8>>2];o[a+4>>2]=a;o[a>>2]=a;o[b+8>>2]=a;break a}c=o[o[a+92>>2]+(b<<2)>>2]}o[c+8>>2]=0;o[c+4>>2]=c;o[c>>2]=c;o[d+12>>2]=c;o[d+8>>2]=c;o[d+4>>2]=c;o[d>>2]=c;break a}f=((e|0)/2|0)+b|0;e=f;h:{if((e|0)>=(c|0)){break h}g=o[a+92>>2];e=o[(g+(f<<2)|0)+ -4>>2];j=o[e+88>>2];k=o[e+96>>2];l=o[e+92>>2];e=f;while(1){h=o[g+(e<<2)>>2];if(o[h+88>>2]!=(j|0)|o[h+92>>2]!=(l|0)|o[h+96>>2]!=(k|0)){break h}e=e+1|0;if((e|0)<(c|0)){continue}break}e=c}of(a,b,f,d);o[i+8>>2]=0;o[i+12>>2]=0;o[i>>2]=0;o[i+4>>2]=0;of(a,e,c,i);ky(a,d,i)}M=i+16|0}function rC(a){var b=v(0),c=v(0),d=v(0),e=v(0),f=v(0);m[a+297|0]=0;o[a+1088>>2]=0;d=s[a+192>>2];e=s[a+196>>2];a:{if(!(d<=e)){break a}b=s[a+892>>2];c=s[a+908>>2];f=s[a+924>>2];c=_a(v(v(v(s[a+832>>2]*b)+v(s[a+848>>2]*c))+v(s[a+864>>2]*f)),v(v(v(s[a+828>>2]*b)+v(s[a+844>>2]*c))+v(s[a+860>>2]*f)));b:{if(d>=e){break b}if(!!(c<d)){b=xa(v(d-c),v(6.2831854820251465));c:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break c}if(!(b>v(3.1415927410125732))){break c}b=v(b+v(-6.2831854820251465))}f=v(w(b));b=xa(v(e-c),v(6.2831854820251465));d:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break d}if(!(b>v(3.1415927410125732))){break d}b=v(b+v(-6.2831854820251465))}c=f<v(w(b))?c:v(c+v(6.2831854820251465));break b}if(!(c>e)){break b}b=xa(v(c-e),v(6.2831854820251465));e:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break e}if(!(b>v(3.1415927410125732))){break e}b=v(b+v(-6.2831854820251465))}f=v(w(b));b=xa(v(c-d),v(6.2831854820251465));f:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break f}if(!(b>v(3.1415927410125732))){break f}b=v(b+v(-6.2831854820251465))}c=v(w(b))<f?v(c+v(-6.2831854820251465)):c}s[a+1084>>2]=c;if(!!(c<d)){m[a+297|0]=1;s[a+1088>>2]=c-d;return}if(!(c>e)){break a}m[a+297|0]=1;s[a+1088>>2]=c-e}}function $a(a,b,c){var d=0,e=0;e=M-256|0;M=e;d=o[b+212>>2];a:{if((d|0)>-1){break a}b:{d=o[b+236>>2];if(!(d&2)){break b}d=d<<30>>31&b;if(p[d+204|0]&2?0:s[d+344>>2]==v(0)){break b}d=o[a+8>>2];$(e+8|0,0,244);MB(ej(a+4|0,e+8|0),b,c);o[b+212>>2]=d;break a}d=o[a+188>>2];if((d|0)>-1){break a}o[a+188>>2]=o[a+8>>2];$(e+8|0,0,244);b=ej(a+4|0,e+8|0);o[b+88>>2]=0;o[b+92>>2]=0;o[b+80>>2]=0;o[b+84>>2]=0;o[b+72>>2]=0;o[b+76>>2]=0;o[b+64>>2]=0;o[b+68>>2]=0;o[b+144>>2]=0;o[b+148>>2]=0;o[b+152>>2]=0;o[b+156>>2]=0;o[b+160>>2]=0;o[b+164>>2]=0;o[b+168>>2]=0;o[b+172>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;o[b>>2]=1065353216;o[b+12>>2]=0;o[b+16>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0;o[b+20>>2]=1065353216;o[b+32>>2]=0;o[b+36>>2]=0;o[b+44>>2]=0;o[b+48>>2]=0;o[b+40>>2]=1065353216;o[b+52>>2]=0;o[b+56>>2]=0;o[b+60>>2]=0;o[b+136>>2]=0;o[b+140>>2]=0;o[b+240>>2]=0;o[b+128>>2]=0;o[b+132>>2]=0;o[b+120>>2]=1065353216;o[b+124>>2]=0;o[b+112>>2]=1065353216;o[b+116>>2]=1065353216;o[b+104>>2]=1065353216;o[b+108>>2]=0;o[b+96>>2]=1065353216;o[b+100>>2]=1065353216;o[b+232>>2]=0;o[b+236>>2]=0;o[b+224>>2]=0;o[b+228>>2]=0;o[b+216>>2]=0;o[b+220>>2]=0;o[b+208>>2]=0;o[b+212>>2]=0;o[b+200>>2]=0;o[b+204>>2]=0;o[b+192>>2]=0;o[b+196>>2]=0;o[b+184>>2]=0;o[b+188>>2]=0;o[b+176>>2]=0;o[b+180>>2]=0;d=o[a+188>>2]}M=e+256|0;return d}function ul(a,b,c,d,e,f){var g=0;o[a+4>>2]=b;o[a>>2]=7348;b=o[c+12>>2];o[a+16>>2]=o[c+8>>2];o[a+20>>2]=b;b=o[c+4>>2];o[a+8>>2]=o[c>>2];o[a+12>>2]=b;b=o[c+28>>2];o[a+32>>2]=o[c+24>>2];o[a+36>>2]=b;b=o[c+20>>2];o[a+24>>2]=o[c+16>>2];o[a+28>>2]=b;b=o[c+44>>2];o[a+48>>2]=o[c+40>>2];o[a+52>>2]=b;b=o[c+36>>2];o[a+40>>2]=o[c+32>>2];o[a+44>>2]=b;g=o[c+60>>2];b=a- -64|0;o[b>>2]=o[c+56>>2];o[b+4>>2]=g;b=o[c+52>>2];o[a+56>>2]=o[c+48>>2];o[a+60>>2]=b;b=o[d+12>>2];o[a+80>>2]=o[d+8>>2];o[a+84>>2]=b;b=o[d+4>>2];o[a+72>>2]=o[d>>2];o[a+76>>2]=b;b=o[d+28>>2];o[a+96>>2]=o[d+24>>2];o[a+100>>2]=b;b=o[d+20>>2];o[a+88>>2]=o[d+16>>2];o[a+92>>2]=b;b=o[d+44>>2];o[a+112>>2]=o[d+40>>2];o[a+116>>2]=b;b=o[d+36>>2];o[a+104>>2]=o[d+32>>2];o[a+108>>2]=b;b=o[d+60>>2];o[a+128>>2]=o[d+56>>2];o[a+132>>2]=b;b=o[d+52>>2];o[a+120>>2]=o[d+48>>2];o[a+124>>2]=b;b=o[e+12>>2];o[a+144>>2]=o[e+8>>2];o[a+148>>2]=b;b=o[e+4>>2];o[a+136>>2]=o[e>>2];o[a+140>>2]=b;b=o[e+28>>2];o[a+160>>2]=o[e+24>>2];o[a+164>>2]=b;b=o[e+20>>2];o[a+152>>2]=o[e+16>>2];o[a+156>>2]=b;b=o[e+44>>2];o[a+176>>2]=o[e+40>>2];o[a+180>>2]=b;b=o[e+36>>2];o[a+168>>2]=o[e+32>>2];o[a+172>>2]=b;b=o[e+60>>2];o[a+192>>2]=o[e+56>>2];o[a+196>>2]=b;b=o[e+52>>2];o[a+184>>2]=o[e+48>>2];o[a+188>>2]=b;o[a+208>>2]=0;s[a+204>>2]=f;o[a+200>>2]=1065353216}function Cy(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0,s=0,t=0,v=0;r=M-16|0;M=r;s=u(d,3);if((d|0)>=1){f=(s|0)>1?s:1;while(1){j=o[(h<<2)+c>>2];g=(j|0)>(g|0)?j:g;h=h+1|0;if((f|0)!=(h|0)){continue}break}}j=g+1|0;f=u(j,j);if(f){o[7717]=o[7717]+1;k=l[o[6606]](f,16)|0;$(k,0,f)}a:{if((g|0)<=-1){break a}h=0;o[7717]=o[7717]+1;q=l[o[6606]](j<<4,16)|0;while(1){f=r;n=o[f+4>>2];i=(h<<4)+q|0;o[i>>2]=o[f>>2];o[i+4>>2]=n;n=o[f+12>>2];o[i+8>>2]=o[f+8>>2];o[i+12>>2]=n;f=(g|0)!=(h|0);h=h+1|0;if(f){continue}break}if((g|0)<0){break a}f=u(g,3)+3|0;i=(((f|0)>3?f:3)+ -1>>>0)/3|0;h=0;g=0;while(1){f=(h<<2)+b|0;n=o[f+4>>2];t=o[f>>2];v=o[f+8>>2];f=(g<<4)+q|0;o[f+12>>2]=0;o[f+8>>2]=v;o[f>>2]=t;o[f+4>>2]=n;h=h+3|0;f=(g|0)!=(i|0);g=g+1|0;if(f){continue}break}}h=0;o[7717]=o[7717]+1;a=Zb(l[o[6606]](1252,16)|0,a,j,q,0);if((d|0)>=1){while(1){d=(h<<2)+c|0;b=o[d+4>>2];f=o[d>>2];g=u(f,j);d=o[d+8>>2];i=(g+d|0)+k|0;if(!p[i|0]){m[i|0]=1;m[(f+u(d,j)|0)+k|0]=1;va(a,d,f,0,0)}i=u(b,j);n=(i+f|0)+k|0;if(!p[n|0]){m[n|0]=1;m[(b+g|0)+k|0]=1;va(a,f,b,0,0)}g=(b+u(d,j)|0)+k|0;if(!p[g|0]){m[g|0]=1;m[(d+i|0)+k|0]=1;va(a,b,d,0,0)}Va(a,f,b,d,0);h=h+3|0;if((h|0)<(s|0)){continue}break}}if(e){Oi(a)}if(q){if(q){o[7718]=o[7718]+1;l[o[6607]](q)}}if(k){if(k){o[7718]=o[7718]+1;l[o[6607]](k)}}M=r+16|0;return a}function aI(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=0,n=0,p=0,q=v(0),r=v(0),t=0,u=0,w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);m=M-2048|0;M=m;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;e=s[c>>2];j=s[c+4>>2];h=s[c+8>>2];i=v(v(v(e*e)+v(j*j))+v(h*h));k=v(1);a:{if(i<v(1.4210854715202004e-14)){break a}k=h;h=v(v(1)/v(C(i)));q=v(k*h);r=v(j*h);k=v(e*h)}j=k;n=o[b+92>>2];if((n|0)>=1){c=o[b+100>>2];t=o[b+120>>2];h=v(-0xde0b6b000000000);p=n;while(1){g=n-u|0;b:{if((g|0)>0){d=(p|0)<128?p:128;w=(d|0)>1?d:1;d=0;while(1){k=s[c>>2];x=s[b+12>>2];y=s[c+4>>2];z=s[b+16>>2];A=s[c+8>>2];e=s[t>>2];B=s[b+20>>2];i=v(l[o[o[b>>2]+48>>2]](b));f=(d<<4)+m|0;o[f+12>>2]=0;s[f+8>>2]=v(A+v(e*v(q*B)))-v(q*i);s[f+4>>2]=v(y+v(e*v(r*z)))-v(r*i);s[f>>2]=v(k+v(e*v(j*x)))-v(j*i);t=t+4|0;c=c+16|0;d=d+1|0;if((w|0)!=(d|0)){continue}break}f=0;d=-1;e=v(-3.4028234663852886e+38);if((g|0)<1){break b}w=(g|0)<128?g:128;while(1){g=(f<<4)+m|0;i=v(v(v(j*s[g>>2])+v(r*s[g+4>>2]))+v(q*s[g+8>>2]));g=i>e;e=g?i:e;d=g?f:d;f=f+1|0;if((w|0)!=(f|0)){continue}break}break b}e=v(-3.4028234663852886e+38);d=-1}if(e>h){d=(d<<4)+m|0;f=o[d+12>>2];o[a+8>>2]=o[d+8>>2];o[a+12>>2]=f;f=o[d+4>>2];o[a>>2]=o[d>>2];o[a+4>>2]=f;h=e}p=p+ -128|0;u=u+128|0;if((n|0)>(u|0)){continue}break}}M=m+2048|0}function CE(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0;k=M-16|0;M=k;c=o[a+136>>2];if(l[o[o[c>>2]+56>>2]](c)){c=o[a+136>>2];d=l[o[o[c>>2]+28>>2]](c)|0;c=o[d+4>>2];if((c|0)>=2){bc(d,k+8|0,0,c+ -1|0);c=o[d+4>>2]}if((c|0)>=1){while(1){j=o[d+12>>2]+(n<<4)|0;f=o[j+4>>2];h=g;g=o[j>>2];a:{b:{if((e|0)==(f|0)?(h|0)==(g|0):0){break b}e=o[g+48>>2];h=o[f+48>>2];if(s[e>>2]<=s[h+16>>2]^1|s[e+16>>2]>=s[h>>2]^1|(s[e+4>>2]<=s[h+20>>2]^1|s[e+20>>2]>=s[h+4>>2]^1)){break b}if(!(s[e+8>>2]<=s[h+24>>2])){break b}if(s[e+24>>2]>=s[h+8>>2]){break a}}c=o[a+136>>2];l[o[o[c>>2]+32>>2]](c,j,b);o[j>>2]=0;o[j+4>>2]=0;i=i+1|0;c=o[d+4>>2]}e=f;n=n+1|0;if((n|0)<(c|0)){continue}break}if((c|0)>=2){bc(d,k,0,c+ -1|0);c=o[d+4>>2]}f=c-i|0;if((i|0)<=-1){if(o[d+8>>2]<(f|0)){c:{if(!f){i=0;a=c;break c}o[7717]=o[7717]+1;i=l[o[6606]](f<<4,16)|0;a=o[d+4>>2]}if((a|0)>=1){b=0;while(1){e=b<<4;g=e+i|0;e=e+o[d+12>>2]|0;o[g>>2]=o[e>>2];o[g+4>>2]=o[e+4>>2];o[g+8>>2]=o[e+8>>2];o[g+12>>2]=o[e+12>>2];b=b+1|0;if((a|0)!=(b|0)){continue}break}}a=o[d+12>>2];if(a){if(p[d+16|0]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[d+12>>2]=0}o[d+12>>2]=i;m[d+16|0]=1;o[d+8>>2]=f}while(1){a=o[d+12>>2]+(c<<4)|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;c=c+1|0;if((f|0)!=(c|0)){continue}break}}c=f}o[d+4>>2]=c}M=k+16|0}function Yf(a,b,c){var d=0,e=0,f=0,g=0;o[a+4>>2]=1065353216;o[a+8>>2]=1065353216;o[a+48>>2]=0;o[a>>2]=16376;m[a+36|0]=1;o[a+12>>2]=1065353216;o[a+16>>2]=0;o[a+32>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0;m[a+100|0]=1;o[a+96>>2]=0;m[a+120|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;o[a+116>>2]=0;m[a+140|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;o[a+136>>2]=0;m[a+160|0]=1;o[a+128>>2]=0;o[a+132>>2]=0;o[a+168>>2]=0;m[a+164|0]=b;o[a+148>>2]=0;o[a+152>>2]=0;o[a+156>>2]=0;m[a+165|0]=c;o[7717]=o[7717]+1;f=l[o[6606]](32,16)|0;g=o[a+24>>2];if((g|0)>=1){while(1){b=e<<5;c=b+f|0;b=b+o[a+32>>2]|0;d=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=d;d=o[b+28>>2];o[c+24>>2]=o[b+24>>2];o[c+28>>2]=d;d=o[b+20>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=d;d=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=d;e=e+1|0;if((g|0)!=(e|0)){continue}break}}b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=f;m[a+36|0]=1;o[a+28>>2]=1;b=f+(o[a+24>>2]<<5)|0;o[b+24>>2]=2;o[b+28>>2]=0;o[b+16>>2]=0;o[b+20>>2]=16;o[b+8>>2]=12;o[b+12>>2]=0;o[b>>2]=0;o[b+4>>2]=0;o[a+24>>2]=o[a+24>>2]+1;c=p[a+164|0];f=o[(c?128:148)+a>>2];b=o[a+32>>2];o[b+24>>2]=c?2:3;o[b+4>>2]=0;e=12;o[b+8>>2]=c?12:6;o[b>>2]=(f|0)/3;a:{if(p[a+165|0]){e=16;a=o[a+88>>2];break a}a=o[a+108>>2]/3|0}o[b+20>>2]=e;o[b+16>>2]=0;o[b+12>>2]=a}function Ti(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=M-48|0;M=d;o[d+40>>2]=0;c=d;o[c+32>>2]=0;o[c+36>>2]=0;o[c+24>>2]=0;o[c+28>>2]=0;o[c+16>>2]=0;o[c+20>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=0;o[c+4>>2]=0;b=b?b:o[o[a+880>>2]>>2];g=o[a+732>>2];a:{if((g|0)!=o[a+736>>2]){break a}h=g?g<<1:1;if((g|0)>=(h|0)){break a}if(h){o[7717]=o[7717]+1;j=l[o[6606]](u(h,52),16)|0;g=o[a+732>>2]}if((g|0)>=1){while(1){c=u(i,52);e=c+j|0;c=c+o[a+740>>2]|0;f=o[c+4>>2];o[e>>2]=o[c>>2];o[e+4>>2]=f;o[e+48>>2]=o[c+48>>2];f=o[c+44>>2];o[e+40>>2]=o[c+40>>2];o[e+44>>2]=f;f=o[c+36>>2];o[e+32>>2]=o[c+32>>2];o[e+36>>2]=f;f=o[c+28>>2];o[e+24>>2]=o[c+24>>2];o[e+28>>2]=f;f=o[c+20>>2];o[e+16>>2]=o[c+16>>2];o[e+20>>2]=f;f=o[c+12>>2];o[e+8>>2]=o[c+8>>2];o[e+12>>2]=f;i=i+1|0;if((i|0)!=(g|0)){continue}break}}c=o[a+740>>2];if(c){if(p[a+744|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+740>>2]=0}o[a+740>>2]=j;o[a+736>>2]=h;m[a+744|0]=1;g=o[a+732>>2]}c=o[a+740>>2]+u(g,52)|0;o[c+4>>2]=b;o[c>>2]=0;b=o[d+4>>2];o[c+8>>2]=o[d>>2];o[c+12>>2]=b;b=o[d+12>>2];o[c+16>>2]=o[d+8>>2];o[c+20>>2]=b;b=o[d+20>>2];o[c+24>>2]=o[d+16>>2];o[c+28>>2]=b;b=o[d+28>>2];o[c+32>>2]=o[d+24>>2];o[c+36>>2]=b;b=o[d+36>>2];o[c+40>>2]=o[d+32>>2];o[c+44>>2]=b;o[c+48>>2]=o[d+40>>2];o[a+732>>2]=o[a+732>>2]+1;M=d+48|0}function jK(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=M-160|0;M=f;g=o[a+12>>2];a:{if(!g){break a}h=o[c+4>>2];i=o[b+4>>2];o[e+4>>2]=g;o[f+152>>2]=1566444395;b=o[b+12>>2];g=o[b+12>>2];o[f+32>>2]=o[b+8>>2];o[f+36>>2]=g;g=o[b+4>>2];o[f+24>>2]=o[b>>2];o[f+28>>2]=g;g=o[b+28>>2];o[f+48>>2]=o[b+24>>2];o[f+52>>2]=g;g=o[b+20>>2];o[f+40>>2]=o[b+16>>2];o[f+44>>2]=g;j=o[b+44>>2];g=f- -64|0;o[g>>2]=o[b+40>>2];o[g+4>>2]=j;g=o[b+36>>2];o[f+56>>2]=o[b+32>>2];o[f+60>>2]=g;g=o[b+60>>2];o[f+80>>2]=o[b+56>>2];o[f+84>>2]=g;g=o[b+52>>2];o[f+72>>2]=o[b+48>>2];o[f+76>>2]=g;b=o[c+12>>2];c=o[b+12>>2];o[f+96>>2]=o[b+8>>2];o[f+100>>2]=c;c=o[b+4>>2];o[f+88>>2]=o[b>>2];o[f+92>>2]=c;c=o[b+20>>2];o[f+104>>2]=o[b+16>>2];o[f+108>>2]=c;c=o[b+28>>2];o[f+112>>2]=o[b+24>>2];o[f+116>>2]=c;c=o[b+36>>2];o[f+120>>2]=o[b+32>>2];o[f+124>>2]=c;c=o[b+44>>2];o[f+128>>2]=o[b+40>>2];o[f+132>>2]=c;c=o[b+52>>2];o[f+136>>2]=o[b+48>>2];o[f+140>>2]=c;c=o[b+60>>2];o[f+144>>2]=o[b+56>>2];o[f+148>>2]=c;b=f+8|0;o[b+8>>2]=h;o[b+4>>2]=i;o[b>>2]=6964;xl(b,f+24|0,e,o[d+20>>2],0);if(!p[a+8|0]){break a}a=o[e+4>>2];if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0)}M=f+160|0}function sj(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,n=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;j=M-80|0;M=j;o[j+32>>2]=1133903872;o[j+24>>2]=0;o[j+28>>2]=1036831949;o[j+72>>2]=0;o[j+76>>2]=0;o[j+52>>2]=0;o[j+56>>2]=0;o[j+44>>2]=0;o[j+48>>2]=1045220557;o[j+16>>2]=1065353216;o[j+20>>2]=-1082130432;o[j+36>>2]=1065353216;o[j+40>>2]=1056964608;o[j+64>>2]=0;m[j+60|0]=0;v=b+4|0;t=a+680|0;while(1){l=p[(r+t|0)+108|0];n=r<<2;q=o[(n+t|0)+176>>2];a:{if(!q){k=l;l=1;if(!k){break a}}o[j+72>>2]=q;o[j+56>>2]=0;k=a+n|0;o[j+68>>2]=o[k+840>>2];o[j+64>>2]=o[k+824>>2];n=o[a+732>>2];m[j+60|0]=l;o[j+36>>2]=n;o[j+20>>2]=o[k+696>>2];o[j+40>>2]=o[a+728>>2];l=o[k+680>>2];o[j+32>>2]=0;o[j+16>>2]=l;o[j+28>>2]=o[k+808>>2];o[j+24>>2]=o[k+792>>2];o[j>>2]=o[k+1064>>2];o[j+4>>2]=o[k+1080>>2];l=o[k+1096>>2];o[j+12>>2]=0;o[j+8>>2]=l;l=j;q=o[a+1304>>2]>>u(r,3);n=k+740|0;b:{if(q&1){break b}n=o[b+32>>2]}o[l+44>>2]=o[n>>2];o[j+52>>2]=o[(q&2?k+772|0:o[b+32>>2])>>2];o[j+48>>2]=o[(q&4?k+756|0:v)>>2];k=a;w=j+16|0;l=d;q=e;n=f;x=g;y=h;z=i;A=b;B=c;C=j;s=0;c:{if(!p[a+1301|0]){break c}s=1;if(!o[((((r+1&255)>>>0)%3<<6)+a|0)+924>>2]){break c}s=!o[((((r+2&255)>>>0)%3<<6)+a|0)+924>>2]}c=Lf(k,w,l,q,n,x,y,z,A,B,C,0,s)+c|0}r=r+1|0;if((r|0)!=3){continue}break}M=j+80|0;return c}function Vk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),m=0,n=v(0),p=0,r=0,w=0,x=0;d=M-80|0;M=d;g=o[a+4>>2];l[o[o[g>>2]+16>>2]](g,d+28|0,d+24|0,d+20|0,d+16|0,d+12|0,d+8|0,d+4|0,d,b);m=o[d+12>>2]+u(o[d+8>>2],c)|0;p=o[d+20>>2];f=o[a+4>>2];g=f+12|0;h=o[d+28>>2];e=h;r=o[d>>2];w=q[m+4>>1];a:{if((r|0)==3){break a}w=o[m+8>>2]}x=o[d+16>>2];e=e+u(w,x)|0;b:{if(!p){i=v(s[e+4>>2]*s[f+8>>2]);j=v(s[e>>2]*s[f+4>>2]);k=s[f+12>>2];e=e+8|0;break b}i=v(s[f+8>>2]*v(t[e+8>>3]));j=v(s[f+4>>2]*v(t[e>>3]));k=v(t[e+16>>3]);e=g}n=s[e>>2];o[d+76>>2]=0;s[d+68>>2]=i;s[d+72>>2]=n*k;s[d+64>>2]=j;if((r|0)!=3){e=o[m+4>>2]}else{e=q[m+2>>1]}e=u(e,x)+h|0;c:{if(p){i=v(s[f+8>>2]*v(t[e+8>>3]));j=v(s[f+4>>2]*v(t[e>>3]));k=v(t[e+16>>3]);e=g;break c}i=v(s[e+4>>2]*s[f+8>>2]);j=v(s[e>>2]*s[f+4>>2]);k=s[f+12>>2];e=e+8|0}n=s[e>>2];o[d+60>>2]=0;s[d+52>>2]=i;s[d+56>>2]=n*k;s[d+48>>2]=j;if((r|0)!=3){e=o[m>>2]}else{e=q[m>>1]}h=u(e,x)+h|0;d:{if(p){k=v(t[h+16>>3]);i=v(s[f+8>>2]*v(t[h+8>>3]));j=v(s[f+4>>2]*v(t[h>>3]));break d}g=h+8|0;k=s[f+12>>2];i=v(s[h+4>>2]*s[f+8>>2]);j=v(s[h>>2]*s[f+4>>2])}n=s[g>>2];o[d+44>>2]=0;s[d+36>>2]=i;s[d+32>>2]=j;s[d+40>>2]=n*k;g=o[a+8>>2];l[o[o[g>>2]+8>>2]](g,d+32|0,b,c);a=o[a+4>>2];l[o[o[a>>2]+24>>2]](a,b);M=d+80|0}function ql(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{h=o[a+4>>2];c=o[a+48>>2];if((h|0)>=(c|0)){break a}b:{if(o[a+8>>2]>=(c|0)){b=o[a+12>>2];break b}d=h;if(c){o[7717]=o[7717]+1;b=l[o[6606]](c<<2,16)|0;d=o[a+4>>2]}f=o[a+12>>2];c:{d:{if((d|0)>=1){while(1){g=e<<2;o[g+b>>2]=o[f+g>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break d}}if(f){break d}break c}if(p[a+16|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}}o[a+12>>2]=b;m[a+16|0]=1;o[a+8>>2]=c}d=h<<2;g=c<<2;$(d+b|0,0,g-d|0);o[a+4>>2]=c;f=o[a+24>>2];if((f|0)<(c|0)){e:{if(o[a+28>>2]>=(c|0)){b=o[a+32>>2];break e}e=0;d=f;b=0;if(c){o[7717]=o[7717]+1;b=l[o[6606]](g,16)|0;d=o[a+24>>2]}i=o[a+32>>2];f:{if((d|0)>=1){while(1){j=e<<2;o[j+b>>2]=o[i+j>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break f}}if(i){break f}o[a+32>>2]=b;o[a+28>>2]=c;m[a+36|0]=1;break e}if(p[a+36|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+32>>2]=b;m[a+36|0]=1;o[a+28>>2]=c}d=f<<2;$(d+b|0,0,g-d|0)}o[a+24>>2]=c;if((c|0)>=1){$(o[a+12>>2],255,g);$(o[a+32>>2],255,g)}if((h|0)<1){break a}d=o[a+32>>2];f=o[a+72>>2];c=o[a+12>>2];e=0;while(1){b=o[f+(e<<3)>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;b=c+((o[a+48>>2]+ -1&(b>>16^b))<<2)|0;o[d+(e<<2)>>2]=o[b>>2];o[b>>2]=e;e=e+1|0;if((h|0)!=(e|0)){continue}break}}}function UE(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0;d=o[b+12>>2]>o[c+12>>2];i=d?b:c;j=o[i+12>>2];k=d?c:b;f=o[k+12>>2];b=j<<16|f;b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;q=b>>16^b;d=o[a+12>>2];n=q&d+ -1;b=o[o[a+44>>2]+(n<<2)>>2];a:{if((b|0)!=-1){e=o[a+16>>2];while(1){g=b<<4;c=g+e|0;if((j|0)==o[o[(e+g|0)+4>>2]+12>>2]?(f|0)==o[o[c>>2]+12>>2]:0){break a}b=o[o[a+64>>2]+(b<<2)>>2];if((b|0)!=-1){continue}break}}b=d;f=o[a+8>>2];c=f;b:{if((b|0)!=(c|0)){break b}c=d;e=b?b<<1:1;if((b|0)>=(e|0)){break b}c:{if(!e){c=0;b=d;break c}o[7717]=o[7717]+1;c=l[o[6606]](e<<4,16)|0;b=o[a+8>>2]}j=b;if((j|0)>=1){b=0;while(1){h=b<<4;g=h+c|0;h=h+o[a+16>>2]|0;o[g>>2]=o[h>>2];o[g+4>>2]=o[h+4>>2];o[g+8>>2]=o[h+8>>2];o[g+12>>2]=o[h+12>>2];b=b+1|0;if((j|0)!=(b|0)){continue}break}}b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=c;o[a+12>>2]=e;m[a+20|0]=1;c=o[a+8>>2];b=e}o[a+8>>2]=c+1;e=o[a+16>>2];c=o[a+72>>2];if(c){l[o[o[c>>2]+8>>2]](c,k,i)|0;b=o[a+12>>2]}c=e+(f<<4)|0;if((d|0)<(b|0)){lk(a);n=o[a+12>>2]+ -1&q}d=o[k+12>>2]<o[i+12>>2];o[c>>2]=d?k:i;b=e+(f<<4)|0;o[b+8>>2]=0;o[b+12>>2]=0;o[b+4>>2]=d?i:k;b=o[a- -64>>2]+(f<<2)|0;a=o[a+44>>2]+(n<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=f}return c}function az(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{h=o[a+4>>2];c=o[a+48>>2];if((h|0)>=(c|0)){break a}b:{if(o[a+8>>2]>=(c|0)){e=o[a+12>>2];break b}b=h;if(c){o[7717]=o[7717]+1;e=l[o[6606]](c<<2,16)|0;b=o[a+4>>2]}g=o[a+12>>2];c:{d:{if((b|0)>=1){while(1){f=d<<2;o[f+e>>2]=o[g+f>>2];d=d+1|0;if((d|0)!=(b|0)){continue}break d}}if(g){break d}break c}if(p[a+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}}o[a+12>>2]=e;m[a+16|0]=1;o[a+8>>2]=c}b=h<<2;f=c<<2;$(b+e|0,0,f-b|0);o[a+4>>2]=c;g=o[a+24>>2];if((g|0)<(c|0)){e:{if(o[a+28>>2]>=(c|0)){e=o[a+32>>2];break e}d=0;b=g;e=0;if(c){o[7717]=o[7717]+1;e=l[o[6606]](f,16)|0;b=o[a+24>>2]}i=o[a+32>>2];f:{if((b|0)>=1){while(1){j=d<<2;o[j+e>>2]=o[i+j>>2];d=d+1|0;if((d|0)!=(b|0)){continue}break f}}if(i){break f}o[a+32>>2]=e;o[a+28>>2]=c;m[a+36|0]=1;break e}if(p[a+36|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+32>>2]=e;m[a+36|0]=1;o[a+28>>2]=c}b=g<<2;$(b+e|0,0,f-b|0)}o[a+24>>2]=c;if((c|0)>=1){$(o[a+12>>2],255,f);$(o[a+32>>2],255,f)}if((h|0)<1){break a}g=o[a+32>>2];c=o[a+72>>2];e=o[a+12>>2];d=0;while(1){f=d<<2;b=o[f+c>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;b=e+((o[a+48>>2]+ -1&(b>>16^b))<<2)|0;o[g+f>>2]=o[b>>2];o[b>>2]=d;d=d+1|0;if((h|0)!=(d|0)){continue}break}}}function rb(a,b,c,d,e){var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=0,q=v(0);p=M-16|0;M=p;f=s[a+52>>2];g=s[a+56>>2];j=s[a+48>>2];h=s[b>>2];k=s[b+4>>2];i=s[b+8>>2];o[e+60>>2]=0;s[e+56>>2]=g+v(i*d);s[e+52>>2]=f+v(k*d);s[e+48>>2]=j+v(h*d);n=s[c>>2];l=s[c+4>>2];m=s[c+8>>2];f=v(C(v(v(v(n*n)+v(l*l))+v(m*m))));g=v(f*d)>v(.7853981852531433)?v(v(.7853981852531433)/d):f;a:{if(!!(g<v(.0010000000474974513))){f=v(v(d*v(.5))+v(g*v(v(v(v(d*d)*d)*v(-.02083333395421505))*g)));break a}f=v(qa(v(v(g*v(.5))*d))/g)}ya(a,p);j=s[p+8>>2];h=s[p>>2];k=s[p+4>>2];i=s[p+12>>2];o[e+44>>2]=0;o[e+28>>2]=0;o[e+12>>2]=0;m=v(m*f);l=v(l*f);d=ra(v(v(g*d)*v(.5)));f=v(n*f);g=v(v(v(h*m)+v(v(i*l)+v(k*d)))-v(j*f));n=v(v(v(v(d*i)-v(f*h))-v(l*k))-v(m*j));q=v(v(v(v(m*i)+v(d*j))+v(f*k))-v(l*h));h=v(v(v(v(d*h)+v(f*i))+v(l*j))-v(m*k));f=v(v(1)/v(C(v(v(n*n)+v(v(q*q)+v(v(h*h)+v(g*g)))))));d=v(g*f);g=v(n*f);j=v(q*f);f=v(h*f);h=v(v(2)/v(v(g*g)+v(v(j*j)+v(v(f*f)+v(d*d)))));k=v(j*h);i=v(d*k);m=v(f*h);l=v(g*m);s[e+36>>2]=i+l;n=v(f*k);h=v(d*h);q=v(g*h);s[e+32>>2]=n-q;s[e+24>>2]=i-l;i=v(f*h);g=v(g*k);s[e+16>>2]=i+g;s[e+8>>2]=n+q;s[e+4>>2]=i-g;f=v(f*m);d=v(d*h);s[e+40>>2]=v(1)-v(f+d);g=f;f=v(j*k);s[e+20>>2]=v(1)-v(g+f);s[e>>2]=v(1)-v(d+f);M=p+16|0}function fE(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0);c=s[a+312>>2];i=s[a+444>>2];d=kf(v(v(1)-i),b);c=v(c*d);s[a+312>>2]=c;g=v(d*s[a+316>>2]);s[a+316>>2]=g;d=v(d*s[a+320>>2]);s[a+320>>2]=d;f=s[a+328>>2];j=s[a+448>>2];e=kf(v(v(1)-j),b);b=v(f*e);s[a+328>>2]=b;f=v(e*s[a+332>>2]);s[a+332>>2]=f;e=v(e*s[a+336>>2]);s[a+336>>2]=e;a:{if(!p[a+452|0]){break a}if(!(v(v(v(b*b)+v(f*f))+v(e*e))<s[a+464>>2]^1|v(v(v(c*c)+v(g*g))+v(d*d))<s[a+460>>2]^1)){h=s[a+456>>2];e=v(e*h);s[a+336>>2]=e;f=v(f*h);s[a+332>>2]=f;b=v(b*h);s[a+328>>2]=b;d=v(d*h);s[a+320>>2]=d;g=v(g*h);s[a+316>>2]=g;c=v(c*h);s[a+312>>2]=c}h=v(C(v(v(v(c*c)+v(g*g))+v(d*d))));b:{if(!(h<i)){break b}if(!!(h>v(.004999999888241291))){i=d;d=v(v(1)/h);s[a+320>>2]=i-v(v(i*d)*v(.004999999888241291));s[a+316>>2]=g-v(v(g*d)*v(.004999999888241291));s[a+312>>2]=c-v(v(c*d)*v(.004999999888241291));break b}o[a+312>>2]=0;o[a+316>>2]=0;o[a+320>>2]=0;o[a+324>>2]=0}c=v(C(v(v(v(b*b)+v(f*f))+v(e*e))));if(!(c<j)){break a}if(!!(c>v(.004999999888241291))){c=v(v(1)/c);s[a+336>>2]=e-v(v(e*c)*v(.004999999888241291));s[a+332>>2]=f-v(v(f*c)*v(.004999999888241291));s[a+328>>2]=b-v(v(b*c)*v(.004999999888241291));return}o[a+328>>2]=0;o[a+332>>2]=0;o[a+336>>2]=0;o[a+340>>2]=0}}function Xb(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0;p=o[a+16>>2];d=o[b+16>>2];if((p|0)!=(d|0)){return p-d|0}if(!p){return 0}g=o[a+4>>2];i=o[b+8>>2];j=o[b+12>>2];n=o[a>>2];k=tL(j,0,n,0);h=N;j=tL(j,e,g,0);c=j+h|0;d=N+f|0;f=c;c=c>>>0<j>>>0?d+1|0:d;j=0;g=tL(i,j,g,e);d=f;f=N;e=d+f|0;if(e>>>0<f>>>0){c=c+1|0}d=e;f=c;e=0;c=g+k|0;if(c>>>0<g>>>0){e=e+1|0}k=e;e=e+d|0;d=f;d=e>>>0<k>>>0?d+1|0:d;f=e;e=c;k=0;i=tL(n,l,i,j);g=k+i|0;c=N+c|0;c=g>>>0<i>>>0?c+1|0:c;q=g;i=g;g=c;e=(e|0)==(c|0)&i>>>0<k>>>0|c>>>0<e>>>0;c=f+e|0;if(c>>>0<e>>>0){d=d+1|0}k=c;i=d;j=c;n=d;e=o[a+8>>2];a=o[a+12>>2];c=o[b>>2];h=o[b+4>>2];d=0;l=e;f=tL(h,d,e,0);b=N;m=a;e=0;h=tL(h,d,a,e);a=b+h|0;d=N;d=a>>>0<h>>>0?d+1|0:d;b=a;h=c;a=tL(c,0,m,e);m=N;b=m+b|0;c=d;c=b>>>0<m>>>0?c+1|0:c;e=c;d=0;c=a+f|0;if(c>>>0<a>>>0){d=d+1|0}m=d;f=d+b|0;d=e;d=f>>>0<m>>>0?d+1|0:d;b=f;f=-1;e=d;m=b;b=0;l=tL(h,r,l,s);a=b+l|0;d=c;c=c+N|0;c=a>>>0<l>>>0?c+1|0:c;l=a;h=a;a=c;b=(d|0)==(c|0)&h>>>0<b>>>0|c>>>0<d>>>0;d=m+b|0;if(d>>>0<b>>>0){e=e+1|0}c=d;b=e;a:{if((e|0)==(n|0)&j>>>0<c>>>0|n>>>0<e>>>0){break a}f=1;if((b|0)==(i|0)&k>>>0>d>>>0|i>>>0>b>>>0){break a}f=-1;if((a|0)==(g|0)&q>>>0<l>>>0|g>>>0<a>>>0){break a}f=(a|0)==(g|0)&q>>>0>l>>>0|g>>>0>a>>>0}return u(f,p)}function Bf(a){var b=0,c=0,d=v(0),e=v(0),f=0,g=v(0),h=v(0),i=0,j=v(0),k=v(0),l=v(0),m=v(0),n=0,p=0,q=v(0);f=o[a+712>>2];if((f|0)>=1){while(1){c=o[a+720>>2]+u(b,104)|0;o[c+72>>2]=0;o[c+76>>2]=0;o[c+80>>2]=0;o[c+84>>2]=0;b=b+1|0;if((f|0)!=(b|0)){continue}break}}p=o[a+752>>2];if((p|0)>=1){while(1){i=o[a+760>>2]+u(n,44)|0;b=o[i+12>>2];g=s[b+12>>2];c=o[i+8>>2];d=s[c+12>>2];f=o[i+16>>2];k=s[f+12>>2];l=s[b+16>>2];j=s[f+8>>2];h=s[c+16>>2];q=s[f+16>>2];e=s[c+8>>2];m=s[b+8>>2];o[i+32>>2]=0;m=v(m-e);k=v(k-d);g=v(g-d);e=v(j-e);d=v(v(m*k)-v(g*e));j=g;g=v(q-h);l=v(l-h);h=v(v(j*g)-v(l*k));e=v(v(l*e)-v(m*g));g=v(v(1)/v(C(v(v(d*d)+v(v(h*h)+v(e*e))))));s[i+28>>2]=d*g;s[i+24>>2]=e*g;s[i+20>>2]=h*g;s[c+80>>2]=d+s[c+80>>2];s[c+76>>2]=e+s[c+76>>2];s[c+72>>2]=h+s[c+72>>2];s[b+72>>2]=h+s[b+72>>2];s[b+76>>2]=e+s[b+76>>2];s[b+80>>2]=d+s[b+80>>2];s[f+72>>2]=h+s[f+72>>2];s[f+76>>2]=e+s[f+76>>2];s[f+80>>2]=d+s[f+80>>2];n=n+1|0;if((p|0)!=(n|0)){continue}break}}c=o[a+712>>2];if((c|0)>=1){f=o[a+720>>2];b=0;while(1){a=f+u(b,104)|0;d=s[a+72>>2];h=s[a+76>>2];e=s[a+80>>2];g=v(C(v(v(v(d*d)+v(h*h))+v(e*e))));if(!!(g>v(1.1920928955078125e-7))){j=d;d=v(v(1)/g);s[a+72>>2]=j*d;s[a+76>>2]=h*d;s[a+80>>2]=e*d}b=b+1|0;if((c|0)!=(b|0)){continue}break}}}function kB(a,b,c,d,e,f){var g=v(0),h=v(0),i=0,j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0);o[a+4>>2]=c;o[a>>2]=b;i=o[d+4>>2];o[a+8>>2]=o[d>>2];o[a+12>>2]=i;i=o[d+12>>2];o[a+16>>2]=o[d+8>>2];o[a+20>>2]=i;i=o[e+4>>2];o[a+24>>2]=o[e>>2];o[a+28>>2]=i;i=o[e+12>>2];o[a+32>>2]=o[e+8>>2];o[a+36>>2]=i;s[a+44>>2]=f;j=s[d+4>>2];g=v(j-s[b+56>>2]);f=s[e+8>>2];w=s[d+8>>2];h=v(w-s[b+60>>2]);m=s[e+4>>2];n=v(v(g*f)-v(h*m));p=s[e>>2];k=s[d>>2];l=v(k-s[b+52>>2]);q=v(v(h*p)-v(f*l));r=v(v(l*m)-v(g*p));x=v(v(v(s[b+264>>2]*n)+v(s[b+280>>2]*q))+v(r*s[b+296>>2]));k=v(k-s[c+52>>2]);j=v(j-s[c+56>>2]);t=v(v(m*k)-v(p*j));y=v(v(v(n*s[b+268>>2])+v(q*s[b+284>>2]))+v(r*s[b+300>>2]));z=v(f*v(v(g*x)-v(l*y)));u=g;g=v(v(v(n*s[b+272>>2])+v(q*s[b+288>>2]))+v(r*s[b+304>>2]));q=v(s[b+344>>2]+v(z+v(v(p*v(v(h*y)-v(u*g)))+v(m*v(v(l*g)-v(h*x))))));u=f;g=v(w-s[c+60>>2]);h=v(v(f*j)-v(m*g));f=v(v(p*g)-v(f*k));l=v(v(t*s[c+296>>2])+v(v(s[c+264>>2]*h)+v(s[c+280>>2]*f)));n=v(v(v(h*s[c+268>>2])+v(f*s[c+284>>2]))+v(t*s[c+300>>2]));f=v(v(v(h*s[c+272>>2])+v(f*s[c+288>>2]))+v(t*s[c+304>>2]));s[a+40>>2]=v(1)/v(q+v(s[c+344>>2]+v(v(u*v(v(j*l)-v(k*n)))+v(v(p*v(v(g*n)-v(j*f)))+v(m*v(v(k*f)-v(g*l)))))))}function yl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0);c=M-784|0;M=c;o[c+732>>2]=0;o[c+736>>2]=0;o[c+744>>2]=0;o[c+748>>2]=0;o[c+740>>2]=1065353216;o[c+764>>2]=0;o[c+768>>2]=0;o[c+760>>2]=1065353216;o[c+772>>2]=0;o[c+776>>2]=0;o[c+780>>2]=0;o[c+724>>2]=0;o[c+728>>2]=0;o[c+720>>2]=1065353216;o[c+752>>2]=0;o[c+756>>2]=0;o[c+712>>2]=0;o[c+716>>2]=0;o[c+544>>2]=6896;o[c+708>>2]=o[a+200>>2];e=o[a+196>>2];d=c+488|0;o[d+4>>2]=35;o[d+8>>2]=0;o[d>>2]=13316;o[d+44>>2]=1025758986;o[d+20>>2]=1065353216;o[d+24>>2]=0;o[d+12>>2]=1065353216;o[d+16>>2]=1065353216;o[d>>2]=13444;o[c+532>>2]=e;o[c+516>>2]=e;o[c+488>>2]=11556;o[c+492>>2]=8;d=de(c+384|0);o[c+388>>2]=1;o[c+384>>2]=6500;e=o[b+12>>2];o[c+448>>2]=o[b+8>>2];o[c+452>>2]=e;e=o[b+4>>2];o[c+440>>2]=o[b>>2];o[c+444>>2]=e;e=o[b+20>>2];o[c+456>>2]=o[b+16>>2];o[c+460>>2]=e;e=o[b+28>>2];o[c+464>>2]=o[b+24>>2];o[c+468>>2]=e;e=o[b+36>>2];o[c+472>>2]=o[b+32>>2];o[c+476>>2]=e;e=o[b+44>>2];o[c+480>>2]=o[b+40>>2];o[c+484>>2]=e;m[c+356|0]=0;o[c+332>>2]=953267991;b=c+8|0;o[b+12>>2]=c+384;o[b+8>>2]=c+488;o[b+4>>2]=c+24;o[b>>2]=6304;a:{if(!Dl(b,a+4|0,a+68|0,c+720|0,c+720|0,c+544|0)){break a}f=s[c+708>>2];if(!(s[a+200>>2]>f)){break a}s[a+200>>2]=f}Hb(d);M=c+784|0}function Bd(a,b,c,d){var e=0,f=0,g=0;e=M-128|0;M=e;o[e+108>>2]=16;o[e+112>>2]=981668463;o[e+104>>2]=b;o[e+100>>2]=c;o[e+96>>2]=1;o[e+60>>2]=0;m[e- -64|0]=1;m[e+92|0]=1;o[e+52>>2]=0;o[e+56>>2]=0;o[e+88>>2]=0;o[e+80>>2]=0;o[e+84>>2]=0;o[e+68>>2]=0;o[e+72>>2]=0;o[e+44>>2]=0;m[e+40|0]=1;m[e+36|0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;o[e+12>>2]=0;m[e+16|0]=1;o[e+4>>2]=0;o[e+8>>2]=0;o[e+116>>2]=c;zi(e,e+96|0,e+40|0);o[7717]=o[7717]+1;a=Zb(l[o[6606]](1252,16)|0,a,o[e+44>>2],o[e+60>>2],0);if(o[e+68>>2]>0){while(1){f=o[e+88>>2]+u(g,12)|0;b=o[f+8>>2];c=o[f>>2];f=o[f+4>>2];if((c|0)<(f|0)){va(a,c,f,0,0)}if((f|0)<(b|0)){va(a,f,b,0,0)}if((b|0)<(c|0)){va(a,b,c,0,0)}Va(a,c,f,b,0);g=g+1|0;if((g|0)<o[e+68>>2]){continue}break}}yi(e+40|0);if(d){Oi(a)}b=o[e+32>>2];if(b){if(p[e+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[e+32>>2]=0}o[e+32>>2]=0;m[e+36|0]=1;o[e+24>>2]=0;o[e+28>>2]=0;b=o[e+12>>2];if(b){if(p[e+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[e+12>>2]=0}b=o[e+88>>2];if(b){if(p[e+92|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[e+88>>2]=0}o[e+88>>2]=0;m[e+92|0]=1;o[e+80>>2]=0;o[e+84>>2]=0;b=o[e+60>>2];if(b){if(p[e+64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[e+60>>2]=0}M=e+128|0;return a}function Ux(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;if(Fa(a,o[b+8>>2],e)){if(!(o[b+28>>2]==1|o[b+4>>2]!=(c|0))){o[b+28>>2]=d}return}a:{if(Fa(a,o[b>>2],e)){if(!(o[b+20>>2]!=(c|0)?o[b+16>>2]!=(c|0):0)){if((d|0)!=1){break a}o[b+32>>2]=1;return}o[b+32>>2]=d;if(o[b+44>>2]!=4){f=a+16|0;i=f+(o[a+12>>2]<<3)|0;j=b;b:{c:{while(1){d:{if(f>>>0>=i>>>0){break d}n[b+52>>1]=0;gf(f,b,c,c,1,e);if(p[b+54|0]){break d}e:{if(!p[b+53|0]){break e}if(p[b+52|0]){d=1;if(o[b+24>>2]==1){break c}h=1;g=1;if(p[a+8|0]&2){break e}break c}h=1;d=g;if(!(m[a+8|0]&1)){break c}}f=f+8|0;continue}break}d=g;a=4;if(!h){break b}}a=3}o[j+44>>2]=a;if(d&1){break a}}o[b+20>>2]=c;o[b+40>>2]=o[b+40>>2]+1;if(o[b+36>>2]!=1|o[b+24>>2]!=2){break a}m[b+54|0]=1;return}g=o[a+12>>2];f=a+16|0;vd(f,b,c,d,e);if((g|0)<2){break a}g=f+(g<<3)|0;f=a+24|0;a=o[a+8>>2];if(!(o[b+36>>2]!=1?!(a&2):0)){while(1){if(p[b+54|0]){break a}vd(f,b,c,d,e);f=f+8|0;if(f>>>0<g>>>0){continue}break}break a}if(!(a&1)){while(1){if(p[b+54|0]|o[b+36>>2]==1){break a}vd(f,b,c,d,e);f=f+8|0;if(f>>>0<g>>>0){continue}break a}}while(1){if(p[b+54|0]|(o[b+24>>2]==1?o[b+36>>2]==1:0)){break a}vd(f,b,c,d,e);f=f+8|0;if(f>>>0<g>>>0){continue}break}}}function cI(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;a:{h=o[a+4>>2];c=o[a+48>>2];if((h|0)>=(c|0)){break a}b:{if(o[a+8>>2]>=(c|0)){e=o[a+12>>2];break b}b=h;if(c){o[7717]=o[7717]+1;e=l[o[6606]](c<<2,16)|0;b=o[a+4>>2]}g=o[a+12>>2];c:{d:{if((b|0)>=1){while(1){f=d<<2;o[f+e>>2]=o[g+f>>2];d=d+1|0;if((d|0)!=(b|0)){continue}break d}}if(g){break d}break c}if(p[a+16|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}}o[a+12>>2]=e;m[a+16|0]=1;o[a+8>>2]=c}b=h<<2;f=c<<2;$(b+e|0,0,f-b|0);o[a+4>>2]=c;g=o[a+24>>2];if((g|0)<(c|0)){e:{if(o[a+28>>2]>=(c|0)){e=o[a+32>>2];break e}d=0;b=g;e=0;if(c){o[7717]=o[7717]+1;e=l[o[6606]](f,16)|0;b=o[a+24>>2]}i=o[a+32>>2];f:{if((b|0)>=1){while(1){j=d<<2;o[j+e>>2]=o[i+j>>2];d=d+1|0;if((d|0)!=(b|0)){continue}break f}}if(i){break f}o[a+32>>2]=e;o[a+28>>2]=c;m[a+36|0]=1;break e}if(p[a+36|0]){if(i){o[7718]=o[7718]+1;l[o[6607]](i)}}o[a+32>>2]=e;m[a+36|0]=1;o[a+28>>2]=c}b=g<<2;$(b+e|0,0,f-b|0)}o[a+24>>2]=c;if((c|0)>=1){$(o[a+12>>2],255,f);$(o[a+32>>2],255,f)}if((h|0)<1){break a}g=o[a+32>>2];c=o[a+72>>2];e=o[a+12>>2];d=0;while(1){f=d<<2;b=f+c|0;b=e+(((q[b+2>>1]<<16)+n[b>>1]&o[a+48>>2]+ -1)<<2)|0;o[g+f>>2]=o[b>>2];o[b>>2]=d;d=d+1|0;if((h|0)!=(d|0)){continue}break}}}function Jb(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0);a:{if(!b){break a}j=s[c+24>>2];k=s[c+20>>2];m=s[c+16>>2];n=s[c+8>>2];p=s[c+4>>2];q=s[c>>2];o[7717]=o[7717]+1;e=l[o[6606]](256,16)|0;o[e>>2]=b;a=64;c=1;while(1){b=c+ -1|0;g=o[(b<<2)+e>>2];b:{if(s[g>>2]<=m^1|s[g+16>>2]>=q^1|(s[g+4>>2]<=k^1|s[g+20>>2]>=p^1)){break b}if(s[g+8>>2]<=j^1|s[g+24>>2]>=n^1){break b}c:{d:{if(o[g+40>>2]){if((a|0)!=(b|0)){f=a;h=e;break c}f=a?a<<1:1;if((c|0)>(f|0)){h=e;f=a;b=f;break c}b=0;h=0;if(f){o[7717]=o[7717]+1;h=l[o[6606]](f<<2,16)|0}if((c|0)>=2){while(1){c=b<<2;o[c+h>>2]=o[c+e>>2];b=b+1|0;if((b|0)!=(a|0)){continue}break d}}if(e){break d}break c}l[o[o[d>>2]+12>>2]](d,g);break b}if(e){o[7718]=o[7718]+1;l[o[6607]](e)}b=a}o[(b<<2)+h>>2]=o[g+36>>2];e:{f:{i=b+1|0;if((i|0)!=(f|0)){break f}a=f?f<<1:1;if((f|0)>=(a|0)){break f}c=0;e=0;if(a){o[7717]=o[7717]+1;e=l[o[6606]](a<<2,16)|0}g:{if((b|0)>=0){while(1){f=c<<2;o[f+e>>2]=o[f+h>>2];f=(b|0)==(c|0);c=c+1|0;if(!f){continue}break g}}if(!h){break e}}if(h){o[7718]=o[7718]+1;l[o[6607]](h)}break e}a=f;e=h}o[(i<<2)+e>>2]=o[g+40>>2];b=b+2|0}c=b;if((c|0)>0){continue}break}if(!e){break a}if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}}function BI(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,p=0,q=0;Xa(a,b,c);o[b+20>>2]=o[a+72>>2];d=o[a+16>>2];o[b+12>>2]=0;o[b+16>>2]=d;if(d){g=l[o[o[c>>2]+16>>2]](c,76,d)|0;d=o[g+8>>2];o[b+12>>2]=l[o[o[c>>2]+28>>2]](c,d);if(o[b+16>>2]>0){while(1){e=u(h,80);f=e+o[a+24>>2]|0;o[d+72>>2]=o[f+72>>2];o[d+64>>2]=l[o[o[c>>2]+28>>2]](c,o[f+64>>2]);if(!l[o[o[c>>2]+24>>2]](c,o[(e+o[a+24>>2]|0)+64>>2])){f=o[(e+o[a+24>>2]|0)+64>>2];f=(k=c,m=l[o[o[f>>2]+52>>2]](f)|0,n=1,j=o[o[c>>2]+16>>2],l[j](k|0,m|0,n|0)|0);i=o[(e+o[a+24>>2]|0)+64>>2];n=c,m=f,k=l[o[o[i>>2]+56>>2]](i,o[f+8>>2],c)|0,p=1346455635,q=o[(e+o[a+24>>2]|0)+64>>2],j=o[o[c>>2]+20>>2],l[j](n|0,m|0,k|0,p|0,q|0)}e=e+o[a+24>>2]|0;o[d+68>>2]=o[e+68>>2];o[d>>2]=o[e>>2];o[d+4>>2]=o[e+4>>2];o[d+8>>2]=o[e+8>>2];o[d+12>>2]=o[e+12>>2];o[d+16>>2]=o[e+16>>2];o[d+20>>2]=o[e+20>>2];o[d+24>>2]=o[e+24>>2];o[d+28>>2]=o[e+28>>2];o[d+32>>2]=o[e+32>>2];o[d+36>>2]=o[e+36>>2];o[d+40>>2]=o[e+40>>2];o[d+44>>2]=o[e+44>>2];o[d+48>>2]=o[e+48>>2];o[d+52>>2]=o[e+52>>2];o[d+56>>2]=o[e+56>>2];o[d+60>>2]=o[e+60>>2];d=d+76|0;h=h+1|0;if((h|0)<o[b+16>>2]){continue}break}}l[o[o[c>>2]+20>>2]](c,g,10804,1497453121,o[g+8>>2])}return 10829}function ko(a,b){var c=0,d=v(0),e=v(0);c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;a=o[c+28>>2];d=s[a+12>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(v(d*s[o[b+12>>2]>>2])+v(s[a>>2]*s[o[c+24>>2]+12>>2]));e=s[a+4>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(d+v(e*s[o[b+12>>2]+8>>2]));e=s[a+8>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+20>>2]=d-v(e*s[o[b+12>>2]+4>>2]);d=s[a+12>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(v(d*s[o[b+12>>2]+4>>2])+v(s[a+4>>2]*s[o[c+24>>2]+12>>2]));e=s[a+8>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(d+v(e*s[o[b+12>>2]>>2]));e=s[a>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+16>>2]=d-v(e*s[o[b+12>>2]+8>>2]);d=s[a+12>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(v(d*s[o[b+12>>2]+8>>2])+v(s[a+8>>2]*s[o[c+24>>2]+12>>2]));e=s[a>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(d+v(e*s[o[b+12>>2]+4>>2]));e=s[a+4>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+12>>2]=d-v(e*s[o[b+12>>2]>>2]);d=v(s[a+12>>2]*s[o[c+24>>2]+12>>2]);e=s[a>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(d-v(e*s[o[b+12>>2]>>2]));e=s[a+4>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];d=v(d-v(e*s[o[b+12>>2]+4>>2]));e=s[a+8>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+8>>2]=d-v(e*s[o[b+12>>2]+8>>2]);Wb(a,c+20|0,c+16|0,c+12|0,c+8|0);M=c+32|0;return a}function _z(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;if(o[a+8>>2]<(b|0)){if(b){o[7717]=o[7717]+1;h=l[o[6606]](u(b,20),16)|0}else{h=0}j=o[a+4>>2];a:{if((j|0)<1){break a}while(1){d=o[a+12>>2];e=u(i,20);c=e+h|0;o[c+12>>2]=0;m[c+16|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;k=d+e|0;e=o[k+4>>2];b:{if((e|0)>=1){o[7717]=o[7717]+1;n=e<<2;g=l[o[6606]](n,16)|0;f=o[c+12>>2];d=0;q=o[c+4>>2];c:{d:{if((q|0)>=1){while(1){r=d<<2;o[g+r>>2]=o[f+r>>2];d=d+1|0;if((q|0)!=(d|0)){continue}break d}}if(!f){break c}}if(!p[c+16|0]){break c}if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}m[c+16|0]=1;o[c+12>>2]=g;o[c+8>>2]=e;d=0;$(g,0,n);o[c+4>>2]=e;f=o[k+12>>2];c=o[c+12>>2];while(1){g=d<<2;o[g+c>>2]=o[f+g>>2];d=d+1|0;if((e|0)!=(d|0)){continue}break}break b}o[c+4>>2]=e}i=i+1|0;if((j|0)!=(i|0)){continue}break}g=o[a+4>>2];if((g|0)<1){break a}d=0;while(1){c=o[a+12>>2]+u(d,20)|0;e=c;f=o[c+12>>2];if(f){if(p[c+16|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}}o[e+12>>2]=0}m[c+16|0]=1;o[e+12>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;d=d+1|0;if((g|0)!=(d|0)){continue}break}}c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+12>>2]=0}o[a+12>>2]=h;m[a+16|0]=1;o[a+8>>2]=b}}function YI(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;o[6996]=o[6996]+1;h=o[a+40>>2];d=c<<16|b;d=(d<<15^-1)+d|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;f=h+((o[a+12>>2]+ -1&(d>>16^d))<<2)|0;d=o[f>>2];a:{if((d|0)==-1){break a}g=o[a+16>>2];e=d;while(1){i=g+u(e,12)|0;if(!(o[i+4>>2]==(c|0)?o[i>>2]==(b|0):0)){e=o[o[a+60>>2]+(e<<2)>>2];if((e|0)!=-1){continue}break a}break}k=o[(g+u(e,12)|0)+8>>2];c=o[a+60>>2];b:{c:{if((d|0)!=(e|0)){while(1){b=d;d=o[c+(b<<2)>>2];if((e|0)!=(d|0)){continue}break}j=o[c+(e<<2)>>2];d=j;if((b|0)==-1){break c}o[c+(b<<2)>>2]=j;break b}d=o[c+(e<<2)>>2]}o[f>>2]=d}f=o[a+8>>2]+ -1|0;if((f|0)==(e|0)){o[a+8>>2]=e;return k|0}d:{e:{g=g+u(f,12)|0;b=o[g+4>>2]<<16|o[g>>2];b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;j=o[a+12>>2]+ -1&(b>>16^b);h=h+(j<<2)|0;d=o[h>>2];if((f|0)==(d|0)){d=o[c+(f<<2)>>2];break e}while(1){b=d;d=o[c+(b<<2)>>2];if((f|0)!=(d|0)){continue}break}d=o[c+(f<<2)>>2];if((b|0)==-1){break e}o[c+(b<<2)>>2]=d;break d}o[h>>2]=d}b=o[g+4>>2];o[i>>2]=o[g>>2];o[i+4>>2]=b;o[i+8>>2]=o[g+8>>2];b=o[a+40>>2]+(j<<2)|0;o[o[a+60>>2]+(e<<2)>>2]=o[b>>2];o[b>>2]=e;o[a+8>>2]=o[a+8>>2]+ -1}return k|0}function iC(a,b,c){var d=0,e=0;Kf(a,5,b);o[a>>2]=19548;b=o[c+12>>2];o[a+308>>2]=o[c+8>>2];o[a+312>>2]=b;b=o[c+4>>2];o[a+300>>2]=o[c>>2];o[a+304>>2]=b;b=o[c+28>>2];o[a+324>>2]=o[c+24>>2];o[a+328>>2]=b;b=o[c+20>>2];o[a+316>>2]=o[c+16>>2];o[a+320>>2]=b;b=o[c+36>>2];o[a+332>>2]=o[c+32>>2];o[a+336>>2]=b;b=o[c+44>>2];o[a+340>>2]=o[c+40>>2];o[a+344>>2]=b;b=o[c+56>>2];d=o[c+60>>2];e=o[c+48>>2];c=o[c+52>>2];m[a+527|0]=0;o[a+356>>2]=b;o[a+360>>2]=d;o[a+348>>2]=e;o[a+352>>2]=c;b=o[a+304>>2];o[a+364>>2]=o[a+300>>2];o[a+368>>2]=b;b=o[a+312>>2];o[a+372>>2]=o[a+308>>2];o[a+376>>2]=b;b=o[a+320>>2];o[a+380>>2]=o[a+316>>2];o[a+384>>2]=b;b=o[a+328>>2];o[a+388>>2]=o[a+324>>2];o[a+392>>2]=b;b=o[a+344>>2];o[a+404>>2]=o[a+340>>2];o[a+408>>2]=b;b=o[a+336>>2];o[a+396>>2]=o[a+332>>2];o[a+400>>2]=b;m[a+552|0]=0;m[a+526|0]=0;n[a+524>>1]=0;o[a+420>>2]=0;o[a+424>>2]=0;o[a+412>>2]=0;o[a+416>>2]=0;o[a+572>>2]=-1082130432;o[a+452>>2]=1566444395;o[a+444>>2]=1566444395;o[a+448>>2]=1566444395;o[a+604>>2]=0;o[a+596>>2]=0;o[a+600>>2]=1060320051;o[a+592>>2]=0;o[a+456>>2]=1028443341;o[a+436>>2]=1065353216;o[a+440>>2]=1008981770;o[a+428>>2]=1065353216;o[a+432>>2]=1050253722}function oA(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=M-48|0;M=d;o[d+40>>2]=0;c=d;o[c+32>>2]=0;o[c+36>>2]=0;o[c+24>>2]=0;o[c+28>>2]=0;o[c+16>>2]=0;o[c+20>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;b=b?b:o[o[a+880>>2]>>2];f=o[a+752>>2];a:{if((f|0)!=o[a+756>>2]){break a}h=f?f<<1:1;if((f|0)>=(h|0)){break a}if(h){o[7717]=o[7717]+1;j=l[o[6606]](u(h,44),16)|0;f=o[a+752>>2]}if((f|0)>=1){while(1){c=u(i,44);e=c+j|0;c=c+o[a+760>>2]|0;g=o[c+4>>2];o[e>>2]=o[c>>2];o[e+4>>2]=g;o[e+40>>2]=o[c+40>>2];g=o[c+36>>2];o[e+32>>2]=o[c+32>>2];o[e+36>>2]=g;g=o[c+28>>2];o[e+24>>2]=o[c+24>>2];o[e+28>>2]=g;g=o[c+20>>2];o[e+16>>2]=o[c+16>>2];o[e+20>>2]=g;g=o[c+12>>2];o[e+8>>2]=o[c+8>>2];o[e+12>>2]=g;i=i+1|0;if((i|0)!=(f|0)){continue}break}}c=o[a+760>>2];if(c){if(p[a+764|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+760>>2]=0}o[a+760>>2]=j;o[a+756>>2]=h;m[a+764|0]=1;f=o[a+752>>2]}c=o[a+760>>2]+u(f,44)|0;o[c+4>>2]=b;o[c>>2]=0;b=o[d+12>>2];o[c+8>>2]=o[d+8>>2];o[c+12>>2]=b;b=o[d+20>>2];o[c+16>>2]=o[d+16>>2];o[c+20>>2]=b;b=o[d+28>>2];o[c+24>>2]=o[d+24>>2];o[c+28>>2]=b;b=o[d+36>>2];o[c+32>>2]=o[d+32>>2];o[c+36>>2]=b;o[c+40>>2]=o[d+40>>2];o[a+752>>2]=o[a+752>>2]+1;M=d+48|0}function yf(a,b,c,d,e,f){var g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0);n=v(-1);o=s[d>>2];j=s[c>>2];k=v(o-j);y=s[e+4>>2];l=s[c+4>>2];m=v(y-l);p=s[d+4>>2];h=v(p-l);z=s[e>>2];g=v(z-j);r=v(v(k*m)-v(h*g));t=s[b+8>>2];i=s[b>>2];u=h;A=s[e+8>>2];h=s[c+8>>2];q=v(A-h);B=s[d+8>>2];x=v(B-h);m=v(v(u*q)-v(x*m));u=s[b+4>>2];k=v(v(x*g)-v(k*q));g=v(v(r*t)+v(v(i*m)+v(u*k)));a:{if(v(w(g))<v(1.1920928955078125e-7)){break a}q=s[a>>2];x=s[a+4>>2];C=s[a+8>>2];n=v(v(-v(v(v(v(m*q)+v(k*x))+v(r*C))-v(v(h*r)+v(v(j*m)+v(l*k)))))/g);b:{if(n>v(11920928955078125e-22)^1|n<f^1){break b}g=v(x+v(u*n));f=v(p-g);i=v(q+v(i*n));j=v(j-i);l=v(l-g);o=v(o-i);t=v(C+v(t*n));p=v(B-t);h=v(h-t);if(!(v(v(r*v(v(f*j)-v(l*o)))+v(v(m*v(v(l*p)-v(h*f)))+v(k*v(v(h*o)-v(p*j)))))>v(-11920928955078125e-22))){break b}g=v(y-g);i=v(z-i);q=v(r*v(v(g*o)-v(f*i)));u=f;f=v(A-t);if(!(v(q+v(v(m*v(v(u*f)-v(p*g)))+v(k*v(v(p*i)-v(f*o)))))>v(-11920928955078125e-22))){break b}if(v(v(r*v(v(l*i)-v(g*j)))+v(v(m*v(v(g*h)-v(f*l)))+v(k*v(v(f*j)-v(h*i)))))>v(-11920928955078125e-22)){break a}}n=v(-1)}return n}function Nf(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);d=o[a+32>>2];i=s[d+36>>2];j=s[d+20>>2];m=s[d+40>>2];k=s[d+24>>2];l=s[d+8>>2];n=s[d+44>>2];g=s[d+28>>2];u=s[d+12>>2];a=o[a+28>>2];r=s[a+36>>2];t=s[a+20>>2];p=s[a+40>>2];w=s[a+8>>2];x=s[a+24>>2];q=s[a+44>>2];y=s[a+12>>2];z=s[a+28>>2];A=s[d+4>>2];B=s[a+4>>2];o[b+8>>2]=0;o[b+12>>2]=0;o[b>>2]=0;o[b+4>>2]=0;f=s[c+8>>2];e=s[c>>2];h=s[c+4>>2];o[b+28>>2]=0;q=v(v(v(y*e)+v(z*h))+v(q*f));s[b+24>>2]=q;p=v(v(v(w*e)+v(x*h))+v(p*f));s[b+20>>2]=p;h=v(v(v(B*e)+v(t*h))+v(r*f));s[b+16>>2]=h;f=s[c+8>>2];r=s[c+4>>2];e=s[c>>2];o[b+44>>2]=0;t=g;g=v(-r);n=v(v(v(t*g)-v(u*e))-v(n*f));s[b+40>>2]=n;m=v(v(v(k*g)-v(l*e))-v(m*f));s[b+36>>2]=m;f=v(v(v(j*g)-v(A*e))-v(i*f));s[b+32>>2]=f;e=s[a+400>>2];g=s[a+404>>2];i=s[a+396>>2];o[b+60>>2]=0;g=v(q*g);s[b+56>>2]=g;e=v(p*e);s[b+52>>2]=e;i=v(h*i);s[b+48>>2]=i;j=s[d+400>>2];k=s[d+404>>2];l=s[d+396>>2];o[b+76>>2]=0;k=v(n*k);s[b+72>>2]=k;j=v(m*j);s[b+68>>2]=j;l=v(f*l);s[b+64>>2]=l;s[b+80>>2]=v(v(v(h*i)+v(p*e))+v(q*g))+v(v(v(f*l)+v(m*j))+v(n*k))}function TC(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+48>>2];o[b+56>>2]=o[a+52>>2];o[b+60>>2]=o[a+56>>2];o[b+64>>2]=o[a+60>>2];o[b+68>>2]=o[a- -64>>2];o[b+72>>2]=o[a+68>>2];o[b+76>>2]=o[a+72>>2];o[b+80>>2]=o[a+76>>2];o[b+84>>2]=o[a+80>>2];o[b+88>>2]=o[a+84>>2];o[b+92>>2]=o[a+88>>2];o[b+96>>2]=o[a+92>>2];o[b+100>>2]=o[a+96>>2];o[b+104>>2]=o[a+100>>2];o[b+108>>2]=o[a+104>>2];o[b+112>>2]=o[a+108>>2];o[b+116>>2]=o[a+112>>2];o[b+120>>2]=o[a+116>>2];o[b+124>>2]=o[a+120>>2];o[b+128>>2]=o[a+124>>2];o[b+132>>2]=o[a+128>>2];o[b+136>>2]=o[a+132>>2];o[b+140>>2]=o[a+136>>2];o[b+144>>2]=o[a+140>>2];o[b+148>>2]=o[a+144>>2];o[b+152>>2]=o[a+148>>2];o[b+156>>2]=o[a+152>>2];o[b+160>>2]=o[a+156>>2];o[b+164>>2]=o[a+160>>2];o[b+168>>2]=o[a+164>>2];o[b+172>>2]=o[a+168>>2];o[b+176>>2]=o[a+172>>2];o[b+228>>2]=o[a+868>>2];o[b+212>>2]=o[a+872>>2];o[b+196>>2]=o[a+680>>2];o[b+180>>2]=o[a+696>>2];o[b+232>>2]=o[a+932>>2];o[b+216>>2]=o[a+936>>2];o[b+200>>2]=o[a+684>>2];o[b+184>>2]=o[a+700>>2];o[b+236>>2]=o[a+996>>2];o[b+220>>2]=o[a+1e3>>2];o[b+204>>2]=o[a+688>>2];o[b+188>>2]=o[a+704>>2];o[b+244>>2]=p[a+1300|0];o[b+248>>2]=p[a+1301|0];return 18984}function kC(a,b,c,d,e){ab(a,5,b,c);o[a>>2]=19548;b=o[d+12>>2];o[a+308>>2]=o[d+8>>2];o[a+312>>2]=b;b=o[d+4>>2];o[a+300>>2]=o[d>>2];o[a+304>>2]=b;b=o[d+28>>2];o[a+324>>2]=o[d+24>>2];o[a+328>>2]=b;b=o[d+20>>2];o[a+316>>2]=o[d+16>>2];o[a+320>>2]=b;b=o[d+44>>2];o[a+340>>2]=o[d+40>>2];o[a+344>>2]=b;b=o[d+36>>2];o[a+332>>2]=o[d+32>>2];o[a+336>>2]=b;b=o[d+60>>2];o[a+356>>2]=o[d+56>>2];o[a+360>>2]=b;b=o[d+52>>2];o[a+348>>2]=o[d+48>>2];o[a+352>>2]=b;b=o[e+12>>2];o[a+372>>2]=o[e+8>>2];o[a+376>>2]=b;b=o[e+4>>2];o[a+364>>2]=o[e>>2];o[a+368>>2]=b;b=o[e+20>>2];o[a+380>>2]=o[e+16>>2];o[a+384>>2]=b;b=o[e+28>>2];o[a+388>>2]=o[e+24>>2];o[a+392>>2]=b;b=o[e+36>>2];o[a+396>>2]=o[e+32>>2];o[a+400>>2]=b;b=o[e+44>>2];o[a+404>>2]=o[e+40>>2];o[a+408>>2]=b;b=o[e+52>>2];o[a+412>>2]=o[e+48>>2];o[a+416>>2]=b;b=o[e+60>>2];o[a+420>>2]=o[e+56>>2];o[a+424>>2]=b;m[a+552|0]=0;o[a+572>>2]=-1082130432;o[a+524>>2]=0;o[a+444>>2]=1566444395;o[a+448>>2]=1566444395;o[a+592>>2]=0;o[a+428>>2]=1065353216;o[a+432>>2]=1050253722;o[a+436>>2]=1065353216;o[a+440>>2]=1008981770;o[a+596>>2]=0;o[a+600>>2]=1060320051;o[a+604>>2]=0;o[a+452>>2]=1566444395;o[a+456>>2]=1028443341}function JI(a,b,c){var d=0,e=v(0),f=0,g=0;d=M-144|0;M=d;o[a+68>>2]=o[a+68>>2]+1;o[d+140>>2]=0;f=o[b+12>>2];o[d+72>>2]=o[b+8>>2];o[d+76>>2]=f;f=o[b+4>>2];o[d+64>>2]=o[b>>2];o[d+68>>2]=f;f=o[b+28>>2];o[d+88>>2]=o[b+24>>2];o[d+92>>2]=f;f=o[b+20>>2];o[d+80>>2]=o[b+16>>2];o[d+84>>2]=f;f=o[b+44>>2];o[d+104>>2]=o[b+40>>2];o[d+108>>2]=f;f=o[b+36>>2];o[d+96>>2]=o[b+32>>2];o[d+100>>2]=f;f=o[b+60>>2];o[d+120>>2]=o[b+56>>2];o[d+124>>2]=f;f=o[b+52>>2];g=o[b+48>>2];o[d+128>>2]=c;o[d+112>>2]=g;o[d+116>>2]=f;o[d+132>>2]=o[c+4>>2];s[d+136>>2]=l[o[o[c>>2]+48>>2]](c);l[o[o[c>>2]+8>>2]](c,b,d+48|0,d+32|0);e=s[d+48>>2];if(!!(s[a+32>>2]>e)){s[a+32>>2]=e}e=s[d+32>>2];if(!!(s[a+48>>2]<e)){s[a+48>>2]=e}e=s[d+52>>2];if(s[a+36>>2]>e){s[a+36>>2]=e}e=s[d+36>>2];if(!!(s[a+52>>2]<e)){s[a+52>>2]=e}e=s[d+56>>2];if(!!(s[a+40>>2]>e)){s[a+40>>2]=e}e=s[d+40>>2];if(!!(s[a+56>>2]<e)){s[a+56>>2]=e}b=o[a+64>>2];if(b){c=o[d+60>>2];o[d+8>>2]=o[d+56>>2];o[d+12>>2]=c;c=o[d+44>>2];o[d+24>>2]=o[d+40>>2];o[d+28>>2]=c;c=o[d+36>>2];o[d+16>>2]=o[d+32>>2];o[d+20>>2]=c;c=o[d+52>>2];o[d>>2]=o[d+48>>2];o[d+4>>2]=c;o[d+140>>2]=bb(b,d,o[a+16>>2])}II(a+12|0,d- -64|0);M=d+144|0}function eg(a){var b=v(0),c=v(0),d=v(0),e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=o[a+28>>2];j=(h|0)<1;while(1){a:{b:{switch(g|0){case 0:b=v(s[a+88>>2]+s[a+72>>2]);c=v(s[a+84>>2]+s[a+68>>2]);d=v(s[a+80>>2]+s[a+64>>2]);break a;case 1:b=v(s[a+72>>2]-s[a+88>>2]);c=v(s[a+84>>2]+s[a+68>>2]);d=v(s[a+80>>2]+s[a+64>>2]);break a;case 2:b=v(s[a+88>>2]+s[a+72>>2]);c=v(s[a+68>>2]-s[a+84>>2]);d=v(s[a+80>>2]+s[a+64>>2]);break a;case 3:b=v(s[a+72>>2]-s[a+88>>2]);c=v(s[a+68>>2]-s[a+84>>2]);d=v(s[a+80>>2]+s[a+64>>2]);break a;case 4:b=v(s[a+88>>2]+s[a+72>>2]);c=v(s[a+84>>2]+s[a+68>>2]);d=v(s[a+64>>2]-s[a+80>>2]);break a;case 5:b=v(s[a+72>>2]-s[a+88>>2]);c=v(s[a+84>>2]+s[a+68>>2]);d=v(s[a+64>>2]-s[a+80>>2]);break a;case 6:b=v(s[a+88>>2]+s[a+72>>2]);c=v(s[a+68>>2]-s[a+84>>2]);d=v(s[a+64>>2]-s[a+80>>2]);break a;case 7:break b;default:break a}}b=v(s[a+72>>2]-s[a+88>>2]);c=v(s[a+68>>2]-s[a+84>>2]);d=v(s[a+64>>2]-s[a+80>>2])}c:{if(!j){k=o[a+36>>2];i=0;e=0;while(1){f=u(e,36)+k|0;if(!!(v(s[f+32>>2]+v(v(v(d*s[f+20>>2])+v(c*s[f+24>>2]))+v(b*s[f+28>>2])))>v(0))){break c}e=e+1|0;if((e|0)<(h|0)){continue}break}}i=1;g=g+1|0;if((g|0)!=8){continue}}break}return i}function GG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=0,q=0,r=v(0),t=0,u=v(0);f=M-16|0;M=f;e=o[a+52>>2];q=(e+2|0)%3|0;a:{if((d|0)<1){break a}r=s[((q<<2)+a|0)+28>>2];q=0;while(1){o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;e=e<<2;o[e+f>>2]=o[(a+e|0)+28>>2];t=q<<4;e=t+b|0;j=s[e+8>>2];h=s[e+4>>2];k=s[f+8>>2];i=s[f+4>>2];u=v(-0xde0b6b000000000);m=v(s[f>>2]+v(r*s[e>>2]));g=v(l[o[o[a>>2]+48>>2]](a));n=s[e>>2];m=v(m-v(g*n));i=v(i+v(r*h));h=s[e+4>>2];i=v(i-v(g*h));k=v(k+v(r*j));j=s[e+8>>2];k=v(k-v(g*j));g=v(v(v(n*m)+v(h*i))+v(j*k));if(!!(g>v(-0xde0b6b000000000))){p=c+t|0;o[p+12>>2]=0;s[p+8>>2]=k;s[p+4>>2]=i;s[p>>2]=m;j=s[e+8>>2];h=s[e+4>>2];n=s[e>>2];u=g}o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;p=o[a+52>>2]<<2;s[p+f>>2]=-s[(a+p|0)+28>>2];m=s[f+4>>2];i=s[f+8>>2];n=v(s[f>>2]+v(r*n));g=v(l[o[o[a>>2]+48>>2]](a));k=s[e>>2];n=v(n-v(g*k));h=v(m+v(r*h));m=s[e+4>>2];h=v(h-v(g*m));i=v(i+v(r*j));j=s[e+8>>2];g=v(i-v(g*j));if(!!(v(v(v(k*n)+v(m*h))+v(j*g))>u)){e=c+t|0;o[e+12>>2]=0;s[e+8>>2]=g;s[e+4>>2]=h;s[e>>2]=n}q=q+1|0;if((q|0)==(d|0)){break a}e=o[a+52>>2];continue}}M=f+16|0}function pf(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0;f=o[a+56>>2];a:{if(f){break a}d=o[a+52>>2];b:{if(d){o[a+52>>2]=o[d+8>>2];break b}o[7717]=o[7717]+1;d=l[o[6606]](12,16)|0;e=o[a+60>>2];o[d+8>>2]=0;o[d+4>>2]=e;o[7717]=o[7717]+1;o[d>>2]=l[o[6606]](u(e,24),16);o[d+8>>2]=o[a+48>>2];o[a+48>>2]=d}f=o[d>>2];g=o[d+4>>2];if((g|0)<1){break a}d=0;e=f;while(1){h=e;e=e+24|0;d=d+1|0;o[h>>2]=(d|0)<(g|0)?e:0;if((d|0)!=(g|0)){continue}break}}o[a+56>>2]=o[f>>2];o[f+16>>2]=0;o[f+20>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;g=o[a+56>>2];c:{if(g){break c}d=o[a+52>>2];d:{if(d){o[a+52>>2]=o[d+8>>2];break d}o[7717]=o[7717]+1;d=l[o[6606]](12,16)|0;e=o[a+60>>2];o[d+8>>2]=0;o[d+4>>2]=e;o[7717]=o[7717]+1;o[d>>2]=l[o[6606]](u(e,24),16);o[d+8>>2]=o[a+48>>2];o[a+48>>2]=d}g=o[d>>2];i=o[d+4>>2];if((i|0)<1){break c}d=0;e=g;while(1){h=e;e=e+24|0;d=d+1|0;o[h>>2]=(d|0)<(i|0)?e:0;if((d|0)!=(i|0)){continue}break}}o[a+56>>2]=o[g>>2];o[g>>2]=0;o[g+4>>2]=0;o[f+8>>2]=g;o[g+8>>2]=f;e=o[a+100>>2];o[f+20>>2]=e;o[g+20>>2]=e;o[f+12>>2]=c;o[g+12>>2]=b;o[f+16>>2]=0;o[g+16>>2]=0;b=o[a+116>>2];c=b+1|0;o[a+116>>2]=c;if((b|0)>=o[a+120>>2]){o[a+120>>2]=c}return f}function bc(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;while(1){u=c;n=o[a+12>>2];f=n+((c+d|0)/2<<4)|0;v=o[f+8>>2];l=o[f+4>>2];k=o[f>>2];f=d;while(1){g=-1;i=-1;e=(c<<4)+n|0;m=o[e>>2];if(m){i=o[m+12>>2]}g=k?o[k+12>>2]:g;h=-1;j=-1;p=o[e+4>>2];if(p){j=o[p+12>>2]}h=l?o[l+12>>2]:h;a:{b:{if((i|0)>(g|0)){break b}if(!((k|0)!=(m|0)|(j|0)>(h|0))){if((l|0)!=(p|0)){break a}if(r[e+8>>2]>v>>>0){break b}break a}if((k|0)!=(m|0)|(j|0)<=(h|0)){break a}}c=c+1|0;continue}while(1){w=f<<4;g=w+n|0;i=-1;h=-1;h=k?o[k+12>>2]:h;q=o[g>>2];if(q){i=o[q+12>>2]}j=-1;s=-1;s=l?o[l+12>>2]:s;t=o[g+4>>2];if(t){j=o[t+12>>2]}c:{d:{if((h|0)>(i|0)){break d}if(!((k|0)!=(q|0)|(s|0)>(j|0))){if((l|0)!=(t|0)){break c}if(r[g+8>>2]<v>>>0){break d}break c}if((k|0)!=(q|0)|(s|0)<=(j|0)){break c}}f=f+ -1|0;continue}break}if((c|0)<=(f|0)){j=o[e+8>>2];h=o[e+12>>2];i=o[g+4>>2];o[e>>2]=o[g>>2];o[e+4>>2]=i;i=o[g+12>>2];o[e+8>>2]=o[g+8>>2];o[e+12>>2]=i;e=o[a+12>>2]+w|0;o[e+4>>2]=p;o[e+8>>2]=j;o[e+12>>2]=h;o[e>>2]=m;f=f+ -1|0;c=c+1|0}if((c|0)<=(f|0)){n=o[a+12>>2];continue}break}if((f|0)>(u|0)){bc(a,b,u,f)}if((c|0)<(d|0)){continue}break}}function fA(a,b,c){var d=v(0),e=0,f=0,g=v(0),h=0,i=v(0),j=v(0),k=0,l=v(0),n=0,p=v(0),q=0,r=v(0);h=o[a+712>>2];a:{if(c){if((h|0)>=1){f=o[a+720>>2];c=0;while(1){o[(f+u(c,104)|0)+88>>2]=0;c=c+1|0;if((h|0)!=(c|0)){continue}break}}n=o[a+752>>2];if((n|0)>=1){q=o[a+760>>2];while(1){e=u(k,44)+q|0;c=o[e+8>>2];f=o[e+12>>2];d=s[c+8>>2];p=v(s[f+8>>2]-d);e=o[e+16>>2];g=s[c+12>>2];i=v(s[e+12>>2]-g);g=v(s[f+12>>2]-g);d=v(s[e+8>>2]-d);j=v(v(p*i)-v(g*d));r=v(j*j);l=g;g=s[c+16>>2];j=v(s[e+16>>2]-g);g=v(s[f+16>>2]-g);i=v(v(l*j)-v(g*i));d=v(v(g*d)-v(p*j));d=v(C(v(r+v(v(i*i)+v(d*d)))));s[c+88>>2]=d+s[c+88>>2];s[f+88>>2]=d+s[f+88>>2];s[e+88>>2]=d+s[e+88>>2];k=k+1|0;if((n|0)!=(k|0)){continue}break}}if((h|0)<1){break a}f=o[a+720>>2];c=0;while(1){e=f+u(c,104)|0;s[e+88>>2]=v(1)/s[e+88>>2];c=c+1|0;if((h|0)!=(c|0)){continue}break}}if((h|0)<1){break a}f=o[a+720>>2];c=0;d=v(0);while(1){l=d;d=s[(f+u(c,104)|0)+88>>2];d=v(l+(d>v(0)?v(v(1)/d):v(0)));c=c+1|0;if((h|0)!=(c|0)){continue}break}if((h|0)<1){break a}b=v(v(v(1)/d)*b);f=o[a+720>>2];c=0;while(1){e=f+u(c,104)|0;s[e+88>>2]=s[e+88>>2]/b;c=c+1|0;if((h|0)!=(c|0)){continue}break}}m[a+924|0]=1}function zH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0),I=v(0),J=v(0),K=v(0);q=s[a+24>>2];z=s[a+40>>2];A=s[a+20>>2];B=s[a+36>>2];g=s[a+16>>2];C=s[a+32>>2];D=v(l[o[o[a>>2]+48>>2]](a));E=v(l[o[o[a>>2]+48>>2]](a));F=v(l[o[o[a>>2]+48>>2]](a));G=s[b+52>>2];h=s[b+24>>2];i=s[b+20>>2];j=s[b+56>>2];k=s[a+20>>2];m=s[a+36>>2];r=s[a+24>>2];H=s[a+40>>2];n=s[b+40>>2];e=s[b+36>>2];I=s[b+48>>2];t=s[b+8>>2];u=s[b>>2];x=s[b+4>>2];y=s[b+16>>2];J=s[a+16>>2];K=s[a+32>>2];f=s[b+32>>2];o[c+12>>2]=0;p=j;j=v(v(K+J)*v(.5));k=v(v(m+k)*v(.5));m=v(v(H+r)*v(.5));r=v(p+v(v(v(f*j)+v(e*k))+v(n*m)));g=v(D+v(v(C-g)*v(.5)));p=v(g*v(w(f)));f=v(E+v(v(B-A)*v(.5)));p=v(p+v(f*v(w(e))));e=v(F+v(v(z-q)*v(.5)));n=v(p+v(e*v(w(n))));s[c+8>>2]=r-n;q=v(G+v(v(v(j*y)+v(k*i))+v(m*h)));h=v(v(v(g*v(w(y)))+v(f*v(w(i))))+v(e*v(w(h))));s[c+4>>2]=q-h;i=v(I+v(v(v(j*u)+v(k*x))+v(m*t)));e=v(v(v(g*v(w(u)))+v(f*v(w(x))))+v(e*v(w(t))));s[c>>2]=i-e;o[d+12>>2]=0;s[d+8>>2]=n+r;s[d+4>>2]=h+q;s[d>>2]=e+i}function NG(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=v(0),i=v(0),j=0,k=0,l=0,m=v(0),n=v(0),p=v(0),q=0;j=M-16|0;o[d>>2]=2139095039;k=-8388609;o[e>>2]=-8388609;q=o[a+96>>2];h=v(-3.4028234663852886e+38);a:{if((q|0)<1){break a}k=0;while(1){l=o[a+104>>2]+(k<<4)|0;h=v(s[l>>2]*s[a+12>>2]);i=v(s[l+4>>2]*s[a+16>>2]);m=v(s[l+8>>2]*s[a+20>>2]);n=v(v(v(v(h*s[b>>2])+v(i*s[b+4>>2]))+v(m*s[b+8>>2]))+s[b+48>>2]);p=v(v(v(v(h*s[b+16>>2])+v(i*s[b+20>>2]))+v(m*s[b+24>>2]))+s[b+52>>2]);i=v(v(v(v(h*s[b+32>>2])+v(i*s[b+36>>2]))+v(m*s[b+40>>2]))+s[b+56>>2]);h=v(v(v(n*s[c>>2])+v(p*s[c+4>>2]))+v(i*s[c+8>>2]));if(!!(h<s[d>>2])){s[d>>2]=h;o[f+12>>2]=0;s[f+8>>2]=i;s[f+4>>2]=p;s[f>>2]=n}if(!!(h>s[e>>2])){s[e>>2]=h;o[g+12>>2]=0;s[g+8>>2]=i;s[g+4>>2]=p;s[g>>2]=n}k=k+1|0;if((q|0)!=(k|0)){continue}break}k=o[e>>2];h=s[e>>2]}i=s[d>>2];if(i>h){o[d>>2]=k;s[e>>2]=i;a=o[f+12>>2];o[j+8>>2]=o[f+8>>2];o[j+12>>2]=a;a=o[f+4>>2];o[j>>2]=o[f>>2];o[j+4>>2]=a;a=o[g+12>>2];o[f+8>>2]=o[g+8>>2];o[f+12>>2]=a;a=o[g+4>>2];o[f>>2]=o[g>>2];o[f+4>>2]=a;a=o[j+12>>2];o[g+8>>2]=o[j+8>>2];o[g+12>>2]=a;a=o[j+4>>2];o[g>>2]=o[j>>2];o[g+4>>2]=a}}function wD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0;f=M-16|0;M=f;ia(18279);d=o[a+180>>2];e=o[a+212>>2];if((d|0)<(e|0)){if(o[a+184>>2]<(e|0)){if(e){o[7717]=o[7717]+1;h=l[o[6606]](e<<2,16)|0;c=o[a+180>>2]}else{c=d}if((c|0)>=1){while(1){i=g<<2;o[i+h>>2]=o[o[a+188>>2]+i>>2];g=g+1|0;if((c|0)!=(g|0)){continue}break}}c=o[a+188>>2];if(c){if(p[a+192|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+188>>2]=0}o[a+188>>2]=h;o[a+184>>2]=e;m[a+192|0]=1}while(1){o[o[a+188>>2]+(d<<2)>>2]=0;d=d+1|0;if((e|0)!=(d|0)){continue}break}}o[a+180>>2]=e;if((l[o[o[a>>2]+104>>2]](a)|0)>=1){d=0;while(1){c=d<<2;o[c+o[a+188>>2]>>2]=o[c+o[a+220>>2]>>2];d=d+1|0;if((d|0)<(l[o[o[a>>2]+104>>2]](a)|0)){continue}break}}c=o[a+180>>2];if((c|0)>=2){Fj(a+176|0,f+8|0,0,c+ -1|0)}c=0;a:{if(!l[o[o[a>>2]+104>>2]](a)){break a}c=o[a+188>>2]}vD(o[a+196>>2],b,c,o[a+180>>2],l[o[o[a>>2]+20>>2]](a)|0);c=o[a+200>>2];d=o[a+24>>2];k=c,n=o[a+8>>2],q=l[o[o[d>>2]+36>>2]](d)|0,j=o[o[c>>2]+8>>2],l[j](k|0,n|0,q|0);QD(o[a+204>>2],o[a+24>>2],a,o[a+196>>2]);Dj(o[a+196>>2]);c=o[a+200>>2];l[o[o[c>>2]+16>>2]](c,b,o[a+72>>2]);ga();M=f+16|0}function ja(a,b,c){var d=0,e=0,f=0;if(c>>>0>=512){J(a|0,b|0,c|0)|0;return a}e=a+c|0;a:{if(!((a^b)&3)){b:{if((c|0)<1){c=a;break b}if(!(a&3)){c=a;break b}c=a;while(1){m[c|0]=p[b|0];b=b+1|0;c=c+1|0;if(c>>>0>=e>>>0){break b}if(c&3){continue}break}}d=e&-4;c:{if(d>>>0<64){break c}f=d+ -64|0;if(c>>>0>f>>>0){break c}while(1){o[c>>2]=o[b>>2];o[c+4>>2]=o[b+4>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=o[b+12>>2];o[c+16>>2]=o[b+16>>2];o[c+20>>2]=o[b+20>>2];o[c+24>>2]=o[b+24>>2];o[c+28>>2]=o[b+28>>2];o[c+32>>2]=o[b+32>>2];o[c+36>>2]=o[b+36>>2];o[c+40>>2]=o[b+40>>2];o[c+44>>2]=o[b+44>>2];o[c+48>>2]=o[b+48>>2];o[c+52>>2]=o[b+52>>2];o[c+56>>2]=o[b+56>>2];o[c+60>>2]=o[b+60>>2];b=b- -64|0;c=c- -64|0;if(c>>>0<=f>>>0){continue}break}}if(c>>>0>=d>>>0){break a}while(1){o[c>>2]=o[b>>2];b=b+4|0;c=c+4|0;if(c>>>0<d>>>0){continue}break}break a}if(e>>>0<4){c=a;break a}d=e+ -4|0;if(d>>>0<a>>>0){c=a;break a}c=a;while(1){m[c|0]=p[b|0];m[c+1|0]=p[b+1|0];m[c+2|0]=p[b+2|0];m[c+3|0]=p[b+3|0];b=b+4|0;c=c+4|0;if(c>>>0<=d>>>0){continue}break}}if(c>>>0<e>>>0){while(1){m[c|0]=p[b|0];b=b+1|0;c=c+1|0;if((e|0)!=(c|0)){continue}break}}return a}function qA(a){var b=0,c=0,d=0,e=0,f=0,g=0;b=o[a+712>>2];a:{if(!b){break a}f=o[a+720>>2];if((b|0)<1){break a}while(1){c=o[a+720>>2]+u(d,104)|0;e=o[c+96>>2];if(e){o[e+36>>2]=c}d=d+1|0;if((b|0)!=(d|0)){continue}break}}c=o[a+732>>2];if((c|0)>=1){d=0;while(1){e=u(d,52);b=e+o[a+740>>2]|0;b;o[b+8>>2]=u(o[b+8>>2],104)+f;b=(e+o[a+740>>2]|0)+12|0;b;o[b>>2]=u(o[b>>2],104)+f;d=d+1|0;if((c|0)!=(d|0)){continue}break}}e=o[a+752>>2];if((e|0)>=1){b=0;while(1){d=u(b,44);c=d+o[a+760>>2]|0;c;o[c+8>>2]=u(o[c+8>>2],104)+f;c=(d+o[a+760>>2]|0)+12|0;c;o[c>>2]=u(o[c>>2],104)+f;c=(d+o[a+760>>2]|0)+16|0;c;o[c>>2]=u(o[c>>2],104)+f;d=d+o[a+760>>2]|0;c=o[d+40>>2];if(c){o[c+36>>2]=d}b=b+1|0;if((e|0)!=(b|0)){continue}break}}c=o[a+792>>2];if((c|0)>=1){e=o[a+800>>2];d=0;while(1){b=e+u(d,96)|0;b;o[b>>2]=u(o[b>>2],104)+f;d=d+1|0;if((c|0)!=(d|0)){continue}break}}g=o[a+692>>2];if((g|0)>=1){b=o[a+700>>2];c=0;while(1){d=0;e=u(c,60);if(o[(e+b|0)+24>>2]>0){while(1){b=((b+e|0)+(d<<2)|0)+28|0;o[b>>2]=u(o[b>>2],104)+f;d=d+1|0;b=o[a+700>>2];if((d|0)<o[(e+b|0)+24>>2]){continue}break}}c=c+1|0;if((g|0)!=(c|0)){continue}break}}}function bn(a,b,c){a=a|0;b=b|0;c=v(c);var d=0,e=0,f=0,g=0,h=0;d=M-304|0;M=d;o[d+300>>2]=a;o[d+296>>2]=b;s[d+292>>2]=c;b=o[d+300>>2];f=M-16|0;o[f+12>>2]=o[d+296>>2];f=o[f+12>>2]+48|0;e=o[f+4>>2];a=d+272|0;o[a>>2]=o[f>>2];o[a+4>>2]=e;e=o[f+12>>2];o[a+8>>2]=o[f+8>>2];o[a+12>>2]=e;f=M-16|0;o[f+12>>2]=o[d+296>>2];e=o[f+12>>2];s[d+220>>2]=0;s[d+216>>2]=0;g=d+224|0;f=d+292|0;Y(g,f,d+220|0,d+216|0);h=d+240|0;ea(h,e,g);e=d+256|0;ha(e,a,h);s[d+196>>2]=.699999988079071;s[d+192>>2]=0;s[d+188>>2]=0;g=d+200|0;Y(g,d+196|0,d+192|0,d+188|0);l[o[o[b>>2]+8>>2]](b,a,e,g);e=M-16|0;o[e+12>>2]=o[d+296>>2];e=o[e+12>>2];s[d+132>>2]=0;s[d+128>>2]=0;g=d+136|0;Y(g,d+132|0,f,d+128|0);h=d+152|0;ea(h,e,g);e=d+168|0;ha(e,a,h);s[d+108>>2]=0;s[d+104>>2]=.699999988079071;s[d+100>>2]=0;g=d+112|0;Y(g,d+108|0,d+104|0,d+100|0);l[o[o[b>>2]+8>>2]](b,a,e,g);e=M-16|0;o[e+12>>2]=o[d+296>>2];e=o[e+12>>2];s[d+44>>2]=0;s[d+40>>2]=0;g=d+48|0;Y(g,d+44|0,d+40|0,f);f=d- -64|0;ea(f,e,g);e=d+80|0;ha(e,a,f);s[d+20>>2]=0;s[d+16>>2]=0;s[d+12>>2]=.699999988079071;f=d+24|0;Y(f,d+20|0,d+16|0,d+12|0);l[o[o[b>>2]+8>>2]](b,a,e,f);M=d+304|0}function aA(a,b){var c=0,d=v(0),e=0,f=v(0),g=v(0),h=v(0),i=0,j=0,k=0;e=M-32|0;M=e;c=o[a+192>>2];d=v(l[o[o[c>>2]+48>>2]](c));j=o[a+712>>2];if((j|0)>=1){k=a+928|0;while(1){c=o[a+720>>2]+u(i,104)|0;f=v(s[b>>2]*s[c+8>>2]);s[c+8>>2]=f;g=v(s[b+4>>2]*s[c+12>>2]);s[c+12>>2]=g;h=v(s[b+8>>2]*s[c+16>>2]);s[c+16>>2]=h;s[c+24>>2]=s[b>>2]*s[c+24>>2];s[c+28>>2]=s[b+4>>2]*s[c+28>>2];s[c+32>>2]=s[b+8>>2]*s[c+32>>2];o[e+28>>2]=0;s[e+24>>2]=d+h;s[e+20>>2]=d+g;s[e+16>>2]=d+f;o[e+12>>2]=0;s[e+8>>2]=h-d;s[e+4>>2]=g-d;s[e>>2]=f-d;Wc(k,o[c+96>>2],e);i=i+1|0;if((j|0)!=(i|0)){continue}break}}Bf(a);b=o[a+928>>2];a:{if(b){c=o[a+192>>2];d=v(l[o[o[c>>2]+48>>2]](c));f=s[b>>2];g=s[b+4>>2];h=s[b+8>>2];o[a+904>>2]=0;s[a+900>>2]=h-d;s[a+896>>2]=g-d;s[a+892>>2]=f-d;f=s[b+20>>2];g=s[b+24>>2];h=s[b+16>>2];o[a+920>>2]=0;s[a+916>>2]=d+g;s[a+912>>2]=d+f;b=a+908|0;s[b>>2]=d+h;c=o[a+188>>2];if(!c){break a}i=o[a+684>>2];j=o[i+32>>2];l[o[o[j>>2]+16>>2]](j,c,a+892|0,b,o[i+36>>2]);break a}o[a+892>>2]=0;o[a+896>>2]=0;o[a+916>>2]=0;o[a+920>>2]=0;o[a+908>>2]=0;o[a+912>>2]=0;o[a+900>>2]=0;o[a+904>>2]=0}Af(a);M=e+32|0}function rA(a){var b=0,c=0,d=0,e=0,f=0,g=0;c=o[a+712>>2];a:{if(!c){break a}f=o[a+720>>2];if((c|0)<1){break a}while(1){d=o[(o[a+720>>2]+u(b,104)|0)+96>>2];if(d){o[d+36>>2]=b}b=b+1|0;if((c|0)!=(b|0)){continue}break}}c=o[a+732>>2];if((c|0)>=1){b=0;while(1){d=u(b,52);e=d+o[a+740>>2]|0;o[e+8>>2]=(o[e+8>>2]-f|0)/104;d=d+o[a+740>>2]|0;o[d+12>>2]=(o[d+12>>2]-f|0)/104;b=b+1|0;if((c|0)!=(b|0)){continue}break}}d=o[a+752>>2];if((d|0)>=1){c=0;while(1){b=u(c,44);e=b+o[a+760>>2]|0;o[e+8>>2]=(o[e+8>>2]-f|0)/104;e=b+o[a+760>>2]|0;o[e+12>>2]=(o[e+12>>2]-f|0)/104;e=b+o[a+760>>2]|0;o[e+16>>2]=(o[e+16>>2]-f|0)/104;b=o[(b+o[a+760>>2]|0)+40>>2];if(b){o[b+36>>2]=c}c=c+1|0;if((d|0)!=(c|0)){continue}break}}c=o[a+792>>2];if((c|0)>=1){d=o[a+800>>2];b=0;while(1){e=d+u(b,96)|0;o[e>>2]=(o[e>>2]-f|0)/104;b=b+1|0;if((c|0)!=(b|0)){continue}break}}g=o[a+692>>2];if((g|0)>=1){c=o[a+700>>2];d=0;while(1){b=0;e=u(d,60);if(o[(e+c|0)+24>>2]>0){while(1){c=(c+e|0)+(b<<2)|0;o[c+28>>2]=(o[c+28>>2]-f|0)/104;b=b+1|0;c=o[a+700>>2];if((b|0)<o[(e+c|0)+24>>2]){continue}break}}d=d+1|0;if((g|0)!=(d|0)){continue}break}}}function dL(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=0,m=v(0),n=v(0),p=v(0),q=v(0),r=v(0);d=M-32|0;M=d;a=o[a+12>>2];a:{if(!a){break a}o[e+4>>2]=a;i=o[b+12>>2];k=o[c+12>>2];p=s[k+48>>2];n=v(s[i+48>>2]-p);q=s[k+52>>2];g=v(s[i+52>>2]-q);r=s[k+56>>2];h=v(s[i+56>>2]-r);f=v(C(v(v(v(n*n)+v(g*g))+v(h*h))));b=o[b+4>>2];j=v(s[b+28>>2]*s[b+12>>2]);b=o[c+4>>2];m=v(s[b+28>>2]*s[b+12>>2]);j=v(j+m);if(!!(f>j)){if(!o[a+748>>2]){break a}b=o[a+740>>2];c=o[o[e+8>>2]+8>>2];if((b|0)!=(c|0)){sa(a,o[o[e+12>>2]+8>>2]+4|0,c+4|0);break a}sa(a,b+4|0,o[o[e+12>>2]+8>>2]+4|0);break a}o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=1065353216;o[d+20>>2]=0;j=v(f-j);b:{if(!(f>v(1.1920928955078125e-7))){f=v(1);h=v(0);g=v(0);break b}o[d+28>>2]=0;f=v(v(1)/f);h=v(h*f);s[d+24>>2]=h;g=v(g*f);s[d+20>>2]=g;f=v(n*f);s[d+16>>2]=f}o[d+12>>2]=0;s[d+8>>2]=v(m*h)+r;s[d+4>>2]=v(m*g)+q;s[d>>2]=v(m*f)+p;l[o[o[e>>2]+16>>2]](e,d+16|0,d,j);a=o[e+4>>2];if(!o[a+748>>2]){break a}c=o[a+740>>2];i=o[o[e+8>>2]+8>>2];b=(c|0)==(i|0);k=a;a=o[o[e+12>>2]+8>>2];sa(k,(b?c:a)+4|0,(b?a:i)+4|0)}M=d+32|0}function Qf(a){a=a|0;var b=0;o[a>>2]=17980;if(p[a+272|0]){b=o[a+204>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+204>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+196>>2];if(b){l[o[o[b>>2]>>2]](b)|0;b=o[a+196>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}if(p[a+273|0]){b=o[a+200>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+200>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+316>>2];if(b){if(p[a+320|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+316>>2]=0}o[a+316>>2]=0;m[a+320|0]=1;o[a+308>>2]=0;o[a+312>>2]=0;b=o[a+288>>2];if(b){if(p[a+292|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+288>>2]=0}o[a+288>>2]=0;m[a+292|0]=1;o[a+280>>2]=0;o[a+284>>2]=0;b=o[a+240>>2];if(b){if(p[a+244|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+240>>2]=0}o[a+240>>2]=0;m[a+244|0]=1;o[a+232>>2]=0;o[a+236>>2]=0;b=o[a+220>>2];if(b){if(p[a+224|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+220>>2]=0}o[a+220>>2]=0;m[a+224|0]=1;o[a+212>>2]=0;o[a+216>>2]=0;b=o[a+188>>2];if(b){if(p[a+192|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+188>>2]=0}o[a+188>>2]=0;m[a+192|0]=1;o[a+180>>2]=0;o[a+184>>2]=0;lg(a);return a|0}function HG(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=0,r=v(0),t=v(0);e=M-16|0;M=e;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;f=s[c>>2];k=s[c+4>>2];d=s[c+8>>2];g=v(v(v(f*f)+v(k*k))+v(d*d));a:{if(g<v(9999999747378752e-20)){g=v(0);f=v(1);break a}h=d;d=v(v(1)/v(C(g)));i=v(h*d);g=v(k*d);f=v(f*d)}q=b+28|0;c=o[b+52>>2];d=s[q+((c+2|0)%3<<2)>>2];o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;c=c<<2;o[c+e>>2]=o[c+q>>2];n=s[e+4>>2];m=s[e>>2];k=v(-0xde0b6b000000000);r=v(i*d);h=v(r+s[e+8>>2]);j=v(l[o[o[b>>2]+48>>2]](b));p=v(h-v(i*j));t=v(f*d);m=v(v(m+t)-v(f*j));h=n;n=v(g*d);j=v(v(h+n)-v(g*j));d=v(v(i*p)+v(v(f*m)+v(g*j)));if(!!(d>v(-0xde0b6b000000000))){o[a+12>>2]=0;s[a+8>>2]=p;s[a+4>>2]=j;s[a>>2]=m;k=d}o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;c=o[b+52>>2]<<2;s[c+e>>2]=-s[(b+c|0)+28>>2];j=s[e+4>>2];p=s[e>>2];m=i;h=v(r+s[e+8>>2]);d=v(l[o[o[b>>2]+48>>2]](b));i=v(h-v(i*d));h=f;f=v(v(t+p)-v(f*d));d=v(v(n+j)-v(g*d));if(!!(v(v(m*i)+v(v(h*f)+v(g*d)))>k)){o[a+12>>2]=0;s[a+8>>2]=i;s[a+4>>2]=d;s[a>>2]=f}M=e+16|0}function Dj(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=o[a+8>>2];g=f;d=o[a+32>>2];if(d){c=o[a+40>>2]}else{c=0}h=c;c=o[a+52>>2];if(c){b=o[a+60>>2]}else{b=0}i=b;b=o[a+72>>2];e=0;a:{if(!b){break a}e=o[a+80>>2]}v(l[o[o[f>>2]+12>>2]](g,h,d,i,c,e,b,o[a+4>>2],o[a+20>>2],o[a+24>>2]));c=o[a+32>>2];if((c|0)<=-1){if(o[a+36>>2]<=-1){b=o[a+40>>2];if(b){if(p[a+44|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+40>>2]=0}o[a+36>>2]=0;o[a+40>>2]=0;m[a+44|0]=1}while(1){o[o[a+40>>2]+(c<<2)>>2]=0;b=c+1|0;d=b>>>0>=c>>>0;c=b;if(d){continue}break}}o[a+32>>2]=0;c=o[a+52>>2];if((c|0)<=-1){if(o[a+56>>2]<=-1){b=o[a+60>>2];if(b){if(p[a- -64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+60>>2]=0}o[a+56>>2]=0;o[a+60>>2]=0;m[a- -64|0]=1}while(1){o[o[a+60>>2]+(c<<2)>>2]=0;b=c+1|0;d=b>>>0>=c>>>0;c=b;if(d){continue}break}}o[a+52>>2]=0;c=o[a+72>>2];if((c|0)<=-1){if(o[a+76>>2]<=-1){b=o[a+80>>2];if(b){if(p[a+84|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+80>>2]=0}o[a+76>>2]=0;o[a+80>>2]=0;m[a+84|0]=1}while(1){o[o[a+80>>2]+(c<<2)>>2]=0;b=c+1|0;d=b>>>0>=c>>>0;c=b;if(d){continue}break}}o[a+72>>2]=0}function QA(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=0,l=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0);f=v(1);d=o[b>>2];a:{if((d|0)==o[a+80>>2]|p[d+204|0]&4){break a}b:{if(c){g=s[b+16>>2];h=s[b+12>>2];e=s[b+8>>2];break b}e=s[b+8>>2];i=s[b+12>>2];j=s[b+16>>2];g=v(v(v(e*s[d+36>>2])+v(i*s[d+40>>2]))+v(j*s[d+44>>2]));h=v(v(v(e*s[d+20>>2])+v(i*s[d+24>>2]))+v(j*s[d+28>>2]));e=v(v(v(s[d+4>>2]*e)+v(s[d+8>>2]*i))+v(s[d+12>>2]*j))}if(v(v(v(e*s[a+84>>2])+v(h*s[a+88>>2]))+v(g*s[a+92>>2]))<s[a+100>>2]){break a}k=o[b+40>>2];o[a+76>>2]=d;o[a+4>>2]=k;c:{if(c){c=o[b+12>>2];o[a+44>>2]=o[b+8>>2];o[a+48>>2]=c;c=o[b+20>>2];o[a+52>>2]=o[b+16>>2];o[a+56>>2]=c;break c}e=s[d+8>>2];i=s[d+12>>2];j=s[d+20>>2];l=s[d+24>>2];m=s[d+28>>2];n=s[d+36>>2];q=s[d+40>>2];f=s[b+12>>2];r=s[d+44>>2];g=s[b+16>>2];t=s[d+4>>2];h=s[b+8>>2];o[a+56>>2]=0;s[a+52>>2]=v(v(h*n)+v(f*q))+v(g*r);s[a+48>>2]=v(v(h*j)+v(f*l))+v(g*m);s[a+44>>2]=v(v(t*h)+v(e*f))+v(i*g)}c=o[b+28>>2];o[a+60>>2]=o[b+24>>2];o[a+64>>2]=c;c=o[b+36>>2];o[a+68>>2]=o[b+32>>2];o[a+72>>2]=c;f=s[b+40>>2]}return v(f)}function FI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0),H=v(0);e=s[a+40>>2];i=s[a+56>>2];f=o[a+16>>2];g=s[a+36>>2];j=s[a+52>>2];h=s[a+32>>2];k=s[a+48>>2];D=v(l[o[o[a>>2]+48>>2]](a));E=v(l[o[o[a>>2]+48>>2]](a));F=v(l[o[o[a>>2]+48>>2]](a));G=s[b+52>>2];m=s[b+24>>2];t=s[b+20>>2];n=s[b+56>>2];u=s[b+40>>2];x=s[b+36>>2];H=s[b+48>>2];y=s[b+8>>2];z=s[b>>2];A=s[b+4>>2];B=s[b+16>>2];C=s[b+32>>2];o[c+12>>2]=0;p=n;n=f?v(v(k+h)*v(.5)):v(0);q=f?v(v(j+g)*v(.5)):v(0);r=f?v(v(i+e)*v(.5)):v(0);p=v(p+v(v(v(C*n)+v(x*q))+v(u*r)));h=v(D+(f?v(v(k-h)*v(.5)):v(0)));g=v(E+(f?v(v(j-g)*v(.5)):v(0)));e=v(F+(f?v(v(i-e)*v(.5)):v(0)));i=v(v(v(h*v(w(C)))+v(g*v(w(x))))+v(e*v(w(u))));s[c+8>>2]=p-i;j=v(G+v(v(v(n*B)+v(q*t))+v(r*m)));k=v(v(v(h*v(w(B)))+v(g*v(w(t))))+v(e*v(w(m))));s[c+4>>2]=j-k;m=v(H+v(v(v(n*z)+v(q*A))+v(r*y)));e=v(v(v(h*v(w(z)))+v(g*v(w(A))))+v(e*v(w(y))));s[c>>2]=m-e;o[d+12>>2]=0;s[d+8>>2]=i+p;s[d+4>>2]=k+j;s[d>>2]=e+m}function kj(a,b,c,d,e,f){ab(a,4,b,c);o[a>>2]=19668;b=o[d+12>>2];o[a+560>>2]=o[d+8>>2];o[a+564>>2]=b;b=o[d+4>>2];o[a+552>>2]=o[d>>2];o[a+556>>2]=b;b=o[d+28>>2];o[a+576>>2]=o[d+24>>2];o[a+580>>2]=b;b=o[d+20>>2];o[a+568>>2]=o[d+16>>2];o[a+572>>2]=b;b=o[d+44>>2];o[a+592>>2]=o[d+40>>2];o[a+596>>2]=b;b=o[d+36>>2];o[a+584>>2]=o[d+32>>2];o[a+588>>2]=b;b=o[d+60>>2];o[a+608>>2]=o[d+56>>2];o[a+612>>2]=b;b=o[d+52>>2];o[a+600>>2]=o[d+48>>2];o[a+604>>2]=b;b=o[e+12>>2];o[a+624>>2]=o[e+8>>2];o[a+628>>2]=b;b=o[e+4>>2];o[a+616>>2]=o[e>>2];o[a+620>>2]=b;b=o[e+20>>2];o[a+632>>2]=o[e+16>>2];o[a+636>>2]=b;b=o[e+28>>2];o[a+640>>2]=o[e+24>>2];o[a+644>>2]=b;b=o[e+36>>2];o[a+648>>2]=o[e+32>>2];o[a+652>>2]=b;b=o[e+44>>2];o[a+656>>2]=o[e+40>>2];o[a+660>>2]=b;b=o[e+52>>2];o[a+664>>2]=o[e+48>>2];o[a+668>>2]=b;b=o[e+60>>2];o[a+672>>2]=o[e+56>>2];o[a+676>>2]=b;o[a+688>>2]=0;o[a+692>>2]=-1082130432;o[a+696>>2]=1063675494;o[a+700>>2]=1050253722;o[a+704>>2]=1065353216;o[a+708>>2]=0;o[a+712>>2]=0;m[a+716|0]=0;m[a+740|0]=f;o[a+748>>2]=0;o[a+736>>2]=16777216;s[a+732>>2]=f?v(-1):v(1)}function cK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),n=0,p=v(0);e=M-672|0;M=e;n=de(e+568|0);o[e+572>>2]=1;o[e+568>>2]=6500;f=o[b+12>>2];o[e+632>>2]=o[b+8>>2];o[e+636>>2]=f;f=o[b+4>>2];o[e+624>>2]=o[b>>2];o[e+628>>2]=f;f=o[b+28>>2];o[e+648>>2]=o[b+24>>2];o[e+652>>2]=f;f=o[b+20>>2];o[e+640>>2]=o[b+16>>2];o[e+644>>2]=f;f=o[b+44>>2];o[e+664>>2]=o[b+40>>2];o[e+668>>2]=f;f=o[b+36>>2];o[e+656>>2]=o[b+32>>2];o[e+660>>2]=f;o[e+612>>2]=o[a+204>>2];m[e+540|0]=0;o[e+516>>2]=953267991;o[e+200>>2]=4440;f=o[a+4>>2];b=e+176|0;o[b+20>>2]=0;o[b+16>>2]=e+568;o[b+12>>2]=f;o[b+8>>2]=e+200;o[b+4>>2]=e+208;o[b>>2]=7260;o[e>>2]=6896;o[e+164>>2]=1065353216;o[e+168>>2]=0;o[e+172>>2]=o[a+208>>2];f=b;b=a+136|0;a:{if(!vl(f,a+8|0,a+72|0,b,b,e)){break a}h=s[e+132>>2];i=s[e+136>>2];g=s[e+140>>2];j=v(v(v(h*h)+v(i*i))+v(g*g));if(!(j>v(9999999747378752e-20))){break a}k=s[e+164>>2];if(!(k<s[a+200>>2])){break a}p=g;g=v(v(1)/v(C(j)));s[e+140>>2]=p*g;s[e+136>>2]=i*g;s[e+132>>2]=h*g;v(l[o[o[a>>2]+12>>2]](a,e+132|0,e+148|0,k,c,d))}Hb(n);M=e+672|0}function iH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=0,i=0,j=0,k=0,m=0,n=0,p=0,q=0,r=v(0),t=0,u=v(0),w=v(0),x=v(0);i=M-2048|0;M=i;a:{if((d|0)<=0){break a}while(1){o[((e<<4)+c|0)+12>>2]=-581039253;e=e+1|0;if((e|0)!=(d|0)){continue}break}if((d|0)<1){break a}while(1){if((l[o[o[a>>2]+96>>2]](a)|0)>=1){e=n<<4;j=e+c|0;q=j;p=b+e|0;t=p;k=0;while(1){m=128;b:{c:{if(((l[o[o[a>>2]+96>>2]](a)|0)-k|0)>127){break c}m=(l[o[o[a>>2]+96>>2]](a)|0)-k|0;if((m|0)>=1){break c}g=v(-3.4028234663852886e+38);f=-1;break b}e=0;while(1){l[o[o[a>>2]+108>>2]](a,e,(e<<4)+i|0);e=e+1|0;if((m|0)!=(e|0)){continue}break}u=s[t+8>>2];w=s[p+4>>2];x=s[p>>2];e=0;f=-1;g=v(-3.4028234663852886e+38);while(1){h=(e<<4)+i|0;r=v(v(v(x*s[h>>2])+v(w*s[h+4>>2]))+v(u*s[h+8>>2]));h=r>g;g=h?r:g;f=h?e:f;e=e+1|0;if((m|0)!=(e|0)){continue}break}}if(!!(g>s[q+12>>2])){e=(f<<4)+i|0;f=o[e+12>>2];o[j+8>>2]=o[e+8>>2];o[j+12>>2]=f;f=o[e+4>>2];o[j>>2]=o[e>>2];o[j+4>>2]=f;s[q+12>>2]=g}k=k+128|0;if((k|0)<(l[o[o[a>>2]+96>>2]](a)|0)){continue}break}}n=n+1|0;if((n|0)!=(d|0)){continue}break}}M=i+2048|0}function IH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;Xa(a,b,c);d=o[a+48>>2];l[o[o[d>>2]+56>>2]](d,b+12|0,c)|0;o[b+52>>2]=o[a+12>>2];a:{b:{if(!o[a+52>>2]){break b}if(l[o[o[c>>2]+52>>2]](c)&1){break b}d=l[o[o[c>>2]+24>>2]](c,o[a+52>>2])|0;if(d){o[b+44>>2]=0;o[b+40>>2]=d;break a}d=l[o[o[c>>2]+28>>2]](c,o[a+52>>2])|0;o[b+44>>2]=0;o[b+40>>2]=d;d=o[a+52>>2];d=(g=c,h=l[o[o[d>>2]+12>>2]](d)|0,i=1,f=o[o[c>>2]+16>>2],l[f](g|0,h|0,i|0)|0);e=o[a+52>>2];i=c,h=d,g=l[o[o[e>>2]+16>>2]](e,o[d+8>>2],c)|0,j=1213612625,k=o[a+52>>2],f=o[o[c>>2]+20>>2],l[f](i|0,h|0,g|0,j|0,k|0);break a}o[b+40>>2]=0;o[b+44>>2]=0}c:{if(!o[a+56>>2]){break c}if(l[o[o[c>>2]+52>>2]](c)&2){break c}d=l[o[o[c>>2]+24>>2]](c,o[a+56>>2])|0;if(d){o[b+48>>2]=d;return 11776}o[b+48>>2]=l[o[o[c>>2]+28>>2]](c,o[a+56>>2]);b=o[a+56>>2];b=(k=c,j=l[o[o[b>>2]+8>>2]](b)|0,g=1,f=o[o[c>>2]+16>>2],l[f](k|0,j|0,g|0)|0);d=o[a+56>>2];g=c,j=b,k=l[o[o[d>>2]+12>>2]](d,o[b+8>>2],c)|0,h=1346456916,i=o[a+56>>2],f=o[o[c>>2]+20>>2],l[f](g|0,j|0,k|0,h|0,i|0);return 11776}o[b+48>>2]=0;return 11776}function wn(a,b,c){var d=0;d=M-48|0;M=d;o[d+44>>2]=a;o[d+40>>2]=b;o[d+36>>2]=c;c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=0;s[d+32>>2]=Pb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=0;s[d+28>>2]=Ob(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=0;s[d+24>>2]=Nb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=1;s[d+20>>2]=Pb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=1;s[d+16>>2]=Ob(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=1;s[d+12>>2]=Nb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=2;s[d+8>>2]=Pb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=2;s[d+4>>2]=Ob(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);c=o[d+36>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];o[b+8>>2]=2;s[d>>2]=Nb(c,o[b+12>>2]+(o[b+8>>2]<<4)|0);Ce(a,d+32|0,d+28|0,d+24|0,d+20|0,d+16|0,d+12|0,d+8|0,d+4|0,d);M=d+48|0}function tj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,q=0;f=M-16|0;M=f;d=o[a+32>>2];i=d+328|0;g=o[a+28>>2];j=g+328|0;k=d+312|0;l=g+312|0;m=d+4|0;n=g+4|0;a:{if(p[a+1301|0]){g=0;d=0;while(1){e=(d<<6)+a|0;if(!(p[e+912|0]?0:!o[e+924>>2])){c=(d<<4)+a|0;h=c+1216|0;q=o[h+4>>2];o[f+8>>2]=o[h>>2];o[f+12>>2]=q;c=c+1208|0;h=o[c+4>>2];o[f>>2]=o[c>>2];o[f+4>>2]=h;c=o[a+1304>>2]>>u(d,3)+9;if(!(c&1)){o[e+896>>2]=o[o[b+32>>2]>>2]}if(!(c&2)){o[e+904>>2]=o[o[b+32>>2]>>2]}if(!(c&4)){o[e+900>>2]=o[b+4>>2]}g=Lf(a,e+868|0,n,m,l,k,j,i,b,g,f,1,0)+g|0}d=d+1|0;if((d|0)!=3){continue}break}sj(a,b,g,n,m,l,k,j,i);break a}g=sj(a,b,0,n,m,l,k,j,i);d=0;while(1){e=(d<<6)+a|0;if(!(p[e+912|0]?0:!o[e+924>>2])){c=(d<<4)+a|0;h=c+1216|0;q=o[h+4>>2];o[f+8>>2]=o[h>>2];o[f+12>>2]=q;c=c+1208|0;h=o[c+4>>2];o[f>>2]=o[c>>2];o[f+4>>2]=h;c=o[a+1304>>2]>>u(d,3)+9;if(!(c&1)){o[e+896>>2]=o[o[b+32>>2]>>2]}if(!(c&2)){o[e+904>>2]=o[o[b+32>>2]>>2]}if(!(c&4)){o[e+900>>2]=o[b+4>>2]}g=Lf(a,e+868|0,n,m,l,k,j,i,b,g,f,1,0)+g|0}d=d+1|0;if((d|0)!=3){continue}break}}M=f+16|0}function OB(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+552>>2];o[b+56>>2]=o[a+556>>2];o[b+60>>2]=o[a+560>>2];o[b+64>>2]=o[a+564>>2];o[b+68>>2]=o[a+568>>2];o[b+72>>2]=o[a+572>>2];o[b+76>>2]=o[a+576>>2];o[b+80>>2]=o[a+580>>2];o[b+84>>2]=o[a+584>>2];o[b+88>>2]=o[a+588>>2];o[b+92>>2]=o[a+592>>2];o[b+96>>2]=o[a+596>>2];o[b+100>>2]=o[a+600>>2];o[b+104>>2]=o[a+604>>2];o[b+108>>2]=o[a+608>>2];o[b+112>>2]=o[a+612>>2];o[b+116>>2]=o[a+616>>2];o[b+120>>2]=o[a+620>>2];o[b+124>>2]=o[a+624>>2];o[b+128>>2]=o[a+628>>2];o[b+132>>2]=o[a+632>>2];o[b+136>>2]=o[a+636>>2];o[b+140>>2]=o[a+640>>2];o[b+144>>2]=o[a+644>>2];o[b+148>>2]=o[a+648>>2];o[b+152>>2]=o[a+652>>2];o[b+156>>2]=o[a+656>>2];o[b+160>>2]=o[a+660>>2];o[b+164>>2]=o[a+664>>2];o[b+168>>2]=o[a+668>>2];o[b+172>>2]=o[a+672>>2];o[b+176>>2]=o[a+676>>2];o[b+184>>2]=p[a+736|0];o[b+188>>2]=p[a+737|0];o[b+196>>2]=o[a+684>>2];o[b+192>>2]=o[a+680>>2];o[b+180>>2]=p[a+740|0];c=a+688|0;s[b+200>>2]=Jd(c);s[b+204>>2]=Kd(c);o[b+208>>2]=o[a+696>>2];o[b+212>>2]=o[a+700>>2];o[b+216>>2]=o[a+704>>2];return 19744}function BD(a,b){a=a|0;b=v(b);var c=0,d=v(0),e=v(0),f=0,g=0;ia(18257);if(o[a+232>>2]>=1){while(1){c=o[o[a+240>>2]+(g<<2)>>2];a:{if(!c){break a}b:{c:{d:{f=o[c+216>>2];switch(f+ -2|0){case 0:case 2:break c;default:break d}}e:{d=s[c+312>>2];e=v(d*d);d=s[c+316>>2];e=v(e+v(d*d));d=s[c+320>>2];e=v(e+v(d*d));d=s[c+472>>2];if(!(e<v(d*d))){break e}d=s[c+328>>2];e=v(d*d);d=s[c+332>>2];e=v(e+v(d*d));d=s[c+336>>2];e=v(e+v(d*d));d=s[c+476>>2];if(!(e<v(d*d))){break e}s[c+220>>2]=s[c+220>>2]+b;break b}o[c+220>>2]=0;if((o[c+216>>2]&-2)!=4){o[c+216>>2]=0}f=o[c+216>>2]}if((f|0)==4){break a}}f:{if(p[29240]){break f}d=s[6603];if(d==v(0)|(s[c+220>>2]>d^1?(f&-2)!=2:0)){break f}if(p[c+204|0]&3){if((o[c+216>>2]&-2)!=4){o[c+216>>2]=2}break a}if((f|0)==1){if((o[c+216>>2]&-2)!=4){o[c+216>>2]=3}f=o[c+216>>2]}if((f|0)!=2){break a}o[c+328>>2]=0;o[c+332>>2]=0;o[c+312>>2]=0;o[c+316>>2]=0;o[c+336>>2]=0;o[c+340>>2]=0;o[c+320>>2]=0;o[c+324>>2]=0;o[c+260>>2]=o[c+260>>2]+2;break a}if((o[c+216>>2]&-2)!=4){o[c+216>>2]=1}}g=g+1|0;if((g|0)<o[a+232>>2]){continue}break}}ga()}function gE(a,b){var c=0,d=0,e=v(0),f=v(0),g=v(0),h=v(0);d=M-32|0;M=d;if(b!=v(0)){c=o[a+480>>2];if(c){l[o[o[c>>2]+8>>2]](c,a+4|0)}o[a+324>>2]=0;b=v(v(1)/b);s[a+320>>2]=b*v(s[a+60>>2]-s[a+124>>2]);s[a+316>>2]=b*v(s[a+56>>2]-s[a+120>>2]);s[a+312>>2]=b*v(s[a+52>>2]-s[a+116>>2]);tb(a+68|0,a+4|0,d+16|0,d+12|0);f=s[d+16>>2];g=s[d+20>>2];h=s[d+24>>2];e=s[d+12>>2];o[a+340>>2]=0;s[a+336>>2]=b*v(e*h);s[a+332>>2]=b*v(e*g);s[a+328>>2]=b*v(f*e);c=o[a+324>>2];o[a+140>>2]=o[a+320>>2];o[a+144>>2]=c;c=o[a+316>>2];o[a+132>>2]=o[a+312>>2];o[a+136>>2]=c;c=o[a+332>>2];o[a+148>>2]=o[a+328>>2];o[a+152>>2]=c;c=o[a+340>>2];o[a+156>>2]=o[a+336>>2];o[a+160>>2]=c;c=o[a+8>>2];o[a+68>>2]=o[a+4>>2];o[a+72>>2]=c;c=o[a+16>>2];o[a+76>>2]=o[a+12>>2];o[a+80>>2]=c;c=o[a+24>>2];o[a+84>>2]=o[a+20>>2];o[a+88>>2]=c;c=o[a+32>>2];o[a+92>>2]=o[a+28>>2];o[a+96>>2]=c;c=o[a+48>>2];o[a+108>>2]=o[a+44>>2];o[a+112>>2]=c;c=o[a+40>>2];o[a+100>>2]=o[a+36>>2];o[a+104>>2]=c;c=o[a+64>>2];o[a+124>>2]=o[a+60>>2];o[a+128>>2]=c;c=o[a+56>>2];o[a+116>>2]=o[a+52>>2];o[a+120>>2]=c}M=d+32|0}function ZI(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0,r=0;d=c<<16|b;d=(d<<15^-1)+d|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;n=d>>16^d;d=o[a+12>>2];j=n&d+ -1;f=o[o[a+40>>2]+(j<<2)>>2];a:{if((f|0)!=-1){g=o[a+16>>2];while(1){e=g+u(f,12)|0;if(o[e+4>>2]==(c|0)?o[e>>2]==(b|0):0){break a}f=o[o[a+60>>2]+(f<<2)>>2];if((f|0)!=-1){continue}break}}f=a;b:{c:{g=o[a+8>>2];e=g;if((e|0)==(d|0)){e=d?d<<1:1;q=(d|0)>=(e|0);if(!q){break c}}else{d=e}o[f+8>>2]=d+1;h=o[a+16>>2];e=h+u(g,12)|0;break b}if(e){o[7717]=o[7717]+1;h=l[o[6606]](u(e,12),16)|0;d=o[a+8>>2]}if((d|0)>=1){f=0;while(1){i=u(f,12);k=i+o[a+16>>2]|0;r=o[k+4>>2];i=h+i|0;o[i>>2]=o[k>>2];o[i+4>>2]=r;o[i+8>>2]=o[k+8>>2];f=f+1|0;if((f|0)!=(d|0)){continue}break}}d=o[a+16>>2];if(d){if(p[a+20|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+16>>2]=0}o[a+16>>2]=h;o[a+12>>2]=e;m[a+20|0]=1;o[a+8>>2]=o[a+8>>2]+1;e=u(g,12)+h|0;if(q){break b}gg(a);j=o[a+12>>2]+ -1&n}o[e>>2]=b;b=u(g,12)+h|0;o[b+8>>2]=0;o[b+4>>2]=c;b=o[a+60>>2]+(g<<2)|0;a=o[a+40>>2]+(j<<2)|0;o[b>>2]=o[a>>2];o[a>>2]=g}return e}function xl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0);d=M-160|0;M=d;o[d+112>>2]=o[b>>2];o[d+64>>2]=o[b+64>>2];o[d+116>>2]=o[b+4>>2];o[d+68>>2]=o[b+68>>2];o[d+120>>2]=o[b+8>>2];o[d+72>>2]=o[b+72>>2];o[d+128>>2]=o[b+16>>2];o[d+80>>2]=o[b+80>>2];o[d+132>>2]=o[b+20>>2];o[d+84>>2]=o[b+84>>2];o[d+136>>2]=o[b+24>>2];o[d+88>>2]=o[b+88>>2];o[d+144>>2]=o[b+32>>2];o[d+96>>2]=o[b+96>>2];o[d+148>>2]=o[b+36>>2];o[d+100>>2]=o[b+100>>2];o[d+152>>2]=o[b+40>>2];o[d+104>>2]=o[b+104>>2];e=o[a+4>>2];g=s[e+36>>2];f=s[e+32>>2];h=s[e+28>>2];i=v(l[o[o[e>>2]+48>>2]](e));j=v(l[o[o[e>>2]+48>>2]](e));k=v(l[o[o[e>>2]+48>>2]](e));o[d+36>>2]=0;f=v(f+j);s[d+28>>2]=f+f;f=v(h+i);s[d+24>>2]=f+f;g=v(g+k);s[d+32>>2]=g+g;a=o[a+8>>2];g=s[a+36>>2];f=s[a+32>>2];h=s[a+28>>2];i=v(l[o[o[a>>2]+48>>2]](a));j=v(l[o[o[a>>2]+48>>2]](a));k=v(l[o[o[a>>2]+48>>2]](a));o[d+20>>2]=0;f=v(f+j);s[d+12>>2]=f+f;f=v(h+i);s[d+8>>2]=f+f;g=v(g+k);s[d+16>>2]=g+g;nK(b+48|0,d+112|0,d+24|0,b+112|0,d- -64|0,d+8|0,d+48|0,d+44|0,d+40|0,c);M=d+160|0}function kg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;f=M-96|0;M=f;e=o[a+8>>2];a:{if((e|0)!=o[a+12>>2]){break a}h=e?e<<1:1;if((e|0)>=(h|0)){break a}if(h){o[7717]=o[7717]+1;i=l[o[6606]](h<<2,16)|0;e=o[a+8>>2]}if((e|0)>=1){while(1){j=g<<2;o[j+i>>2]=o[o[a+16>>2]+j>>2];g=g+1|0;if((g|0)!=(e|0)){continue}break}}g=o[a+16>>2];if(g){if(p[a+20|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}e=o[a+8>>2]}o[a+16>>2]=0}o[a+16>>2]=i;o[a+12>>2]=h;m[a+20|0]=1}o[o[a+16>>2]+(e<<2)>>2]=b;o[a+8>>2]=e+1;e=o[b+16>>2];o[f+40>>2]=o[b+12>>2];o[f+44>>2]=e;e=o[b+8>>2];o[f+32>>2]=o[b+4>>2];o[f+36>>2]=e;e=o[b+32>>2];o[f+56>>2]=o[b+28>>2];o[f+60>>2]=e;e=o[b+24>>2];o[f+48>>2]=o[b+20>>2];o[f+52>>2]=e;e=o[b+48>>2];o[f+72>>2]=o[b+44>>2];o[f+76>>2]=e;e=o[b+40>>2];o[f+64>>2]=o[b+36>>2];o[f+68>>2]=e;e=o[b+64>>2];o[f+88>>2]=o[b+60>>2];o[f+92>>2]=e;e=o[b+56>>2];o[f+80>>2]=o[b+52>>2];o[f+84>>2]=e;e=o[b+192>>2];l[o[o[e>>2]+8>>2]](e,f+32|0,f+16|0,f);e=o[a+68>>2];o[b+188>>2]=l[o[o[e>>2]+8>>2]](e,f+16|0,f,o[o[b+192>>2]+4>>2],b,c,d,o[a+24>>2],0);M=f+96|0}function $d(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;g=M-16|0;M=g;k=Qk(a);m[a+108|0]=1;o[a>>2]=13728;o[a+104>>2]=0;o[a+96>>2]=0;o[a+100>>2]=0;o[a+4>>2]=4;a:{if((c|0)<=0){o[a+96>>2]=c;break a}o[7717]=o[7717]+1;d=l[o[6606]](c<<4,16)|0;i=o[a+96>>2];if((i|0)>=1){while(1){f=e<<4;h=f+d|0;f=f+o[a+104>>2]|0;j=o[f+4>>2];o[h>>2]=o[f>>2];o[h+4>>2]=j;j=o[f+12>>2];o[h+8>>2]=o[f+8>>2];o[h+12>>2]=j;e=e+1|0;if((i|0)!=(e|0)){continue}break}}e=o[a+104>>2];if(e){if(p[a+108|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+104>>2]=0}o[a+104>>2]=d;e=1;m[a+108|0]=1;o[a+100>>2]=c;f=o[g+12>>2];o[d+8>>2]=o[g+8>>2];o[d+12>>2]=f;f=o[g+4>>2];o[d>>2]=o[g>>2];o[d+4>>2]=f;if((c|0)!=1){while(1){h=o[g+4>>2];d=o[a+104>>2]+(e<<4)|0;o[d>>2]=o[g>>2];o[d+4>>2]=h;f=o[g+12>>2];o[d+8>>2]=o[g+8>>2];o[d+12>>2]=f;e=e+1|0;if((e|0)!=(c|0)){continue}break}}o[a+96>>2]=c;if((c|0)<1){break a}e=0;while(1){f=o[b+4>>2];h=o[b>>2];i=o[b+8>>2];d=o[a+104>>2]+(e<<4)|0;o[d+12>>2]=0;o[d+8>>2]=i;o[d>>2]=h;o[d+4>>2]=f;b=b+16|0;e=e+1|0;if((e|0)!=(c|0)){continue}break}}Ib(k);M=g+16|0}function Dy(a,b,c,d){var e=0,f=0,g=0,h=v(0),i=v(0),j=0,k=0,m=0,n=0,p=v(0),q=v(0),r=v(0),t=v(0);m=M-16|0;M=m;j=d+3|0;a:{if((d|0)>=-2){o[7717]=o[7717]+1;k=l[o[6606]](j<<4,16)|0;while(1){e=o[m+4>>2];n=(g<<4)+k|0;o[n>>2]=o[m>>2];o[n+4>>2]=e;e=o[m+12>>2];o[n+8>>2]=o[m+8>>2];o[n+12>>2]=e;g=g+1|0;if((j|0)!=(g|0)){continue}break}p=v(j|0);e=k;while(1){i=v(0);h=v(.5);g=f;if(f){while(1){i=g&1?v(i+h):i;h=v(h*v(.5));g=g>>1;if(g){continue}break}}o[e+12>>2]=0;h=v(v(i+i)+v(-1));s[e+8>>2]=h;i=v(v(v(v(f<<1)*v(3.1415927410125732))+v(3.1415927410125732))/p);h=v(C(v(v(1)-v(h*h))));s[e+4>>2]=qa(i)*h;s[e>>2]=ra(i)*h;e=e+16|0;f=f+1|0;if((f|0)!=(j|0)){continue}break}b:{if((d|0)>=-2){d=(j|0)>1?j:1;e=0;while(1){q=s[b>>2];r=s[c>>2];t=s[b+4>>2];p=s[c+4>>2];i=s[b+8>>2];h=s[c+8>>2];f=(e<<4)+k|0;o[f+12>>2]=0;s[f+8>>2]=i+v(h*s[f+8>>2]);s[f+4>>2]=t+v(p*s[f+4>>2]);s[f>>2]=q+v(r*s[f>>2]);e=e+1|0;if((d|0)!=(e|0)){continue}break}g=Bd(a,k,j,1);break b}g=Bd(a,k,j,1);if(!k){break a}}if(k){o[7718]=o[7718]+1;l[o[6607]](k)}break a}g=Bd(a,0,j,1)}M=m+16|0;return g}function dc(a,b,c,d,e,f,g){var h=v(0),i=v(0),j=0,k=0,l=0,m=v(0),n=v(0),p=v(0),q=0;j=M-16|0;o[d>>2]=2139095039;k=-8388609;o[e>>2]=-8388609;q=o[a+8>>2];h=v(-3.4028234663852886e+38);a:{if((q|0)<1){break a}k=0;while(1){l=o[a+16>>2]+(k<<4)|0;h=s[l>>2];i=s[l+4>>2];m=s[l+8>>2];n=v(v(v(v(h*s[b>>2])+v(i*s[b+4>>2]))+v(m*s[b+8>>2]))+s[b+48>>2]);p=v(v(v(v(h*s[b+16>>2])+v(i*s[b+20>>2]))+v(m*s[b+24>>2]))+s[b+52>>2]);i=v(v(v(v(h*s[b+32>>2])+v(i*s[b+36>>2]))+v(m*s[b+40>>2]))+s[b+56>>2]);h=v(v(v(n*s[c>>2])+v(p*s[c+4>>2]))+v(i*s[c+8>>2]));if(!!(h<s[d>>2])){s[d>>2]=h;o[f+12>>2]=0;s[f+8>>2]=i;s[f+4>>2]=p;s[f>>2]=n}if(!!(h>s[e>>2])){s[e>>2]=h;o[g+12>>2]=0;s[g+8>>2]=i;s[g+4>>2]=p;s[g>>2]=n}k=k+1|0;if((q|0)!=(k|0)){continue}break}k=o[e>>2];h=s[e>>2]}i=s[d>>2];if(i>h){o[d>>2]=k;s[e>>2]=i;a=o[f+12>>2];o[j+8>>2]=o[f+8>>2];o[j+12>>2]=a;a=o[f+4>>2];o[j>>2]=o[f>>2];o[j+4>>2]=a;a=o[g+12>>2];o[f+8>>2]=o[g+8>>2];o[f+12>>2]=a;a=o[g+4>>2];o[f>>2]=o[g>>2];o[f+4>>2]=a;a=o[j+12>>2];o[g+8>>2]=o[j+8>>2];o[g+12>>2]=a;a=o[j+4>>2];o[g>>2]=o[j>>2];o[g+4>>2]=a}}function zf(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=0,l=0,m=0,n=v(0),p=v(0),q=v(0),r=v(0);k=M-16|0;M=k;l=o[b+16>>2];m=o[b+12>>2];h=o[b+8>>2];b=o[h+12>>2];o[a+16>>2]=o[h+8>>2];o[a+20>>2]=b;b=o[h+20>>2];o[a+24>>2]=o[h+16>>2];o[a+28>>2]=b;b=o[h+20>>2];o[a+8>>2]=o[h+16>>2];o[a+12>>2]=b;b=o[h+12>>2];o[a>>2]=o[h+8>>2];o[a+4>>2]=b;e=s[m+8>>2];i=s[a>>2];if(!!(e<i)){s[a>>2]=e;i=e}f=s[m+12>>2];j=s[a+4>>2];if(!!(f<j)){s[a+4>>2]=f;j=f}g=s[m+16>>2];p=s[a+8>>2];if(!!(g<p)){s[a+8>>2]=g;p=g}d=s[m+20>>2];q=s[a+12>>2];if(!!(d<q)){s[a+12>>2]=d;q=d}r=s[a+16>>2];if(!!(r<e)){s[a+16>>2]=e;r=e}e=s[a+20>>2];if(!!(e<f)){s[a+20>>2]=f;e=f}f=s[a+24>>2];if(!!(f<g)){s[a+24>>2]=g;f=g}g=s[a+28>>2];if(!!(g<d)){s[a+28>>2]=d;g=d}n=s[l+8>>2];if(!!(n<i)){s[a>>2]=n}i=s[l+12>>2];if(!!(i<j)){s[a+4>>2]=i}j=s[l+16>>2];if(!!(j<p)){s[a+8>>2]=j}d=s[l+20>>2];if(!!(d<q)){s[a+12>>2]=d}if(!!(r<n)){s[a+16>>2]=n}if(!!(e<i)){s[a+20>>2]=i}if(!!(f<j)){s[a+24>>2]=j}if(!!(g<d)){s[a+28>>2]=d}o[k+12>>2]=0;s[k+8>>2]=c;s[k+4>>2]=c;s[k>>2]=c;Tz(a,k);M=k+16|0}function Yy(a,b,c,d,e){var f=0;Nj(a,b,c,d);m[a+340|0]=1;o[a>>2]=22608;d=0;o[a+336>>2]=0;o[a+368>>2]=0;o[a+372>>2]=0;o[a+360>>2]=0;o[a+364>>2]=1148846080;o[a+352>>2]=1067030938;o[a+356>>2]=0;o[a+328>>2]=0;o[a+332>>2]=0;o[a+376>>2]=0;o[a+380>>2]=0;o[a+384>>2]=0;o[a+388>>2]=0;o[a+392>>2]=0;m[a+424|0]=1;o[a+404>>2]=0;o[a+396>>2]=-1054867456;o[a+400>>2]=0;o[a+420>>2]=0;m[a+456|0]=0;o[a+452>>2]=e;o[a+412>>2]=0;o[a+416>>2]=0;if(!e){o[7717]=o[7717]+1;e=l[o[6606]](40,16)|0;_i(e);m[a+456|0]=1;o[a+452>>2]=e}m[a+350|0]=0;n[a+348>>1]=1;o[a+344>>2]=4302;o[a+388>>2]=b;o[a+384>>2]=c;c=a+408|0;Di(c);f=o[a+412>>2];if((f|0)>=1){while(1){b=o[a+420>>2]+(d<<2)|0;e=o[b>>2];o[b>>2]=0;if(e){while(1){b=o[e+280>>2];ba(e);e=b;if(e){continue}break}}d=d+1|0;if((f|0)!=(d|0)){continue}break}}o[a+360>>2]=0;o[a+352>>2]=1067030938;o[a+356>>2]=0;o[a+444>>2]=1;o[a+448>>2]=1;o[a+436>>2]=0;o[a+428>>2]=1048576e3;o[a+432>>2]=0;o[a+392>>2]=0;o[a+376>>2]=0;o[a+380>>2]=0;o[a+368>>2]=0;o[a+372>>2]=0;o[a+404>>2]=0;o[a+396>>2]=-1054867456;o[a+400>>2]=0;Di(c)}function eE(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0),y=v(0);f=s[b+336>>2];l=s[b+44>>2];q=s[b+40>>2];r=s[b+36>>2];i=s[b+332>>2];t=s[b+28>>2];j=s[b+12>>2];n=s[b+404>>2];u=s[b+24>>2];k=s[b+8>>2];m=s[b+400>>2];w=s[b+20>>2];e=s[b+328>>2];x=s[b+4>>2];d=s[b+396>>2];o[a+12>>2]=0;p=v(v(1)/d);d=v(w*p);m=v(v(1)/m);g=v(u*m);n=v(v(1)/n);h=v(t*n);y=v(v(v(e*v(v(v(x*d)+v(k*g))+v(j*h)))+v(i*v(v(v(d*w)+v(g*u))+v(h*t))))+v(f*v(v(v(d*r)+v(g*q))+v(h*l))));d=v(p*x);g=v(m*k);h=v(n*j);g=v(v(v(e*v(v(v(x*d)+v(k*g))+v(j*h)))+v(i*v(v(v(d*w)+v(g*u))+v(h*t))))+v(f*v(v(v(d*r)+v(g*q))+v(h*l))));d=v(v(e*y)-v(i*g));s[a+8>>2]=d;h=e;e=v(p*r);p=k;k=v(m*q);m=j;j=v(n*l);l=v(v(v(h*v(v(v(x*e)+v(p*k))+v(m*j)))+v(i*v(v(v(e*w)+v(k*u))+v(j*t))))+v(f*v(v(v(e*r)+v(k*q))+v(j*l))));e=v(v(f*g)-v(h*l));s[a+4>>2]=e;f=v(v(i*l)-v(f*y));s[a>>2]=f;i=v(v(d*d)+v(v(f*f)+v(e*e)));if(!!(i>v(c*c))){c=v(v(v(1)/v(C(i)))*c);s[a+8>>2]=d*c;s[a+4>>2]=e*c;s[a>>2]=f*c}}function jH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=0,k=0,m=0,n=v(0),p=v(0),q=v(0);i=M-2048|0;M=i;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;g=s[c>>2];e=s[c+4>>2];h=s[c+8>>2];f=v(v(v(g*g)+v(e*e))+v(h*h));n=v(1);a:{if(f<v(9999999747378752e-20)){break a}f=v(v(1)/v(C(f)));p=v(h*f);q=v(e*f);n=v(g*f)}f=n;if((l[o[o[b>>2]+96>>2]](b)|0)>=1){h=v(-0xde0b6b000000000);while(1){j=128;b:{c:{if(((l[o[o[b>>2]+96>>2]](b)|0)-k|0)>127){break c}j=(l[o[o[b>>2]+96>>2]](b)|0)-k|0;if((j|0)>=1){break c}e=v(-3.4028234663852886e+38);m=-1;break b}c=0;d=0;while(1){l[o[o[b>>2]+108>>2]](b,d,(d<<4)+i|0);d=d+1|0;if((j|0)!=(d|0)){continue}break}m=-1;e=v(-3.4028234663852886e+38);while(1){d=(c<<4)+i|0;g=v(v(v(f*s[d>>2])+v(q*s[d+4>>2]))+v(p*s[d+8>>2]));d=g>e;e=d?g:e;m=d?c:m;c=c+1|0;if((j|0)!=(c|0)){continue}break}}if(!!(e>h)){d=(m<<4)+i|0;c=o[d+12>>2];o[a+8>>2]=o[d+8>>2];o[a+12>>2]=c;c=o[d+4>>2];o[a>>2]=o[d>>2];o[a+4>>2]=c;h=e}k=k+128|0;if((k|0)<(l[o[o[b>>2]+96>>2]](b)|0)){continue}break}}M=i+2048|0}function Zd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;if(p[a+164|0]){c=o[a+128>>2];a:{if((c|0)!=o[a+132>>2]){break a}d=c?c<<1:1;if((c|0)>=(d|0)){break a}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<2,16)|0;c=o[a+128>>2]}e=o[a+136>>2];b:{c:{if((c|0)>=1){while(1){h=g<<2;o[h+f>>2]=o[e+h>>2];g=g+1|0;if((g|0)!=(c|0)){continue}break c}}if(!e){break b}}if(p[a+140|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+136>>2]=0;c=o[a+128>>2]}o[a+136>>2]=f;o[a+132>>2]=d;m[a+140|0]=1}d=c<<2;c=o[a+136>>2];o[d+c>>2]=b;o[a+128>>2]=o[a+128>>2]+1;o[o[a+32>>2]+4>>2]=c;return}c=o[a+148>>2];d:{if((c|0)!=o[a+152>>2]){break d}d=c?c<<1:1;if((c|0)>=(d|0)){break d}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<1,16)|0;c=o[a+148>>2]}e=o[a+156>>2];e:{f:{if((c|0)>=1){while(1){h=g<<1;n[h+f>>1]=q[e+h>>1];g=g+1|0;if((g|0)!=(c|0)){continue}break f}}if(!e){break e}}if(p[a+160|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}c=o[a+148>>2]}o[a+156>>2]=0}o[a+156>>2]=f;o[a+152>>2]=d;m[a+160|0]=1}f=o[a+156>>2];n[f+(c<<1)>>1]=b;o[a+148>>2]=c+1;o[o[a+32>>2]+4>>2]=f}function Uk(a){var b=0,c=0;b=M-48|0;M=b;o[b+44>>2]=0;o[b+36>>2]=0;o[b+40>>2]=0;o[b+32>>2]=1065353216;l[o[o[a>>2]+68>>2]](b+16|0,a,b+32|0);s[a+32>>2]=s[b+16>>2]+s[a+12>>2];o[b+32>>2]=-1082130432;l[o[o[a>>2]+68>>2]](b,a,b+32|0);c=o[b+12>>2];o[b+24>>2]=o[b+8>>2];o[b+28>>2]=c;c=o[b+4>>2];o[b+16>>2]=o[b>>2];o[b+20>>2]=c;s[a+16>>2]=s[b+16>>2]-s[a+12>>2];o[b+32>>2]=0;o[b+36>>2]=0;o[b+40>>2]=0;o[b+44>>2]=0;o[b+36>>2]=1065353216;l[o[o[a>>2]+68>>2]](b+16|0,a,b+32|0);s[a+36>>2]=s[b+20>>2]+s[a+12>>2];o[b+36>>2]=-1082130432;l[o[o[a>>2]+68>>2]](b,a,b+32|0);c=o[b+12>>2];o[b+24>>2]=o[b+8>>2];o[b+28>>2]=c;c=o[b+4>>2];o[b+16>>2]=o[b>>2];o[b+20>>2]=c;s[a+20>>2]=s[b+20>>2]-s[a+12>>2];o[b+40>>2]=0;o[b+44>>2]=0;o[b+32>>2]=0;o[b+36>>2]=0;o[b+40>>2]=1065353216;l[o[o[a>>2]+68>>2]](b+16|0,a,b+32|0);s[a+40>>2]=s[b+24>>2]+s[a+12>>2];o[b+40>>2]=-1082130432;l[o[o[a>>2]+68>>2]](b,a,b+32|0);c=o[b+12>>2];o[b+24>>2]=o[b+8>>2];o[b+28>>2]=c;c=o[b+4>>2];o[b+16>>2]=o[b>>2];o[b+20>>2]=c;s[a+24>>2]=s[b+24>>2]-s[a+12>>2];M=b+48|0}function wH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=v(0),g=v(0),h=v(0),i=v(0);d=M-160|0;M=d;o[d+152>>2]=0;o[d+144>>2]=0;o[d+148>>2]=0;o[d+136>>2]=0;o[d+140>>2]=0;o[d+44>>2]=0;o[d+48>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;e=d- -64|0;o[e>>2]=0;o[e+4>>2]=0;o[d+76>>2]=0;o[d+80>>2]=0;o[d+72>>2]=1065353216;o[d+84>>2]=0;o[d+88>>2]=0;o[d+92>>2]=1065353216;o[d+96>>2]=0;e=o[d+144>>2];o[d+100>>2]=o[d+140>>2];o[d+104>>2]=e;e=o[d+152>>2];o[d+108>>2]=o[d+148>>2];o[d+112>>2]=e;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=12580;o[d+52>>2]=1065353216;o[d+116>>2]=-581039253;f=s[c+4>>2];g=s[c>>2];h=s[c+8>>2];o[d+132>>2]=0;i=v(h*v(0));s[d+124>>2]=v(f+v(g*s[d+56>>2]))+i;f=v(f*v(0));s[d+128>>2]=h+v(v(g*s[d+60>>2])+f);s[d+120>>2]=v(g+f)+i;o[d+24>>2]=1566444395;o[d+28>>2]=0;o[d+16>>2]=1566444395;o[d+20>>2]=1566444395;o[d+8>>2]=-581039253;o[d+12>>2]=0;o[d>>2]=-581039253;o[d+4>>2]=-581039253;l[o[o[b>>2]+64>>2]](b,d+32|0,d,d+16|0);b=o[d+48>>2];o[a+8>>2]=o[d+44>>2];o[a+12>>2]=b;b=o[d+40>>2];o[a>>2]=o[d+36>>2];o[a+4>>2]=b;M=d+160|0}function Mz(a,b,c,d,e){var f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=0,x=v(0),y=v(0),z=v(0),A=v(0),B=0;g=M-32|0;M=g;u=o[b+4>>2];w=o[a+684>>2];a=o[b+12>>2];j=s[a+20>>2];k=s[a+36>>2];h=s[a+24>>2];i=s[a+52>>2];m=s[a+40>>2];n=s[a+56>>2];p=s[a+32>>2];q=s[a>>2];r=s[a+16>>2];t=s[a+4>>2];f=s[a+8>>2];l=s[a+48>>2];x=s[c>>2];y=s[c+4>>2];z=s[c+8>>2];o[g+12>>2]=0;A=f;f=v(x-l);l=h;h=v(y-i);i=v(z-n);s[g+8>>2]=v(v(A*f)+v(l*h))+v(m*i);s[g+4>>2]=v(v(f*t)+v(h*j))+v(i*k);s[g>>2]=v(v(f*q)+v(h*r))+v(i*p);d=Lz(w+56|0,g,u,g+16|0,d);if(!!(d<v(0))){o[e>>2]=o[b+8>>2];m=s[a+8>>2];n=s[a>>2];p=s[a+4>>2];k=s[a+24>>2];q=s[a+16>>2];r=s[a+20>>2];j=s[a+40>>2];t=s[a+32>>2];l=s[a+36>>2];f=s[g+24>>2];h=s[g+16>>2];i=s[g+20>>2];o[e+16>>2]=0;j=v(v(v(h*t)+v(i*l))+v(f*j));s[e+12>>2]=j;k=v(v(v(h*q)+v(i*r))+v(f*k));s[e+8>>2]=k;f=v(v(v(n*h)+v(p*i))+v(m*f));s[e+4>>2]=f;s[e+20>>2]=-v(v(v(f*v(s[c>>2]-v(d*f)))+v(k*v(s[c+4>>2]-v(d*k))))+v(j*v(s[c+8>>2]-v(d*j))));B=1}M=g+32|0;return B}function rK(a,b,c){a=a|0;b=b|0;c=v(c);var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=0,t=0;i=M-32|0;M=i;d=s[a+56>>2];f=v(s[a+72>>2]-d);e=s[a+60>>2];g=v(s[a+92>>2]-e);j=v(s[a+76>>2]-e);k=v(s[a+88>>2]-d);h=v(v(f*g)-v(j*k));m=h;q=v(h*h);p=j;j=s[a- -64>>2];h=v(s[a+96>>2]-j);n=v(s[a+80>>2]-j);g=v(v(p*h)-v(n*g));f=v(v(n*k)-v(f*h));k=v(v(1)/v(C(v(q+v(v(g*g)+v(f*f))))));h=v(m*k);g=v(g*k);f=v(f*k);d=v(v(v(s[b+8>>2]*h)+v(v(s[b>>2]*g)+v(s[b+4>>2]*f)))-v(v(j*h)+v(v(d*g)+v(e*f))));j=v(-c);a:{if(d>=j^1|d<=c^1){break a}while(1){b:{l[o[o[a>>2]+104>>2]](a,r,i+16|0,i);k=s[i+16>>2];d=v(s[i>>2]-k);n=s[i+20>>2];e=v(s[i+4>>2]-n);c=v(v(f*d)-v(g*e));m=c;q=v(c*c);c=v(h*e);p=s[i+24>>2];e=v(s[i+8>>2]-p);c=v(c-v(f*e));d=v(v(g*e)-v(h*d));e=v(v(1)/v(C(v(q+v(v(c*c)+v(d*d))))));m=v(m*e);c=v(c*e);d=v(d*e);if(!!(v(v(v(s[b+8>>2]*m)+v(v(s[b>>2]*c)+v(s[b+4>>2]*d)))-v(v(p*m)+v(v(k*c)+v(n*d))))<j)){break b}t=1;r=r+1|0;if((r|0)!=3){continue}break a}break}t=0}M=i+32|0;return t|0}function ZB(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+300>>2];o[b+56>>2]=o[a+304>>2];o[b+60>>2]=o[a+308>>2];o[b+64>>2]=o[a+312>>2];o[b+68>>2]=o[a+316>>2];o[b+72>>2]=o[a+320>>2];o[b+76>>2]=o[a+324>>2];o[b+80>>2]=o[a+328>>2];o[b+84>>2]=o[a+332>>2];o[b+88>>2]=o[a+336>>2];o[b+92>>2]=o[a+340>>2];o[b+96>>2]=o[a+344>>2];o[b+100>>2]=o[a+348>>2];o[b+104>>2]=o[a+352>>2];o[b+108>>2]=o[a+356>>2];o[b+112>>2]=o[a+360>>2];o[b+116>>2]=o[a+364>>2];o[b+120>>2]=o[a+368>>2];o[b+124>>2]=o[a+372>>2];o[b+128>>2]=o[a+376>>2];o[b+132>>2]=o[a+380>>2];o[b+136>>2]=o[a+384>>2];o[b+140>>2]=o[a+388>>2];o[b+144>>2]=o[a+392>>2];o[b+148>>2]=o[a+396>>2];o[b+152>>2]=o[a+400>>2];o[b+156>>2]=o[a+404>>2];o[b+160>>2]=o[a+408>>2];o[b+164>>2]=o[a+412>>2];o[b+168>>2]=o[a+416>>2];o[b+172>>2]=o[a+420>>2];o[b+176>>2]=o[a+424>>2];o[b+180>>2]=o[a+444>>2];o[b+184>>2]=o[a+448>>2];o[b+188>>2]=o[a+452>>2];o[b+192>>2]=o[a+428>>2];o[b+196>>2]=o[a+432>>2];o[b+200>>2]=o[a+436>>2];o[b+204>>2]=o[a+440>>2];return 19632}function ny(a,b,c,d,e,f,g){var h=0,i=0,j=0,k=0,m=0,n=0,p=0,q=0;h=o[a+24>>2];a:{if((h|0)<1){break a}o[7717]=o[7717]+1;h=h<<2;m=l[o[6606]](h,16)|0;h=$(m,0,h);if(o[a+24>>2]<1){break a}j=o[a+32>>2];while(1){k=i<<2;o[k+h>>2]=o[j+k>>2];i=i+1|0;if((i|0)<o[a+24>>2]){continue}break}}h=c<<2;b:{c:{d:{if((c|0)>=1){o[7717]=o[7717]+1;k=l[o[6606]](h,16)|0;c=$($(k,0,h),0,h);o[e>>2]=0;if((g|0)>0){break d}if(!c){break b}break c}k=0;o[e>>2]=$(0,0,h);if((g|0)<1){break b}}c=0;while(1){h=(c<<2)+f|0;n=o[h>>2];q=(n<<2)+k|0;j=o[q>>2];e:{if(j){o[h>>2]=j+ -1;break e}o[h>>2]=o[e>>2];h=o[e>>2];j=(h<<4)+d|0;i=(n<<4)+b|0;o[j>>2]=o[i>>2];o[j+4>>2]=o[i+4>>2];o[j+8>>2]=o[i+8>>2];i=0;j=e;p=o[a+24>>2];if((p|0)>0){while(1){h=i<<2;if((n|0)==o[h+m>>2]){o[h+o[a+32>>2]>>2]=o[e>>2];p=o[a+24>>2]}i=i+1|0;if((i|0)<(p|0)){continue}break}h=o[e>>2]}h=h+1|0;o[j>>2]=h;o[q>>2]=h}c=c+1|0;if((g|0)!=(c|0)){continue}break}}if(k){o[7718]=o[7718]+1;l[o[6607]](k)}}if(m){if(m){o[7718]=o[7718]+1;l[o[6607]](m)}}}function Pd(a,b,c,d,e){var f=0,g=v(0),h=v(0),i=0,j=v(0),k=v(0),l=v(0),m=v(0),n=0;h=s[c>>2];a:{b:{if(!(s[b>>2]<=h)){g=s[c+4>>2];break b}g=s[c+4>>2];if(s[b+4>>2]<=g^1|s[b+8>>2]<=s[c+8>>2]^1|(s[b+16>>2]>=s[c+16>>2]^1|s[b+20>>2]>=s[c+20>>2]^1)){break b}f=0;if(s[b+24>>2]>=s[c+24>>2]){break a}}g=v(g-e);s[c+4>>2]=g;h=v(h-e);s[c>>2]=h;j=v(s[c+8>>2]-e);s[c+8>>2]=j;k=v(s[c+16>>2]+e);s[c+16>>2]=k;l=v(s[c+20>>2]+e);s[c+20>>2]=l;e=v(s[c+24>>2]+e);s[c+24>>2]=e;m=s[d>>2];f=m>v(0);s[(f<<4)+c>>2]=(f?k:h)+m;h=s[d+4>>2];f=h>v(0);s[(f?20:4)+c>>2]=(f?l:g)+h;g=s[d+8>>2];d=g>v(0);s[(d?24:8)+c>>2]=(d?e:j)+g;d=Rd(a,b);c:{if(!d){d=0;break c}i=o[a+8>>2];if((i|0)>=0){if(!i){break c}while(1){f=o[d+32>>2];if(!f){break c}d=f;n=n+1|0;if((i|0)!=(n|0)){continue}break}break c}d=o[a>>2]}f=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=f;f=o[c+28>>2];o[b+24>>2]=o[c+24>>2];o[b+28>>2]=f;f=o[c+20>>2];o[b+16>>2]=o[c+16>>2];o[b+20>>2]=f;f=o[c+12>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=f;Qd(a,d,b);f=1}return f}function zB(a,b,c){var d=0,e=0,f=v(0),g=v(0),h=v(0);d=M-80|0;M=d;a:{if(!o[a+240>>2]){break a}s[a+176>>2]=s[a+64>>2]+s[a+176>>2];s[a+192>>2]=s[a+80>>2]+s[a+192>>2];s[a+180>>2]=s[a+68>>2]+s[a+180>>2];s[a+184>>2]=s[a+72>>2]+s[a+184>>2];s[a+196>>2]=s[a+84>>2]+s[a+196>>2];s[a+200>>2]=s[a+88>>2]+s[a+200>>2];b:{if(s[a+144>>2]!=v(0)|s[a+148>>2]!=v(0)|(s[a+152>>2]!=v(0)|s[a+160>>2]!=v(0))){break b}if(s[a+164>>2]!=v(0)){break b}if(s[a+168>>2]==v(0)){break a}}f=s[a+164>>2];g=s[a+168>>2];h=s[a+160>>2];o[d+12>>2]=0;s[d>>2]=h*c;s[d+8>>2]=g*c;s[d+4>>2]=f*c;rb(a,a+144|0,d,b,d+16|0);e=o[d+28>>2];o[a+8>>2]=o[d+24>>2];o[a+12>>2]=e;e=o[d+20>>2];o[a>>2]=o[d+16>>2];o[a+4>>2]=e;e=o[d+44>>2];o[a+24>>2]=o[d+40>>2];o[a+28>>2]=e;e=o[d+36>>2];o[a+16>>2]=o[d+32>>2];o[a+20>>2]=e;e=o[d+52>>2];o[a+32>>2]=o[d+48>>2];o[a+36>>2]=e;e=o[d+60>>2];o[a+40>>2]=o[d+56>>2];o[a+44>>2]=e;e=o[d+68>>2];o[a+48>>2]=o[d+64>>2];o[a+52>>2]=e;e=o[d+76>>2];o[a+56>>2]=o[d+72>>2];o[a+60>>2]=e}M=d+80|0}function ZF(a,b,c,d,e,f,g,h,i,j){var k=v(0),l=v(0),n=v(0),p=v(0);o[a+108>>2]=1065353216;o[a+112>>2]=1065353216;o[a+104>>2]=h;m[a+101|0]=0;m[a+102|0]=0;m[a+100|0]=j;o[a+96>>2]=i;o[a+92>>2]=d;s[a+88>>2]=e;s[a+76>>2]=g;s[a+72>>2]=f;o[a+68>>2]=c;o[a+64>>2]=b;o[a+4>>2]=24;o[a+116>>2]=1065353216;o[a+120>>2]=0;e=v(c+ -1|0);s[a+84>>2]=e;k=v(b+ -1|0);s[a+80>>2]=k;a:{b:{c:{switch(h|0){default:l=s[a+40>>2];n=s[a+24>>2];e=s[a+36>>2];p=s[a+20>>2];g=s[a+32>>2];f=s[a+16>>2];break a;case 0:s[a+32>>2]=g;s[a+16>>2]=f;o[a+44>>2]=0;s[a+40>>2]=e;s[a+36>>2]=k;o[a+28>>2]=0;o[a+20>>2]=0;o[a+24>>2]=0;l=e;e=k;break a;case 1:s[a+32>>2]=k;o[a+16>>2]=0;o[a+44>>2]=0;s[a+40>>2]=e;s[a+36>>2]=g;o[a+24>>2]=0;o[a+28>>2]=0;s[a+20>>2]=f;l=e;e=g;p=f;f=v(0);break b;case 2:break c}}s[a+32>>2]=k;o[a+16>>2]=0;o[a+20>>2]=0;o[a+44>>2]=0;s[a+40>>2]=g;s[a+36>>2]=e;o[a+28>>2]=0;s[a+24>>2]=f;l=g}n=f;g=k;f=v(0)}o[a+60>>2]=0;s[a+56>>2]=v(n+l)*v(.5);s[a+52>>2]=v(p+e)*v(.5);s[a+48>>2]=v(f+g)*v(.5)}function Rd(a,b){var c=0,d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0);if(o[a>>2]==(b|0)){o[a>>2]=0;return 0}d=o[b+32>>2];c=o[(((o[d+40>>2]!=(b|0))<<2)+d|0)+36>>2];b=o[d+32>>2];a:{b:{if(b){o[((((d|0)==o[b+40>>2])<<2)+b|0)+36>>2]=c;o[c+32>>2]=b;c=o[a+4>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}o[a+4>>2]=d;while(1){t=s[b>>2];d=o[b+36>>2];e=s[d>>2];c=o[b+40>>2];k=s[c>>2];e=e<k?e:k;s[b>>2]=e;k=s[b+16>>2];f=s[d+16>>2];m=s[c+16>>2];f=f>m?f:m;s[b+16>>2]=f;m=s[b+4>>2];g=s[d+4>>2];n=s[c+4>>2];g=g<n?g:n;s[b+4>>2]=g;n=s[b+20>>2];h=s[d+20>>2];p=s[c+20>>2];h=h>p?h:p;s[b+20>>2]=h;p=s[b+8>>2];i=s[d+8>>2];q=s[c+8>>2];i=i<q?i:q;s[b+8>>2]=i;q=s[b+24>>2];j=s[d+24>>2];r=s[c+24>>2];j=j>r?j:r;s[b+24>>2]=j;c:{if(n!=h|k!=f|(t!=e|m!=g)){break c}if(p!=i){break c}if(q==j){break a}}b=o[b+32>>2];if(b){continue}break}break b}o[a>>2]=c;o[c+32>>2]=0;b=o[a+4>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}o[a+4>>2]=d}b=o[a>>2]}return b}function Of(a,b,c,d,e){var f=0,g=0,h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0);f=M-128|0;M=f;g=o[a+28>>2];o[f+80>>2]=o[g+4>>2];o[f+84>>2]=o[g+20>>2];h=o[g+36>>2];o[f+92>>2]=0;o[f+88>>2]=h;o[f+96>>2]=o[g+8>>2];o[f+100>>2]=o[g+24>>2];h=o[g+40>>2];o[f+108>>2]=0;o[f+104>>2]=h;o[f+112>>2]=o[g+12>>2];o[f+116>>2]=o[g+28>>2];h=o[g+44>>2];o[f+124>>2]=0;o[f+120>>2]=h;a=o[a+32>>2];o[f+32>>2]=o[a+4>>2];o[f+36>>2]=o[a+20>>2];h=o[a+36>>2];o[f+44>>2]=0;o[f+40>>2]=h;o[f+48>>2]=o[a+8>>2];o[f+52>>2]=o[a+24>>2];h=o[a+40>>2];o[f+60>>2]=0;o[f+56>>2]=h;o[f+64>>2]=o[a+12>>2];o[f+68>>2]=o[a+28>>2];h=o[a+44>>2];o[f+76>>2]=0;o[f+72>>2]=h;i=s[g+52>>2];j=s[g+56>>2];k=s[g+60>>2];l=s[d>>2];m=s[d+4>>2];n=s[d+8>>2];o[f+28>>2]=0;s[f+24>>2]=n-k;s[f+20>>2]=m-j;s[f+16>>2]=l-i;i=s[a+52>>2];j=s[a+56>>2];k=s[a+60>>2];l=s[e>>2];m=s[e+4>>2];n=s[e+8>>2];o[f+12>>2]=0;s[f+8>>2]=n-k;s[f+4>>2]=m-j;s[f>>2]=l-i;Ld(b,f+80|0,f+32|0,f+16|0,f,c,g+396|0,s[g+344>>2],a+396|0,s[a+344>>2]);M=f+128|0}function mf(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0;i=M-16|0;M=i;g=o[a+12>>2];h=g+((c+d|0)/2<<4)|0;n=o[h+8>>2];l=o[h+4>>2];m=o[h>>2];h=c;j=d;while(1){a:{e=(h<<4)+g|0;f=o[e+4>>2];b:{if((f|0)<(l|0)){break b}if((f|0)!=(l|0)){break a}f=o[e>>2];if((f|0)<(m|0)){break b}if((f|0)!=(m|0)|o[e+8>>2]>=(n|0)){break a}}h=h+1|0;continue}while(1){c:{p=j<<4;f=p+g|0;k=o[f+4>>2];d:{if((l|0)<(k|0)){break d}if((l|0)!=(k|0)){break c}k=o[f>>2];if((m|0)<(k|0)){break d}if((m|0)!=(k|0)|(n|0)>=o[f+8>>2]){break c}}j=j+ -1|0;continue}break}if((h|0)<=(j|0)){g=o[e+12>>2];o[i+8>>2]=o[e+8>>2];o[i+12>>2]=g;g=o[e+4>>2];o[i>>2]=o[e>>2];o[i+4>>2]=g;g=o[f+4>>2];o[e>>2]=o[f>>2];o[e+4>>2]=g;g=o[f+12>>2];o[e+8>>2]=o[f+8>>2];o[e+12>>2]=g;g=o[i+4>>2];e=o[a+12>>2]+p|0;o[e>>2]=o[i>>2];o[e+4>>2]=g;f=o[i+12>>2];o[e+8>>2]=o[i+8>>2];o[e+12>>2]=f;j=j+ -1|0;h=h+1|0}if((h|0)<=(j|0)){g=o[a+12>>2];continue}break}if((j|0)>(c|0)){mf(a,b,c,j)}if((h|0)<(d|0)){mf(a,b,h,d)}M=i+16|0}function YG(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0);d=M-32|0;M=d;h=o[c+12>>2];o[d+24>>2]=o[c+8>>2];o[d+28>>2]=h;h=o[c+4>>2];o[d+16>>2]=o[c>>2];o[d+20>>2]=h;e=s[d+16>>2];g=s[d+20>>2];f=s[d+24>>2];if(!!(v(v(v(e*e)+v(g*g))+v(f*f))<v(1.4210854715202004e-14))){o[d+24>>2]=-1082130432;o[d+28>>2]=0;o[d+16>>2]=-1082130432;o[d+20>>2]=-1082130432;f=v(-1);g=v(-1);e=v(-1)}i=f;f=v(v(1)/v(C(v(v(v(e*e)+v(g*g))+v(f*f)))));s[d+24>>2]=i*f;s[d+20>>2]=g*f;s[d+16>>2]=e*f;be(d,b,d+16|0);a:{b:{switch(o[b+4>>2]){case 8:e=v(s[b+28>>2]*s[b+12>>2]);break a;case 0:e=s[b+44>>2];break a;case 1:e=s[b+44>>2];break a;case 13:e=s[b+44>>2];break a;case 11:e=s[b+44>>2];break a;case 10:e=s[b+44>>2];break a;case 4:case 5:e=s[b+44>>2];break a;default:break b}}e=v(l[o[o[b>>2]+48>>2]](b))}g=s[d>>2];f=s[d+16>>2];i=s[d+4>>2];j=s[d+20>>2];k=s[d+8>>2];m=s[d+24>>2];o[a+12>>2]=0;s[a+8>>2]=k+v(e*m);s[a+4>>2]=i+v(e*j);s[a>>2]=g+v(e*f);M=d+32|0}function Ja(a){var b=0;a:{if(m[30632]&1){break a}if(!da(30632)){break a}b:{if(m[26880]&1){break b}if(!da(26880)){break b}c:{if(m[26932]&1){break c}if(!da(26932)){break c}o[6722]=0;o[6723]=0;o[6721]=1065353216;o[6724]=0;o[6725]=0;o[6727]=0;o[6728]=0;o[6726]=1065353216;o[6729]=0;o[6730]=0;o[6731]=1065353216;o[6732]=0;ca(26932)}o[6716]=0;o[6717]=0;o[6718]=0;o[6719]=0;b=o[6724];o[6706]=o[6723];o[6707]=b;b=o[6722];o[6704]=o[6721];o[6705]=b;b=o[6726];o[6708]=o[6725];o[6709]=b;b=o[6728];o[6710]=o[6727];o[6711]=b;b=o[6730];o[6712]=o[6729];o[6713]=b;b=o[6732];o[6714]=o[6731];o[6715]=b;ca(26880)}b=o[6707];o[7644]=o[6706];o[7645]=b;b=o[6705];o[7642]=o[6704];o[7643]=b;b=o[6709];o[7646]=o[6708];o[7647]=b;b=o[6711];o[7648]=o[6710];o[7649]=b;b=o[6713];o[7650]=o[6712];o[7651]=b;b=o[6715];o[7652]=o[6714];o[7653]=b;b=o[6717];o[7654]=o[6716];o[7655]=b;b=o[6719];o[7656]=o[6718];o[7657]=b;ca(30632)}b=o[a+8>>2];if(b){return b+4|0}a=o[a>>2];return a?a+60|0:30568}function Sa(a){var b=v(0),c=0,d=0,f=v(0);d=(g(a),h(0));c=d&2147483647;if(c>>>0>=1065353216){if((c|0)==1065353216){return(d|0)<0?v(3.141592502593994):v(0)}return v(v(0)/v(a-a))}a:{if(c>>>0<=1056964607){b=v(1.570796251296997);if(c>>>0<847249409){break a}b=v(a*a);return v(v(v(v(7.549789415861596e-8)-v(v(v(b*v(v(b*v(v(b*v(-.008656363002955914))+v(-.04274342209100723)))+v(.16666586697101593)))/v(v(b*v(-.7066296339035034))+v(1)))*a))-a)+v(1.570796251296997))}if((d|0)<=-1){a=v(v(a+v(1))*v(.5));b=v(C(a));a=v(v(1.570796251296997)-v(b+v(v(b*v(v(a*v(v(a*v(v(a*v(-.008656363002955914))+v(-.04274342209100723)))+v(.16666586697101593)))/v(v(a*v(-.7066296339035034))+v(1))))+v(-7.549789415861596e-8))));return v(a+a)}a=v(v(v(1)-a)*v(.5));f=v(C(a));b=(e(0,(g(f),h(0))&-4096),i());a=v(v(v(v(v(a*v(v(a*v(v(a*v(-.008656363002955914))+v(-.04274342209100723)))+v(.16666586697101593)))/v(v(a*v(-.7066296339035034))+v(1)))*f)+v(v(a-v(b*b))/v(f+b)))+b);b=v(a+a)}return b}function lC(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+52>>2];o[b+56>>2]=o[a+56>>2];o[b+60>>2]=o[a+60>>2];o[b+64>>2]=o[a- -64>>2];o[b+68>>2]=o[a+68>>2];o[b+72>>2]=o[a+72>>2];o[b+76>>2]=o[a+76>>2];o[b+80>>2]=o[a+80>>2];o[b+84>>2]=o[a+84>>2];o[b+88>>2]=o[a+88>>2];o[b+92>>2]=o[a+92>>2];o[b+96>>2]=o[a+96>>2];o[b+100>>2]=o[a+100>>2];o[b+104>>2]=o[a+104>>2];o[b+108>>2]=o[a+108>>2];o[b+112>>2]=o[a+112>>2];o[b+116>>2]=o[a+116>>2];o[b+120>>2]=o[a+120>>2];o[b+124>>2]=o[a+124>>2];o[b+128>>2]=o[a+128>>2];o[b+132>>2]=o[a+132>>2];o[b+136>>2]=o[a+136>>2];o[b+140>>2]=o[a+140>>2];o[b+144>>2]=o[a+144>>2];o[b+148>>2]=o[a+148>>2];o[b+152>>2]=o[a+152>>2];o[b+156>>2]=o[a+156>>2];o[b+160>>2]=o[a+160>>2];o[b+164>>2]=o[a+164>>2];o[b+168>>2]=o[a+168>>2];o[b+172>>2]=o[a+172>>2];o[b+176>>2]=o[a+176>>2];o[b+180>>2]=o[a+188>>2];o[b+184>>2]=o[a+184>>2];o[b+188>>2]=o[a+196>>2];o[b+192>>2]=o[a+192>>2];o[b+196>>2]=p[a+180|0];o[b+200>>2]=p[a+49|0];return 19516}function Iz(a,b,c){a=a|0;b=v(b);c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0);d=o[a+8>>2];if(d){Na(d,0)}d=o[a+12>>2];if(d){Na(d,0)}d=o[a+20>>2];if(d){Na(d,0)}d=o[a+24>>2];if(d){Na(d,0)}d=o[a+156>>2];o[a+156>>2]=d+1;m[a+152|0]=(d|0)>=o[a+160>>2];if(!d){o[a+84>>2]=0;e=v(v(1)/b);g=s[a+64>>2];b=v(e*v(s[a+72>>2]*g));s[a+72>>2]=b;f=v(e*v(g*s[a+80>>2]));s[a+80>>2]=f;e=v(e*v(g*s[a+76>>2]));s[a+76>>2]=e;i=s[a+68>>2];a:{if(!(i>v(0))){g=f;j=e;h=b;break a}o[a+100>>2]=0;h=v(v(1)-i);g=v(h*f);s[a+80>>2]=g;j=v(h*e);s[a+76>>2]=j;h=v(h*b);s[a+72>>2]=h;b=v(i*b);e=v(i*e);f=v(i*f);s[a+96>>2]=v(v(b*s[a+136>>2])+v(e*s[a+140>>2]))+v(f*s[a+144>>2]);s[a+92>>2]=v(v(b*s[a+120>>2])+v(e*s[a+124>>2]))+v(f*s[a+128>>2]);s[a+88>>2]=v(v(b*s[a+104>>2])+v(e*s[a+108>>2]))+v(f*s[a+112>>2])}b=v(v(1)/v(c|0));s[a+80>>2]=b*g;s[a+76>>2]=b*j;s[a+72>>2]=b*h;return}o[a+88>>2]=0;o[a+92>>2]=0;o[a+72>>2]=0;o[a+76>>2]=0;o[a+96>>2]=0;o[a+100>>2]=0;o[a+80>>2]=0;o[a+84>>2]=0}function fH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0);e=v(l[o[o[a>>2]+48>>2]](a));D=s[b+52>>2];h=s[b+24>>2];i=s[b+20>>2];j=s[b+56>>2];k=s[b+40>>2];m=s[a- -64>>2];r=s[a+80>>2];t=s[b+36>>2];f=s[a+60>>2];u=s[a+76>>2];E=s[b+48>>2];x=s[b+8>>2];y=s[b>>2];z=s[b+4>>2];A=s[b+16>>2];B=s[b+32>>2];g=s[a+56>>2];C=s[a+72>>2];o[c+12>>2]=0;n=j;j=v(v(C+g)*v(.5));p=v(v(u+f)*v(.5));q=v(v(r+m)*v(.5));n=v(n+v(v(v(B*j)+v(t*p))+v(k*q)));g=v(e+v(v(C-g)*v(.5)));f=v(e+v(v(u-f)*v(.5)));e=v(e+v(v(r-m)*v(.5)));k=v(v(v(g*v(w(B)))+v(f*v(w(t))))+v(e*v(w(k))));s[c+8>>2]=n-k;m=v(D+v(v(v(j*A)+v(p*i))+v(q*h)));h=v(v(v(g*v(w(A)))+v(f*v(w(i))))+v(e*v(w(h))));s[c+4>>2]=m-h;i=v(E+v(v(v(j*y)+v(p*z))+v(q*x)));e=v(v(v(g*v(w(y)))+v(f*v(w(z))))+v(e*v(w(x))));s[c>>2]=i-e;o[d+12>>2]=0;s[d+8>>2]=k+n;s[d+4>>2]=h+m;s[d>>2]=e+i}function VG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0);e=v(l[o[o[a>>2]+48>>2]](a));D=s[b+52>>2];h=s[b+24>>2];i=s[b+20>>2];j=s[b+56>>2];k=s[b+40>>2];m=s[a+60>>2];r=s[a+76>>2];t=s[b+36>>2];f=s[a+56>>2];u=s[a+72>>2];E=s[b+48>>2];x=s[b+8>>2];y=s[b>>2];z=s[b+4>>2];A=s[b+16>>2];B=s[b+32>>2];g=s[a+52>>2];C=s[a+68>>2];o[c+12>>2]=0;n=j;j=v(v(C+g)*v(.5));p=v(v(u+f)*v(.5));q=v(v(r+m)*v(.5));n=v(n+v(v(v(B*j)+v(t*p))+v(k*q)));g=v(e+v(v(C-g)*v(.5)));f=v(e+v(v(u-f)*v(.5)));e=v(e+v(v(r-m)*v(.5)));k=v(v(v(g*v(w(B)))+v(f*v(w(t))))+v(e*v(w(k))));s[c+8>>2]=n-k;m=v(D+v(v(v(j*A)+v(p*i))+v(q*h)));h=v(v(v(g*v(w(A)))+v(f*v(w(i))))+v(e*v(w(h))));s[c+4>>2]=m-h;i=v(E+v(v(v(j*y)+v(p*z))+v(q*x)));e=v(v(v(g*v(w(y)))+v(f*v(w(z))))+v(e*v(w(x))));s[c>>2]=i-e;o[d+12>>2]=0;s[d+8>>2]=k+n;s[d+4>>2]=h+m;s[d>>2]=e+i}function KD(a){a=a|0;var b=0,c=0,d=v(0),e=0,f=0,g=0,h=0;f=M+ -64|0;M=f;ia(18175);a:{if(p[a+274|0]){c=o[a+8>>2];if((c|0)<1){break a}while(1){b=o[o[a+16>>2]+(e<<2)>>2];if(!(!b|!(o[b+236>>2]&2)|(!o[b+480>>2]|p[b+204|0]&3))){c=b+68|0;g=b+132|0;h=b+148|0;b:{c:{if(!p[a+300|0]){break c}d=s[a+268>>2];if(d==v(0)){break c}d=v(s[a+264>>2]-d);break b}d=v(s[a+264>>2]*s[b+244>>2])}rb(c,g,h,d,f);b=o[b+480>>2];l[o[o[b>>2]+12>>2]](b,f);c=o[a+8>>2]}e=e+1|0;if((e|0)<(c|0)){continue}break}break a}c=o[a+232>>2];if((c|0)<1){break a}while(1){d:{e:{b=o[o[a+240>>2]+(e<<2)>>2];switch(o[b+216>>2]+ -2|0){case 0:case 3:break d;default:break e}}if(!o[b+480>>2]|p[b+204|0]&3){break d}c=b+68|0;g=b+132|0;h=b+148|0;f:{g:{if(!p[a+300|0]){break g}d=s[a+268>>2];if(d==v(0)){break g}d=v(s[a+264>>2]-d);break f}d=v(s[a+264>>2]*s[b+244>>2])}rb(c,g,h,d,f);b=o[b+480>>2];l[o[o[b>>2]+12>>2]](b,f);c=o[a+232>>2]}e=e+1|0;if((e|0)<(c|0)){continue}break}}ga();M=f- -64|0}function ue(a,b,c,d,e,f){var g=0,h=0,i=0;a:{if(p[d+55|0]==(b|0)){break a}g=e<<2;h=o[g+4408>>2];if(!!(v(v(v(v(s[d>>2]*s[c+16>>2])+v(s[d+4>>2]*s[c+20>>2]))+v(s[d+8>>2]*s[c+24>>2]))-s[d+16>>2])<v(-9999999747378752e-21))){b=a;a=d+20|0;a=fc(b,o[a+(h<<2)>>2],o[a+g>>2],c,0);if(!a){break a}o[a+32>>2]=d;m[a+52|0]=e;m[(d+e|0)+52|0]=0;o[((e<<2)+d|0)+32>>2]=a;b=o[f>>2];b:{if(b){o[b+36>>2]=a;m[b+53|0]=2;o[a+40>>2]=b;m[a+54|0]=1;break b}o[f+4>>2]=a}o[f>>2]=a;o[f+8>>2]=o[f+8>>2]+1;return 1}m[d+55|0]=b;if(!ue(a,b,c,o[((h<<2)+d|0)+32>>2],p[(d+h|0)+52|0],f)){break a}e=b;b=o[g+4420>>2];if(!ue(a,e,c,o[((b<<2)+d|0)+32>>2],p[(b+d|0)+52|0],f)){break a}b=o[d+48>>2];if(b){o[b+44>>2]=o[d+44>>2]}b=o[d+44>>2];if(b){o[b+48>>2]=o[d+48>>2]}if(o[a+9280>>2]==(d|0)){o[a+9280>>2]=o[d+48>>2]}b=a+9284|0;o[b>>2]=o[b>>2]+ -1;o[d+44>>2]=0;o[d+48>>2]=o[a+9288>>2];b=o[a+9288>>2];if(b){o[b+44>>2]=d}o[a+9288>>2]=d;i=1;a=a+9292|0;o[a>>2]=o[a>>2]+1}return i}function NC(a,b){var c=v(0),d=v(0);if(p[a+1309|0]){c=v(v(s[a+1256>>2]-s[a+1316>>2])*s[a+1340>>2]);s[a+792>>2]=c*v(v(s[b>>2]*s[a+1364>>2])/v(o[b+48>>2]));s[a+808>>2]=v(w(c))/s[b>>2]}if(p[a+1310|0]){c=v(v(s[a+1260>>2]-s[a+1320>>2])*s[a+1344>>2]);s[a+796>>2]=c*v(v(s[b>>2]*s[a+1368>>2])/v(o[b+48>>2]));s[a+812>>2]=v(w(c))/s[b>>2]}if(p[a+1311|0]){c=v(v(s[a+1264>>2]-s[a+1324>>2])*s[a+1348>>2]);s[a+800>>2]=c*v(v(s[b>>2]*s[a+1372>>2])/v(o[b+48>>2]));s[a+816>>2]=v(w(c))/s[b>>2]}if(p[a+1312|0]){c=v(s[a+1352>>2]*v(-v(s[a+1192>>2]-s[a+1328>>2])));d=s[b>>2];s[a+876>>2]=c*v(v(d*s[a+1376>>2])/v(o[b+48>>2]));s[a+880>>2]=v(w(c))/d}if(p[a+1313|0]){c=v(s[a+1356>>2]*v(-v(s[a+1196>>2]-s[a+1332>>2])));d=s[b>>2];s[a+940>>2]=c*v(v(d*s[a+1380>>2])/v(o[b+48>>2]));s[a+944>>2]=v(w(c))/d}if(p[a+1314|0]){c=v(s[a+1360>>2]*v(-v(s[a+1200>>2]-s[a+1336>>2])));d=s[b>>2];s[a+1004>>2]=c*v(v(d*s[a+1384>>2])/v(o[b+48>>2]));s[a+1008>>2]=v(w(c))/d}}function JE(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;h=M-48|0;M=h;o[7717]=o[7717]+1;d=l[o[6606]](64,16)|0;n[d+6>>1]=g;n[d+4>>1]=f;o[d>>2]=e;e=o[b+4>>2];o[d+16>>2]=o[b>>2];o[d+20>>2]=e;e=o[b+12>>2];o[d+24>>2]=o[b+8>>2];o[d+28>>2]=e;e=o[c+4>>2];o[d+32>>2]=o[c>>2];o[d+36>>2]=e;e=o[c+12>>2];o[d+40>>2]=o[c+8>>2];o[d+44>>2]=e;o[d+8>>2]=0;o[d+52>>2]=0;o[d+56>>2]=0;e=o[b+12>>2];o[h+24>>2]=o[b+8>>2];o[h+28>>2]=e;e=o[b+4>>2];o[h+16>>2]=o[b>>2];o[h+20>>2]=e;b=o[c+12>>2];o[h+40>>2]=o[c+8>>2];o[h+44>>2]=b;b=o[c+4>>2];o[h+32>>2]=o[c>>2];o[h+36>>2]=b;o[d+60>>2]=o[a+144>>2];b=o[a+188>>2]+1|0;o[a+188>>2]=b;o[d+12>>2]=b;c=a+4|0;o[d+48>>2]=bb(c,h+16|0,d);b=o[a+144>>2];o[d+52>>2]=0;b=(b<<2)+a|0;o[d+56>>2]=o[b+124>>2];e=o[b+124>>2];if(e){o[e+52>>2]=d}o[b+124>>2]=d;if(!p[a+193|0]){o[h+8>>2]=d;o[h>>2]=17372;o[h+4>>2]=a;Jb(c,o[a+4>>2],h+16|0,h);a=a- -64|0;Jb(a,o[a>>2],h+16|0,h)}M=h+48|0;return d|0}function Yi(a,b){var c=0,d=0,e=0,f=0;vg(a,b);o[a>>2]=20532;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=20620;m[c+4|0]=0;o[a+92>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=20700;m[c+4|0]=0;o[a+96>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=20700;o[a+100>>2]=c;m[c+4|0]=1;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=20780;m[c+4|0]=0;o[a+104>>2]=c;o[7717]=o[7717]+1;c=l[o[6606]](8,16)|0;o[c>>2]=20864;o[a+108>>2]=c;m[c+4|0]=1;a:{if(!p[a+20|0]){break a}c=o[a+16>>2];if(!c|o[c>>2]>155){break a}c=o[c+16>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}c=o[a+16>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}o[7717]=o[7717]+1;d=l[o[6606]](20,16)|0;b=o[b+12>>2];o[d+4>>2]=b;o[d>>2]=156;o[7717]=o[7717]+1;c=l[o[6606]](u(b,156),16)|0;o[d+12>>2]=c;o[d+16>>2]=c;b=o[d+4>>2];o[d+8>>2]=b;e=b+ -1|0;b:{if(!e){b=c;break b}f=o[d>>2];while(1){b=c+f|0;o[c>>2]=b;c=b;e=e+ -1|0;if(e){continue}break}}o[b>>2]=0;o[a+16>>2]=d}}function xa(a,b){var c=0,d=0,f=0,j=0,k=0,l=0,m=0;a:{k=(g(b),h(0));f=k<<1;if(!(!f|(k&2147483647)>>>0>2139095040)){m=(g(a),h(0));d=m>>>23&255;if((d|0)!=255){break a}}a=v(a*b);return v(a/a)}c=m<<1;if(c>>>0>f>>>0){l=k>>>23&255;b:{if(!d){d=0;c=m<<9;if((c|0)>=0){while(1){d=d+ -1|0;c=c<<1;if((c|0)>-1){continue}break}}c=m<<1-d;break b}c=m&8388607|8388608}f=c;c:{if(!l){l=0;j=k<<9;if((j|0)>=0){while(1){l=l+ -1|0;j=j<<1;if((j|0)>-1){continue}break}}k=k<<1-l;break c}k=k&8388607|8388608}f=f-k|0;j=(f|0)>-1;if((d|0)>(l|0)){while(1){d:{if(!(j&1)){break d}c=f;if(c){break d}return v(a*v(0))}c=c<<1;f=c-k|0;j=(f|0)>-1;d=d+ -1|0;if((d|0)>(l|0)){continue}break}d=l}e:{if(!j){break e}c=f;if(c){break e}return v(a*v(0))}f:{if(c>>>0>8388607){j=c;break f}while(1){d=d+ -1|0;f=c>>>0<4194304;j=c<<1;c=j;if(f){continue}break}}c=m&-2147483648;return e(0,c|((d|0)>=1?j+ -8388608|d<<23:j>>>1-d|0)),i()}return(c|0)==(f|0)?v(a*v(0)):a}function pE(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,p=0,r=0;if(o[a+152>>2]>=1){while(1){m=q[c>>1];f=o[a+160>>2]+(n<<5)|0;a:{if(m>>>0>q[f+6>>1]){break a}p=q[d>>1];if(p>>>0<q[f>>1]){break a}r=q[c+4>>1];if(r>>>0>q[f+10>>1]){break a}j=q[d+4>>1];if(j>>>0<q[f+4>>1]){break a}h=q[c+2>>1];if(h>>>0>q[f+8>>1]){break a}g=q[d+2>>1];if(g>>>0<q[f+2>>1]){break a}b:{e=o[f+16>>2];if((e|0)<1){k=0;break b}i=o[f+12>>2];f=e+i|0;e=o[a+136>>2]+(i<<4)|0;k=0;while(1){j=m>>>0<=q[e+6>>1]&p>>>0>=q[e>>1]&r>>>0<=q[e+10>>1]&j>>>0>=q[e+4>>1]&h>>>0<=q[e+8>>1]&g>>>0>=q[e+2>>1];h=o[e+12>>2];g=(h|0)<0;if(!(g|!j)){l[o[o[b>>2]+8>>2]](b,h>>>21|0,h&2097151)}c:{if(!(g&(j^-1))){i=i+1|0;e=e+16|0;break c}g=o[e+12>>2];i=i-g|0;e=e-(g<<4)|0}k=k+1|0;if((i|0)>=(f|0)){break b}g=q[d+2>>1];h=q[c+2>>1];j=q[d+4>>1];r=q[c+4>>1];p=q[d>>1];m=q[c>>1];continue}}if(o[7309]>=(k|0)){break a}o[7309]=k}n=n+1|0;if((n|0)<o[a+152>>2]){continue}break}}}function WF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0),C=v(0),D=v(0),E=v(0),F=v(0),G=v(0);j=s[b+56>>2];n=s[b+36>>2];p=s[b+40>>2];k=s[b+52>>2];g=s[b+20>>2];h=s[a+112>>2];f=s[a+20>>2];i=s[a+36>>2];q=s[b+24>>2];r=s[a+116>>2];t=s[a+24>>2];u=s[a+40>>2];x=s[b+32>>2];m=s[b+48>>2];y=s[b>>2];z=s[b+4>>2];A=s[b+8>>2];B=s[b+16>>2];e=s[a+108>>2];C=s[a+16>>2];D=s[a+32>>2];E=v(l[o[o[a>>2]+48>>2]](a));F=v(l[o[o[a>>2]+48>>2]](a));G=v(l[o[o[a>>2]+48>>2]](a));o[c+12>>2]=0;e=v(v(e*v(D-C))*v(.5));h=v(v(h*v(i-f))*v(.5));f=v(v(e*v(w(B)))+v(h*v(w(g))));g=v(v(r*v(u-t))*v(.5));f=v(F+v(f+v(g*v(w(q)))));s[c+4>>2]=k-f;i=v(E+v(v(v(e*v(w(y)))+v(h*v(w(z))))+v(g*v(w(A)))));s[c>>2]=m-i;e=v(G+v(v(v(e*v(w(x)))+v(h*v(w(n))))+v(g*v(w(p)))));s[c+8>>2]=j-e;o[d+12>>2]=0;s[d+8>>2]=j+e;s[d+4>>2]=k+f;s[d>>2]=m+i}function il(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0,q=0;e=M-32|0;M=e;d=o[a+12>>2];k=p[a+28|0];h=k?c:b;i=o[h+4>>2];f=o[i+16>>2];if((d|0)<(f|0)){if(o[a+16>>2]<(f|0)){if(f){o[7717]=o[7717]+1;n=l[o[6606]](f<<2,16)|0;g=o[a+12>>2]}else{g=d}if((g|0)>=1){while(1){q=j<<2;o[q+n>>2]=o[o[a+20>>2]+q>>2];j=j+1|0;if((g|0)!=(j|0)){continue}break}}g=o[a+20>>2];if(g){if(p[a+24|0]){if(g){o[7718]=o[7718]+1;l[o[6607]](g)}}o[a+20>>2]=0}o[a+20>>2]=n;o[a+16>>2]=f;m[a+24|0]=1}while(1){o[o[a+20>>2]+(d<<2)>>2]=0;d=d+1|0;if((f|0)!=(d|0)){continue}break}}o[a+12>>2]=f;if((f|0)>=1){b=k?b:c;d=0;while(1){a:{if(o[i+64>>2]){o[o[a+20>>2]+(d<<2)>>2]=0;break a}c=o[h+12>>2];g=o[h+8>>2];o[e+12>>2]=o[(o[i+24>>2]+u(d,80)|0)+64>>2];o[e+16>>2]=g;o[e+20>>2]=c;o[e+28>>2]=d;o[e+24>>2]=-1;o[e+8>>2]=h;c=o[a+4>>2];c=l[o[o[c>>2]+8>>2]](c,e+8|0,b,o[a+32>>2])|0;o[o[a+20>>2]+(d<<2)>>2]=c}d=d+1|0;if((f|0)!=(d|0)){continue}break}}M=e+32|0}function Ut(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Tt(a);Hc(a+92|0);o[(M-16|0)+12>>2]=a+156;o[(M-16|0)+12>>2]=a+172;o[(M-16|0)+12>>2]=a+188;s[a+204>>2]=s[o[c+8>>2]+48>>2];s[a+208>>2]=s[o[c+8>>2]+52>>2];s[a+212>>2]=s[o[c+8>>2]+56>>2];s[a+216>>2]=s[o[c+8>>2]+60>>2];s[a+220>>2]=s[o[c+8>>2]+64>>2];s[a+224>>2]=s[o[c+8>>2]+68>>2];b=o[c+8>>2];d=o[b+4>>2];o[a+156>>2]=o[b>>2];o[a+160>>2]=d;d=o[b+12>>2];o[a+164>>2]=o[b+8>>2];o[a+168>>2]=d;b=o[c+8>>2];d=o[b+20>>2];o[a+172>>2]=o[b+16>>2];o[a+176>>2]=d;d=o[b+28>>2];o[a+180>>2]=o[b+24>>2];o[a+184>>2]=d;b=o[c+8>>2];d=o[b+36>>2];o[a+188>>2]=o[b+32>>2];o[a+192>>2]=d;d=o[b+44>>2];o[a+196>>2]=o[b+40>>2];o[a+200>>2]=d;s[a+228>>2]=s[o[c+8>>2]+72>>2];s[a+232>>2]=0;s[a+252>>2]=0;s[a+236>>2]=0;s[a+240>>2]=0;s[a+256>>2]=0;s[a+244>>2]=.10000000149011612;m[a+260|0]=m[o[c+8>>2]+80|0]&1;s[a+248>>2]=s[o[c+8>>2]+76>>2];M=c+16|0}function vD(a,b,c,d,e){o[a+20>>2]=e;o[a+16>>2]=d;o[a+12>>2]=c;o[a+4>>2]=b;b=o[a+32>>2];if((b|0)<=-1){if(o[a+36>>2]<=-1){c=o[a+40>>2];if(c){if(p[a+44|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+40>>2]=0}o[a+36>>2]=0;o[a+40>>2]=0;m[a+44|0]=1}while(1){o[o[a+40>>2]+(b<<2)>>2]=0;c=b+1|0;d=c>>>0>=b>>>0;b=c;if(d){continue}break}}o[a+32>>2]=0;b=o[a+52>>2];if((b|0)<=-1){if(o[a+56>>2]<=-1){c=o[a+60>>2];if(c){if(p[a- -64|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+60>>2]=0}o[a+56>>2]=0;o[a+60>>2]=0;m[a- -64|0]=1}while(1){o[o[a+60>>2]+(b<<2)>>2]=0;c=b+1|0;d=c>>>0>=b>>>0;b=c;if(d){continue}break}}o[a+52>>2]=0;b=o[a+72>>2];if((b|0)<=-1){if(o[a+76>>2]<=-1){c=o[a+80>>2];if(c){if(p[a+84|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+80>>2]=0}o[a+76>>2]=0;o[a+80>>2]=0;m[a+84|0]=1}while(1){o[o[a+80>>2]+(b<<2)>>2]=0;c=b+1|0;d=c>>>0>=b>>>0;b=c;if(d){continue}break}}o[a+72>>2]=0}function CG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=0,g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=0,n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0),z=v(0),A=v(0),B=v(0);f=M-16|0;M=f;m=a+28|0;h=o[a+52>>2];e=s[m+((h+2|0)%3<<2)>>2];o[f+12>>2]=0;s[f+8>>2]=e;s[f+4>>2]=e;s[f>>2]=e;h=h<<2;s[h+f>>2]=e+s[h+m>>2];e=v(l[o[o[a>>2]+48>>2]](a));g=v(l[o[o[a>>2]+48>>2]](a));i=v(l[o[o[a>>2]+48>>2]](a));e=v(e+s[f>>2]);s[f>>2]=e;g=v(g+s[f+4>>2]);s[f+4>>2]=g;n=s[b+52>>2];j=s[b+20>>2];r=s[b+24>>2];p=s[b+56>>2];k=s[b+36>>2];t=s[b+40>>2];q=s[b+48>>2];u=s[b+8>>2];x=s[b>>2];y=s[b+4>>2];z=s[b+16>>2];A=s[b+32>>2];B=s[f+8>>2];o[c+12>>2]=0;i=v(i+B);k=v(v(v(e*v(w(A)))+v(g*v(w(k))))+v(i*v(w(t))));s[c+8>>2]=p-k;j=v(v(v(e*v(w(z)))+v(g*v(w(j))))+v(i*v(w(r))));s[c+4>>2]=n-j;e=v(v(v(e*v(w(x)))+v(g*v(w(y))))+v(i*v(w(u))));s[c>>2]=q-e;o[d+12>>2]=0;s[d+8>>2]=p+k;s[d+4>>2]=j+n;s[d>>2]=e+q;M=f+16|0}function iD(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),q=v(0),r=v(0),t=v(0);e=v(1);d=o[b>>2];if(!((d|0)==o[a+80>>2]|p[d+204|0]&4|v(v(v(v(s[a+28>>2]-s[a+12>>2])*s[b+8>>2])+v(v(s[a+32>>2]-s[a+16>>2])*s[b+12>>2]))+v(v(s[a+36>>2]-s[a+20>>2])*s[b+16>>2]))>=v(-s[a+84>>2]))){h=o[b+40>>2];o[a+76>>2]=d;o[a+4>>2]=h;a:{if(c){c=b+8|0;d=o[c+4>>2];o[a+44>>2]=o[c>>2];o[a+48>>2]=d;d=o[c+12>>2];o[a+52>>2]=o[c+8>>2];o[a+56>>2]=d;break a}i=s[d+12>>2];j=s[d+8>>2];k=s[d+28>>2];l=s[d+20>>2];m=s[d+24>>2];n=s[d+44>>2];q=s[d+36>>2];r=s[d+40>>2];t=s[d+4>>2];e=s[b+16>>2];f=s[b+8>>2];g=s[b+12>>2];o[a+56>>2]=0;s[a+52>>2]=v(v(f*q)+v(g*r))+v(e*n);s[a+48>>2]=v(v(f*l)+v(g*m))+v(e*k);s[a+44>>2]=v(v(t*f)+v(j*g))+v(i*e)}c=o[b+28>>2];o[a+60>>2]=o[b+24>>2];o[a+64>>2]=c;c=o[b+36>>2];o[a+68>>2]=o[b+32>>2];o[a+72>>2]=c;e=s[b+40>>2]}return v(e)}function _a(a,b){var c=0,d=0,f=0,j=0,k=v(0),l=0;a:{c=(g(b),h(0));f=c&2147483647;if(f>>>0<=2139095040){j=(g(a),h(0));d=j&2147483647;if(d>>>0<2139095041){break a}}return v(a+b)}if((c|0)==1065353216){return ti(a)}l=j>>>31|0;j=c>>>30&2;c=l|j;b:{c:{d:{e:{if(!d){f:{switch(c-2|0){case 0:break e;case 1:break f;default:break d}}return v(-3.1415927410125732)}if((f|0)!=2139095040){if(!f|!(f+218103808>>>0>=d>>>0?(d|0)!=2139095040:0)){break b}g:{if(d+218103808>>>0<f>>>0){k=v(0);if(j){break g}}k=ti(v(w(v(a/b))))}a=k;h:{switch(c|0){case 1:return v(-a);case 2:return v(v(3.1415927410125732)-v(a+v(8.742277657347586e-8)));case 0:break d;default:break h}}return v(v(a+v(8.742277657347586e-8))+v(-3.1415927410125732))}if((d|0)==2139095040){break c}return s[(c<<2)+25936>>2]}a=v(3.1415927410125732)}return a}return s[(c<<2)+25920>>2]}return e(0,(g(a),h(0))&-2147483648|1070141403),i()}function kA(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0;h=M-96|0;M=h;a:{if(!e){break a}g=o[a+268>>2];b:{if((g|0)<1){break b}i=o[a+276>>2];e=0;while(1){if(o[i+(e<<2)>>2]!=(c|0)){e=e+1|0;if((g|0)!=(e|0)){continue}break b}break}if((e|0)!=(g|0)){break a}}c:{if(o[a+272>>2]!=(g|0)){break c}i=g?g<<1:1;if((g|0)>=(i|0)){break c}if(i){o[7717]=o[7717]+1;j=l[o[6606]](i<<2,16)|0;g=o[a+268>>2]}if((g|0)>=1){e=0;while(1){k=e<<2;o[k+j>>2]=o[o[a+276>>2]+k>>2];e=e+1|0;if((g|0)!=(e|0)){continue}break}}e=o[a+276>>2];if(e){if(p[a+280|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}g=o[a+268>>2]}o[a+276>>2]=0}o[a+276>>2]=j;o[a+272>>2]=i;m[a+280|0]=1}o[o[a+276>>2]+(g<<2)>>2]=c;o[a+268>>2]=g+1}e=o[a+720>>2];o[h+20>>2]=c;b=e+u(b,104)|0;o[h>>2]=b;c=o[d+12>>2];o[h+12>>2]=o[d+8>>2];o[h+16>>2]=c;c=o[d+4>>2];o[h+4>>2]=o[d>>2];o[h+8>>2]=c;m[b+100|0]=p[b+100|0]|1;s[h+24>>2]=f;Dh(a+788|0,h);M=h+96|0}function Ed(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0);m=s[a+220>>2];n=s[a+212>>2];p=s[a+216>>2];q=s[a+204>>2];r=s[a+196>>2];t=s[a+200>>2];u=s[a+188>>2];w=s[a+184>>2];x=s[a+180>>2];g=s[b+4>>2];h=s[b+8>>2];j=s[b>>2];d=s[c+8>>2];f=s[c+4>>2];i=s[c>>2];e=s[a+128>>2];k=v(i*e);s[a+244>>2]=k+s[a+244>>2];l=v(e*f);s[a+248>>2]=l+s[a+248>>2];e=v(e*d);s[a+252>>2]=e+s[a+252>>2];s[a+316>>2]=k+s[a+316>>2];s[a+320>>2]=l+s[a+320>>2];s[a+324>>2]=e+s[a+324>>2];e=v(v(d*g)-v(f*h));d=v(v(i*h)-v(d*j));f=v(v(f*j)-v(i*g));g=v(v(v(x*e)+v(w*d))+v(u*f));s[a+260>>2]=g+s[a+260>>2];h=v(v(v(e*r)+v(d*t))+v(f*q));s[a+264>>2]=h+s[a+264>>2];d=v(v(v(e*n)+v(d*p))+v(f*m));s[a+268>>2]=d+s[a+268>>2];s[a+332>>2]=g+s[a+332>>2];s[a+336>>2]=h+s[a+336>>2];s[a+340>>2]=d+s[a+340>>2];o[a+308>>2]=o[a+308>>2]+1}function $B(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[b+4>>2];o[a+300>>2]=o[b>>2];o[a+304>>2]=d;d=o[b+12>>2];o[a+308>>2]=o[b+8>>2];o[a+312>>2]=d;d=o[b+28>>2];o[a+324>>2]=o[b+24>>2];o[a+328>>2]=d;d=o[b+20>>2];o[a+316>>2]=o[b+16>>2];o[a+320>>2]=d;d=o[b+44>>2];o[a+340>>2]=o[b+40>>2];o[a+344>>2]=d;d=o[b+36>>2];o[a+332>>2]=o[b+32>>2];o[a+336>>2]=d;d=o[b+60>>2];o[a+356>>2]=o[b+56>>2];o[a+360>>2]=d;d=o[b+52>>2];o[a+348>>2]=o[b+48>>2];o[a+352>>2]=d;b=o[c+12>>2];o[a+372>>2]=o[c+8>>2];o[a+376>>2]=b;b=o[c+4>>2];o[a+364>>2]=o[c>>2];o[a+368>>2]=b;b=o[c+20>>2];o[a+380>>2]=o[c+16>>2];o[a+384>>2]=b;b=o[c+28>>2];o[a+388>>2]=o[c+24>>2];o[a+392>>2]=b;b=o[c+36>>2];o[a+396>>2]=o[c+32>>2];o[a+400>>2]=b;b=o[c+44>>2];o[a+404>>2]=o[c+40>>2];o[a+408>>2]=b;b=o[c+60>>2];o[a+420>>2]=o[c+56>>2];o[a+424>>2]=b;b=o[c+52>>2];o[a+412>>2]=o[c+48>>2];o[a+416>>2]=b;l[o[o[a>>2]+8>>2]](a)}function mk(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,p=0,r=0;a:{f=o[((b<<2)+a|0)+68>>2];k=c<<2;c=f+k|0;i=c+ -4|0;g=q[i>>1];if(q[c>>1]>=g>>>0){break a}m=b<<1;h=o[a+60>>2];k=m+(h+(q[(f+k|0)+2>>1]<<6)|0)|0;p=1<<b&3;r=1<<p&3;while(1){b=q[c+ -2>>1];b:{if(!(g&1)){g=(q[c+2>>1]<<6)+h|0;f=p<<1;e=g+f|0;j=f;f=(b<<6)+h|0;j=j+f|0;c:{if(q[e+54>>1]<q[j+48>>1]|q[j+54>>1]<q[e+48>>1]){break c}e=r<<1;j=e+g|0;e=e+f|0;if(q[j+54>>1]<q[e+48>>1]|q[e+54>>1]<q[j+48>>1]){break c}e=o[a+92>>2];l[o[o[e>>2]+12>>2]](e,g,f,d)|0;e=o[a+96>>2];if(!e){break c}l[o[o[e>>2]+12>>2]](e,g,f,d)|0}b=(((b<<6)+h|0)+m|0)+48|0;break b}b=(((b<<6)+h|0)+m|0)+54|0}n[b>>1]=q[b>>1]+1;n[k+54>>1]=q[k+54>>1]+ -1;b=q[c>>1]|q[c+2>>1]<<16;h=q[i>>1]|q[i+2>>1]<<16;n[c>>1]=h;n[c+2>>1]=h>>>16;n[i>>1]=b;n[i+2>>1]=b>>>16;c=c+ -4|0;i=i+ -4|0;g=q[i>>1];if(q[c>>1]>=g>>>0){break a}h=o[a+60>>2];continue}}}function aF(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,p=0,r=0,s=0;a:{c=o[((b<<2)+a|0)+68>>2]+(c<<2)|0;e=q[c+6>>1];if(!e){break a}h=b<<1;g=o[a+60>>2]+(q[c+2>>1]<<6)|0;f=g+54|0;j=h+f|0;b=1<<b&3;i=b<<1;d=g+48|0;m=i+d|0;p=f+i|0;g=(1<<b&3)<<1;r=d+g|0;s=f+g|0;b=q[c>>1];while(1){f=q[c+4>>1];if((b&65535)>>>0<f>>>0){break a}b=o[a+60>>2];b:{if(!(f&1)){f=(e<<6)+b|0;d=i+f|0;c:{if(q[p>>1]<q[d+48>>1]|q[d+54>>1]<q[m>>1]){break c}d=f+g|0;if(q[s>>1]<q[d+48>>1]|q[d+54>>1]<q[r>>1]){break c}d=o[a+92>>2];k=(q[c+2>>1]<<6)+b|0;l[o[o[d>>2]+8>>2]](d,k,f)|0;d=o[a+96>>2];if(!d){break c}l[o[o[d>>2]+8>>2]](d,k,f)|0}b=(((e<<6)+b|0)+h|0)+48|0;break b}b=(((e<<6)+b|0)+h|0)+54|0}n[b>>1]=q[b>>1]+ -1;n[j>>1]=q[j>>1]+1;e=q[c+4>>1]|q[c+6>>1]<<16;b=q[c>>1]|q[c+2>>1]<<16;n[c+4>>1]=b;n[c+6>>1]=b>>>16;n[c>>1]=e;n[c+2>>1]=e>>>16;e=c;c=c+4|0;e=q[e+10>>1];if(e){continue}break}}}function pL(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=0,w=0,x=v(0),y=v(0),z=v(0);d=M-32|0;M=d;u=o[b+124>>2];w=o[b+4>>2]+(u>>1)|0;h=o[b+120>>2];h=u&1?o[o[w>>2]+h>>2]:h;i=s[b+16>>2];j=s[b+12>>2];k=s[b+32>>2];m=s[b+24>>2];n=s[b+28>>2];p=s[b+48>>2];q=s[b+40>>2];r=s[b+44>>2];t=s[b+8>>2];e=s[c+8>>2];f=s[c>>2];g=s[c+4>>2];o[d+12>>2]=0;s[d+8>>2]=v(v(f*q)+v(g*r))+v(e*p);s[d+4>>2]=v(v(f*m)+v(g*n))+v(e*k);s[d>>2]=v(v(t*f)+v(j*g))+v(i*e);l[h](d+16|0,w,d);i=s[b+104>>2];j=s[b- -64>>2];k=s[b+60>>2];m=s[b+108>>2];n=s[b+80>>2];p=s[b+72>>2];q=s[b+76>>2];r=s[b+112>>2];t=s[b+96>>2];x=s[b+88>>2];y=s[b+92>>2];z=s[b+56>>2];e=s[d+24>>2];f=s[d+16>>2];g=s[d+20>>2];o[a+12>>2]=0;s[a+8>>2]=r+v(v(v(f*x)+v(g*y))+v(e*t));s[a+4>>2]=m+v(v(v(f*p)+v(g*q))+v(e*n));s[a>>2]=i+v(v(v(f*z)+v(g*k))+v(e*j));M=d+32|0}function Vz(a){var b=0,c=v(0),d=0,e=v(0),f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=0,m=0;ia(21101);c=s[a+300>>2];j=s[a+304>>2];h=s[a+312>>2];i=s[a+308>>2];a:{if(i==v(0)){e=v(0);if(!(h>v(0))){break a}}e=eA(a);k=v(h*v(s[a+476>>2]-e));e=v(i*v(v(1)/v(w(e))))}g=o[a+712>>2];if((g|0)>=1){l=j>v(0)|c>v(0);m=a+1212|0;while(1){b=o[a+720>>2]+u(d,104)|0;b:{if(!(s[b+88>>2]>v(0))){break b}if(l){Ri(a,m,d)}if(i!=v(0)){c=v(e*s[b+92>>2]);s[b+56>>2]=v(s[b+72>>2]*c)+s[b+56>>2];s[b+60>>2]=v(c*s[b+76>>2])+s[b+60>>2];f=b- -64|0;s[f>>2]=v(c*s[b+80>>2])+s[f>>2]}if(!(h>v(0))){break b}c=v(k*s[b+92>>2]);s[b+56>>2]=v(s[b+72>>2]*c)+s[b+56>>2];s[b+60>>2]=v(c*s[b+76>>2])+s[b+60>>2];f=b- -64|0;s[f>>2]=v(c*s[b+80>>2])+s[f>>2]}d=d+1|0;if((g|0)!=(d|0)){continue}break}}d=o[a+752>>2];if((d|0)>=1){g=a+1212|0;b=0;while(1){hA(a,g,b);b=b+1|0;if((d|0)!=(b|0)){continue}break}}ga()}function eD(a,b,c,d){var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0);k=s[a>>2];g=s[b>>2];f=v(k-g);e=v(f*f);l=s[a+4>>2];f=s[b+4>>2];h=v(l-f);e=v(e+v(h*h));m=s[a+8>>2];h=s[b+8>>2];i=v(m-h);j=v(e+v(i*i));n=s[a+12>>2];i=s[b+12>>2];e=v(n-i);j=v(j+v(e*e));e=v(k+g);p=v(e*e);e=v(l+f);p=v(p+v(e*e));e=v(m+h);p=v(p+v(e*e));e=v(n+i);if(!(j<v(p+v(e*e)))){i=v(-i);h=v(-h);f=v(-f);g=v(-g)}e=Sa(v(y(v(z(v(v(m*h)+v(v(l*f)+v(v(k*g)+v(i*n)))),v(-1))),v(1))));s[d>>2]=e+e;o[c+12>>2]=0;e=v(v(k*f)+v(v(v(h*n)-v(m*i))-v(l*g)));s[c+8>>2]=e;j=v(v(m*g)+v(v(v(f*n)-v(l*i))-v(k*h)));s[c+4>>2]=j;g=v(v(l*h)+v(v(v(g*n)-v(k*i))-v(m*f)));s[c>>2]=g;f=v(v(v(g*g)+v(j*j))+v(e*e));if(!!(f<v(1.4210854715202004e-14))){o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=0;return}f=v(v(1)/v(C(f)));s[c+8>>2]=e*f;s[c+4>>2]=j*f;s[c>>2]=g*f}function Pz(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;a:{e=o[a+4>>2];if((e|0)<1){break a}d=o[a+12>>2];while(1){c=o[o[d+(b<<2)>>2]+384>>2];g=(g|0)>(c|0)?g:c;b=b+1|0;if((e|0)!=(b|0)){continue}break}if((e|0)>=1){b=0;while(1){c=o[o[a+12>>2]+(b<<2)>>2];if(o[c+852>>2]>=1){d=0;while(1){f=o[o[c+860>>2]+(d<<2)>>2];l[o[o[f>>2]+8>>2]](f,s[c+452>>2],g);d=d+1|0;if((d|0)<o[c+852>>2]){continue}break}}b=b+1|0;if((e|0)!=(b|0)){continue}break}}if((g|0)>=1){d=0;while(1){c=0;if((e|0)>0){while(1){f=o[o[a+12>>2]+(c<<2)>>2];h=o[f+852>>2];if((h|0)>=1){b=0;while(1){i=o[o[f+860>>2]+(b<<2)>>2];l[o[o[i>>2]+12>>2]](i,s[f+452>>2],v(1));b=b+1|0;if((h|0)!=(b|0)){continue}break}}c=c+1|0;if((e|0)!=(c|0)){continue}break}}d=d+1|0;if((g|0)!=(d|0)){continue}break}}if((e|0)<1){break a}b=0;while(1){Oz(o[o[a+12>>2]+(b<<2)>>2]);b=b+1|0;if((e|0)!=(b|0)){continue}break}}}function nk(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,p=0,r=0,s=0,t=0;a:{c=o[((b<<2)+a|0)+68>>2]+(c<<2)|0;f=c+ -4|0;e=q[f>>1];if(q[c>>1]>=e>>>0){break a}j=b<<1;g=o[a+60>>2];h=g+(q[c+2>>1]<<6)|0;d=h+48|0;p=j+d|0;b=1<<b&3;k=b<<1;r=d+k|0;i=h+54|0;s=i+k|0;m=(1<<b&3)<<1;t=d+m|0;i=i+m|0;while(1){b=q[c+ -2>>1];b:{if(e&1){e=(b<<6)+g|0;d=e+k|0;c:{if(q[s>>1]<q[d+48>>1]|q[d+54>>1]<q[r>>1]){break c}d=e+m|0;if(q[i>>1]<q[d+48>>1]|q[d+54>>1]<q[t>>1]){break c}d=o[a+92>>2];l[o[o[d>>2]+8>>2]](d,h,e)|0;d=o[a+96>>2];if(!d){break c}l[o[o[d>>2]+8>>2]](d,h,e)|0}b=(((b<<6)+g|0)+j|0)+54|0;break b}b=(((b<<6)+g|0)+j|0)+48|0}n[b>>1]=q[b>>1]+1;n[p>>1]=q[p>>1]+ -1;b=q[c>>1]|q[c+2>>1]<<16;g=q[f>>1]|q[f+2>>1]<<16;n[c>>1]=g;n[c+2>>1]=g>>>16;n[f>>1]=b;n[f+2>>1]=b>>>16;c=c+ -4|0;f=f+ -4|0;e=q[f>>1];if(q[c>>1]>=e>>>0){break a}g=o[a+60>>2];continue}}}function Qz(a){var b=v(0),c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=0,i=0,j=v(0),k=v(0),l=0,m=0,n=0,p=0;l=o[a+1112>>2];if((l|0)>=1){n=o[a+1120>>2];while(1){a=o[(i<<2)+n>>2];a:{if(!(s[a+352>>2]>v(0))){break a}m=o[a+24>>2];if((m|0)<1){break a}p=o[a+32>>2];h=0;while(1){c=o[(h<<2)+p>>2];b:{if(!(s[c+88>>2]>v(0))){break b}f=s[a+336>>2];d=v(s[c+32>>2]-s[a+236>>2]);b=v(s[c+28>>2]-s[a+232>>2]);g=s[a+340>>2];j=v(s[a+316>>2]+v(v(f*d)-v(b*g)));e=v(s[c+24>>2]-s[a+228>>2]);k=d;d=s[a+332>>2];g=v(s[a+320>>2]+v(v(e*g)-v(k*d)));e=v(v(v(b*d)-v(e*f))+s[a+324>>2]);f=s[c+40>>2];d=s[c+44>>2];b=s[c+48>>2];if(!(v(v(v(j*j)+v(g*g))+v(e*e))<=v(v(v(f*f)+v(d*d))+v(b*b)))){break b}k=b;e=v(e-b);b=s[a+352>>2];s[c+48>>2]=k+v(e*b);s[c+44>>2]=d+v(b*v(g-d));s[c+40>>2]=f+v(b*v(j-f))}h=h+1|0;if((m|0)!=(h|0)){continue}break}}i=i+1|0;if((l|0)!=(i|0)){continue}break}}}function Gy(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=v(0),n=v(0),p=v(0),q=v(0),r=0,t=v(0),w=v(0),x=v(0),y=v(0);o[7717]=o[7717]+1;f=d+2|0;h=l[o[6606]]((f&268435455)!=(f|0)?-1:f<<4,16)|0;j=fa((f&1073741823)!=(f|0)?-1:f<<2);if((d|0)>=-1){r=(f|0)>1?f:1;t=v(d+1|0);while(1){w=s[c>>2];n=s[b>>2];x=s[c+4>>2];p=s[b+4>>2];y=s[c+8>>2];q=s[b+8>>2];i=(g<<4)+h|0;o[i+12>>2]=0;k=v(v(g|0)/t);s[i+8>>2]=q+v(k*v(y-q));s[i+4>>2]=p+v(k*v(x-p));s[i>>2]=n+v(k*v(w-n));o[(g<<2)+j>>2]=1065353216;g=g+1|0;if((r|0)!=(g|0)){continue}break}}o[7717]=o[7717]+1;a=Zb(l[o[6606]](1252,16)|0,a,f,h,j);if(e&1){s[o[a+720>>2]+88>>2]=0;m[a+924|0]=1}if(e&2){s[(o[a+720>>2]+u(d+1|0,104)|0)+88>>2]=0;m[a+924|0]=1}if(h){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}ba(j);if((d|0)>=0){b=(f|0)>2?f:2;g=1;while(1){va(a,g+ -1|0,g,0,0);g=g+1|0;if((b|0)!=(g|0)){continue}break}}return a}function _E(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,p=0;a:{c=o[((b<<2)+a|0)+68>>2]+(c<<2)|0;f=q[c+6>>1];if(!f){break a}j=b<<1;k=j+(o[a+60>>2]+(q[c+2>>1]<<6)|0)|0;m=1<<b&3;p=1<<m&3;b=q[c>>1];while(1){g=q[c+4>>1];if((b&65535)>>>0<g>>>0){break a}b=o[a+60>>2];b:{if(g&1){g=(q[c+2>>1]<<6)+b|0;e=m<<1;h=g+e|0;i=(f<<6)+b|0;e=e+i|0;c:{if(q[h+54>>1]<q[e+48>>1]|q[e+54>>1]<q[h+48>>1]){break c}e=p<<1;h=e+g|0;e=e+i|0;if(q[h+54>>1]<q[e+48>>1]|q[e+54>>1]<q[h+48>>1]){break c}e=o[a+92>>2];l[o[o[e>>2]+12>>2]](e,g,i,d)|0;e=o[a+96>>2];if(!e){break c}l[o[o[e>>2]+12>>2]](e,g,i,d)|0}b=(((f<<6)+b|0)+j|0)+54|0;break b}b=(((f<<6)+b|0)+j|0)+48|0}n[b>>1]=q[b>>1]+ -1;n[k+48>>1]=q[k+48>>1]+1;f=q[c+4>>1]|q[c+6>>1]<<16;b=q[c>>1]|q[c+2>>1]<<16;n[c+4>>1]=b;n[c+6>>1]=b>>>16;n[c>>1]=f;n[c+2>>1]=f>>>16;f=c;c=c+4|0;f=q[f+10>>1];if(f){continue}break}}}function hg(a,b,c,d,e,f,g){var h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0);h=s[d>>2];k=s[d+4>>2];l=s[d+8>>2];n=v(v(v(s[c>>2]*h)+v(s[c+4>>2]*k))+v(s[c+8>>2]*l));i=v(v(v(h*s[a>>2])+v(k*s[a+16>>2]))+v(l*s[a+32>>2]));j=s[e+80>>2];m=v(i*(i<v(0)?v(-j):j));i=v(v(v(h*s[a+4>>2])+v(k*s[a+20>>2]))+v(l*s[a+36>>2]));j=s[e+84>>2];m=v(m+v(i*(i<v(0)?v(-j):j)));i=v(v(v(h*s[a+8>>2])+v(k*s[a+24>>2]))+v(l*s[a+40>>2]));j=s[e+88>>2];i=v(m+v(i*(i<v(0)?v(-j):j)));j=s[e+96>>2];m=i>j?i:j;i=v(v(v(h*s[b>>2])+v(k*s[b+16>>2]))+v(l*s[b+32>>2]));j=s[f+80>>2];o=v(i*(i<v(0)?v(-j):j));i=v(v(v(h*s[b+4>>2])+v(k*s[b+20>>2]))+v(l*s[b+36>>2]));j=s[f+84>>2];h=v(v(v(h*s[b+8>>2])+v(k*s[b+24>>2]))+v(l*s[b+40>>2]));k=s[f+88>>2];h=v(v(o+v(i*(i<v(0)?v(-j):j)))+v(h*(h<v(0)?v(-k):k)));k=s[f+96>>2];h=v(m+(h>k?h:k));k=v(n+h);h=v(h-n);return(k<h?k:h)>g^1}function iB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=v(0),h=v(0),i=v(0),j=v(0);e=M-96|0;M=e;o[e+20>>2]=-65535;o[e+24>>2]=0;o[e+12>>2]=1065353216;o[e+16>>2]=0;o[e+8>>2]=1740;f=o[b+12>>2];o[e+36>>2]=o[b+8>>2];o[e+40>>2]=f;f=o[b+4>>2];o[e+28>>2]=o[b>>2];o[e+32>>2]=f;f=o[c+12>>2];o[e+52>>2]=o[c+8>>2];o[e+56>>2]=f;f=o[c+4>>2];o[e+44>>2]=o[c>>2];o[e+48>>2]=f;a=o[a+4>>2];l[o[o[a>>2]+32>>2]](a,b,c,e+8|0);c=0;a=o[e+16>>2];if(!(!a|!(p[a+236|0]&2)|p[a+204|0]&4)){b=o[e+80>>2];o[d>>2]=o[e+76>>2];o[d+4>>2]=b;b=o[e+88>>2];o[d+8>>2]=o[e+84>>2];o[d+12>>2]=b;b=o[e+64>>2];o[d+16>>2]=o[e+60>>2];o[d+20>>2]=b;b=o[e+72>>2];o[d+24>>2]=o[e+68>>2];o[d+28>>2]=b;g=s[d+16>>2];h=s[d+20>>2];i=s[d+24>>2];j=v(v(1)/v(C(v(v(v(g*g)+v(h*h))+v(i*i)))));s[d+16>>2]=g*j;s[d+24>>2]=i*j;s[d+20>>2]=h*j;o[d+32>>2]=o[e+12>>2];c=a}M=e+96|0;return c|0}function Ok(a,b,c,d,e,f){var i=v(0),j=v(0),k=v(0),m=v(0),n=0,p=0,q=0,r=0,t=0,u=v(0),w=v(0),x=v(0),y=v(0),z=v(0);l[o[o[a>>2]+8>>2]](a,b,e,f);i=s[c+8>>2];j=s[c+4>>2];m=s[e+8>>2];b=o[e+8>>2];u=s[e+4>>2];n=o[e+4>>2];w=s[e>>2];p=o[e>>2];x=s[f+8>>2];q=o[f+8>>2];y=s[f+4>>2];r=o[f+4>>2];z=s[f>>2];t=o[f>>2];k=s[c>>2];a:{if(!!(k>v(0))){t=(g(v(k+z)),h(0));break a}p=(g(v(k+w)),h(0))}b:{if(!!(j>v(0))){r=(g(v(j+y)),h(0));break b}n=(g(v(j+u)),h(0))}c:{if(!!(i>v(0))){q=(g(v(i+x)),h(0));break c}b=(g(v(i+m)),h(0))}i=s[d+8>>2];j=s[d>>2];k=s[d+4>>2];m=v(l[o[o[a>>2]+16>>2]](a));o[e+12>>2]=0;o[e+8>>2]=b;o[e+4>>2]=n;o[e>>2]=p;o[f+12>>2]=0;o[f+8>>2]=q;o[f+4>>2]=r;o[f>>2]=t;i=v(m*v(C(v(v(v(j*j)+v(k*k))+v(i*i)))));s[e>>2]=s[e>>2]-i;s[e+4>>2]=s[e+4>>2]-i;s[e+8>>2]=s[e+8>>2]-i;s[f>>2]=i+s[f>>2];s[f+4>>2]=i+s[f+4>>2];s[f+8>>2]=i+s[f+8>>2]}function al(a,b,c,d){var e=0,f=0,g=0,h=0;g=M+ -64|0;M=g;h=u(b,80);e=h+o[a+24>>2]|0;b=c;f=o[b+4>>2];o[e>>2]=o[b>>2];o[e+4>>2]=f;f=o[b+12>>2];o[e+8>>2]=o[b+8>>2];o[e+12>>2]=f;f=o[b+28>>2];o[e+24>>2]=o[b+24>>2];o[e+28>>2]=f;f=o[b+20>>2];o[e+16>>2]=o[b+16>>2];o[e+20>>2]=f;f=o[b+44>>2];o[e+40>>2]=o[b+40>>2];o[e+44>>2]=f;f=o[b+36>>2];o[e+32>>2]=o[b+32>>2];o[e+36>>2]=f;f=o[b+60>>2];o[e+56>>2]=o[b+56>>2];o[e+60>>2]=f;f=o[b+52>>2];o[e+48>>2]=o[b+48>>2];o[e+52>>2]=f;if(o[a+64>>2]){b=o[(o[a+24>>2]+h|0)+64>>2];l[o[o[b>>2]+8>>2]](b,c,g+48|0,g+32|0);b=g;c=o[b+60>>2];e=o[b+56>>2];o[b+8>>2]=e;o[b+12>>2]=c;c=o[b+44>>2];o[b+24>>2]=o[b+40>>2];o[b+28>>2]=c;c=o[b+36>>2];o[b+16>>2]=o[b+32>>2];o[b+20>>2]=c;c=o[b+52>>2];o[b>>2]=o[b+48>>2];o[b+4>>2]=c;Wc(o[a+64>>2],o[(o[a+24>>2]+h|0)+76>>2],b)}if(d){l[o[o[a>>2]+68>>2]](a)}M=g- -64|0}function wF(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;a:{if(p[a+165|0]){if(o[a+92>>2]>=(b|0)){break a}if(b){o[7717]=o[7717]+1;e=l[o[6606]](b<<4,16)|0}else{e=0}g=o[a+88>>2];if((g|0)>=1){while(1){d=c<<4;f=d+e|0;d=d+o[a+96>>2]|0;h=o[d+4>>2];o[f>>2]=o[d>>2];o[f+4>>2]=h;h=o[d+12>>2];o[f+8>>2]=o[d+8>>2];o[f+12>>2]=h;c=c+1|0;if((g|0)!=(c|0)){continue}break}}c=o[a+96>>2];if(c){if(p[a+100|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+96>>2]=0}o[a+96>>2]=e;o[a+92>>2]=b;m[a+100|0]=1;return}if(o[a+112>>2]>=(b|0)){break a}if(b){o[7717]=o[7717]+1;d=l[o[6606]](b<<2,16)|0}e=o[a+116>>2];f=o[a+108>>2];b:{c:{if((f|0)>=1){while(1){g=c<<2;o[g+d>>2]=o[e+g>>2];c=c+1|0;if((f|0)!=(c|0)){continue}break c}}if(!e){break b}}if(p[a+120|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}}o[a+116>>2]=0}o[a+116>>2]=d;o[a+112>>2]=b;m[a+120|0]=1}}function Gf(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0),x=v(0);d=s[a+552>>2];e=s[b>>2];f=s[a+568>>2];g=s[b+4>>2];h=s[a+584>>2];i=s[b+8>>2];k=s[a+620>>2];l=s[a+636>>2];j=s[a+652>>2];m=v(v(v(k*s[c>>2])+v(l*s[c+4>>2]))+v(j*s[c+8>>2]));n=s[b+16>>2];o=s[b+20>>2];p=s[b+24>>2];q=v(v(v(k*s[c+16>>2])+v(l*s[c+20>>2]))+v(j*s[c+24>>2]));r=v(v(v(v(v(d*e)+v(f*g))+v(h*i))*m)+v(v(v(v(d*n)+v(f*o))+v(h*p))*q));t=d;d=s[b+32>>2];u=f;f=s[b+36>>2];w=h;h=s[b+40>>2];j=v(v(v(k*s[c+32>>2])+v(l*s[c+36>>2]))+v(j*s[c+40>>2]));k=e;e=s[a+556>>2];l=g;g=s[a+572>>2];x=i;i=s[a+588>>2];return v(_a(v(r+v(v(v(v(t*d)+v(u*f))+v(w*h))*j)),v(v(v(v(v(v(k*e)+v(l*g))+v(x*i))*m)+v(v(v(v(n*e)+v(o*g))+v(p*i))*q))+v(v(v(v(d*e)+v(f*g))+v(h*i))*j)))*s[a+732>>2])}



function fl(a){var b=0,c=0,d=0,e=0,f=0,g=0;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;b=o[a+40>>2];if(b){if(p[a+44|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+40>>2]=0}o[a+40>>2]=0;m[a+44|0]=1;o[a+32>>2]=0;o[a+36>>2]=0;b=o[a+60>>2];if(b){if(p[a- -64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+60>>2]=0}b=0;o[a+60>>2]=0;m[a- -64|0]=1;o[a+52>>2]=0;o[a+56>>2]=0;if(o[a+12>>2]<=1){o[7717]=o[7717]+1;e=l[o[6606]](24,16)|0;f=o[a+8>>2];if((f|0)>=1){while(1){c=u(b,12);d=c+o[a+16>>2]|0;g=o[d+4>>2];c=c+e|0;o[c>>2]=o[d>>2];o[c+4>>2]=g;o[c+8>>2]=o[d+8>>2];b=b+1|0;if((f|0)!=(b|0)){continue}break}}b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=e;m[a+20|0]=1;o[a+12>>2]=2}gg(a)}function xG(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),i=v(0),j=v(0),k=0,m=0,n=0;d=M-80|0;M=d;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;f=s[c>>2];i=s[c+4>>2];j=s[c+8>>2];e=v(v(v(f*f)+v(i*i))+v(j*j));a:{if(e<v(9999999747378752e-20)){k=1065353216;e=v(0);break a}e=v(v(1)/v(C(e)));m=(g(v(j*e)),h(0));n=(g(v(i*e)),h(0));k=(g(v(f*e)),h(0));e=s[c+12>>2]}o[d+52>>2]=0;o[d+56>>2]=0;s[d+76>>2]=e;o[d+72>>2]=m;o[d+68>>2]=n;o[d+44>>2]=0;o[d+48>>2]=0;o[d+40>>2]=14640;o[d+64>>2]=k;o[d+60>>2]=-581039253;o[d+32>>2]=1566444395;o[d+36>>2]=0;o[d+24>>2]=1566444395;o[d+28>>2]=1566444395;b=o[b+92>>2];o[d+16>>2]=-581039253;o[d+20>>2]=0;o[d+8>>2]=-581039253;o[d+12>>2]=-581039253;l[o[o[b>>2]+8>>2]](b,d+40|0,d+8|0,d+24|0);b=o[d+56>>2];o[a+8>>2]=o[d+52>>2];o[a+12>>2]=b;b=o[d+48>>2];o[a>>2]=o[d+44>>2];o[a+4>>2]=b;M=d+80|0}function hy(a,b,c,d){var e=0;e=M-96|0;M=e;o[e+92>>2]=a;s[e+88>>2]=b;s[e+84>>2]=c;s[e+80>>2]=d;a=o[e+92>>2];s[e+76>>2]=Aa(s[e+88>>2]);s[e+72>>2]=Aa(s[e+84>>2]);s[e+68>>2]=Aa(s[e+80>>2]);s[e+64>>2]=za(s[e+88>>2]);s[e+60>>2]=za(s[e+84>>2]);s[e+56>>2]=za(s[e+80>>2]);s[e+52>>2]=s[e+76>>2]*s[e+68>>2];s[e+48>>2]=s[e+76>>2]*s[e+56>>2];s[e+44>>2]=s[e+64>>2]*s[e+68>>2];s[e+40>>2]=s[e+64>>2]*s[e+56>>2];s[e+36>>2]=s[e+72>>2]*s[e+68>>2];s[e+32>>2]=v(s[e+60>>2]*s[e+44>>2])-s[e+48>>2];s[e+28>>2]=v(s[e+60>>2]*s[e+52>>2])+s[e+40>>2];s[e+24>>2]=s[e+72>>2]*s[e+56>>2];s[e+20>>2]=v(s[e+60>>2]*s[e+40>>2])+s[e+52>>2];s[e+16>>2]=v(s[e+60>>2]*s[e+48>>2])-s[e+44>>2];s[e+12>>2]=-s[e+60>>2];s[e+8>>2]=s[e+72>>2]*s[e+64>>2];s[e+4>>2]=s[e+72>>2]*s[e+76>>2];Oc(a,e+36|0,e+32|0,e+28|0,e+24|0,e+20|0,e+16|0,e+12|0,e+8|0,e+4|0);M=e+96|0}function Wi(a){var b=0,c=0,d=0,e=0,f=0,g=0;o[7717]=o[7717]+1;c=l[o[6606]](20,16)|0;b=c;o[b>>2]=0;o[b+4>>2]=0;o[b+16>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;a:{if(o[a+872>>2]>=1){b=o[o[a+880>>2]>>2];d=o[b+4>>2];o[c>>2]=o[b>>2];o[c+4>>2]=d;o[c+16>>2]=o[b+16>>2];d=o[b+12>>2];o[c+8>>2]=o[b+8>>2];o[c+12>>2]=d;break a}o[c>>2]=0;o[c+4>>2]=0;o[c+16>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0}b=o[a+872>>2];b:{if((b|0)!=o[a+876>>2]){break b}d=b?b<<1:1;if((b|0)>=(d|0)){break b}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<2,16)|0;b=o[a+872>>2]}if((b|0)>=1){while(1){g=e<<2;o[g+f>>2]=o[g+o[a+880>>2]>>2];e=e+1|0;if((e|0)!=(b|0)){continue}break}}e=o[a+880>>2];if(e){if(p[a+884|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}b=o[a+872>>2]}o[a+880>>2]=0}o[a+880>>2]=f;o[a+876>>2]=d;m[a+884|0]=1}o[o[a+880>>2]+(b<<2)>>2]=c;o[a+872>>2]=b+1;return c}function wG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0;h=M-80|0;M=h;a:{if((d|0)<=0){break a}while(1){o[((e<<4)+c|0)+12>>2]=-581039253;e=e+1|0;if((e|0)!=(d|0)){continue}break}if((d|0)<1){break a}i=h- -64|0;m=h+40|4;while(1){o[h+40>>2]=14640;f=m;o[f+8>>2]=0;o[f+12>>2]=0;o[f>>2]=0;o[f+4>>2]=0;o[h+60>>2]=-581039253;j=k<<4;e=j+b|0;g=o[e+12>>2];o[i+8>>2]=o[e+8>>2];o[i+12>>2]=g;g=o[e+4>>2];o[i>>2]=o[e>>2];o[i+4>>2]=g;e=h;o[e+32>>2]=1566444395;o[e+36>>2]=0;o[e+24>>2]=1566444395;o[e+28>>2]=1566444395;g=o[a+92>>2];o[e+16>>2]=-581039253;o[e+20>>2]=0;o[e+8>>2]=-581039253;o[e+12>>2]=-581039253;l[o[o[g>>2]+8>>2]](g,e+40|0,e+8|0,e+24|0);e=c+j|0;j=o[f+12>>2];o[e+8>>2]=o[f+8>>2];o[e+12>>2]=j;g=o[f+4>>2];o[e>>2]=o[f>>2];o[e+4>>2]=g;k=k+1|0;if((k|0)!=(d|0)){continue}break}}M=h+80|0}function Py(a,b,c,d,e,f){var g=0,h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0);g=M+ -64|0;M=g;a:{if(o[d+4>>2]==32){if(!c|o[c+236>>2]!=8){break a}if(!Yz(c,a+48|0,b+48|0,g+48|0)){break a}m=s[g+60>>2];if(!(m<=s[f+4>>2])){break a}o[g+40>>2]=0;d=o[g+56>>2];o[g+44>>2]=d;h=v(s[b+52>>2]-s[a+52>>2]);i=v(s[b+48>>2]-s[a+48>>2]);j=v(s[b+56>>2]-s[a+56>>2]);b:{if(o[g+52>>2]!=3){k=v(v(1)/v(C(v(v(v(i*i)+v(h*h))+v(j*j)))));j=v(k*v(-j));h=v(k*v(-h));i=v(k*v(-i));k=v(0);break b}n=i;a=o[c+760>>2]+u(d,44)|0;i=s[a+20>>2];p=h;h=s[a+24>>2];q=j;j=s[a+28>>2];if(!(v(v(v(n*i)+v(p*h))+v(q*j))>v(0))){k=s[a+32>>2];break b}j=v(-j);h=v(-h);i=v(-i)}s[g+28>>2]=k;s[g+24>>2]=j;s[g+20>>2]=h;s[g+32>>2]=m;s[g+16>>2]=i;o[g+8>>2]=c;o[g+12>>2]=g+40;v(l[o[o[f>>2]+12>>2]](f,g+8|0,1));break a}YJ(a,b,c,d,e,f)}M=g- -64|0}function mn(a,b,c,d){a=a|0;b=v(b);c=c|0;d=d|0;var e=0,f=0,g=0;e=M-112|0;M=e;o[e+108>>2]=a;s[e+104>>2]=b;o[e+100>>2]=c;o[e+96>>2]=d;c=o[e+108>>2];d=M-16|0;o[d+12>>2]=o[e+100>>2];d=o[d+12>>2]+48|0;f=o[d+4>>2];a=e+80|0;o[a>>2]=o[d>>2];o[a+4>>2]=f;f=o[d+12>>2];o[a+8>>2]=o[d+8>>2];o[a+12>>2]=f;f=M-16|0;o[f+12>>2]=o[e+100>>2];d=e- -64|0;Mb(d,o[f+12>>2],1);g=M-16|0;o[g+12>>2]=o[e+100>>2];f=e+48|0;Mb(f,o[g+12>>2],0);s[e+44>>2]=-1.5707963705062866;s[e+40>>2]=1.5707963705062866;s[e+36>>2]=-1.5707963705062866;s[e+32>>2]=1.5707963705062866;s[e+28>>2]=30;l[o[o[c>>2]+64>>2]](c,a,d,f,s[e+104>>2],s[e+44>>2],s[e+40>>2],s[e+36>>2],s[e+32>>2],o[e+96>>2],s[e+28>>2],0);g=e+8|0;yb(g,f);l[o[o[c>>2]+64>>2]](c,a,d,g,s[e+104>>2],s[e+44>>2],s[e+40>>2],s[e+36>>2],s[e+32>>2],o[e+96>>2],s[e+28>>2],0);M=e+112|0}function Df(a,b){var c=0,d=0,e=0,f=0;c=o[o[a+1120>>2]+(b<<2)>>2];b=o[c+348>>2];if(b){Vc(a+1048|0,b)}b=o[c+52>>2];if(b){if(p[c+56|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+52>>2]=0}o[c+52>>2]=0;m[c+56|0]=1;o[c+44>>2]=0;o[c+48>>2]=0;b=o[c+32>>2];if(b){if(p[c+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+32>>2]=0}o[c+32>>2]=0;m[c+36|0]=1;o[c+24>>2]=0;o[c+28>>2]=0;b=o[c+12>>2];if(b){if(p[c+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[c+12>>2]=0}b=0;o[c+12>>2]=0;m[c+16|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;if(c){o[7718]=o[7718]+1;l[o[6607]](c)}d=o[a+1112>>2];a:{if((d|0)<1){break a}e=o[a+1120>>2];while(1){f=(b<<2)+e|0;if(o[f>>2]!=(c|0)){b=b+1|0;if((d|0)!=(b|0)){continue}break a}break}if((b|0)>=(d|0)){break a}b=d+ -1|0;d=b<<2;o[f>>2]=o[d+e>>2];o[d+o[a+1120>>2]>>2]=c;o[a+1112>>2]=b}}function Rk(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,n=0;e=o[a+4>>2];if((e|0)==o[a+8>>2]){Ae(a,e?e<<1:1);e=o[a+4>>2]}i=o[a+12>>2];c=i+u(e,36)|0;o[c+12>>2]=0;m[c+16|0]=1;o[c+4>>2]=0;o[c+8>>2]=0;f=o[b+4>>2];a:{if((f|0)>=1){o[7717]=o[7717]+1;j=f<<2;g=l[o[6606]](j,16)|0;h=o[c+12>>2];k=o[c+4>>2];b:{c:{if((k|0)>=1){while(1){n=d<<2;o[g+n>>2]=o[h+n>>2];d=d+1|0;if((k|0)!=(d|0)){continue}break c}}if(!h){break b}}if(!p[c+16|0]){break b}if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}m[c+16|0]=1;o[c+12>>2]=g;o[c+8>>2]=f;d=0;$(g,0,j);o[c+4>>2]=f;h=o[b+12>>2];c=o[c+12>>2];while(1){g=d<<2;o[g+c>>2]=o[h+g>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}break a}o[c+4>>2]=f}d=o[b+24>>2];c=u(e,36)+i|0;o[c+20>>2]=o[b+20>>2];o[c+24>>2]=d;d=o[b+32>>2];o[c+28>>2]=o[b+28>>2];o[c+32>>2]=d;o[a+4>>2]=o[a+4>>2]+1}function Em(a,b,c){var d=0,e=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;a=M-16|0;c=o[d+28>>2];o[a+12>>2]=c;o[d+16>>2]=o[o[a+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}a=o[d+24>>2];b=M-16|0;o[b+12>>2]=c;if((a|0)>o[o[b+12>>2]+4>>2]){Dm(c,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){a=o[d+20>>2];e=o[a+4>>2];b=o[c+12>>2]+u(o[d+8>>2],44)|0;o[b>>2]=o[a>>2];o[b+4>>2]=e;o[b+40>>2]=o[a+40>>2];e=o[a+36>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=e;e=o[a+28>>2];o[b+24>>2]=o[a+24>>2];o[b+28>>2]=e;e=o[a+20>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=e;e=o[a+12>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=e;o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[c+4>>2]=o[d+24>>2];M=d+32|0}function ra(a){var b=v(0),c=0,d=0,e=0,f=0;c=M-16|0;M=c;e=(g(a),h(0));d=e&2147483647;a:{if(d>>>0<=1061752794){b=v(1);if(d>>>0<964689920){break a}b=La(+a);break a}if(d>>>0<=1081824209){f=+a;if(d>>>0>=1075235812){b=v(-La(((e|0)<0?3.141592653589793:-3.141592653589793)+f));break a}if((e|0)<=-1){b=Ka(f+1.5707963267948966);break a}b=Ka(1.5707963267948966-f);break a}if(d>>>0<=1088565717){if(d>>>0>=1085271520){b=La(((e|0)<0?6.283185307179586:-6.283185307179586)+ +a);break a}if((e|0)<=-1){b=Ka(-4.71238898038469- +a);break a}b=Ka(+a+ -4.71238898038469);break a}b=v(a-a);if(d>>>0>=2139095040){break a}b:{switch(ui(a,c+8|0)&3){case 0:b=La(t[c+8>>3]);break a;case 1:b=Ka(-t[c+8>>3]);break a;case 2:b=v(-La(t[c+8>>3]));break a;default:break b}}b=Ka(t[c+8>>3])}a=b;M=c+16|0;return a}function oD(a,b){a=a|0;b=b|0;var c=0,d=0;l[o[o[b>>2]+32>>2]](b);d=l[o[o[b>>2]+16>>2]](b,104,1)|0;c=$(o[d+8>>2],0,104);o[c+88>>2]=o[a+248>>2];o[c+92>>2]=o[a+252>>2];o[c+96>>2]=o[a+256>>2];o[c+100>>2]=o[a+260>>2];o[c>>2]=o[a+92>>2];o[c+4>>2]=o[a+96>>2];o[c+8>>2]=o[a+100>>2];o[c+12>>2]=o[a+104>>2];o[c+16>>2]=o[a+108>>2];o[c+20>>2]=o[a+116>>2];o[c+24>>2]=o[a+120>>2];o[c+28>>2]=o[a+124>>2];o[c+32>>2]=o[a+128>>2];o[c+36>>2]=o[a+132>>2];o[c+40>>2]=o[a+140>>2];o[c+44>>2]=o[a+144>>2];o[c+48>>2]=o[a+148>>2];o[c+52>>2]=o[a+152>>2];o[c+56>>2]=o[a+168>>2];o[c+60>>2]=o[a+172>>2];o[c+64>>2]=o[a+112>>2];o[c+68>>2]=o[a+156>>2];o[c+72>>2]=o[a+160>>2];o[c+76>>2]=o[a+164>>2];o[c+80>>2]=o[a+136>>2];l[o[o[b>>2]+20>>2]](b,d,18516,1145853764,c);Aj(a,b);ig(a,b);l[o[o[b>>2]+36>>2]](b)}function RG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=v(0),i=0,j=0,k=v(0),l=v(0),m=0,n=v(0),p=v(0),q=v(0),r=0,t=v(0),u=v(0);a:{if((d|0)<=0){break a}while(1){o[((e<<4)+c|0)+12>>2]=-581039253;e=e+1|0;if((e|0)!=(d|0)){continue}break}if((d|0)<1){break a}while(1){j=i<<4;m=o[a+96>>2];b:{if((m|0)<1){h=v(-0xde0b6b000000000);break b}e=b+j|0;n=s[a+20>>2];k=v(s[e+8>>2]*n);p=s[a+16>>2];l=v(s[e+4>>2]*p);q=s[a+12>>2];u=v(s[e>>2]*q);r=o[a+104>>2];e=0;f=-1;h=v(-3.4028234663852886e+38);while(1){g=(e<<4)+r|0;t=v(v(v(u*s[g>>2])+v(l*s[g+4>>2]))+v(k*s[g+8>>2]));g=t>h;h=g?t:h;f=g?e:f;e=e+1|0;if((m|0)!=(e|0)){continue}break}e=(f<<4)+r|0;k=s[e>>2];l=s[e+4>>2];f=c+j|0;s[f+8>>2]=s[e+8>>2]*n;s[f+4>>2]=l*p;s[f>>2]=k*q}s[(c+j|0)+12>>2]=h;i=i+1|0;if((i|0)!=(d|0)){continue}break}}}function Po(a,b,c,d){var e=0;e=M-80|0;M=e;o[e+76>>2]=a;o[e+72>>2]=b;o[e+68>>2]=c;o[e+64>>2]=d;a=o[e+76>>2];s[e+60>>2]=s[o[e+72>>2]>>2]*v(.5);s[e+56>>2]=s[o[e+68>>2]>>2]*v(.5);s[e+52>>2]=s[o[e+64>>2]>>2]*v(.5);s[e+48>>2]=Aa(s[e+60>>2]);s[e+44>>2]=za(s[e+60>>2]);s[e+40>>2]=Aa(s[e+56>>2]);s[e+36>>2]=za(s[e+56>>2]);s[e+32>>2]=Aa(s[e+52>>2]);s[e+28>>2]=za(s[e+52>>2]);s[e+24>>2]=v(v(s[e+28>>2]*s[e+40>>2])*s[e+48>>2])-v(v(s[e+32>>2]*s[e+36>>2])*s[e+44>>2]);s[e+20>>2]=v(v(s[e+32>>2]*s[e+36>>2])*s[e+48>>2])+v(v(s[e+28>>2]*s[e+40>>2])*s[e+44>>2]);s[e+16>>2]=v(v(s[e+32>>2]*s[e+40>>2])*s[e+44>>2])-v(v(s[e+28>>2]*s[e+36>>2])*s[e+48>>2]);s[e+12>>2]=v(v(s[e+32>>2]*s[e+40>>2])*s[e+48>>2])+v(v(s[e+28>>2]*s[e+36>>2])*s[e+44>>2]);Wb(a,e+24|0,e+20|0,e+16|0,e+12|0);M=e+80|0}function xJ(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0),q=v(0),r=v(0),t=v(0);k=s[a+40>>2];i=s[a+24>>2];n=v(k-i);l=s[c+8>>2];p=s[a+32>>2];e=s[a+16>>2];h=v(p-e);f=s[b+4>>2];q=s[a+36>>2];j=s[a+20>>2];g=v(q-j);m=s[b>>2];o=v(v(l-i)*v(v(h*f)-v(g*m)));r=s[c>>2];d=g;g=s[b+8>>2];t=s[c+4>>2];n=v(o+v(v(v(r-e)*v(v(d*g)-v(n*f)))+v(v(t-j)*v(v(n*m)-v(h*g)))));d=i;i=s[a+8>>2];h=v(d-i);d=e;e=s[a>>2];o=v(d-e);d=j;j=s[a+4>>2];d=v(d-j);h=v(v(v(l-i)*v(v(o*f)-v(d*m)))+v(v(v(r-e)*v(v(d*g)-v(h*f)))+v(v(t-j)*v(v(h*m)-v(o*g)))));a=1;d=v(l-k);l=v(e-p);e=v(j-q);k=v(i-k);f=v(v(d*v(v(l*f)-v(e*m)))+v(v(v(r-p)*v(v(e*g)-v(k*f)))+v(v(t-q)*v(v(k*m)-v(l*g)))));if(!(n>v(0)?!(f>v(0)^1|h>v(0)^1):0)){a=h<=v(0)&n<=v(0)&f<=v(0)}return a}function ti(a){var b=0,c=v(0),d=0,f=v(0),j=0,k=v(0);j=(g(a),h(0));b=j&2147483647;if(b>>>0<1283457024){a:{b:{if(b>>>0<=1054867455){if(b>>>0<964689920){break a}b=-1;d=1;break b}a=v(w(a));c:{if(b>>>0<=1066926079){if(b>>>0<=1060110335){a=v(v(v(a+a)+v(-1))/v(a+v(2)));b=0;d=0;break b}b=1;a=v(v(a+v(-1))/v(a+v(1)));break c}if(b>>>0<=1075576831){b=2;a=v(v(a+v(-1.5))/v(v(a*v(1.5))+v(1)));break c}b=3;a=v(v(-1)/a)}d=0}f=v(a*a);c=v(f*f);k=v(c*v(v(c*v(-.106480173766613))+v(-.19999158382415771)));c=v(f*v(v(c*v(v(c*v(.06168760731816292))+v(.14253635704517365)))+v(.333333283662796)));if(d){return v(a-v(a*v(k+c)))}b=b<<2;a=v(s[b+25888>>2]-v(v(v(a*v(k+c))-s[b+25904>>2])-a));a=(j|0)<0?v(-a):a}return a}return b>>>0>2139095040?a:(e(0,(g(a),h(0))&-2147483648|1070141402),i())}function qa(a){var b=0,c=0,d=0,e=0;b=M-16|0;M=b;e=(g(a),h(0));c=e&2147483647;a:{if(c>>>0<=1061752794){if(c>>>0<964689920){break a}a=Ka(+a);break a}if(c>>>0<=1081824209){d=+a;if(c>>>0<=1075235811){if((e|0)<=-1){a=v(-La(d+1.5707963267948966));break a}a=La(d+ -1.5707963267948966);break a}a=Ka(-(((e|0)<0?3.141592653589793:-3.141592653589793)+d));break a}if(c>>>0<=1088565717){d=+a;if(c>>>0<=1085271519){if((e|0)<=-1){a=La(d+4.71238898038469);break a}a=v(-La(d+ -4.71238898038469));break a}a=Ka(((e|0)<0?6.283185307179586:-6.283185307179586)+d);break a}if(c>>>0>=2139095040){a=v(a-a);break a}b:{switch(ui(a,b+8|0)&3){case 0:a=Ka(t[b+8>>3]);break a;case 1:a=La(t[b+8>>3]);break a;case 2:a=Ka(-t[b+8>>3]);break a;default:break b}}a=v(-La(t[b+8>>3]))}M=b+16|0;return a}function UD(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;a:{b=o[b+68>>2];b=l[o[o[b>>2]+36>>2]](b)|0;g=l[o[o[b>>2]+36>>2]](b)|0;if(!g){break a}i=l[o[o[b>>2]+20>>2]](b)|0;if((g|0)<1){break a}while(1){b=(h<<4)+i|0;c=o[o[b>>2]>>2];b:{if(!c){break b}b=o[o[b+4>>2]>>2];if(!b|o[c+204>>2]&7|p[b+204|0]&7){break b}b=o[b+208>>2];e=o[a+16>>2];f=o[c+208>>2];d=e+(f<<3)|0;c=o[d>>2];if((c|0)!=(f|0)){while(1){c=(c<<3)+e|0;o[d>>2]=o[c>>2];f=o[c>>2];d=(f<<3)+e|0;c=o[d>>2];if((c|0)!=(f|0)){continue}break}}d=(b<<3)+e|0;c=o[d>>2];if((c|0)!=(b|0)){while(1){b=(c<<3)+e|0;o[d>>2]=o[b>>2];b=o[b>>2];d=(b<<3)+e|0;c=o[d>>2];if((b|0)!=(c|0)){continue}break}}if((b|0)==(f|0)){break b}c=(f<<3)+e|0;o[c>>2]=b;b=(b<<3)+e|0;o[b+4>>2]=o[b+4>>2]+o[c+4>>2]}h=h+1|0;if((h|0)!=(g|0)){continue}break}}}function Td(a){a=a|0;var b=0;o[a>>2]=17612;b=o[a+160>>2];if(b){if(p[a+164|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+160>>2]=0}o[a+160>>2]=0;m[a+164|0]=1;o[a+152>>2]=0;o[a+156>>2]=0;b=o[a+136>>2];if(b){if(p[a+140|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+136>>2]=0}o[a+136>>2]=0;m[a+140|0]=1;o[a+128>>2]=0;o[a+132>>2]=0;b=o[a+116>>2];if(b){if(p[a+120|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+116>>2]=0}o[a+116>>2]=0;m[a+120|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;b=o[a+96>>2];if(b){if(p[a+100|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+96>>2]=0}o[a+96>>2]=0;m[a+100|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;b=o[a+76>>2];if(b){if(p[a+80|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+76>>2]=0}o[a+76>>2]=0;m[a+80|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;return a|0}function Eb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;o[b>>2]=l[o[o[c>>2]+28>>2]](c,o[a+28>>2]);o[b+4>>2]=l[o[o[c>>2]+28>>2]](c,o[a+32>>2]);d=l[o[o[c>>2]+40>>2]](c,a)|0;e=l[o[o[c>>2]+28>>2]](c,d)|0;o[b+8>>2]=e;if(e){l[o[o[c>>2]+48>>2]](c,d)}o[b+12>>2]=o[a+4>>2];o[b+24>>2]=p[a+21|0];o[b+40>>2]=o[a+24>>2];o[b+44>>2]=o[a+16>>2];o[b+48>>2]=p[a+20|0];o[b+20>>2]=o[a+12>>2];o[b+16>>2]=o[a+8>>2];o[b+28>>2]=o[a+36>>2];d=o[a+40>>2];c=0;o[b+36>>2]=0;o[b+32>>2]=d;d=o[a+28>>2];e=o[d+488>>2];if((e|0)>=1){d=o[d+496>>2];while(1){if(o[d+(c<<2)>>2]==(a|0)){o[b+36>>2]=1}c=c+1|0;if((e|0)!=(c|0)){continue}break}}c=o[a+32>>2];d=o[c+488>>2];if((d|0)>=1){e=o[c+496>>2];c=0;while(1){if(o[e+(c<<2)>>2]==(a|0)){o[b+36>>2]=1}c=c+1|0;if((d|0)!=(c|0)){continue}break}}return 19332}function nf(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0;f=o[a+4>>2];a:{if(o[a>>2]==(b|0)){e=2;if((b|0)!=(f|0)){break a}f=o[b+12>>2];b=o[o[b+8>>2]+12>>2];h=o[b+96>>2];m=o[f+96>>2]-h|0;a=o[a+12>>2];e=o[b+92>>2];i=o[a+92>>2]-e|0;e=o[f+92>>2]-e|0;h=o[a+96>>2]-h|0;j=u(m,i)-u(e,h)|0;g=j;l=j>>31;j=o[c+8>>2];n=o[d+4>>2];p=o[c+4>>2];q=o[d+8>>2];k=u(j,n)-u(p,q)|0;k=tL(g,l,k,k>>31);l=N;g=e;e=o[a+88>>2];a=o[b+88>>2];e=e-a|0;f=o[f+88>>2]-a|0;a=u(g,e)-u(f,i)|0;b=a;g=a>>31;d=o[d>>2];c=o[c>>2];a=u(d,p)-u(c,n)|0;i=tL(b,g,a,a>>31);b=i+k|0;a=N+l|0;a=b>>>0<i>>>0?a+1|0:a;g=b;b=u(f,h)-u(e,m)|0;e=b;f=b>>31;b=u(c,q)-u(d,j)|0;c=tL(e,f,b,b>>31);b=g+c|0;a=N+a|0;a=b>>>0<c>>>0?a+1|0:a;return((a|0)>0?1:(a|0)>=0?b>>>0<=0?0:1:0)?2:1}e=(b|0)==(f|0)}return e}function Uf(a){var b=v(0),c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0);o[a+308>>2]=0;o[a+292>>2]=0;o[a+276>>2]=0;n=s[a+396>>2];b=s[a+36>>2];c=v(n*b);p=s[a+400>>2];d=s[a+40>>2];e=v(p*d);q=s[a+404>>2];f=s[a+44>>2];g=v(q*f);s[a+304>>2]=v(v(c*b)+v(e*d))+v(g*f);k=s[a+20>>2];l=s[a+24>>2];m=s[a+28>>2];s[a+300>>2]=v(v(c*k)+v(e*l))+v(g*m);h=c;c=s[a+4>>2];i=e;e=s[a+8>>2];j=g;g=s[a+12>>2];s[a+296>>2]=v(v(h*c)+v(i*e))+v(j*g);h=v(n*k);i=v(p*l);j=v(q*m);s[a+288>>2]=v(v(b*h)+v(d*i))+v(f*j);s[a+284>>2]=v(v(h*k)+v(i*l))+v(j*m);s[a+280>>2]=v(v(h*c)+v(i*e))+v(j*g);h=b;b=v(c*n);i=d;d=v(e*p);j=f;f=v(g*q);s[a+272>>2]=v(v(h*b)+v(i*d))+v(j*f);s[a+268>>2]=v(v(b*k)+v(d*l))+v(f*m);s[a+264>>2]=v(v(b*c)+v(d*e))+v(f*g)}function oC(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;a:{b:{switch(b+ -2|0){case 0:if((d|0)<=0){s[a+232>>2]=c;o[a+300>>2]=o[a+300>>2]|512;return}if((d|0)<=2){s[a+264>>2]=c;o[a+300>>2]=o[a+300>>2]|32;return}if((d|0)==3){s[a+248>>2]=c;o[a+300>>2]=o[a+300>>2]|2048;return}if((d|0)>5){break a}s[a+280>>2]=c;o[a+300>>2]=o[a+300>>2]|128;return;case 1:if((d|0)<=0){s[a+212>>2]=c;o[a+300>>2]=o[a+300>>2]|1;return}if((d|0)!=3){break a}s[a+228>>2]=c;o[a+300>>2]=o[a+300>>2]|4;return;case 2:break b;default:break a}}if((d|0)<=0){s[a+244>>2]=c;o[a+300>>2]=o[a+300>>2]|256;return}if((d|0)<=2){s[a+276>>2]=c;o[a+300>>2]=o[a+300>>2]|16;return}if((d|0)==3){s[a+260>>2]=c;o[a+300>>2]=o[a+300>>2]|1024;return}if((d|0)>5){break a}s[a+292>>2]=c;o[a+300>>2]=o[a+300>>2]|64}}function cB(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);c=v(s[a+112>>2]-s[a+92>>2]);e=v(s[a+116>>2]-s[a+96>>2]);d=v(s[a+120>>2]-s[a+100>>2]);h=v(C(v(v(v(c*c)+v(e*e))+v(d*d))));if(!!(h>v(1.1920928955078125e-7))){j=s[b+8>>2];g=s[b>>2];k=s[b+4>>2];b=o[a+96>>2];o[a+112>>2]=o[a+92>>2];o[a+116>>2]=b;b=o[a+104>>2];o[a+120>>2]=o[a+100>>2];o[a+124>>2]=b;f=c;c=v(v(1)/h);f=v(f*c);i=f;l=v(f*g);f=v(e*c);d=v(d*c);c=v(v(l+v(f*k))+v(d*j));c=v(c+c);e=v(i-v(g*c));i=e;d=v(d-v(j*c));c=v(f-v(k*c));e=v(v(1)/v(C(v(v(d*d)+v(v(e*e)+v(c*c))))));f=v(i*e);i=g;d=v(d*e);c=v(c*e);g=v(v(j*d)+v(v(g*f)+v(k*c)));s[a+112>>2]=v(h*v(f-v(i*g)))+s[a+112>>2];s[a+116>>2]=v(h*v(c-v(k*g)))+s[a+116>>2];s[a+120>>2]=v(h*v(d-v(j*g)))+s[a+120>>2]}}function QF(a,b,c){a=a|0;b=v(b);c=c|0;var d=v(0),e=0,f=v(0),g=v(0),h=v(0),i=0;e=M-16|0;M=e;i=o[a+40>>2];o[e+8>>2]=o[a+36>>2];o[e+12>>2]=i;i=o[a+32>>2];o[e>>2]=o[a+28>>2];o[e+4>>2]=i;d=v(l[o[o[a>>2]+48>>2]](a));h=v(l[o[o[a>>2]+48>>2]](a));s[e+8>>2]=v(l[o[o[a>>2]+48>>2]](a))+s[e+8>>2];s[e>>2]=d+s[e>>2];s[e+4>>2]=h+s[e+4>>2];d=v(b*v(.5));h=v(b*v(.25));b=v(b/v(12));a:{b:{switch(o[a+52>>2]){case 0:g=d;d=s[e+4>>2];f=v(d*d);d=v(g*f);g=b;b=s[e>>2];f=v(v(h*f)+v(g*v(b*v(b*v(4)))));g=f;break a;case 2:f=d;d=s[e>>2];d=v(d*d);g=v(f*d);f=b;b=s[e+8>>2];d=v(v(h*d)+v(f*v(b*v(b*v(4)))));f=d;break a;default:break b}}f=d;d=s[e>>2];d=v(d*d);f=v(f*d);g=b;b=s[e+4>>2];d=v(v(h*d)+v(g*v(b*v(b*v(4)))));g=d}o[c+12>>2]=0;s[c+8>>2]=g;s[c+4>>2]=f;s[c>>2]=d;M=e+16|0}function JD(a,b,c,d){a=a|0;b=v(b);c=c|0;d=v(d);var e=0,f=0,g=v(0);yy();ia(18199);a:{if(c){s[a+268>>2]=d;b=v(s[a+264>>2]+b);s[a+264>>2]=b;if(!(b>=d)){break a}e=a;g=b;b=v(b/d);b:{if(v(w(b))<v(2147483648)){f=~~b;break b}f=-2147483648}s[e+264>>2]=g-v(v(f|0)*d);break a}o[a+268>>2]=0;s[a+264>>2]=p[a+300|0]?v(0):b;d=b;f=v(w(b))<v(1.1920928955078125e-7)^1;c=f}if(l[o[o[a>>2]+20>>2]](a)){e=l[o[o[a>>2]+20>>2]](a)|0;m[29240]=l[o[o[e>>2]+48>>2]](e)>>>4&1}c:{if(f){e=(f|0)>(c|0)?c:f;l[o[o[a>>2]+164>>2]](a,v(d*v(e|0)));l[o[o[a>>2]+168>>2]](a);if((e|0)<1){break c}c=0;while(1){l[o[o[a>>2]+160>>2]](a,d);l[o[o[a>>2]+80>>2]](a);c=c+1|0;if((e|0)!=(c|0)){continue}break}break c}l[o[o[a>>2]+80>>2]](a)}l[o[o[a>>2]+120>>2]](a);o[7715]=o[7715]+1;ga();return f|0}function cj(a){a=a|0;var b=0;o[a>>2]=19996;b=o[a+144>>2];if(b){if(p[a+148|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+144>>2]=0}o[a+144>>2]=0;m[a+148|0]=1;o[a+136>>2]=0;o[a+140>>2]=0;b=o[a+76>>2];if(b){if(p[a+80|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+76>>2]=0}o[a+76>>2]=0;m[a+80|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+56>>2]=0;m[a+60|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+36>>2]=0;m[a+40|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function vF(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;a:{if(p[a+164|0]){if(o[a+132>>2]>=(b|0)){break a}if(b){o[7717]=o[7717]+1;e=l[o[6606]](b<<2,16)|0}c=o[a+136>>2];f=o[a+128>>2];b:{c:{if((f|0)>=1){while(1){g=d<<2;o[g+e>>2]=o[c+g>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break c}}if(!c){break b}}if(p[a+140|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+136>>2]=0}o[a+136>>2]=e;o[a+132>>2]=b;m[a+140|0]=1;return}if(o[a+152>>2]>=(b|0)){break a}if(b){o[7717]=o[7717]+1;e=l[o[6606]](b<<1,16)|0}c=o[a+156>>2];f=o[a+148>>2];d:{e:{if((f|0)>=1){while(1){g=d<<1;n[g+e>>1]=q[c+g>>1];d=d+1|0;if((f|0)!=(d|0)){continue}break e}}if(!c){break d}}if(p[a+160|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+156>>2]=0}o[a+156>>2]=e;o[a+152>>2]=b;m[a+160|0]=1}}function KA(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;a:{if(l[o[o[c>>2]+16>>2]](c)){break a}f=o[b+712>>2];g=l[o[o[c>>2]+36>>2]](c)|0;b:{if(!l[o[o[c>>2]+8>>2]](c)){break b}a=l[o[o[c>>2]+20>>2]](c)|0;e=l[o[o[c>>2]+24>>2]](c)|0;if((f|0)<1){break b}a=g+(a<<2)|0;h=o[b+720>>2];i=e<<2;while(1){e=u(d,104)+h|0;j=o[e+12>>2];k=o[e+8>>2];o[a+8>>2]=o[e+16>>2];o[a>>2]=k;o[a+4>>2]=j;a=a+i|0;d=d+1|0;if((f|0)!=(d|0)){continue}break}}if(!l[o[o[c>>2]+12>>2]](c)){break a}a=l[o[o[c>>2]+28>>2]](c)|0;c=l[o[o[c>>2]+32>>2]](c)|0;if((f|0)<1){break a}a=g+(a<<2)|0;g=o[b+720>>2];d=0;c=c<<2;while(1){b=g+u(d,104)|0;e=o[b+76>>2];h=o[b+72>>2];o[a+8>>2]=o[b+80>>2];o[a>>2]=h;o[a+4>>2]=e;a=a+c|0;d=d+1|0;if((f|0)!=(d|0)){continue}break}}}function Wj(a,b){var c=0,d=0;c=M-144|0;M=c;gc(a);m[a+500|0]=1;o[a>>2]=17792;o[a+496>>2]=0;o[a+488>>2]=0;o[a+492>>2]=0;o[c+72>>2]=0;o[c+4>>2]=0;s[c>>2]=0;d=o[b+12>>2];o[c+84>>2]=o[b+8>>2];o[c+88>>2]=d;d=o[b>>2];b=o[b+4>>2];o[c+12>>2]=0;o[c+16>>2]=0;o[c+20>>2]=0;o[c+24>>2]=0;o[c+28>>2]=1065353216;o[c+40>>2]=0;o[c+44>>2]=0;o[c+32>>2]=0;o[c+36>>2]=0;o[c+48>>2]=1065353216;o[c+68>>2]=0;o[c+60>>2]=0;o[c+64>>2]=0;o[c+52>>2]=0;o[c+56>>2]=0;o[c+76>>2]=d;o[c+80>>2]=b;o[c+132>>2]=1008981770;o[c+136>>2]=1008981770;o[c+124>>2]=1000593162;o[c+128>>2]=1008981770;m[c+120|0]=0;o[c+116>>2]=1065353216;o[c+108>>2]=0;o[c+112>>2]=1061997773;o[c+100>>2]=1056964608;o[c+104>>2]=0;o[c+92>>2]=0;o[c+96>>2]=0;o[c+8>>2]=1065353216;Yj(a,c);M=c+144|0}function Yb(a,b,c){var d=v(0),e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0);h=o[a+4>>2];if(h){Ca(h,b,c)}a=o[a>>2];if(a){l=s[a+220>>2];m=s[a+212>>2];n=s[a+216>>2];p=s[a+204>>2];q=s[a+196>>2];r=s[a+200>>2];t=s[a+188>>2];u=s[a+184>>2];w=s[a+180>>2];i=s[c+4>>2];j=s[c+8>>2];k=s[c>>2];d=s[b+8>>2];e=s[b+4>>2];g=s[b>>2];f=s[a+128>>2];s[a+276>>2]=v(g*f)+s[a+276>>2];s[a+280>>2]=v(f*e)+s[a+280>>2];s[a+284>>2]=v(f*d)+s[a+284>>2];o[a+312>>2]=o[a+312>>2]+1;f=v(v(d*i)-v(e*j));d=v(v(g*j)-v(d*k));e=v(v(e*k)-v(g*i));s[a+292>>2]=v(v(v(w*f)+v(u*d))+v(t*e))+s[a+292>>2];s[a+296>>2]=v(v(v(f*q)+v(d*r))+v(e*p))+s[a+296>>2];s[a+300>>2]=v(v(v(f*m)+v(d*n))+v(e*l))+s[a+300>>2]}}function $(a,b,c){var d=0,e=0,f=0,g=0;a:{if(!c){break a}d=a+c|0;m[d+ -1|0]=b;m[a|0]=b;if(c>>>0<3){break a}m[d+ -2|0]=b;m[a+1|0]=b;m[d+ -3|0]=b;m[a+2|0]=b;if(c>>>0<7){break a}m[d+ -4|0]=b;m[a+3|0]=b;if(c>>>0<9){break a}d=0-a&3;e=d+a|0;b=u(b&255,16843009);o[e>>2]=b;c=c-d&-4;d=c+e|0;o[d+ -4>>2]=b;if(c>>>0<9){break a}o[e+8>>2]=b;o[e+4>>2]=b;o[d+ -8>>2]=b;o[d+ -12>>2]=b;if(c>>>0<25){break a}o[e+24>>2]=b;o[e+20>>2]=b;o[e+16>>2]=b;o[e+12>>2]=b;o[d+ -16>>2]=b;o[d+ -20>>2]=b;o[d+ -24>>2]=b;o[d+ -28>>2]=b;g=e&4|24;c=c-g|0;if(c>>>0<32){break a}d=b;f=b;b=e+g|0;while(1){o[b+24>>2]=f;o[b+28>>2]=d;o[b+16>>2]=f;o[b+20>>2]=d;o[b+8>>2]=f;o[b+12>>2]=d;o[b>>2]=f;o[b+4>>2]=d;b=b+32|0;c=c+ -32|0;if(c>>>0>31){continue}break}}return a}function hm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;c=c?c:o[a+188>>2];g=o[b>>2];d=o[a+268>>2];a:{b:{if((d|0)<1){break b}f=o[a+276>>2];while(1){if(o[f+(e<<2)>>2]!=(g|0)){e=e+1|0;if((e|0)!=(d|0)){continue}break b}break}if((d|0)!=(e|0)){break a}}c:{if(o[a+272>>2]!=(d|0)){break c}f=d?d<<1:1;if((d|0)>=(f|0)){break c}if(f){o[7717]=o[7717]+1;h=l[o[6606]](f<<2,16)|0;d=o[a+268>>2]}if((d|0)>=1){e=0;while(1){i=e<<2;o[i+h>>2]=o[o[a+276>>2]+i>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break}}e=o[a+276>>2];if(e){if(p[a+280|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}d=o[a+268>>2]}o[a+276>>2]=0}o[a+276>>2]=h;o[a+272>>2]=f;m[a+280|0]=1}o[o[a+276>>2]+(d<<2)>>2]=g;o[a+268>>2]=d+1;a=o[a+284>>2];l[o[o[a>>2]+8>>2]](a,c,b)|0}}function Zk(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;o[a>>2]=11320;b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+56>>2]=0;m[a+60|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;e=o[a+28>>2];if((e|0)>=1){while(1){b=o[a+36>>2]+u(c,36)|0;f=b;d=o[b+12>>2];if(d){if(p[b+16|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[f+12>>2]=0}m[b+16|0]=1;o[f+12>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;c=c+1|0;if((e|0)!=(c|0)){continue}break}}b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+36>>2]=0;o[a+28>>2]=0;o[a+32>>2]=0;m[a+40|0]=1;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function ZH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];e=o[a+92>>2];if(e){d=l[o[o[c>>2]+28>>2]](c,o[a+100>>2])|0;o[b+56>>2]=e;o[b+52>>2]=d;f=l[o[o[c>>2]+16>>2]](c,20,e)|0;g=o[a+100>>2];if((e|0)>=1){h=o[a+120>>2];a=o[f+8>>2];b=0;while(1){d=(b<<4)+g|0;o[a>>2]=o[d>>2];o[a+4>>2]=o[d+4>>2];o[a+8>>2]=o[d+8>>2];o[a+12>>2]=o[d+12>>2];o[a+16>>2]=o[(b<<2)+h>>2];a=a+20|0;b=b+1|0;if((e|0)!=(b|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,f,11460,1497453121,g);return 11480}o[b+52>>2]=0;o[b+56>>2]=0;return 11480}function nI(a,b,c){a=a|0;b=v(b);c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0);d=M-96|0;M=d;o[d+44>>2]=0;o[d+48>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;o[d+52>>2]=1065353216;o[d+76>>2]=0;o[d+80>>2]=0;o[d+72>>2]=1065353216;o[d+84>>2]=0;o[d+88>>2]=0;o[d+92>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=1065353216;o[d+64>>2]=0;o[d+68>>2]=0;l[o[o[a>>2]+8>>2]](a,d+32|0,d+16|0,d);h=s[d+24>>2];i=s[d+8>>2];f=s[d+16>>2];g=s[d>>2];j=s[d+20>>2];k=s[d+4>>2];e=v(l[o[o[a>>2]+48>>2]](a));o[c+12>>2]=0;b=v(b*v(.0833333283662796));f=v(e+v(v(g-f)*v(.5)));f=v(f+f);f=v(f*f);g=v(e+v(v(k-j)*v(.5)));g=v(g+g);g=v(g*g);s[c+8>>2]=b*v(f+g);e=v(e+v(v(i-h)*v(.5)));e=v(e+e);e=v(e*e);s[c+4>>2]=b*v(f+e);s[c>>2]=b*v(g+e);M=d+96|0}function hH(a,b,c){a=a|0;b=v(b);c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0);d=M-96|0;M=d;e=v(l[o[o[a>>2]+48>>2]](a));o[d+44>>2]=0;o[d+48>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;o[d+52>>2]=1065353216;o[d+76>>2]=0;o[d+80>>2]=0;o[d+72>>2]=1065353216;o[d+84>>2]=0;o[d+88>>2]=0;o[d+92>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=1065353216;o[d+64>>2]=0;o[d+68>>2]=0;l[o[o[a>>2]+8>>2]](a,d+32|0,d+16|0,d);h=s[d+24>>2];i=s[d+8>>2];f=s[d+16>>2];g=s[d>>2];j=s[d+20>>2];k=s[d+4>>2];o[c+12>>2]=0;b=v(b*v(.0833333283662796));f=v(e+v(v(g-f)*v(.5)));f=v(f+f);f=v(f*f);g=v(e+v(v(k-j)*v(.5)));g=v(g+g);g=v(g*g);s[c+8>>2]=b*v(f+g);e=v(e+v(v(i-h)*v(.5)));e=v(e+e);e=v(e*e);s[c+4>>2]=b*v(f+e);s[c>>2]=b*v(g+e);M=d+96|0}function Oj(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0;while(1){m=c;g=o[a+12>>2];j=o[g+((c+d|0)/2<<2)>>2];h=d;i=c;while(1){n=o[o[j+740>>2]+208>>2];while(1){c=i;p=(c<<2)+g|0;k=o[p>>2];e=o[o[k+740>>2]+208>>2];if((e|0)<=-1){e=o[o[k+744>>2]+208>>2]}i=c+1|0;f=e;e=n;q=(e|0)>-1;if(!q){e=o[o[j+744>>2]+208>>2]}if((f|0)<(e|0)){continue}break}while(1){e=h;r=e<<2;l=o[r+g>>2];f=n;h=e+ -1|0;if(!q){f=o[o[j+744>>2]+208>>2]}s=f;f=o[o[l+740>>2]+208>>2];if((f|0)<=-1){f=o[o[l+744>>2]+208>>2]}if((s|0)<(f|0)){continue}break}if((c|0)<=(e|0)){o[p>>2]=l;o[o[a+12>>2]+r>>2]=k;e=h;c=i}if((c|0)<=(e|0)){g=o[a+12>>2];h=e;i=c;continue}break}if((e|0)>(m|0)){Oj(a,b,m,e)}if((c|0)<(d|0)){continue}break}}function CB(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;a:{if(!o[h+44>>2]){break a}c=o[h+20>>2];if(m[h+65|0]&1){if((c|0)<1){break a}d=0;while(1){b=0;e=o[a+28>>2];if((e|0)>=1){while(1){f=o[a+16>>2];c=o[a+36>>2]+u(o[o[a+116>>2]+(b<<2)>>2],152)|0;fj(f+u(o[c+144>>2],244)|0,f+u(o[c+148>>2],244)|0,c);b=b+1|0;if((e|0)!=(b|0)){continue}break}c=o[h+20>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}break a}if((c|0)<1){break a}d=0;while(1){b=0;e=o[a+28>>2];if((e|0)>=1){while(1){f=o[a+16>>2];c=o[a+36>>2]+u(o[o[a+116>>2]+(b<<2)>>2],152)|0;fj(f+u(o[c+144>>2],244)|0,f+u(o[c+148>>2],244)|0,c);b=b+1|0;if((e|0)!=(b|0)){continue}break}c=o[h+20>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}}function Di(a){var b=0,c=0,d=0,e=0,f=0;o[a+32>>2]=262144;c=o[a+4>>2];if((c|0)<2383){if(o[a+8>>2]<2383){o[7717]=o[7717]+1;f=l[o[6606]](9532,16)|0;d=o[a+4>>2];if((d|0)>=1){while(1){b=e<<2;o[b+f>>2]=o[b+o[a+12>>2]>>2];e=e+1|0;if((d|0)!=(e|0)){continue}break}}b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=f;m[a+16|0]=1;o[a+8>>2]=2383}while(1){o[o[a+12>>2]+(c<<2)>>2]=0;c=c+1|0;if((c|0)!=2383){continue}break}}o[a+4>>2]=2383;d=0;while(1){b=o[a+12>>2]+(d<<2)|0;c=o[b>>2];o[b>>2]=0;if(c){while(1){b=o[c+280>>2];ba(c);c=b;if(b){continue}break}}d=d+1|0;if((d|0)!=2383){continue}break}o[a+36>>2]=1;o[a+40>>2]=1;o[a+28>>2]=0;o[a+20>>2]=1048576e3;o[a+24>>2]=0}function Hi(a,b){var c=0,d=0,e=v(0),f=v(0),g=0;c=M-32|0;M=c;d=o[b+388>>2];g=(d&o[a+388>>2]&48)+ -16|0;a:{if(g){if((g|0)!=16){break a}if(d&64?0:(a|0)==(b|0)){break a}o[c+20>>2]=0;o[c+4>>2]=1065353216;o[c>>2]=22016;o[c+8>>2]=o[a+456>>2];d=o[a+192>>2];e=v(l[o[o[d>>2]+48>>2]](d));d=o[b+192>>2];s[c+12>>2]=e+v(l[o[o[d>>2]+48>>2]](d));e=s[b+316>>2];f=s[a+316>>2];o[c+28>>2]=b;o[c+24>>2]=a;s[c+16>>2]=f<e?f:e;xf(o[a+1048>>2],o[b+1048>>2],c);break a}if((a|0)==(b|0)){break a}o[c>>2]=22100;d=o[a+192>>2];e=v(l[o[o[d>>2]+48>>2]](d));d=o[b+192>>2];f=v(l[o[o[d>>2]+48>>2]](d));o[c+8>>2]=b;o[c+4>>2]=a;s[c+12>>2]=e+f;xf(o[a+928>>2],o[b+988>>2],c);o[c+8>>2]=a;o[c+4>>2]=b;xf(o[b+928>>2],o[a+988>>2],c)}M=c+32|0}function wB(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);if(p[a+84|0]){c=s[a>>2];d=s[a+4>>2];h=s[a+8>>2];e=v(v(v(c*s[a+52>>2])+v(d*s[a+56>>2]))+v(h*s[a+60>>2]));if(!!(e>=v(-.10000000149011612))){o[a+272>>2]=0;s[a+268>>2]=10;return}e=v(v(-1)/e);g=c;c=s[b+332>>2];f=v(s[a+24>>2]-s[b+60>>2]);i=v(s[a+20>>2]-s[b+56>>2]);j=s[b+336>>2];k=v(g*v(v(v(c*f)-v(i*j))+s[b+312>>2]));l=d;d=v(s[a+16>>2]-s[b+52>>2]);g=f;f=s[b+328>>2];s[a+272>>2]=e*v(v(k+v(l*v(v(v(d*j)-v(g*f))+s[b+316>>2])))+v(h*v(v(v(i*f)-v(d*c))+s[b+320>>2])));s[a+268>>2]=e;return}o[a+272>>2]=0;o[a+12>>2]=0;o[a+32>>2]=o[a+204>>2];s[a>>2]=-s[a+52>>2];s[a+8>>2]=-s[a+60>>2];s[a+4>>2]=-s[a+56>>2];s[a+268>>2]=1}function pD(a,b){var c=0,d=0;d=l[o[o[b>>2]+16>>2]](b,104,1)|0;c=$(o[d+8>>2],0,104);o[c+88>>2]=o[a+248>>2];o[c+92>>2]=o[a+252>>2];o[c+96>>2]=o[a+256>>2];o[c+100>>2]=o[a+260>>2];o[c>>2]=o[a+92>>2];o[c+4>>2]=o[a+96>>2];o[c+8>>2]=o[a+100>>2];o[c+12>>2]=o[a+104>>2];o[c+16>>2]=o[a+108>>2];o[c+20>>2]=o[a+116>>2];o[c+24>>2]=o[a+120>>2];o[c+28>>2]=o[a+124>>2];o[c+32>>2]=o[a+128>>2];o[c+36>>2]=o[a+132>>2];o[c+40>>2]=o[a+140>>2];o[c+44>>2]=o[a+144>>2];o[c+48>>2]=o[a+148>>2];o[c+52>>2]=o[a+152>>2];o[c+56>>2]=o[a+168>>2];o[c+60>>2]=o[a+172>>2];o[c+64>>2]=o[a+112>>2];o[c+68>>2]=o[a+156>>2];o[c+72>>2]=o[a+160>>2];o[c+76>>2]=o[a+164>>2];o[c+80>>2]=o[a+136>>2];l[o[o[b>>2]+20>>2]](b,d,18516,1145853764,c)}function PI(a){var b=0,c=0;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;b=0;c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}b=o[a+32>>2]}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0;a:{if(!b){o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;break a}if(!p[a+36|0]){o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;break a}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}m[a+36|0]=1;o[a+32>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0;b=o[a+12>>2];if(!b){break a}if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0}function Fj(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0;while(1){m=c;g=o[a+12>>2];j=o[g+((c+d|0)/2<<2)>>2];h=d;i=c;while(1){n=o[o[j+28>>2]+208>>2];while(1){c=i;p=(c<<2)+g|0;k=o[p>>2];f=n;q=(f|0)>-1;if(!q){f=o[o[j+32>>2]+208>>2]}i=c+1|0;e=o[o[k+28>>2]+208>>2];if((e|0)<=-1){e=o[o[k+32>>2]+208>>2]}if((e|0)<(f|0)){continue}break}while(1){e=h;r=e<<2;l=o[r+g>>2];f=o[o[l+28>>2]+208>>2];if((f|0)<=-1){f=o[o[l+32>>2]+208>>2]}s=n;h=e+ -1|0;if(!q){s=o[o[j+32>>2]+208>>2]}if((s|0)<(f|0)){continue}break}if((c|0)<=(e|0)){o[p>>2]=l;o[o[a+12>>2]+r>>2]=k;e=h;c=i}if((c|0)<=(e|0)){g=o[a+12>>2];h=e;i=c;continue}break}if((e|0)>(m|0)){Fj(a,b,m,e)}if((c|0)<(d|0)){continue}break}}function vC(a,b){var c=v(0),d=v(0),e=v(0);a:{d=s[a+4>>2];if(!(d>v(0))){break a}e=s[a>>2];c=xa(v(s[b>>2]-e),v(6.2831854820251465));b:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break b}if(!(c>v(3.1415927410125732))){break b}c=v(c+v(-6.2831854820251465))}if(c<v(-d)^1?!!(c<=d):0){break a}if(!!(c>v(0))){c=xa(v(d+e),v(6.2831854820251465));if(!!(c<v(-3.1415927410125732))){s[b>>2]=c+v(6.2831854820251465);return}s[b>>2]=c>v(3.1415927410125732)^1?c:v(c+v(-6.2831854820251465));return}c=xa(v(e-d),v(6.2831854820251465));c:{if(!!(c<v(-3.1415927410125732))){c=v(c+v(6.2831854820251465));break c}if(!(c>v(3.1415927410125732))){break c}c=v(c+v(-6.2831854820251465))}s[b>>2]=c}}function FJ(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=M-96|0;M=c;b=o[b>>2];a:{if((b|0)==o[a+4>>2]){break a}d=o[a+12>>2];if(!l[o[o[d>>2]+8>>2]](d,o[b+188>>2])){break a}d=o[a+4>>2];e=o[d+192>>2];o[c+88>>2]=-1;o[c+92>>2]=-1;o[c+84>>2]=d+4;o[c+80>>2]=d;o[c+76>>2]=e;o[c+72>>2]=0;d=o[b+192>>2];o[c+64>>2]=-1;o[c+68>>2]=-1;o[c+60>>2]=b+4;o[c+56>>2]=b;o[c+52>>2]=d;o[c+48>>2]=0;b=o[o[a+8>>2]+24>>2];b=l[o[o[b>>2]+8>>2]](b,c+72|0,c+48|0,0)|0;if(!b){break a}e=o[a+12>>2];d=c+8|0;o[d+12>>2]=c+48;o[d+8>>2]=c+72;o[d+4>>2]=0;o[d>>2]=7088;o[c+40>>2]=e;o[c+8>>2]=9484;l[o[o[b>>2]+8>>2]](b,c+72|0,c+48|0,o[a+8>>2]+28|0,d);l[o[o[b>>2]>>2]](b)|0;a=o[o[a+8>>2]+24>>2];l[o[o[a>>2]+60>>2]](a,b)}M=c+96|0;return 1}function Cz(a,b,c){a=a|0;b=v(b);c=v(c);var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=0,k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=0;j=o[a+732>>2];if((j|0)>=1){q=o[a+740>>2];while(1){d=u(i,52)+q|0;e=s[d+24>>2];a:{if(!(e>v(0))){break a}f=s[d+28>>2];a=o[d+12>>2];d=o[d+8>>2];k=s[d+8>>2];c=v(s[a+8>>2]-k);l=s[d+12>>2];g=v(s[a+12>>2]-l);m=s[d+16>>2];h=v(s[a+16>>2]-m);n=v(v(v(c*c)+v(g*g))+v(h*h));p=v(f+n);if(!(p>v(1.1920928955078125e-7))){break a}f=v(v(v(f-n)/v(e*p))*b);e=v(f*s[d+88>>2]);s[d+16>>2]=m-v(h*e);s[d+12>>2]=l-v(g*e);s[d+8>>2]=k-v(c*e);e=c;c=v(f*s[a+88>>2]);s[a+8>>2]=s[a+8>>2]+v(e*c);s[a+16>>2]=v(h*c)+s[a+16>>2];s[a+12>>2]=v(g*c)+s[a+12>>2]}i=i+1|0;if((j|0)!=(i|0)){continue}break}}}function OG(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];d=o[a+96>>2];o[b+60>>2]=d;if(d){e=l[o[o[c>>2]+28>>2]](c,o[a+104>>2])|0;o[b+56>>2]=0;o[b+52>>2]=e;e=l[o[o[c>>2]+16>>2]](c,16,d)|0;g=o[a+104>>2];if((d|0)>=1){b=o[e+8>>2];while(1){a=(f<<4)+g|0;o[b>>2]=o[a>>2];o[b+4>>2]=o[a+4>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=o[a+12>>2];b=b+16|0;f=f+1|0;if((f|0)!=(d|0)){continue}break}}l[o[o[c>>2]+20>>2]](c,e,13856,1497453121,g);return 13875}o[b+52>>2]=0;o[b+56>>2]=0;return 13875}function DD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;if(!(p[b+204|0]&3|m[b+504|0]&1)){Nd(b,a+248|0)}if(o[b+192>>2]){a:{if(!(m[b+204|0]&1)){c=o[a+232>>2];b:{if((c|0)!=o[a+236>>2]){break b}e=c?c<<1:1;if((c|0)>=(e|0)){break b}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;c=o[a+232>>2]}if((c|0)>=1){while(1){g=d<<2;o[g+f>>2]=o[o[a+240>>2]+g>>2];d=d+1|0;if((d|0)!=(c|0)){continue}break}}d=o[a+240>>2];if(d){if(p[a+244|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}c=o[a+232>>2]}o[a+240>>2]=0}o[a+240>>2]=f;o[a+236>>2]=e;m[a+244|0]=1}o[o[a+240>>2]+(c<<2)>>2]=b;o[a+232>>2]=c+1;break a}if((o[b+216>>2]&-2)!=4){o[b+216>>2]=2}}c=b;b=o[b+204>>2]&3;l[o[o[a>>2]+36>>2]](a,c,b?2:1,b?-3:-1)}}function oL(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0);j=M-80|0;M=j;k=s[e+52>>2];l=s[f+52>>2];m=s[e+56>>2];n=s[f+56>>2];p=s[e+48>>2];q=s[f+48>>2];a=0;o[j+76>>2]=0;s[j+64>>2]=q-p;s[j+72>>2]=n-m;s[j+68>>2]=l-k;b=1;a:{if(!ve(c,e,d,f,j- -64|0,j+8|0,1)){b=0;if(!Cg(c,e,d,f,j- -64|0,j+8|0)){break a}}a=o[j+16>>2];o[h>>2]=o[j+12>>2];o[h+4>>2]=a;a=o[j+24>>2];o[h+8>>2]=o[j+20>>2];o[h+12>>2]=a;a=o[j+40>>2];o[i+8>>2]=o[j+36>>2];o[i+12>>2]=a;a=o[j+32>>2];o[i>>2]=o[j+28>>2];o[i+4>>2]=a;a=o[j+56>>2];o[g+8>>2]=o[j+52>>2];o[g+12>>2]=a;a=o[j+48>>2];o[g>>2]=o[j+44>>2];o[g+4>>2]=a;a=b}M=j+80|0;return a|0}function BE(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);f=o[a- -64>>2];a=o[a+4>>2];a:{if(a){g=s[a>>2];if(f){d=s[a+20>>2];e=s[f+20>>2];h=d>e?d:e;d=s[a+8>>2];e=s[f+8>>2];i=d<e?d:e;d=s[a+4>>2];e=s[f+4>>2];j=d<e?d:e;d=s[a+16>>2];e=s[f+16>>2];k=d>e?d:e;d=s[f>>2];g=g<d?g:d;d=s[a+24>>2];e=s[f+24>>2];if(!(d>e)){d=e;break a}break a}e=s[a+28>>2];d=s[a+24>>2];h=s[a+20>>2];k=s[a+16>>2];l=s[a+12>>2];i=s[a+8>>2];j=s[a+4>>2];break a}if(!f){break a}e=s[f+28>>2];d=s[f+24>>2];h=s[f+20>>2];k=s[f+16>>2];l=s[f+12>>2];i=s[f+8>>2];j=s[f+4>>2];g=s[f>>2]}s[b+12>>2]=l;s[b+8>>2]=i;s[b+4>>2]=j;s[b>>2]=g;s[c+12>>2]=e;s[c+8>>2]=d;s[c+4>>2]=h;s[c>>2]=k}function iy(a,b,c){var d=0,e=v(0),f=v(0),g=0,h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0);d=M-16|0;M=d;a:{b:{c:{d:{e:{if(o[c+100>>2]>=0){s[(o[b+108>>2]<<2)+d>>2]=o[c+88>>2];break e}e=Cb(c+24|0);g=c+72|0;f=Cb(g);h=o[c+100>>2];s[(o[b+108>>2]<<2)+d>>2]=e/f;if((h|0)<0){break d}}s[(o[b+112>>2]<<2)+d>>2]=o[c+92>>2];break c}e=Cb(c+40|0);f=Cb(g);g=o[c+100>>2];s[(o[b+112>>2]<<2)+d>>2]=e/f;if((g|0)<0){break b}}e=v(o[c+96>>2]);break a}e=v(Cb(c+56|0)/Cb(c+72|0))}s[(o[b+104>>2]<<2)+d>>2]=e;e=s[b+20>>2];f=s[b+24>>2];i=s[b+16>>2];j=s[b>>2];k=s[b+4>>2];l=s[b+8>>2];m=s[d>>2];n=s[d+4>>2];p=s[d+8>>2];o[a+12>>2]=0;s[a+8>>2]=f+v(p*l);s[a+4>>2]=e+v(n*k);s[a>>2]=i+v(m*j);M=d+16|0}function cC(a,b){var c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0),q=v(0);c=M-48|0;M=c;ya(a+364|0,c+16|0);d=s[b+4>>2];e=s[b+8>>2];f=s[b>>2];g=s[b+12>>2];h=s[c+24>>2];i=s[c+20>>2];j=s[c+28>>2];k=s[c+16>>2];ya(a+300|0,c);l=v(v(h*e)+v(v(v(k*f)+v(j*g))+v(i*d)));m=s[c+12>>2];n=v(v(v(v(j*f)-v(k*g))-v(i*e))+v(h*d));o=s[c>>2];p=v(v(k*e)+v(v(v(j*d)-v(i*g))-v(h*f)));q=s[c+4>>2];d=v(v(i*f)+v(v(v(j*e)-v(h*g))-v(k*d)));e=s[c+8>>2];s[c+44>>2]=v(v(v(l*m)-v(n*o))-v(p*q))-v(d*e);s[c+40>>2]=v(v(v(d*m)+v(l*e))+v(n*q))-v(o*p);s[c+36>>2]=v(v(o*d)+v(v(m*p)+v(l*q)))-v(n*e);s[c+32>>2]=v(v(v(l*o)+v(n*m))+v(p*e))-v(d*q);nj(a,c+32|0);M=c+48|0}function yg(a,b,c,d){var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),o=v(0),p=v(0);i=s[c+24>>2];e=s[b+24>>2];l=v(i-e);j=s[c+16>>2];g=s[b+16>>2];m=v(j-g);f=s[a+4>>2];k=s[c+20>>2];h=s[b+20>>2];n=v(k-h);o=s[a>>2];p=s[a+8>>2];if(!(v(v(e*v(v(m*f)-v(n*o)))+v(v(g*v(v(n*p)-v(l*f)))+v(h*v(v(l*o)-v(m*p)))))<v(0))){a=0}else{f=v(v(v(g*g)+v(h*h))+v(e*e));a:{if(!!(v(v(v(g*m)+v(h*n))+v(e*l))>v(0))){break a}f=v(v(v(j*j)+v(k*k))+v(i*i));if(!!(v(v(v(j*m)+v(k*n))+v(i*l))<v(0))){break a}f=v(v(v(v(j*j)+v(k*k))+v(i*i))*v(v(v(g*g)+v(h*h))+v(e*e)));e=v(v(v(j*g)+v(k*h))+v(i*e));e=v(v(f-v(e*e))/v(v(v(m*m)+v(n*n))+v(l*l)));f=e>v(0)?e:v(0)}s[d>>2]=C(f);a=1}return a}function Vm(a,b,c,d,e){a=a|0;b=b|0;c=v(c);d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=M-272|0;M=f;o[f+268>>2]=a;o[f+264>>2]=b;s[f+260>>2]=c;o[f+256>>2]=d;o[f+252>>2]=e;a=o[f+268>>2];b=f+232|0;ta(b,o[f+264>>2],f+260|0);d=f+216|0;o[(M-16|0)+12>>2]=d;e=f+200|0;o[(M-16|0)+12>>2]=e;Um(o[f+264>>2],d,e);s[f+196>>2]=100;g=f+160|0;h=f+196|0;ta(g,d,h);i=f+176|0;ha(i,b,g);g=f+128|0;ta(g,d,h);d=f+144|0;db(d,b,g);g=f+96|0;ta(g,e,h);j=f+112|0;ha(j,b,g);g=f- -64|0;ta(g,e,h);e=f+80|0;db(e,b,g);b=f+48|0;ka(b,o[f+256>>2],i);h=f+32|0;ka(h,o[f+256>>2],d);l[o[o[a>>2]+8>>2]](a,b,h,o[f+252>>2]);b=f+16|0;ka(b,o[f+256>>2],j);ka(f,o[f+256>>2],e);l[o[o[a>>2]+8>>2]](a,b,f,o[f+252>>2]);M=f+272|0}function gc(a){o[a+188>>2]=0;o[a+192>>2]=0;o[a+180>>2]=0;o[a+184>>2]=1566444395;o[a+164>>2]=1065353216;o[a+168>>2]=1065353216;o[a>>2]=3948;o[a+244>>2]=1065353216;o[a+236>>2]=1;o[a+240>>2]=0;o[a+228>>2]=0;o[a+232>>2]=0;o[a+220>>2]=0;o[a+224>>2]=1056964608;o[a+212>>2]=-1;o[a+216>>2]=1;o[a+204>>2]=1;o[a+208>>2]=-1;o[a+248>>2]=0;o[a+252>>2]=0;o[a+4>>2]=1065353216;o[a+172>>2]=1065353216;o[a+176>>2]=0;o[a+196>>2]=0;o[a+200>>2]=0;o[a+256>>2]=0;o[a+260>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;o[a+36>>2]=0;o[a+40>>2]=0;o[a+24>>2]=1065353216;o[a+28>>2]=0;o[a+32>>2]=0;o[a- -64>>2]=0;o[a+44>>2]=1065353216;o[a+56>>2]=0;o[a+60>>2]=0;o[a+48>>2]=0;o[a+52>>2]=0}function Wd(a,b,c,d){var e=v(0),f=0,g=v(0),h=v(0),i=v(0);h=v(s[c+8>>2]-s[a+16>>2]);i=s[a+48>>2];g=v(v(s[c+4>>2]-s[a+12>>2])*s[a+44>>2]);e=v(v(s[c>>2]-s[a+8>>2])*s[a+40>>2]);c=d;a:{if(!!(e<=v(0))){break a}c=q[a+6>>1];if(!!(e>=v(c>>>0))){c=c&q[a+4>>1]|d;break a}if(e<v(4294967296)&e>=v(0)){c=~~e>>>0}else{c=0}c=c&q[a+4>>1]|d}f=c;e=v(h*i);n[b>>1]=f;f=b;c=d;b:{if(!!(g<=v(0))){break b}c=q[a+6>>1];if(!!(g>=v(c>>>0))){c=c&q[a+4>>1]|d;break b}if(g<v(4294967296)&g>=v(0)){c=~~g>>>0}else{c=0}c=c&q[a+4>>1]|d}n[f+2>>1]=c;c=b;if(!(e<=v(0))){f=q[a+6>>1];if(!!(e>=v(f>>>0))){n[b+4>>1]=f&q[a+4>>1]|d;return}if(e<v(4294967296)&e>=v(0)){b=~~e>>>0}else{b=0}d=b&q[a+4>>1]|d}n[c+4>>1]=d}function Aj(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;d=o[a+8>>2];if((d|0)>=1){while(1){c=o[o[a+16>>2]+(e<<2)>>2];if(p[c+236|0]&2){d=(g=b,h=l[o[o[c>>2]+16>>2]](c)|0,i=1,f=o[o[b>>2]+16>>2],l[f](g|0,h|0,i|0)|0);i=b,h=d,g=l[o[o[c>>2]+20>>2]](c,o[d+8>>2],b)|0,j=1497645650,k=c,f=o[o[b>>2]+20>>2],l[f](i|0,h|0,g|0,j|0,k|0);d=o[a+8>>2]}e=e+1|0;if((e|0)<(d|0)){continue}break}}if(o[a+212>>2]>=1){e=0;while(1){c=o[o[a+220>>2]+(e<<2)>>2];d=(k=b,j=l[o[o[c>>2]+36>>2]](c)|0,g=1,f=o[o[b>>2]+16>>2],l[f](k|0,j|0,g|0)|0);g=b,j=d,k=l[o[o[c>>2]+40>>2]](c,o[d+8>>2],b)|0,h=1397641027,i=c,f=o[o[b>>2]+20>>2],l[f](g|0,j|0,k|0,h|0,i|0);e=e+1|0;if((e|0)<o[a+212>>2]){continue}break}}}function Kk(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=o[a+96>>2];a:{if((d|0)!=o[a+100>>2]){break a}e=d?d<<1:1;if((d|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;j=l[o[6606]](e<<4,16)|0;d=o[a+96>>2]}if((d|0)>=1){while(1){f=h<<4;g=f+j|0;f=f+o[a+104>>2]|0;i=o[f+4>>2];o[g>>2]=o[f>>2];o[g+4>>2]=i;i=o[f+12>>2];o[g+8>>2]=o[f+8>>2];o[g+12>>2]=i;h=h+1|0;if((h|0)!=(d|0)){continue}break}}d=o[a+104>>2];if(d){if(p[a+108|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+104>>2]=0}o[a+104>>2]=j;o[a+100>>2]=e;m[a+108|0]=1;d=o[a+96>>2]}e=o[b+4>>2];d=o[a+104>>2]+(d<<4)|0;o[d>>2]=o[b>>2];o[d+4>>2]=e;e=o[b+12>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=e;o[a+96>>2]=o[a+96>>2]+1;if(c){Ib(a)}}function Hn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M+ -64|0;M=d;o[d+60>>2]=a;o[d+56>>2]=b;m[d+55|0]=c;a=o[d+60>>2];o[a+8>>2]=o[o[d+56>>2]>>2];Gn(a+20|0,o[d+56>>2]);o[(M-16|0)+12>>2]=d+32;a:{if(m[d+55|0]&1){b=o[d+56>>2];c=o[b+12>>2];o[d+32>>2]=o[b+8>>2];o[d+36>>2]=c;c=o[b+20>>2];o[d+40>>2]=o[b+16>>2];o[d+44>>2]=c;break a}b=M-16|0;o[b+12>>2]=o[a+8>>2];c=M-16|0;o[c+12>>2]=o[b+12>>2]+4;ea(d+16|0,o[c+12>>2],o[d+56>>2]+8|0);b=o[d+20>>2];o[d+32>>2]=o[d+16>>2];o[d+36>>2]=b;b=o[d+28>>2];o[d+40>>2]=o[d+24>>2];o[d+44>>2]=b}ch(a+72|0,d+32|0);o[(M-16|0)+12>>2]=d;bh(d,a+40|0,a+56|0,s[o[d+56>>2]+24>>2]);ch(a+92|0,d);Fn(a+112|0,o[d+56>>2]+24|0);M=d- -64|0;return v(s[a+4>>2])}function HC(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),w=v(0);Kf(a,3,b);o[a>>2]=19160;d=o[c+4>>2];o[a+300>>2]=o[c>>2];o[a+304>>2]=d;d=o[c+12>>2];o[a+308>>2]=o[c+8>>2];o[a+312>>2]=d;h=s[b+52>>2];i=s[b+8>>2];j=s[b+12>>2];k=s[b+56>>2];l=s[b+20>>2];n=s[b+24>>2];p=s[b+28>>2];q=s[b+60>>2];r=s[b+36>>2];t=s[b+40>>2];e=s[c+8>>2];u=s[b+44>>2];w=s[b+4>>2];f=s[c>>2];g=s[c+4>>2];o[a+356>>2]=0;o[a+348>>2]=1050253722;o[a+352>>2]=1065353216;m[a+344|0]=0;o[a+328>>2]=0;o[a+332>>2]=0;s[a+324>>2]=q+v(v(v(f*r)+v(g*t))+v(e*u));s[a+320>>2]=k+v(v(v(f*l)+v(g*n))+v(e*p));s[a+316>>2]=h+v(v(v(f*w)+v(g*i))+v(e*j))}function CD(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;if(!(p[b+204|0]&3|m[b+504|0]&1)){Nd(b,a+248|0)}if(o[b+192>>2]){a:{if(!(m[b+204|0]&1)){e=o[a+232>>2];b:{if((e|0)!=o[a+236>>2]){break b}g=e?e<<1:1;if((e|0)>=(g|0)){break b}if(g){o[7717]=o[7717]+1;h=l[o[6606]](g<<2,16)|0;e=o[a+232>>2]}if((e|0)>=1){while(1){i=f<<2;o[i+h>>2]=o[o[a+240>>2]+i>>2];f=f+1|0;if((f|0)!=(e|0)){continue}break}}f=o[a+240>>2];if(f){if(p[a+244|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}e=o[a+232>>2]}o[a+240>>2]=0}o[a+240>>2]=h;o[a+236>>2]=g;m[a+244|0]=1}o[o[a+240>>2]+(e<<2)>>2]=b;o[a+232>>2]=e+1;break a}if((o[b+216>>2]&-2)!=4){o[b+216>>2]=2}}l[o[o[a>>2]+36>>2]](a,b,c,d)}}function Sm(a,b,c){var d=0,e=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){$g(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){c=o[a+12>>2]+(o[d+8>>2]<<4)|0;b=M-16|0;o[b+12>>2]=16;o[b+8>>2]=c;c=o[d+20>>2];e=o[c+4>>2];b=o[b+8>>2];o[b>>2]=o[c>>2];o[b+4>>2]=e;e=o[c+12>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=e;o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function tH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);g=s[a+88>>2];h=s[a+92>>2];i=s[a+96>>2];e=v(v(v(g*s[b>>2])+v(h*s[b+4>>2]))+v(i*s[b+8>>2]));f=s[a+84>>2];if(!!(e>f)){s[a+84>>2]=e;c=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=c;c=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=c;f=e}e=v(v(v(g*s[b+16>>2])+v(h*s[b+20>>2]))+v(i*s[b+24>>2]));if(!!(e>f)){s[a+84>>2]=e;c=o[b+28>>2];o[a+12>>2]=o[b+24>>2];o[a+16>>2]=c;c=o[b+20>>2];o[a+4>>2]=o[b+16>>2];o[a+8>>2]=c;f=e}e=v(v(v(g*s[b+32>>2])+v(h*s[b+36>>2]))+v(i*s[b+40>>2]));if(!!(e>f)){s[a+84>>2]=e;c=o[b+44>>2];o[a+12>>2]=o[b+40>>2];o[a+16>>2]=c;c=o[b+36>>2];o[a+4>>2]=o[b+32>>2];o[a+8>>2]=c}}function sG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);g=s[a+24>>2];h=s[a+28>>2];i=s[a+32>>2];e=v(v(v(g*s[b>>2])+v(h*s[b+4>>2]))+v(i*s[b+8>>2]));f=s[a+20>>2];if(!!(e>f)){s[a+20>>2]=e;c=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=c;c=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=c;f=e}e=v(v(v(g*s[b+16>>2])+v(h*s[b+20>>2]))+v(i*s[b+24>>2]));if(!!(e>f)){s[a+20>>2]=e;c=o[b+28>>2];o[a+12>>2]=o[b+24>>2];o[a+16>>2]=c;c=o[b+20>>2];o[a+4>>2]=o[b+16>>2];o[a+8>>2]=c;f=e}e=v(v(v(g*s[b+32>>2])+v(h*s[b+36>>2]))+v(i*s[b+40>>2]));if(!!(e>f)){s[a+20>>2]=e;c=o[b+44>>2];o[a+12>>2]=o[b+40>>2];o[a+16>>2]=c;c=o[b+36>>2];o[a+4>>2]=o[b+32>>2];o[a+8>>2]=c}}function nm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=o[b>>2];c=o[a+268>>2];a:{b:{if((c|0)<1){break b}d=o[a+276>>2];b=0;while(1){if(o[d+(b<<2)>>2]!=(e|0)){b=b+1|0;if((c|0)!=(b|0)){continue}break b}break}if((b|0)!=(c|0)){break a}}c:{if(o[a+272>>2]!=(c|0)){break c}d=c?c<<1:1;if((c|0)>=(d|0)){break c}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<2,16)|0;c=o[a+268>>2]}if((c|0)>=1){b=0;while(1){g=b<<2;o[g+f>>2]=o[o[a+276>>2]+g>>2];b=b+1|0;if((c|0)!=(b|0)){continue}break}}b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}c=o[a+268>>2]}o[a+276>>2]=0}o[a+276>>2]=f;o[a+272>>2]=d;m[a+280|0]=1}o[o[a+276>>2]+(c<<2)>>2]=e;o[a+268>>2]=c+1}}function dm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=v(0);d=M-80|0;M=d;e=o[o[a>>2]>>2];f=o[o[a+4>>2]>>2];a:{if(!l[o[o[b>>2]+24>>2]](b,e,f)){break a}g=o[e+192>>2];o[d+72>>2]=-1;o[d+76>>2]=-1;o[d+68>>2]=e+4;o[d+64>>2]=e;o[d+60>>2]=g;o[d+56>>2]=0;g=o[f+192>>2];o[d+48>>2]=-1;o[d+52>>2]=-1;o[d+44>>2]=f+4;o[d+40>>2]=f;o[d+36>>2]=g;o[d+32>>2]=0;if(!o[a+8>>2]){b=l[o[o[b>>2]+8>>2]](b,d+56|0,d+32|0,0)|0;o[a+8>>2]=b;if(!b){break a}}o[d+12>>2]=d+32;o[d+8>>2]=d+56;o[d+4>>2]=0;o[d>>2]=7088;b=d;a=o[a+8>>2];if(o[c+8>>2]==1){l[o[o[a>>2]+8>>2]](a,d+56|0,d+32|0,c,b);break a}h=v(l[o[o[a>>2]+12>>2]](a,e,f,c,b));if(!(s[c+12>>2]>h)){break a}s[c+12>>2]=h}M=d+80|0}function Dk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0),x=v(0),y=v(0);e=v(l[o[o[a>>2]+48>>2]](a));j=s[b+52>>2];h=s[b+20>>2];n=s[b+24>>2];k=s[b+56>>2];i=s[b+36>>2];f=s[a+32>>2];p=s[b+40>>2];q=s[a+36>>2];m=s[b+48>>2];r=s[b>>2];t=s[b+4>>2];u=s[b+8>>2];x=s[b+16>>2];y=s[b+32>>2];g=s[a+28>>2];o[c+12>>2]=0;g=v(e+g);f=v(e+f);e=v(e+q);i=v(v(v(g*v(w(y)))+v(f*v(w(i))))+v(e*v(w(p))));s[c+8>>2]=k-i;h=v(v(v(g*v(w(x)))+v(f*v(w(h))))+v(e*v(w(n))));s[c+4>>2]=j-h;e=v(v(v(g*v(w(r)))+v(f*v(w(t))))+v(e*v(w(u))));s[c>>2]=m-e;o[d+12>>2]=0;s[d+8>>2]=k+i;s[d+4>>2]=h+j;s[d>>2]=e+m}function Mj(a){a=a|0;var b=0,c=0,d=0;ia(18160);rl(a);a:{if(!l[o[o[a>>2]+20>>2]](a)){break a}b=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[b>>2]+48>>2]](b)&6144)){break a}c=l[o[o[a>>2]+104>>2]](a)|0;if((c|0)<1){break a}while(1){b=c+ -1|0;ND(a,l[o[o[a>>2]+108>>2]](a,b)|0);d=(c|0)>1;c=b;if(d){continue}break}}b:{if(!l[o[o[a>>2]+20>>2]](a)){break b}b=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[b>>2]+48>>2]](b)&16387)){break b}if(!l[o[o[a>>2]+20>>2]](a)){break b}b=l[o[o[a>>2]+20>>2]](a)|0;if(!l[o[o[b>>2]+48>>2]](b)|o[a+280>>2]<1){break b}c=0;while(1){b=o[o[a+288>>2]+(c<<2)>>2];l[o[o[b>>2]+12>>2]](b,o[a+72>>2]);c=c+1|0;if((c|0)<o[a+280>>2]){continue}break}}ga()}function GI(a){a=a|0;var b=v(0),c=0,d=0,e=0,f=0;c=M-32|0;M=c;o[a+48>>2]=-581039253;o[a+52>>2]=-581039253;o[a+32>>2]=1566444395;o[a+36>>2]=1566444395;o[a+56>>2]=-581039253;o[a+60>>2]=0;o[a+40>>2]=1566444395;o[a+44>>2]=0;if(o[a+16>>2]>=1){while(1){e=o[a+24>>2]+u(d,80)|0;f=o[e+64>>2];l[o[o[f>>2]+8>>2]](f,e,c+16|0,c);b=s[c+16>>2];if(!!(s[a+32>>2]>b)){s[a+32>>2]=b}b=s[c>>2];if(!!(s[a+48>>2]<b)){s[a+48>>2]=b}b=s[c+20>>2];if(!!(s[a+36>>2]>b)){s[a+36>>2]=b}b=s[c+4>>2];if(!!(s[a+52>>2]<b)){s[a+52>>2]=b}b=s[c+24>>2];if(!!(s[a+40>>2]>b)){s[a+40>>2]=b}b=s[c+8>>2];if(!!(s[a+56>>2]<b)){s[a+56>>2]=b}d=d+1|0;if((d|0)<o[a+16>>2]){continue}break}}M=c+32|0}function ZD(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;d=o[a+4>>2];if((d|0)<(b|0)){if(o[a+8>>2]<(b|0)){if(b){o[7717]=o[7717]+1;g=l[o[6606]](b<<3,16)|0;c=o[a+4>>2]}else{c=d}if((c|0)>=1){while(1){e=f<<3;h=e+g|0;e=o[a+12>>2]+e|0;i=o[e+4>>2];o[h>>2]=o[e>>2];o[h+4>>2]=i;f=f+1|0;if((c|0)!=(f|0)){continue}break}}c=o[a+12>>2];if(c){if(p[a+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+12>>2]=0}o[a+12>>2]=g;m[a+16|0]=1;o[a+8>>2]=b}while(1){c=o[a+12>>2]+(d<<3)|0;o[c>>2]=0;o[c+4>>2]=0;d=d+1|0;if((d|0)!=(b|0)){continue}break}}o[a+4>>2]=b;if((b|0)>=1){a=o[a+12>>2];d=0;while(1){c=a+(d<<3)|0;o[c+4>>2]=1;o[c>>2]=d;d=d+1|0;if((d|0)!=(b|0)){continue}break}}}function ym(a){o[a>>2]=1025;o[a+124>>2]=0;o[a+128>>2]=0;m[a+120|0]=0;o[a+116>>2]=0;o[a+132>>2]=0;o[a+136>>2]=0;o[a+140>>2]=0;o[a+144>>2]=0;o[a+148>>2]=0;o[a+152>>2]=0;o[a+308>>2]=0;o[a+312>>2]=0;m[a+304|0]=0;o[a+300>>2]=0;o[a+316>>2]=0;o[a+320>>2]=0;o[a+324>>2]=0;o[a+328>>2]=0;o[a+332>>2]=0;o[a+336>>2]=0;o[a+492>>2]=0;o[a+496>>2]=0;m[a+488|0]=0;o[a+484>>2]=0;o[a+500>>2]=0;o[a+504>>2]=0;o[a+508>>2]=0;o[a+512>>2]=0;o[a+516>>2]=0;o[a+520>>2]=0;m[a+672|0]=0;o[a+668>>2]=0;o[a+676>>2]=0;o[a+680>>2]=0;o[a+684>>2]=0;o[a+688>>2]=0;o[a+692>>2]=0;o[a+696>>2]=0;o[a+700>>2]=0;o[a+704>>2]=0;o[a+748>>2]=0;o[a+768>>2]=0;o[a+740>>2]=0;o[a+744>>2]=0}function fy(a){var b=0,c=0,d=v(0),e=0;a:{b:{e=(g(a),h(0));c=e&2147483647;if(c>>>0>=1065353216){if((c|0)!=1065353216){break b}return v(+a*1.5707963267948966+7.52316384526264e-37)}if(c>>>0<=1056964607){if(c+ -8388608>>>0<956301312){break a}d=v(a*a);return v(v(v(v(d*v(v(d*v(v(d*v(-.008656363002955914))+v(-.04274342209100723)))+v(.16666586697101593)))/v(v(d*v(-.7066296339035034))+v(1)))*a)+a)}a=v(v(v(1)-v(w(a)))*v(.5));b=C(+a);b=b+b*+v(v(a*v(v(a*v(v(a*v(-.008656363002955914))+v(-.04274342209100723)))+v(.16666586697101593)))/v(v(a*v(-.7066296339035034))+v(1)));a=v(1.5707963267948966-(b+b));return(e|0)<0?v(-a):a}a=v(v(0)/v(a-a))}return a}function _f(a,b){var c=v(0),d=v(0),e=v(0),f=0,g=0,h=0,i=v(0),j=v(0),k=v(0);o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;f=a;o[a+52>>2]=1;o[a>>2]=15624;h=a;c=s[b>>2];d=s[b+8>>2];e=s[b+4>>2];c=v(s[((c<e?(c<d^1)<<1:e<d?1:2)<<2)+b>>2]*v(.10000000149011612));if(!(c<s[a+44>>2])){g=15624}else{$c(a,c);g=o[a>>2]}c=v(l[o[g+48>>2]](h));d=v(l[o[o[a>>2]+48>>2]](f));e=v(l[o[o[a>>2]+48>>2]](f));i=s[b>>2];j=s[b+4>>2];k=s[b+8>>2];o[a+40>>2]=0;o[a+4>>2]=13;s[a+36>>2]=v(k*s[a+20>>2])-e;s[a+32>>2]=v(j*s[a+16>>2])-d;s[a+28>>2]=v(i*s[a+12>>2])-c}function Uj(a,b){var c=0,d=0,e=0,f=0,g=0;c=o[a+488>>2];a:{b:{if((c|0)<1){break b}e=o[a+496>>2];while(1){if(o[e+(d<<2)>>2]!=(b|0)){d=d+1|0;if((d|0)!=(c|0)){continue}break b}break}if((c|0)!=(d|0)){break a}}c:{if(o[a+492>>2]!=(c|0)){break c}e=c?c<<1:1;if((c|0)>=(e|0)){break c}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;c=o[a+488>>2]}if((c|0)>=1){d=0;while(1){g=d<<2;o[g+f>>2]=o[o[a+496>>2]+g>>2];d=d+1|0;if((d|0)!=(c|0)){continue}break}}d=o[a+496>>2];if(d){if(p[a+500|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}c=o[a+488>>2]}o[a+496>>2]=0}o[a+496>>2]=f;o[a+492>>2]=e;m[a+500|0]=1}o[o[a+496>>2]+(c<<2)>>2]=b;o[a+488>>2]=c+1}o[a+256>>2]=1}function Ln(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;m[d+23|0]=c;a=o[d+28>>2];s[a+4>>2]=s[o[d+24>>2]+40>>2];o[a+76>>2]=o[o[d+24>>2]>>2];a:{if(m[d+23|0]&1){b=o[d+24>>2];c=o[b+12>>2];o[a+44>>2]=o[b+8>>2];o[a+48>>2]=c;c=o[b+20>>2];o[a+52>>2]=o[b+16>>2];o[a+56>>2]=c;break a}b=M-16|0;o[b+12>>2]=o[a+76>>2];c=M-16|0;o[c+12>>2]=o[b+12>>2]+4;ea(d,o[c+12>>2],o[d+24>>2]+8|0);b=o[d+4>>2];o[a+44>>2]=o[d>>2];o[a+48>>2]=b;b=o[d+12>>2];o[a+52>>2]=o[d+8>>2];o[a+56>>2]=b}b=o[d+24>>2];c=o[b+28>>2];o[a+60>>2]=o[b+24>>2];o[a+64>>2]=c;c=o[b+36>>2];o[a+68>>2]=o[b+32>>2];o[a+72>>2]=c;M=d+32|0;return v(s[o[d+24>>2]+40>>2])}function oj(a,b,c,d){var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);f=ra(c);e=s[b+444>>2];c=qa(c);a:{if(!(v(w(f))>v(1.1920928955078125e-7))){g=v(c*c);i=v(f*f);break a}g=v(c*c);i=v(f*f);j=v(g/i);h=s[b+448>>2];e=v(C(v(v(j+v(1))/v(v(v(1)/v(h*h))+v(j/v(e*e))))))}o[a+12>>2]=0;e=v(e*v(.5));g=v(qa(e)/v(C(v(g+v(i+v(0))))));i=v(g*v(0));e=ra(e);h=v(e*v(0));c=v(g*v(-c));k=v(i*v(0));j=v(v(h+v(c*d))-k);f=v(f*g);h=v(v(h+k)-v(f*d));k=v(f*v(0));l=v(c*v(0));g=v(v(v(v(g*v(-0))*d)-k)-l);d=v(v(v(e*d)+k)-l);s[a+8>>2]=v(i*j)+v(v(v(e*h)-v(c*g))-v(f*d));s[a+4>>2]=v(c*d)+v(v(v(e*j)-v(f*g))-v(i*h));s[a>>2]=v(f*h)+v(v(v(e*d)-v(i*g))-v(c*j))}function bH(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0);d=M-96|0;M=d;o[d+44>>2]=0;o[d+48>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;o[d+52>>2]=1065353216;o[d+76>>2]=0;o[d+80>>2]=0;o[d+72>>2]=1065353216;o[d+84>>2]=0;o[d+88>>2]=0;o[d+92>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=1065353216;o[d+64>>2]=0;o[d+68>>2]=0;l[o[o[a>>2]+8>>2]](a,d+32|0,d+16|0,d);h=s[d>>2];i=s[d+16>>2];e=v(h-i);g=v(e*e);e=s[d+4>>2];j=s[d+20>>2];f=v(e-j);m=v(g+v(f*f));f=s[d+8>>2];g=s[d+24>>2];k=v(f-g);s[c>>2]=v(C(v(m+v(k*k))))*v(.5);o[b+12>>2]=0;s[b+8>>2]=v(f+g)*v(.5);s[b+4>>2]=v(e+j)*v(.5);s[b>>2]=v(h+i)*v(.5);M=d+96|0}function Rz(a,b){a=a|0;b=v(b);var c=0,d=0,e=v(0),f=v(0),g=v(0),h=0,i=0,j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=0;i=o[a+732>>2];if((i|0)>=1){p=o[a+740>>2];while(1){c=u(h,52)+p|0;d=o[c+8>>2];f=s[d+48>>2];g=s[d+40>>2];a=o[c+12>>2];j=s[c+36>>2];k=s[d+44>>2];l=s[c+40>>2];m=s[c+44>>2];n=v(v(s[c+32>>2]*v(-v(v(v(v(g-s[a+40>>2])*j)+v(v(k-s[a+44>>2])*l))+v(m*v(f-s[a+48>>2])))))*b);e=v(s[d+88>>2]*n);s[d+48>>2]=f+v(m*e);s[d+44>>2]=k+v(l*e);s[d+40>>2]=g+v(j*e);f=s[c+44>>2];g=s[c+40>>2];e=v(n*s[a+88>>2]);s[a+40>>2]=s[a+40>>2]-v(s[c+36>>2]*e);s[a+44>>2]=s[a+44>>2]-v(e*g);s[a+48>>2]=s[a+48>>2]-v(e*f);h=h+1|0;if((i|0)!=(h|0)){continue}break}}}function hD(a,b,c,d,e){var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0);f=M-32|0;M=f;ab(a,11,b,c);o[a>>2]=18812;b=o[d+52>>2];o[a+48>>2]=o[d+48>>2];o[a+52>>2]=b;b=o[d+60>>2];o[a+56>>2]=o[d+56>>2];o[a+60>>2]=b;b=o[e+52>>2];o[a+64>>2]=o[e+48>>2];o[a+68>>2]=b;b=o[e+60>>2];o[a+72>>2]=o[e+56>>2];o[a+76>>2]=b;ya(d,f+16|0);ya(e,f);g=s[f+12>>2];h=s[f+28>>2];i=s[f>>2];j=s[f+16>>2];k=s[f+4>>2];l=s[f+20>>2];m=s[f+8>>2];n=s[f+24>>2];s[a+92>>2]=v(v(v(g*h)+v(i*j))+v(k*l))+v(m*n);s[a+88>>2]=v(i*l)+v(v(v(g*n)-v(m*h))-v(k*j));s[a+84>>2]=v(m*j)+v(v(v(g*l)-v(k*h))-v(i*n));s[a+80>>2]=v(v(v(g*j)-v(i*h))-v(m*l))+v(k*n);M=f+32|0}function tk(a){a=a|0;var b=0;o[a>>2]=16376;b=o[a+156>>2];if(b){if(p[a+160|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+156>>2]=0}o[a+156>>2]=0;m[a+160|0]=1;o[a+148>>2]=0;o[a+152>>2]=0;b=o[a+136>>2];if(b){if(p[a+140|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+136>>2]=0}o[a+136>>2]=0;m[a+140|0]=1;o[a+128>>2]=0;o[a+132>>2]=0;b=o[a+116>>2];if(b){if(p[a+120|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+116>>2]=0}o[a+116>>2]=0;m[a+120|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;b=o[a+96>>2];if(b){if(p[a+100|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+96>>2]=0}o[a+96>>2]=0;m[a+100|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;wk(a);return a|0}function jB(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=v(0),i=v(0),j=v(0);c=M-48|0;M=c;if(o[a+136>>2]>=1){while(1){g=u(f,284);d=g+o[a+144>>2]|0;e=p[d+84|0];o[c+44>>2]=0;o[c+36>>2]=0;o[c+40>>2]=1065353216;o[c+32>>2]=e?0:1065353216;e=o[d+152>>2];o[c+24>>2]=o[d+148>>2];o[c+28>>2]=e;e=o[d+144>>2];o[c+16>>2]=o[d+140>>2];o[c+20>>2]=e;d=d+(o[a+120>>2]<<2)|0;h=s[d+92>>2];i=s[d+108>>2];j=s[d+124>>2];o[c+12>>2]=0;s[c+8>>2]=j+s[c+24>>2];s[c+4>>2]=i+s[c+20>>2];s[c>>2]=h+s[c+16>>2];l[o[o[b>>2]+8>>2]](b,c+16|0,c,c+32|0);l[o[o[b>>2]+8>>2]](b,c+16|0,(o[a+144>>2]+g|0)+16|0,c+32|0);f=f+1|0;if((f|0)<o[a+136>>2]){continue}break}}M=c+48|0}function NA(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;c=o[a+24>>2];e=o[b+4>>2];if((c|0)<(e|0)){if(o[a+28>>2]<(e|0)){if(e){o[7717]=o[7717]+1;g=l[o[6606]](e<<2,16)|0;d=o[a+24>>2]}else{d=c}if((d|0)>=1){while(1){h=f<<2;o[h+g>>2]=o[o[a+32>>2]+h>>2];f=f+1|0;if((d|0)!=(f|0)){continue}break}}d=o[a+32>>2];if(d){if(p[a+36|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}}o[a+32>>2]=0}o[a+32>>2]=g;o[a+28>>2]=e;m[a+36|0]=1}while(1){o[o[a+32>>2]+(c<<2)>>2]=0;c=c+1|0;if((e|0)!=(c|0)){continue}break}}o[a+24>>2]=e;if((e|0)>=1){a=o[a+32>>2];c=0;while(1){d=c<<2;o[d+a>>2]=o[d+o[b+12>>2]>>2];c=c+1|0;if((e|0)!=(c|0)){continue}break}}}function Ib(a){var b=0,c=v(0);b=M-96|0;M=b;m[a+88|0]=1;a:{if(m[29104]&1){break a}if(!da(29104)){break a}o[7253]=0;o[7254]=0;o[7252]=1065353216;o[7255]=0;o[7256]=0;o[7258]=0;o[7259]=0;o[7257]=1065353216;o[7260]=0;o[7261]=0;o[7265]=0;o[7266]=0;o[7264]=-1082130432;o[7262]=1065353216;o[7263]=0;o[7267]=0;o[7268]=0;o[7270]=0;o[7271]=0;o[7269]=-1082130432;o[7272]=0;o[7273]=0;o[7274]=-1082130432;o[7275]=0;ca(29104)}b=$(b,0,96);l[o[o[a>>2]+76>>2]](a,29008,b,6);c=s[a+44>>2];s[a+72>>2]=s[b>>2]+c;s[a+56>>2]=s[b+48>>2]-c;s[a+76>>2]=c+s[b+20>>2];s[a+60>>2]=s[b+68>>2]-c;s[a+80>>2]=c+s[b+40>>2];s[a- -64>>2]=s[b+88>>2]-c;M=b+96|0}function Mk(a){var b=0,c=v(0);b=M-96|0;M=b;m[a+84|0]=1;a:{if(m[29216]&1){break a}if(!da(29216)){break a}o[7281]=0;o[7282]=0;o[7280]=1065353216;o[7283]=0;o[7284]=0;o[7286]=0;o[7287]=0;o[7285]=1065353216;o[7288]=0;o[7289]=0;o[7293]=0;o[7294]=0;o[7292]=-1082130432;o[7290]=1065353216;o[7291]=0;o[7295]=0;o[7296]=0;o[7298]=0;o[7299]=0;o[7297]=-1082130432;o[7300]=0;o[7301]=0;o[7302]=-1082130432;o[7303]=0;ca(29216)}b=$(b,0,96);l[o[o[a>>2]+76>>2]](a,29120,b,6);c=s[a+44>>2];s[a+68>>2]=s[b>>2]+c;s[a+52>>2]=s[b+48>>2]-c;s[a+72>>2]=c+s[b+20>>2];s[a+56>>2]=s[b+68>>2]-c;s[a+76>>2]=c+s[b+40>>2];s[a+60>>2]=s[b+88>>2]-c;M=b+96|0}function Db(a,b,c,d){var e=0,f=0,g=0;o[7717]=o[7717]+1;e=l[o[6606]](36,16)|0;o[e+28>>2]=-1;o[e+32>>2]=0;o[e+20>>2]=-1;o[e+12>>2]=-1;o[e+16>>2]=-1;o[e+8>>2]=d;o[e+4>>2]=c;o[e>>2]=b;c=o[a+4>>2];o[e+24>>2]=c;a:{if(o[a+8>>2]!=(c|0)){break a}d=c?c<<1:1;if((c|0)>=(d|0)){break a}if(d){o[7717]=o[7717]+1;f=l[o[6606]](d<<2,16)|0;c=o[a+4>>2]}if((c|0)>=1){b=0;while(1){g=b<<2;o[g+f>>2]=o[o[a+12>>2]+g>>2];b=b+1|0;if((c|0)!=(b|0)){continue}break}}b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}c=o[a+4>>2]}o[a+12>>2]=0}o[a+12>>2]=f;m[a+16|0]=1;o[a+8>>2]=d}o[o[a+12>>2]+(c<<2)>>2]=e;o[a+4>>2]=c+1;return e}function lA(a,b,c,d,e){var f=0,g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),w=v(0),x=v(0),y=v(0),z=v(0);f=M-16|0;M=f;h=o[a+720>>2]+u(b,104)|0;i=s[h+16>>2];j=s[h+12>>2];k=s[h+8>>2];n=s[c+20>>2];p=s[c+36>>2];q=s[c+40>>2];r=s[c+24>>2];t=s[c+8>>2];l=s[c+60>>2];w=s[c+44>>2];x=s[c+28>>2];g=s[c+56>>2];m=s[c+52>>2];y=s[c+12>>2];z=s[c+4>>2];o[f+12>>2]=0;g=v(-g);s[f+8>>2]=v(v(v(x*g)-v(y*m))-v(w*l))+v(v(v(y*k)+v(x*j))+v(w*i));s[f+4>>2]=v(v(v(r*g)-v(t*m))-v(q*l))+v(v(v(t*k)+v(r*j))+v(q*i));s[f>>2]=v(v(v(n*g)-v(z*m))-v(p*l))+v(v(v(z*k)+v(n*j))+v(p*i));kA(a,b,c,f,d,e);M=f+16|0}function DI(a,b,c){a=a|0;b=v(b);c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=v(0);d=M-96|0;M=d;o[d+44>>2]=0;o[d+48>>2]=0;o[d+56>>2]=0;o[d+60>>2]=0;o[d+52>>2]=1065353216;o[d+76>>2]=0;o[d+80>>2]=0;o[d+72>>2]=1065353216;o[d+84>>2]=0;o[d+88>>2]=0;o[d+92>>2]=0;o[d+36>>2]=0;o[d+40>>2]=0;o[d+32>>2]=1065353216;o[d+64>>2]=0;o[d+68>>2]=0;l[o[o[a>>2]+8>>2]](a,d+32|0,d+16|0,d);e=s[d+24>>2];h=s[d+8>>2];b=v(b/v(12));f=v(v(s[d>>2]-s[d+16>>2])*v(.5));f=v(f+f);f=v(f*f);g=v(v(s[d+4>>2]-s[d+20>>2])*v(.5));g=v(g+g);g=v(g*g);s[c+8>>2]=b*v(f+g);e=v(v(h-e)*v(.5));e=v(e+e);e=v(e*e);s[c+4>>2]=b*v(f+e);s[c>>2]=b*v(g+e);M=d+96|0}function eA(a){var b=0,c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=0,i=0,j=0,k=v(0),l=v(0),m=v(0),n=0,p=v(0),q=v(0),r=v(0);if(o[a+712>>2]<1){return v(0)}j=o[a+752>>2];if((j|0)>=1){b=o[a+720>>2];e=s[b+8>>2];f=s[b+16>>2];g=s[b+12>>2];n=o[a+760>>2];a=0;while(1){p=c;b=u(a,44)+n|0;h=o[b+8>>2];i=o[b+12>>2];c=v(s[i+8>>2]-e);b=o[b+16>>2];k=v(s[b+12>>2]-g);d=v(s[i+12>>2]-g);l=v(s[b+8>>2]-e);q=v(v(s[h+16>>2]-f)*v(v(c*k)-v(d*l)));r=d;d=v(s[b+16>>2]-f);m=v(s[i+16>>2]-f);c=v(p+v(q+v(v(v(s[h+8>>2]-e)*v(v(r*d)-v(m*k)))+v(v(s[h+12>>2]-g)*v(v(m*l)-v(c*d))))));a=a+1|0;if((j|0)!=(a|0)){continue}break}}return v(c/v(6))}function Wf(a){var b=0,c=0,d=0,e=0,f=0;o[a>>2]=16848;m[a+28|0]=0;o[a+24>>2]=0;o[a+72>>2]=0;m[a+20|0]=1;o[a+16>>2]=0;m[a+48|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+44>>2]=0;m[a+68|0]=1;o[a+36>>2]=0;o[a+40>>2]=0;o[a- -64>>2]=0;o[a+56>>2]=0;o[a+60>>2]=0;o[7717]=o[7717]+1;e=l[o[6606]](32,16)|0;f=o[a+8>>2];if((f|0)>=1){while(1){c=d<<4;b=c+e|0;c=c+o[a+16>>2]|0;o[b>>2]=o[c>>2];o[b+4>>2]=o[c+4>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=o[c+12>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=e;m[a+20|0]=1;o[a+12>>2]=2;lk(a)}function ob(a,b){var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0);if(!(!a|!(o[a+180>>2]&1))){r=s[a+172>>2];c=s[a+44>>2];j=s[a+12>>2];k=s[a+28>>2];e=s[a+36>>2];l=s[a+20>>2];t=s[a+168>>2];d=s[a+40>>2];m=s[a+8>>2];n=s[a+24>>2];f=s[a+164>>2];p=s[a+4>>2];o[b+12>>2]=0;q=e;g=f;f=s[b>>2];h=s[b+4>>2];e=s[b+8>>2];i=v(g*v(v(v(p*f)+v(l*h))+v(q*e)));u=d;d=v(t*v(v(v(f*m)+v(h*n))+v(e*d)));g=c;c=v(r*v(v(v(f*j)+v(h*k))+v(e*c)));s[b+8>>2]=v(v(q*i)+v(u*d))+v(g*c);s[b+4>>2]=v(v(l*i)+v(n*d))+v(k*c);s[b>>2]=v(v(p*i)+v(m*d))+v(j*c)}}function nA(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;d=M-96|0;M=d;$(d,0,96);b=b?b:o[o[a+880>>2]>>2];c=o[a+772>>2];a:{if((c|0)!=o[a+776>>2]){break a}e=c?c<<1:1;if((c|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;g=l[o[6606]](u(e,104),16)|0;c=o[a+772>>2]}if((c|0)>=1){while(1){h=u(f,104);ja(h+g|0,o[a+780>>2]+h|0,104);f=f+1|0;if((f|0)!=(c|0)){continue}break}}c=o[a+780>>2];if(c){if(p[a+784|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+780>>2]=0}o[a+780>>2]=g;o[a+776>>2]=e;m[a+784|0]=1;c=o[a+772>>2]}c=o[a+780>>2]+u(c,104)|0;o[c+4>>2]=b;o[c>>2]=0;ja(c+8|0,d,96);o[a+772>>2]=o[a+772>>2]+1;M=d+96|0}function WC(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;var e=0;a:{b:{c:{if(d>>>0<=2){d:{switch(b+ -2|0){case 0:s[((d<<2)+a|0)+756>>2]=c;break b;case 2:s[((d<<2)+a|0)+772>>2]=c;break a;case 1:break d;default:break c}}s[((d<<2)+a|0)+740>>2]=c;o[a+1304>>2]=o[a+1304>>2]|1<<u(d,3);return}e=d+ -3|0;if(e>>>0>2){break c}e:{switch(b+ -2|0){case 0:s[((e<<6)+a|0)+900>>2]=c;break b;case 2:s[((e<<6)+a|0)+904>>2]=c;break a;case 1:break e;default:break c}}s[((e<<6)+a|0)+896>>2]=c;o[a+1304>>2]=o[a+1304>>2]|1<<u(d,3)}return}o[a+1304>>2]=o[a+1304>>2]|4<<u(d,3);return}o[a+1304>>2]=o[a+1304>>2]|2<<u(d,3)}function Rx(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;if(Fa(a,o[b+8>>2],f)){hf(b,c,d,e);return}h=p[b+53|0];g=o[a+12>>2];m[b+53|0]=0;i=p[b+52|0];m[b+52|0]=0;j=a+16|0;gf(j,b,c,d,e,f);k=p[b+53|0];h=h|k;l=p[b+52|0];i=i|l;a:{if((g|0)<2){break a}j=j+(g<<3)|0;g=a+24|0;while(1){if(p[b+54|0]){break a}b:{if(l){if(o[b+24>>2]==1){break a}if(p[a+8|0]&2){break b}break a}if(!k){break b}if(!(m[a+8|0]&1)){break a}}n[b+52>>1]=0;gf(g,b,c,d,e,f);k=p[b+53|0];h=k|h;l=p[b+52|0];i=l|i;g=g+8|0;if(g>>>0<j>>>0){continue}break}}m[b+53|0]=(h&255)!=0;m[b+52|0]=(i&255)!=0}function Ya(a,b,c){var d=0,e=v(0),f=v(0),g=v(0),h=v(0),i=0,j=0,k=0,m=0,n=0,p=v(0),q=v(0);d=M-48|0;M=d;e=s[b+8>>2];f=s[b>>2];g=s[b+4>>2];o[c+12>>2]=0;h=e;e=v(v(1)/v(C(v(v(v(f*f)+v(g*g))+v(e*e)))));s[c+8>>2]=h*e;s[c+4>>2]=g*e;s[c>>2]=f*e;b=o[a+120>>2];k=d+32|0;i=o[a+124>>2];j=o[a>>2]+(i>>1)|0;m=j;n=c;if(i&1){b=o[b+o[j>>2]>>2]}l[b](k,m,n);e=s[c>>2];f=s[c+4>>2];g=s[c+8>>2];o[d+12>>2]=0;s[d+8>>2]=-g;s[d+4>>2]=-f;s[d>>2]=-e;pL(d+16|0,a,d);e=s[d+16>>2];f=s[d+32>>2];g=s[d+20>>2];h=s[d+36>>2];p=s[d+24>>2];q=s[d+40>>2];o[c+28>>2]=0;s[c+24>>2]=q-p;s[c+20>>2]=h-g;s[c+16>>2]=f-e;M=d+48|0}function ol(a,b,c,d,e){a=a|0;b=b|0;c=v(c);d=d|0;e=e|0;var f=0,g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0),u=v(0);f=M-48|0;M=f;o[f+44>>2]=e;o[f+40>>2]=d;j=s[a- -64>>2];k=s[a+60>>2];m=s[a+80>>2];n=s[a+72>>2];p=s[a+76>>2];q=s[a+96>>2];r=s[a+88>>2];t=s[a+92>>2];u=s[a+56>>2];g=s[b+8>>2];h=s[b>>2];i=s[b+4>>2];b=o[a+48>>2];o[f+28>>2]=0;s[f+24>>2]=v(v(h*r)+v(i*t))+v(g*q);s[f+20>>2]=v(v(h*n)+v(i*p))+v(g*m);s[f+32>>2]=c;o[f+8>>2]=b;s[f+16>>2]=v(v(u*h)+v(k*i))+v(j*g);o[f+12>>2]=f+40;a=o[a+44>>2];c=v(l[o[o[a>>2]+12>>2]](a,f+8|0,1));M=f+48|0;return v(c)}function mA(a,b,c,d,e,f){var g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),n=v(0),p=v(0),q=v(0);nA(a,f);f=o[a+780>>2]+u(o[a+772>>2],104)|0;b=o[a+720>>2]+u(b,104)|0;o[f+ -96>>2]=b;c=o[a+720>>2]+u(c,104)|0;o[f+ -92>>2]=c;d=o[a+720>>2]+u(d,104)|0;o[f+ -88>>2]=d;e=o[a+720>>2]+u(e,104)|0;o[f+ -84>>2]=e;g=s[b+16>>2];j=v(s[e+16>>2]-g);h=s[b+8>>2];k=v(s[d+8>>2]-h);i=s[b+12>>2];l=v(s[e+12>>2]-i);n=v(s[d+12>>2]-i);p=v(s[e+8>>2]-h);q=v(v(s[c+16>>2]-g)*v(v(k*l)-v(n*p)));g=v(s[d+16>>2]-g);s[f+ -80>>2]=q+v(v(v(s[c+8>>2]-h)*v(v(n*j)-v(g*l)))+v(v(s[c+12>>2]-i)*v(v(g*p)-v(k*j))));m[a+924|0]=1}function uH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=0;a:{f=s[b>>2];g=s[b+16>>2];i=f<g?f:g;h=s[b+32>>2];if((i<h?i:h)>s[a+24>>2]){break a}e=(f>g^1)<<4;if(s[(s[b+e>>2]>h?e:32)+b>>2]<s[a+8>>2]){break a}f=s[b+8>>2];e=b+24|0;g=s[e>>2];i=f<g?f:g;j=b+40|0;h=s[j>>2];if((i<h?i:h)>s[a+32>>2]){break a}e=f>g?b+8|0:e;if(s[(s[e>>2]>h?e:j)>>2]<s[a+16>>2]){break a}f=s[b+4>>2];e=b+20|0;g=s[e>>2];i=f<g?f:g;j=b+36|0;h=s[j>>2];if((i<h?i:h)>s[a+28>>2]){break a}e=f>g?b+4|0:e;if(s[(s[e>>2]>h?e:j)>>2]<s[a+12>>2]){break a}a=o[a+4>>2];l[o[o[a>>2]+8>>2]](a,b,c,d)}}function ns(a,b){var c=0,d=0,e=0,f=0,g=0;d=M-16|0;M=d;o[d+12>>2]=b;b=o[d+12>>2];o[d+8>>2]=o[b+116>>2]+4;e=M-16|0;o[e+12>>2]=o[d+8>>2];c=M-16|0;o[c+12>>2]=o[e+12>>2];o[c+8>>2]=0;e=M-16|0;o[e+12>>2]=o[c+12>>2]+(o[c+8>>2]<<4);e=o[e+12>>2]+(o[b+128>>2]<<2)|0;f=M-16|0;o[f+12>>2]=o[d+8>>2];c=M-16|0;o[c+12>>2]=o[f+12>>2];o[c+8>>2]=1;f=M-16|0;o[f+12>>2]=o[c+12>>2]+(o[c+8>>2]<<4);f=o[f+12>>2]+(o[b+128>>2]<<2)|0;g=M-16|0;o[g+12>>2]=o[d+8>>2];c=M-16|0;o[c+12>>2]=o[g+12>>2];o[c+8>>2]=2;g=M-16|0;o[g+12>>2]=o[c+12>>2]+(o[c+8>>2]<<4);Y(a,e,f,o[g+12>>2]+(o[b+128>>2]<<2)|0);M=d+16|0}function bA(a,b){var c=0,d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);c=M+ -64|0;M=c;o[c+56>>2]=0;o[c+60>>2]=0;o[c+48>>2]=0;o[c+52>>2]=0;f=s[b+12>>2];h=s[b+8>>2];d=s[b>>2];e=s[b+4>>2];o[c+44>>2]=0;o[c+28>>2]=0;j=v(v(2)/v(v(v(v(d*d)+v(e*e))+v(h*h))+v(f*f)));k=v(h*j);g=v(e*k);i=v(d*j);l=v(f*i);s[c+36>>2]=g+l;s[c+24>>2]=g-l;g=v(d*i);i=e;e=v(e*j);j=v(i*e);s[c+40>>2]=v(1)-v(g+j);h=v(h*k);s[c+20>>2]=v(1)-v(g+h);o[c+12>>2]=0;g=v(d*k);i=v(f*e);s[c+32>>2]=g-i;d=v(d*e);f=v(f*k);s[c+16>>2]=d+f;s[c+8>>2]=g+i;s[c+4>>2]=d-f;s[c>>2]=v(1)-v(j+h);Cf(a,c);M=c- -64|0}function fz(a){var b=0;b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;b=o[a+52>>2];if(b){if(p[a+56|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+52>>2]=0}o[a+52>>2]=0;m[a+56|0]=1;o[a+44>>2]=0;o[a+48>>2]=0;b=o[a+72>>2];if(b){if(p[a+76|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+72>>2]=0}o[a+72>>2]=0;m[a+76|0]=1;a=a- -64|0;o[a>>2]=0;o[a+4>>2]=0}function Dd(a){var b=0;b=o[a+72>>2];if(b){if(p[a+76|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+72>>2]=0}o[a+72>>2]=0;m[a+76|0]=1;b=a- -64|0;o[b>>2]=0;o[b+4>>2]=0;b=o[a+52>>2];if(b){if(p[a+56|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+52>>2]=0}o[a+52>>2]=0;m[a+56|0]=1;o[a+44>>2]=0;o[a+48>>2]=0;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0}function rn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;m[d+23|0]=c;a=o[d+28>>2];s[a+4>>2]=s[o[d+24>>2]+24>>2];o[a+8>>2]=o[o[d+24>>2]>>2];a:{if(m[d+23|0]&1){b=o[d+24>>2];c=o[b+12>>2];o[a+52>>2]=o[b+8>>2];o[a+56>>2]=c;c=o[b+20>>2];o[a+60>>2]=o[b+16>>2];o[a+64>>2]=c;break a}b=M-16|0;o[b+12>>2]=o[a+8>>2];c=M-16|0;o[c+12>>2]=o[b+12>>2]+4;ea(d,o[c+12>>2],o[d+24>>2]+8|0);b=o[d+4>>2];o[a+52>>2]=o[d>>2];o[a+56>>2]=b;b=o[d+12>>2];o[a+60>>2]=o[d+8>>2];o[a+64>>2]=b}bh(a+68|0,a+20|0,a+36|0,s[o[d+24>>2]+24>>2]);M=d+32|0;return v(s[o[d+24>>2]+24>>2])}function Zh(a,b,c,d,e){var f=0;f=M-32|0;M=f;o[f+28>>2]=a;s[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=o[f+28>>2];s[a>>2]=s[f+24>>2];o[a+4>>2]=o[f+20>>2];Hc(a+8|0);o[a+72>>2]=o[f+16>>2];c=o[f+12>>2];d=o[c+4>>2];o[a+76>>2]=o[c>>2];o[a+80>>2]=d;d=o[c+12>>2];o[a+84>>2]=o[c+8>>2];o[a+88>>2]=d;s[a+92>>2]=0;s[a+96>>2]=0;s[a+100>>2]=.5;s[a+104>>2]=0;s[a+108>>2]=0;s[a+112>>2]=.800000011920929;s[a+116>>2]=1;m[a+120|0]=0;s[a+124>>2]=.004999999888241291;s[a+128>>2]=.009999999776482582;s[a+132>>2]=.009999999776482582;s[a+136>>2]=.009999999776482582;bf(a+8|0);M=f+32|0}function SG(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0),h=0,i=v(0),j=v(0),k=v(0),l=0,m=v(0),n=v(0);h=o[b+96>>2];if((h|0)>=1){i=s[b+12>>2];f=v(s[c>>2]*i);j=s[b+20>>2];g=v(s[c+8>>2]*j);k=s[b+16>>2];n=v(s[c+4>>2]*k);l=o[b+104>>2];b=0;c=-1;e=v(-3.4028234663852886e+38);while(1){d=(b<<4)+l|0;m=v(v(v(f*s[d>>2])+v(n*s[d+4>>2]))+v(g*s[d+8>>2]));d=m>e;e=d?m:e;c=d?b:c;b=b+1|0;if((h|0)!=(b|0)){continue}break}b=(c<<4)+l|0;e=s[b>>2];f=s[b+4>>2];g=s[b+8>>2];o[a+12>>2]=0;s[a+8>>2]=j*g;s[a+4>>2]=k*f;s[a>>2]=i*e;return}o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0}function bJ(a){var b=0,c=0,d=0,e=0,f=0,g=0;o[a>>2]=10504;m[a+24|0]=0;m[a+20|0]=1;o[a+16>>2]=0;m[a+44|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+40>>2]=0;m[a- -64|0]=1;o[a+32>>2]=0;o[a+36>>2]=0;o[a+60>>2]=0;o[a+52>>2]=0;o[a+56>>2]=0;o[7717]=o[7717]+1;e=l[o[6606]](24,16)|0;f=o[a+8>>2];if((f|0)>=1){while(1){c=u(d,12);b=c+o[a+16>>2]|0;g=o[b+4>>2];c=c+e|0;o[c>>2]=o[b>>2];o[c+4>>2]=g;o[c+8>>2]=o[b+8>>2];d=d+1|0;if((f|0)!=(d|0)){continue}break}}b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=e;m[a+20|0]=1;o[a+12>>2]=2;gg(a)}function Xf(a){a=a|0;var b=0;o[a>>2]=16640;if(o[a+108>>2]){b=o[a+112>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+112>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+108>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+108>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+88>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+84>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+80>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+60>>2];if(b){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}if(p[a+100|0]){b=o[a+92>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+92>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}return a|0}function Qm(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){vc(o[a+12>>2]+u(o[d+12>>2],36)|0);o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){Ae(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){Ng(o[a+12>>2]+u(o[d+8>>2],36)|0,o[d+20>>2]);o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function Bi(a,b,c,d){var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=0,k=0,l=v(0),m=v(0),n=v(0),p=v(0),q=v(0),r=v(0),t=v(0);j=(o[b+4>>2]<<4)+a|0;h=s[j>>2];k=(o[b>>2]<<4)+a|0;m=s[k>>2];n=v(h-m);a=(o[b+8>>2]<<4)+a|0;e=s[j+4>>2];f=v(s[a+4>>2]-e);p=s[k+4>>2];e=v(e-p);q=v(s[a>>2]-h);l=v(v(n*f)-v(e*q));i=e;e=s[j+8>>2];g=v(s[a+8>>2]-e);h=s[k+8>>2];e=v(e-h);f=v(v(i*g)-v(e*f));g=v(v(e*q)-v(n*g));e=v(C(v(v(l*l)+v(v(f*f)+v(g*g)))));if(e!=v(0)){e=v(v(1)/e);r=v(l*e);t=v(g*e);i=v(f*e)}else{i=v(1)}return v(v(v(i*v(s[c>>2]-m))+v(t*v(s[c+4>>2]-p)))+v(r*v(s[c+8>>2]-h)))>d}function qK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0),p=v(0);h=s[a+88>>2];i=s[a+72>>2];j=s[a+76>>2];l=s[a+96>>2];b=a- -64|0;g=s[b>>2];m=s[a+80>>2];k=s[a+92>>2];e=s[a+60>>2];f=s[a+56>>2];o[c+12>>2]=0;i=v(i-f);k=v(k-e);j=v(j-e);f=v(h-f);e=v(v(i*k)-v(j*f));n=e;p=v(e*e);e=v(l-g);h=v(m-g);g=v(v(j*e)-v(h*k));e=v(v(h*f)-v(i*e));f=v(v(1)/v(C(v(p+v(v(g*g)+v(e*e))))));s[c+8>>2]=n*f;s[c+4>>2]=e*f;s[c>>2]=g*f;c=o[b+4>>2];o[d+8>>2]=o[b>>2];o[d+12>>2]=c;b=o[a+60>>2];o[d>>2]=o[a+56>>2];o[d+4>>2]=b}function _b(a,b,c,d,e,f,g,h,i,j,k){var n=0,q=0,r=0,s=0,t=0,v=0;r=o[a+68>>2];n=r;a:{if((r|0)!=o[a+72>>2]){break a}n=r;s=r?r<<1:1;if((r|0)>=(s|0)){break a}if(s){o[7717]=o[7717]+1;t=l[o[6606]](u(s,152),16)|0;n=o[a+68>>2]}else{n=r}q=n;if((q|0)>=1){n=0;while(1){v=u(n,152);ja(v+t|0,o[a+76>>2]+v|0,152);n=n+1|0;if((q|0)!=(n|0)){continue}break}}q=o[a+76>>2];if(q){if(p[a+80|0]){if(q){o[7718]=o[7718]+1;l[o[6607]](q)}}o[a+76>>2]=0}o[a+76>>2]=t;o[a+72>>2]=s;m[a+80|0]=1;n=o[a+68>>2]}o[a+68>>2]=n+1;q=o[a+76>>2]+u(r,152)|0;o[q+140>>2]=e;LB(a,q,b,c,d,f,g,h,i,j,k)}function Tx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(Fa(a,o[b+8>>2],e)){if(!(o[b+28>>2]==1|o[b+4>>2]!=(c|0))){o[b+28>>2]=d}return}a:{if(Fa(a,o[b>>2],e)){if(!(o[b+20>>2]!=(c|0)?o[b+16>>2]!=(c|0):0)){if((d|0)!=1){break a}o[b+32>>2]=1;return}o[b+32>>2]=d;b:{if(o[b+44>>2]==4){break b}n[b+52>>1]=0;a=o[a+8>>2];l[o[o[a>>2]+20>>2]](a,b,c,c,1,e);if(p[b+53|0]){o[b+44>>2]=3;if(!p[b+52|0]){break b}break a}o[b+44>>2]=4}o[b+20>>2]=c;o[b+40>>2]=o[b+40>>2]+1;if(o[b+36>>2]!=1|o[b+24>>2]!=2){break a}m[b+54|0]=1;return}a=o[a+8>>2];l[o[o[a>>2]+24>>2]](a,b,c,d,e)}}function cb(a){var b=0,c=0;b=o[a>>2];if(b){Sd(a,b)}b=o[a+4>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}o[a+4>>2]=0;o[a+8>>2]=-1;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;o[a+16>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;b=0;c=o[a+52>>2];if(c){if(p[a+56|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}b=o[a+32>>2]}o[a+52>>2]=0}o[a+52>>2]=0;m[a+56|0]=1;o[a+44>>2]=0;o[a+48>>2]=0;if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0}function Va(a,b,c,d,e){var f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0);if(!((b|0)==(d|0)|(b|0)==(c|0)|(c|0)==(d|0))){oA(a,e);e=o[a+760>>2]+u(o[a+752>>2],44)|0;b=o[a+720>>2]+u(b,104)|0;o[e+ -36>>2]=b;c=o[a+720>>2]+u(c,104)|0;o[e+ -32>>2]=c;d=o[a+720>>2]+u(d,104)|0;o[e+ -28>>2]=d;g=s[b+8>>2];j=v(s[c+8>>2]-g);f=s[b+12>>2];h=v(s[d+12>>2]-f);f=v(s[c+12>>2]-f);g=v(s[d+8>>2]-g);i=v(v(j*h)-v(f*g));k=v(i*i);l=f;f=s[b+16>>2];i=v(s[d+16>>2]-f);f=v(s[c+16>>2]-f);h=v(v(l*i)-v(f*h));g=v(v(f*g)-v(j*i));s[e+ -8>>2]=C(v(k+v(v(h*h)+v(g*g))));m[a+924|0]=1}}function Fl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=(b|0)!=8;if(!(d|(c|0)!=8)){return o[a+60>>2]}if(!((c|0)!=1|d)){return o[a+76>>2]}if(!((b|0)!=1|(c|0)!=8)){return o[a+80>>2]}if(!(b|c)){return o[a+72>>2]}if(!((c|0)!=28|(b|0)>19)){return o[a+88>>2]}if(!((b|0)!=28|(c|0)>19)){return o[a+84>>2]}a:{if((b|0)<=19){if((c|0)<=19){return o[a+32>>2]}if(c+ -21>>>0>8){break a}return o[a+36>>2]}if(!((c|0)>19|b+ -21>>>0>8)){return o[a+40>>2]}if((b|0)!=31){break a}if((c|0)==31){return o[a+48>>2]}return o[a+44>>2]}if((c|0)==31){return o[a+52>>2]}return o[a+56>>2]}function HF(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=0,f=v(0),g=v(0),h=0,i=v(0),j=v(0);e=M-16|0;M=e;l[o[o[b>>2]+68>>2]](e,b,c);h=o[e+12>>2];o[a+8>>2]=o[e+8>>2];o[a+12>>2]=h;h=o[e+4>>2];o[a>>2]=o[e>>2];o[a+4>>2]=h;if(v(l[o[o[b>>2]+48>>2]](b))!=v(0)){f=s[c+4>>2];d=s[c>>2];g=s[c+8>>2];i=v(l[o[o[b>>2]+48>>2]](b));b=v(v(v(d*d)+v(f*f))+v(g*g))<v(1.4210854715202004e-14);d=b?v(-1):d;j=d;g=b?v(-1):g;f=b?v(-1):f;d=v(v(1)/v(C(v(v(g*g)+v(v(d*d)+v(f*f))))));s[a>>2]=s[a>>2]+v(i*v(j*d));s[a+4>>2]=s[a+4>>2]+v(i*v(f*d));s[a+8>>2]=s[a+8>>2]+v(i*v(g*d))}M=e+16|0}function oE(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;if(o[a+56>>2]>=1){e=o[a+96>>2];while(1){f=0;a:{if(s[c>>2]>s[e+16>>2]){break a}f=0;if(s[d>>2]<s[e>>2]){break a}f=1}g=0;g=s[d+8>>2]<s[e+8>>2]|s[c+8>>2]>s[e+24>>2]?g:f;b:{c:{d:{if(!(s[d+4>>2]<s[e+4>>2]^1?!(s[c+4>>2]>s[e+20>>2]):0)){f=o[e+32>>2]==-1;g=0;break d}f=o[e+32>>2]==-1;if((g&f)!=1){break d}l[o[o[b>>2]+8>>2]](b,o[e+36>>2],o[e+40>>2]);break c}if(f|g){break c}f=o[e+32>>2];h=f+h|0;e=(f<<6)+e|0;break b}h=h+1|0;e=e- -64|0}i=i+1|0;if((h|0)<o[a+56>>2]){continue}break}}if(o[7309]<(i|0)){o[7309]=i}}function Yx(a){var b=0,c=0,d=0,e=0;b=M+ -64|0;M=b;c=o[a>>2];d=o[c+ -4>>2];e=o[c+ -8>>2];o[b+20>>2]=0;o[b+16>>2]=26120;o[b+12>>2]=a;o[b+8>>2]=26168;c=0;$(b+24|0,0,39);a=a+e|0;a:{if(Fa(d,26168,0)){o[b+56>>2]=1;l[o[o[d>>2]+20>>2]](d,b+8|0,a,a,1,0);c=o[b+32>>2]==1?a:0;break a}l[o[o[d>>2]+24>>2]](d,b+8|0,a,1,0);b:{switch(o[b+44>>2]){case 0:c=o[b+48>>2]==1?o[b+36>>2]==1?o[b+40>>2]==1?o[b+28>>2]:0:0:0;break a;case 1:break b;default:break a}}if(o[b+32>>2]!=1){if(o[b+48>>2]|o[b+36>>2]!=1|o[b+40>>2]!=1){break a}}c=o[b+24>>2]}M=b- -64|0;return c}function Oz(a){var b=0,c=0,d=0,e=0,f=0,g=0;if(o[a+852>>2]>=1){while(1){c=d<<2;b=o[c+o[a+860>>2]>>2];l[o[o[b>>2]+16>>2]](b,s[a+452>>2]);b=o[c+o[a+860>>2]>>2];a:{if(!p[b+152|0]){b=o[a+852>>2];break a}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}d=d+ -1|0;b=o[a+852>>2];if((b|0)<1){break a}e=o[a+860>>2];f=o[c+e>>2];c=0;while(1){g=(c<<2)+e|0;if(o[g>>2]!=(f|0)){c=c+1|0;if((c|0)!=(b|0)){continue}break a}break}if((c|0)>=(b|0)){break a}b=b+ -1|0;c=b<<2;o[g>>2]=o[c+e>>2];o[c+o[a+860>>2]>>2]=f;o[a+852>>2]=b}d=d+1|0;if((d|0)<(b|0)){continue}break}}}function Id(a,b,c,d,e,f){var g=0,h=0,i=0,j=0,k=0,n=0;i=o[a+88>>2];g=i;a:{if((i|0)!=o[a+92>>2]){break a}g=i;j=i?i<<1:1;if((i|0)>=(j|0)){break a}if(j){o[7717]=o[7717]+1;k=l[o[6606]](u(j,152),16)|0;g=o[a+88>>2]}else{g=i}h=g;if((h|0)>=1){g=0;while(1){n=u(g,152);ja(n+k|0,o[a+96>>2]+n|0,152);g=g+1|0;if((h|0)!=(g|0)){continue}break}}h=o[a+96>>2];if(h){if(p[a+100|0]){if(h){o[7718]=o[7718]+1;l[o[6607]](h)}}o[a+96>>2]=0}o[a+96>>2]=k;o[a+92>>2]=j;m[a+100|0]=1;g=o[a+88>>2]}o[a+88>>2]=g+1;h=o[a+96>>2]+u(i,152)|0;o[h+140>>2]=e;KB(a,h,b,c,d,f)}function fg(a,b,c){var d=v(0),e=v(0),f=v(0),g=0,h=0,i=0,j=v(0),k=v(0);e=v(s[b+60>>2]*v(.5));g=o[b+64>>2];i=o[b+68>>2];h=i<<2;d=s[c>>2];f=v(d*d);d=s[c+4>>2];f=v(f+v(d*d));d=s[c+8>>2];a:{b:{if(!!(s[h+c>>2]>v(s[b+52>>2]*v(C(v(f+v(d*d))))))){o[(g<<2)+a>>2]=0;s[a+h>>2]=e;c=o[b+72>>2];break b}d=s[(g<<2)+c>>2];h=c;c=o[b+72>>2];j=s[h+(c<<2)>>2];k=v(C(v(v(d*d)+v(j*j))));if(!!(k>v(1.1920928955078125e-7))){f=d;d=v(s[b+56>>2]/k);s[(g<<2)+a>>2]=f*d;s[(i<<2)+a>>2]=-e;e=v(j*d);break a}o[(g<<2)+a>>2]=0;s[(i<<2)+a>>2]=-e}e=v(0)}s[(c<<2)+a>>2]=e}function YC(a,b){a=a|0;b=b|0;var c=0,d=0;a:{if(p[a+1308|0]){o[b>>2]=0;o[b+4>>2]=0;break a}Uc(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0);o[b>>2]=0;o[b+4>>2]=6;b:{if(!(o[a+856>>2]|p[a+788|0])){c=6;d=0;break b}o[b>>2]=1;o[b+4>>2]=5;c=5;d=1}if(!(p[a+789|0]?0:!o[a+860>>2])){c=c+ -1|0;o[b+4>>2]=c;d=d+1|0;o[b>>2]=d}if(!(p[a+790|0]?0:!o[a+864>>2])){o[b+4>>2]=c+ -1;o[b>>2]=d+1}if($b(a,0)){o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}if($b(a,1)){o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}if(!$b(a,2)){break a}o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}}function AD(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=o[a+212>>2];a:{if((d|0)!=o[a+216>>2]){break a}f=d?d<<1:1;if((d|0)>=(f|0)){break a}if(f){o[7717]=o[7717]+1;g=l[o[6606]](f<<2,16)|0;d=o[a+212>>2]}if((d|0)>=1){while(1){h=e<<2;o[h+g>>2]=o[o[a+220>>2]+h>>2];e=e+1|0;if((e|0)!=(d|0)){continue}break}}e=o[a+220>>2];if(e){if(p[a+224|0]){if(e){o[7718]=o[7718]+1;l[o[6607]](e)}d=o[a+212>>2]}o[a+220>>2]=0}o[a+220>>2]=g;o[a+216>>2]=f;m[a+224|0]=1}o[o[a+220>>2]+(d<<2)>>2]=b;o[a+212>>2]=d+1;if(c){Uj(o[b+28>>2],b);Uj(o[b+32>>2],b)}}function ch(a,b){var c=0,d=0,e=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;b=M-16|0;a=o[d+12>>2];o[b+12>>2]=a;o[d+4>>2]=o[o[b+12>>2]+4>>2];b=o[d+4>>2];c=M-16|0;o[c+12>>2]=a;if(o[o[c+12>>2]+8>>2]==(b|0)){c=M-16|0;o[c+12>>2]=a;e=o[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=e;b=a;if(o[c+8>>2]){c=o[c+8>>2]<<1}else{c=1}$g(b,c)}c=o[a+12>>2]+(o[a+4>>2]<<4)|0;b=M-16|0;o[b+12>>2]=16;o[b+8>>2]=c;c=o[d+8>>2];e=o[c+4>>2];b=o[b+8>>2];o[b>>2]=o[c>>2];o[b+4>>2]=e;e=o[c+12>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=e;o[a+4>>2]=o[a+4>>2]+1;M=d+16|0}function Tg(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){ah(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){o[o[a+12>>2]+(o[d+8>>2]<<2)>>2]=o[o[d+20>>2]>>2];o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function Rm(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){_g(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){s[o[a+12>>2]+(o[d+8>>2]<<2)>>2]=s[o[d+20>>2]>>2];o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function Jm(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){Im(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){ja(o[a+12>>2]+u(o[d+8>>2],104)|0,o[d+20>>2],104);o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function zm(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;b=M-16|0;a=o[d+28>>2];o[b+12>>2]=a;o[d+16>>2]=o[o[b+12>>2]+4>>2];a:{if(o[d+24>>2]<o[d+16>>2]){o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+16>>2]){o[d+12>>2]=o[d+12>>2]+1;continue}break}break a}b=o[d+24>>2];c=M-16|0;o[c+12>>2]=a;if((b|0)>o[o[c+12>>2]+4>>2]){Ch(a,o[d+24>>2])}o[d+8>>2]=o[d+16>>2];while(1){if(o[d+8>>2]<o[d+24>>2]){Oe(o[a+12>>2]+u(o[d+8>>2],96)|0,o[d+20>>2]);o[d+8>>2]=o[d+8>>2]+1;continue}break}}o[a+4>>2]=o[d+24>>2];M=d+32|0}function jF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=o[a+108>>2];if(!e){g=q[a+56>>1];if(g){e=1;h=1;while(1){f=o[a+68>>2]+(e<<2)|0;a:{if(!(m[f|0]&1)){break a}i=0;f=o[a+60>>2]+(q[f+2>>1]<<6)|0;e=0;b:{if(s[b>>2]>s[f+32>>2]){break b}e=0;if(s[c>>2]<s[f+16>>2]){break b}e=1}i=s[c+8>>2]<s[f+24>>2]|s[b+8>>2]>s[f+40>>2]?i:e;if(s[c+4>>2]<s[f+20>>2]|s[b+4>>2]>s[f+36>>2]|i^1){break a}l[o[o[d>>2]+8>>2]](d,f)|0;g=q[a+56>>1]}h=h+1|0;e=h&65535;if((g<<1|1)>>>0>e>>>0){continue}break}}return}l[o[o[e>>2]+28>>2]](e,b,c,d)}function wK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=0,h=0,i=v(0),j=v(0),k=0,l=v(0),m=v(0),n=0;if((d|0)>=1){n=a+56|0;while(1){e=h<<4;g=e+c|0;e=b+e|0;f=s[e>>2];i=s[e+4>>2];j=s[e+8>>2];l=v(v(v(f*s[a+72>>2])+v(i*s[a+76>>2]))+v(j*s[a+80>>2]));m=v(v(v(f*s[a+88>>2])+v(i*s[a+92>>2]))+v(j*s[a+96>>2]));f=v(v(v(f*s[a+56>>2])+v(i*s[a+60>>2]))+v(j*s[a+64>>2]));e=((f<l?l<m?2:1:(f<m)<<1)<<4)+n|0;k=o[e+4>>2];o[g>>2]=o[e>>2];o[g+4>>2]=k;k=o[e+12>>2];o[g+8>>2]=o[e+8>>2];o[g+12>>2]=k;h=h+1|0;if((h|0)!=(d|0)){continue}break}}}function nC(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);d=v(3.4028234663852886e+38);a:{b:{switch(b+ -2|0){case 0:if((c|0)<=0){return v(s[a+232>>2])}if((c|0)<=2){return v(s[a+264>>2])}if((c|0)==3){return v(s[a+248>>2])}if((c|0)>5){break a}return v(s[a+280>>2]);case 1:if((c|0)<=0){return v(s[a+212>>2])}if((c|0)!=3){break a}return v(s[a+228>>2]);case 2:break b;default:break a}}if((c|0)<=0){return v(s[a+244>>2])}if((c|0)<=2){return v(s[a+276>>2])}if((c|0)==3){return v(s[a+260>>2])}if((c|0)>5){break a}d=s[a+292>>2]}return v(d)}function ij(a){o[a>>2]=19780;m[a+20|0]=1;o[a+16>>2]=0;m[a+40|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+36>>2]=0;m[a+60|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;o[a+56>>2]=0;m[a+80|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;o[a+76>>2]=0;m[a+100|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;o[a+96>>2]=0;m[a+120|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;o[a+116>>2]=0;m[a+140|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;o[a+136>>2]=0;o[a+128>>2]=0;o[a+132>>2]=0;m[a+160|0]=1;o[a+156>>2]=0;o[a+148>>2]=0;o[a+152>>2]=0;m[a+180|0]=1;o[a+192>>2]=0;o[a+176>>2]=0;o[a+168>>2]=0;o[a+172>>2]=0}function Gg(a,b,c){var d=0,e=0;d=M-32|0;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;e=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){a=o[e+12>>2]+u(o[d+12>>2],44)|0;c=o[a+4>>2];b=o[d+16>>2]+u(o[d+12>>2],44)|0;o[b>>2]=o[a>>2];o[b+4>>2]=c;o[b+40>>2]=o[a+40>>2];c=o[a+36>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=c;c=o[a+28>>2];o[b+24>>2]=o[a+24>>2];o[b+28>>2]=c;c=o[a+20>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=c;c=o[a+12>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=c;o[d+12>>2]=o[d+12>>2]+1;continue}break}}function vK(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0),n=v(0);g=s[a+88>>2];h=s[a+72>>2];i=s[a+76>>2];k=s[a+96>>2];e=s[a- -64>>2];l=s[a+80>>2];j=s[a+92>>2];d=s[a+60>>2];f=s[a+56>>2];o[c+12>>2]=0;h=v(h-f);j=v(j-d);i=v(i-d);f=v(g-f);d=v(v(h*j)-v(i*f));m=d;n=v(d*d);d=v(k-e);g=v(l-e);e=v(v(i*d)-v(g*j));d=v(v(g*f)-v(h*d));f=v(v(1)/v(C(v(n+v(v(e*e)+v(d*d))))));g=v(m*f);s[c+8>>2]=g;d=v(d*f);s[c+4>>2]=d;e=v(e*f);s[c>>2]=e;if(b){s[c+8>>2]=-g;s[c+4>>2]=-d;s[c>>2]=-e}}function kJ(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=o[a+20>>2];if(!(!c|!p[a+16|0])){d=o[b+4>>2];a:{if((d|0)!=o[b+8>>2]){break a}e=d?d<<1:1;if((d|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;d=o[b+4>>2]}if((d|0)>=1){c=0;while(1){g=c<<2;o[g+f>>2]=o[o[b+12>>2]+g>>2];c=c+1|0;if((c|0)!=(d|0)){continue}break}}c=o[b+12>>2];if(c){if(p[b+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}d=o[b+4>>2]}o[b+12>>2]=0}o[b+12>>2]=f;m[b+16|0]=1;o[b+8>>2]=e;c=o[a+20>>2]}o[o[b+12>>2]+(d<<2)>>2]=c;o[b+4>>2]=d+1}}function EK(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=v(0);a:{h=p[a+8|0];g=h?b:c;f=o[g+4>>2];if(o[f+4>>2]+ -21>>>0>8){break a}b=h?c:b;if(o[o[b+4>>2]+4>>2]>19){break a}i=v(l[o[o[f>>2]+48>>2]](f));o[e+4>>2]=o[a+76>>2];c=a+12|0;FK(c,i,d,b,g,e);b=o[b+8>>2];d=o[a+76>>2];o[d+744>>2]=o[g+8>>2];o[d+740>>2]=b;l[o[o[f>>2]+64>>2]](f,c,a+24|0,a+40|0);b=o[e+4>>2];if(o[b+748>>2]){d=o[b+740>>2];f=o[o[e+8>>2]+8>>2];c=(d|0)==(f|0);g=b;b=o[o[e+12>>2]+8>>2];sa(g,(c?d:b)+4|0,(c?b:f)+4|0)}o[a+16>>2]=0;o[a+20>>2]=0}}function cd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=o[a+12>>2];if(!(!c|!p[a+8|0])){d=o[b+4>>2];a:{if((d|0)!=o[b+8>>2]){break a}e=d?d<<1:1;if((d|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;d=o[b+4>>2]}if((d|0)>=1){c=0;while(1){g=c<<2;o[g+f>>2]=o[o[b+12>>2]+g>>2];c=c+1|0;if((c|0)!=(d|0)){continue}break}}c=o[b+12>>2];if(c){if(p[b+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}d=o[b+4>>2]}o[b+12>>2]=0}o[b+12>>2]=f;m[b+16|0]=1;o[b+8>>2]=e;c=o[a+12>>2]}o[o[b+12>>2]+(d<<2)>>2]=c;o[b+4>>2]=d+1}}function bb(a,b,c){var d=0;d=o[a+4>>2];a:{if(d){o[a+4>>2]=0;break a}o[7717]=o[7717]+1;d=l[o[6606]](44,16)|0;o[d>>2]=0;o[d+4>>2]=0;o[d+40>>2]=0;o[d+32>>2]=0;o[d+36>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0}o[d+36>>2]=c;o[d+32>>2]=0;o[d+40>>2]=0;c=o[b+4>>2];o[d>>2]=o[b>>2];o[d+4>>2]=c;c=o[b+12>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=c;c=o[b+20>>2];o[d+16>>2]=o[b+16>>2];o[d+20>>2]=c;c=o[b+28>>2];o[d+24>>2]=o[b+24>>2];o[d+28>>2]=c;Qd(a,o[a>>2],d);o[a+12>>2]=o[a+12>>2]+1;return d}function Uy(a,b,c,d){var e=0,f=0,g=0,h=0,i=0;e=o[a+328>>2];a:{if((e|0)!=o[a+332>>2]){break a}g=e?e<<1:1;if((e|0)>=(g|0)){break a}if(g){o[7717]=o[7717]+1;h=l[o[6606]](g<<2,16)|0;e=o[a+328>>2]}if((e|0)>=1){while(1){i=f<<2;o[i+h>>2]=o[o[a+336>>2]+i>>2];f=f+1|0;if((f|0)!=(e|0)){continue}break}}f=o[a+336>>2];if(f){if(p[a+340|0]){if(f){o[7718]=o[7718]+1;l[o[6607]](f)}e=o[a+328>>2]}o[a+336>>2]=0}o[a+336>>2]=h;o[a+332>>2]=g;m[a+340|0]=1}o[o[a+336>>2]+(e<<2)>>2]=b;o[a+328>>2]=e+1;o[b+284>>2]=o[a+452>>2];kg(a,b,c,d)}function SH(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=0,f=v(0),g=v(0),h=0,i=v(0),j=v(0);e=M-16|0;M=e;l[o[o[b>>2]+68>>2]](e,b,c);h=o[e+12>>2];o[a+8>>2]=o[e+8>>2];o[a+12>>2]=h;h=o[e+4>>2];o[a>>2]=o[e>>2];o[a+4>>2]=h;f=s[c+4>>2];d=s[c>>2];g=s[c+8>>2];i=v(l[o[o[b>>2]+48>>2]](b));b=v(v(v(d*d)+v(f*f))+v(g*g))<v(1.4210854715202004e-14);d=b?v(-1):d;j=d;g=b?v(-1):g;f=b?v(-1):f;d=v(v(1)/v(C(v(v(g*g)+v(v(d*d)+v(f*f))))));s[a>>2]=s[a>>2]+v(i*v(j*d));s[a+4>>2]=s[a+4>>2]+v(i*v(f*d));s[a+8>>2]=s[a+8>>2]+v(i*v(g*d));M=e+16|0}function ia(a){var b=0,c=0,d=0;d=M-16|0;M=d;c=o[6605];a:{if(o[c>>2]==(a|0)){b=c;break a}b=o[c+24>>2];b:{if(b){while(1){if(o[b>>2]==(a|0)){break b}b=o[b+28>>2];if(b){continue}break}}b=fa(36);o[b+4>>2]=0;o[b+8>>2]=0;o[b>>2]=a;o[b+32>>2]=0;o[b+24>>2]=0;o[b+28>>2]=0;o[b+20>>2]=c;o[b+12>>2]=0;o[b+16>>2]=0;Ad(b);o[b+28>>2]=o[c+24>>2];o[c+24>>2]=b}o[6605]=b}o[b+4>>2]=o[b+4>>2]+1;a=o[b+16>>2];o[b+16>>2]=a+1;if(!a){H(d+8|0,0)|0;a=o[7705];o[b+12>>2]=(o[d+12>>2]-o[a+4>>2]|0)+u(o[d+8>>2]-o[a>>2]|0,1e6)}M=d+16|0}function UJ(a,b,c,d){var e=0,f=0;e=M-96|0;M=e;f=o[b+192>>2];o[e+88>>2]=-1;o[e+92>>2]=-1;o[e+84>>2]=b+4;o[e+80>>2]=b;o[e+76>>2]=f;o[e+72>>2]=0;b=o[c+192>>2];o[e+64>>2]=-1;o[e+68>>2]=-1;o[e+60>>2]=c+4;o[e+56>>2]=c;o[e+52>>2]=b;o[e+48>>2]=0;b=o[a+24>>2];b=l[o[o[b>>2]+8>>2]](b,e+72|0,e+48|0,0)|0;if(b){c=e+8|0;o[c+12>>2]=e+48;o[c+8>>2]=e+72;o[c+4>>2]=0;o[c>>2]=7088;o[e+40>>2]=d;o[e+8>>2]=9484;l[o[o[b>>2]+8>>2]](b,e+72|0,e+48|0,a+28|0,c);l[o[o[b>>2]>>2]](b)|0;a=o[a+24>>2];l[o[o[a>>2]+60>>2]](a,b)}M=e+96|0}function pA(a,b,c,d,e){var f=v(0),g=0,h=v(0),i=0,j=0,k=0;a:{b:{if(!e){break b}i=o[a+732>>2];if((i|0)<1){break b}k=o[a+740>>2];e=0;while(1){g=u(e,52)+k|0;j=o[g+8>>2];if((o[g+12>>2]==(c|0)?(j|0)==(b|0):0)|(o[g+12>>2]==(b|0)?(c|0)==(j|0):0)){break a}e=e+1|0;if((i|0)!=(e|0)){continue}break}}Ti(a,d);d=o[a+740>>2]+u(o[a+732>>2],52)|0;o[d+ -40>>2]=c;o[d+ -44>>2]=b;f=v(s[b+8>>2]-s[c+8>>2]);h=v(f*f);f=v(s[b+12>>2]-s[c+12>>2]);h=v(h+v(f*f));f=v(s[b+16>>2]-s[c+16>>2]);s[d+ -36>>2]=C(v(h+v(f*f)));m[a+924|0]=1}}function xE(a){m[a+60|0]=0;o[a+52>>2]=282;o[a>>2]=17612;o[a+144>>2]=0;m[a+80|0]=1;o[a+76>>2]=0;m[a+100|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;o[a+96>>2]=0;m[a+120|0]=1;o[a+88>>2]=0;o[a+92>>2]=0;o[a+116>>2]=0;m[a+140|0]=1;o[a+108>>2]=0;o[a+112>>2]=0;o[a+136>>2]=0;m[a+164|0]=1;o[a+128>>2]=0;o[a+132>>2]=0;o[a+160>>2]=0;o[a+168>>2]=0;o[a+152>>2]=0;o[a+156>>2]=0;o[a+4>>2]=-8388609;o[a+8>>2]=-8388609;o[a+12>>2]=-8388609;o[a+16>>2]=0;o[a+20>>2]=2139095039;o[a+24>>2]=2139095039;o[a+28>>2]=2139095039;o[a+32>>2]=0}function KK(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=o[a+76>>2];if(c){d=o[b+4>>2];a:{if((d|0)!=o[b+8>>2]){break a}e=d?d<<1:1;if((d|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;d=o[b+4>>2]}if((d|0)>=1){c=0;while(1){g=c<<2;o[g+f>>2]=o[o[b+12>>2]+g>>2];c=c+1|0;if((c|0)!=(d|0)){continue}break}}c=o[b+12>>2];if(c){if(p[b+16|0]){if(c){o[7718]=o[7718]+1;l[o[6607]](c)}d=o[b+4>>2]}o[b+12>>2]=0}o[b+12>>2]=f;m[b+16|0]=1;o[b+8>>2]=e;c=o[a+76>>2]}o[o[b+12>>2]+(d<<2)>>2]=c;o[b+4>>2]=d+1}}function SC(a,b,c,d,e,f){wj(a,b,c,d,e,f);b=a+1309|0;m[b|0]=0;m[b+1|0]=0;m[b+2|0]=0;m[b+3|0]=0;o[a+4>>2]=9;o[a>>2]=19020;b=a+1313|0;m[b|0]=0;m[b+1|0]=0;b=a+1316|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1324|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1332|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1340|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1348|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1356|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1380|0;o[b>>2]=1065353216;o[b+4>>2]=1065353216;b=a+1372|0;o[b>>2]=1065353216;o[b+4>>2]=1065353216;o[a+1364>>2]=1065353216;o[a+1368>>2]=1065353216}function Ry(a){a=a|0;var b=0,c=0,d=0;Mj(a);if(!(!l[o[o[a>>2]+20>>2]](a)|o[a+328>>2]<1)){while(1){c=o[o[a+336>>2]+(d<<2)>>2];a:{if(!l[o[o[a>>2]+20>>2]](a)){break a}b=l[o[o[a>>2]+20>>2]](a)|0;if(!(l[o[o[b>>2]+48>>2]](b)&1)){break a}Hy(c,o[a+72>>2]);Ly(c,o[a+72>>2],o[a+344>>2])}b=o[a+72>>2];b:{if(!b){break b}if(!(l[o[o[b>>2]+48>>2]](b)&2)){break b}if(p[a+348|0]){Ky(c,o[a+72>>2])}if(p[a+349|0]){Jy(c,o[a+72>>2])}if(!p[a+350|0]){break b}Iy(c,o[a+72>>2])}d=d+1|0;if((d|0)<o[a+328>>2]){continue}break}}}function Kj(a,b){a=a|0;b=v(b);var c=0,d=0;ia(18214);c=o[a+84>>2];if(c){l[c](a,b)}l[o[o[a>>2]+140>>2]](a,b);c=0;o[a+32>>2]=0;s[a+28>>2]=b;o[a+48>>2]=l[o[o[a>>2]+20>>2]](a);ID(a,b);l[o[o[a>>2]+44>>2]](a);l[o[o[a>>2]+148>>2]](a);s[a+104>>2]=b;l[o[o[a>>2]+152>>2]](a,a+92|0);l[o[o[a>>2]+144>>2]](a,b);ia(18243);if(o[a+280>>2]>=1){while(1){d=o[o[a+288>>2]+(c<<2)>>2];l[o[o[d>>2]+8>>2]](d,a,b);c=c+1|0;if((c|0)<o[a+280>>2]){continue}break}}ga();l[o[o[a>>2]+156>>2]](a,b);c=o[a+80>>2];if(c){l[c](a,b)}ga()}function sC(a,b){a=a|0;b=b|0;var c=v(0),d=v(0),e=v(0);if(p[a+48|0]){o[b>>2]=0;o[b+4>>2]=0;return}o[b>>2]=4;o[b+4>>2]=2;If(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0);rC(a);m[a+296|0]=0;d=s[a+1032>>2];o[a+1080>>2]=o[a+1032>>2];a:{b:{c:{e=s[a+184>>2];c=s[a+188>>2];if(!!(e<=c)){if(c<d){break c}c=e;if(c>d){break c}}o[a+1032>>2]=0;if(p[a+1096|0]){break b}break a}m[a+296|0]=1;s[a+1032>>2]=d-c}o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}if(!(p[a+1112|0]?0:!p[a+297|0])){o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}}function nz(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0);d=o[b+52>>2];e=o[d+32>>2];b=o[e>>2];g=o[d+24>>2];if((g|0)>=2){h=s[c>>2];i=s[c+4>>2];j=s[c+8>>2];f=v(v(v(h*s[b+8>>2])+v(i*s[b+12>>2]))+v(j*s[b+16>>2]));c=0;b=1;while(1){d=o[(b<<2)+e>>2];k=v(v(v(h*s[d+8>>2])+v(i*s[d+12>>2]))+v(j*s[d+16>>2]));d=k>f;f=d?k:f;c=d?b:c;b=b+1|0;if((g|0)!=(b|0)){continue}break}b=o[(c<<2)+e>>2]}c=o[b+12>>2];o[a>>2]=o[b+8>>2];o[a+4>>2]=c;c=o[b+20>>2];o[a+8>>2]=o[b+16>>2];o[a+12>>2]=c}function Tp(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=M-16|0;b=o[c+8>>2];o[d+12>>2]=b;d=o[d+12>>2];e=M-16|0;o[e+12>>2]=b+16;e=o[e+12>>2];f=M-16|0;o[f+12>>2]=b+32;f=o[f+12>>2];g=M-16|0;o[g+12>>2]=b;g=o[g+12>>2]+4|0;h=M-16|0;o[h+12>>2]=b+16;h=o[h+12>>2]+4|0;i=M-16|0;o[i+12>>2]=b+32;i=o[i+12>>2]+4|0;j=M-16|0;o[j+12>>2]=b;j=o[j+12>>2]+8|0;k=M-16|0;o[k+12>>2]=b+16;k=o[k+12>>2]+8|0;l=M-16|0;o[l+12>>2]=b+32;Ce(a,d,e,f,g,h,i,j,k,o[l+12>>2]+8|0);M=c+16|0}function Be(a,b){var c=0,d=0;d=M-16|0;M=d;o[d+8>>2]=a;o[d+4>>2]=b;a=o[d+8>>2];o[d+12>>2]=a;c=a+48|0;b=a;while(1){o[(M-16|0)+12>>2]=b;b=b+16|0;if((c|0)!=(b|0)){continue}break}b=o[d+4>>2];c=o[b+4>>2];o[a>>2]=o[b>>2];o[a+4>>2]=c;c=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=c;b=o[d+4>>2];c=o[b+20>>2];o[a+16>>2]=o[b+16>>2];o[a+20>>2]=c;c=o[b+28>>2];o[a+24>>2]=o[b+24>>2];o[a+28>>2]=c;b=o[d+4>>2];c=o[b+36>>2];o[a+32>>2]=o[b+32>>2];o[a+36>>2]=c;c=o[b+44>>2];o[a+40>>2]=o[b+40>>2];o[a+44>>2]=c;M=d+16|0}function EA(a){a=a|0;var b=0;o[a>>2]=20532;b=o[a+92>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+92>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+96>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+96>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+100>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+100>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+104>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+104>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+108>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+108>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}qe(a);return a|0}function VE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;o[7308]=o[7308]+1;d=o[b+12>>2]>o[c+12>>2];e=o[(d?b:c)+12>>2];f=o[(d?c:b)+12>>2];b=f|e<<16;b=(b<<15^-1)+b|0;b=u(b>>10^b,9);b=b>>6^b;b=(b<<11^-1)+b|0;b=o[a+12>>2]+ -1&(b>>16^b);a:{b:{if((b|0)>=o[a+36>>2]){break b}b=o[o[a+44>>2]+(b<<2)>>2];if((b|0)==-1){break b}c=o[a+16>>2];while(1){g=b<<4;d=c+g|0;if(o[o[(c+g|0)+4>>2]+12>>2]==(e|0)?o[o[d>>2]+12>>2]==(f|0):0){break a}b=o[o[a+64>>2]+(b<<2)>>2];if((b|0)!=-1){continue}break}}d=0}return d|0}function el(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;o[a>>2]=10568;b=o[a+8>>2];e=o[b+8>>2];if((e|0)>=1){while(1){c=o[(o[b+16>>2]+u(d,12)|0)+8>>2];if(c){l[o[o[c>>2]>>2]](c)|0;f=o[a+4>>2];l[o[o[f>>2]+60>>2]](f,c)}d=d+1|0;if((e|0)!=(d|0)){continue}break}b=o[a+8>>2]}fl(b);b=o[a+8>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+8>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+24>>2];if(b){if(p[a+28|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+24>>2]=0}o[a+24>>2]=0;m[a+28|0]=1;o[a+16>>2]=0;o[a+20>>2]=0;return a|0}function RC(a,b,c,d){uj(a,b,c,d);b=a+1309|0;m[b|0]=0;m[b+1|0]=0;m[b+2|0]=0;m[b+3|0]=0;o[a+4>>2]=9;o[a>>2]=19020;b=a+1313|0;m[b|0]=0;m[b+1|0]=0;b=a+1316|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1324|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1332|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1340|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1348|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1356|0;o[b>>2]=0;o[b+4>>2]=0;b=a+1380|0;o[b>>2]=1065353216;o[b+4>>2]=1065353216;b=a+1372|0;o[b>>2]=1065353216;o[b+4>>2]=1065353216;o[a+1364>>2]=1065353216;o[a+1368>>2]=1065353216}function Qj(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;while(1){k=c;g=o[a+12>>2];l=o[g+((c+d|0)/2<<3)>>2];h=c;e=d;while(1){c=h;h=c+1|0;f=(c<<3)+g|0;if(o[f>>2]<(l|0)){continue}i=e;while(1){e=i;i=e+ -1|0;m=e<<3;j=m+g|0;if(o[j>>2]>(l|0)){continue}break}if((c|0)<=(e|0)){c=o[f>>2];e=o[f+4>>2];g=o[j+4>>2];o[f>>2]=o[j>>2];o[f+4>>2]=g;f=o[a+12>>2]+m|0;o[f>>2]=c;o[f+4>>2]=e;e=i;c=h}if((c|0)<=(e|0)){g=o[a+12>>2];h=c;continue}break}if((e|0)>(k|0)){Qj(a,b,k,e)}if((c|0)<(d|0)){continue}break}}function Ll(a,b,c,d){var e=0,f=0;e=o[b+4>>2];o[a+292>>2]=o[b>>2];o[a+296>>2]=e;e=o[b+12>>2];o[a+300>>2]=o[b+8>>2];o[a+304>>2]=e;m[a+356|0]=1;f=o[b+4>>2];e=a+(o[a>>2]<<4)|0;o[e+4>>2]=o[b>>2];o[e+8>>2]=f;f=o[b+12>>2];o[e+12>>2]=o[b+8>>2];o[e+16>>2]=f;f=o[c+12>>2];b=(o[a>>2]<<4)+a|0;o[b+92>>2]=o[c+8>>2];o[b+96>>2]=f;e=o[c+4>>2];o[b+84>>2]=o[c>>2];o[b+88>>2]=e;e=o[d+12>>2];b=(o[a>>2]<<4)+a|0;o[b+172>>2]=o[d+8>>2];o[b+176>>2]=e;c=o[d+4>>2];o[b+164>>2]=o[d>>2];o[b+168>>2]=c;o[a>>2]=o[a>>2]+1}function DA(a){a=a|0;var b=0;o[a>>2]=20532;b=o[a+92>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+92>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+96>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+96>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+100>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+100>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+104>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+104>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}b=o[a+108>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+108>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}qe(a);ba(a)}function ui(a,b){var c=0,d=0,f=0,j=0,k=0,l=0;f=M-16|0;M=f;j=(g(a),h(0));c=j&2147483647;a:{if(c>>>0<=1305022426){k=+a;d=k*.6366197723675814+6755399441055744+ -6755399441055744;t[b>>3]=k+d*-1.5707963109016418+d*-1.5893254773528196e-8;if(w(d)<2147483648){c=~~d;break a}c=-2147483648;break a}if(c>>>0>=2139095040){t[b>>3]=v(a-a);c=0;break a}l=c;c=(c>>>23|0)+ -150|0;t[f+8>>3]=(e(0,l-(c<<23)|0),i());c=gy(f+8|0,f,c);d=t[f>>3];if((j|0)<=-1){t[b>>3]=-d;c=0-c|0;break a}t[b>>3]=d}M=f+16|0;return c}function jJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0,f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),n=v(0),p=v(0);e=M-16|0;M=e;s[a+32>>2]=d;g=o[b+4>>2];o[a+8>>2]=o[b>>2];o[a+12>>2]=g;g=o[b+12>>2];o[a+16>>2]=o[b+8>>2];o[a+20>>2]=g;h=s[b+8>>2];i=s[c>>2];j=s[b>>2];k=s[c+4>>2];n=s[b+4>>2];p=s[c+8>>2];f=s[a+28>>2];o[e+12>>2]=0;s[e+8>>2]=p-v(f*h);s[e+4>>2]=k-v(f*n);s[e>>2]=i-v(j*f);d=v(v(f+s[a+24>>2])+d);s[a+32>>2]=d;if(!!(d<v(0))){m[a+36|0]=1}a=o[a+4>>2];l[o[o[a>>2]+16>>2]](a,b,e,d);M=e+16|0}function yD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=o[a+280>>2];a:{if((c|0)!=o[a+284>>2]){break a}e=c?c<<1:1;if((c|0)>=(e|0)){break a}if(e){o[7717]=o[7717]+1;f=l[o[6606]](e<<2,16)|0;c=o[a+280>>2]}if((c|0)>=1){while(1){g=d<<2;o[g+f>>2]=o[o[a+288>>2]+g>>2];d=d+1|0;if((d|0)!=(c|0)){continue}break}}d=o[a+288>>2];if(d){if(p[a+292|0]){if(d){o[7718]=o[7718]+1;l[o[6607]](d)}c=o[a+280>>2]}o[a+288>>2]=0}o[a+288>>2]=f;o[a+284>>2]=e;m[a+292|0]=1}o[o[a+288>>2]+(c<<2)>>2]=b;o[a+280>>2]=c+1}function Pc(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;if(o[a+104>>2]>=1){while(1){i=o[a+112>>2]+(f<<3)|0;d=o[i+4>>2];g=o[o[a+4>>2]+684>>2];c=o[g+60>>2];if((c|0)>=1){e=0;while(1){h=0;j=o[g+68>>2]+(e<<2)|0;b=o[j>>2];if(b){while(1){c=o[b+280>>2];a:{if(o[b+276>>2]!=(d|0)){h=b;break a}o[(h?h+280|0:j)>>2]=c;ba(b)}b=c;if(b){continue}break}c=o[g+60>>2]}e=e+1|0;if((e|0)<(c|0)){continue}break}d=o[i+4>>2]}if(d){l[o[o[d>>2]+4>>2]](d)}f=f+1|0;if((f|0)<o[a+104>>2]){continue}break}}fz(a+60|0)}function lF(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,p=0;h=M-16|0;M=h;i=o[a+60>>2];Wd(a,h+10|0,c,0);Wd(a,h+4|0,d,1);i=i+(b<<6)|0;while(1){g=o[((f<<2)+a|0)+68>>2];b=f<<1;d=b+i|0;c=q[d+48>>1];j=g+(c<<2)|0;l=q[j>>1];d=q[d+54>>1];g=g+(d<<2)|0;m=q[g>>1];k=b+(h+4|0)|0;p=q[k>>1];b=q[b+(h+10|0)>>1];n[j>>1]=b;n[g>>1]=q[k>>1];b=b-l|0;if((b|0)<=-1){nk(a,f,c)}g=p-m|0;if((g|0)>=1){aF(a,f,d)}if((b|0)>=1){_E(a,f,c,e)}if((g|0)<=-1){mk(a,f,d,e)}f=f+1|0;if((f|0)!=3){continue}break}M=h+16|0}function _k(a,b,c,d){var e=0,f=0,g=0;e=M-160|0;M=e;o[e+156>>2]=b;o[e+152>>2]=c;s[e+148>>2]=d;b=o[e+152>>2];c=o[e+156>>2];s[e+124>>2]=eb(o[e+152>>2],c);g=e+128|0;ta(g,b,e+124|0);f=e+104|0;db(f,c,g);b=e+88|0;o[(M-16|0)+12>>2]=b;ad(e+72|0,o[e+152>>2],c);c=o[e+76>>2];o[b>>2]=o[e+72>>2];o[b+4>>2]=c;c=o[e+84>>2];o[b+8>>2]=o[e+80>>2];o[b+12>>2]=c;s[e+36>>2]=Aa(s[e+148>>2]);c=e+40|0;ta(c,f,e+36|0);f=e+56|0;ha(f,g,c);s[e+12>>2]=za(s[e+148>>2]);c=e+16|0;ta(c,b,e+12|0);ha(a,f,c);M=e+160|0}function Tf(a,b,c){var d=v(0),e=0,f=v(0),g=v(0);e=o[a+204>>2];a:{if(b==v(0)){o[a+204>>2]=e|1;break a}o[a+204>>2]=e&-2;d=v(v(1)/b)}s[a+344>>2]=d;o[a+376>>2]=0;s[a+364>>2]=s[a+380>>2]*b;s[a+372>>2]=s[a+388>>2]*b;s[a+368>>2]=s[a+384>>2]*b;b=s[c+8>>2];f=s[c+4>>2];g=s[c>>2];s[a+560>>2]=s[a+348>>2]*d;s[a+564>>2]=d*s[a+352>>2];s[a+568>>2]=d*s[a+356>>2];o[a+572>>2]=0;o[a+408>>2]=0;s[a+396>>2]=g!=v(0)?v(v(1)/g):v(0);s[a+400>>2]=f!=v(0)?v(v(1)/f):v(0);s[a+404>>2]=b!=v(0)?v(v(1)/b):v(0)}function Af(a){var b=v(0),c=0,d=0,e=0,f=0,g=0,h=v(0),i=0,j=0;d=o[a+732>>2];if((d|0)>=1){j=o[a+740>>2];while(1){c=u(e,52)+j|0;f=o[c+8>>2];g=o[c+12>>2];b=v(s[f+8>>2]-s[g+8>>2]);h=v(b*b);b=v(s[f+12>>2]-s[g+12>>2]);h=v(h+v(b*b));b=v(s[f+16>>2]-s[g+16>>2]);b=v(C(v(h+v(b*b))));s[c+16>>2]=b;s[c+28>>2]=b*b;e=e+1|0;if((d|0)!=(e|0)){continue}break}while(1){c=u(i,52)+j|0;s[c+24>>2]=v(s[o[c+8>>2]+88>>2]+s[o[c+12>>2]+88>>2])/s[o[c+4>>2]+4>>2];i=i+1|0;if((d|0)!=(i|0)){continue}break}}dA(a)}function $A(a,b,c){a=a|0;b=b|0;c=v(c);var d=v(0),e=v(0),f=v(0),g=0,h=v(0),i=0;m[a+171|0]=0;g=o[b+4>>2];o[a+60>>2]=o[b>>2];o[a+64>>2]=g;g=o[b+12>>2];o[a+68>>2]=o[b+8>>2];o[a+72>>2]=g;d=s[a+60>>2];h=s[a- -64>>2];e=s[a+68>>2];f=v(v(1)/v(C(v(v(v(d*d)+v(h*h))+v(e*e)))));e=v(e*f);d=v(d*f);f=v(h*f);a:{if(!(v(C(v(v(e*e)+v(v(d*d)+v(f*f)))))<v(1.1920928955078125e-7))){i=o[a+72>>2];break a}d=v(0);f=v(0);e=v(0)}s[a+76>>2]=d;o[a+88>>2]=i;s[a+84>>2]=e;s[a+80>>2]=f;s[a+172>>2]=s[a+172>>2]+c}function lg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;o[a>>2]=7456;b=o[a+16>>2];c=o[a+8>>2];if((c|0)>=1){while(1){f=o[(d<<2)+b>>2];e=o[f+188>>2];if(e){b=o[a+68>>2];b=l[o[o[b>>2]+36>>2]](b)|0;l[o[o[b>>2]+40>>2]](b,e,o[a+24>>2]);b=o[a+68>>2];l[o[o[b>>2]+12>>2]](b,e,o[a+24>>2]);o[f+188>>2]=0;c=o[a+8>>2];b=o[a+16>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;m[a+20|0]=1;return a|0}function $w(a,b,c){var d=0,e=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;b=o[d+8>>2];e=o[b+4>>2];a=o[d+12>>2];c=a;o[c+164>>2]=o[b>>2];o[c+168>>2]=e;c=o[b+12>>2];o[a+172>>2]=o[b+8>>2];o[a+176>>2]=c;b=d;e=M-16|0;o[e+12>>2]=o[d+8>>2];c=1;a:{if(s[o[e+12>>2]>>2]!=v(1)){break a}e=M-16|0;o[e+12>>2]=o[d+8>>2];c=1;if(s[o[e+12>>2]+4>>2]!=v(1)){break a}c=M-16|0;o[c+12>>2]=o[d+8>>2];c=s[o[c+12>>2]+8>>2]!=v(1)}m[b+3|0]=c;if(m[d+3|0]&1){b=o[d+4>>2]}else{b=0}o[a+180>>2]=b;M=d+16|0}function Zl(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;o[6736]=o[6736]+ -1;l[o[o[a>>2]+20>>2]](a,b);c=o[b+768>>2];e=c<<2;f=o[a+20>>2];d=e+f|0;h=o[d>>2];i=d;d=o[a+12>>2]+ -1|0;g=d<<2;o[i>>2]=o[f+g>>2];o[o[a+20>>2]+g>>2]=h;o[o[o[a+20>>2]+e>>2]+768>>2]=c;o[a+12>>2]=d;a:{if(!b){break a}a=o[a+68>>2];c=o[a+16>>2];if(c>>>0>b>>>0|c+u(o[a>>2],o[a+4>>2])>>>0<=b>>>0){break a}o[b>>2]=o[a+12>>2];o[a+12>>2]=b;o[a+8>>2]=o[a+8>>2]+1;return}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}function rG(a,b){var c=v(0),d=v(0),e=v(0),f=0,g=0,h=v(0),i=v(0),j=v(0);de(a);o[a+4>>2]=0;o[a>>2]=14828;g=a;c=s[b>>2];d=s[b+8>>2];e=s[b+4>>2];c=v(s[((c<e?(c<d^1)<<1:e<d?1:2)<<2)+b>>2]*v(.10000000149011612));if(!(c<s[a+44>>2])){f=14828}else{$c(a,c);f=o[a>>2]}c=v(l[o[f+48>>2]](g));d=v(l[o[o[a>>2]+48>>2]](a));e=v(l[o[o[a>>2]+48>>2]](a));h=s[b>>2];i=s[b+4>>2];j=s[b+8>>2];o[a+40>>2]=0;s[a+36>>2]=v(j*s[a+20>>2])-e;s[a+32>>2]=v(i*s[a+16>>2])-d;s[a+28>>2]=v(h*s[a+12>>2])-c}function ZA(a,b){a=a|0;b=b|0;var c=0,d=0;c=M-32|0;o[c+12>>2]=0;d=o[b+12>>2];o[c+24>>2]=o[b+8>>2];o[c+28>>2]=d;d=o[b+4>>2];o[c+16>>2]=o[b>>2];o[c+20>>2]=d;a=o[a+8>>2];o[a+4>>2]=1065353216;o[a+44>>2]=1065353216;o[a+48>>2]=0;o[a+36>>2]=0;o[a+40>>2]=0;o[a+28>>2]=0;o[a+32>>2]=0;o[a+24>>2]=1065353216;o[a+16>>2]=0;o[a+20>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+260>>2]=o[a+260>>2]+1;b=o[c+20>>2];o[a+52>>2]=o[c+16>>2];o[a+56>>2]=b;b=o[c+28>>2];o[a+60>>2]=o[c+24>>2];o[a+64>>2]=b}function FG(a,b,c){a=a|0;b=v(b);c=c|0;var d=v(0),e=v(0),f=v(0),g=0,h=0,i=0;i=a+28|0;h=o[a+52>>2];g=o[i+((h+2|0)%3<<2)>>2];a=M-16|0;o[a+12>>2]=0;o[a+8>>2]=g;o[a+4>>2]=g;o[a>>2]=g;g=h<<2;h=g+a|0;s[h>>2]=s[g+i>>2]+s[h>>2];d=s[a+8>>2];b=v(b*v(.0833333283662796));e=v(s[a>>2]+v(.03999999910593033));e=v(e+e);e=v(e*e);f=v(s[a+4>>2]+v(.03999999910593033));f=v(f+f);f=v(f*f);s[c+8>>2]=b*v(e+f);d=v(d+v(.03999999910593033));d=v(d+d);d=v(d*d);s[c+4>>2]=b*v(e+d);s[c>>2]=b*v(f+d)}function No(a,b,c){var d=0;d=M-48|0;M=d;o[d+44>>2]=a;o[d+40>>2]=b;o[d+36>>2]=c;a=o[d+44>>2];s[d+32>>2]=og(o[d+40>>2]);s[d+28>>2]=za(v(s[o[d+36>>2]>>2]*v(.5)))/s[d+32>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];s[d+24>>2]=s[o[b+12>>2]>>2]*s[d+28>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];s[d+20>>2]=s[o[b+12>>2]+4>>2]*s[d+28>>2];b=M-16|0;o[b+12>>2]=o[d+40>>2];s[d+16>>2]=s[o[b+12>>2]+8>>2]*s[d+28>>2];s[d+12>>2]=Aa(v(s[o[d+36>>2]>>2]*v(.5)));Wb(a,d+24|0,d+20|0,d+16|0,d+12|0);M=d+48|0}function mD(a){a=a|0;var b=0;o[a>>2]=18620;b=o[a+80>>2];if(b){if(p[a+84|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+80>>2]=0}o[a+80>>2]=0;m[a+84|0]=1;o[a+72>>2]=0;o[a+76>>2]=0;b=o[a+60>>2];if(b){if(p[a- -64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+60>>2]=0}o[a+60>>2]=0;m[a- -64|0]=1;o[a+52>>2]=0;o[a+56>>2]=0;b=o[a+40>>2];if(b){if(p[a+44|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+40>>2]=0}o[a+40>>2]=0;m[a+44|0]=1;o[a+32>>2]=0;o[a+36>>2]=0;return a|0}function gl(a){a=a|0;var b=0;o[a>>2]=10504;b=o[a+60>>2];if(b){if(p[a- -64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+60>>2]=0}o[a+60>>2]=0;m[a- -64|0]=1;o[a+52>>2]=0;o[a+56>>2]=0;b=o[a+40>>2];if(b){if(p[a+44|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+40>>2]=0}o[a+40>>2]=0;m[a+44|0]=1;o[a+32>>2]=0;o[a+36>>2]=0;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function kk(a){a=a|0;var b=0;o[a>>2]=16848;b=o[a- -64>>2];if(b){if(p[a+68|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+64>>2]=0}o[a+64>>2]=0;m[a+68|0]=1;o[a+56>>2]=0;o[a+60>>2]=0;b=o[a+44>>2];if(b){if(p[a+48|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+44>>2]=0}o[a+44>>2]=0;m[a+48|0]=1;o[a+36>>2]=0;o[a+40>>2]=0;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function bl(a,b){var c=0;o[a>>2]=10732;c=a;o[c+4>>2]=31;o[c+8>>2]=0;o[c+72>>2]=0;o[c+76>>2]=1065353216;o[c+64>>2]=0;o[c+68>>2]=1;o[c+48>>2]=-581039253;o[c+52>>2]=-581039253;o[c+32>>2]=1566444395;o[c+36>>2]=1566444395;m[c+28|0]=1;o[c+24>>2]=0;o[c+88>>2]=0;o[c+80>>2]=1065353216;o[c+84>>2]=1065353216;o[c+56>>2]=-581039253;o[c+60>>2]=0;o[c+40>>2]=1566444395;o[c+44>>2]=0;o[c+16>>2]=0;o[c+20>>2]=0;if(b){o[7717]=o[7717]+1;b=l[o[6606]](60,16)|0;ac(b);o[a+64>>2]=b}}function SD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;i=o[b+8>>2];if((i|0)>=1){k=o[b+16>>2];b=0;while(1){d=o[(e<<2)+k>>2];a:{if(!(p[d+204|0]&3)){c=b;f=o[a+16>>2];j=b<<3;g=f+j|0;h=o[g>>2];if((h|0)!=(b|0)){while(1){c=(h<<3)+f|0;o[g>>2]=o[c>>2];c=o[c>>2];g=(c<<3)+f|0;h=o[g>>2];if((c|0)!=(h|0)){continue}break}}o[d+208>>2]=c;o[(f+j|0)+4>>2]=e;o[d+212>>2]=-1;b=b+1|0;break a}o[d+208>>2]=-1;o[d+212>>2]=-2}e=e+1|0;if((i|0)!=(e|0)){continue}break}}}function aj(a,b,c,d,e){o[a>>2]=20152;o[a+176>>2]=e;o[a+60>>2]=0;o[a+64>>2]=0;o[a+56>>2]=1017370378;s[a+52>>2]=d;o[a+8>>2]=b;o[a+168>>2]=16842752;o[a+172>>2]=0;o[a+12>>2]=c;o[a+44>>2]=1105933107;o[a+48>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;m[a+180|0]=1;o[a+24>>2]=1113325568;o[a+28>>2]=1092616192;m[a+181|0]=0;m[a+182|0]=0;o[a+36>>2]=1061752795;o[a+40>>2]=1060439283;o[a+108>>2]=0;m[a+144|0]=1;o[a+140>>2]=0;o[a+132>>2]=0;o[a+136>>2]=0;o[a+68>>2]=0;o[a+72>>2]=0}function Oy(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;l[o[o[b>>2]+32>>2]](b);pD(a,b);c=o[a+8>>2];if((c|0)>=1){while(1){d=o[o[a+16>>2]+(e<<2)>>2];if(p[d+236|0]&8){c=(g=b,h=l[o[o[d>>2]+16>>2]](d)|0,i=1,f=o[o[b>>2]+16>>2],l[f](g|0,h|0,i|0)|0);i=b,h=c,g=l[o[o[d>>2]+20>>2]](d,o[c+8>>2],b)|0,j=1497645651,k=d,f=o[o[b>>2]+20>>2],l[f](i|0,h|0,g|0,j|0,k|0);c=o[a+8>>2]}e=e+1|0;if((e|0)<(c|0)){continue}break}}Aj(a,b);ig(a,b);l[o[o[b>>2]+36>>2]](b)}function pn(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=M+ -64|0;M=i;o[i+60>>2]=a;o[i+56>>2]=b;o[i+52>>2]=c;o[i+48>>2]=d;o[i+44>>2]=e;o[i+40>>2]=f;o[i+36>>2]=g;o[i+32>>2]=h;a=o[i+60>>2];b=o[i+56>>2];c=o[i+52>>2];d=o[i+48>>2];e=o[i+44>>2];f=o[i+40>>2];g=o[i+36>>2];o[i+28>>2]=o[i+32>>2];o[i+24>>2]=g;o[i+20>>2]=f;o[i+16>>2]=e;o[i+12>>2]=d;o[i+8>>2]=c;o[i+4>>2]=b;o[i>>2]=a;j=+I(1960,2256,i|0);M=i- -64|0;return v(v(j))}function YA(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;m[a+148|0]=0;a:{if(!Qc(a,b)){break a}m[a+148|0]=1;if(!Qc(a,b)){break a}m[a+148|0]=1;if(!Qc(a,b)){break a}m[a+148|0]=1;if(!Qc(a,b)){break a}m[a+148|0]=1;if(!Qc(a,b)){break a}m[a+148|0]=1}b=o[a+8>>2];c=b+52|0;d=o[c+4>>2];o[a+92>>2]=o[c>>2];o[a+96>>2]=d;c=o[b+64>>2];o[a+100>>2]=o[b+60>>2];o[a+104>>2]=c;c=o[b+52>>2];d=o[b+56>>2];e=o[b+64>>2];o[a+120>>2]=o[b+60>>2];o[a+124>>2]=e;o[a+112>>2]=c;o[a+116>>2]=d}function Ci(a){a=a|0;var b=0;o[a>>2]=22608;if(p[a+456|0]){b=o[a+452>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+452>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+420>>2];if(b){if(p[a+424|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+420>>2]=0}o[a+420>>2]=0;m[a+424|0]=1;o[a+412>>2]=0;o[a+416>>2]=0;b=o[a+336>>2];if(b){if(p[a+340|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+336>>2]=0}o[a+336>>2]=0;m[a+340|0]=1;o[a+328>>2]=0;o[a+332>>2]=0;Qf(a);return a|0}function aB(a,b){a=a|0;b=b|0;var c=v(0),d=v(0),e=v(0),f=0,g=v(0);m[a+171|0]=1;f=o[b+4>>2];o[a+60>>2]=o[b>>2];o[a+64>>2]=f;f=o[b+12>>2];o[a+68>>2]=o[b+8>>2];o[a+72>>2]=f;c=s[a+60>>2];g=s[a- -64>>2];d=s[a+68>>2];e=v(v(1)/v(C(v(v(v(c*c)+v(g*g))+v(d*d)))));d=v(d*e);c=v(c*e);e=v(g*e);b=o[a+72>>2];a:{if(!(v(C(v(v(d*d)+v(v(c*c)+v(e*e)))))<v(1.1920928955078125e-7))){break a}c=v(0);e=v(0);d=v(0);b=0}s[a+76>>2]=c;o[a+88>>2]=b;s[a+84>>2]=d;s[a+80>>2]=e}function bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;d=o[b+188>>2];if(d){c=o[a+68>>2];c=l[o[o[c>>2]+36>>2]](c)|0;l[o[o[c>>2]+40>>2]](c,d,o[a+24>>2]);c=o[a+68>>2];l[o[o[c>>2]+12>>2]](c,d,o[a+24>>2]);o[b+188>>2]=0}c=o[a+8>>2];a:{if((c|0)<1){break a}e=o[a+16>>2];d=0;while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}d=c+ -1|0;c=d<<2;o[f>>2]=o[c+e>>2];o[c+o[a+16>>2]>>2]=b;o[a+8>>2]=d}}function tA(a,b,c,d){var e=0,f=0,g=0,h=0;g=o[a+752>>2];if((g|0)<1){return 0}e=o[a+720>>2];d=e+u(d,104)|0;c=e+u(c,104)|0;b=e+u(b,104)|0;h=o[a+760>>2];a=0;a:{while(1){e=u(a,44)+h|0;f=o[e+8>>2];b:{if((c|0)!=(f|0)?!((f|0)==(d|0)|(b|0)==(f|0)):0){break b}f=o[e+12>>2];if((c|0)!=(f|0)?!((f|0)==(d|0)|(b|0)==(f|0)):0){break b}e=o[e+16>>2];if((e|0)==(d|0)|(b|0)==(e|0)|(c|0)==(e|0)){break a}}a=a+1|0;if((g|0)!=(a|0)){continue}break}return 0}return 1}function JH(a,b){a=a|0;b=b|0;var c=v(0),d=0,e=v(0);d=l[o[o[a>>2]+28>>2]](a)|0;c=v(s[d>>2]-s[b>>2]);e=v(c*c);c=v(s[d+4>>2]-s[b+4>>2]);e=v(e+v(c*c));c=v(s[d+8>>2]-s[b+8>>2]);if(!!(v(e+v(c*c))>v(1.1920928955078125e-7))){Tk(a,b);if(p[a+61|0]){b=o[a+52>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+52>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[7717]=o[7717]+1;b=l[o[6606]](172,16)|0;d=Bk(b);o[a+52>>2]=b;Ak(d,o[a+48>>2],p[a+60|0],a+16|0,a+32|0);m[a+61|0]=1}}function _A(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;o[a+172>>2]=0;n[a+168>>1]=0;o[a+16>>2]=0;o[a+20>>2]=0;o[a+60>>2]=0;o[a+64>>2]=0;o[a+68>>2]=0;o[a+72>>2]=0;a=o[o[a+8>>2]+284>>2];if(o[(l[o[o[a>>2]+28>>2]](a)|0)+4>>2]>=1){while(1){d=a,e=o[o[(l[o[o[a>>2]+28>>2]](a)|0)+12>>2]>>2],f=o[o[(l[o[o[a>>2]+28>>2]](a)|0)+12>>2]+4>>2],g=o[b+24>>2],c=o[o[a>>2]+12>>2],l[c](d|0,e|0,f|0,g|0)|0;if(o[(l[o[o[a>>2]+28>>2]](a)|0)+4>>2]>0){continue}break}}}function LJ(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=v(d);e=e|0;f=f|0;var g=0;g=M+ -64|0;M=g;o[g+60>>2]=f;o[g+56>>2]=e;e=o[a+212>>2];if(!!(s[e+4>>2]>=d)){o[g+8>>2]=o[a+216>>2];o[g+12>>2]=g+56;a=o[b+12>>2];o[g+24>>2]=o[b+8>>2];o[g+28>>2]=a;a=o[b+4>>2];o[g+16>>2]=o[b>>2];o[g+20>>2]=a;a=o[c+12>>2];o[g+40>>2]=o[c+8>>2];o[g+44>>2]=a;a=o[c+4>>2];o[g+32>>2]=o[c>>2];o[g+36>>2]=a;s[g+48>>2]=d;d=v(l[o[o[e>>2]+12>>2]](e,g+8|0,1))}M=g- -64|0;return v(d)}function KJ(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=v(d);e=e|0;f=f|0;var g=0;g=M+ -64|0;M=g;o[g+60>>2]=f;o[g+56>>2]=e;e=o[a+212>>2];if(!!(s[e+4>>2]>=d)){o[g+8>>2]=o[a+216>>2];o[g+12>>2]=g+56;a=o[b+12>>2];o[g+24>>2]=o[b+8>>2];o[g+28>>2]=a;a=o[b+4>>2];o[g+16>>2]=o[b>>2];o[g+20>>2]=a;a=o[c+12>>2];o[g+40>>2]=o[c+8>>2];o[g+44>>2]=a;a=o[c+4>>2];o[g+32>>2]=o[c>>2];o[g+36>>2]=a;s[g+48>>2]=d;d=v(l[o[o[e>>2]+12>>2]](e,g+8|0,0))}M=g- -64|0;return v(d)}function qj(a,b){var c=v(0);o[a+20>>2]=0;o[a+24>>2]=0;m[a+28|0]=0;c=s[a+4>>2];a:{if(!(c>=v(0))){break a}b=xa(v(b-s[a>>2]),v(6.2831854820251465));b:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break b}if(!(b>v(3.1415927410125732))){break b}b=v(b+v(-6.2831854820251465))}if(!!(b<v(-c))){o[a+24>>2]=1065353216;m[a+28|0]=1;s[a+20>>2]=-v(c+b);return}if(!(b>c)){break a}o[a+24>>2]=-1082130432;m[a+28|0]=1;s[a+20>>2]=c-b}}function Qp(a,b){var c=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;a=o[c+44>>2];s[c+36>>2]=Pb(o[c+40>>2],a);s[c+32>>2]=Ob(o[c+40>>2],a);s[c+28>>2]=Nb(o[c+40>>2],a);s[c+24>>2]=Pb(o[c+40>>2],a+16|0);s[c+20>>2]=Ob(o[c+40>>2],a+16|0);s[c+16>>2]=Nb(o[c+40>>2],a+16|0);s[c+12>>2]=Pb(o[c+40>>2],a+32|0);s[c+8>>2]=Ob(o[c+40>>2],a+32|0);s[c+4>>2]=Nb(o[c+40>>2],a+32|0);Oc(a,c+36|0,c+32|0,c+28|0,c+24|0,c+20|0,c+16|0,c+12|0,c+8|0,c+4|0);M=c+48|0}function bg(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0);l[o[o[b>>2]+68>>2]](a,b,c);if(v(l[o[o[b>>2]+48>>2]](b))!=v(0)){e=s[c+4>>2];d=s[c>>2];f=s[c+8>>2];g=v(l[o[o[b>>2]+48>>2]](b));b=v(v(v(d*d)+v(e*e))+v(f*f))<v(1.4210854715202004e-14);d=b?v(-1):d;h=d;f=b?v(-1):f;e=b?v(-1):e;d=v(v(1)/v(C(v(v(f*f)+v(v(d*d)+v(e*e))))));s[a>>2]=s[a>>2]+v(g*v(h*d));s[a+4>>2]=s[a+4>>2]+v(g*v(e*d));s[a+8>>2]=s[a+8>>2]+v(g*v(f*d))}}function QG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),l=0;l=o[a+96>>2];e=o[a+104>>2]+((b|0)%(l|0)<<4)|0;f=s[e>>2];g=s[e+4>>2];h=s[e+8>>2];i=s[a+16>>2];j=s[a+20>>2];k=s[a+12>>2];o[c+12>>2]=0;s[c+8>>2]=h*j;s[c+4>>2]=g*i;s[c>>2]=f*k;b=o[a+104>>2]+((b+1|0)%(l|0)<<4)|0;f=s[b>>2];g=s[b+4>>2];h=s[b+8>>2];i=s[a+16>>2];j=s[a+20>>2];k=s[a+12>>2];o[d+12>>2]=0;s[d+8>>2]=h*j;s[d+4>>2]=g*i;s[d>>2]=f*k}function VC(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);a:{if(c>>>0<=2){b:{switch(b+ -2|0){case 0:return v(s[((c<<2)+a|0)+756>>2]);case 2:return v(s[((c<<2)+a|0)+772>>2]);case 1:break b;default:break a}}return v(s[((c<<2)+a|0)+740>>2])}c=c+ -3|0;if(c>>>0>2){break a}c:{switch(b+ -2|0){case 0:return v(s[((c<<6)+a|0)+900>>2]);case 2:return v(s[((c<<6)+a|0)+904>>2]);case 1:break c;default:break a}}d=s[((c<<6)+a|0)+896>>2]}return v(d)}function Hl(a,b){var c=v(0),d=0,e=0,f=v(0),g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=0;g=o[a>>2];if((g|0)>=1){h=s[a+308>>2];i=s[b+8>>2];j=s[b+4>>2];k=s[b>>2];while(1){l=d;d=(e<<4)+a|0;c=v(k-s[d+4>>2]);f=v(c*c);c=v(j-s[d+8>>2]);f=v(f+v(c*c));c=v(i-s[d+12>>2]);d=l|v(f+v(c*c))<=h;e=e+1|0;if((g|0)!=(e|0)){continue}break}}if(!(s[b+12>>2]!=s[a+304>>2]|s[b+8>>2]!=s[a+300>>2]|(s[b+4>>2]!=s[a+296>>2]|s[b>>2]!=s[a+292>>2]))){d=1}return d&1}function _r(a){var b=0,c=0,d=0;d=M-16|0;M=d;o[d+12>>2]=26548;o[d+8>>2]=a;b=o[d+8>>2];c=o[b+4>>2];a=o[d+12>>2];o[a>>2]=o[b>>2];o[a+4>>2]=c;o[a+24>>2]=o[b+24>>2];c=o[b+20>>2];o[a+16>>2]=o[b+16>>2];o[a+20>>2]=c;c=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=c;Te(a+28|0,o[d+8>>2]+28|0);b=o[d+8>>2];c=o[b+80>>2];o[a+76>>2]=o[b+76>>2];o[a+80>>2]=c;o[a+92>>2]=o[b+92>>2];c=o[b+88>>2];o[a+84>>2]=o[b+84>>2];o[a+88>>2]=c;M=d+16|0}function Do(a,b){var c=0,d=0;c=M-48|0;M=c;o[c+44>>2]=b;b=o[c+44>>2];s[c+40>>2]=v(1)-v(s[b+12>>2]*s[b+12>>2]);a:{if(s[c+40>>2]<v(11920928955078125e-22)){s[c+36>>2]=1;s[c+32>>2]=0;s[c+28>>2]=0;Y(a,c+36|0,c+32|0,c+28|0);break a}d=M-16|0;s[d+12>>2]=s[c+40>>2];s[c+24>>2]=v(1)/v(C(s[d+12>>2]));s[c+20>>2]=s[b>>2]*s[c+24>>2];s[c+16>>2]=s[b+4>>2]*s[c+24>>2];s[c+12>>2]=s[b+8>>2]*s[c+24>>2];Y(a,c+20|0,c+16|0,c+12|0)}M=c+48|0}function pI(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0);fg(a,b,c);if(v(l[o[o[b>>2]+48>>2]](b))!=v(0)){e=s[c+4>>2];d=s[c>>2];f=s[c+8>>2];g=v(l[o[o[b>>2]+48>>2]](b));b=v(v(v(d*d)+v(e*e))+v(f*f))<v(1.4210854715202004e-14);d=b?v(-1):d;h=d;f=b?v(-1):f;e=b?v(-1):e;d=v(v(1)/v(C(v(v(f*f)+v(v(d*d)+v(e*e))))));s[a>>2]=s[a>>2]+v(g*v(h*d));s[a+4>>2]=s[a+4>>2]+v(g*v(e*d));s[a+8>>2]=s[a+8>>2]+v(g*v(f*d))}}function Ob(a,b){var c=0,d=v(0),e=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;d=s[o[b+12>>2]+4>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d*s[o[b+12>>2]>>2]);b=M-16|0;o[b+12>>2]=a+16;e=s[o[b+12>>2]+4>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d+v(e*s[o[b+12>>2]+4>>2]));b=M-16|0;o[b+12>>2]=a+32;e=s[o[b+12>>2]+4>>2];a=M-16|0;o[a+12>>2]=o[c+8>>2];M=c+16|0;return v(d+v(e*s[o[a+12>>2]+8>>2]))}function Nb(a,b){var c=0,d=v(0),e=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;d=s[o[b+12>>2]+8>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d*s[o[b+12>>2]>>2]);b=M-16|0;o[b+12>>2]=a+16;e=s[o[b+12>>2]+8>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d+v(e*s[o[b+12>>2]+4>>2]));b=M-16|0;o[b+12>>2]=a+32;e=s[o[b+12>>2]+8>>2];a=M-16|0;o[a+12>>2]=o[c+8>>2];M=c+16|0;return v(d+v(e*s[o[a+12>>2]+8>>2]))}function Ei(a,b,c,d,e){o[a>>2]=17764;o[a+4>>2]=o[b>>2];m[a+8|0]=e;o[a>>2]=22272;b=o[b>>2];m[a+88|0]=1;o[a- -64>>2]=0;o[a+60>>2]=b;o[a+12>>2]=22300;o[a+84>>2]=0;m[a+108|0]=1;o[a+76>>2]=0;o[a+80>>2]=0;o[a+104>>2]=0;m[a+128|0]=1;o[a+96>>2]=0;o[a+100>>2]=0;o[a+124>>2]=0;m[a+148|0]=1;o[a+116>>2]=0;o[a+120>>2]=0;o[a+144>>2]=0;o[a+136>>2]=0;o[a+140>>2]=0;o[a+16>>2]=o[(e?d:c)+8>>2];o[a+20>>2]=o[(e?c:d)+8>>2];Pc(a+12|0)}function eG(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0),f=v(0),g=v(0);f=s[a+36>>2];g=s[a+32>>2];e=s[a+28>>2];a=1065353216;d=c;a:{b:{c:{d:{e:{switch(c|0){case 1:c=0;a=-1082130432;d=0;break b;case 2:c=1065353216;break c;case 3:c=-1082130432;break c;case 4:d=1065353216;break d;case 0:break b;case 5:break e;default:break a}}d=-1082130432}a=0;e=f;c=0;break b}a=0;e=g;d=0}o[b+8>>2]=d;o[b+4>>2]=c;o[b>>2]=a;s[b+12>>2]=-e}}function Oe(a,b){var c=0,d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;b=o[d+8>>2];c=o[b+4>>2];a=o[d+12>>2];o[a>>2]=o[b>>2];o[a+4>>2]=c;o[a+24>>2]=o[b+24>>2];c=o[b+20>>2];o[a+16>>2]=o[b+16>>2];o[a+20>>2]=c;c=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=c;Be(a+28|0,o[d+8>>2]+28|0);b=o[d+8>>2];c=o[b+80>>2];o[a+76>>2]=o[b+76>>2];o[a+80>>2]=c;o[a+92>>2]=o[b+92>>2];c=o[b+88>>2];o[a+84>>2]=o[b+84>>2];o[a+88>>2]=c;M=d+16|0}function Cb(a){var b=0,c=0,d=0,e=0,f=0,g=v(0);d=M-16|0;M=d;b=o[a+12>>2];c=b;f=o[a+8>>2];a:{if((b|0)>0?1:(b|0)>=0?f>>>0<0?0:1:0){g=v(v(v(+(f>>>0)+4294967296*+(c>>>0))*v(0x10000000000000000))+v(+r[a>>2]+4294967296*+r[a+4>>2]));break a}e=o[a+4>>2];b=o[a>>2];a=b;o[d>>2]=0-a;o[d+4>>2]=0-(e+(0<a>>>0)|0);c=c^-1;a=!(a|e);e=f^-1;b=a+e|0;if(b>>>0<e>>>0){c=c+1|0}a=d;o[a+8>>2]=b;o[a+12>>2]=c;g=v(-Cb(a))}M=d+16|0;return g}function Yg(a,b,c){var d=0,e=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;c=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){b=o[d+16>>2]+(o[d+12>>2]<<4)|0;a=M-16|0;o[a+12>>2]=16;o[a+8>>2]=b;b=o[c+12>>2]+(o[d+12>>2]<<4)|0;e=o[b+4>>2];a=o[a+8>>2];o[a>>2]=o[b>>2];o[a+4>>2]=e;e=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=e;o[d+12>>2]=o[d+12>>2]+1;continue}break}M=d+32|0}function Pb(a,b){var c=0,d=v(0),e=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;d=s[o[b+12>>2]>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d*s[o[b+12>>2]>>2]);b=M-16|0;o[b+12>>2]=a+16;e=s[o[b+12>>2]>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d+v(e*s[o[b+12>>2]+4>>2]));b=M-16|0;o[b+12>>2]=a+32;e=s[o[b+12>>2]>>2];a=M-16|0;o[a+12>>2]=o[c+8>>2];M=c+16|0;return v(d+v(e*s[o[a+12>>2]+8>>2]))}function gG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=M-48|0;M=e;l[o[o[a>>2]+124>>2]](a,e+32|0,d);d=o[e+32>>2];f=o[e+36>>2];g=o[e+40>>2];o[b+12>>2]=0;o[b+8>>2]=g;o[b+4>>2]=f;o[b>>2]=d;o[e+12>>2]=0;o[e+8>>2]=g^-2147483648;o[e+4>>2]=f^-2147483648;o[e>>2]=d^-2147483648;l[o[o[a>>2]+64>>2]](e+16|0,a,e);a=o[e+28>>2];o[c+8>>2]=o[e+24>>2];o[c+12>>2]=a;a=o[e+20>>2];o[c>>2]=o[e+16>>2];o[c+4>>2]=a;M=e+48|0}function xK(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0);d=s[c>>2];e=s[c+4>>2];f=s[c+8>>2];g=v(v(v(d*s[b+72>>2])+v(e*s[b+76>>2]))+v(f*s[b+80>>2]));h=v(v(v(d*s[b+88>>2])+v(e*s[b+92>>2]))+v(f*s[b+96>>2]));d=v(v(v(d*s[b+56>>2])+v(e*s[b+60>>2]))+v(f*s[b- -64>>2]));b=(b+56|0)+((d<g?g<h?2:1:(d<h)<<1)<<4)|0;c=o[b+4>>2];o[a>>2]=o[b>>2];o[a+4>>2]=c;c=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=c}function Ce(a,b,c,d,e,f,g,h,i,j){var k=0;k=M-48|0;M=k;o[k+40>>2]=a;o[k+36>>2]=b;o[k+32>>2]=c;o[k+28>>2]=d;o[k+24>>2]=e;o[k+20>>2]=f;o[k+16>>2]=g;o[k+12>>2]=h;o[k+8>>2]=i;o[k+4>>2]=j;a=o[k+40>>2];o[k+44>>2]=a;c=a+48|0;b=a;while(1){o[(M-16|0)+12>>2]=b;d=b+16|0;b=d;if((c|0)!=(b|0)){continue}break}Oc(a,o[k+36>>2],o[k+32>>2],o[k+28>>2],o[k+24>>2],o[k+20>>2],o[k+16>>2],o[k+12>>2],o[k+8>>2],o[k+4>>2]);M=k+48|0}function sB(a,b,c){o[a>>2]=19996;o[a+104>>2]=0;o[a+100>>2]=c;m[a+20|0]=1;o[a+16>>2]=0;m[a+40|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+36>>2]=0;m[a+60|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;o[a+56>>2]=0;m[a+80|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;o[a+76>>2]=0;m[a+148|0]=1;o[a+68>>2]=0;o[a+72>>2]=0;o[a+144>>2]=0;o[a+136>>2]=0;o[a+140>>2]=0;o[a+128>>2]=1;o[a+120>>2]=0;o[a+124>>2]=2;o[a+116>>2]=b;o[a+108>>2]=0;o[a+112>>2]=0}function Wc(a,b,c){var d=0,e=0,f=0,g=0;e=Rd(a,b);a:{if(!e){e=0;break a}f=o[a+8>>2];if((f|0)>=0){if(!f){break a}while(1){d=o[e+32>>2];if(!d){break a}e=d;g=g+1|0;if((f|0)!=(g|0)){continue}break}break a}e=o[a>>2]}d=o[c+4>>2];o[b>>2]=o[c>>2];o[b+4>>2]=d;d=o[c+28>>2];o[b+24>>2]=o[c+24>>2];o[b+28>>2]=d;d=o[c+20>>2];o[b+16>>2]=o[c+16>>2];o[b+20>>2]=d;d=o[c+12>>2];o[b+8>>2]=o[c+8>>2];o[b+12>>2]=d;Qd(a,e,b)}function Gn(a,b){var c=0,d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;b=M-16|0;a=o[d+12>>2];o[b+12>>2]=a;o[d+4>>2]=o[o[b+12>>2]+4>>2];b=o[d+4>>2];c=M-16|0;o[c+12>>2]=a;if(o[o[c+12>>2]+8>>2]==(b|0)){c=M-16|0;o[c+12>>2]=a;b=o[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=a;if(o[c+8>>2]){c=o[c+8>>2]<<1}else{c=1}ah(b,c)}o[o[a+12>>2]+(o[a+4>>2]<<2)>>2]=o[o[d+8>>2]>>2];o[a+4>>2]=o[a+4>>2]+1;M=d+16|0}function Fn(a,b){var c=0,d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;b=M-16|0;a=o[d+12>>2];o[b+12>>2]=a;o[d+4>>2]=o[o[b+12>>2]+4>>2];b=o[d+4>>2];c=M-16|0;o[c+12>>2]=a;if(o[o[c+12>>2]+8>>2]==(b|0)){c=M-16|0;o[c+12>>2]=a;b=o[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=a;if(o[c+8>>2]){c=o[c+8>>2]<<1}else{c=1}_g(b,c)}s[o[a+12>>2]+(o[a+4>>2]<<2)>>2]=s[o[d+8>>2]>>2];o[a+4>>2]=o[a+4>>2]+1;M=d+16|0}function Qn(a,b,c,d,e,f){var g=0;g=M-32|0;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;s[g+8>>2]=f;a=o[g+28>>2];o[a>>2]=o[g+24>>2];o[a+4>>2]=o[g+20>>2];b=o[g+16>>2];c=o[b+4>>2];o[a+8>>2]=o[b>>2];o[a+12>>2]=c;c=o[b+12>>2];o[a+16>>2]=o[b+8>>2];o[a+20>>2]=c;b=o[g+12>>2];c=o[b+4>>2];o[a+24>>2]=o[b>>2];o[a+28>>2]=c;c=o[b+12>>2];o[a+32>>2]=o[b+8>>2];o[a+36>>2]=c;s[a+40>>2]=s[g+8>>2]}function gp(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0;l=M-48|0;M=l;o[l+44>>2]=a;o[l+40>>2]=b;o[l+36>>2]=c;o[l+32>>2]=d;o[l+28>>2]=e;o[l+24>>2]=f;o[l+20>>2]=g;o[l+16>>2]=h;o[l+12>>2]=i;m[l+11|0]=j;o[l+4>>2]=k;a=Ey(o[l+40>>2],o[l+36>>2],o[l+32>>2],o[l+28>>2],o[l+24>>2],o[l+20>>2],o[l+16>>2],o[l+12>>2],m[l+11|0]&1,o[l+4>>2]);M=l+48|0;return a|0}function tn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-32|0;M=e;o[e+28>>2]=a;o[e+24>>2]=b;o[e+20>>2]=c;o[e+16>>2]=d;o[e+12>>2]=o[o[e+24>>2]>>2];o[e+8>>2]=o[o[e+20>>2]>>2];o[e+4>>2]=gd(o[e+12>>2]);o[e>>2]=gd(o[e+8>>2]);if(o[e+4>>2]){a=o[e+4>>2];l[o[o[a>>2]+32>>2]](a,o[e+20>>2],o[e+16>>2],o[e+24>>2])}if(o[e>>2]){a=o[e>>2];l[o[o[a>>2]+32>>2]](a,o[e+24>>2],o[e+16>>2],o[e+20>>2])}M=e+32|0;return 0}function lD(a){a=a|0;var b=0;o[a>>2]=18620;b=o[a+80>>2];if(b){if(p[a+84|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+80>>2]=0}o[a+80>>2]=0;m[a+84|0]=1;o[a+72>>2]=0;o[a+76>>2]=0;b=o[a+60>>2];if(b){if(p[a- -64|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+60>>2]=0}o[a+60>>2]=0;m[a- -64|0]=1;o[a+52>>2]=0;o[a+56>>2]=0;b=o[a+40>>2];if(!(!b|!p[a+44|0])){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}ba(a)}function MF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=0,l=v(0);if((d|0)>=1){while(1){f=s[a+32>>2];g=s[a+28>>2];k=i<<4;e=k+b|0;j=s[e>>2];h=s[e+8>>2];l=v(C(v(v(j*j)+v(h*h))));a:{if(l!=v(0)){g=v(g/l);h=v(h*g);g=v(j*g);f=s[e+4>>2]<v(0)?v(-f):f;break a}h=v(0);f=s[e+4>>2]<v(0)?v(-f):f}e=c+k|0;s[e+8>>2]=h;s[e+4>>2]=f;s[e>>2]=g;i=i+1|0;if((i|0)!=(d|0)){continue}break}}}function LF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=0,l=v(0);if((d|0)>=1){while(1){f=s[a+36>>2];g=s[a+28>>2];k=i<<4;e=k+b|0;j=s[e>>2];h=s[e+4>>2];l=v(C(v(v(j*j)+v(h*h))));a:{if(l!=v(0)){g=v(g/l);h=v(h*g);g=v(j*g);f=s[e+8>>2]<v(0)?v(-f):f;break a}h=v(0);f=s[e+8>>2]<v(0)?v(-f):f}e=c+k|0;s[e+8>>2]=f;s[e+4>>2]=h;s[e>>2]=g;i=i+1|0;if((i|0)!=(d|0)){continue}break}}}function ag(a,b){a=a|0;b=b|0;var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0);c=v(l[o[o[a>>2]+48>>2]](a));d=v(l[o[o[a>>2]+48>>2]](a));e=v(l[o[o[a>>2]+48>>2]](a));f=s[a+16>>2];g=s[a+32>>2];h=s[a+20>>2];i=s[a+36>>2];j=s[a+12>>2];k=s[a+28>>2];ae(a,b);o[a+40>>2]=0;s[a+36>>2]=v(v(v(e+i)/h)*s[a+20>>2])-e;s[a+32>>2]=v(v(v(d+g)/f)*s[a+16>>2])-d;s[a+28>>2]=v(v(v(c+k)/j)*s[a+12>>2])-c}function Dh(a,b){var c=0,d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;b=M-16|0;a=o[d+12>>2];o[b+12>>2]=a;o[d+4>>2]=o[o[b+12>>2]+4>>2];b=o[d+4>>2];c=M-16|0;o[c+12>>2]=a;if(o[o[c+12>>2]+8>>2]==(b|0)){c=M-16|0;o[c+12>>2]=a;b=o[o[c+12>>2]+4>>2];c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=a;if(o[c+8>>2]){c=o[c+8>>2]<<1}else{c=1}Ch(b,c)}Oe(o[a+12>>2]+u(o[a+4>>2],96)|0,o[d+8>>2]);o[a+4>>2]=o[a+4>>2]+1;M=d+16|0}function hC(a,b){a=a|0;b=b|0;var c=0,d=0,e=v(0);if(p[a+527|0]){o[b>>2]=0;o[b+4>>2]=0;return}o[b>>2]=3;o[b+4>>2]=3;c=o[a+28>>2];d=o[a+32>>2];Hf(a,c+4|0,d+4|0,c+264|0,d+264|0);a:{if(!p[a+526|0]){break a}c=o[b>>2];o[b>>2]=c+1;d=o[b+4>>2];o[b+4>>2]=d+ -1;e=s[a+456>>2];if(s[a+444>>2]<e^1|s[a+448>>2]<e^1){break a}o[b+4>>2]=d+ -2;o[b>>2]=c+2}if(p[a+525|0]){o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}}function KF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=v(0),g=v(0),h=v(0),i=0,j=v(0),k=0,l=v(0);if((d|0)>=1){while(1){f=s[a+28>>2];g=s[a+32>>2];k=i<<4;e=k+b|0;j=s[e+4>>2];h=s[e+8>>2];l=v(C(v(v(j*j)+v(h*h))));a:{if(l!=v(0)){g=v(g/l);h=v(h*g);g=v(j*g);f=s[e>>2]<v(0)?v(-f):f;break a}h=v(0);f=s[e>>2]<v(0)?v(-f):f}e=c+k|0;s[e+8>>2]=h;s[e+4>>2]=g;s[e>>2]=f;i=i+1|0;if((i|0)!=(d|0)){continue}break}}}function ea(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;b=M-16|0;o[b+12>>2]=o[d+28>>2];o[b+8>>2]=0;s[d+20>>2]=eb(o[b+12>>2]+(o[b+8>>2]<<4)|0,o[d+24>>2]);b=M-16|0;o[b+12>>2]=o[d+28>>2];o[b+8>>2]=1;s[d+16>>2]=eb(o[b+12>>2]+(o[b+8>>2]<<4)|0,o[d+24>>2]);b=M-16|0;o[b+12>>2]=o[d+28>>2];o[b+8>>2]=2;s[d+12>>2]=eb(o[b+12>>2]+(o[b+8>>2]<<4)|0,o[d+24>>2]);Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function em(a,b){var c=0,d=0;o[a+4>>2]=2;o[a>>2]=4196;o[a+5256>>2]=b;o[a+28>>2]=7088;o[a+60>>2]=78;m[a+24|0]=1;o[a+20>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+64>>2]=l[o[o[b>>2]+12>>2]](b);o[a+68>>2]=l[o[o[b>>2]+8>>2]](b);while(1){b=0;while(1){d=o[a+5256>>2];o[((u(c,144)+a|0)+(b<<2)|0)+72>>2]=l[o[o[d>>2]+16>>2]](d,c,b);b=b+1|0;if((b|0)!=36){continue}break}c=c+1|0;if((c|0)!=36){continue}break}}function Te(a,b){var c=0,d=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];d=o[b+4>>2];a=o[c+12>>2];o[a>>2]=o[b>>2];o[a+4>>2]=d;d=o[b+12>>2];o[a+8>>2]=o[b+8>>2];o[a+12>>2]=d;b=o[c+8>>2];d=o[b+20>>2];o[a+16>>2]=o[b+16>>2];o[a+20>>2]=d;d=o[b+28>>2];o[a+24>>2]=o[b+24>>2];o[a+28>>2]=d;b=o[c+8>>2];c=o[b+36>>2];o[a+32>>2]=o[b+32>>2];o[a+36>>2]=c;c=o[b+44>>2];o[a+40>>2]=o[b+40>>2];o[a+44>>2]=c}function ik(a,b){o[a>>2]=17276;ac(a+4|0);ac(a- -64|0);m[a+193|0]=256;m[a+194|0]=1;m[a+192|0]=!b;o[a+164>>2]=0;o[a+140>>2]=0;o[a+144>>2]=0;o[a+176>>2]=0;o[a+168>>2]=0;o[a+172>>2]=0;o[a+156>>2]=10;o[a+160>>2]=1;o[a+148>>2]=1;o[a+152>>2]=0;if(!b){o[7717]=o[7717]+1;b=l[o[6606]](76,16)|0;Wf(b)}o[a+188>>2]=0;o[a+136>>2]=b;o[a+180>>2]=0;o[a+184>>2]=0;o[a+124>>2]=0;o[a+128>>2]=0;o[a+132>>2]=0}function hJ(a){a=a|0;var b=0,c=0,d=0,e=0;o[a>>2]=10356;d=o[a+12>>2];if((d|0)>=1){while(1){e=b<<2;c=o[e+o[a+20>>2]>>2];if(c){l[o[o[c>>2]>>2]](c)|0;c=o[a+4>>2];l[o[o[c>>2]+60>>2]](c,o[o[a+20>>2]+e>>2])}b=b+1|0;if((d|0)!=(b|0)){continue}break}}b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+20>>2]=0}o[a+20>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;m[a+24|0]=1;return a|0}function gJ(a){a=a|0;var b=0,c=0,d=0,e=0;o[a>>2]=10356;d=o[a+12>>2];if((d|0)>=1){while(1){e=b<<2;c=o[e+o[a+20>>2]>>2];if(c){l[o[o[c>>2]>>2]](c)|0;c=o[a+4>>2];l[o[o[c>>2]+60>>2]](c,o[o[a+20>>2]+e>>2])}b=b+1|0;if((d|0)!=(b|0)){continue}break}}b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+20>>2]=0}o[a+20>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;m[a+24|0]=1;ba(a)}function _I(a,b,c){var d=0,e=0,f=0;o[6998]=o[6998]+1;d=c<<16|b;d=(d<<15^-1)+d|0;d=u(d>>10^d,9);d=d>>6^d;d=(d<<11^-1)+d|0;d=o[a+12>>2]+ -1&(d>>16^d);a:{b:{if((d|0)>=o[a+32>>2]){break b}d=o[o[a+40>>2]+(d<<2)>>2];if((d|0)==-1){break b}f=o[a+16>>2];while(1){e=u(d,12)+f|0;if(o[e+4>>2]==(c|0)?o[e>>2]==(b|0):0){break a}d=o[o[a+60>>2]+(d<<2)>>2];if((d|0)!=-1){continue}break}}e=0}return e}function Fw(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];Ew(a);o[a>>2]=1132;b=o[d+8>>2];c=o[b+4>>2];o[a+12>>2]=o[b>>2];o[a+16>>2]=c;c=o[b+12>>2];o[a+20>>2]=o[b+8>>2];o[a+24>>2]=c;b=o[d+4>>2];c=o[b+4>>2];o[a+28>>2]=o[b>>2];o[a+32>>2]=c;c=o[b+12>>2];o[a+36>>2]=o[b+8>>2];o[a+40>>2]=c;o[(M-16|0)+12>>2]=a+44;o[(M-16|0)+12>>2]=a+60;o[a+76>>2]=0;M=d+16|0}function $c(a,b){a=a|0;b=v(b);var c=v(0),d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0);c=v(l[o[o[a>>2]+48>>2]](a));d=v(l[o[o[a>>2]+48>>2]](a));e=v(l[o[o[a>>2]+48>>2]](a));s[a+44>>2]=b;b=s[a+36>>2];f=s[a+32>>2];g=s[a+28>>2];h=v(l[o[o[a>>2]+48>>2]](a));i=v(l[o[o[a>>2]+48>>2]](a));j=v(l[o[o[a>>2]+48>>2]](a));o[a+40>>2]=0;s[a+32>>2]=v(d+f)-i;s[a+28>>2]=v(c+g)-h;s[a+36>>2]=v(e+b)-j}function Vy(a,b){a=a|0;b=v(b);var c=0,d=0;c=o[a+452>>2];d=a+324|0;l[o[o[c>>2]+16>>2]](c,d,0);c=o[a+452>>2];l[o[o[c>>2]+12>>2]](c)|0;Kj(a,b);ia(22822);if(o[a+328>>2]){Pz(d)}c=o[a+452>>2];l[o[o[c>>2]+28>>2]](c,v(s[c+12>>2]*b));ga();if(o[a+328>>2]>=1){c=0;while(1){d=o[o[a+336>>2]+(c<<2)>>2];Hi(d,d);c=c+1|0;if((c|0)<o[a+328>>2]){continue}break}}a=o[a+452>>2];l[o[o[a>>2]+32>>2]](a)}function Qk(a){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;m[a+88|0]=0;o[a+84>>2]=0;o[a+76>>2]=-1082130432;o[a+80>>2]=-1082130432;o[a+68>>2]=0;o[a+72>>2]=-1082130432;o[a+60>>2]=1065353216;o[a+64>>2]=1065353216;o[a>>2]=12932;o[a+52>>2]=0;o[a+56>>2]=1065353216;return a}function nG(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0),k=v(0),m=v(0);d=s[b+32>>2];e=s[b+36>>2];f=s[b+28>>2];g=v(l[o[o[b>>2]+48>>2]](b));h=v(l[o[o[b>>2]+48>>2]](b));i=v(l[o[o[b>>2]+48>>2]](b));j=s[c>>2];k=s[c+4>>2];m=s[c+8>>2];o[a+12>>2]=0;e=v(e+i);s[a+8>>2]=m>=v(0)?e:v(-e);d=v(d+h);s[a+4>>2]=k>=v(0)?d:v(-d);d=v(f+g);s[a>>2]=j>=v(0)?d:v(-d)}function YD(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=M-16|0;M=f;c=o[a+4>>2];a:{if((c|0)<=0){break a}g=o[a+12>>2];while(1){h=(d<<3)+g|0;i=h;b=d;e=o[h>>2];if((b|0)!=(e|0)){while(1){b=(e<<3)+g|0;o[i>>2]=o[b>>2];b=o[b>>2];i=(b<<3)+g|0;e=o[i>>2];if((b|0)!=(e|0)){continue}break}}o[h>>2]=b;d=d+1|0;if((c|0)!=(d|0)){continue}break}if((c|0)<2){break a}Qj(a,f+8|0,0,c+ -1|0)}M=f+16|0}function hG(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);e=s[a+36>>2];d=s[a+32>>2];f=s[a+28>>2];g=v(l[o[o[a>>2]+48>>2]](a));h=v(l[o[o[a>>2]+48>>2]](a));i=v(l[o[o[a>>2]+48>>2]](a));o[c+12>>2]=0;d=v(d+h);a=b>>>1&1;s[c+4>>2]=v(d*v(a^1))-v(d*v(a|0));d=v(f+g);a=b&1;s[c>>2]=v(d*v(a^1))-v(d*v(a|0));e=v(e+i);a=b>>>2&1;s[c+8>>2]=v(e*v(a^1))-v(e*v(a|0))}function Vn(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;d=o[c+12>>2];a=d;o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;o[a>>2]=11556;o[a+4>>2]=8;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=d+28;s[a+8>>2]=b;s[o[a+12>>2]>>2]=s[a+8>>2];s[d+44>>2]=s[c+8>>2];M=c+16|0}function Op(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];Yh(a);o[a>>2]=1740;b=o[d+8>>2];c=o[b+4>>2];o[a+20>>2]=o[b>>2];o[a+24>>2]=c;c=o[b+12>>2];o[a+28>>2]=o[b+8>>2];o[a+32>>2]=c;b=o[d+4>>2];c=o[b+4>>2];o[a+36>>2]=o[b>>2];o[a+40>>2]=c;c=o[b+12>>2];o[a+44>>2]=o[b+8>>2];o[a+48>>2]=c;o[(M-16|0)+12>>2]=a+52;o[(M-16|0)+12>>2]=a+68;M=d+16|0}function ww(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];Yh(a);o[a>>2]=1296;Ec(a+20|0);b=o[d+8>>2];c=o[b+4>>2];o[a+40>>2]=o[b>>2];o[a+44>>2]=c;c=o[b+12>>2];o[a+48>>2]=o[b+8>>2];o[a+52>>2]=c;b=o[d+4>>2];c=o[b+4>>2];o[a+56>>2]=o[b>>2];o[a+60>>2]=c;c=o[b+12>>2];o[a+64>>2]=o[b+8>>2];o[a+68>>2]=c;Ec(a+72|0);Ec(a+92|0);Ec(a+112|0);M=d+16|0}function qG(a,b,c){a=a|0;b=v(b);c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);d=s[a+36>>2];e=s[a+32>>2];f=s[a+28>>2];g=v(l[o[o[a>>2]+48>>2]](a));h=v(l[o[o[a>>2]+48>>2]](a));i=v(l[o[o[a>>2]+48>>2]](a));o[c+12>>2]=0;b=v(b/v(12));f=v(f+g);f=v(f+f);f=v(f*f);e=v(e+h);e=v(e+e);e=v(e*e);s[c+8>>2]=b*v(f+e);d=v(d+i);d=v(d+d);d=v(d*d);s[c+4>>2]=b*v(f+d);s[c>>2]=b*v(e+d)}function hp(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=M-48|0;M=k;o[k+44>>2]=a;o[k+40>>2]=b;o[k+36>>2]=c;o[k+32>>2]=d;o[k+28>>2]=e;o[k+24>>2]=f;o[k+20>>2]=g;o[k+16>>2]=h;o[k+12>>2]=i;m[k+11|0]=j;a=Fy(o[k+40>>2],o[k+36>>2],o[k+32>>2],o[k+28>>2],o[k+24>>2],o[k+20>>2],o[k+16>>2],o[k+12>>2],m[k+11|0]&1);M=k+48|0;return a|0}function wm(a,b){var c=v(0),d=v(0),e=0,f=0,g=v(0),h=0,i=v(0),j=v(0),k=v(0);h=o[a+748>>2];a:{if((h|0)<1){f=-1;break a}i=s[b+8>>2];j=s[b+4>>2];k=s[b>>2];d=s[a+752>>2];d=v(d*d);b=0;f=-1;while(1){e=u(b,184)+a|0;c=v(s[e+4>>2]-k);g=v(c*c);c=v(s[e+8>>2]-j);g=v(g+v(c*c));c=v(s[e+12>>2]-i);c=v(g+v(c*c));e=c<d;d=e?c:d;f=e?b:f;b=b+1|0;if((h|0)!=(b|0)){continue}break}}return f}function mr(a,b){var c=0,d=0;c=M+ -64|0;M=c;o[c+60>>2]=a;o[c+56>>2]=b;b=o[c+60>>2];a=M-16|0;o[a+12>>2]=o[c+56>>2];o[c+52>>2]=o[o[a+12>>2]+4>>2];d=o[c+52>>2];a=c+8|0;o[a>>2]=0;o[a+4>>2]=0;o[a+40>>2]=0;o[a+32>>2]=0;o[a+36>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;Fm(a);Em(b,d,a);Gg(o[c+56>>2],o[c+52>>2],o[b+12>>2]);M=c- -64|0}function GJ(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=v(0),g=0,h=0;c=M-32|0;M=c;d=o[a+184>>2];a:{if(s[d+4>>2]==v(0)){break a}e=1;b=o[b>>2];if(!l[o[o[d>>2]+8>>2]](d,o[b+188>>2])){break a}f=s[a+188>>2];d=o[a+184>>2];g=o[a+192>>2];h=o[b+192>>2];o[c+24>>2]=-1;o[c+28>>2]=-1;o[c+20>>2]=b+4;o[c+16>>2]=b;o[c+12>>2]=h;o[c+8>>2]=0;jg(g,a+36|0,a+100|0,c+8|0,d,f)}M=c+32|0;return e|0}function XH(a){a=a|0;var b=0;o[a>>2]=11368;b=o[a+120>>2];if(b){if(p[a+124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+120>>2]=0}o[a+120>>2]=0;m[a+124|0]=1;o[a+112>>2]=0;o[a+116>>2]=0;b=o[a+100>>2];if(b){if(p[a+104|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+100>>2]=0}o[a+100>>2]=0;m[a+104|0]=1;o[a+92>>2]=0;o[a+96>>2]=0;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function HD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=b;d=o[c+4>>2];o[a+248>>2]=o[c>>2];o[a+252>>2]=d;d=o[c+12>>2];o[a+256>>2]=o[c+8>>2];o[a+260>>2]=d;c=o[a+232>>2];if((c|0)>=1){while(1){a:{b:{d=o[o[a+240>>2]+(e<<2)>>2];switch(o[d+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}if(m[d+504|0]&1){break a}Nd(d,b);c=o[a+232>>2]}e=e+1|0;if((e|0)<(c|0)){continue}break}}}function ey(a,b){a:{if((b|0)>=128){a=v(a*v(1.7014118346046923e+38));if((b|0)<255){b=b+ -127|0;break a}a=v(a*v(1.7014118346046923e+38));b=((b|0)<381?b:381)+ -254|0;break a}if((b|0)>-127){break a}a=v(a*v(1.1754943508222875e-38));if((b|0)>-253){b=b+126|0;break a}a=v(a*v(1.1754943508222875e-38));b=((b|0)>-378?b:-378)+252|0}return v(a*(e(0,(b<<23)+1065353216|0),i()))}function Yz(a,b,c,d){var e=0,f=0,g=0,h=0;e=M-32|0;M=e;a:{if(o[a+988>>2]|!o[a+752>>2]){break a}h=a+988|0;Yc(h);if(o[a+752>>2]<1){break a}while(1){g=o[a+760>>2]+u(f,44)|0;zf(e,g,v(0));o[g+40>>2]=bb(h,e,g);f=f+1|0;if((f|0)<o[a+752>>2]){continue}break}}o[d+12>>2]=1065353216;o[d>>2]=a;o[d+4>>2]=0;o[d+8>>2]=-1;a=Xz(a,b,c,d+12|0,d+4|0,d+8|0);M=e+32|0;return(a|0)!=0}



function Tm(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;c=M-16|0;b=o[d+28>>2];o[c+12>>2]=b;s[d+20>>2]=s[o[c+12>>2]>>2]*s[o[d+24>>2]>>2];c=M-16|0;o[c+12>>2]=b;s[d+16>>2]=s[o[c+12>>2]+4>>2]*s[o[d+24>>2]>>2];c=M-16|0;o[c+12>>2]=b;s[d+12>>2]=s[o[c+12>>2]+8>>2]*s[o[d+24>>2]>>2];s[d+8>>2]=s[b+12>>2]*s[o[d+24>>2]>>2];id(a,d+20|0,d+16|0,d+12|0,d+8|0);M=d+32|0}function un(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;o[d+16>>2]=o[o[d+24>>2]>>2];o[d+12>>2]=o[o[d+20>>2]>>2];o[d+8>>2]=gd(o[d+16>>2]);o[d+4>>2]=gd(o[d+12>>2]);if(o[d+8>>2]){a=o[d+8>>2];l[o[o[a>>2]+28>>2]](a,o[d+20>>2],o[d+24>>2])}if(o[d+4>>2]){a=o[d+4>>2];l[o[o[a>>2]+28>>2]](a,o[d+24>>2],o[d+20>>2])}M=d+32|0;return 0}function Sx(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(Fa(a,o[b+8>>2],e)){if(!(o[b+28>>2]==1|o[b+4>>2]!=(c|0))){o[b+28>>2]=d}return}a:{if(!Fa(a,o[b>>2],e)){break a}if(!(o[b+20>>2]!=(c|0)?o[b+16>>2]!=(c|0):0)){if((d|0)!=1){break a}o[b+32>>2]=1;return}o[b+20>>2]=c;o[b+32>>2]=d;o[b+40>>2]=o[b+40>>2]+1;if(!(o[b+36>>2]!=1|o[b+24>>2]!=2)){m[b+54|0]=1}o[b+44>>2]=4}}function pv(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=v(d);e=v(e);f=v(f);g=g|0;h=h|0;i=i|0;var j=0;j=M-48|0;M=j;o[j+44>>2]=a;o[j+40>>2]=b;o[j+36>>2]=c;s[j+32>>2]=d;s[j+28>>2]=e;s[j+24>>2]=f;o[j+20>>2]=g;o[j+16>>2]=h;m[j+15|0]=i;a=aa(124);_F(a,o[j+44>>2],o[j+40>>2],o[j+36>>2],s[j+32>>2],s[j+28>>2],s[j+24>>2],o[j+20>>2],o[j+16>>2],m[j+15|0]&1);M=j+48|0;return a|0}function Xk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=v(0),f=v(0),g=v(0),h=v(0),i=v(0),j=v(0);h=v(l[o[o[a>>2]+48>>2]](a));i=v(l[o[o[a>>2]+48>>2]](a));j=v(l[o[o[a>>2]+48>>2]](a));e=s[b+52>>2];f=s[b+56>>2];g=s[b+48>>2];o[c+12>>2]=0;s[c+8>>2]=f-j;s[c+4>>2]=e-i;s[c>>2]=g-h;e=s[b+52>>2];f=s[b+56>>2];g=s[b+48>>2];o[d+12>>2]=0;s[d+8>>2]=j+f;s[d+4>>2]=i+e;s[d>>2]=h+g}function aD(a,b){var c=v(0),d=v(0);c=s[a+32>>2];a:{if(!!(c<v(1))){if(!!(c>v(-1))){s[b>>2]=_a(v(-s[a+36>>2]),s[a+40>>2]);s[b+4>>2]=fy(v(y(v(z(s[a+32>>2],v(-1))),v(1))));s[b+8>>2]=_a(v(-s[a+16>>2]),s[a>>2]);return}c=s[a+20>>2];d=s[a+4>>2];o[b+4>>2]=-1077342245;s[b>>2]=-_a(d,c);break a}c=s[a+20>>2];d=s[a+4>>2];o[b+4>>2]=1070141403;s[b>>2]=_a(d,c)}s[b+8>>2]=0}function GE(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-48|0;M=e;o[e+44>>2]=d;o[e+40>>2]=17516;d=o[b+12>>2];o[e+16>>2]=o[b+8>>2];o[e+20>>2]=d;d=o[b+4>>2];o[e+8>>2]=o[b>>2];o[e+12>>2]=d;b=o[c+12>>2];o[e+32>>2]=o[c+8>>2];o[e+36>>2]=b;b=o[c+4>>2];o[e+24>>2]=o[c>>2];o[e+28>>2]=b;Jb(a+4|0,o[a+4>>2],e+8|0,e+40|0);a=a- -64|0;Jb(a,o[a>>2],e+8|0,e+40|0);M=e+48|0}function gm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=o[b>>2];d=d?d:o[a+188>>2];e=o[a+268>>2];a:{if((e|0)<1){break a}g=o[a+276>>2];while(1){h=(f<<2)+g|0;if(o[h>>2]!=(i|0)){f=f+1|0;if((e|0)!=(f|0)){continue}break a}break}if((f|0)>=(e|0)){break a}e=e+ -1|0;o[h>>2]=o[(e<<2)+g>>2];o[a+268>>2]=e;a=o[a+284>>2];l[o[o[a>>2]+12>>2]](a,d,b,c)|0}}function lG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=v(0),i=v(0),j=v(0),k=v(0),l=v(0),m=v(0);if((d|0)>=1){while(1){g=f<<4;e=g+b|0;k=s[e>>2];l=s[e+4>>2];m=s[e+8>>2];h=s[a+28>>2];i=s[a+32>>2];j=s[a+36>>2];e=c+g|0;o[e+12>>2]=0;s[e+8>>2]=m>=v(0)?j:v(-j);s[e+4>>2]=l>=v(0)?i:v(-i);s[e>>2]=k>=v(0)?h:v(-h);f=f+1|0;if((f|0)!=(d|0)){continue}break}}}function bh(a,b,c,d){var e=0;e=M-32|0;o[e+28>>2]=a;o[e+24>>2]=b;o[e+20>>2]=c;s[e+16>>2]=d;a=o[e+28>>2];s[e+12>>2]=v(1)-s[e+16>>2];s[a>>2]=v(s[e+12>>2]*s[o[e+24>>2]>>2])+v(s[e+16>>2]*s[o[e+20>>2]>>2]);s[a+4>>2]=v(s[e+12>>2]*s[o[e+24>>2]+4>>2])+v(s[e+16>>2]*s[o[e+20>>2]+4>>2]);s[a+8>>2]=v(s[e+12>>2]*s[o[e+24>>2]+8>>2])+v(s[e+16>>2]*s[o[e+20>>2]+8>>2])}function yi(a){var b=0;if(o[a+12>>2]){o[a+4>>2]=0;b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+20>>2]=0}o[a+20>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;m[a+24|0]=1}if(o[a+40>>2]){o[a+32>>2]=0;b=o[a+48>>2];if(b){if(p[a+52|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+48>>2]=0}o[a+48>>2]=0;o[a+40>>2]=0;o[a+44>>2]=0;m[a+52|0]=1}}function ck(a,b,c,d,e){var f=0,g=0;while(1){a:{b:{if(q[e>>1]<q[b>>1]|q[d>>1]>q[b+6>>1]|(q[e+4>>1]<q[b+4>>1]|q[d+4>>1]>q[b+10>>1])){break b}if(q[e+2>>1]<q[b+2>>1]|q[d+2>>1]>q[b+8>>1]){break b}f=o[b+12>>2];if((f|0)<0){break a}l[o[o[c>>2]+8>>2]](c,f>>>21|0,f&2097151)}return}f=b+16|0;ck(a,f,c,d,e);g=b+32|0;b=o[b+28>>2];b=(b|0)>-1?g:f-(b<<4)|0;continue}}function _H(a,b,c){a=a|0;b=v(b);c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);d=s[a+76>>2];g=s[a+60>>2];e=s[a+72>>2];h=s[a+56>>2];f=s[a+68>>2];i=s[a+52>>2];o[c+12>>2]=0;b=v(b/v(12));f=v(v(f-i)*v(.5));f=v(f+f);f=v(f*f);e=v(v(e-h)*v(.5));e=v(e+e);e=v(e*e);s[c+8>>2]=b*v(f+e);d=v(v(d-g)*v(.5));d=v(d+d);d=v(d*d);s[c+4>>2]=b*v(f+d);s[c>>2]=b*v(e+d)}function WG(a){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;m[a+84|0]=0;o[a+76>>2]=-1082130432;o[a+80>>2]=0;o[a+68>>2]=-1082130432;o[a+72>>2]=-1082130432;o[a+60>>2]=1065353216;o[a+64>>2]=0;o[a+52>>2]=1065353216;o[a+56>>2]=1065353216;o[a>>2]=13544;return a}function wb(a,b){var c=0,d=v(0),e=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];d=s[a>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d*s[o[b+12>>2]>>2]);e=s[a+4>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];d=v(d+v(e*s[o[b+12>>2]+4>>2]));e=s[a+8>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];M=c+16|0;return v(v(d+v(e*s[o[b+12>>2]+8>>2]))+v(s[a+12>>2]*s[o[c+8>>2]+12>>2]))}function jn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=v(f);var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;s[g+8>>2]=f;a=o[g+28>>2];l[o[o[a>>2]+8>>2]](a,o[g+24>>2],o[g+20>>2],o[g+12>>2]);l[o[o[a>>2]+8>>2]](a,o[g+20>>2],o[g+16>>2],o[g+12>>2]);l[o[o[a>>2]+8>>2]](a,o[g+16>>2],o[g+24>>2],o[g+12>>2]);M=g+32|0}function ud(a,b){a:{if((b|0)>=1024){a=a*8.98846567431158e+307;if((b|0)<2047){b=b+ -1023|0;break a}a=a*8.98846567431158e+307;b=((b|0)<3069?b:3069)+ -2046|0;break a}if((b|0)>-1023){break a}a=a*2.2250738585072014e-308;if((b|0)>-2045){b=b+1022|0;break a}a=a*2.2250738585072014e-308;b=((b|0)>-3066?b:-3066)+2044|0}e(0,0);e(1,b+1023<<20);return a*+f()}function Nx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a:{if(m[26504]&1){break a}if(!da(26504)){break a}o[(M-16|0)+12>>2]=26488;ca(26504)}b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;a=o[a+12>>2]+(o[a+8>>2]<<4)|0;b=o[a+4>>2];o[6622]=o[a>>2];o[6623]=b;b=o[a+12>>2];o[6624]=o[a+8>>2];o[6625]=b;M=c+16|0;return 26488}function Vg(a,b,c){var d=0,e=0,f=0,g=0,h=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;f=o[d+24>>2];b=M-16|0;c=o[d+28>>2];o[b+12>>2]=c;o[b+8>>2]=0;g=o[b+12>>2]+(o[b+8>>2]<<4)|0;b=M-16|0;o[b+12>>2]=c;o[b+8>>2]=1;h=o[b+12>>2]+(o[b+8>>2]<<4)|0;b=M-16|0;o[b+12>>2]=c;o[b+8>>2]=2;e=d+8|0;vn(e,f,g,h,o[b+12>>2]+(o[b+8>>2]<<4)|0);ha(a,e,c+48|0);M=d+32|0}function hf(a,b,c,d){m[a+53|0]=1;a:{if(o[a+4>>2]!=(c|0)){break a}m[a+52|0]=1;c=o[a+16>>2];if(!c){o[a+36>>2]=1;o[a+24>>2]=d;o[a+16>>2]=b;if((d|0)!=1|o[a+48>>2]!=1){break a}m[a+54|0]=1;return}if((b|0)==(c|0)){c=o[a+24>>2];if((c|0)==2){o[a+24>>2]=d;c=d}if(o[a+48>>2]!=1|(c|0)!=1){break a}m[a+54|0]=1;return}m[a+54|0]=1;o[a+36>>2]=o[a+36>>2]+1}}function vI(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;s[a+60>>2]=c;s[a+56>>2]=b;o[a>>2]=10900;o[a+72>>2]=2;o[a+64>>2]=0;o[a+68>>2]=1;o[a+4>>2]=11;s[a+36>>2]=b;s[a+32>>2]=c;s[a+28>>2]=b;s[a+52>>2]=b/v(C(v(v(b*b)+v(c*c))))}function sI(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;s[a+60>>2]=c;s[a+56>>2]=b;o[a+4>>2]=11;o[a+72>>2]=2;o[a+64>>2]=1;o[a+68>>2]=0;o[a>>2]=11100;s[a+32>>2]=b;s[a+36>>2]=b;s[a+28>>2]=c;s[a+52>>2]=b/v(C(v(v(b*b)+v(c*c))))}function hn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=v(d);e=e|0;f=f|0;var g=0;g=M+ -64|0;M=g;o[g+60>>2]=a;o[g+56>>2]=b;o[g+52>>2]=c;s[g+48>>2]=d;o[g+44>>2]=e;o[g+40>>2]=f;a=o[g+60>>2];b=o[g+56>>2];c=o[g+52>>2];d=s[g+48>>2];e=o[g+44>>2];o[g+28>>2]=o[g+40>>2];o[g+24>>2]=e;t[g+16>>3]=d;o[g+8>>2]=c;o[g+4>>2]=b;o[g>>2]=a;G(2745,2995,g|0)|0;M=g- -64|0}function uI(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;s[a+60>>2]=c;s[a+56>>2]=b;o[a+4>>2]=11;o[a+72>>2]=1;o[a+64>>2]=0;o[a+68>>2]=2;o[a>>2]=11e3;s[a+36>>2]=c;s[a+28>>2]=b;s[a+32>>2]=b;s[a+52>>2]=b/v(C(v(v(b*b)+v(c*c))))}function im(a){a=a|0;var b=0;o[a>>2]=4084;b=o[a+284>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+284>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}o[a>>2]=4040;b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+276>>2]=0}o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a>>2]=3948;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function YH(a){a=a|0;var b=0;o[a>>2]=11368;b=o[a+120>>2];if(b){if(p[a+124|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+120>>2]=0}o[a+120>>2]=0;m[a+124|0]=1;o[a+112>>2]=0;o[a+116>>2]=0;b=o[a+100>>2];if(b){if(p[a+104|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+100>>2]=0}o[a+100>>2]=0;m[a+104|0]=1;o[a+92>>2]=0;o[a+96>>2]=0;return a|0}function Gi(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=v(0);i=M-32|0;M=i;o[i+28>>2]=a;o[i+24>>2]=b;o[i+20>>2]=c;o[i+16>>2]=d;o[i+12>>2]=e;o[i+8>>2]=f;o[i+4>>2]=g;o[i>>2]=h;a=o[i+28>>2];j=v(l[o[o[a>>2]+12>>2]](a,o[i+24>>2],o[i+20>>2],o[i+16>>2],o[i+12>>2],o[i+8>>2],o[i+4>>2],o[i>>2]));M=i+32|0;return v(j)}function wg(a,b,c,d,e){var f=v(0);o[a+32>>2]=c;o[a+28>>2]=b;o[a+24>>2]=d;o[a+20>>2]=e;o[a+4>>2]=0;o[a+8>>2]=1065353216;o[a>>2]=4548;o[a+12>>2]=0;o[a+16>>2]=0;o[a+36>>2]=o[b+4>>2];o[a+40>>2]=o[c+4>>2];s[a+44>>2]=l[o[o[b>>2]+48>>2]](b);f=v(l[o[o[c>>2]+48>>2]](c));o[a+72>>2]=1;o[a+76>>2]=1;o[a+60>>2]=-1;m[a+52|0]=0;s[a+48>>2]=f;return a}function sH(a,b,c){var d=v(0),e=v(0),f=v(0);o[a+4>>2]=35;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=14720;o[a>>2]=12652;d=s[b+8>>2];e=s[b>>2];f=s[b+4>>2];b=o[b+12>>2];o[a+68>>2]=0;o[a+72>>2]=0;s[a+64>>2]=c;o[a+60>>2]=b;o[a+76>>2]=0;o[a+80>>2]=0;o[a+4>>2]=28;c=v(v(1)/v(C(v(v(v(e*e)+v(f*f))+v(d*d)))));s[a+56>>2]=d*c;s[a+52>>2]=f*c;s[a+48>>2]=e*c}function po(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a>>2]=s[a>>2]+s[o[b+12>>2]>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a+4>>2]=s[a+4>>2]+s[o[b+12>>2]+4>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a+8>>2]=s[a+8>>2]+s[o[b+12>>2]+8>>2];s[a+12>>2]=s[a+12>>2]+s[o[c+8>>2]+12>>2];M=c+16|0;return a}function no(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a>>2]=s[a>>2]-s[o[b+12>>2]>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a+4>>2]=s[a+4>>2]-s[o[b+12>>2]+4>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];s[a+8>>2]=s[a+8>>2]-s[o[b+12>>2]+8>>2];s[a+12>>2]=s[a+12>>2]-s[o[c+8>>2]+12>>2];M=c+16|0;return a}function WD(a){a=a|0;var b=0;o[a>>2]=17876;b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+56>>2]=0;m[a+60|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+36>>2]=0;m[a+40|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;Sj(a+4|0);return a|0}function nB(a){var b=0,c=v(0),d=0,e=v(0);if(o[a+136>>2]>=1){e=v(v(1)/s[o[a+116>>2]+344>>2]);while(1){c=v(0);b=o[a+144>>2]+u(d,284)|0;if(p[b+84|0]){c=s[b+272>>2];c=v(z(v(e*v(v(v(s[b+216>>2]*v(s[b+204>>2]-s[b+32>>2]))*s[b+268>>2])-v(c*s[(c<v(0)?b+220|0:b+224|0)>>2]))),v(0)))}s[b+276>>2]=c;d=d+1|0;if((d|0)<o[a+136>>2]){continue}break}}}function mF(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=o[c+4>>2];o[b+16>>2]=o[c>>2];o[b+20>>2]=f;f=o[c+12>>2];o[b+24>>2]=o[c+8>>2];o[b+28>>2]=f;f=d;g=o[f+4>>2];o[b+32>>2]=o[f>>2];o[b+36>>2]=g;g=o[f+12>>2];o[b+40>>2]=o[f+8>>2];o[b+44>>2]=g;lF(a,q[b+12>>1],c,f,e);a=o[a+108>>2];if(a){l[o[o[a>>2]+16>>2]](a,o[b+60>>2],c,d,e)}}function Zx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=M+ -64|0;M=d;e=1;a:{if(Fa(a,b,0)){break a}e=0;if(!b){break a}b=Yx(b);e=0;if(!b){break a}o[d+20>>2]=-1;o[d+16>>2]=a;o[d+12>>2]=0;o[d+8>>2]=b;$(d+24|0,0,39);o[d+56>>2]=1;l[o[o[b>>2]+28>>2]](b,d+8|0,o[c>>2],1);e=0;if(o[d+32>>2]!=1){break a}o[c>>2]=o[d+24>>2];e=1}M=d- -64|0;return e|0}function Sy(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;if(!(!b|o[b+236>>2]!=8)){c=o[a+328>>2];a:{if((c|0)<1){break a}e=o[a+336>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+336>>2]>>2]=b;o[a+328>>2]=c}bd(a,b);return}Jj(a,b)}function cA(a,b){var c=0,d=0;c=M+ -64|0;M=c;o[c+12>>2]=0;o[c+16>>2]=0;o[c+24>>2]=0;o[c+28>>2]=0;o[c+20>>2]=1065353216;o[c+40>>2]=1065353216;o[c+44>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;o[c>>2]=1065353216;o[c+32>>2]=0;o[c+36>>2]=0;d=o[b+12>>2];o[c+56>>2]=o[b+8>>2];o[c+60>>2]=d;d=o[b+4>>2];o[c+48>>2]=o[b>>2];o[c+52>>2]=d;Cf(a,c);M=c- -64|0}function xH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-48|0;M=e;o[e+12>>2]=b;o[e+8>>2]=12444;b=o[c+12>>2];o[e+24>>2]=o[c+8>>2];o[e+28>>2]=b;b=o[c+4>>2];o[e+16>>2]=o[c>>2];o[e+20>>2]=b;b=o[d+12>>2];o[e+40>>2]=o[d+8>>2];o[e+44>>2]=b;b=o[d+4>>2];o[e+32>>2]=o[d>>2];o[e+36>>2]=b;a=o[a+48>>2];l[o[o[a>>2]+8>>2]](a,e+8|0,c,d);M=e+48|0}function to(a,b){var c=0,d=v(0);c=M-32|0;M=c;o[c+24>>2]=a;o[c+20>>2]=b;a=o[c+24>>2];d=v(xb(a)*xb(o[c+20>>2]));b=M-16|0;s[b+12>>2]=d;s[c+16>>2]=C(s[b+12>>2]);a:{if(wb(a,o[c+20>>2])<v(0)){so(c,o[c+20>>2]);s[c+28>>2]=Qb(v(wb(a,c)/s[c+16>>2]))*v(2);break a}s[c+28>>2]=Qb(v(wb(a,o[c+20>>2])/s[c+16>>2]))*v(2)}M=c+32|0;return s[c+28>>2]}function kF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=o[a+108>>2];if(!g){c=q[a+56>>1];if(c){e=1;b=1;while(1){e=o[a+68>>2]+(e<<2)|0;if(m[e|0]&1){l[o[o[d>>2]+8>>2]](d,o[a+60>>2]+(q[e+2>>1]<<6)|0)|0;c=q[a+56>>1]}b=b+1|0;e=b&65535;if(((c&65535)<<1|1)>>>0>e>>>0){continue}break}}return}l[o[o[g>>2]+24>>2]](g,b,c,d,e,f)}function cs(a,b){var c=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;a=o[c+44>>2];b=M-16|0;o[b+12>>2]=o[c+40>>2];o[c+36>>2]=o[o[b+12>>2]+4>>2];b=o[c+36>>2];o[c>>2]=0;o[c+4>>2]=0;o[c+32>>2]=0;o[c+24>>2]=0;o[c+28>>2]=0;o[c+16>>2]=0;o[c+20>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0;Qh(c);Qm(a,b,c);vc(c);Og(o[c+40>>2],o[c+36>>2],o[a+12>>2]);M=c+48|0}function ad(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;b=o[d+28>>2];s[d+20>>2]=v(s[b+4>>2]*s[o[d+24>>2]+8>>2])-v(s[b+8>>2]*s[o[d+24>>2]+4>>2]);s[d+16>>2]=v(s[b+8>>2]*s[o[d+24>>2]>>2])-v(s[b>>2]*s[o[d+24>>2]+8>>2]);s[d+12>>2]=v(s[b>>2]*s[o[d+24>>2]+4>>2])-v(s[b+4>>2]*s[o[d+24>>2]>>2]);Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function VD(a){a=a|0;var b=0;o[a>>2]=17876;b=o[a+56>>2];if(b){if(p[a+60|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+56>>2]=0}o[a+56>>2]=0;m[a+60|0]=1;o[a+48>>2]=0;o[a+52>>2]=0;b=o[a+36>>2];if(b){if(p[a+40|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+36>>2]=0}o[a+36>>2]=0;m[a+40|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;Sj(a+4|0);ba(a)}function so(a,b){var c=0;c=M-32|0;M=c;o[c+28>>2]=b;o[c+24>>2]=o[c+28>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+20>>2]=-s[o[b+12>>2]>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+16>>2]=-s[o[b+12>>2]+4>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];s[c+12>>2]=-s[o[b+12>>2]+8>>2];s[c+8>>2]=-s[o[c+24>>2]+12>>2];id(a,c+20|0,c+16|0,c+12|0,c+8|0);M=c+32|0}function ah(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Zg(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;De(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function _g(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Zg(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Xg(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function Im(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Hm(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Jg(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function Dm(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Cm(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Gg(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function Ch(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Mm(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Kg(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function Ae(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Pm(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Og(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Lg(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function $g(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;if(o[o[b+12>>2]+8>>2]<o[c+8>>2]){o[c+4>>2]=Cn(a,o[c+8>>2]);b=M-16|0;o[b+12>>2]=a;Yg(a,o[o[b+12>>2]+4>>2],o[c+4>>2]);b=M-16|0;o[b+12>>2]=a;Ab(a,o[o[b+12>>2]+4>>2]);Za(a);m[a+16|0]=1;o[a+12>>2]=o[c+4>>2];o[a+8>>2]=o[c+8>>2]}M=c+16|0}function Oc(a,b,c,d,e,f,g,h,i,j){var k=0;k=M-48|0;M=k;o[k+44>>2]=a;o[k+40>>2]=b;o[k+36>>2]=c;o[k+32>>2]=d;o[k+28>>2]=e;o[k+24>>2]=f;o[k+20>>2]=g;o[k+16>>2]=h;o[k+12>>2]=i;o[k+8>>2]=j;a=o[k+44>>2];Y(a,o[k+40>>2],o[k+36>>2],o[k+32>>2]);Y(a+16|0,o[k+28>>2],o[k+24>>2],o[k+20>>2]);Y(a+32|0,o[k+16>>2],o[k+12>>2],o[k+8>>2]);M=k+48|0}function IC(a,b,c,d,e){ab(a,3,b,c);o[a>>2]=19160;b=o[d+4>>2];o[a+300>>2]=o[d>>2];o[a+304>>2]=b;b=o[d+12>>2];o[a+308>>2]=o[d+8>>2];o[a+312>>2]=b;b=o[e+4>>2];o[a+316>>2]=o[e>>2];o[a+320>>2]=b;b=o[e+12>>2];o[a+324>>2]=o[e+8>>2];o[a+328>>2]=b;o[a+356>>2]=0;o[a+348>>2]=1050253722;o[a+352>>2]=1065353216;m[a+344|0]=0;o[a+332>>2]=0}function AE(a,b){a=a|0;b=b|0;if(o[a+16>>2]==(0-o[a+76>>2]|0)){Yc(a+4|0);Yc(a- -64|0);m[a+193|0]=256;m[a+194|0]=1;o[a+164>>2]=0;o[a+144>>2]=0;o[a+156>>2]=10;o[a+160>>2]=1;o[a+148>>2]=1;o[a+152>>2]=0;o[a+124>>2]=0;o[a+128>>2]=0;o[a+132>>2]=0;o[a+168>>2]=0;o[a+172>>2]=0;o[a+176>>2]=0;o[a+180>>2]=0;o[a+184>>2]=0;o[a+188>>2]=0}}function kn(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=v(i);var j=0;j=M-48|0;M=j;o[j+44>>2]=a;o[j+40>>2]=b;o[j+36>>2]=c;o[j+32>>2]=d;o[j+28>>2]=e;o[j+24>>2]=f;o[j+20>>2]=g;o[j+16>>2]=h;s[j+12>>2]=i;a=o[j+44>>2];l[o[o[a>>2]+28>>2]](a,o[j+40>>2],o[j+36>>2],o[j+32>>2],o[j+16>>2],s[j+12>>2]);M=j+48|0}function HJ(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=M-32|0;M=c;d=o[a+216>>2];a:{if(s[d+4>>2]==v(0)){break a}e=1;b=o[b>>2];if(!l[o[o[d>>2]+8>>2]](d,o[b+188>>2])){break a}d=o[a+216>>2];f=o[b+192>>2];o[c+24>>2]=-1;o[c+28>>2]=-1;o[c+20>>2]=b+4;o[c+16>>2]=b;o[c+12>>2]=f;o[c+8>>2]=0;le(a+68|0,a+132|0,c+8|0,d)}M=c+32|0;return e|0}function Zv(a,b){var c=0,d=0;c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;a=o[c+24>>2];d=o[a+4>>2];b=o[c+28>>2];o[b+348>>2]=o[a>>2];o[b+352>>2]=d;d=o[a+12>>2];o[b+356>>2]=o[a+8>>2];o[b+360>>2]=d;a=c+8|0;ta(a,b+348|0,b+344|0);d=o[a+4>>2];o[b+560>>2]=o[a>>2];o[b+564>>2]=d;d=o[a+12>>2];o[b+568>>2]=o[a+8>>2];o[b+572>>2]=d;M=c+32|0}function BB(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0;ia(19861);l[o[o[a>>2]+32>>2]](a,b,c,d,e,f,g,h,i);j=o[a+184>>2];k=o[h+20>>2];k=(j|0)>(k|0)?j:k;if((k|0)>=1){j=0;while(1){v(l[o[o[a>>2]+40>>2]](a,j,b,c,d,e,f,g,h,i));j=j+1|0;if((k|0)!=(j|0)){continue}break}}ga();return v(v(0))}function tI(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;s[d+20>>2]=c;a:{if(m[26464]&1){break a}if(!da(26464)){break a}o[(M-16|0)+12>>2]=26448;ca(26464)}_k(d,o[d+28>>2],o[d+24>>2],s[d+20>>2]);a=o[d+4>>2];o[6612]=o[d>>2];o[6613]=a;a=o[d+12>>2];o[6614]=o[d+8>>2];o[6615]=a;M=d+32|0;return 26448}function lJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;c=o[b>>2];c=l[o[o[c>>2]+56>>2]](c,36)|0;d=o[a+12>>2];e=o[a+8>>2];f=o[b+4>>2];g=o[a+20>>2];a=o[a+16>>2];o[c>>2]=17764;o[c+4>>2]=o[b>>2];o[c>>2]=5076;o[c+28>>2]=a;o[c+32>>2]=g;m[c+24|0]=0;o[c+20>>2]=f;m[c+16|0]=0;o[c+12>>2]=e;o[c+8>>2]=d;o[c>>2]=9808;return c|0}function Us(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;s[d+20>>2]=c;a:{if(m[26524]&1){break a}if(!da(26524)){break a}o[(M-16|0)+12>>2]=26508;ca(26524)}_k(d,o[d+28>>2],o[d+24>>2],s[d+20>>2]);a=o[d+4>>2];o[6627]=o[d>>2];o[6628]=a;a=o[d+12>>2];o[6629]=o[d+8>>2];o[6630]=a;M=d+32|0;return 26508}function iz(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;a=p[a+16|0];d=a?b:c;a=o[(a?c:b)+8>>2];b=o[a+268>>2];a:{b:{if((b|0)<1){break b}e=o[d+8>>2];f=o[a+276>>2];c=0;while(1){if(o[(c<<2)+f>>2]!=(e|0)){c=c+1|0;if((b|0)!=(c|0)){continue}break b}break}if((b|0)!=(c|0)){break a}}b=o[a+284>>2];l[o[o[b>>2]+36>>2]](b,a,d)}}function zD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=o[a+212>>2];a:{if((c|0)<1){break a}e=o[a+220>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+220>>2]>>2]=b;o[a+212>>2]=c}Tj(o[b+28>>2],b);Tj(o[b+32>>2],b)}function IE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;Vc(o[b+60>>2]==2?a- -64|0:a+4|0,o[b+48>>2]);e=o[b+56>>2];d=o[b+52>>2];a:{if(d){d=d+56|0;break a}d=((o[b+60>>2]<<2)+a|0)+124|0}o[d>>2]=e;d=o[b+56>>2];if(d){o[d+52>>2]=o[b+52>>2]}d=o[a+136>>2];l[o[o[d>>2]+16>>2]](d,b,c);if(b){o[7718]=o[7718]+1;l[o[6607]](b)}m[a+194|0]=1}function CA(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=(b|0)!=32;if(!(d|(c|0)!=32)){return o[a+92>>2]}a:{b:{c:{if(!d){if((c|0)>19){break c}return o[a+96>>2]}if((c|0)!=32|(b|0)>19){break b}return o[a+100>>2]}if(c+ -21>>>0>8){break a}return o[a+104>>2]}if((c|0)!=32|b+ -21>>>0>8){break a}return o[a+108>>2]}return Fl(a,b,c)|0}function ga(){var a=0,b=0,c=0;c=M-16|0;M=c;a=o[6605];b=o[a+16>>2]+ -1|0;o[a+16>>2]=b;a:{b:{if(!b){if(!o[a+4>>2]){break b}H(c+8|0,0)|0;b=o[7705];s[a+8>>2]=s[a+8>>2]+v(v(((o[c+12>>2]+u(o[c+8>>2]-o[b>>2]|0,1e6)|0)-o[b+4>>2]|0)-o[a+12>>2]>>>0)/v(1e3));b=o[a+16>>2]}if(b){break a}a=o[6605]}o[6605]=o[a+20>>2]}M=c+16|0}function hv(a){var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a=o[b+28>>2];s[a>>2]=1.2000000476837158;s[a+4>>2]=0;s[a+8>>2]=0;s[a+12>>2]=1e3;s[b+24>>2]=0;s[b+20>>2]=0;s[b+16>>2]=0;Y(a+16|0,b+24|0,b+20|0,b+16|0);o[a+32>>2]=0;o[a+36>>2]=0;s[b+12>>2]=0;s[b+8>>2]=-10;s[b+4>>2]=0;Y(a+40|0,b+12|0,b+8|0,b+4|0);Qh(a+56|0);M=b+32|0}function Js(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e);f=v(f);g=g|0;h=h|0;var i=0;i=M-32|0;M=i;o[i+28>>2]=a;o[i+24>>2]=b;o[i+20>>2]=c;o[i+16>>2]=d;s[i+12>>2]=e;s[i+8>>2]=f;o[i+4>>2]=g;m[i+3|0]=h;a=qB(o[i+28>>2],o[i+24>>2],o[i+20>>2],o[i+16>>2],s[i+12>>2],s[i+8>>2],o[i+4>>2],m[i+3|0]&1);M=i+32|0;return a|0}function jm(a){a=a|0;var b=0;o[a>>2]=4084;b=o[a+284>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+284>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}o[a>>2]=4040;b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+276>>2]=0}o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a>>2]=3948;return a|0}function uA(a,b,c){var d=0,e=0,f=0,g=0;e=o[a+732>>2];if((e|0)>=1){d=o[a+720>>2];c=d+u(c,104)|0;b=d+u(b,104)|0;g=o[a+740>>2];a=0;while(1){d=u(a,52)+g|0;f=o[d+8>>2];if(!((b|0)!=(f|0)|(c|0)!=o[d+12>>2])){return 1}if(!((c|0)!=(f|0)|(b|0)!=o[d+12>>2])){return 1}a=a+1|0;if((e|0)!=(a|0)){continue}break}}return 0}function oI(a,b){a=a|0;b=b|0;var c=v(0),d=0,e=0,f=v(0);e=o[a+68>>2]<<2;c=s[e+b>>2];d=e;e=a+12|0;f=v(s[a+60>>2]*v(c/s[d+e>>2]));s[a+60>>2]=f;d=o[a+64>>2]<<2;c=v(s[d+b>>2]/s[e+d>>2]);d=o[a+72>>2]<<2;c=v(s[a+56>>2]*v(v(c+v(s[d+b>>2]/s[e+d>>2]))*v(.5)));s[a+56>>2]=c;s[a+52>>2]=c/v(C(v(v(f*f)+v(c*c))));ae(a,b)}function Zt(){var a=0;a=M-48|0;M=a;a:{if(m[26932]&1){break a}if(!da(26932)){break a}s[a+44>>2]=1;s[a+40>>2]=0;s[a+36>>2]=0;s[a+32>>2]=0;s[a+28>>2]=1;s[a+24>>2]=0;s[a+20>>2]=0;s[a+16>>2]=0;s[a+12>>2]=1;Ce(26884,a+44|0,a+40|0,a+36|0,a+32|0,a+28|0,a+24|0,a+20|0,a+16|0,a+12|0);ca(26932)}M=a+48|0;return 26884}function RB(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;a:{b:{switch(d+1|0){case 0:case 6:break b;default:break a}}c:{switch(b+ -2|0){case 0:s[a+760>>2]=c;o[a+748>>2]=o[a+748>>2]|2;return;case 2:s[a+756>>2]=c;o[a+748>>2]=o[a+748>>2]|1;return;case 1:break c;default:break a}}s[a+752>>2]=c;o[a+748>>2]=o[a+748>>2]|4}}function VF(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);a:{switch(o[a+96>>2]){case 0:return v(s[o[a+92>>2]+(u(o[a+64>>2],c)+b<<2)>>2]);case 5:return v(v(s[a+88>>2]*v(p[o[a+92>>2]+(u(o[a+64>>2],c)+b|0)|0])));case 3:d=v(s[a+88>>2]*v(n[o[a+92>>2]+(u(o[a+64>>2],c)+b<<1)>>1]));break;default:break a}}return v(d)}function bC(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;a:{switch(b+ -1|0){case 0:case 1:if(d>>>0<=2){s[a+600>>2]=c;o[a+592>>2]=o[a+592>>2]|2;return}s[a+432>>2]=c;return;case 2:case 3:if(d>>>0<=2){s[a+596>>2]=c;o[a+592>>2]=o[a+592>>2]|1;return}s[a+604>>2]=c;o[a+592>>2]=o[a+592>>2]|4;break;default:break a}}}function Hd(a){var b=0;b=M-16|0;M=b;s[b+8>>2]=a;s[b+8>>2]=Nn(s[b+8>>2]);a:{if(s[b+8>>2]<v(-3.1415927410125732)){s[b+12>>2]=s[b+8>>2]+v(6.2831854820251465);break a}if(s[b+8>>2]>v(3.1415927410125732)){s[b+12>>2]=s[b+8>>2]-v(6.2831854820251465);break a}s[b+12>>2]=s[b+8>>2]}M=b+16|0;return s[b+12>>2]}function yy(){var a=0,b=0;a=M-16|0;M=a;H(o[7705],0)|0;Ad(30824);o[7707]=o[7707]+1;b=o[7710];o[7710]=b+1;if(!b){H(a+8|0,0)|0;b=o[7705];o[7709]=(o[a+12>>2]-o[b+4>>2]|0)+u(o[a+8>>2]-o[b>>2]|0,1e6)}o[7715]=0;H(a+8|0,0)|0;b=o[7705];o[7716]=(o[a+12>>2]-o[b+4>>2]|0)+u(o[a+8>>2]-o[b>>2]|0,1e6);M=a+16|0}function bK(a,b,c){o[a>>2]=7456;m[a+76|0]=1;o[a+72>>2]=0;o[a+68>>2]=c;o[a+28>>2]=0;o[a+32>>2]=0;o[a+24>>2]=b;m[a+20|0]=1;o[a+16>>2]=0;o[a- -64>>2]=0;m[a+60|0]=0;o[a+56>>2]=1025758986;m[a+54|0]=1;n[a+52>>1]=256;o[a+48>>2]=0;m[a+44|0]=1;o[a+36>>2]=1;o[a+40>>2]=1065353216;o[a+8>>2]=0;o[a+12>>2]=0}function KI(a){a=a|0;var b=0;o[a>>2]=10732;b=o[a+64>>2];if(b){cb(b);b=o[a+64>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+24>>2];if(b){if(p[a+28|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+24>>2]=0}o[a+24>>2]=0;m[a+28|0]=1;o[a+16>>2]=0;o[a+20>>2]=0;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function OF(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);d=s[b+36>>2];e=s[b+28>>2];b=a;f=s[c>>2];g=s[c+4>>2];h=v(C(v(v(f*f)+v(g*g))));a:{if(h!=v(0)){e=v(e/h);i=v(g*e);e=v(f*e);d=s[c+8>>2]<v(0)?v(-d):d;break a}d=s[c+8>>2]<v(0)?v(-d):d}s[b+8>>2]=d;s[a>>2]=e;s[a+4>>2]=i}function HH(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;c=o[a+52>>2];if(c){c=(f=b,g=l[o[o[c>>2]+12>>2]](c)|0,h=1,e=o[o[b>>2]+16>>2],l[e](f|0,g|0,h|0)|0);d=o[a+52>>2];h=b,g=c,f=l[o[o[d>>2]+16>>2]](d,o[c+8>>2],b)|0,i=1213612625,j=o[a+52>>2],e=o[o[b>>2]+20>>2],l[e](h|0,g|0,f|0,i|0,j|0)}}function Cl(a,b,c,d,e){var f=0;o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=5076;m[a+8|0]=e;o[a>>2]=6364;b=o[b>>2];o[a- -64>>2]=0;o[a+60>>2]=b;o[a+12>>2]=6392;f=e?c:d;o[a+20>>2]=f;c=e?d:c;o[a+16>>2]=c;b=l[o[o[b>>2]+12>>2]](b,o[c+8>>2],o[f+8>>2])|0;o[a+76>>2]=b;a=o[a+60>>2];l[o[o[a>>2]+20>>2]](a,b)}function Tj(a,b){var c=0,d=0,e=0,f=0;c=o[a+488>>2];a:{if((c|0)<1){break a}e=o[a+496>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((d|0)!=(c|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+496>>2]>>2]=b;o[a+488>>2]=c}o[a+256>>2]=(c|0)>0}function SK(a,b,c,d,e,f,g){o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a+24>>2]=g;o[a+20>>2]=f;m[a+16|0]=e;o[a+12>>2]=0;m[a+8|0]=0;o[a>>2]=6204;b=o[a+4>>2];f=e?d:c;c=e?c:d;if(l[o[o[b>>2]+24>>2]](b,o[f+8>>2],o[c+8>>2])){b=o[a+4>>2];b=l[o[o[b>>2]+12>>2]](b,o[f+8>>2],o[c+8>>2])|0;m[a+8|0]=1;o[a+12>>2]=b}}function GH(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;c=o[a+56>>2];if(c){c=(f=b,g=l[o[o[c>>2]+8>>2]](c)|0,h=1,e=o[o[b>>2]+16>>2],l[e](f|0,g|0,h|0)|0);d=o[a+56>>2];h=b,g=c,f=l[o[o[d>>2]+12>>2]](d,o[c+8>>2],b)|0,i=1346456916,j=o[a+56>>2],e=o[o[b>>2]+20>>2],l[e](h|0,g|0,f|0,i|0,j|0)}}function ED(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=o[a+232>>2];a:{if((c|0)<1){break a}e=o[a+240>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+240>>2]>>2]=b;o[a+232>>2]=c}bd(a,b)}function XC(a){a=a|0;var b=v(0),c=v(0);b=v(1);c=s[o[a+32>>2]+344>>2];if(c!=v(0)){b=s[o[a+28>>2]+344>>2];b=v(b/v(b+c))}o[a+1296>>2]=0;c=v(v(1)-b);s[a+1292>>2]=v(b*s[a+1120>>2])+v(c*s[a+1184>>2]);s[a+1288>>2]=v(b*s[a+1116>>2])+v(c*s[a+1180>>2]);s[a+1284>>2]=v(b*s[a+1112>>2])+v(c*s[a+1176>>2])}function NF(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);d=s[b+32>>2];e=s[b+28>>2];f=s[c>>2];g=s[c+8>>2];h=v(C(v(v(f*f)+v(g*g))));a:{if(h!=v(0)){e=v(e/h);i=v(g*e);e=v(f*e);d=s[c+4>>2]<v(0)?v(-d):d;break a}d=s[c+4>>2]<v(0)?v(-d):d}s[a+8>>2]=i;s[a+4>>2]=d;s[a>>2]=e}function Lu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=M-32|0;M=h;o[h+28>>2]=a;o[h+24>>2]=b;o[h+20>>2]=c;o[h+16>>2]=d;o[h+12>>2]=e;o[h+8>>2]=f;m[h+7|0]=g;a=aa(764);lj(a,o[h+28>>2],o[h+24>>2],o[h+20>>2],o[h+16>>2],o[h+12>>2],o[h+8>>2],m[h+7|0]&1);M=h+32|0;return a|0}function aC(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);a:{b:{switch(b+ -1|0){case 0:case 1:if(c>>>0<=2){return v(s[a+600>>2])}if(c+ -3>>>0>2){break a}return v(s[a+432>>2]);case 2:case 3:break b;default:break a}}if(c>>>0<=2){return v(s[a+596>>2])}if(c+ -3>>>0>2){break a}d=s[a+604>>2]}return v(d)}function PF(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);e=s[b+32>>2];d=s[b+28>>2];f=s[c+4>>2];g=s[c+8>>2];h=v(C(v(v(f*f)+v(g*g))));a:{if(h!=v(0)){e=v(e/h);i=v(g*e);e=v(f*e);d=s[c>>2]<v(0)?v(-d):d;break a}d=s[c>>2]<v(0)?v(-d):d}s[a+8>>2]=i;s[a>>2]=d;s[a+4>>2]=e}function dE(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=1;a:{if(!(p[b+236|0]&2)|!b){break a}e=o[a+488>>2];if((e|0)<1){break a}f=o[a+496>>2];a=0;while(1){d=o[(a<<2)+f>>2];if(p[d+20|0]){c=0;if(o[d+28>>2]==(b|0)|o[d+32>>2]==(b|0)){break a}}c=1;a=a+1|0;if((a|0)<(e|0)){continue}break}}return c|0}function xD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;a:{c=o[a+280>>2];if((c|0)<1){break a}e=o[a+288>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+288>>2]>>2]=b;o[a+280>>2]=c}}function WI(a,b,c,d){o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=5076;m[a+28|0]=1;o[a>>2]=10568;o[a+24>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;b=o[b+4>>2];m[a+36|0]=0;o[a+32>>2]=b;o[7717]=o[7717]+1;b=l[o[6606]](68,16)|0;bJ(b);o[a+8>>2]=b;o[a+40>>2]=o[o[c+4>>2]+68>>2];o[a+44>>2]=o[o[d+4>>2]+68>>2]}function jq(a){a=a|0;var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26664]&1){break a}if(!da(26664)){break a}o[(M-16|0)+12>>2]=26648;ca(26664)}a=o[b+28>>2];l[o[o[a>>2]+76>>2]](b+8|0,a);a=o[b+12>>2];o[6662]=o[b+8>>2];o[6663]=a;a=o[b+20>>2];o[6664]=o[b+16>>2];o[6665]=a;M=b+32|0;return 26648}function KE(a){a=a|0;var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26484]&1){break a}if(!da(26484)){break a}o[(M-16|0)+12>>2]=26468;ca(26484)}a=o[b+28>>2];l[o[o[a>>2]+76>>2]](b+8|0,a);a=o[b+12>>2];o[6617]=o[b+8>>2];o[6618]=a;a=o[b+20>>2];o[6619]=o[b+16>>2];o[6620]=a;M=b+32|0;return 26468}function mm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;a:{c=o[a+268>>2];if((c|0)<1){break a}d=o[a+276>>2];f=o[b>>2];b=0;while(1){e=(b<<2)+d|0;if(o[e>>2]!=(f|0)){b=b+1|0;if((c|0)!=(b|0)){continue}break a}break}if((b|0)>=(c|0)){break a}b=c+ -1|0;o[e>>2]=o[(b<<2)+d>>2];o[a+268>>2]=b}}function Nd(a,b){var c=v(0),d=0,e=v(0),f=v(0),g=v(0);c=s[a+344>>2];if(c!=v(0)){e=s[b>>2];f=s[b+4>>2];g=s[b+8>>2];o[a+376>>2]=0;c=v(v(1)/c);s[a+372>>2]=g*c;s[a+368>>2]=c*f;s[a+364>>2]=c*e}d=o[b+4>>2];o[a+380>>2]=o[b>>2];o[a+384>>2]=d;d=o[b+12>>2];o[a+388>>2]=o[b+8>>2];o[a+392>>2]=d}function fK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0;if(!!(s[a+36>>2]>d)){m[a+40|0]=1;e=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=e;e=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=e;b=o[c+4>>2];o[a+20>>2]=o[c>>2];o[a+24>>2]=b;b=o[c+12>>2];o[a+28>>2]=o[c+8>>2];o[a+32>>2]=b;s[a+36>>2]=d}}function Ty(a,b){var c=0,d=0,e=0,f=0;c=o[a+328>>2];a:{if((c|0)<1){break a}e=o[a+336>>2];while(1){f=(d<<2)+e|0;if(o[f>>2]!=(b|0)){d=d+1|0;if((c|0)!=(d|0)){continue}break a}break}if((d|0)>=(c|0)){break a}c=c+ -1|0;d=c<<2;o[f>>2]=o[d+e>>2];o[d+o[a+336>>2]>>2]=b;o[a+328>>2]=c}bd(a,b)}function wC(a,b,c,d,e,f){c=v(v(c-b)*v(.5));s[a+4>>2]=c;b=xa(v(c+b),v(6.2831854820251465));a:{if(!!(b<v(-3.1415927410125732))){b=v(b+v(6.2831854820251465));break a}if(!(b>v(3.1415927410125732))){break a}b=v(b+v(-6.2831854820251465))}s[a+16>>2]=f;s[a+12>>2]=e;s[a+8>>2]=d;s[a>>2]=b}function kI(a,b,c){a=a|0;b=b|0;c=c|0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];o[b+52>>2]=o[a+68>>2];return 11281}function TD(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=o[b+8>>2];a:{if((f|0)<1){c=0;break a}g=o[b+16>>2];c=0;while(1){d=o[(e<<2)+g>>2];if(!(p[d+204|0]&3)){o[d+208>>2]=c;c=c+1|0}o[d+244>>2]=1065353216;o[d+212>>2]=-1;e=e+1|0;if((f|0)!=(e|0)){continue}break}}ZD(a+4|0,c);UD(a,b)}function Jg(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;a=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){ja(o[d+16>>2]+u(o[d+12>>2],104)|0,o[a+12>>2]+u(o[d+12>>2],104)|0,104);o[d+12>>2]=o[d+12>>2]+1;continue}break}M=d+32|0}function IF(a,b,c){a=a|0;b=b|0;c=c|0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];o[b+52>>2]=o[a+52>>2];return 16034}function AG(a,b,c){a=a|0;b=b|0;c=c|0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];o[b+52>>2]=o[a+52>>2];return 14421}function pB(a){var b=0,c=0,d=v(0);if(o[a+136>>2]>=1){while(1){b=o[a+144>>2]+u(c,284)|0;d=s[b+204>>2];o[b+12>>2]=0;o[b+268>>2]=1065353216;o[b+272>>2]=0;s[b+32>>2]=d;s[b+8>>2]=-s[b+60>>2];s[b+4>>2]=-s[b+56>>2];s[b>>2]=-s[b+52>>2];c=c+1|0;if((c|0)<o[a+136>>2]){continue}break}}}function Og(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;a=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){Ng(o[d+16>>2]+u(o[d+12>>2],36)|0,o[a+12>>2]+u(o[d+12>>2],36)|0);o[d+12>>2]=o[d+12>>2]+1;continue}break}M=d+32|0}function Kg(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;a=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){Oe(o[d+16>>2]+u(o[d+12>>2],96)|0,o[a+12>>2]+u(o[d+12>>2],96)|0);o[d+12>>2]=o[d+12>>2]+1;continue}break}M=d+32|0}function lB(a,b){var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[c+4>>2]=0;while(1){if(o[c+4>>2]<3){b=M-16|0;o[b+12>>2]=o[c+8>>2];d=Hd(s[o[b+12>>2]+(o[c+4>>2]<<2)>>2]);s[((a+868|0)+(o[c+4>>2]<<6)|0)+4>>2]=d;o[c+4>>2]=o[c+4>>2]+1;continue}break}M=c+16|0}function Yc(a){var b=0;b=o[a>>2];if(b){Sd(a,b)}b=o[a+4>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}o[a+4>>2]=0;o[a+8>>2]=-1;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;o[a+16>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0}function IG(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;o[a+52>>2]=1;o[a+4>>2]=10;o[a>>2]=14020;o[a+40>>2]=0;s[a+36>>2]=b;s[a+32>>2]=c*v(.5);s[a+28>>2]=b}function EG(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;o[a+52>>2]=0;o[a>>2]=14120;o[a+4>>2]=10;o[a+40>>2]=0;s[a+36>>2]=b;s[a+32>>2]=b;s[a+28>>2]=c*v(.5)}function DG(a,b,c){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;o[a+52>>2]=2;o[a>>2]=14220;o[a+4>>2]=10;o[a+40>>2]=0;s[a+36>>2]=c*v(.5);s[a+32>>2]=b;s[a+28>>2]=b}function mL(a,b,c,d,e,f,g,h,i){o[a+72>>2]=1;o[a+76>>2]=1;o[a+60>>2]=-1;m[a+52|0]=0;s[a+48>>2]=g;s[a+44>>2]=f;o[a+40>>2]=e;o[a+36>>2]=d;o[a+32>>2]=c;o[a+28>>2]=b;o[a+24>>2]=h;o[a+20>>2]=i;o[a+4>>2]=0;o[a+8>>2]=1065353216;o[a>>2]=4548;o[a+12>>2]=0;o[a+16>>2]=0;return a}function fG(a,b,c){a=a|0;b=b|0;c=v(c);var d=v(0),e=v(0),f=0;d=s[b>>2];e=s[a+28>>2];a:{if(d<=v(e+c)^1|d>=v(v(-e)-c)^1){break a}d=s[b+4>>2];e=s[a+32>>2];if(d<=v(e+c)^1|d>=v(v(-e)-c)^1){break a}d=s[b+8>>2];e=s[a+36>>2];if(!(d<=v(e+c))){break a}f=d>=v(v(-e)-c)}return f|0}function jA(a,b){var c=0,d=0,e=0;d=o[a+712>>2];if((d|0)>=1){e=o[a+720>>2];a=0;while(1){c=u(a,104)+e|0;if(!!(s[c+88>>2]>v(0))){s[c+56>>2]=s[b>>2]+s[c+56>>2];s[c+60>>2]=s[b+4>>2]+s[c+60>>2];c=c- -64|0;s[c>>2]=s[b+8>>2]+s[c>>2]}a=a+1|0;if((d|0)!=(a|0)){continue}break}}}function LI(a){a=a|0;var b=0;o[a>>2]=10732;b=o[a+64>>2];if(b){cb(b);b=o[a+64>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}b=o[a+24>>2];if(b){if(p[a+28|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+24>>2]=0}o[a+24>>2]=0;m[a+28|0]=1;o[a+16>>2]=0;o[a+20>>2]=0;return a|0}function JB(a,b){var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[c+4>>2]=0;while(1){if(o[c+4>>2]<3){b=M-16|0;o[b+12>>2]=o[c+8>>2];d=Hd(s[o[b+12>>2]+(o[c+4>>2]<<2)>>2]);s[(a+868|0)+(o[c+4>>2]<<6)>>2]=d;o[c+4>>2]=o[c+4>>2]+1;continue}break}M=c+16|0}function qI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;f=M-16|0;M=f;if((d|0)>=1){while(1){e=g<<4;fg(f,a,e+b|0);h=o[f+12>>2];e=c+e|0;o[e+8>>2]=o[f+8>>2];o[e+12>>2]=h;h=o[f+4>>2];o[e>>2]=o[f>>2];o[e+4>>2]=h;g=g+1|0;if((g|0)!=(d|0)){continue}break}}M=f+16|0}function os(a){a=a|0;var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26544]&1){break a}if(!da(26544)){break a}o[(M-16|0)+12>>2]=26528;ca(26544)}ns(b+8|0,o[b+28>>2]);a=o[b+12>>2];o[6632]=o[b+8>>2];o[6633]=a;a=o[b+20>>2];o[6634]=o[b+16>>2];o[6635]=a;M=b+32|0;return 26528}function Xg(a,b,c){var d=0;d=M-32|0;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;a=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){s[o[d+16>>2]+(o[d+12>>2]<<2)>>2]=s[o[a+12>>2]+(o[d+12>>2]<<2)>>2];o[d+12>>2]=o[d+12>>2]+1;continue}break}}function Tc(a,b,c,d,e){var f=v(0);f=v(1);a:{if(b>c){break a}f=v(0);if(b==c){break a}d=v(d/e);if(!!(d<v(0))){if(!(a>=b^1|v(b-d)>a^1)){return v(v(b-a)/d)}return a<b?v(0):v(1)}if(!(d>v(0))){break a}if(!(a<=c^1|v(c-d)<a^1)){return v(v(c-a)/d)}f=a>c?v(0):v(1)}return f}function Mb(a,b,c){var d=0,e=0,f=0;d=M-16|0;M=d;o[d+12>>2]=b;o[d+8>>2]=c;c=M-16|0;b=o[d+12>>2];o[c+12>>2]=b;c=o[c+12>>2]+(o[d+8>>2]<<2)|0;e=M-16|0;o[e+12>>2]=b+16;e=o[e+12>>2]+(o[d+8>>2]<<2)|0;f=M-16|0;o[f+12>>2]=b+32;Y(a,c,e,o[f+12>>2]+(o[d+8>>2]<<2)|0);M=d+16|0}function Eo(a){a=a|0;var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26792]&1){break a}if(!da(26792)){break a}o[(M-16|0)+12>>2]=26776;ca(26792)}Do(b+8|0,o[b+28>>2]);a=o[b+12>>2];o[6694]=o[b+8>>2];o[6695]=a;a=o[b+20>>2];o[6696]=o[b+16>>2];o[6697]=a;M=b+32|0;return 26776}function De(a,b,c){var d=0;d=M-32|0;o[d+28>>2]=a;o[d+24>>2]=0;o[d+20>>2]=b;o[d+16>>2]=c;a=o[d+28>>2];o[d+12>>2]=o[d+24>>2];while(1){if(o[d+12>>2]<o[d+20>>2]){o[o[d+16>>2]+(o[d+12>>2]<<2)>>2]=o[o[a+12>>2]+(o[d+12>>2]<<2)>>2];o[d+12>>2]=o[d+12>>2]+1;continue}break}}function $J(a){a=a|0;var b=0,c=0,d=0;ia(7699);b=o[a+8>>2];if((b|0)>=1){while(1){d=o[o[a+16>>2]+(c<<2)>>2];a:{b:{if(p[a+76|0]){break b}switch(o[d+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}tl(a,d);b=o[a+8>>2]}c=c+1|0;if((c|0)<(b|0)){continue}break}}ga()}function $r(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a:{if(m[26644]&1){break a}if(!da(26644)){break a}Fh(26548);ca(26644)}b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;_r(o[o[a+12>>2]+12>>2]+u(o[a+8>>2],96)|0);M=c+16|0;return 26548}function vk(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;a=o[a+32>>2]+(j<<5)|0;o[c>>2]=o[a+12>>2];o[b>>2]=o[a+16>>2];o[d>>2]=o[a+28>>2];o[e>>2]=o[a+20>>2];o[h>>2]=o[a>>2];o[f>>2]=o[a+4>>2];o[g>>2]=o[a+8>>2];o[i>>2]=o[a+24>>2]}function Mu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;o[g+8>>2]=f;a=aa(764);lj(a,o[g+28>>2],o[g+24>>2],o[g+20>>2],o[g+16>>2],o[g+12>>2],o[g+8>>2],0);M=g+32|0;return a|0}function sx(a,b,c){a=v(a);b=b|0;c=c|0;var d=0,e=0,f=0;d=M-48|0;M=d;s[d+44>>2]=a;o[d+40>>2]=b;o[d+36>>2]=c;b=fa(140);a=s[d+44>>2];c=o[d+40>>2];f=o[d+36>>2];s[d+12>>2]=0;s[d+8>>2]=0;s[d+4>>2]=0;e=d+16|0;Y(e,d+12|0,d+8|0,d+4|0);Zh(b,a,c,f,e);M=d+48|0;return b|0}function jL(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d);var e=0;e=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=e;e=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=e;b=o[c+4>>2];o[a+20>>2]=o[c>>2];o[a+24>>2]=b;b=o[c+12>>2];o[a+28>>2]=o[c+8>>2];o[a+32>>2]=b;m[a+40|0]=1;s[a+36>>2]=d}function Vx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;if(Fa(a,o[b+8>>2],0)){jf(b,c,d);return}e=o[a+12>>2];f=a+16|0;si(f,b,c,d);a:{if((e|0)<2){break a}e=(e<<3)+f|0;a=a+24|0;while(1){si(a,b,c,d);if(p[b+54|0]){break a}a=a+8|0;if(a>>>0<e>>>0){continue}break}}}function Sg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=v(d);e=e|0;f=f|0;var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;s[g+16>>2]=d;o[g+12>>2]=e;o[g+8>>2]=f;a=o[g+28>>2];l[o[o[a>>2]+32>>2]](a,o[g+24>>2],o[g+20>>2],s[g+16>>2],o[g+12>>2],o[g+8>>2]);M=g+32|0}function mH(a,b,c){a=a|0;b=b|0;c=c|0;Xa(a,b,c);o[b+12>>2]=o[a+68>>2];o[b+16>>2]=o[a+72>>2];o[b+20>>2]=o[a+76>>2];o[b+24>>2]=o[a+80>>2];o[b+28>>2]=o[a+48>>2];o[b+32>>2]=o[a+52>>2];o[b+36>>2]=o[a+56>>2];o[b+40>>2]=o[a+60>>2];o[b+44>>2]=o[a+64>>2];return 12768}function yK(a,b,c){a=a|0;b=b|0;c=c|0;Xa(a,b,c);o[b+28>>2]=o[a+28>>2];o[b+32>>2]=o[a+32>>2];o[b+36>>2]=o[a+36>>2];o[b+40>>2]=o[a+40>>2];o[b+12>>2]=o[a+12>>2];o[b+16>>2]=o[a+16>>2];o[b+20>>2]=o[a+20>>2];o[b+24>>2]=o[a+24>>2];o[b+44>>2]=o[a+44>>2];return 6669}function mg(a,b,c,d){var e=0;o[a>>2]=7324;e=o[b+4>>2];o[a+4>>2]=o[b>>2];o[a+8>>2]=e;e=o[b+12>>2];o[a+12>>2]=o[b+8>>2];o[a+16>>2]=e;b=o[c+4>>2];o[a+20>>2]=o[c>>2];o[a+24>>2]=b;b=o[c+12>>2];o[a+28>>2]=o[c+8>>2];o[a+32>>2]=b;o[a+40>>2]=1065353216;o[a+36>>2]=d}function cq(a){var b=0;b=M-48|0;M=b;o[b+44>>2]=a;a=o[b+44>>2];s[b+40>>2]=1;s[b+36>>2]=0;s[b+32>>2]=0;s[b+28>>2]=0;s[b+24>>2]=1;s[b+20>>2]=0;s[b+16>>2]=0;s[b+12>>2]=0;s[b+8>>2]=1;Oc(a,b+40|0,b+36|0,b+32|0,b+28|0,b+24|0,b+20|0,b+16|0,b+12|0,b+8|0);M=b+48|0}function _p(a){a=a|0;var b=0,c=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26684]&1){break a}if(!da(26684)){break a}Ga(26668);ca(26684)}a=b+8|0;Zp(a,o[b+28>>2]);c=o[a+4>>2];o[6667]=o[a>>2];o[6668]=c;c=o[a+12>>2];o[6669]=o[a+8>>2];o[6670]=c;M=b+32|0;return 26668}function Ho(a){a=a|0;var b=0,c=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26772]&1){break a}if(!da(26772)){break a}Ga(26756);ca(26772)}a=b+8|0;Go(a,o[b+28>>2]);c=o[a+4>>2];o[6689]=o[a>>2];o[6690]=c;c=o[a+12>>2];o[6691]=o[a+8>>2];o[6692]=c;M=b+32|0;return 26756}function Co(a){a=a|0;var b=0,c=0;b=M-32|0;M=b;o[b+28>>2]=a;a:{if(m[26812]&1){break a}if(!da(26812)){break a}Ga(26796);ca(26812)}a=b+8|0;Bo(a,o[b+28>>2]);c=o[a+4>>2];o[6699]=o[a>>2];o[6700]=c;c=o[a+12>>2];o[6701]=o[a+8>>2];o[6702]=c;M=b+32|0;return 26796}function ZJ(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;ia(7737);l[o[o[a>>2]+8>>2]](a);l[o[o[a>>2]+12>>2]](a);b=o[a+24>>2];ia(7771);if(b){c=o[a+68>>2];e=b,f=l[o[o[c>>2]+36>>2]](c)|0,g=a+28|0,h=o[a+24>>2],d=o[o[b>>2]+32>>2],l[d](e|0,f|0,g|0,h|0)}ga();ga()}function Fg(a,b){var c=0,d=0,e=0,f=0;c=o[a+748>>2];a:{if((c|0)==4){c=xm(a,b);d=u(c,184)+a|0;e=o[d+116>>2];if(!e){break a}f=o[6734];if(!f){break a}l[f](e)|0;o[d+116>>2]=0;break a}o[a+748>>2]=c+1}d=a;a=(c|0)>0?c:0;ja((d+u(a,184)|0)+4|0,b,184);return a}function tm(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=(e=b,f=l[o[o[a>>2]+16>>2]](a)|0,g=1,d=o[o[b>>2]+16>>2],l[d](e|0,f|0,g|0)|0);g=b,f=c,e=l[o[o[a>>2]+20>>2]](a,o[c+8>>2],b)|0,h=1245859651,i=a,d=o[o[b>>2]+20>>2],l[d](g|0,f|0,e|0,h|0,i|0)}function aE(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=(e=b,f=l[o[o[a>>2]+16>>2]](a)|0,g=1,d=o[o[b>>2]+16>>2],l[d](e|0,f|0,g|0)|0);g=b,f=c,e=l[o[o[a>>2]+20>>2]](a,o[c+8>>2],b)|0,h=1497645650,i=a,d=o[o[b>>2]+20>>2],l[d](g|0,f|0,e|0,h|0,i|0)}function _G(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=(e=b,f=l[o[o[a>>2]+52>>2]](a)|0,g=1,d=o[o[b>>2]+16>>2],l[d](e|0,f|0,g|0)|0);g=b,f=c,e=l[o[o[a>>2]+56>>2]](a,o[c+8>>2],b)|0,h=1346455635,i=a,d=o[o[b>>2]+20>>2],l[d](g|0,f|0,e|0,h|0,i|0)}function WB(a,b){a=a|0;b=b|0;var c=v(0);if(p[a+738|0]){o[b>>2]=0;o[b+4>>2]=0;return}o[b>>2]=5;o[b+4>>2]=1;c=Gf(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0);s[a+728>>2]=c;qj(a+688|0,c);if(!(p[a+737|0]?0:!p[a+716|0])){o[b>>2]=o[b>>2]+1;o[b+4>>2]=o[b+4>>2]+ -1}}function MD(a){a=a|0;var b=0,c=0;if(o[a+232>>2]>=1){while(1){b=o[o[a+240>>2]+(c<<2)>>2];o[b+412>>2]=0;o[b+416>>2]=0;o[b+436>>2]=0;o[b+440>>2]=0;o[b+428>>2]=0;o[b+432>>2]=0;o[b+420>>2]=0;o[b+424>>2]=0;c=c+1|0;if((c|0)<o[a+232>>2]){continue}break}}}function Ca(a,b,c){var d=0;d=M-48|0;M=d;o[d+44>>2]=a;o[d+40>>2]=b;o[d+36>>2]=c;a=o[d+44>>2];if(s[a+344>>2]!=v(0)){Rh(a,o[d+40>>2]);b=M-16|0;o[b+12>>2]=a+544;if(o[b+12>>2]){b=o[d+36>>2];lb(d,o[d+40>>2],a+348|0);c=d+16|0;ad(c,b,d);Sh(a,c)}}M=d+48|0}function qr(a,b){var c=0,d=0;c=M-128|0;M=c;o[c+124>>2]=a;o[c+120>>2]=b;a=o[c+124>>2];b=M-16|0;o[b+12>>2]=o[c+120>>2];o[c+116>>2]=o[o[b+12>>2]+4>>2];d=o[c+116>>2];b=c+8|0;$(b,0,104);Km(b);Jm(a,d,b);Jg(o[c+120>>2],o[c+116>>2],o[a+12>>2]);M=c+128|0}function mK(a,b,c,d){o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=5076;o[a+12>>2]=0;m[a+8|0]=0;o[a>>2]=7016;b=o[a+4>>2];if(l[o[o[b>>2]+24>>2]](b,o[c+8>>2],o[d+8>>2])){b=o[a+4>>2];b=l[o[o[b>>2]+12>>2]](b,o[c+8>>2],o[d+8>>2])|0;m[a+8|0]=1;o[a+12>>2]=b}}function SE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(o[a+8>>2]>=1){while(1){e=o[a+16>>2]+(d<<4)|0;a:{if(l[o[o[b>>2]+8>>2]](b,e)){l[o[o[a>>2]+12>>2]](a,o[e>>2],o[e+4>>2],c)|0;o[7305]=o[7305]+ -1;break a}d=d+1|0}if((d|0)<o[a+8>>2]){continue}break}}}function mG(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);d=s[b+32>>2];e=s[b+36>>2];g=s[c+4>>2];h=s[c+8>>2];f=s[b+28>>2];i=s[c>>2];o[a+12>>2]=0;s[a>>2]=i>=v(0)?f:v(-f);s[a+8>>2]=h>=v(0)?e:v(-e);s[a+4>>2]=g>=v(0)?d:v(-d)}function Zu(a,b,c){var d=0;d=M-16|0;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];a:{b:{switch(o[d+8>>2]+ -3|0){case 0:s[a+452>>2]=s[d+4>>2];break a;case 1:s[a+448>>2]=s[d+4>>2];break a;case 2:break b;default:break a}}s[a+444>>2]=s[d+4>>2]}}function zC(a,b,c){a=a|0;b=b|0;c=c|0;Eb(a,b,c);o[b+52>>2]=o[a+300>>2];o[b+56>>2]=o[a+304>>2];o[b+60>>2]=o[a+308>>2];o[b+64>>2]=o[a+312>>2];o[b+68>>2]=o[a+316>>2];o[b+72>>2]=o[a+320>>2];o[b+76>>2]=o[a+324>>2];o[b+80>>2]=o[a+328>>2];return 19244}function lb(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;s[d+20>>2]=s[o[d+28>>2]>>2]*s[o[d+24>>2]>>2];s[d+16>>2]=s[o[d+28>>2]+4>>2]*s[o[d+24>>2]+4>>2];s[d+12>>2]=s[o[d+28>>2]+8>>2]*s[o[d+24>>2]+8>>2];Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function ha(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;s[d+20>>2]=s[o[d+28>>2]>>2]+s[o[d+24>>2]>>2];s[d+16>>2]=s[o[d+28>>2]+4>>2]+s[o[d+24>>2]+4>>2];s[d+12>>2]=s[o[d+28>>2]+8>>2]+s[o[d+24>>2]+8>>2];Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function db(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;s[d+20>>2]=s[o[d+28>>2]>>2]-s[o[d+24>>2]>>2];s[d+16>>2]=s[o[d+28>>2]+4>>2]-s[o[d+24>>2]+4>>2];s[d+12>>2]=s[o[d+28>>2]+8>>2]-s[o[d+24>>2]+8>>2];Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function Wl(a,b,c){a=a|0;b=b|0;c=c|0;a:{b:{c:{switch(o[b+216>>2]+ -2|0){case 0:case 3:break c;default:break b}}a=0;switch(o[c+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}if(!o[b+256>>2]){return 1}a=l[o[o[b>>2]>>2]](b,c)|0}return a|0}function QB(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);a:{b:{switch(c+1|0){case 0:case 6:break b;default:break a}}c:{switch(b+ -2|0){case 0:return v(s[a+760>>2]);case 2:return v(s[a+756>>2]);case 1:break c;default:break a}}d=s[a+752>>2]}return v(d)}function Ju(a,b,c,d,e,f){a=a|0;b=v(b);c=v(c);d=v(d);e=v(e);f=v(f);var g=0;g=M-32|0;M=g;o[g+28>>2]=a;s[g+24>>2]=b;s[g+20>>2]=c;s[g+16>>2]=d;s[g+12>>2]=e;s[g+8>>2]=f;Ph(o[g+28>>2],s[g+24>>2],s[g+20>>2],s[g+16>>2],s[g+12>>2],s[g+8>>2]);M=g+32|0}function on(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-32|0;M=e;o[e+28>>2]=a;o[e+24>>2]=b;o[e+20>>2]=c;o[e+16>>2]=d;a=o[e+28>>2];b=o[e+24>>2];c=o[e+20>>2];o[e+12>>2]=o[e+16>>2];o[e+8>>2]=c;o[e+4>>2]=b;o[e>>2]=a;G(2520,2740,e|0)|0;M=e+32|0}function ep(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;m[g+11|0]=f;a=Cy(o[g+24>>2],o[g+20>>2],o[g+16>>2],o[g+12>>2],m[g+11|0]&1);M=g+32|0;return a|0}function yF(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[b+4>>2];o[a+52>>2]=o[b>>2];o[a+56>>2]=d;d=o[b+12>>2];o[a+60>>2]=o[b+8>>2];o[a+64>>2]=d;b=o[c+4>>2];o[a+68>>2]=o[c>>2];o[a+72>>2]=b;b=o[c+12>>2];o[a+76>>2]=o[c+8>>2];o[a+80>>2]=b;o[a+48>>2]=1}function ta(a,b,c){var d=0;d=M-32|0;M=d;o[d+28>>2]=b;o[d+24>>2]=c;s[d+20>>2]=s[o[d+28>>2]>>2]*s[o[d+24>>2]>>2];s[d+16>>2]=s[o[d+28>>2]+4>>2]*s[o[d+24>>2]>>2];s[d+12>>2]=s[o[d+28>>2]+8>>2]*s[o[d+24>>2]>>2];Y(a,d+20|0,d+16|0,d+12|0);M=d+32|0}function HE(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;c=M-16|0;M=c;o[c+8>>2]=17444;o[c+12>>2]=d;g=d+4|0;h=d+20|0;hk(a+4|0,o[a+4>>2],b,g,h,s[d+32>>2],e,f,c+8|0);a=a- -64|0;hk(a,o[a>>2],b,g,h,s[d+32>>2],e,f,c+8|0);M=c+16|0}function HA(a,b){a=a|0;b=v(b);var c=0,d=0,e=0;c=o[a+24>>2];if((c|0)>=1){while(1){a:{b:{e=o[o[a+32>>2]+(d<<2)>>2];switch(o[e+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}Wz(e,b);c=o[a+24>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}}function yB(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ia(19895);v(l[o[o[a>>2]+44>>2]](a,b,c,d,e,f,g,h,i));v(l[o[o[a>>2]+48>>2]](a,b,c,d,e,f,g,h,i));v(l[o[o[a>>2]+36>>2]](a,b,c,h));ga();return v(v(0))}function ip(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;o[g+8>>2]=f;a=Gy(o[g+24>>2],o[g+20>>2],o[g+16>>2],o[g+12>>2],o[g+8>>2]);M=g+32|0;return a|0}function Tl(a,b){a=a|0;b=b|0;var c=0;a:{if(!b){break a}a=o[a+64>>2];c=o[a+16>>2];if(c>>>0>b>>>0|u(o[a>>2],o[a+4>>2])+c>>>0<=b>>>0){break a}o[b>>2]=o[a+12>>2];o[a+12>>2]=b;o[a+8>>2]=o[a+8>>2]+1;return}if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}function Jf(){var a=0;a=M-16|0;M=a;a:{if(m[29868]&1){break a}if(!da(29868)){break a}o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0;Wj(29252,a);ca(29868)}o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0;Tf(29252,v(0),a);M=a+16|0;return 29252}function ce(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=v(f);var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;s[g+8>>2]=f;Kb(o[g+28>>2],o[g+24>>2],o[g+20>>2],o[g+16>>2],o[g+12>>2],s[g+8>>2]);M=g+32|0}function _D(a){a=a|0;var b=0;o[a>>2]=17792;b=o[a+496>>2];if(b){if(p[a+500|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+496>>2]=0}o[a+496>>2]=0;m[a+500|0]=1;o[a+488>>2]=0;o[a+492>>2]=0;o[a>>2]=3948;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Vp(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Y(a,o[c+8>>2],o[c+8>>2]+16|0,o[c+8>>2]+32|0);Y(a+16|0,o[c+8>>2]+4|0,o[c+8>>2]+20|0,o[c+8>>2]+36|0);Y(a+32|0,o[c+8>>2]+8|0,o[c+8>>2]+24|0,o[c+8>>2]+40|0);M=c+16|0}function LA(a,b){a=a|0;b=v(b);var c=0,d=0,e=0;c=o[a+24>>2];if((c|0)>=1){while(1){a:{b:{e=o[o[a+32>>2]+(d<<2)>>2];switch(o[e+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}Sz(e);c=o[a+24>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}}function om(a){a=a|0;var b=0;o[a>>2]=4040;b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+276>>2]=0}o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a>>2]=3948;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Om(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[(M-16|0)+12>>2]=a;ld(a);b=M-16|0;o[b+12>>2]=o[c+8>>2];o[c+4>>2]=o[o[b+12>>2]+4>>2];b=o[c+4>>2];o[c>>2]=0;Tg(a,b,c);De(o[c+8>>2],o[c+4>>2],o[a+12>>2]);M=c+16|0}function Nr(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=M-32|0;M=g;o[g+28>>2]=a;o[g+24>>2]=b;o[g+20>>2]=c;o[g+16>>2]=d;o[g+12>>2]=e;o[g+8>>2]=f;mA(o[g+28>>2],o[g+24>>2],o[g+20>>2],o[g+16>>2],o[g+12>>2],o[g+8>>2]);M=g+32|0}function jv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=aa(116);Xd(a,o[f+28>>2],o[f+24>>2],o[f+20>>2]&65535,o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function xz(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[a+896>>2];o[b>>2]=o[a+892>>2];o[b+4>>2]=d;d=o[a+904>>2];o[b+8>>2]=o[a+900>>2];o[b+12>>2]=d;b=o[a+920>>2];o[c+8>>2]=o[a+916>>2];o[c+12>>2]=b;b=o[a+912>>2];o[c>>2]=o[a+908>>2];o[c+4>>2]=b}function gr(a,b){var c=0;c=M-112|0;M=c;o[c+108>>2]=a;o[c+104>>2]=b;a=o[c+108>>2];b=M-16|0;o[b+12>>2]=o[c+104>>2];o[c+100>>2]=o[o[b+12>>2]+4>>2];b=o[c+100>>2];$(c,0,96);Fh(c);zm(a,b,c);Kg(o[c+104>>2],o[c+100>>2],o[a+12>>2]);M=c+112|0}function _l(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;if(o[b+748>>2]>=1){a=0;while(1){c=u(a,184)+b|0;d=o[c+116>>2];a:{if(!d){break a}e=o[6734];if(!e){break a}l[e](d)|0;o[c+116>>2]=0}a=a+1|0;if((a|0)<o[b+748>>2]){continue}break}}o[b+748>>2]=0}function Ve(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;b=M-16|0;a=o[d+12>>2];o[b+12>>2]=a;o[o[b+12>>2]>>2]=1588;o[a>>2]=1504;rc(a+4|0,o[d+8>>2]);rc(a+68|0,o[d+4>>2]);rc(a+132|0,o[d+8>>2]);o[a+196>>2]=0;M=d+16|0}function Gz(a,b){a=a|0;b=v(b);var c=0,d=v(0),e=v(0);c=M-16|0;M=c;if(!!(s[a+68>>2]>v(0))){b=s[a+92>>2];d=s[a+96>>2];e=s[a+88>>2];o[c+12>>2]=0;s[c>>2]=-e;s[c+8>>2]=-d;s[c+4>>2]=-b;Yb(a+4|0,c,a+164|0);Yb(a+16|0,a+88|0,a+180|0)}M=c+16|0}function PG(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0),e=v(0),f=v(0),g=v(0),h=v(0),i=v(0);b=o[a+104>>2]+(b<<4)|0;d=s[b>>2];e=s[b+4>>2];f=s[b+8>>2];g=s[a+16>>2];h=s[a+20>>2];i=s[a+12>>2];o[c+12>>2]=0;s[c+8>>2]=f*h;s[c+4>>2]=e*g;s[c>>2]=d*i}function LD(a){a=a|0;var b=0,c=0,d=0;b=o[a+232>>2];if((b|0)>=1){while(1){a:{b:{d=o[o[a+240>>2]+(c<<2)>>2];switch(o[d+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}Vj(d);b=o[a+232>>2]}c=c+1|0;if((c|0)<(b|0)){continue}break}}}function xC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=aa(1312);wj(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function bo(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=aa(1388);SC(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function Gp(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=aa(1128);uC(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function BC(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;a:{if((d|0)!=-1){break a}b:{switch(b+ -1|0){case 0:case 1:s[a+336>>2]=c;o[a+332>>2]=o[a+332>>2]|1;return;case 2:case 3:break b;default:break a}}s[a+340>>2]=c;o[a+332>>2]=o[a+332>>2]|2}}function Rn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e);var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;s[f+12>>2]=e;a=fa(44);Qn(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],s[f+12>>2]);M=f+32|0;return a|0}function Nu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=aa(764);kj(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function LG(a){a=a|0;var b=0;o[a>>2]=13728;b=o[a+104>>2];if(b){if(p[a+108|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+104>>2]=0}o[a+104>>2]=0;m[a+108|0]=1;o[a+96>>2]=0;o[a+100>>2]=0;Hb(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function se(a){m[a+356|0]=1;o[a>>2]=0;m[a+312|0]=0;o[a+292>>2]=1566444395;o[a+296>>2]=1566444395;o[a+336>>2]=0;o[a+340>>2]=0;o[a+300>>2]=1566444395;o[a+304>>2]=0;o[a+344>>2]=0;o[a+348>>2]=0;m[a+352|0]=0;m[a+332|0]=p[a+332|0]&240}function MA(a){a=a|0;var b=0,c=0,d=0;b=o[a+24>>2];if((b|0)>=1){while(1){a:{b:{d=o[o[a+32>>2]+(c<<2)>>2];switch(o[d+216>>2]+ -2|0){case 0:case 3:break a;default:break b}}Bf(d);b=o[a+24>>2]}c=c+1|0;if((c|0)<(b|0)){continue}break}}}function Ky(a,b){var c=0;c=M-32|0;M=c;a=o[a+928>>2];o[c+24>>2]=1065353216;o[c+28>>2]=0;o[c+16>>2]=1065353216;o[c+20>>2]=0;o[c+8>>2]=1065353216;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=1065353216;nb(b,a,0,c+16|0,c,0,-1);M=c+32|0}function nE(a,b,c,d){var e=0;e=M-32|0;M=e;o[e+24>>2]=0;o[e+28>>2]=0;o[e+16>>2]=0;o[e+20>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e>>2]=0;o[e+4>>2]=0;a:{if(p[a+60|0]){$j(a,b,c,d,e+16|0,e,o[a+56>>2]);break a}bk(a,b,c,d,e+16|0,e)}M=e+32|0}function jl(a,b,c,d,e){o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=5076;m[a+24|0]=1;o[a>>2]=10356;o[a+20>>2]=0;m[a+28|0]=e;o[a+12>>2]=0;o[a+16>>2]=0;b=o[b+4>>2];m[a+36|0]=0;o[a+32>>2]=b;o[a+40>>2]=o[o[(e?d:c)+4>>2]+68>>2];il(a,c,d)}function Wk(a,b,c,d){AH(a,b);m[a+61|0]=0;m[a+60|0]=c;o[a+52>>2]=0;o[a+56>>2]=0;o[a>>2]=11692;o[a+4>>2]=21;if(d){o[7717]=o[7717]+1;b=l[o[6606]](172,16)|0;c=Bk(b);o[a+52>>2]=b;Ak(c,o[a+48>>2],p[a+60|0],a+16|0,a+32|0);m[a+61|0]=1}}function MJ(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=v(0);d=M-16|0;M=d;o[d+8>>2]=-1;o[d+12>>2]=o[a+24>>2];if(!o[b+4>>2]){o[b+4>>2]=d+8}e=o[a+20>>2];f=v(l[o[o[e>>2]+12>>2]](e,b,c));o[a+4>>2]=o[o[a+20>>2]+4>>2];M=d+16|0;return v(f)}function IJ(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=v(0);d=M-16|0;M=d;o[d+8>>2]=-1;o[d+12>>2]=o[a+16>>2];if(!o[b+4>>2]){o[b+4>>2]=d+8}e=o[a+12>>2];f=v(l[o[o[e>>2]+12>>2]](e,b,c));o[a+4>>2]=o[o[a+12>>2]+4>>2];M=d+16|0;return v(f)}function xF(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[a+56>>2];o[b>>2]=o[a+52>>2];o[b+4>>2]=d;d=o[a+64>>2];o[b+8>>2]=o[a+60>>2];o[b+12>>2]=d;b=o[a+80>>2];o[c+8>>2]=o[a+76>>2];o[c+12>>2]=b;b=o[a+72>>2];o[c>>2]=o[a+68>>2];o[c+4>>2]=b}function sw(a,b){var c=0;c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;a=o[c+28>>2];b=M-16|0;o[b+12>>2]=o[c+24>>2];o[c+20>>2]=o[o[b+12>>2]+4>>2];b=o[c+20>>2];o[(M-16|0)+12>>2]=c;Sm(a,b,c);Yg(o[c+24>>2],o[c+20>>2],o[a+12>>2]);M=c+32|0}function rk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b+20>>2];o[c>>2]=o[b+16>>2];o[c+4>>2]=a;a=o[b+28>>2];o[c+8>>2]=o[b+24>>2];o[c+12>>2]=a;a=o[b+44>>2];o[d+8>>2]=o[b+40>>2];o[d+12>>2]=a;a=o[b+36>>2];o[d>>2]=o[b+32>>2];o[d+4>>2]=a}function gF(a,b){a=a|0;b=b|0;var c=0,d=0;if(!q[a+56>>1]){b=1;n[a+64>>1]=1;d=o[a+60>>2];c=q[a+58>>1];if(c>>>0>1){while(1){c=(b<<6)+d|0;b=b+1|0;n[c+48>>1]=b;c=q[a+58>>1];if(b>>>0<c>>>0){continue}break}}n[((c<<6)+d|0)+ -16>>1]=0}}function OD(a,b){a=a|0;b=v(b);var c=0,d=0,e=0;d=o[a+8>>2];if((d|0)>=1){while(1){c=o[o[a+16>>2]+(e<<2)>>2];if(!(!c|!(o[c+236>>2]&2)|(!(p[c+204|0]&2)|o[c+216>>2]==2))){gE(c,b);d=o[a+8>>2]}e=e+1|0;if((e|0)<(d|0)){continue}break}}}function uB(){var a=0;a=M-16|0;M=a;a:{if(m[30492]&1){break a}if(!da(30492)){break a}o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0;Wj(29876,a);ca(30492)}o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0;Tf(29876,v(0),a);M=a+16|0}function hF(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[a+12>>2];o[b>>2]=o[a+8>>2];o[b+4>>2]=d;d=o[a+20>>2];o[b+8>>2]=o[a+16>>2];o[b+12>>2]=d;b=o[a+36>>2];o[c+8>>2]=o[a+32>>2];o[c+12>>2]=b;b=o[a+28>>2];o[c>>2]=o[a+24>>2];o[c+4>>2]=b}function qF(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0;i=pF(a,b,c,e,f,g,h,i);j=o[a+60>>2];a=o[a+108>>2];if(a){o[((i<<6)+j|0)+60>>2]=l[o[o[a>>2]+8>>2]](a,b,c,d,e,f,g,h,0)}return(i<<6)+j|0}function eB(a){a=a|0;var b=0;o[a>>2]=20152;b=o[a+140>>2];if(b){if(p[a+144|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+140>>2]=0}o[a+140>>2]=0;m[a+144|0]=1;o[a+132>>2]=0;o[a+136>>2]=0;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Wb(a,b,c,d,e){var f=0;f=M-32|0;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=o[f+28>>2];s[a>>2]=s[o[f+24>>2]>>2];s[a+4>>2]=s[o[f+20>>2]>>2];s[a+8>>2]=s[o[f+16>>2]>>2];s[a+12>>2]=s[o[f+12>>2]>>2]}function vn(a,b,c,d,e){var f=0;f=M-32|0;M=f;o[f+28>>2]=b;o[f+24>>2]=c;o[f+20>>2]=d;o[f+16>>2]=e;b=o[f+28>>2];s[f+12>>2]=eb(b,o[f+24>>2]);s[f+8>>2]=eb(b,o[f+20>>2]);s[f+4>>2]=eb(b,o[f+16>>2]);Y(a,f+12|0,f+8|0,f+4|0);M=f+32|0}function HI(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;o[a+68>>2]=o[a+68>>2]+1;c=o[a+16>>2];if((c|0)>=1){while(1){d=c+ -1|0;if(o[(o[a+24>>2]+u(d,80)|0)+64>>2]==(b|0)){$k(a,d)}e=(c|0)>1;c=d;if(e){continue}break}}l[o[o[a>>2]+68>>2]](a)}function sL(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;e=c>>>16|0;f=a>>>16|0;j=u(e,f);g=c&65535;h=a&65535;i=u(g,h);f=(i>>>16|0)+u(f,g)|0;e=(f&65535)+u(e,h)|0;a=(u(b,c)+j|0)+u(a,d)+(f>>>16)+(e>>>16)|0;b=i&65535|e<<16;N=a;return b}function ih(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[a>>2]=s[a>>2]*s[o[c+8>>2]>>2];s[a+4>>2]=s[a+4>>2]*s[o[c+8>>2]>>2];s[a+8>>2]=s[a+8>>2]*s[o[c+8>>2]>>2];s[a+12>>2]=s[a+12>>2]*s[o[c+8>>2]>>2];return a}function Gl(a,b,c){var d=0;Kl(a);d=o[a+248>>2];o[b>>2]=o[a+244>>2];o[b+4>>2]=d;d=o[a+256>>2];o[b+8>>2]=o[a+252>>2];o[b+12>>2]=d;b=o[a+272>>2];o[c+8>>2]=o[a+268>>2];o[c+12>>2]=b;b=o[a+264>>2];o[c>>2]=o[a+260>>2];o[c+4>>2]=b}function Cj(a,b){a=a|0;b=v(b);var c=0,d=0,e=0;ia(18490);d=o[a+232>>2];if((d|0)>=1){while(1){c=o[o[a+240>>2]+(e<<2)>>2];if(!(p[c+204|0]&3)){fE(c,b);Od(c,b,c+68|0);d=o[a+232>>2]}e=e+1|0;if((e|0)<(d|0)){continue}break}}ga()}function AC(a,b,c){a=a|0;b=b|0;c=c|0;var d=v(0);d=v(3.4028234663852886e+38);a:{if((c|0)!=-1){break a}b:{switch(b+ -1|0){case 0:case 1:return v(s[a+336>>2]);case 2:case 3:break b;default:break a}}d=s[a+340>>2]}return v(d)}function hE(a,b,c){var d=0;d=M-16|0;s[d+8>>2]=c;s[d+12>>2]=b;o[d+4>>2]=0;o[d>>2]=1065353216;o[a+444>>2]=o[(b<v(0)?d+4|0:b>v(1)?d:d+12|0)>>2];o[d+4>>2]=0;o[d>>2]=1065353216;o[a+448>>2]=o[(c<v(0)?d+4|0:c>v(1)?d:d+8|0)>>2]}function QE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;o[7307]=o[7307]+1;d=o[a+24>>2];a:{b:{if(d){if(l[o[o[d>>2]+8>>2]](d,b,c)){break b}break a}if(!(q[c+6>>1]&q[b+4>>1])|!(q[b+6>>1]&q[c+4>>1])){break a}}e=UE(a,b,c)}return e|0}function oq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=aa(460);Yy(a,o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+12>>2]);M=f+32|0;return a|0}function _y(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;c=p[a+8|0]?b:c;if(o[o[c+4>>2]+4>>2]+ -21>>>0<=8){f=a+12|0;b=o[o[c+8>>2]+192>>2];$y(f,v(l[o[o[b>>2]+48>>2]](b)),c,d,e);l[o[o[b>>2]+64>>2]](b,f,a+24|0,a+40|0)}}function fq(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];eq(a,o[d+8>>2]);b=o[d+4>>2];c=o[b+4>>2];o[a+48>>2]=o[b>>2];o[a+52>>2]=c;c=o[b+12>>2];o[a+56>>2]=o[b+8>>2];o[a+60>>2]=c;M=d+16|0}function Ue(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];Be(a,o[d+8>>2]);b=o[d+4>>2];c=o[b+4>>2];o[a+48>>2]=o[b>>2];o[a+52>>2]=c;c=o[b+12>>2];o[a+56>>2]=o[b+8>>2];o[a+60>>2]=c;M=d+16|0}function BF(a){a=a|0;var b=0;o[a>>2]=16264;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function ln(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;var e=0;e=M-80|0;M=e;o[e+76>>2]=a;o[e+72>>2]=b;s[e+68>>2]=c;o[e+64>>2]=d;a=o[e+76>>2];Hc(e);bf(e);Le(e,o[e+72>>2]);l[o[o[a>>2]+16>>2]](a,s[e+68>>2],e,o[e+64>>2]);M=e+80|0}function nn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=o[f+28>>2];l[o[o[a>>2]+8>>2]](a,o[f+24>>2],o[f+20>>2],o[f+16>>2]);M=f+32|0}function Yl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=d;o[e+8>>2]=a;a=o[((u(o[o[b+4>>2]+4>>2],144)+a|0)+(o[o[c+4>>2]+4>>2]<<2)|0)+72>>2];a=l[o[o[a>>2]+8>>2]](a,e+8|0,b,c)|0;M=e+16|0;return a|0}function Ku(a,b,c,d,e){a=a|0;b=v(b);c=v(c);d=v(d);e=v(e);var f=0;f=M-32|0;M=f;o[f+28>>2]=a;s[f+24>>2]=b;s[f+20>>2]=c;s[f+16>>2]=d;s[f+12>>2]=e;Ph(o[f+28>>2],s[f+24>>2],s[f+20>>2],s[f+16>>2],s[f+12>>2],v(1));M=f+32|0}function We(){var a=0,b=0,c=0;a=M-32|0;M=a;a:{if(m[26880]&1){break a}if(!da(26880)){break a}c=Zt();s[a+12>>2]=0;s[a+8>>2]=0;s[a+4>>2]=0;b=a+16|0;Y(b,a+12|0,a+8|0,a+4|0);Ue(26816,c,b);ca(26880)}M=a+32|0;return 26816}function rc(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Be(a,o[c+8>>2]);b=o[c+8>>2];d=o[b+52>>2];o[a+48>>2]=o[b+48>>2];o[a+52>>2]=d;d=o[b+60>>2];o[a+56>>2]=o[b+56>>2];o[a+60>>2]=d;M=c+16|0}function Sb(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Te(a,o[c+8>>2]);b=o[c+8>>2];d=o[b+52>>2];o[a+48>>2]=o[b+48>>2];o[a+52>>2]=d;d=o[b+60>>2];o[a+56>>2]=o[b+56>>2];o[a+60>>2]=d;M=c+16|0}function PC(a){var b=0,c=0,d=0;Pf(a);o[a+1316>>2]=o[a+1256>>2];c=a+1260|0;d=o[c+4>>2];b=a+1320|0;o[b>>2]=o[c>>2];o[b+4>>2]=d;o[a+1328>>2]=o[a+1192>>2];b=a+1332|0;a=a+1196|0;c=o[a+4>>2];o[b>>2]=o[a>>2];o[b+4>>2]=c}function Ng(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Om(a,o[c+8>>2]);b=o[c+8>>2];d=o[b+24>>2];o[a+20>>2]=o[b+20>>2];o[a+24>>2]=d;d=o[b+32>>2];o[a+28>>2]=o[b+28>>2];o[a+32>>2]=d;M=c+16|0}function UI(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=o[a+8>>2];d=o[c+8>>2];if((d|0)>=1){a=0;while(1){e=o[(o[c+16>>2]+u(a,12)|0)+8>>2];if(e){l[o[o[e>>2]+16>>2]](e,b);d=o[c+8>>2]}a=a+1|0;if((a|0)<(d|0)){continue}break}}}function Iy(a,b){var c=0;c=M-32|0;M=c;a=o[a+1048>>2];o[c+24>>2]=1065353216;o[c+28>>2]=0;o[c+16>>2]=0;o[c+20>>2]=1065353216;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=0;nb(b,a,0,c+16|0,c,0,-1);M=c+32|0}function uw(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];o[c+4>>2]=o[o[b+12>>2]+4>>2];b=o[c+4>>2];o[c>>2]=0;Tg(a,b,c);De(o[c+8>>2],o[c+4>>2],o[a+12>>2]);M=c+16|0}function nw(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];b=M-16|0;o[b+12>>2]=o[c+8>>2];o[c+4>>2]=o[o[b+12>>2]+4>>2];b=o[c+4>>2];s[c>>2]=0;Rm(a,b,c);Xg(o[c+8>>2],o[c+4>>2],o[a+12>>2]);M=c+16|0}function VJ(a,b,c){var d=0,e=0;d=M-48|0;M=d;e=o[b+192>>2];l[o[o[e>>2]+8>>2]](e,b+4|0,d+32|0,d+16|0);o[d+12>>2]=c;o[d+4>>2]=b;o[d>>2]=9424;o[d+8>>2]=a;a=o[a+68>>2];l[o[o[a>>2]+28>>2]](a,d+32|0,d+16|0,d);M=d+48|0}function wJ(a,b,c,d,e,f){o[a>>2]=17764;o[a+4>>2]=o[c>>2];o[a>>2]=5076;m[a+16|0]=f;o[a+12>>2]=b;m[a+8|0]=0;o[a>>2]=9708;if(!b){b=o[a+4>>2];b=l[o[o[b>>2]+12>>2]](b,o[d+8>>2],o[e+8>>2])|0;m[a+8|0]=1;o[a+12>>2]=b}}function Lg(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=0;o[c+4>>2]=b;a=o[c+12>>2];o[c>>2]=o[c+8>>2];while(1){if(o[c>>2]<o[c+4>>2]){vc(o[a+12>>2]+u(o[c>>2],36)|0);o[c>>2]=o[c>>2]+1;continue}break}M=c+16|0}function $D(a){a=a|0;var b=0;o[a>>2]=17792;b=o[a+496>>2];if(b){if(p[a+500|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+496>>2]=0}o[a+496>>2]=0;m[a+500|0]=1;o[a+488>>2]=0;o[a+492>>2]=0;o[a>>2]=3948;return a|0}function sv(a){var b=0;b=M-32|0;M=b;o[b+28>>2]=a;a=o[b+28>>2];s[b+24>>2]=0;s[b+20>>2]=0;s[b+16>>2]=0;Y(a+412|0,b+24|0,b+20|0,b+16|0);s[b+12>>2]=0;s[b+8>>2]=0;s[b+4>>2]=0;Y(a+428|0,b+12|0,b+8|0,b+4|0);M=b+32|0}function pm(a){a=a|0;var b=0;o[a>>2]=4040;b=o[a+276>>2];if(b){if(p[a+280|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+276>>2]=0}o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a>>2]=3948;return a|0}function jf(a,b,c){var d=0;d=o[a+16>>2];if(!d){o[a+36>>2]=1;o[a+24>>2]=c;o[a+16>>2]=b;return}a:{if((b|0)==(d|0)){if(o[a+24>>2]!=2){break a}o[a+24>>2]=c;return}m[a+54|0]=1;o[a+24>>2]=2;o[a+36>>2]=o[a+36>>2]+1}}function fp(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=Dy(o[f+24>>2],o[f+20>>2],o[f+16>>2],o[f+12>>2]);M=f+32|0;return a|0}function dp(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;a=Bd(o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0;return a|0}function My(a,b){a=a|0;b=b|0;var c=0,d=0;c=o[a+216>>2];a:{if(s[c+4>>2]==v(0)){break a}d=1;b=o[b>>2];if(!l[o[o[c>>2]+8>>2]](c,o[b+188>>2])){break a}Py(a+68|0,a+132|0,b,o[b+192>>2],b+4|0,o[a+216>>2])}return d|0}function Nz(a,b){a=a|0;b=b|0;var c=v(0);b=o[b+36>>2];c=yf(a+4|0,a+36|0,o[b+8>>2]+8|0,o[b+12>>2]+8|0,o[b+16>>2]+8|0,s[a+52>>2]);if(!(c>v(0)^1|c<s[a+52>>2]^1)){o[a+56>>2]=b;s[a+52>>2]=c}o[a+60>>2]=o[a+60>>2]+1}function Mr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e);var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;m[f+19|0]=d;s[f+12>>2]=e;lA(o[f+28>>2],o[f+24>>2],o[f+20>>2],m[f+19|0]&1,s[f+12>>2]);M=f+32|0}function wu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;uk(o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0}function vo(a,b){var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];d=v(xb(a)*xb(o[c+8>>2]));b=M-16|0;s[b+12>>2]=d;s[c+4>>2]=C(s[b+12>>2]);d=Qb(v(wb(a,o[c+8>>2])/s[c+4>>2]));M=c+16|0;return d}function Pr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;m[f+15|0]=e;va(o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],m[f+15|0]&1);M=f+32|0}function Ph(a,b,c,d,e,f){var g=0;g=M-32|0;M=g;o[g+28>>2]=a;s[g+24>>2]=b;s[g+20>>2]=c;s[g+16>>2]=d;s[g+12>>2]=e;s[g+8>>2]=f;wC(o[g+28>>2]+688|0,s[g+24>>2],s[g+20>>2],s[g+16>>2],s[g+12>>2],s[g+8>>2]);M=g+32|0}function Or(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;Va(o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],o[f+12>>2]);M=f+32|0}function Gr(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];c=s[d+4>>2];s[(o[a+720>>2]+u(o[d+8>>2],104)|0)+88>>2]=c>v(0)?v(v(1)/c):v(0);m[a+924|0]=1;M=d+16|0}function gA(a){var b=v(0),c=0,d=0,e=v(0);c=o[a+712>>2];if((c|0)>=1){d=o[a+720>>2];a=0;while(1){e=b;b=s[(u(a,104)+d|0)+88>>2];b=v(e+(b>v(0)?v(v(1)/b):v(0)));a=a+1|0;if((c|0)!=(a|0)){continue}break}}return b}function $G(a){a=a|0;var b=0,c=v(0),d=v(0);b=M-32|0;M=b;l[o[o[a>>2]+12>>2]](a,b+16|0,b+12|0);M=b+32|0;c=s[b+16>>2];d=v(c*c);c=s[b+20>>2];d=v(d+v(c*c));c=s[b+24>>2];return v(v(s[b+12>>2]+v(C(v(d+v(c*c))))))}function de(a){o[a+4>>2]=35;o[a+8>>2]=0;o[a>>2]=13316;o[a+44>>2]=1025758986;o[a+20>>2]=1065353216;o[a+24>>2]=0;o[a+12>>2]=1065353216;o[a+16>>2]=1065353216;o[a>>2]=13444;o[a+52>>2]=0;o[a>>2]=12800;return a}function Kd(a){var b=v(0);b=xa(v(s[a>>2]+s[a+4>>2]),v(6.2831854820251465));if(!!(b<v(-3.1415927410125732))){return v(b+v(6.2831854820251465))}return b>v(3.1415927410125732)^1?b:v(b+v(-6.2831854820251465))}function Jd(a){var b=v(0);b=xa(v(s[a>>2]-s[a+4>>2]),v(6.2831854820251465));if(!!(b<v(-3.1415927410125732))){return v(b+v(6.2831854820251465))}return b>v(3.1415927410125732)^1?b:v(b+v(-6.2831854820251465))}function Iv(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;b=o[c+8>>2];c=o[b+4>>2];o[a+312>>2]=o[b>>2];o[a+316>>2]=c;c=o[b+12>>2];o[a+320>>2]=o[b+8>>2];o[a+324>>2]=c}function Gv(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;b=o[c+8>>2];c=o[b+4>>2];o[a+328>>2]=o[b>>2];o[a+332>>2]=c;c=o[b+12>>2];o[a+336>>2]=o[b+8>>2];o[a+340>>2]=c}function Av(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;b=o[c+8>>2];c=o[b+4>>2];o[a+544>>2]=o[b>>2];o[a+548>>2]=c;c=o[b+12>>2];o[a+552>>2]=o[b+8>>2];o[a+556>>2]=c}function Kf(a,b,c){o[a+28>>2]=c;o[a+24>>2]=-1;n[a+20>>1]=1;o[a+16>>2]=2139095039;o[a+8>>2]=-1;o[a+12>>2]=-1;o[a>>2]=19288;o[a+4>>2]=b;Jf();o[a+44>>2]=0;o[a+36>>2]=0;o[a+40>>2]=1050253722;o[a+32>>2]=29252}function Lj(a,b,c,d){a=a|0;b=v(b);c=c|0;d=v(d);var e=0;e=M-16|0;M=e;o[e+12>>2]=a;s[e+8>>2]=b;o[e+4>>2]=c;s[e>>2]=d;a=o[e+12>>2];a=l[o[o[a>>2]+52>>2]](a,s[e+8>>2],o[e+4>>2],s[e>>2])|0;M=e+16|0;return a|0}function MG(a){a=a|0;var b=0;o[a>>2]=13728;b=o[a+104>>2];if(b){if(p[a+108|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+104>>2]=0}o[a+104>>2]=0;m[a+108|0]=1;o[a+96>>2]=0;o[a+100>>2]=0;Hb(a);return a|0}function Jy(a,b){var c=0;c=M-32|0;M=c;a=o[a+988>>2];o[c+24>>2]=0;o[c+28>>2]=0;o[c+16>>2]=0;o[c+20>>2]=1065353216;o[c+8>>2]=0;o[c+12>>2]=0;o[c>>2]=1065353216;o[c+4>>2]=0;nb(b,a,0,c+16|0,c,0,-1);M=c+32|0}function In(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];m[c+7|0]=(n[o[c+8>>2]+4>>1]&n[b+14>>1])!=0;m[c+7|0]=m[c+7|0]&1?(n[b+12>>1]&n[o[c+8>>2]+6>>1])!=0:0;return m[c+7|0]&1}function Mn(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];m[c+7|0]=(n[o[c+8>>2]+4>>1]&n[b+10>>1])!=0;m[c+7|0]=m[c+7|0]&1?(n[b+8>>1]&n[o[c+8>>2]+6>>1])!=0:0;return m[c+7|0]&1}function qn(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];m[c+7|0]=(n[o[c+8>>2]+4>>1]&n[b+6>>1])!=0;m[c+7|0]=m[c+7|0]&1?(n[b+4>>1]&n[o[c+8>>2]+6>>1])!=0:0;return m[c+7|0]&1}function eq(a,b){var c=0,d=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];o[c+12>>2]=a;d=a+48|0;b=a;while(1){o[(M-16|0)+12>>2]=b;b=b+16|0;if((d|0)!=(b|0)){continue}break}oh(a,o[c+4>>2]);M=c+16|0}function Pj(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];a=l[o[o[a>>2]+52>>2]](a,s[d+8>>2],o[d+4>>2],v(.01666666753590107))|0;M=d+16|0;return a|0}function fB(a){a=a|0;var b=0;o[a>>2]=20152;b=o[a+140>>2];if(b){if(p[a+144|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+140>>2]=0}o[a+140>>2]=0;m[a+144|0]=1;o[a+132>>2]=0;o[a+136>>2]=0;return a|0}function ab(a,b,c,d){o[a+44>>2]=0;o[a+36>>2]=0;o[a+40>>2]=1050253722;o[a+32>>2]=d;o[a+28>>2]=c;o[a+24>>2]=-1;n[a+20>>1]=1;o[a+16>>2]=2139095039;o[a+8>>2]=-1;o[a+12>>2]=-1;o[a>>2]=19288;o[a+4>>2]=b}function Vs(a,b,c,d,e){var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;a=o[f+28>>2];Y(a,o[f+24>>2],o[f+20>>2],o[f+16>>2]);s[a+12>>2]=s[o[f+12>>2]>>2];M=f+32|0}function RH(a,b,c){a=a|0;b=v(b);c=c|0;var d=v(0),e=v(0);d=v(l[o[o[a>>2]+48>>2]](a));e=v(l[o[o[a>>2]+48>>2]](a));o[c+12>>2]=0;b=v(e*v(d*v(b*v(.4000000059604645))));s[c+8>>2]=b;s[c+4>>2]=b;s[c>>2]=b}function kv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(116);Xd(a,o[e+12>>2],o[e+8>>2],o[e+4>>2]&65535,o[e>>2],0);M=e+16|0;return a|0}function cc(a){a:{switch(o[a+4>>2]){case 8:return v(s[a+28>>2]*s[a+12>>2]);default:return v(l[o[o[a>>2]+48>>2]](a));case 0:case 1:case 4:case 5:case 10:case 11:case 13:break a}}return s[a+44>>2]}function Tz(a,b){s[a>>2]=s[a>>2]-s[b>>2];s[a+4>>2]=s[a+4>>2]-s[b+4>>2];s[a+8>>2]=s[a+8>>2]-s[b+8>>2];s[a+16>>2]=s[b>>2]+s[a+16>>2];s[a+20>>2]=s[b+4>>2]+s[a+20>>2];s[a+24>>2]=s[b+8>>2]+s[a+24>>2]}function Lh(a,b,c,d,e){a=a|0;b=v(b);c=v(c);d=v(d);e=v(e);var f=0;f=M-32|0;M=f;o[f+28>>2]=a;s[f+24>>2]=b;s[f+20>>2]=c;s[f+16>>2]=d;s[f+12>>2]=e;Wb(o[f+28>>2],f+24|0,f+20|0,f+16|0,f+12|0);M=f+32|0}function fn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-32|0;M=d;o[d+28>>2]=a;o[d+24>>2]=b;o[d+20>>2]=c;a=o[d+28>>2];b=o[d+24>>2];o[d+8>>2]=o[d+20>>2];o[d+4>>2]=b;o[d>>2]=a;G(3249,3472,d|0)|0;M=d+32|0}function rH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;o[c+8>>2]=-581039253;o[c+12>>2]=0;o[c>>2]=-581039253;o[c+4>>2]=-581039253;o[d+8>>2]=1566444395;o[d+12>>2]=0;o[d>>2]=1566444395;o[d+4>>2]=1566444395}function XD(a){o[a>>2]=17876;o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+36>>2]=0;m[a+40|0]=1;m[a+60|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;o[a+56>>2]=0;m[a+64|0]=1;o[a+48>>2]=0;o[a+52>>2]=0}function jD(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=o[b>>2];d=o[a+80>>2];if(!(!(q[b+6>>1]&q[a+8>>1])|(!(q[a+10>>1]&q[b+4>>1])|(c|0)==(d|0)))){a=o[a+92>>2];e=l[o[o[a>>2]+28>>2]](a,d,c)|0}return e|0}function Vu(a,b){a=a|0;b=v(b);var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;d=o[a+12>>2];s[d+572>>2]=s[a+8>>2];m[d+553|0]=0;M=c+16|0}function Uu(a,b){a=a|0;b=v(b);var c=0,d=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;d=o[a+12>>2];s[d+572>>2]=s[a+8>>2];m[d+553|0]=1;M=c+16|0}function Kv(a){var b=0,c=0,d=0;b=M-16|0;M=b;o[b+12>>2]=a;a=0;c=M-16|0;d=o[b+12>>2];o[c+12>>2]=d;if(o[o[c+12>>2]+216>>2]!=2){a=M-16|0;o[a+12>>2]=d;a=o[o[a+12>>2]+216>>2]!=5}M=b+16|0;return a&1}function ot(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+156>>2]=o[a>>2];o[b+160>>2]=c;c=o[a+12>>2];o[b+164>>2]=o[a+8>>2];o[b+168>>2]=c}function lt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+172>>2]=o[a>>2];o[b+176>>2]=c;c=o[a+12>>2];o[b+180>>2]=o[a+8>>2];o[b+184>>2]=c}function jt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+188>>2]=o[a>>2];o[b+192>>2]=c;c=o[a+12>>2];o[b+196>>2]=o[a+8>>2];o[b+200>>2]=c}function dJ(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=o[a+12>>2];if((c|0)>=1){while(1){e=o[o[a+20>>2]+(d<<2)>>2];if(e){l[o[o[e>>2]+16>>2]](e,b);c=o[a+12>>2]}d=d+1|0;if((d|0)<(c|0)){continue}break}}}function Km(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Hg(a);o[(M-16|0)+12>>2]=a+8;o[(M-16|0)+12>>2]=a+24;o[(M-16|0)+12>>2]=a+40;o[(M-16|0)+12>>2]=a+56;o[(M-16|0)+12>>2]=a+72;M=b+16|0}function wk(a){a=a|0;var b=0;o[a>>2]=16264;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;return a|0}function te(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;n[e+6>>1]=c;n[e+4>>1]=d;a=o[e+12>>2];l[o[o[a>>2]+36>>2]](a,o[e+8>>2],n[e+6>>1],n[e+4>>1]);M=e+16|0}function dk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;n[e+6>>1]=c;n[e+4>>1]=d;a=o[e+12>>2];l[o[o[a>>2]+88>>2]](a,o[e+8>>2],n[e+6>>1],n[e+4>>1]);M=e+16|0}function PA(a){a=a|0;var b=0;o[a>>2]=20392;b=o[a+32>>2];if(b){if(p[a+36|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+32>>2]=0}o[a+32>>2]=0;m[a+36|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;return a|0}function Ou(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(764);kj(a,o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2],0);M=e+16|0;return a|0}function Kx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return v(s[o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<2)>>2])}function ur(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];ja(a,o[c+8>>2],104);Ub(a+104|0,o[c+8>>2]+104|0);Ub(a+124|0,o[c+8>>2]+124|0);Ub(a+144|0,o[c+8>>2]+144|0);M=c+16|0}function rx(a,b,c,d){a=v(a);b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;s[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;b=fa(140);Zh(b,s[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0;return b|0}function oG(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[a>>2]=s[a>>2]-s[o[c+8>>2]>>2];s[a+4>>2]=s[a+4>>2]-s[o[c+8>>2]+4>>2];s[a+8>>2]=s[a+8>>2]-s[o[c+8>>2]+8>>2];return a}function dF(a){a=a|0;var b=0;o[a>>2]=16704;b=o[a+16>>2];if(b){if(p[a+20|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+16>>2]=0}o[a+16>>2]=0;m[a+20|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;return a|0}function bm(a){a=a|0;var b=0;o[a>>2]=4196;b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+20>>2]=0}o[a+20>>2]=0;m[a+24|0]=1;o[a+12>>2]=0;o[a+16>>2]=0;return a|0}function Wv(a,b){var c=0,d=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;b=M-16|0;a=o[c+44>>2];o[b+12>>2]=a+4;d=c+8|0;ea(d,o[b+12>>2],o[c+40>>2]);b=c+24|0;lb(b,d,a+544|0);Wa(a+428|0,b);M=c+48|0}function Wa(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[a>>2]=s[a>>2]+s[o[c+8>>2]>>2];s[a+4>>2]=s[a+4>>2]+s[o[c+8>>2]+4>>2];s[a+8>>2]=s[a+8>>2]+s[o[c+8>>2]+8>>2];return a}function Vj(a){if(!(p[a+204|0]&3)){s[a+412>>2]=v(s[a+364>>2]*s[a+348>>2])+s[a+412>>2];s[a+416>>2]=v(s[a+368>>2]*s[a+352>>2])+s[a+416>>2];s[a+420>>2]=v(s[a+372>>2]*s[a+356>>2])+s[a+420>>2]}}function Ur(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(1252);Zb(a,o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0;return a|0}function Rv(a,b){var c=0,d=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;b=M-16|0;a=o[c+44>>2];o[b+12>>2]=a+4;d=c+8|0;ea(d,o[b+12>>2],o[c+40>>2]);b=c+24|0;lb(b,d,a+348|0);Wa(a+412|0,b);M=c+48|0}function Oq(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;s[e+4>>2]=c;o[e>>2]=d;a=aa(184);aj(a,o[e+12>>2],o[e+8>>2],s[e+4>>2],o[e>>2]);M=e+16|0;return a|0}function rp(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(360);IC(a,o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0;return a|0}function Je(a,b,c,d){var e=0;e=M-16|0;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;m[e+3|0]=d;a=o[e+12>>2];a:{if(m[e+3|0]&1){o[a+84>>2]=o[e+8>>2];break a}o[a+80>>2]=o[e+8>>2]}o[a+88>>2]=o[e+4>>2]}function $u(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(608);kC(a,o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0;return a|0}function yw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+60>>2]=o[a>>2];o[b+64>>2]=c;c=o[a+12>>2];o[b+68>>2]=o[a+8>>2];o[b+72>>2]=c}function yk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+8>>2]](a,o[e+8>>2],o[e+4>>2],o[e>>2])|0;M=e+16|0}function yh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+52>>2]=o[a>>2];o[b+56>>2]=c;c=o[a+12>>2];o[b+60>>2]=o[a+8>>2];o[b+64>>2]=c}function wh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+68>>2]=o[a>>2];o[b+72>>2]=c;c=o[a+12>>2];o[b+76>>2]=o[a+8>>2];o[b+80>>2]=c}function vp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+64>>2]=o[a>>2];o[b+68>>2]=c;c=o[a+12>>2];o[b+72>>2]=o[a+8>>2];o[b+76>>2]=c}function rh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+24>>2]=o[a>>2];o[b+28>>2]=c;c=o[a+12>>2];o[b+32>>2]=o[a+8>>2];o[b+36>>2]=c}function pd(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<2)>>2]}function oi(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+32>>2]=o[a>>2];o[b+36>>2]=c;c=o[a+12>>2];o[b+40>>2]=o[a+8>>2];o[b+44>>2]=c}function mh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+20>>2]=o[a>>2];o[b+24>>2]=c;c=o[a+12>>2];o[b+28>>2]=o[a+8>>2];o[b+32>>2]=c}function iq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(96);hD(a,o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0;return a|0}function gb(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;s[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+28>>2]](a,o[e+8>>2],s[e+4>>2],o[e>>2]);M=e+16|0}function ac(a){o[a+16>>2]=0;o[a+8>>2]=-1;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0;o[a+32>>2]=0;m[a+36|0]=1;m[a+56|0]=1;o[a+24>>2]=0;o[a+28>>2]=0;o[a+52>>2]=0;o[a+44>>2]=0;o[a+48>>2]=0;return a}function Ye(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+40>>2]=o[a>>2];o[b+44>>2]=c;c=o[a+12>>2];o[b+48>>2]=o[a+8>>2];o[b+52>>2]=c}function Wh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+56>>2]=o[a>>2];o[b+60>>2]=c;c=o[a+12>>2];o[b+64>>2]=o[a+8>>2];o[b+68>>2]=c}function Uq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+72>>2]=o[a>>2];o[b+76>>2]=c;c=o[a+12>>2];o[b+80>>2]=o[a+8>>2];o[b+84>>2]=c}function Qs(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+76>>2]=o[a>>2];o[b+80>>2]=c;c=o[a+12>>2];o[b+84>>2]=o[a+8>>2];o[b+88>>2]=c}function Le(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+48>>2]=o[a>>2];o[b+52>>2]=c;c=o[a+12>>2];o[b+56>>2]=o[a+8>>2];o[b+60>>2]=c}function Ic(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+16>>2]=o[a>>2];o[b+20>>2]=c;c=o[a+12>>2];o[b+24>>2]=o[a+8>>2];o[b+28>>2]=c}function Dw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+12>>2]=o[a>>2];o[b+16>>2]=c;c=o[a+12>>2];o[b+20>>2]=o[a+8>>2];o[b+24>>2]=c}function Cw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+28>>2]=o[a>>2];o[b+32>>2]=c;c=o[a+12>>2];o[b+36>>2]=o[a+8>>2];o[b+40>>2]=c}function Aw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+44>>2]=o[a>>2];o[b+48>>2]=c;c=o[a+12>>2];o[b+52>>2]=o[a+8>>2];o[b+56>>2]=c}function Ah(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+36>>2]=o[a>>2];o[b+40>>2]=c;c=o[a+12>>2];o[b+44>>2]=o[a+8>>2];o[b+48>>2]=c}function wd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+28>>2]](a,o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0}function sh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+8>>2]=o[a>>2];o[b+12>>2]=c;c=o[a+12>>2];o[b+16>>2]=o[a+8>>2];o[b+20>>2]=c}function qd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+32>>2]](a,o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0}function iu(a){var b=0;b=M-16|0;o[b+12>>2]=a;a=o[b+12>>2];s[a>>2]=5.880000114440918;s[a+4>>2]=.8299999833106995;s[a+8>>2]=.8799999952316284;s[a+12>>2]=500;s[a+16>>2]=10.5;s[a+20>>2]=6e3}function gL(a,b,c,d){o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=5076;o[a+12>>2]=0;m[a+8|0]=0;o[a>>2]=5152;b=o[a+4>>2];b=l[o[o[b>>2]+12>>2]](b,o[c+8>>2],o[d+8>>2])|0;m[a+8|0]=1;o[a+12>>2]=b}function _x(a,b){var c=0,d=0;c=p[a|0];d=p[b|0];a:{if(!c|(c|0)!=(d|0)){break a}while(1){d=p[b+1|0];c=p[a+1|0];if(!c){break a}b=b+1|0;a=a+1|0;if((c|0)==(d|0)){continue}break}}return c-d|0}function Jw(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2]+12;o[a+8>>2]=b;M=c+16|0;return o[(o[o[a+12>>2]+12>>2]+u(o[a+8>>2],80)|0)+64>>2]}function Ds(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+24>>2]](a,o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0}function AH(a,b){o[a+4>>2]=35;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=14720;o[a+48>>2]=b;o[a>>2]=12324;o[a+4>>2]=21;if(l[o[o[b>>2]+40>>2]](b)){l[o[o[b>>2]+48>>2]](b,a+16|0,a+32|0);return}Uk(a)}function _o(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[a+12>>2]+12>>2]+u(o[a+8>>2],104)|0}function Xi(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+4>>2]=o[a>>2];o[b+8>>2]=c;c=o[a+12>>2];o[b+12>>2]=o[a+8>>2];o[b+16>>2]=c}function Ug(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];l[o[o[a>>2]+8>>2]](a,o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0}function Lk(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[a>>2]=s[a>>2]*s[o[c+8>>2]>>2];s[a+4>>2]=s[a+4>>2]*s[o[c+8>>2]>>2];s[a+8>>2]=s[a+8>>2]*s[o[c+8>>2]>>2];return a}function uq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[a+12>>2]+12>>2]+u(o[a+8>>2],36)|0}function nD(a,b){a=a|0;b=v(b);var c=0,d=0;ia(18243);if(o[a+280>>2]>=1){while(1){d=o[o[a+288>>2]+(c<<2)>>2];l[o[o[d>>2]+8>>2]](d,a,b);c=c+1|0;if((c|0)<o[a+280>>2]){continue}break}}ga()}function hb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=v(0);d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];e=v(l[o[o[a>>2]+32>>2]](a,o[d+8>>2],o[d+4>>2]));M=d+16|0;return v(e)}function am(a){a=a|0;var b=0;o[a>>2]=4196;b=o[a+20>>2];if(b){if(p[a+24|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+20>>2]=0}o[a+20>>2]=0;m[a+24|0]=1;o[a+12>>2]=0;o[a+16>>2]=0;ba(a)}function Y(a,b,c,d){var e=0;e=M-16|0;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=o[e+12>>2];s[a>>2]=s[o[e+8>>2]>>2];s[a+4>>2]=s[o[e+4>>2]>>2];s[a+8>>2]=s[o[e>>2]>>2];s[a+12>>2]=0}function Sn(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[a+12>>2]+12>>2]+u(o[a+8>>2],44)|0}function rv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<5)|0}function Uv(a,b,c){var d=0;d=M-48|0;M=d;o[d+44>>2]=a;o[d+40>>2]=b;o[d+36>>2]=c;a=o[d+44>>2];Th(a,o[d+40>>2]);b=o[d+36>>2];lb(d,o[d+40>>2],a+348|0);c=d+16|0;ad(c,b,d);Uh(a,c);M=d+48|0}function Up(a){a=a|0;var b=0;b=M-80|0;M=b;o[b+76>>2]=a;a:{if(m[26752]&1){break a}if(!da(26752)){break a}Hc(26688);ca(26752)}a=b+8|0;nh(a,o[b+76>>2]);Sb(26688,a);M=b+80|0;return 26688}function Tt(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[(M-16|0)+12>>2]=a;o[(M-16|0)+12>>2]=a+16;o[(M-16|0)+12>>2]=a+36;o[(M-16|0)+12>>2]=a+52;o[(M-16|0)+12>>2]=a+68;M=b+16|0}function Ps(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<4)|0}function NH(a){a=a|0;var b=0;o[a>>2]=11692;if(p[a+61|0]){b=o[a+52>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+52>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function rd(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b>>2]=o[a>>2];o[b+4>>2]=c;c=o[a+12>>2];o[b+8>>2]=o[a+8>>2];o[b+12>>2]=c}function fI(a){o[a>>2]=11320;m[a+20|0]=1;o[a+16>>2]=0;m[a+40|0]=1;o[a+8>>2]=0;o[a+12>>2]=0;o[a+36>>2]=0;m[a+60|0]=1;o[a+28>>2]=0;o[a+32>>2]=0;o[a+56>>2]=0;o[a+48>>2]=0;o[a+52>>2]=0}function Xa(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l[o[o[c>>2]+40>>2]](c,a)|0;e=l[o[o[c>>2]+28>>2]](c,d)|0;o[b>>2]=e;if(e){l[o[o[c>>2]+48>>2]](c,d)}o[b+4>>2]=o[a+4>>2];return 13258}function Rw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;M=c+16|0;return(o[a+12>>2]+4|0)+u(o[a+8>>2],184)|0}function ME(a){a=a|0;var b=0;o[a>>2]=17276;if(p[a+192|0]){b=o[a+136>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+136>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}cb(a- -64|0);cb(a+4|0);return a|0}function xo(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a:{if(wb(a,a)<v(0)){s[b+8>>2]=v(2)*Qb(s[a+12>>2]);break a}s[b+8>>2]=v(2)*Qb(v(-s[a+12>>2]))}M=b+16|0;return s[b+8>>2]}function si(a,b,c,d){var e=0,f=0,g=0,h=0;f=o[a+4>>2];a=o[a>>2];g=a;h=b;e=0;a:{if(!c){break a}b=f>>8;e=b;if(!(f&1)){break a}e=o[b+o[c>>2]>>2]}l[o[o[a>>2]+28>>2]](g,h,e+c|0,f&2?d:2)}function Sr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=tA(o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2])&1;M=e+16|0;return a|0}function $E(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;a=aa(324);Nj(a,o[e+12>>2],o[e+8>>2],o[e+4>>2]);M=e+16|0;return a|0}function xv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];b=o[a+192>>2];l[o[o[b>>2]+8>>2]](b,a+4|0,o[d+8>>2],o[d+4>>2]);M=d+16|0}function pp(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+300>>2]=o[a>>2];o[b+304>>2]=c;c=o[a+12>>2];o[b+308>>2]=o[a+8>>2];o[b+312>>2]=c}function np(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+316>>2]=o[a>>2];o[b+320>>2]=c;c=o[a+12>>2];o[b+324>>2]=o[a+8>>2];o[b+328>>2]=c}function jC(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+680>>2]=o[a>>2];o[b+684>>2]=c;c=o[a+12>>2];o[b+688>>2]=o[a+8>>2];o[b+692>>2]=c}function iL(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2]+264;o[a+8>>2]=b;M=c+16|0;return o[o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<2)>>2]}function iG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;if(b>>>0<=11){b=b<<2;f=o[b+15108>>2];b=o[b+15060>>2]}else{b=0}l[o[o[a>>2]+108>>2]](e,b,c);l[o[o[a>>2]+108>>2]](a,f,d)}function XB(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+12>>2];a=o[c+8>>2];c=o[a+4>>2];o[b+696>>2]=o[a>>2];o[b+700>>2]=c;c=o[a+12>>2];o[b+704>>2]=o[a+8>>2];o[b+708>>2]=c}function Ul(a,b){a=a|0;b=b|0;var c=0,d=0;a=o[a+64>>2];c=o[a+8>>2];if(c){b=o[a+12>>2];d=o[b>>2];o[a+8>>2]=c+ -1;o[a+12>>2]=d;return b|0}o[7717]=o[7717]+1;return l[o[6606]](b,16)|0}function xr(a){var b=0;b=M-16|0;M=b;o[b+8>>2]=a;a=M-16|0;o[a+12>>2]=o[b+8>>2];a:{if(o[o[a+12>>2]+236>>2]==8){o[b+12>>2]=o[b+8>>2];break a}o[b+12>>2]=0}M=b+16|0;return o[b+12>>2]}function gd(a){var b=0;b=M-16|0;M=b;o[b+8>>2]=a;a=M-16|0;o[a+12>>2]=o[b+8>>2];a:{if(o[o[a+12>>2]+236>>2]==4){o[b+12>>2]=o[b+8>>2];break a}o[b+12>>2]=0}M=b+16|0;return o[b+12>>2]}function yv(a){var b=0;b=M-16|0;M=b;o[b+8>>2]=a;a=M-16|0;o[a+12>>2]=o[b+8>>2];a:{if(o[o[a+12>>2]+236>>2]&2){o[b+12>>2]=o[b+8>>2];break a}o[b+12>>2]=0}M=b+16|0;return o[b+12>>2]}function id(a,b,c,d,e){var f=0;f=M-32|0;M=f;o[f+28>>2]=a;o[f+24>>2]=b;o[f+20>>2]=c;o[f+16>>2]=d;o[f+12>>2]=e;Wb(o[f+28>>2],o[f+24>>2],o[f+20>>2],o[f+16>>2],o[f+12>>2]);M=f+32|0}function Ws(a,b,c,d){a=v(a);b=v(b);c=v(c);d=v(d);var e=0,f=0;e=M-16|0;M=e;s[e+12>>2]=a;s[e+8>>2]=b;s[e+4>>2]=c;s[e>>2]=d;f=aa(16);Vs(f,e+12|0,e+8|0,e+4|0,e);M=e+16|0;return f|0}function Ro(a,b,c,d){a=v(a);b=v(b);c=v(c);d=v(d);var e=0,f=0;e=M-16|0;M=e;s[e+12>>2]=a;s[e+8>>2]=b;s[e+4>>2]=c;s[e>>2]=d;f=fa(16);id(f,e+12|0,e+8|0,e+4|0,e);M=e+16|0;return f|0}function LE(a){a=a|0;var b=0;o[a>>2]=17276;if(p[a+192|0]){b=o[a+136>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+136>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}cb(a- -64|0);cb(a+4|0);ba(a)}function Bb(a){var b=0,c=0;b=o[7848];c=a+3&-4;a=b+c|0;a:{if(a>>>0<=b>>>0?(c|0)>=1:0){break a}if(a>>>0>O()<<16>>>0){if(!K(a|0)){break a}}o[7848]=a;return b}o[7722]=48;return-1}function eb(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];return v(v(v(s[a>>2]*s[o[c+8>>2]>>2])+v(s[a+4>>2]*s[o[c+8>>2]+4>>2]))+v(s[a+8>>2]*s[o[c+8>>2]+8>>2]))}function xq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+170|0]=m[a+11|0]&1;M=c+16|0}function Yu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+524|0]=m[a+11|0]&1;M=c+16|0}function Wu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+552|0]=m[a+11|0]&1;M=c+16|0}function Gu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+736|0]=m[a+11|0]&1;M=c+16|0}function Fu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+737|0]=m[a+11|0]&1;M=c+16|0}function lv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=aa(116);Xd(a,o[d+12>>2],o[d+8>>2],o[d+4>>2]&65535,0,0);M=d+16|0;return a|0}function kb(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;b=m[c+11|0]&1;a=M-16|0;o[a+12>>2]=o[c+12>>2];m[a+11|0]=b;m[o[a+12>>2]+21|0]=m[a+11|0]&1;M=c+16|0}function us(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+104>>2]=s[a+8>>2];M=c+16|0}function km(a){var b=0;gc(a);o[a+276>>2]=0;m[a+280|0]=1;o[a+268>>2]=0;o[a+272>>2]=0;o[a+236>>2]=4;o[a>>2]=4084;o[7717]=o[7717]+1;b=l[o[6606]](76,16)|0;Wf(b);o[a+284>>2]=b}function kc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+252>>2]=s[a+8>>2];M=c+16|0}function jc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+248>>2]=s[a+8>>2];M=c+16|0}function Xu(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+440>>2]=s[a+8>>2];M=c+16|0}function Vb(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+184>>2]=s[a+8>>2];M=c+16|0}function Fp(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+188>>2]=s[a+8>>2];M=c+16|0}function Eu(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+684>>2]=s[a+8>>2];M=c+16|0}function sk(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+12>>2]=s[a+8>>2];M=c+16|0}function mc(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[o[a+12>>2]+204>>2]=o[a+8>>2];M=c+16|0}function ib(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+16>>2]=s[a+8>>2];M=c+16|0}function Rj(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];a=l[o[o[a>>2]+52>>2]](a,s[c+8>>2],1,v(.01666666753590107))|0;M=c+16|0;return a|0}function Oa(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[o[a+12>>2]+240>>2]=o[a+8>>2];M=c+16|0}function zE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)!=(c|0)){d=o[o[a+4>>2]+136>>2];l[o[o[d>>2]+8>>2]](d,o[b+36>>2],o[c+36>>2])|0;a=o[a+4>>2];o[a+160>>2]=o[a+160>>2]+1}}function yn(a,b){a=a|0;b=b|0;var c=0,d=0;c=M-144|0;M=c;o[c+140>>2]=a;o[c+136>>2]=b;a=c+8|0;b=o[c+140>>2];nh(a,b+68|0);d=c+72|0;Wg(d,a,b+4|0);Sb(o[c+136>>2],d);M=c+144|0}function nq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;n[e+6>>1]=c;n[e+4>>1]=d;Uy(o[e+12>>2],o[e+8>>2],n[e+6>>1],n[e+4>>1]);M=e+16|0}function ks(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[o[a+12>>2]+84>>2]=o[a+8>>2];M=c+16|0}function js(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[o[a+12>>2]+88>>2]=o[a+8>>2];M=c+16|0}function he(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+4>>2]=s[a+8>>2];M=c+16|0}function ge(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]+8>>2]=s[a+8>>2];M=c+16|0}function Iu(a,b,c,d){a=a|0;b=b|0;c=v(c);d=v(d);var e=0;e=M-16|0;M=e;o[e+12>>2]=a;m[e+11|0]=b;s[e+4>>2]=c;s[e>>2]=d;Hu(o[e+12>>2],m[e+11|0]&1,s[e+4>>2],s[e>>2]);M=e+16|0}function Hw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;m[e+3|0]=d;al(o[e+12>>2],o[e+8>>2],o[e+4>>2],m[e+3|0]&1);M=e+16|0}function He(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;m[e+3|0]=d;Je(o[e+12>>2],o[e+8>>2],o[e+4>>2],m[e+3|0]&1);M=e+16|0}function ly(a,b,c,d){a=a|0;b=v(b);c=v(c);d=v(d);var e=0;e=M-16|0;M=e;o[e+12>>2]=a;s[e+8>>2]=b;s[e+4>>2]=c;s[e>>2]=d;hy(o[e+12>>2],s[e+8>>2],s[e+4>>2],s[e>>2]);M=e+16|0}function iA(a,b,c){a=o[a+720>>2]+u(c,104)|0;if(!!(s[a+88>>2]>v(0))){s[a+56>>2]=s[b>>2]+s[a+56>>2];s[a+60>>2]=s[b+4>>2]+s[a+60>>2];a=a- -64|0;s[a>>2]=s[b+8>>2]+s[a>>2]}}function Kn(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[b+8>>2]=(o[a+52>>2]+2|0)%3;c=M-16|0;o[c+12>>2]=a+28;M=b+16|0;return s[o[c+12>>2]+(o[b+8>>2]<<2)>>2]}function yC(a){a=a|0;o[7313]=17792;a=o[7437];if(a){if(p[29752]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[7437]=0}m[29752]=1;o[7435]=0;o[7436]=0;o[7437]=0;o[7313]=3948}function xu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;uk(o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2],0);M=e+16|0}function tB(a){a=a|0;o[7469]=17792;a=o[7593];if(a){if(p[30376]){if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}o[7593]=0}m[30376]=1;o[7591]=0;o[7592]=0;o[7593]=0;o[7469]=3948}function ie(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;b=s[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];s[a+8>>2]=b;s[o[a+12>>2]>>2]=s[a+8>>2];M=c+16|0}function Ns(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;s[(o[o[d+12>>2]+144>>2]+u(o[d+4>>2],284)|0)+252>>2]=s[d+8>>2];M=d+16|0}function Ms(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;s[(o[o[d+12>>2]+144>>2]+u(o[d+4>>2],284)|0)+232>>2]=s[d+8>>2];M=d+16|0}function Es(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;s[(o[o[d+12>>2]+144>>2]+u(o[d+4>>2],284)|0)+256>>2]=s[d+8>>2];M=d+16|0}function dh(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[a>>2]=1296;Qa(a+112|0);Qa(a+92|0);Qa(a+72|0);Qa(a+20|0);o[(M-16|0)+12>>2]=a;M=b+16|0;return a|0}function Zg(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=En(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function Pm(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=Nm(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function Mm(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=Lm(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function Hm(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=Gm(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function Cn(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=Bn(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function Cm(a,b){var c=0;c=M-16|0;M=c;o[c+8>>2]=a;o[c+4>>2]=b;a=o[c+8>>2];a:{if(o[c+4>>2]){o[c+12>>2]=Bm(a,o[c+4>>2]);break a}o[c+12>>2]=0}M=c+16|0;return o[c+12>>2]}function yb(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=b;s[c+8>>2]=-s[o[c+12>>2]>>2];s[c+4>>2]=-s[o[c+12>>2]+4>>2];s[c>>2]=-s[o[c+12>>2]+8>>2];Y(a,c+8|0,c+4|0,c);M=c+16|0}function _d(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+12>>2]=a;o[e+8>>2]=b;o[e+4>>2]=c;o[e>>2]=d;UJ(o[e+12>>2],o[e+8>>2],o[e+4>>2],o[e>>2]);M=e+16|0}function VB(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=o[a+32>>2];e=c+328|0;d=o[a+28>>2];f=d+328|0;c=c+4|0;d=d+4|0;if(p[a+739|0]){UB(a,b,d,c,f,e);return}TB(a,b,d,c,f,e)}function Sd(a,b){var c=0;if(o[b+40>>2]){Sd(a,o[b+36>>2]);Sd(a,o[b+40>>2])}if(o[a>>2]==(b|0)){o[a>>2]=0}c=o[a+4>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}o[a+4>>2]=b}function Pq(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=aa(184);aj(a,o[d+12>>2],o[d+8>>2],s[d+4>>2],1);M=d+16|0;return a|0}function Ip(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;m[d+11|0]=b;m[d+10|0]=c;a=aa(76);Wk(a,o[d+12>>2],m[d+11|0]&1,m[d+10|0]&1);M=d+16|0;return a|0}function Eh(a){var b=0,c=0;b=M-16|0;M=b;o[b+8>>2]=a;a=o[b+8>>2];o[b+12>>2]=a;c=a+48|0;while(1){o[(M-16|0)+12>>2]=a;a=a+16|0;if((c|0)!=(a|0)){continue}break}M=b+16|0}function AA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=o[b>>2];c=l[o[o[c>>2]+56>>2]](c,20)|0;a=p[a+4|0];o[c>>2]=17764;o[c+4>>2]=o[b>>2];m[c+16|0]=a;o[c>>2]=22200;return c|0}function kp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];b=o[c+8>>2];c=o[b+4>>2];o[a+348>>2]=o[b>>2];o[a+352>>2]=c;o[a+356>>2]=o[b+8>>2]}function Kp(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;c=o[b+12>>2];o[a+12>>2]=c;a=o[a+12>>2];o[a>>2]=1944;n[a+4>>1]=1;n[a+6>>1]=65535;o[c>>2]=1824;M=b+16|0}function vj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;n[d+6>>1]=c;a=o[d+12>>2];l[o[o[a>>2]+36>>2]](a,o[d+8>>2],n[d+6>>1],-3);M=d+16|0}function lw(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=M-16|0;a=o[c+12>>2];o[b+12>>2]=a;o[o[b+12>>2]>>2]=1452;o[a>>2]=20032;o[a+4>>2]=o[c+8>>2];M=c+16|0}function co(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=aa(1388);RC(a,o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0;return a|0}function Wg(a,b,c){var d=0;d=M-80|0;M=d;o[d+76>>2]=a;o[d+72>>2]=b;o[d+68>>2]=c;b=d+16|0;c=o[d+72>>2];wn(b,c,o[d+68>>2]);Vg(d,c,o[d+68>>2]+48|0);Ue(a,b,d);M=d+80|0}function Rg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;n[d+6>>1]=c;a=o[d+12>>2];l[o[o[a>>2]+36>>2]](a,o[d+8>>2],n[d+6>>1],-1);M=d+16|0}function MK(a){a=a|0;var b=0;o[a+12>>2]=6392;o[a>>2]=6364;b=o[a+60>>2];l[o[o[b>>2]+20>>2]](b,o[a+76>>2]);b=o[a+60>>2];l[o[o[b>>2]+16>>2]](b,o[a+76>>2]);return a|0}function Hu(a,b,c,d){var e=0;e=M-16|0;o[e+12>>2]=a;m[e+11|0]=b;s[e+4>>2]=c;s[e>>2]=d;a=o[e+12>>2];m[a+737|0]=m[e+11|0]&1;s[a+680>>2]=s[e+4>>2];s[a+684>>2]=s[e>>2]}function Hp(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=aa(1128);tC(a,o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0;return a|0}function GC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=aa(1312);uj(a,o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0;return a|0}function Dv(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[a+480>>2]=o[c+8>>2];if(o[a+480>>2]){b=o[c+8>>2];l[o[o[b>>2]+8>>2]](b,a+4|0)}M=c+16|0}function Vr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=aa(128);bI(a,o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0;return a|0}function Sh(a,b){var c=0,d=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;b=c+8|0;a=o[c+44>>2];ea(b,a+264|0,o[c+40>>2]);d=c+24|0;lb(d,b,a+544|0);Wa(a+328|0,d);M=c+48|0}function Rh(a,b){var c=0,d=0;c=M-48|0;M=c;o[c+44>>2]=a;o[c+40>>2]=b;b=c+8|0;a=o[c+44>>2];lb(b,o[c+40>>2],a+348|0);d=c+24|0;ta(d,b,a+344|0);Wa(a+312|0,d);M=c+48|0}function Qu(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=aa(764);jj(a,o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0;return a|0}function nh(a,b){var c=0,d=0,e=0;c=M-96|0;M=c;o[c+92>>2]=a;o[c+88>>2]=b;b=c+40|0;d=o[c+88>>2];Tp(b,d);e=c+8|0;yb(e,d+48|0);d=c+24|0;ea(d,b,e);Ue(a,b,d);M=c+96|0}function ma(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];l[o[o[a>>2]+32>>2]](a,s[d+8>>2],o[d+4>>2]);M=d+16|0}function Lq(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];l[o[o[a>>2]+20>>2]](a,o[d+8>>2],s[d+4>>2]);M=d+16|0}function Iq(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];l[o[o[a>>2]+36>>2]](a,o[d+8>>2],s[d+4>>2]);M=d+16|0}function vz(a){a=a|0;a:{if(m[30564]&1){break a}if(!da(30564)){break a}o[7639]=1065353216;o[7640]=0;o[7637]=1065353216;o[7638]=1065353216;ca(30564)}return 30548}function tg(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];l[o[o[a>>2]+8>>2]](a,o[d+8>>2],s[d+4>>2]);M=d+16|0}function Xj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=o[d+12>>2];l[o[o[a>>2]+56>>2]](a,o[d+8>>2],m[d+7|0]&1);M=d+16|0}function Pg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=o[d+12>>2];l[o[o[a>>2]+40>>2]](a,o[d+8>>2],o[d+4>>2]);M=d+16|0}function Bo(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=b;b=o[c+12>>2];s[c+8>>2]=-s[b>>2];s[c+4>>2]=-s[b+4>>2];s[c>>2]=-s[b+8>>2];id(a,c+8|0,c+4|0,c,b+12|0);M=c+16|0}function XJ(a,b,c,d,e,f,g,h){var i=0;i=M-32|0;M=i;o[i+24>>2]=-1;o[i+28>>2]=-1;o[i+20>>2]=f;o[i+16>>2]=d;o[i+12>>2]=e;o[i+8>>2]=0;jg(a,b,c,i+8|0,g,h);M=i+32|0}function LK(a){a=a|0;var b=0;o[a+12>>2]=6392;o[a>>2]=6364;b=o[a+60>>2];l[o[o[b>>2]+20>>2]](b,o[a+76>>2]);b=o[a+60>>2];l[o[o[b>>2]+16>>2]](b,o[a+76>>2]);ba(a)}function zj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[6734]=o[a+8>>2];M=c+16|0}function Sj(a){var b=0;b=o[a+12>>2];if(b){if(p[a+16|0]){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}o[a+12>>2]=0}o[a+12>>2]=0;m[a+16|0]=1;o[a+4>>2]=0;o[a+8>>2]=0}function Rp(a,b){var c=0;c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;b=c+8|0;a=o[c+28>>2];ea(b,a,o[c+24>>2]+48|0);Wa(a+48|0,b);Qp(a,o[c+24>>2]);M=c+32|0;return a}function Ka(a){var b=0,c=0;b=a*a;c=b*a;return v(c*(b*b)*(b*2718311493989822e-21+ -.00019839334836096632)+(c*(b*.008333329385889463+ -.16666666641626524)+a))}function Ij(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[6989]=o[a+8>>2];M=c+16|0}function Ej(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;b=o[c+8>>2];a=M-16|0;o[a+12>>2]=o[c+12>>2];o[a+8>>2]=b;o[6735]=o[a+8>>2];M=c+16|0}function tK(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=(b<<4)+a|0;b=a- -64|0;d=o[b+4>>2];o[c+8>>2]=o[b>>2];o[c+12>>2]=d;b=o[a+60>>2];o[c>>2]=o[a+56>>2];o[c+4>>2]=b}function _n(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;s[(o[d+12>>2]+(o[d+8>>2]<<2)|0)+1364>>2]=s[d+4>>2];M=d+16|0}function Xn(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;s[(o[d+12>>2]+(o[d+8>>2]<<2)|0)+1316>>2]=s[d+4>>2];M=d+16|0}function Wp(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];Vp(a,o[c+8>>2]);Y(a+48|0,o[c+8>>2]+48|0,o[c+8>>2]+52|0,o[c+8>>2]+56|0);M=c+16|0}function $n(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;s[(o[d+12>>2]+(o[d+8>>2]<<2)|0)+1340>>2]=s[d+4>>2];M=d+16|0}function xy(){var a=0;a=fa(8);o[7705]=a;H(a|0,0)|0;o[7707]=0;o[7708]=0;o[7706]=23024;o[7709]=0;o[7710]=0;o[7711]=0;o[7712]=0;o[7713]=0;o[7714]=0;Ad(30824)}function UG(a,b){a=a|0;b=b|0;var c=v(0),d=v(0),e=v(0);c=s[b>>2];d=s[b+4>>2];e=s[b+8>>2];o[a+24>>2]=0;s[a+20>>2]=w(e);s[a+16>>2]=w(d);s[a+12>>2]=w(c);Mk(a)}function OH(a){a=a|0;var b=0;o[a>>2]=11692;if(p[a+61|0]){b=o[a+52>>2];l[o[o[b>>2]>>2]](b)|0;b=o[a+52>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}return a|0}function KH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=M+ -64|0;M=e;f=o[a+48>>2];o[e+8>>2]=b;o[e+4>>2]=f;o[e>>2]=12164;qE(o[a+52>>2],e,c,d);M=e- -64|0}function GK(a,b,c){a=v(a);b=v(b);c=v(c);var d=0,e=0;d=M-16|0;M=d;s[d+12>>2]=a;s[d+8>>2]=b;s[d+4>>2]=c;e=aa(16);Y(e,d+12|0,d+8|0,d+4|0);M=d+16|0;return e|0}function sD(a,b){a=a|0;b=b|0;var c=0;if(p[a+273|0]){c=o[a+200>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}}o[a+200>>2]=b;m[a+273|0]=0;o[o[a+196>>2]+8>>2]=b}function Tr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=uA(o[d+12>>2],o[d+8>>2],o[d+4>>2])&1;M=d+16|0;return a|0}function Qo(a,b,c,d){a=a|0;b=v(b);c=v(c);d=v(d);var e=0;e=M-16|0;M=e;o[e+12>>2]=a;s[e+8>>2]=b;s[e+4>>2]=c;s[e>>2]=d;Po(o[e+12>>2],e+8|0,e+4|0,e);M=e+16|0}function Ab(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=0;o[c+4>>2]=b;o[c>>2]=o[c+8>>2];while(1){if(o[c>>2]<o[c+4>>2]){o[c>>2]=o[c>>2]+1;continue}break}}function aJ(a,b,c,d){a=a|0;b=v(b);c=v(c);d=v(d);var e=0;e=M-16|0;M=e;o[e+12>>2]=a;s[e+8>>2]=b;s[e+4>>2]=c;s[e>>2]=d;Y(o[e+12>>2],e+8|0,e+4|0,e);M=e+16|0}function zr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=$z(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0;return a|0}function uu(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;a=Yd(o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0;return a|0}function Qb(a){var b=0;b=M-16|0;M=b;s[b+12>>2]=a;if(s[b+12>>2]<v(-1)){s[b+12>>2]=-1}if(s[b+12>>2]>v(1)){s[b+12>>2]=1}a=Sa(s[b+12>>2]);M=b+16|0;return a}function Ar(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=Ni(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0;return a|0}function Os(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;a=fa(152);sB(a,o[d+8>>2],o[d+4>>2]);M=d+16|0;return a|0}function Gm(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=u(o[c+8>>2],104);o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function YJ(a,b,c,d,e,f){var g=0;g=M-32|0;M=g;o[g+24>>2]=-1;o[g+28>>2]=-1;o[g+20>>2]=e;o[g+16>>2]=c;o[g+12>>2]=d;o[g+8>>2]=0;le(a,b,g+8|0,f);M=g+32|0}function YE(a,b,c){a=a|0;b=b|0;c=c|0;a:{if(!c){break a}a=o[b+8>>2];if(!a){break a}l[o[o[a>>2]>>2]](a)|0;l[o[o[c>>2]+60>>2]](c,o[b+8>>2]);o[b+8>>2]=0}}function Nm(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=u(o[c+8>>2],36);o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function Mq(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];if(o[c+8>>2]<0){o[c+8>>2]=0}if(o[c+8>>2]>2){o[c+8>>2]=2}o[a+176>>2]=o[c+8>>2]}function Lm(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=u(o[c+8>>2],96);o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function Bm(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=u(o[c+8>>2],44);o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function xk(a){a=a|0;var b=v(0),c=v(0);b=s[a+28>>2];c=v(l[o[o[a>>2]+48>>2]](a));v(l[o[o[a>>2]+48>>2]](a));v(l[o[o[a>>2]+48>>2]](a));return v(v(b+c))}function vG(a,b){a=a|0;b=b|0;var c=0,d=0;d=o[b+4>>2];c=o[a+92>>2];o[c+4>>2]=o[b>>2];o[c+8>>2]=d;d=o[b+12>>2];o[c+12>>2]=o[b+8>>2];o[c+16>>2]=d;Ib(a)}function ae(a,b){a=a|0;b=b|0;var c=v(0),d=v(0),e=v(0);c=s[b>>2];d=s[b+4>>2];e=s[b+8>>2];o[a+24>>2]=0;s[a+20>>2]=w(e);s[a+16>>2]=w(d);s[a+12>>2]=w(c)}function Tk(a,b){a=a|0;b=b|0;var c=0,d=0;d=o[b+4>>2];c=o[a+48>>2];o[c+4>>2]=o[b>>2];o[c+8>>2]=d;d=o[b+12>>2];o[c+12>>2]=o[b+8>>2];o[c+16>>2]=d;Uk(a)}function FF(a){a=a|0;var b=v(0),c=v(0);b=s[a+32>>2];v(l[o[o[a>>2]+48>>2]](a));c=v(l[o[o[a>>2]+48>>2]](a));v(l[o[o[a>>2]+48>>2]](a));return v(v(b+c))}function pJ(a){a=a|0;var b=0,c=0;o[a>>2]=9808;a:{if(!p[a+16|0]){break a}b=o[a+20>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}return a|0}function fo(a){a=a|0;var b=0,c=v(0);b=M-16|0;o[b+12>>2]=a;c=s[o[b+12>>2]+48>>2];a:{if(v(w(c))<v(2147483648)){a=~~c;break a}a=-2147483648}return a|0}function vJ(a){a=a|0;var b=0,c=0;o[a>>2]=9708;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}return a|0}function lK(a){a=a|0;var b=0,c=0;o[a>>2]=7016;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}return a|0}function fL(a){a=a|0;var b=0,c=0;o[a>>2]=5152;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}return a|0}function RK(a){a=a|0;var b=0,c=0;o[a>>2]=6204;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}return a|0}function Qx(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(Fa(a,o[b+8>>2],f)){hf(b,c,d,e);return}a=o[a+8>>2];l[o[o[a>>2]+20>>2]](a,b,c,d,e,f)}function OE(a,b){a=a|0;b=b|0;var c=0;c=o[a+4>>2];if(!((c|0)!=o[b+4>>2]?(c|0)!=o[b>>2]:0)){c=o[a+8>>2];l[o[o[c>>2]+32>>2]](c,b,o[a+12>>2])}return 0}function JK(a){a=a|0;var b=0;o[a>>2]=6392;b=o[a+48>>2];l[o[o[b>>2]+20>>2]](b,o[a+64>>2]);b=o[a+48>>2];l[o[o[b>>2]+16>>2]](b,o[a+64>>2]);return a|0}function Hb(a){a=a|0;var b=0;o[a>>2]=12800;b=o[a+52>>2];if(b){l[o[o[b>>2]>>2]](b)|0;b=o[a+52>>2];if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}return a|0}function En(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=o[c+8>>2]<<2;o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function Dc(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+8>>2];b=o[c+12>>2];if((o[b+216>>2]&-2)!=4){o[b+216>>2]=a}M=c+16|0}function Bn(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[c+4>>2]=0;a=o[c+8>>2]<<4;o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=c+16|0;return a}function xs(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;M=c+16|0;return v(s[(o[o[c+12>>2]+144>>2]+u(o[c+8>>2],284)|0)+232>>2])}function gn(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[c+4>>2]=o[c+8>>2];o[c>>2]=a;G(3002,3246,c|0)|0;M=c+16|0}function en(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[c+4>>2]=o[c+8>>2];o[c>>2]=a;G(3476,3702,c|0)|0;M=c+16|0}function TK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=o[b>>2];e=l[o[o[e>>2]+56>>2]](e,28)|0;SK(e,b,c,d,p[a+4|0],o[a+8>>2],o[a+12>>2]);return e|0}function rj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];a=l[o[o[a>>2]+40>>2]](a,o[c+8>>2])|0;M=c+16|0;return a|0}function lu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];a=l[o[o[a>>2]+92>>2]](a,o[c+8>>2])&1;M=c+16|0;return a|0}function au(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];o[a+8>>2]=0;M=b+16|0;return o[o[a+12>>2]+12>>2]+(o[a+8>>2]<<4)|0}function XE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=c;o[d+8>>2]=a;o[d+4>>2]=b;o[d>>2]=16968;l[o[o[a>>2]+48>>2]](a,d,c);M=d+16|0}function SB(a,b,c){var d=0;d=M-16|0;M=d;s[d+12>>2]=b;vC(a+688|0,d+12|0);s[a+680>>2]=v(s[d+12>>2]-Gf(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0))/c;M=d+16|0}function Du(a,b,c){a=a|0;b=v(b);c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;s[d+4>>2]=c;SB(o[d+12>>2],s[d+8>>2],s[d+4>>2]);M=d+16|0}



function Xl(a,b,c){a=a|0;b=b|0;c=c|0;a=0;b=o[b+204>>2];a:{if(b&4){break a}c=o[c+204>>2];if(c&4){break a}if(!(b&3)){return 1}a=!(c&3)}return a|0}function oJ(a){a=a|0;var b=0,c=0;o[a>>2]=9808;a:{if(!p[a+16|0]){break a}b=o[a+20>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}ba(a)}function gf(a,b,c,d,e,f){var g=0,h=0,i=0;g=o[a+4>>2];h=g>>8;a=o[a>>2];i=a;if(g&1){h=o[o[d>>2]+h>>2]}l[o[o[a>>2]+20>>2]](i,b,c,d+h|0,g&2?e:2,f)}function QI(a,b){m[a+16|0]=1;o[a+44>>2]=b;o[a+12>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+40>>2]=0;m[a+36|0]=1;o[a+32>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0}function xn(a,b){a=a|0;b=b|0;var c=0;c=M-80|0;M=c;o[c+76>>2]=a;o[c+72>>2]=b;a=c+8|0;b=o[c+76>>2];Wg(a,o[c+72>>2],b+68|0);Sb(b+4|0,a);M=c+80|0}function uJ(a){a=a|0;var b=0,c=0;o[a>>2]=9708;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}ba(a)}function mv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(116);Xd(a,o[c+12>>2],o[c+8>>2],16384,0,0);M=c+16|0;return a|0}function kK(a){a=a|0;var b=0,c=0;o[a>>2]=7016;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}ba(a)}function eL(a){a=a|0;var b=0,c=0;o[a>>2]=5152;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}ba(a)}function QK(a){a=a|0;var b=0,c=0;o[a>>2]=6204;a:{if(!p[a+8|0]){break a}b=o[a+12>>2];if(!b){break a}c=o[a+4>>2];l[o[o[c>>2]+16>>2]](c,b)}ba(a)}function IK(a){a=a|0;var b=0;o[a>>2]=6392;b=o[a+48>>2];l[o[o[b>>2]+20>>2]](b,o[a+64>>2]);b=o[a+48>>2];l[o[o[b>>2]+16>>2]](b,o[a+64>>2]);ba(a)}function BA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,24)|0;o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=22960;return a|0}function kG(a,b,c){a=a|0;b=b|0;c=c|0;if(b>>>0<=5){o[c+12>>2]=0;a=b<<2;o[c+8>>2]=o[a+15036>>2];o[c+4>>2]=o[a+15012>>2];o[c>>2]=o[a+14988>>2]}}function gw(a,b,c){a=a|0;b=v(b);c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;s[d+4>>2]=c;fw(o[d+12>>2],s[d+8>>2],s[d+4>>2]);M=d+16|0}function cw(a,b,c){a=a|0;b=v(b);c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;s[d+4>>2]=c;hE(o[d+12>>2],s[d+8>>2],s[d+4>>2]);M=d+16|0}function Wo(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;s[(o[d+12>>2]+20|0)+(o[d+8>>2]<<2)>>2]=s[d+4>>2]}function Jl(a,b){var c=0,d=0;d=Kl(a);c=o[a+288>>2];o[b+8>>2]=o[a+284>>2];o[b+12>>2]=c;c=o[a+280>>2];o[b>>2]=o[a+276>>2];o[b+4>>2]=c;return d}function Iw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;al(o[d+12>>2],o[d+8>>2],o[d+4>>2],1);M=d+16|0}function Ie(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;Je(o[d+12>>2],o[d+8>>2],o[d+4>>2],0);M=d+16|0}function bw(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;o[d+4>>2]=c;Tf(o[d+12>>2],s[d+8>>2],o[d+4>>2]);M=d+16|0}function _u(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;Zu(o[d+12>>2],o[d+8>>2],s[d+4>>2]);M=d+16|0}function XK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,8)|0;o[a>>2]=17764;o[a+4>>2]=o[b>>2];o[a>>2]=4984;return a|0}function Qr(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;sA(o[d+12>>2],o[d+8>>2],s[d+4>>2]);M=d+16|0}function Hr(a,b,c){a=a|0;b=v(b);c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;s[d+8>>2]=b;m[d+7|0]=c;fA(o[d+12>>2],s[d+8>>2],m[d+7|0]&1);M=d+16|0}function FB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;if((c|0)>=1){while(1){GB(a,o[(e<<2)+b>>2],d);e=e+1|0;if((e|0)!=(c|0)){continue}break}}}function Aq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];b=s[c+8>>2];s[a+36>>2]=b;s[a+40>>2]=ra(b);M=c+16|0}function An(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;c=o[b+12>>2];o[a+12>>2]=c+28;M=b+16|0;return s[o[a+12>>2]+(o[c+52>>2]<<2)>>2]}function vs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;Rc(o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0}function vd(a,b,c,d,e){var f=0,g=0,h=0;f=o[a+4>>2];g=f>>8;a=o[a>>2];h=a;if(f&1){g=o[o[c>>2]+g>>2]}l[o[o[a>>2]+24>>2]](h,b,c+g|0,f&2?d:2,e)}function nu(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;Kk(o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0}function kh(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[c+4>>2]=v(1)/s[o[c+8>>2]>>2];a=ih(a,c+4|0);M=c+16|0;return a}function ao(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;QC(o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0}function Vv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;Uv(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function Vl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=M-16|0;M=e;o[e+8>>2]=a;o[e+4>>2]=c;o[e>>2]=4304;l[o[o[b>>2]+48>>2]](b,e,d);M=e+16|0}function Ud(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;VJ(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function Tn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;o[(o[d+12>>2]+8|0)+(o[d+8>>2]<<2)>>2]=o[d+4>>2]}function Pv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;Ca(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function Ow(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;JI(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function La(a){var b=0;a=a*a;b=a*a;return v(a*-.499999997251031+1+b*.04166662332373906+a*b*(a*2439044879627741e-20+ -.001388676377460993))}function Ks(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;m[d+7|0]=c;Ef(o[d+12>>2],o[d+8>>2],m[d+7|0]&1);M=d+16|0}function Kr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;iA(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function Jr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;Ri(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function Gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;$w(o[d+12>>2],o[d+8>>2],o[d+4>>2]);M=d+16|0}function _i(a){o[a+12>>2]=1065353216;o[a+4>>2]=5;o[a+8>>2]=0;o[a>>2]=20392;m[a+16|0]=1;m[a+36|0]=1;o[a+32>>2]=0;o[a+24>>2]=0;o[a+28>>2]=0}function Yh(a){var b=0;b=M-16|0;o[b+12>>2]=a;a=o[b+12>>2];o[a>>2]=1428;s[a+4>>2]=1;o[a+8>>2]=0;n[a+12>>1]=1;n[a+14>>1]=65535;o[a+16>>2]=0}function ze(a){var b=0;b=M-16|0;o[b+12>>2]=a;a=o[b+12>>2];o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=4096;o[a+12>>2]=4096;o[a+16>>2]=0;o[a+20>>2]=1}function qo(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(56);IG(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function io(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(56);DG(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function cL(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(76);vI(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function So(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(56);EG(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function Ls(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;M=c+16|0;return(o[o[c+12>>2]+144>>2]+u(o[c+8>>2],284)|0)+92|0}function Cu(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(76);uI(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function Bu(a,b){a=v(a);b=v(b);var c=0,d=0;c=M-16|0;M=c;s[c+12>>2]=a;s[c+8>>2]=b;d=aa(76);sI(d,s[c+12>>2],s[c+8>>2]);M=c+16|0;return d|0}function Oo(a,b,c){a=a|0;b=b|0;c=v(c);var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;s[d+4>>2]=c;No(o[d+12>>2],o[d+8>>2],d+4|0);M=d+16|0}function xj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+36>>2]](a,o[c+8>>2],2,-3);M=c+16|0}function qC(a,b){a=a|0;b=b|0;var c=0,d=0;c=a;d=b;b=o[a+28>>2];a=o[a+32>>2];pC(c,d,b+4|0,a+4|0,b+312|0,a+312|0,s[b+344>>2],s[a+344>>2])}function jh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+36>>2]](a,o[c+8>>2],1,-1);M=c+16|0}function bf(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];cq(a);s[b+8>>2]=0;s[b+4>>2]=0;s[b>>2]=0;Y(a+48|0,b+8|0,b+4|0,b);M=b+16|0}function VK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=o[b>>2];e=l[o[o[e>>2]+56>>2]](e,20)|0;wJ(e,o[b+4>>2],b,c,d,p[a+4|0]);return e|0}function LH(a,b,c,d,e,f){var g=0,h=0;g=M-16|0;M=g;h=o[a+48>>2];o[g+8>>2]=b;o[g+4>>2]=h;o[g>>2]=12016;mE(o[a+52>>2],g,c,d,e,f);M=g+16|0}function Jp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;a=aa(76);Wk(a,o[c+12>>2],m[c+11|0]&1,1);M=c+16|0;return a|0}function yu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;m[c+15|0]=a;m[c+14|0]=b;a=aa(172);Yf(a,m[c+15|0]&1,m[c+14|0]&1);M=c+16|0;return a|0}function rq(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;c=M-16|0;a=o[b+12>>2];o[c+12>>2]=a;Lg(a,o[o[c+12>>2]+4>>2]);Za(a);ld(a);M=b+16|0}function TG(a,b){a=a|0;b=b|0;var c=0;c=o[b+4>>2];o[a+12>>2]=o[b>>2];o[a+16>>2]=c;c=o[b+12>>2];o[a+20>>2]=o[b+8>>2];o[a+24>>2]=c;Ib(a)}function Ru(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(764);jj(a,o[c+12>>2],o[c+8>>2],0);M=c+16|0;return a|0}function Jx(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;c=M-16|0;a=o[b+12>>2];o[c+12>>2]=a;Ab(a,o[o[c+12>>2]+4>>2]);Za(a);ld(a);M=b+16|0}function tx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;a=aa(96);Fk(a,o[c+12>>2],m[c+11|0]&1);M=c+16|0;return a|0}function Uh(a,b){var c=0;c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;a=c+8|0;b=o[c+28>>2];lb(a,o[c+24>>2],b+544|0);Wa(b+428|0,a);M=c+32|0}function Th(a,b){var c=0;c=M-32|0;M=c;o[c+28>>2]=a;o[c+24>>2]=b;a=c+8|0;b=o[c+28>>2];lb(a,o[c+24>>2],b+348|0);Wa(b+412|0,a);M=c+32|0}function xw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=fa(132);ww(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function vq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;a=o[c+12>>2];l[o[o[a>>2]+52>>2]](a,m[c+11|0]&1);M=c+16|0}function sp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(360);HC(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function qq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=aa(84);sH(a,o[c+12>>2],s[c+8>>2]);M=c+16|0;return a|0}function pu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(112);$d(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function jw(){var a=0,b=0;b=fa(12);a=M-16|0;o[a+12>>2]=b;a=o[a+12>>2];s[a>>2]=.30000001192092896;s[a+4>>2]=1;s[a+8>>2]=0;return b|0}function av(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(608);iC(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Zj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+56>>2]](a,o[c+8>>2],0);M=c+16|0}function Za(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(o[a+12>>2]){if(m[a+16|0]&1){Dn(a,o[a+12>>2])}o[a+12>>2]=0}M=b+16|0}function Yr(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];a=o[a+12>>2];o[a+4>>2]=o[a+4>>2]+ -1;M=b+16|0}function Xt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=aa(200);Ve(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function To(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;c=o[b+12>>2];o[a+12>>2]=c;o[o[a+12>>2]>>2]=2428;o[c>>2]=2276;M=b+16|0}function TF(a,b){a=a|0;b=b|0;var c=0;c=o[b+4>>2];o[a+108>>2]=o[b>>2];o[a+112>>2]=c;c=o[b+12>>2];o[a+116>>2]=o[b+8>>2];o[a+120>>2]=c}function Qq(a){var b=0,c=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;c=o[b+12>>2];o[a+12>>2]=c;o[o[a+12>>2]>>2]=1712;o[c>>2]=1612;M=b+16|0}function GD(a,b){a=a|0;b=b|0;var c=0;c=o[b+252>>2];o[a>>2]=o[b+248>>2];o[a+4>>2]=c;c=o[b+260>>2];o[a+8>>2]=o[b+256>>2];o[a+12>>2]=c}function Fo(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=b;o[d+8>>2]=c;b=o[d+12>>2];s[d+4>>2]=v(1)/s[o[d+8>>2]>>2];Tm(a,b,d+4|0);M=d+16|0}function zs(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+16>>2]](a,s[c+8>>2]);M=c+16|0}function yc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return(o[o[a+12>>2]+204>>2]&2)!=0|0}function xc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return(o[o[a+12>>2]+204>>2]&1)!=0|0}function wc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return(o[o[a+12>>2]+204>>2]&3)!=0|0}function ss(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+20>>2]](a,s[c+8>>2]);M=c+16|0}function gq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=fa(64);fq(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function bs(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;Sb(a+4|0,o[c+8>>2]);M=c+16|0}function Pp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=fa(84);Op(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Gw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=fa(80);Fw(a,o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Fs(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;M=c+16|0;return o[o[c+12>>2]+144>>2]+u(o[c+8>>2],284)|0}function Ea(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+44>>2]](a,s[c+8>>2]);M=c+16|0}function zb(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+12>>2]](a,o[c+8>>2]);M=c+16|0}function wo(a,b){a=a|0;b=b|0;var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=vo(o[c+12>>2],o[c+8>>2]);M=c+16|0;return v(d)}function uo(a,b){a=a|0;b=b|0;var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=to(o[c+12>>2],o[c+8>>2]);M=c+16|0;return v(d)}function oa(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+24>>2]](a,o[c+8>>2]);M=c+16|0}function ne(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+40>>2]](a,o[c+8>>2]);M=c+16|0}function jk(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+72>>2]](a,o[c+8>>2]);M=c+16|0}function jd(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+64>>2]](a,o[c+8>>2]);M=c+16|0}function gk(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+84>>2]](a,o[c+8>>2]);M=c+16|0}function fw(a,b,c){var d=0;d=M-16|0;o[d+12>>2]=a;s[d+8>>2]=b;s[d+4>>2]=c;a=o[d+12>>2];s[a+472>>2]=s[d+8>>2];s[a+476>>2]=s[d+4>>2]}function ak(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+92>>2]](a,o[c+8>>2]);M=c+16|0}function Sc(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+16>>2]](a,o[c+8>>2]);M=c+16|0}function Rf(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+60>>2]](a,o[c+8>>2]);M=c+16|0}function Qg(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+36>>2]](a,o[c+8>>2]);M=c+16|0}function Pk(a,b){a=a|0;b=b|0;var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=eb(o[c+12>>2],o[c+8>>2]);M=c+16|0;return v(d)}function Ne(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+68>>2]](a,o[c+8>>2]);M=c+16|0}function Mg(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+44>>2]](a,o[c+8>>2]);M=c+16|0}function Kq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+28>>2]](a,o[c+8>>2]);M=c+16|0}function Jq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+32>>2]](a,o[c+8>>2]);M=c+16|0}function Io(a,b){a=a|0;b=b|0;var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=wb(o[c+12>>2],o[c+8>>2]);M=c+16|0;return v(d)}function As(a,b){a=a|0;b=b|0;var c=0,d=v(0);c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;d=bj(o[c+12>>2],o[c+8>>2]);M=c+16|0;return v(d)}function Ui(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];l[o[o[a>>2]+8>>2]](a,o[c+8>>2]);M=c+16|0}function Rt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c;wB(o[d+12>>2],o[d+8>>2]);M=d+16|0}function pH(a,b){a=a|0;b=b|0;var c=0;c=o[b+4>>2];o[a+68>>2]=o[b>>2];o[a+72>>2]=c;c=o[b+12>>2];o[a+76>>2]=o[b+8>>2];o[a+80>>2]=c}function og(a){var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=eK(o[b+12>>2]);a=M-16|0;s[a+12>>2]=c;M=b+16|0;return v(C(s[a+12>>2]))}function hs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(56);_f(a,o[b+12>>2]);o[a+52>>2]=0;o[a>>2]=15728;M=b+16|0;return a|0}function gs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(56);_f(a,o[b+12>>2]);o[a+52>>2]=2;o[a>>2]=15832;M=b+16|0;return a|0}function eH(a,b){a=a|0;b=b|0;var c=0;c=o[b+4>>2];o[a+16>>2]=o[b>>2];o[a+20>>2]=c;c=o[b+12>>2];o[a+24>>2]=o[b+8>>2];o[a+28>>2]=c}function Si(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return s[o[a+12>>2]+4>>2]<v(1)|0}function Ge(a){var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=xb(o[b+12>>2]);a=M-16|0;s[a+12>>2]=c;M=b+16|0;return v(C(s[a+12>>2]))}function EI(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+12>>2];s[c+4>>2]=v(1)/s[o[c+8>>2]>>2];Lk(a,c+4|0);M=c+16|0}function WE(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;M=d;o[d+12>>2]=b;o[d+8>>2]=17112;l[o[o[a>>2]+48>>2]](a,d+8|0,c);M=d+16|0}function MH(a,b,c,d){var e=0,f=0;e=M-16|0;M=e;f=o[a+48>>2];o[e+8>>2]=b;o[e+4>>2]=f;o[e>>2]=11848;nE(o[a+52>>2],e,c,d);M=e+16|0}function Fh(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[(M-16|0)+12>>2]=a+4;Eh(a+28|0);o[(M-16|0)+12>>2]=a+76;M=b+16|0}function Br(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=Ni(o[c+12>>2],o[c+8>>2],8192);M=c+16|0;return a|0}function wf(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+8>>2]!=0|0}function uc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+228>>2])}function tc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+224>>2])}function sc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+232>>2])}function ew(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+444>>2])}function dw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+448>>2])}function Cs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+112>>2])}function jb(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+16>>2])}function Zf(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+12>>2])}function Wx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Fa(a,o[b+8>>2],0)){jf(b,c,d);return}a=o[a+8>>2];l[o[o[a>>2]+28>>2]](a,b,c,d)}function ke(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+4>>2])}function je(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]+8>>2])}function Da(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];c=v(l[o[o[a>>2]+48>>2]](a));M=b+16|0;return v(c)}function yp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return+s[o[a+12>>2]+120>>2]}function rs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+120>>2]}function qs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+124>>2]}function ps(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+128>>2]}function nc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+204>>2]}function _F(a,b,c,d,e,f,g,h,i,j){o[a+4>>2]=35;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=14720;o[a>>2]=15492;ZF(a,b,c,d,e,f,g,h,i,j)}function Uw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+740>>2]}function Tw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+744>>2]}function Sw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+748>>2]}function Rb(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+188>>2]}function Pa(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+240>>2]}function Nn(a){var b=0;b=M-16|0;M=b;s[b+12>>2]=a;s[b+8>>2]=6.2831854820251465;a=xa(s[b+12>>2],s[b+8>>2]);M=b+16|0;return a}function Gs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+116>>2]}function Fv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+480>>2]}function Fc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+192>>2]}function xp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return+s[o[a+12>>2]+80>>2]}function xd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+24>>2]}function ro(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=po(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function oo(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=no(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function ms(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+84>>2]}function me(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return v(s[o[a+12>>2]>>2])}function lo(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=ko(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function is(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+88>>2]}function hu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+12>>2]}function hd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+52>>2]}function fe(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+68>>2]}function cF(a){a=a|0;var b=0;o[a>>2]=16704;b=o[a+16>>2];if(!(!b|!p[a+20|0])){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}ba(a)}function Sp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=Rp(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function OA(a){a=a|0;var b=0;o[a>>2]=20392;b=o[a+32>>2];if(!(!b|!p[a+36|0])){if(b){o[7718]=o[7718]+1;l[o[6607]](b)}}ba(a)}function Kw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=Jw(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Il(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=iL(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Hk(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=Wa(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Ek(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=oG(o[c+12>>2],o[c+8>>2]);M=c+16|0;return a|0}function Dn(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=o[c+8>>2];if(a){o[7718]=o[7718]+1;l[o[6607]](a)}M=c+16|0}function pq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+36>>2]](a)|0;M=b+16|0;return v(v(a|0))}function kw(){var a=0;a=aa(32);o[a+4>>2]=35;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=14720;o[a+4>>2]=27;o[a>>2]=13156;return a|0}function gu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+8>>2]}function Vc(a,b){var c=0;Rd(a,b);c=o[a+4>>2];if(c){o[7718]=o[7718]+1;l[o[6607]](c)}o[a+4>>2]=b;o[a+12>>2]=o[a+12>>2]+ -1}function Ia(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[o[a+12>>2]+4>>2]}function tt(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;s[a+224>>2]=s[c+8>>2]}function oF(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=o[a+108>>2];if(d){l[o[o[d>>2]+12>>2]](d,o[b+60>>2],c)}nF(a,q[b+12>>1],c)}function fa(a){var b=0;a=a?a:1;a:{while(1){b=ff(a);if(b){break a}b=o[7723];if(b){l[b]();continue}break}L();D()}return b}function _s(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;s[a+232>>2]=s[c+8>>2]}function Xo(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;return v(s[(o[c+12>>2]+20|0)+(o[c+8>>2]<<2)>>2])}function Pt(a,b){var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;a=o[c+12>>2];o[a+260>>2]=o[a+260>>2]+1;s[a+228>>2]=s[c+8>>2]}function vv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+380|0}function mp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+300|0}function mo(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=ih(o[c+12>>2],c+8|0);M=c+16|0;return a|0}function lq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+352|0}function lp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+316|0}function kq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+324|0}function jo(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=kh(o[c+12>>2],c+8|0);M=c+16|0;return a|0}function aw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+348|0}function aa(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[7717]=o[7717]+1;a=l[o[6606]](a,16)|0;M=b+16|0;return a}function Ol(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2]+264;M=b+16|0;return o[o[a+12>>2]+4>>2]}function Nk(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=Lk(o[c+12>>2],c+8|0);M=c+16|0;return a|0}function Mv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+312|0}function Lv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+328|0}function Hs(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2]+132;M=b+16|0;return o[o[a+12>>2]+4>>2]}function Cv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+544|0}function zp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+32|0}function su(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+20|0}function kd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+28|0}function cJ(a,b){a=a|0;b=b|0;var c=0,d=0;c=a;d=o[o[o[a+4>>2]+4>>2]+24>>2];a=o[b+36>>2];hl(c,o[(d+u(a,80)|0)+64>>2],a)}function Me(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+92|0}function Lw(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2]+12;M=b+16|0;return o[o[a+12>>2]+4>>2]}function Gd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+48|0}function Tb(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]+4|0}function ut(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[o[b+12>>2]+68>>2];a=l[o[o[a>>2]+36>>2]](a)|0;M=b+16|0;return a}function Un(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;return o[(o[c+12>>2]+8|0)+(o[c+8>>2]<<2)>>2]}function Ad(a){var b=0;while(1){o[a+4>>2]=0;o[a+8>>2]=0;b=o[a+24>>2];if(b){Ad(b)}a=o[a+28>>2];if(a){continue}break}}function wq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+48>>2]](a)&1;M=b+16|0;return a|0}function vr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;ur(o[c+12>>2]+288|0,o[c+8>>2]);M=c+16|0}function sr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;rr(o[c+12>>2]+708|0,o[c+8>>2]);M=c+16|0}function pw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;ow(o[c+12>>2]+112|0,o[c+8>>2]);M=c+16|0}function or(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;nr(o[c+12>>2]+748|0,o[c+8>>2]);M=c+16|0}function na(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+28>>2]](a)|0;M=b+16|0;return a|0}function mu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+96>>2]](a)|0;M=b+16|0;return a|0}function kr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Ub(o[c+12>>2]+868|0,o[c+8>>2]);M=c+16|0}function ir(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;hr(o[c+12>>2]+788|0,o[c+8>>2]);M=c+16|0}function eu(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;a=OI(o[c+12>>2])&1;M=c+16|0;return a|0}function dn(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;o[b>>2]=o[b+12>>2];a=G(3705,3936,b|0)|0;M=b+16|0;return a|0}function Mf(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+36>>2]](a)|0;M=b+16|0;return a|0}function Ig(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+48>>2]](a)|0;M=b+16|0;return a|0}function Hq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+24>>2]=s[c+8>>2];M=c+16|0}function Gq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+28>>2]=s[c+8>>2];M=c+16|0}function Fq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+32>>2]=s[c+8>>2];M=c+16|0}function Fd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+20>>2]](a)|0;M=b+16|0;return a|0}function Eq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];a=l[o[o[a>>2]+40>>2]](a)&1;M=b+16|0;return a|0}function Cq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+44>>2]=s[c+8>>2];M=c+16|0}function Cc(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+216>>2]=o[c+8>>2];M=c+16|0}function zo(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;s[b+8>>2]=v(2)*Qb(s[o[b+12>>2]+12>>2]);M=b+16|0;return s[b+8>>2]}function vw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Ub(o[c+12>>2]+20|0,o[c+8>>2]);M=c+16|0}function tw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Xe(o[c+12>>2]+72|0,o[c+8>>2]);M=c+16|0}function rw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Xe(o[c+12>>2]+92|0,o[c+8>>2]);M=c+16|0}function nt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Sb(o[c+12>>2]+92|0,o[c+8>>2]);M=c+16|0}function es(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;ds(o[c+12>>2]+24|0,o[c+8>>2]);M=c+16|0}function Ss(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Te(o[c+12>>2]+28|0,o[c+8>>2]);M=c+16|0}function By(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a=o[b+8>>2];b=o[a+284>>2];l[o[o[b>>2]+40>>2]](b,a,o[c+8>>2])}function fs(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Xe(o[c+12>>2]+4|0,o[c+8>>2]);M=c+16|0}function Yp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];M=b+16|0;return o[a+12>>2]}function Wt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Sb(o[c+12>>2]+4|0,o[c+8>>2]);M=c+16|0}function Ke(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Je(o[c+12>>2],o[c+8>>2],0,0);M=c+16|0}function ty(a,b){a=a|0;b=b|0;var c=0;a=l[o[6608]]((a+b|0)+3|0)|0;if(a){c=(a+b|0)+3&0-b;o[c+ -4>>2]=a}return c|0}function qt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;ja(o[c+12>>2],o[c+8>>2],92);M=c+16|0}function Ew(a){var b=0;b=M-16|0;o[b+12>>2]=a;a=o[b+12>>2];o[a>>2]=1272;s[a+4>>2]=1;n[a+8>>1]=1;n[a+10>>1]=65535}function zv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=yv(o[c+8>>2]);M=c+16|0;return a|0}function zA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,156)|0;Ei(a,b,c,d,0);return a|0}function yr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;a=xr(o[c+8>>2]);M=c+16|0;return a|0}function yA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,156)|0;Ei(a,b,c,d,1);return a|0}function ws(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Rc(o[c+12>>2],o[c+8>>2],1);M=c+16|0}function uK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;l[o[o[a>>2]+108>>2]](a,b,c);l[o[o[a>>2]+108>>2]](a,(b+1|0)%3|0,d)}function ou(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Kk(o[c+12>>2],o[c+8>>2],1);M=c+16|0}function gC(a,b){a=a|0;b=b|0;var c=0,d=0;c=a;d=b;b=o[a+28>>2];a=o[a+32>>2];fC(c,d,b+4|0,a+4|0,b+264|0,a+264|0)}function da(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=0;o[b+4>>2]=a;o[b>>2]=a;o[b+8>>2]=a+1;a=dy(b);M=b+16|0;return a}function cy(a){var b=0;a:{a=o[a+8>>2];b=p[a|0];if((b|0)!=1){if(b&2){break a}m[a|0]=2;a=1}else{a=0}return a}D()}function Gk(a,b){a=a|0;b=b|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+(o[b+52>>2]<<2)>>2]=1065353216}function Fa(a,b,c){if(!c){return o[a+4>>2]==o[b+4>>2]}if((a|0)==(b|0)){return 1}return!_x(o[a+4>>2],o[b+4>>2])}function Ac(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;m[c+11|0]=b;Na(o[c+12>>2],m[c+11|0]&1);M=c+16|0}function uk(a,b,c,d,e){var f=0;f=o[a+32>>2];o[f>>2]=o[f>>2]+1;Zd(a,Yd(a,b,e));Zd(a,Yd(a,c,e));Zd(a,Yd(a,d,e))}function qc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;Pt(o[c+12>>2],s[c+8>>2]);M=c+16|0}function pc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;tt(o[c+12>>2],s[c+8>>2]);M=c+16|0}function oc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;_s(o[c+12>>2],s[c+8>>2]);M=c+16|0}function aL(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,80)|0;Cl(a,b,c,d,0);return a|0}function _K(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,44)|0;jl(a,b,c,d,0);return a|0}function YK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,44)|0;jl(a,b,c,d,1);return a|0}function Ep(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;Dp(o[c+12>>2],s[c+8>>2]);M=c+16|0}function Cp(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;Bp(o[c+12>>2],s[c+8>>2]);M=c+16|0}function $K(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,80)|0;Cl(a,b,c,d,1);return a|0}function uv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Nd(o[c+12>>2],o[c+8>>2]);M=c+16|0}function tu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Zd(o[c+12>>2],o[c+8>>2]);M=c+16|0}function qp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;pp(o[c+12>>2],o[c+8>>2]);M=c+16|0}function pj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;jC(o[c+12>>2],o[c+8>>2]);M=c+16|0}function op(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;np(o[c+12>>2],o[c+8>>2]);M=c+16|0}function mq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Ty(o[c+12>>2],o[c+8>>2]);M=c+16|0}function mj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;XB(o[c+12>>2],o[c+8>>2]);M=c+16|0}function lc(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;bs(o[c+12>>2],o[c+8>>2]);M=c+16|0}function hw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Sf(o[c+12>>2],o[c+8>>2]);M=c+16|0}function hj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;JB(o[c+12>>2],o[c+8>>2]);M=c+16|0}function dj(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;lB(o[c+12>>2],o[c+8>>2]);M=c+16|0}function bq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Le(o[c+12>>2],o[c+8>>2]);M=c+16|0}function aq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;$p(o[c+12>>2],o[c+8>>2]);M=c+16|0}function _v(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Zv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Zr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Dh(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Zi(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Xi(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Yv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Uh(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Yo(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Ub(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Yn(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;OC(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Xv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Wv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Xp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Wp(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Tv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Th(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Tu(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;cC(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Sv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Rv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Su(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;nj(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Qv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Sh(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Ov(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Rh(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Nw(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;$k(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Nq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Mq(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Md(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;tl(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Lr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;jA(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Jv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Iv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Hv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Gv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Fr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Cf(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Ev(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Dv(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Er(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;cA(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Dr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;bA(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Cr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;aA(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Bv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;Av(o[c+12>>2],o[c+8>>2]);M=c+16|0}function $x(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;ya(o[c+12>>2],o[c+8>>2]);M=c+16|0}function $f(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){o[7718]=o[7718]+1;l[o[6607]](a)}M=b+16|0}function ZK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,48)|0;WI(a,b,c,d);return a|0}function WK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,16)|0;gL(a,b,c,d);return a|0}function UK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=o[b>>2];a=l[o[o[a>>2]+56>>2]](a,16)|0;mK(a,b,c,d);return a|0}function Hg(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=M-16|0;o[a+12>>2]=o[b+12>>2];o[o[a+12>>2]>>2]=0;M=b+16|0}function Ga(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[(M-16|0)+12>>2]=a;M=b+16|0;return a|0}function ld(a){var b=0;b=M-16|0;o[b+12>>2]=a;a=o[b+12>>2];m[a+16|0]=1;o[a+12>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0}function Yt(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(200);Ve(a,o[b+12>>2],We());M=b+16|0;return a|0}function Vq(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Qa(a+144|0);Qa(a+124|0);Qa(a+104|0);M=b+16|0}function Dp(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+192>>2]=Hd(s[c+8>>2]);M=c+16|0}function Bp(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+196>>2]=Hd(s[c+8>>2]);M=c+16|0}function Wn(a){a=v(a);var b=0,c=0;b=M-16|0;M=b;s[b+12>>2]=a;c=aa(52);Vn(c,s[b+12>>2]);M=b+16|0;return c|0}function QC(a,b,c){var d=0;d=a+b|0;m[d+1309|0]=c;if((b|0)<=2){m[d+788|0]=c;return}m[((b<<6)+a|0)+720|0]=c}function ic(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){l[o[o[a>>2]+8>>2]](a)}M=b+16|0}function zu(a){a=a|0;var b=0;b=M-16|0;M=b;m[b+15|0]=a;a=aa(172);Yf(a,m[b+15|0]&1,1);M=b+16|0;return a|0}function qu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(112);$d(a,o[b+12>>2],0);M=b+16|0;return a|0}function dy(a){var b=0,c=0;b=M-16|0;M=b;o[b+8>>2]=o[a+4>>2];if(!p[o[b+8>>2]]){c=cy(a)}M=b+16|0;return c}function _(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){l[o[o[a>>2]+4>>2]](a)}M=b+16|0}function zt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+248>>2]=s[c+8>>2]}function xt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+208>>2]=s[c+8>>2]}function vt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+276>>2]=s[c+8>>2]}function ux(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(96);Fk(a,o[b+12>>2],1);M=b+16|0;return a|0}function uf(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;n[c+10>>1]=b;n[o[c+12>>2]+12>>1]=q[c+10>>1]}function sf(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;n[c+10>>1]=b;n[o[c+12>>2]+14>>1]=q[c+10>>1]}function rt(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+260|0]=m[c+11|0]&1}function qm(a){gc(a);m[a+280|0]=1;o[a>>2]=4040;o[a+276>>2]=0;o[a+268>>2]=0;o[a+272>>2]=0;o[a+236>>2]=4}function nx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+100>>2]=s[c+8>>2]}function nv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=fa(5260);em(a,o[b+12>>2]);M=b+16|0;return a|0}function lx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+104>>2]=s[c+8>>2]}function jx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+108>>2]=s[c+8>>2]}function hx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+112>>2]=s[c+8>>2]}function ht(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+236>>2]=s[c+8>>2]}function go(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;o[o[c+12>>2]+44>>2]=m[c+11|0]&1}function fx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+116>>2]=s[c+8>>2]}function ft(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+240>>2]=s[c+8>>2]}function dx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+120|0]=m[c+11|0]&1}function dt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+256>>2]=s[c+8>>2]}function bx(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+124>>2]=s[c+8>>2]}function bt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+268>>2]=s[c+8>>2]}function _w(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+128>>2]=s[c+8>>2]}function Yw(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+132>>2]=s[c+8>>2]}function Ys(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+280>>2]=s[c+8>>2]}function Ww(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+136>>2]=s[c+8>>2]}function Ot(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+216>>2]=s[c+8>>2]}function Nt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+228>>2]=s[c+8>>2]}function Lt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+252>>2]=s[c+8>>2]}function Jt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+244>>2]=s[c+8>>2]}function Ii(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;n[c+10>>1]=b;n[o[c+12>>2]+10>>1]=q[c+10>>1]}function Ht(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+204>>2]=s[c+8>>2]}function Go(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=b;b=o[c+12>>2];s[c+8>>2]=Ge(b);Fo(a,b,c+8|0);M=c+16|0}function Ft(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+212>>2]=s[c+8>>2]}function Dt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+220>>2]=s[c+8>>2]}function Ct(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+224>>2]=s[c+8>>2]}function Bt(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+232>>2]=s[c+8>>2]}function AK(a,b){a=a|0;b=b|0;o[a+8>>2]=1065353216;o[a+12>>2]=0;o[a>>2]=1065353216;o[a+4>>2]=1065353216}function $s(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+272>>2]=s[c+8>>2]}function zx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+26|0]=m[c+11|0]&1}function xx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+32|0]=m[c+11|0]&1}function vx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+80|0]=m[c+11|0]&1}function tp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+112>>2]=o[c+8>>2]}function th(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+40>>2]=s[c+8>>2]}function qi(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+28>>2]=s[c+8>>2]}function px(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+96>>2]=s[c+8>>2]}function mi(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+48>>2]=s[c+8>>2]}function ki(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+52>>2]=s[c+8>>2]}function iw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(616);iE(a,o[b+12>>2]);M=b+16|0;return a|0}function ii(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+56>>2]=s[c+8>>2]}function gi(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+60>>2]=s[c+8>>2]}function er(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+44>>2]=s[c+8>>2]}function ei(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+64>>2]=s[c+8>>2]}function cr(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+80>>2]=s[c+8>>2]}function ci(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+68>>2]=s[c+8>>2]}function cf(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+36>>2]=s[c+8>>2]}function ai(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+72>>2]=s[c+8>>2]}function _h(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+76>>2]=s[c+8>>2]}function Xq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+100>>2]=o[c+8>>2]}function Wr(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+84|0]=m[c+11|0]&1}function Vt(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=fa(284);Ut(a,o[b+12>>2]);M=b+16|0;return a|0}function Sq(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+88>>2]=s[c+8>>2]}function Re(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+32>>2]=s[c+8>>2]}function Pi(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;n[c+10>>1]=b;n[o[c+12>>2]+8>>1]=q[c+10>>1]}function Oh(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+16>>2]=s[c+8>>2]}function Mp(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=fa(112);Yi(a,o[b+12>>2]);M=b+16|0;return a|0}function Mh(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+20>>2]=s[c+8>>2]}function Kc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+12>>2]=s[c+8>>2]}function Hh(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+24>>2]=s[c+8>>2]}function Fx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+16|0]=m[c+11|0]&1}function Dx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+24|0]=m[c+11|0]&1}function Bx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;m[c+11|0]=b;m[o[c+12>>2]+25|0]=m[c+11|0]&1}function $e(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+92>>2]=s[c+8>>2]}function vh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+88>>2]=o[c+8>>2]}function ub(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=b;o[d+8>>2]=c;ta(a,o[d+8>>2],o[d+12>>2]);M=d+16|0}function lm(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=fa(92);vg(a,o[b+12>>2]);M=b+16|0;return a|0}function ka(a,b,c){var d=0;d=M-16|0;M=d;o[d+12>>2]=b;o[d+8>>2]=c;Vg(a,o[d+12>>2],o[d+8>>2]);M=d+16|0}function fv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+32>>2]=o[c+8>>2]}function fu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(48);QI(a,o[b+12>>2]);M=b+16|0;return a|0}function fF(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(56);_f(a,o[b+12>>2]);M=b+16|0;return a|0}function eo(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;s[o[c+12>>2]+48>>2]=o[c+8>>2]}function dv(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+36>>2]=o[c+8>>2]}function br(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+84>>2]=o[c+8>>2]}function Zq(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+96>>2]=o[c+8>>2]}function Zo(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=aa(56);rG(a,o[b+12>>2]);M=b+16|0;return a|0}function Ta(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+4>>2]=s[c+8>>2]}function Pw(a){a=a|0;var b=0;b=M-16|0;M=b;m[b+15|0]=a;a=aa(92);bl(a,m[b+15|0]&1);M=b+16|0;return a|0}function Mc(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]+8>>2]=s[c+8>>2]}function Jh(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+20>>2]=o[c+8>>2]}function Hx(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+16>>2]=o[c+8>>2]}function $q(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+92>>2]=o[c+8>>2]}function zl(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=og(o[b+12>>2]);M=b+16|0;return v(c)}function yo(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=xo(o[b+12>>2]);M=b+16|0;return v(c)}function yd(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+8>>2]=o[c+8>>2]}function ts(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;M=c;o[c+12>>2]=a;s[c+8>>2]=b;nB(o[c+12>>2]);M=c+16|0}function mw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=fa(8);lw(a,o[b+12>>2]);M=b+16|0;return a|0}function iE(a,b){gc(a);m[a+500|0]=1;o[a>>2]=17792;o[a+496>>2]=0;o[a+488>>2]=0;o[a+492>>2]=0;Yj(a,b)}function ef(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]+4>>2]=o[c+8>>2]}function ca(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=0;o[b+4>>2]=a;o[b>>2]=a;o[b+8>>2]=a+1;by(b);M=b+16|0}function bp(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;n[o[c+12>>2]+4>>1]=o[c+8>>2]}function Ko(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=xb(o[b+12>>2]);M=b+16|0;return v(c)}function Jo(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=Ge(o[b+12>>2]);M=b+16|0;return v(c)}function Ir(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=gA(o[b+12>>2]);M=b+16|0;return v(c)}function Hc(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Eh(a);o[(M-16|0)+12>>2]=a+48;M=b+16|0}function Fm(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Hg(a);o[(M-16|0)+12>>2]=a+20;M=b+16|0}function Fe(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=Kn(o[b+12>>2]);M=b+16|0;return v(c)}function Ee(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=An(o[b+12>>2]);M=b+16|0;return v(c)}function Dq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];l[o[o[a>>2]+44>>2]](a);M=b+16|0}function Cd(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];l[o[o[a>>2]+24>>2]](a);M=b+16|0}function Ao(a){a=a|0;var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;c=zo(o[b+12>>2]);M=b+16|0;return v(c)}function $o(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;n[o[c+12>>2]+6>>1]=o[c+8>>2]}function sd(a,b){a=a|0;b=v(b);var c=0;c=M-16|0;o[c+12>>2]=a;s[c+8>>2]=b;s[o[c+12>>2]>>2]=s[c+8>>2]}function MI(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];s[b+8>>2]=og(a);EI(a,b+8|0);M=b+16|0}function Lo(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];s[b+8>>2]=Ge(a);kh(a,b+8|0);M=b+16|0}function nd(a,b){a=a|0;b=b|0;var c=0;c=M-16|0;o[c+12>>2]=a;o[c+8>>2]=b;o[o[c+12>>2]>>2]=o[c+8>>2]}function xb(a){var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];c=wb(a,a);M=b+16|0;return c}function rr(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;qr(o[c+12>>2],o[c+8>>2]);M=c+16|0}function ow(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;nw(o[c+12>>2],o[c+8>>2]);M=c+16|0}function nr(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;mr(o[c+12>>2],o[c+8>>2]);M=c+16|0}function hr(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;gr(o[c+12>>2],o[c+8>>2]);M=c+16|0}function eK(a){var b=0,c=v(0);b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];c=eb(a,a);M=b+16|0;return c}function ds(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;cs(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Xe(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;sw(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Ub(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;uw(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Ec(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];o[(M-16|0)+12>>2]=a;ld(a);M=b+16|0}function $p(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=a;o[c+8>>2]=b;oh(o[c+12>>2],o[c+8>>2]);M=c+16|0}function Px(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(Fa(a,o[b+8>>2],f)){hf(b,c,d,e)}}function Jj(a,b){a=a|0;b=b|0;if(!(!b|!(o[b+236>>2]&2))){l[o[o[a>>2]+92>>2]](a,b);return}bd(a,b)}function Bs(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return o[o[b+12>>2]+116>>2]+4|0}function tq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){sq(a);ba(a)}M=b+16|0}function cv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){bv(a);ba(a)}M=b+16|0}function by(a){var b=0;b=M-16|0;M=b;o[b+8>>2]=o[a+4>>2];m[o[b+8>>2]]=1;m[o[a+8>>2]]=1;M=b+16|0}function Wq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){Vq(a);ba(a)}M=b+16|0}function Vo(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){vc(a);ba(a)}M=b+16|0}function St(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return v(s[o[b+12>>2]+204>>2])}function Ra(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){Qa(a);ba(a)}M=b+16|0}function Np(){var a=0,b=0,c=0;a=M-32|0;M=a;b=fa(112);c=a+8|0;ze(c);Yi(b,c);M=a+32|0;return b|0}function Na(a,b){if(!(p[a+204|0]&3?!b:0)){if((o[a+216>>2]&-2)!=4){o[a+216>>2]=1}o[a+220>>2]=0}}function $t(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){PI(a);$f(a)}M=b+16|0}function zq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return v(s[o[b+12>>2]+36>>2])}function zc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=Kv(o[b+12>>2])&1;M=b+16|0;return a|0}function Bq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return v(s[o[b+12>>2]+44>>2])}function Am(){var a=0,b=0,c=0;a=M-32|0;M=a;b=fa(92);c=a+8|0;ze(c);vg(b,c);M=a+32|0;return b|0}function md(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=ut(o[b+12>>2]);M=b+16|0;return a|0}function bu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=au(o[b+12>>2]);M=b+16|0;return a|0}function Wy(a,b){a=a|0;b=v(b);Cj(a,b);ia(22788);a=o[a+452>>2];l[o[o[a>>2]+24>>2]](a,b);ga()}function Rr(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=Wi(o[b+12>>2]);M=b+16|0;return a|0}function Mw(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=Lw(o[b+12>>2]);M=b+16|0;return a|0}function Is(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=Hs(o[b+12>>2]);M=b+16|0;return a|0}function Eg(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=Ol(o[b+12>>2]);M=b+16|0;return a|0}function sn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=M-16|0;o[d+12>>2]=a;o[d+8>>2]=b;o[d+4>>2]=c}function Pl(a,b){a=a|0;b=b|0;var c=0;c=b;b=o[a+8>>2];l[o[b+60>>2]](c,b,o[a+4>>2]);return 0}function yq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return o[o[b+12>>2]+8>>2]}function rf(a){var b=0;b=o[a+24>>2];if(b){ba(rf(b))}b=o[a+28>>2];if(b){ba(rf(b))}return a}function cu(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;M=b+16|0;return o[o[b+12>>2]+4>>2]}function _J(a){a=a|0;var b=0;ia(7711);b=o[a+68>>2];l[o[o[b>>2]+32>>2]](b,o[a+24>>2]);ga()}function RA(a,b,c){a=a|0;b=b|0;c=v(c);l[o[o[a>>2]+32>>2]](a,b);l[o[o[a>>2]+36>>2]](a,b,c)}function zn(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Ga(a);$f(a);M=b+16|0}function pa(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){ba(a)}M=b+16|0}function mE(a,b,c,d,e,f){if(p[a+60|0]){$j(a,b,c,d,e,f,o[a+56>>2]);return}bk(a,b,c,d,e,f)}function hc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];Ga(a);ba(a);M=b+16|0}function _c(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];if(a){$f(a)}M=b+16|0}function Jn(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;a=o[b+12>>2];dh(a);ba(a);M=b+16|0}function Ag(a,b,c,d,e){if(Cg(a,26816,b,c,d,e)){a=1}else{a=ve(a,26816,b,c,d,e,0)}return a}function gB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;o[a+128>>2]=d;o[a+124>>2]=c;o[a+120>>2]=b}function Zp(a,b){var c=0;c=M-16|0;M=c;o[c+12>>2]=b;b=o[c+12>>2];Ga(a);ya(b,a);M=c+16|0}function Fk(a,b,c){var d=0;d=Qk(a);o[a+92>>2]=b;o[a>>2]=14468;o[a+4>>2]=3;if(c){Ib(d)}}function va(a,b,c,d,e){var f=0;f=a;a=o[a+720>>2];pA(f,a+u(b,104)|0,a+u(c,104)|0,d,e)}function pe(a,b,c){a=a|0;b=v(b);c=c|0;o[c>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;o[c+12>>2]=0}function lI(a,b){a=a|0;b=b|0;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=1065353216}function iI(a,b){a=a|0;b=b|0;o[a+8>>2]=1065353216;o[a+12>>2]=0;o[a>>2]=0;o[a+4>>2]=0}function hz(a){a=a|0;o[a+12>>2]=22300;o[a>>2]=22272;Pc(a+12|0);Dd(a+72|0);return a|0}function gI(a,b){a=a|0;b=b|0;o[a+8>>2]=0;o[a+12>>2]=0;o[a>>2]=1065353216;o[a+4>>2]=0}function za(a){var b=0;b=M-16|0;M=b;s[b+12>>2]=a;a=qa(s[b+12>>2]);M=b+16|0;return a}function UH(a,b,c){a=a|0;b=b|0;c=c|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0}function UA(a){a=a|0;if(l[o[o[a>>2]+40>>2]](a)){m[a+169|0]=1;o[a+16>>2]=o[a+28>>2]}}function Aa(a){var b=0;b=M-16|0;M=b;s[b+12>>2]=a;a=ra(s[b+12>>2]);M=b+16|0;return a}function zJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=a+ -4|0;l[o[o[a>>2]+8>>2]](a,b,c,d)}function sm(a,b){a=a|0;b=b|0;o[a+200>>2]=b;o[a+192>>2]=b;o[a+260>>2]=o[a+260>>2]+1}function ho(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+44>>2]!=0|0}function RJ(a,b){a=a|0;b=b|0;l[o[o[b>>2]+32>>2]](b);ig(a,b);l[o[o[b>>2]+36>>2]](b)}function OC(a,b){Pf(a);a=(b<<2)+a|0;o[a+1316>>2]=o[((b|0)<3?a+1256|0:a+1180|0)>>2]}function yt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+208>>2])}function wt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+276>>2])}function vu(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+224>>2])}function ox(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+100>>2])}function mx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+104>>2])}function kx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+108>>2])}function ix(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+112>>2])}function it(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+236>>2])}function gx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+116>>2])}function gt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+240>>2])}function et(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+256>>2])}function du(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+232>>2])}function cx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+124>>2])}function ct(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+268>>2])}function ax(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+128>>2])}function at(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+272>>2])}function Zw(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+132>>2])}function Zs(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+280>>2])}function Xw(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+136>>2])}function Qt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+216>>2])}function Pu(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+228>>2])}function Mt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+252>>2])}function Kt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+244>>2])}function It(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+204>>2])}function Gt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+212>>2])}function Et(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+220>>2])}function At(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+248>>2])}function uh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+40>>2])}function ri(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+28>>2])}function qx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+96>>2])}function ni(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+48>>2])}function li(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+52>>2])}function lh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+16>>2])}function ji(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+56>>2])}function hi(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+60>>2])}function fr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+44>>2])}function fi(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+64>>2])}function dr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+80>>2])}function di(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+68>>2])}function df(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+36>>2])}function bi(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+72>>2])}function af(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+92>>2])}function Tq(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+88>>2])}function Se(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+32>>2])}function Nh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+20>>2])}function Lc(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+12>>2])}function Ih(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+24>>2])}function Bc(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Na(o[b+12>>2],0);M=b+16|0}function $h(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+76>>2])}function st(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+260|0]&1}function gz(a){a=a|0;o[a+12>>2]=22300;o[a>>2]=22272;Pc(a+12|0);Dd(a+72|0);ba(a)}function ex(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+120|0]&1}function Ua(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+4>>2])}function Nc(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]+8>>2])}function yx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+32|0]&1}function ys(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;pB(o[b+12>>2]);M=b+16|0}function wx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+80|0]&1}function wv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Vj(o[b+12>>2]);M=b+16|0}function up(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+112>>2]}function uL(a){var b=0;b=a&31;a=0-a&31;return(-1>>>b&-2)<<b|(-1<<a&-2)>>>a}



function tv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;sv(o[b+12>>2]);M=b+16|0}function ku(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Ib(o[b+12>>2]);M=b+16|0}function dq(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;bf(o[b+12>>2]);M=b+16|0}function dl(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;MI(o[b+12>>2]);M=b+16|0}function Zn(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;PC(o[b+12>>2]);M=b+16|0}function Yq(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+100>>2]}function Xr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+84|0]&1}function Qa(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Jx(o[b+12>>2]);M=b+16|0}function Nv(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Uf(o[b+12>>2]);M=b+16|0}function NE(a,b){a=a|0;b=b|0;a=o[a+4>>2];return(a|0)==o[b>>2]|(a|0)==o[b+4>>2]}function Mo(a){a=a|0;var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Lo(o[b+12>>2]);M=b+16|0}function Gx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+16|0]&1}function Ex(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+24|0]&1}function Cx(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+25|0]&1}function Ax(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return m[o[b+12>>2]+26|0]&1}function vf(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+12>>1]}function tf(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+14>>1]}function td(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return v(s[o[b+12>>2]>>2])}function ls(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+84>>2]}function gv(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+32>>2]}function ev(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+36>>2]}function bv(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;vc(o[b+12>>2]+56|0);M=b+16|0}function ar(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+92>>2]}function _q(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+96>>2]}function Xx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Fa(a,o[b+8>>2],0)){jf(b,c,d)}}function Li(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+10>>1]}function Kh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+20>>2]}function Ix(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+16>>2]}function Gh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+88>>2]}function zg(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+4>>2]}function zd(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]+8>>2]}function cp(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+4>>1]}function ap(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+6>>1]}function TA(a){a=a|0;if(s[a+16>>2]!=v(0)){return 0}return s[a+20>>2]==v(0)|0}function Qi(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return n[o[b+12>>2]+8>>1]}function wp(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]- -64|0}function ek(a,b){a=a|0;b=b|0;a=o[a+4>>2];l[o[o[a>>2]+8>>2]](a,o[b+36>>2])|0}function wr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+288|0}function tr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+708|0}function sK(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;l[o[o[a>>2]+124>>2]](a,d,b,c)}function qw(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+112|0}function pt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+156|0}function pr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+748|0}function od(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[o[b+12>>2]>>2]}function mt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+172|0}function lr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+868|0}function kt(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+188|0}function jr(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+788|0}function NJ(a,b){a=a|0;b=b|0;a=o[a+20>>2];return l[o[o[a>>2]+8>>2]](a,b)|0}function JJ(a,b){a=a|0;b=b|0;a=o[a+12>>2];return l[o[o[a>>2]+8>>2]](a,b)|0}function $v(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+348|0}function zw(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+60|0}function zh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+52|0}function zF(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+12|0}function xh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+68|0}function qh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+28|0}function pi(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+32|0}function ph(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+92|0}function _e(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+20|0}function Ze(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+40|0}function Xh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+56|0}function XI(a,b,c){a=a|0;b=b|0;c=c|0;o[6997]=o[6997]+1;return ZI(a,b,c)|0}function XF(a){a=a|0;o[a>>2]=15492;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Vh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+72|0}function VA(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+48|0}function Rs(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+76|0}function Pe(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+24|0}function Jc(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+16|0}function Fb(a){a=a|0;o[a>>2]=19288;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Bw(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+44|0}function Bl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;l[o[o[a>>2]+80>>2]](a,b,c,d)}function Bh(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+36|0}function vc(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Qa(o[b+12>>2]);M=b+16|0}function um(a){a=a|0;o[a>>2]=3948;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function sq(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;rq(o[b+12>>2]);M=b+16|0}function nl(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+8|0}function Qh(a){var b=0;b=M-16|0;M=b;o[b+12>>2]=a;Ec(o[b+12>>2]);M=b+16|0}function Qe(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]+4|0}function CJ(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;l[o[o[a>>2]+8>>2]](a,b,c,d)}function yE(a,b){a=a|0;b=b|0;l[o[o[a>>2]+8>>2]](a,b,o[o[a+8>>2]+48>>2])}function aH(a,b){a=a|0;b=v(b);return v(v(v(l[o[o[a>>2]+16>>2]](a))*b))}function TH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((d|0)>=1){$(c,0,d<<4)}}function Lp(){var a=0;a=fa(8);o[a>>2]=0;o[a+4>>2]=0;Kp(a);return a|0}function Ha(a){a=a|0;var b=0;b=M-16|0;o[b+12>>2]=a;return o[b+12>>2]}function vA(a){a=a|0;a=Vi(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function uF(a){a=a|0;a=tk(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function rE(a){a=a|0;a=Td(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function eI(a){a=a|0;a=Zk(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function eF(a){a=a|0;a=Xf(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Xy(a){a=a|0;a=Ci(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function SI(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return v(v(0))}function PD(a){a=a|0;a=Qf(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function NB(a){a=a|0;a=gj(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function Lb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return v(v(1))}function EC(a,b){a=a|0;b=b|0;a=p[a+344|0]?0:3;o[b+4>>2]=a;o[b>>2]=a}function DC(a,b){a=a|0;b=b|0;CC(a,b,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function rg(a){a=a|0;Hb(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function rF(a){a=a|0;Xf(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function cG(a){a=a|0;Td(a);if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function bG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return _j(a,b,c,d)|0}function fb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;lL(a,b,c,d)}function mz(a,b,c){a=a|0;b=b|0;c=c|0;l[o[o[b>>2]+64>>2]](a,b,c)}function Ql(a){a=a|0;if(!o[a+12>>2]){return 0}return o[a+20>>2]}function CH(a,b,c){a=a|0;b=b|0;c=c|0;l[o[o[b>>2]+68>>2]](a,b,c)}function hK(a,b,c){a=a|0;b=b|0;c=c|0;o[a+24>>2]=c;o[a+16>>2]=b}function hB(a,b,c){a=a|0;b=b|0;c=v(c);l[o[o[a>>2]+16>>2]](a,c)}function gK(a,b,c){a=a|0;b=b|0;c=c|0;o[a+28>>2]=c;o[a+20>>2]=b}function ez(a){a=a|0;o[a>>2]=22300;Pc(a);Dd(a+60|0);return a|0}function OJ(a,b,c){a=a|0;b=b|0;c=v(c);l[o[o[a>>2]+12>>2]](a,b)}function OK(){var a=0;a=aa(16);o[(M-16|0)+12>>2]=a;return a|0}function Bj(a,b){a=a|0;b=b|0;return o[o[a+220>>2]+(b<<2)>>2]}function Rl(a,b){a=a|0;b=b|0;return o[o[a+20>>2]+(b<<2)>>2]}function Ba(a){a=a|0;if(a){o[7718]=o[7718]+1;l[o[6607]](a)}}function _t(){var a=0;a=aa(200);Ve(a,We(),We());return a|0}function dz(a){a=a|0;o[a>>2]=22300;Pc(a);Dd(a+60|0);ba(a)}function oz(a){a=a|0;return v(v(l[o[o[a>>2]+48>>2]](a)))}function Uo(){var a=0;a=fa(4);o[a>>2]=0;To(a);return a|0}function FD(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;kg(a,b,c,d)}function PH(a){a=a|0;return v(v(s[a+28>>2]*s[a+12>>2]))}function Xd(a,b,c,d,e,f){sF(a,b,c,d,e,f);o[a>>2]=16476}function dD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=v(e)}function bF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return 0}function Hj(a,b){a=a|0;b=b|0;l[o[o[a>>2]+64>>2]](a,b)}function Gj(a,b){a=a|0;b=b|0;l[o[o[a>>2]+68>>2]](a,b)}function ru(){var a=0;a=aa(112);$d(a,0,0);return a|0}function hL(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0}function WA(a){a=a|0;return l[o[o[a>>2]+48>>2]](a)|0}function Au(){var a=0;a=aa(172);Yf(a,1,1);return a|0}function uy(a){a=a|0;if(a){l[o[6609]](o[a+ -4>>2])}}function bD(a,b,c){a=a|0;b=b|0;c=c|0;return v(v(0))}function qv(){var a=0;a=fa(196);ik(a,0);return a|0}function gD(a,b){a=a|0;b=b|0;o[b>>2]=6;o[b+4>>2]=6}function Pf(a){Uc(a,o[a+28>>2]+4|0,o[a+32>>2]+4|0)}function Qw(){var a=0;a=aa(92);bl(a,1);return a|0}function iv(){var a=0;a=fa(100);hv(a);return a|0}function cm(){var a=0;a=aa(284);qm(a);return a|0}function as(){var a=0;a=aa(196);ij(a);return a|0}function Vw(){var a=0;a=aa(772);ym(a);return a|0}function Od(a,b,c){rb(a+4|0,a+312|0,a+328|0,b,c)}function Ap(){var a=0;a=aa(288);km(a);return a|0}function ov(){var a=0;a=fa(40);_i(a);return a|0}function ju(){var a=0;a=fa(24);iu(a);return a|0}function hq(){var a=0;a=fa(64);Hc(a);return a|0}function Xs(){var a=0;a=aa(16);Ga(a);return a|0}function Ts(){var a=0;a=fa(24);ze(a);return a|0}function rI(a,b,c){a=a|0;b=b|0;c=c|0;fg(a,b,c)}function Rq(){var a=0;a=fa(4);Qq(a);return a|0}function Ik(a,b,c){a=a|0;b=b|0;c=v(c);return 0}function yj(a){a=a|0;o[a>>2]=19288;return a|0}function tz(a,b){a=a|0;b=b|0;sz(a,o[b+36>>2])}function pk(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function kl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=v(d)}function cD(a,b,c,d){a=a|0;b=b|0;c=v(c);d=d|0}function YF(a){a=a|0;o[a>>2]=15492;return a|0}function vm(a){a=a|0;o[a>>2]=3948;return a|0}function vb(a){a=a|0;o[(M-16|0)+12>>2]=a;D()}function MC(a,b){a=a|0;b=b|0;NC(a,b);tj(a,b)}function JA(a,b,c){a=a|0;b=b|0;c=c|0;Hi(b,c)}function IA(a,b,c){a=a|0;b=b|0;c=c|0;Bz(b,c)}function Gb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0}function EE(a,b){a=a|0;b=b|0;DE(a,b);CE(a,b)}function tL(a,b,c,d){a=sL(a,b,c,d);return a}function Bk(a){xE(a);o[a>>2]=15164;return a}function Ay(a){a=a|0;a=o[7705];if(a){ba(a)}}function AF(a){a=a|0;return o[a+48>>2]==1|0}function yI(a,b){a=a|0;b=v(b);s[a+72>>2]=b}function yH(a){a=a|0;return o[a+48>>2]+4|0}function uG(a){a=a|0;return o[a+92>>2]+4|0}function sg(a,b){a=a|0;b=v(b);s[a+44>>2]=b}function gH(a,b){a=a|0;b=b|0;ae(a,b);Ib(a)}function EH(a,b){a=a|0;b=v(b);s[a+12>>2]=b}function zK(a){a=a|0;return v(s[a+44>>2])}function xI(a){a=a|0;return v(s[a+72>>2])}function pl(a,b){a=a|0;b=b|0;o[a+72>>2]=b}function SA(a,b){a=a|0;b=b|0;m[a+180|0]=b}function PE(a,b){a=a|0;b=b|0;o[a+24>>2]=b}function DH(a){a=a|0;return v(s[a+12>>2])}function GA(a,b){a=a|0;b=b|0;o[a+4>>2]=b}function FA(a,b){a=a|0;b=b|0;o[a+8>>2]=b}function rD(a){a=a|0;return o[a+200>>2]}function qD(a){a=a|0;return o[a+212>>2]}function fk(a){a=a|0;return o[a+136>>2]}function qk(a){a=a|0;return o[a+92>>2]}function ec(a){a=a|0;return o[a+16>>2]}function Sl(a){a=a|0;return o[a+12>>2]}function QJ(a){a=a|0;return o[a+72>>2]}function Jk(a){a=a|0;return o[a+96>>2]}function El(a){a=a|0;return o[a+24>>2]}function Dg(a){a=a|0;return o[a+68>>2]}function xe(a,b){a=a|0;b=b|0;return 1}function ug(a){a=a|0;return o[a+8>>2]}function dG(a){a=a|0;Td(a);return a|0}function cg(a,b,c){a=a|0;b=v(b);c=c|0}function NI(a){a=a|0;return o[a+4>>2]}function ua(a,b,c){a=a|0;b=b|0;c=c|0}function Mx(a,b){a=a|0;b=b|0;l[a](b)}function sy(a){a=a|0;return ff(a)|0}function SF(a){a=a|0;return a+108|0}function KC(a){a=a|0;return 348}



function BJ(a){a=a|0;return a+ -4|0}function xB(a){a=a|0;o[a+192>>2]=0}function oH(a){a=a|0;return a+68|0}function dH(a){a=a|0;return a+16|0}function CK(a){a=a|0;return a+12|0}function AI(a){a=a|0;return a+76|0}function zI(a){a=a|0;return 10880}function zG(a){a=a|0;return 14440}function yG(a){a=a|0;return 14449}function vH(a){a=a|0;return 12628}function uz(a){a=a|0;return 21624}function tG(a){a=a|0;return 14696}function pz(a){a=a|0;return 21996}function pG(a){a=a|0;return 14984}function ok(a){a=a|0;return a+4|0}function nH(a){a=a|0;return 12756}function mI(a){a=a|0;return 11276}function jI(a){a=a|0;return 11297}function hI(a){a=a|0;return 11303}function cH(a){a=a|0;return 13252}function WH(a){a=a|0;return 11536}function RF(a){a=a|0;return 15604}function QH(a){a=a|0;return 11676}function Ox(a){a=a|0;return D()|0}function KG(a){a=a|0;return 13932}function JF(a){a=a|0;return 16024}function GF(a){a=a|0;return 16054}function FH(a){a=a|0;return 12300}function EF(a){a=a|0;return 16064}function BG(a){a=a|0;return 14408}function BK(a){a=a|0;return 6660}function AJ(a){a=a|0;ba(a+ -4|0)}function rm(a){a=a|0;return 256}function mC(a){a=a|0;return 204}function la(a){a=a|0;return a|0}function cE(a){a=a|0;return 488}function _B(a){a=a|0;return 212}function UC(a){a=a|0;return 252}function PB(a){a=a|0;return 220}function Az(a){a=a|0;return 428}function zy(a){a=a|0;rf(30824)}function zk(a){a=a|0;return 84}function wI(a){a=a|0;return 24}function tF(a){a=a|0;return 28}function rB(a){a=a|0;ba(cj(a))}function qg(a){a=a|0;return 52}function lz(a){a=a|0;return 32}function ee(a){a=a|0;return 60}function bL(a){a=a|0;ba(qe(a))}function aK(a){a=a|0;ba(lg(a))}function ZE(a){a=a|0;ba(kk(a))}function VI(a){a=a|0;ba(el(a))}function VH(a){a=a|0;return 64}function Sk(a){a=a|0;return 12}function JG(a){a=a|0;return 68}function $I(a){a=a|0;ba(gl(a))}function qb(a){a=a|0;return 0}function pg(a){a=a|0;return 2}function pK(a,b){a=a|0;b=v(b)}function oe(a){a=a|0;return 1}function jG(a){a=a|0;return 8}function Ny(a){a=a|0;return 4}function Ck(a){a=a|0;return 6}function Al(a){a=a|0;return 3}function wa(a,b){a=a|0;b=b|0}function jp(){return fa(1)|0}function Lx(a){a=a|0;l[a]()}function qL(){return 1024}function Z(a){a=a|0;ba(a)}function Ma(a){a=a|0;D()}function hh(){return 1}function gh(){return 2}function fh(){return 3}function eh(){return 4}function Pn(){return 0}function On(){return 5}function Zc(a){a=a|0}function rL(){xy()}function ay(){D()}
// EMSCRIPTEN_END_FUNCS
l[1]=Ga;l[2]=hc;l[3]=Mn;l[4]=Ln;l[5]=Ha;l[6]=vb;l[7]=ay;l[8]=dh;l[9]=Jn;l[10]=In;l[11]=Hn;l[12]=Ha;l[13]=vb;l[14]=Ha;l[15]=vb;l[16]=Ga;l[17]=zn;l[18]=yn;l[19]=xn;l[20]=Ha;l[21]=vb;l[22]=Ga;l[23]=hc;l[24]=un;l[25]=tn;l[26]=sn;l[27]=Ha;l[28]=vb;l[29]=Ga;l[30]=hc;l[31]=rn;l[32]=Ga;l[33]=hc;l[34]=qn;l[35]=pn;l[36]=Ha;l[37]=vb;l[38]=Ga;l[39]=hc;l[40]=on;l[41]=nn;l[42]=mn;l[43]=ln;l[44]=kn;l[45]=jn;l[46]=hn;l[47]=gn;l[48]=fn;l[49]=en;l[50]=dn;l[51]=cn;l[52]=bn;l[53]=an;l[54]=$m;l[55]=_m;l[56]=Zm;l[57]=Ym;l[58]=Xm;l[59]=Wm;l[60]=Vm;l[61]=Ha;l[62]=vb;l[63]=xe;l[64]=vm;l[65]=um;l[66]=sm;l[67]=rm;l[68]=ye;l[69]=tm;l[70]=pm;l[71]=om;l[72]=nm;l[73]=mm;l[74]=jm;l[75]=im;l[76]=hm;l[77]=gm;l[78]=dm;l[79]=bm;l[80]=am;l[81]=Yl;l[82]=$l;l[83]=Zl;l[84]=_l;l[85]=Wl;l[86]=Xl;l[87]=Vl;l[88]=Sl;l[89]=Rl;l[90]=Ql;l[91]=Dg;l[92]=Dg;l[93]=Ul;l[94]=Tl;l[95]=la;l[96]=Z;l[97]=Pl;l[98]=be;l[99]=YG;l[100]=la;l[101]=Z;l[102]=oL;l[103]=la;l[104]=Z;l[105]=fb;l[106]=Z;l[107]=kL;l[108]=la;l[109]=Z;l[110]=ua;l[111]=ua;l[112]=jL;l[113]=la;l[114]=Z;l[115]=hL;l[116]=Lb;l[117]=wa;l[118]=la;l[119]=Ma;l[120]=fL;l[121]=eL;l[122]=dL;l[123]=Lb;l[124]=cd;l[125]=qe;l[126]=bL;l[127]=ug;l[128]=ec;l[129]=Fl;l[130]=El;l[131]=la;l[132]=Z;l[133]=aL;l[134]=Z;l[135]=$K;l[136]=Z;l[137]=_K;l[138]=Z;l[139]=ZK;l[140]=Z;l[141]=YK;l[142]=Z;l[143]=XK;l[144]=Z;l[145]=WK;l[146]=Z;l[147]=VK;l[148]=Z;l[149]=UK;l[150]=Z;l[151]=TK;l[152]=RK;l[153]=QK;l[154]=NK;l[155]=Lb;l[156]=cd;l[157]=la;l[158]=Z;l[159]=Dl;l[160]=MK;l[161]=LK;l[162]=EK;l[163]=DK;l[164]=KK;l[165]=JK;l[166]=IK;l[167]=HK;l[168]=Hb;l[169]=rg;l[170]=Bl;l[171]=bH;l[172]=$G;l[173]=aH;l[174]=ae;l[175]=CK;l[176]=pe;l[177]=BK;l[178]=AK;l[179]=sg;l[180]=zK;l[181]=qg;l[182]=yK;l[183]=_G;l[184]=bg;l[185]=xK;l[186]=ZG;l[187]=wK;l[188]=XG;l[189]=pg;l[190]=vK;l[191]=lH;l[192]=Al;l[193]=Al;l[194]=uK;l[195]=tK;l[196]=oe;l[197]=sK;l[198]=rK;l[199]=qK;l[200]=la;l[201]=Z;l[202]=yl;l[203]=pK;l[204]=wa;l[205]=ua;l[206]=la;l[207]=Z;l[208]=Z;l[209]=xl;l[210]=lK;l[211]=kK;l[212]=jK;l[213]=Lb;l[214]=cd;l[215]=Z;l[216]=hK;l[217]=gK;l[218]=iK;l[219]=Z;l[220]=ng;l[221]=Z;l[222]=ua;l[223]=ua;l[224]=fK;l[225]=Z;l[226]=vl;l[227]=Ma;l[228]=dK;l[229]=Ma;l[230]=cK;l[231]=lg;l[232]=aK;l[233]=$J;l[234]=_J;l[235]=pl;l[236]=QJ;l[237]=rl;l[238]=TJ;l[239]=WJ;l[240]=kg;l[241]=bd;l[242]=ZJ;l[243]=RJ;l[244]=Z;l[245]=ol;l[246]=Z;l[247]=ol;l[248]=la;l[249]=Z;l[250]=ua;l[251]=PJ;l[252]=OJ;l[253]=xe;l[254]=xe;l[255]=Z;l[256]=NJ;l[257]=MJ;l[258]=Z;l[259]=LJ;l[260]=Z;l[261]=KJ;l[262]=Z;l[263]=JJ;l[264]=IJ;l[265]=la;l[266]=Z;l[267]=HJ;l[268]=Z;l[269]=GJ;l[270]=Z;l[271]=FJ;l[272]=Z;l[273]=EJ;l[274]=la;l[275]=Z;l[276]=DJ;l[277]=CJ;l[278]=BJ;l[279]=AJ;l[280]=zJ;l[281]=Z;l[282]=ml;l[283]=vJ;l[284]=uJ;l[285]=tJ;l[286]=Lb;l[287]=cd;l[288]=la;l[289]=Z;l[290]=lJ;l[291]=pJ;l[292]=oJ;l[293]=nJ;l[294]=mJ;l[295]=kJ;l[296]=Z;l[297]=ua;l[298]=ua;l[299]=kl;l[300]=Z;l[301]=ua;l[302]=ua;l[303]=jJ;l[304]=Z;l[305]=iJ;l[306]=hJ;l[307]=gJ;l[308]=fJ;l[309]=eJ;l[310]=dJ;l[311]=Z;l[312]=cJ;l[313]=gl;l[314]=$I;l[315]=YI;l[316]=XI;l[317]=ec;l[318]=el;l[319]=VI;l[320]=TI;l[321]=SI;l[322]=UI;l[323]=Z;l[324]=RI;l[325]=wa;l[326]=LI;l[327]=KI;l[328]=FI;l[329]=CI;l[330]=AI;l[331]=DI;l[332]=zI;l[333]=yI;l[334]=xI;l[335]=wI;l[336]=BI;l[337]=HI;l[338]=GI;l[339]=la;l[340]=Ba;l[341]=Bl;l[342]=oI;l[343]=nI;l[344]=mI;l[345]=lI;l[346]=ee;l[347]=kI;l[348]=pI;l[349]=rI;l[350]=qI;l[351]=qb;l[352]=ua;l[353]=Ba;l[354]=jI;l[355]=iI;l[356]=Ba;l[357]=hI;l[358]=gI;l[359]=Zk;l[360]=eI;l[361]=YH;l[362]=XH;l[363]=VG;l[364]=UG;l[365]=_H;l[366]=WH;l[367]=VH;l[368]=ZH;l[369]=aI;l[370]=$H;l[371]=Ba;l[372]=Xk;l[373]=RH;l[374]=QH;l[375]=sg;l[376]=PH;l[377]=SH;l[378]=UH;l[379]=TH;l[380]=OH;l[381]=NH;l[382]=zH;l[383]=JH;l[384]=yH;l[385]=pe;l[386]=FH;l[387]=EH;l[388]=DH;l[389]=ee;l[390]=IH;l[391]=KH;l[392]=wH;l[393]=CH;l[394]=HH;l[395]=GH;l[396]=la;l[397]=Z;l[398]=Vk;l[399]=Z;l[400]=Vk;l[401]=Z;l[402]=BH;l[403]=la;l[404]=Ba;l[405]=Tk;l[406]=vH;l[407]=Sk;l[408]=Xa;l[409]=xH;l[410]=la;l[411]=Z;l[412]=uH;l[413]=Z;l[414]=tH;l[415]=la;l[416]=Ba;l[417]=rH;l[418]=pH;l[419]=oH;l[420]=pe;l[421]=nH;l[422]=qg;l[423]=mH;l[424]=qH;l[425]=Ma;l[426]=hH;l[427]=jH;l[428]=iH;l[429]=Ma;l[430]=fH;l[431]=gH;l[432]=la;l[433]=Ba;l[434]=Xk;l[435]=eH;l[436]=dH;l[437]=cg;l[438]=cH;l[439]=Gb;l[440]=Ma;l[441]=Ma;l[442]=Ma;l[443]=MG;l[444]=LG;l[445]=TG;l[446]=KG;l[447]=JG;l[448]=OG;l[449]=bg;l[450]=SG;l[451]=RG;l[452]=Jk;l[453]=Jk;l[454]=QG;l[455]=PG;l[456]=qb;l[457]=Gb;l[458]=Ik;l[459]=NG;l[460]=Ba;l[461]=CG;l[462]=ag;l[463]=FG;l[464]=BG;l[465]=Gk;l[466]=$c;l[467]=ee;l[468]=AG;l[469]=HG;l[470]=GG;l[471]=Ba;l[472]=zG;l[473]=Ba;l[474]=yG;l[475]=rg;l[476]=vG;l[477]=uG;l[478]=tG;l[479]=bg;l[480]=xG;l[481]=wG;l[482]=qb;l[483]=qb;l[484]=Gb;l[485]=ua;l[486]=qb;l[487]=Gb;l[488]=Ik;l[489]=Z;l[490]=sG;l[491]=la;l[492]=Ma;l[493]=rg;l[494]=Dk;l[495]=ag;l[496]=qG;l[497]=pG;l[498]=$c;l[499]=nG;l[500]=mG;l[501]=lG;l[502]=Ck;l[503]=kG;l[504]=jG;l[505]=Sk;l[506]=iG;l[507]=hG;l[508]=Ck;l[509]=gG;l[510]=fG;l[511]=eG;l[512]=dG;l[513]=cG;l[514]=_j;l[515]=zk;l[516]=jE;l[517]=lE;l[518]=kE;l[519]=bG;l[520]=Z;l[521]=aG;l[522]=Z;l[523]=$F;l[524]=YF;l[525]=XF;l[526]=WF;l[527]=TF;l[528]=SF;l[529]=pe;l[530]=RF;l[531]=UF;l[532]=VF;l[533]=Ba;l[534]=Dk;l[535]=ag;l[536]=QF;l[537]=JF;l[538]=Gk;l[539]=$c;l[540]=ee;l[541]=IF;l[542]=HF;l[543]=NF;l[544]=MF;l[545]=xk;l[546]=Ba;l[547]=GF;l[548]=PF;l[549]=KF;l[550]=FF;l[551]=Ba;l[552]=EF;l[553]=OF;l[554]=LF;l[555]=xk;l[556]=wk;l[557]=BF;l[558]=DF;l[559]=vk;l[560]=vk;l[561]=wa;l[562]=wa;l[563]=El;l[564]=wa;l[565]=wa;l[566]=AF;l[567]=yF;l[568]=xF;l[569]=tF;l[570]=CF;l[571]=tk;l[572]=uF;l[573]=wF;l[574]=vF;l[575]=Xf;l[576]=rF;l[577]=qF;l[578]=oF;l[579]=mF;l[580]=rk;l[581]=kF;l[582]=jF;l[583]=iF;l[584]=qk;l[585]=qk;l[586]=hF;l[587]=gF;l[588]=Zc;l[589]=eF;l[590]=dF;l[591]=cF;l[592]=pk;l[593]=bF;l[594]=ua;l[595]=ec;l[596]=ec;l[597]=ok;l[598]=ua;l[599]=qb;l[600]=ua;l[601]=wa;l[602]=ua;l[603]=pk;l[604]=oe;l[605]=wa;l[606]=wa;l[607]=kk;l[608]=ZE;l[609]=QE;l[610]=TE;l[611]=WE;l[612]=ec;l[613]=ec;l[614]=ok;l[615]=YE;l[616]=ug;l[617]=XE;l[618]=PE;l[619]=SE;l[620]=VE;l[621]=qb;l[622]=pl;l[623]=RE;l[624]=Z;l[625]=OE;l[626]=Z;l[627]=NE;l[628]=ME;l[629]=LE;l[630]=JE;l[631]=IE;l[632]=FE;l[633]=rk;l[634]=HE;l[635]=GE;l[636]=EE;l[637]=fk;l[638]=fk;l[639]=BE;l[640]=AE;l[641]=Zc;l[642]=Z;l[643]=zE;l[644]=yE;l[645]=Z;l[646]=ek;l[647]=Z;l[648]=ek;l[649]=Td;l[650]=rE;l[651]=Ma;l[652]=dE;l[653]=$D;l[654]=_D;l[655]=cE;l[656]=bE;l[657]=aE;l[658]=WD;l[659]=VD;l[660]=TD;l[661]=SD;l[662]=Qf;l[663]=PD;l[664]=Mj;l[665]=FD;l[666]=Jj;l[667]=oD;l[668]=JD;l[669]=AD;l[670]=zD;l[671]=yD;l[672]=xD;l[673]=HD;l[674]=GD;l[675]=KD;l[676]=DD;l[677]=CD;l[678]=ED;l[679]=sD;l[680]=rD;l[681]=qD;l[682]=Bj;l[683]=Bj;l[684]=pg;l[685]=MD;l[686]=Hj;l[687]=Gj;l[688]=Hj;l[689]=Gj;l[690]=Cj;l[691]=tD;l[692]=uD;l[693]=wD;l[694]=BD;l[695]=Kj;l[696]=OD;l[697]=LD;l[698]=wa;l[699]=nD;l[700]=mD;l[701]=lD;l[702]=kD;l[703]=Z;l[704]=jD;l[705]=iD;l[706]=yj;l[707]=Fb;l[708]=Zc;l[709]=dD;l[710]=gD;l[711]=fD;l[712]=kl;l[713]=cD;l[714]=bD;l[715]=qg;l[716]=Eb;l[717]=yj;l[718]=Fb;l[719]=ZC;l[720]=YC;l[721]=tj;l[722]=WC;l[723]=VC;l[724]=UC;l[725]=TC;l[726]=XC;l[727]=Fb;l[728]=MC;l[729]=KC;l[730]=JC;l[731]=LC;l[732]=Fb;l[733]=FC;l[734]=EC;l[735]=DC;l[736]=BC;l[737]=AC;l[738]=zk;l[739]=zC;l[740]=yC;l[741]=Ma;l[742]=Fb;l[743]=sC;l[744]=qC;l[745]=oC;l[746]=nC;l[747]=mC;l[748]=lC;l[749]=Fb;l[750]=eC;l[751]=hC;l[752]=gC;l[753]=dC;l[754]=bC;l[755]=aC;l[756]=_B;l[757]=ZB;l[758]=$B;l[759]=Fb;l[760]=YB;l[761]=WB;l[762]=VB;l[763]=RB;l[764]=QB;l[765]=PB;l[766]=OB;l[767]=gj;l[768]=NB;l[769]=ua;l[770]=yB;l[771]=ua;l[772]=xB;l[773]=oe;l[774]=FB;l[775]=CB;l[776]=AB;l[777]=DB;l[778]=EB;l[779]=BB;l[780]=tB;l[781]=cj;l[782]=rB;l[783]=hB;l[784]=jB;l[785]=oB;l[786]=mB;l[787]=gB;l[788]=Z;l[789]=iB;l[790]=fB;l[791]=eB;l[792]=RA;l[793]=wa;l[794]=aB;l[795]=$A;l[796]=_A;l[797]=ZA;l[798]=YA;l[799]=XA;l[800]=WA;l[801]=UA;l[802]=TA;l[803]=SA;l[804]=Z;l[805]=QA;l[806]=PA;l[807]=OA;l[808]=qb;l[809]=oe;l[810]=NA;l[811]=wa;l[812]=HA;l[813]=LA;l[814]=MA;l[815]=IA;l[816]=JA;l[817]=GA;l[818]=NI;l[819]=FA;l[820]=ug;l[821]=KA;l[822]=EA;l[823]=DA;l[824]=CA;l[825]=Z;l[826]=BA;l[827]=Z;l[828]=AA;l[829]=Z;l[830]=zA;l[831]=Z;l[832]=yA;l[833]=Rz;l[834]=Vi;l[835]=vA;l[836]=wa;l[837]=Az;l[838]=zz;l[839]=xz;l[840]=Z;l[841]=Nz;l[842]=la;l[843]=Z;l[844]=Iz;l[845]=Hz;l[846]=Gz;l[847]=pg;l[848]=Ba;l[849]=wz;l[850]=wa;l[851]=vz;l[852]=cg;l[853]=uz;l[854]=Gb;l[855]=Z;l[856]=tz;l[857]=Z;l[858]=qz;l[859]=Ba;l[860]=Gb;l[861]=cg;l[862]=pz;l[863]=sg;l[864]=oz;l[865]=nz;l[866]=mz;l[867]=Gb;l[868]=lz;l[869]=Z;l[870]=kz;l[871]=Z;l[872]=jz;l[873]=Cz;l[874]=Fz;l[875]=Ez;l[876]=Dz;l[877]=la;l[878]=Z;l[879]=iz;l[880]=Lb;l[881]=wa;l[882]=hz;l[883]=gz;l[884]=_y;l[885]=Zy;l[886]=wa;l[887]=ez;l[888]=dz;l[889]=cz;l[890]=Z;l[891]=yl;l[892]=Ci;l[893]=Xy;l[894]=Ry;l[895]=Qy;l[896]=Sy;l[897]=Oy;l[898]=Ny;l[899]=Wy;l[900]=Vy;l[901]=Z;l[902]=My;l[903]=la;l[904]=Z;l[905]=By;l[906]=Lb;l[907]=cd;l[908]=Ay;l[909]=zy;l[910]=ty;l[911]=uy;l[912]=sy;l[913]=Z;l[914]=la;l[915]=Z;l[916]=Zc;l[917]=Zc;l[918]=Zx;l[919]=Px;l[920]=Sx;l[921]=Xx;l[922]=Z;l[923]=Qx;l[924]=Tx;l[925]=Wx;l[926]=Z;l[927]=Rx;l[928]=Ux;l[929]=Vx;function O(){return buffer.byteLength/65536|0}return{"__wasm_call_ctors":rL,"__em_js__array_bounds_check_error":qL,"emscripten_bind_btCollisionWorld_getDispatcher_0":xd,"emscripten_bind_btCollisionWorld_rayTest_3":qd,"emscripten_bind_btCollisionWorld_getPairCache_0":md,"emscripten_bind_btCollisionWorld_getDispatchInfo_0":kd,"emscripten_bind_btCollisionWorld_addCollisionObject_1":jh,"emscripten_bind_btCollisionWorld_addCollisionObject_2":Rg,"emscripten_bind_btCollisionWorld_addCollisionObject_3":te,"emscripten_bind_btCollisionWorld_removeCollisionObject_1":ne,"emscripten_bind_btCollisionWorld_getBroadphase_0":fe,"emscripten_bind_btCollisionWorld_convexSweepTest_5":ce,"emscripten_bind_btCollisionWorld_contactPairTest_3":_d,"emscripten_bind_btCollisionWorld_contactTest_2":Ud,"emscripten_bind_btCollisionWorld_updateSingleAabb_1":Md,"emscripten_bind_btCollisionWorld_setDebugDrawer_1":Sc,"emscripten_bind_btCollisionWorld_getDebugDrawer_0":Fd,"emscripten_bind_btCollisionWorld_debugDrawWorld_0":Cd,"emscripten_bind_btCollisionWorld_debugDrawObject_3":wd,"emscripten_bind_btCollisionWorld___destroy___0":_,"emscripten_bind_btCollisionShape_setLocalScaling_1":oa,"emscripten_bind_btCollisionShape_getLocalScaling_0":na,"emscripten_bind_btCollisionShape_calculateLocalInertia_2":ma,"emscripten_bind_btCollisionShape_setMargin_1":Ea,"emscripten_bind_btCollisionShape_getMargin_0":Da,"emscripten_bind_btCollisionShape___destroy___0":_,"emscripten_bind_btCollisionObject_setAnisotropicFriction_2":Gc,"emscripten_bind_btCollisionObject_getCollisionShape_0":Fc,"emscripten_bind_btCollisionObject_setContactProcessingThreshold_1":Vb,"emscripten_bind_btCollisionObject_setActivationState_1":Dc,"emscripten_bind_btCollisionObject_forceActivationState_1":Cc,"emscripten_bind_btCollisionObject_activate_0":Bc,"emscripten_bind_btCollisionObject_activate_1":Ac,"emscripten_bind_btCollisionObject_isActive_0":zc,"emscripten_bind_btCollisionObject_isKinematicObject_0":yc,"emscripten_bind_btCollisionObject_isStaticObject_0":xc,"emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0":wc,"emscripten_bind_btCollisionObject_getRestitution_0":uc,"emscripten_bind_btCollisionObject_getFriction_0":tc,"emscripten_bind_btCollisionObject_getRollingFriction_0":sc,"emscripten_bind_btCollisionObject_setRestitution_1":qc,"emscripten_bind_btCollisionObject_setFriction_1":pc,"emscripten_bind_btCollisionObject_setRollingFriction_1":oc,"emscripten_bind_btCollisionObject_getWorldTransform_0":Tb,"emscripten_bind_btCollisionObject_getCollisionFlags_0":nc,"emscripten_bind_btCollisionObject_setCollisionFlags_1":mc,"emscripten_bind_btCollisionObject_setWorldTransform_1":lc,"emscripten_bind_btCollisionObject_setCollisionShape_1":zb,"emscripten_bind_btCollisionObject_setCcdMotionThreshold_1":kc,"emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1":jc,"emscripten_bind_btCollisionObject_getUserIndex_0":Pa,"emscripten_bind_btCollisionObject_setUserIndex_1":Oa,"emscripten_bind_btCollisionObject_getUserPointer_0":Pa,"emscripten_bind_btCollisionObject_setUserPointer_1":Oa,"emscripten_bind_btCollisionObject_getBroadphaseHandle_0":Rb,"emscripten_bind_btCollisionObject___destroy___0":ic,"emscripten_bind_btDynamicsWorld_addAction_1":jd,"emscripten_bind_btDynamicsWorld_removeAction_1":Ne,"emscripten_bind_btDynamicsWorld_getSolverInfo_0":Me,"emscripten_bind_btDynamicsWorld_setInternalTickCallback_1":Ke,"emscripten_bind_btDynamicsWorld_setInternalTickCallback_2":Ie,"emscripten_bind_btDynamicsWorld_setInternalTickCallback_3":He,"emscripten_bind_btDynamicsWorld_getDispatcher_0":xd,"emscripten_bind_btDynamicsWorld_rayTest_3":qd,"emscripten_bind_btDynamicsWorld_getPairCache_0":md,"emscripten_bind_btDynamicsWorld_getDispatchInfo_0":kd,"emscripten_bind_btDynamicsWorld_addCollisionObject_1":jh,"emscripten_bind_btDynamicsWorld_addCollisionObject_2":Rg,"emscripten_bind_btDynamicsWorld_addCollisionObject_3":te,"emscripten_bind_btDynamicsWorld_removeCollisionObject_1":ne,"emscripten_bind_btDynamicsWorld_getBroadphase_0":fe,"emscripten_bind_btDynamicsWorld_convexSweepTest_5":ce,"emscripten_bind_btDynamicsWorld_contactPairTest_3":_d,"emscripten_bind_btDynamicsWorld_contactTest_2":Ud,"emscripten_bind_btDynamicsWorld_updateSingleAabb_1":Md,"emscripten_bind_btDynamicsWorld_setDebugDrawer_1":Sc,"emscripten_bind_btDynamicsWorld_getDebugDrawer_0":Fd,"emscripten_bind_btDynamicsWorld_debugDrawWorld_0":Cd,"emscripten_bind_btDynamicsWorld_debugDrawObject_3":wd,"emscripten_bind_btDynamicsWorld___destroy___0":_,"emscripten_bind_btTypedConstraint_enableFeedback_1":kb,"emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btTypedConstraint_getParam_2":hb,"emscripten_bind_btTypedConstraint_setParam_3":gb,"emscripten_bind_btTypedConstraint___destroy___0":_,"emscripten_bind_btConcaveShape_setLocalScaling_1":oa,"emscripten_bind_btConcaveShape_getLocalScaling_0":na,"emscripten_bind_btConcaveShape_calculateLocalInertia_2":ma,"emscripten_bind_btConcaveShape___destroy___0":_,"emscripten_bind_btCapsuleShape_btCapsuleShape_2":qo,"emscripten_bind_btCapsuleShape_setMargin_1":Ea,"emscripten_bind_btCapsuleShape_getMargin_0":Da,"emscripten_bind_btCapsuleShape_getUpAxis_0":hd,"emscripten_bind_btCapsuleShape_getRadius_0":Fe,"emscripten_bind_btCapsuleShape_getHalfHeight_0":Ee,"emscripten_bind_btCapsuleShape_setLocalScaling_1":oa,"emscripten_bind_btCapsuleShape_getLocalScaling_0":na,"emscripten_bind_btCapsuleShape_calculateLocalInertia_2":ma,"emscripten_bind_btCapsuleShape___destroy___0":_,"emscripten_bind_btIDebugDraw_drawLine_3":Ug,"emscripten_bind_btIDebugDraw_drawContactPoint_5":Sg,"emscripten_bind_btIDebugDraw_reportErrorWarning_1":Qg,"emscripten_bind_btIDebugDraw_draw3dText_2":Pg,"emscripten_bind_btIDebugDraw_setDebugMode_1":Mg,"emscripten_bind_btIDebugDraw_getDebugMode_0":Ig,"emscripten_bind_btIDebugDraw___destroy___0":_,"emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0":Am,"emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1":lm,"emscripten_bind_btDefaultCollisionConfiguration___destroy___0":_,"emscripten_bind_btTriangleMeshShape_setLocalScaling_1":oa,"emscripten_bind_btTriangleMeshShape_getLocalScaling_0":na,"emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2":ma,"emscripten_bind_btTriangleMeshShape___destroy___0":_,"emscripten_bind_btGhostObject_btGhostObject_0":cm,"emscripten_bind_btGhostObject_getNumOverlappingObjects_0":Eg,"emscripten_bind_btGhostObject_getOverlappingObject_1":Il,"emscripten_bind_btGhostObject_setAnisotropicFriction_2":Gc,"emscripten_bind_btGhostObject_getCollisionShape_0":Fc,"emscripten_bind_btGhostObject_setContactProcessingThreshold_1":Vb,"emscripten_bind_btGhostObject_setActivationState_1":Dc,"emscripten_bind_btGhostObject_forceActivationState_1":Cc,"emscripten_bind_btGhostObject_activate_0":Bc,"emscripten_bind_btGhostObject_activate_1":Ac,"emscripten_bind_btGhostObject_isActive_0":zc,"emscripten_bind_btGhostObject_isKinematicObject_0":yc,"emscripten_bind_btGhostObject_isStaticObject_0":xc,"emscripten_bind_btGhostObject_isStaticOrKinematicObject_0":wc,"emscripten_bind_btGhostObject_getRestitution_0":uc,"emscripten_bind_btGhostObject_getFriction_0":tc,"emscripten_bind_btGhostObject_getRollingFriction_0":sc,"emscripten_bind_btGhostObject_setRestitution_1":qc,"emscripten_bind_btGhostObject_setFriction_1":pc,"emscripten_bind_btGhostObject_setRollingFriction_1":oc,"emscripten_bind_btGhostObject_getWorldTransform_0":Tb,"emscripten_bind_btGhostObject_getCollisionFlags_0":nc,"emscripten_bind_btGhostObject_setCollisionFlags_1":mc,"emscripten_bind_btGhostObject_setWorldTransform_1":lc,"emscripten_bind_btGhostObject_setCollisionShape_1":zb,"emscripten_bind_btGhostObject_setCcdMotionThreshold_1":kc,"emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1":jc,"emscripten_bind_btGhostObject_getUserIndex_0":Pa,"emscripten_bind_btGhostObject_setUserIndex_1":Oa,"emscripten_bind_btGhostObject_getUserPointer_0":Pa,"emscripten_bind_btGhostObject_setUserPointer_1":Oa,"emscripten_bind_btGhostObject_getBroadphaseHandle_0":Rb,"emscripten_bind_btGhostObject___destroy___0":ic,"emscripten_bind_btConeShape_btConeShape_2":cL,"emscripten_bind_btConeShape_setLocalScaling_1":oa,"emscripten_bind_btConeShape_getLocalScaling_0":na,"emscripten_bind_btConeShape_calculateLocalInertia_2":ma,"emscripten_bind_btConeShape___destroy___0":_,"emscripten_bind_btActionInterface_updateAction_2":tg,"emscripten_bind_btActionInterface___destroy___0":_,"emscripten_bind_btVector3_btVector3_0":OK,"emscripten_bind_btVector3_btVector3_3":GK,"emscripten_bind_btVector3_length_0":zl,"emscripten_bind_btVector3_x_0":me,"emscripten_bind_btVector3_y_0":ke,"emscripten_bind_btVector3_z_0":je,"emscripten_bind_btVector3_setX_1":ie,"emscripten_bind_btVector3_setY_1":he,"emscripten_bind_btVector3_setZ_1":ge,"emscripten_bind_btVector3_setValue_3":aJ,"emscripten_bind_btVector3_normalize_0":dl,"emscripten_bind_btVector3_rotate_2":tI,"emscripten_bind_btVector3_dot_1":Pk,"emscripten_bind_btVector3_op_mul_1":Nk,"emscripten_bind_btVector3_op_add_1":Hk,"emscripten_bind_btVector3_op_sub_1":Ek,"emscripten_bind_btVector3___destroy___0":_c,"emscripten_bind_btVehicleRaycaster_castRay_3":yk,"emscripten_bind_btVehicleRaycaster___destroy___0":_,"emscripten_bind_btQuadWord_x_0":me,"emscripten_bind_btQuadWord_y_0":ke,"emscripten_bind_btQuadWord_z_0":je,"emscripten_bind_btQuadWord_w_0":Zf,"emscripten_bind_btQuadWord_setX_1":ie,"emscripten_bind_btQuadWord_setY_1":he,"emscripten_bind_btQuadWord_setZ_1":ge,"emscripten_bind_btQuadWord_setW_1":sk,"emscripten_bind_btQuadWord___destroy___0":pa,"emscripten_bind_btCylinderShape_btCylinderShape_1":fF,"emscripten_bind_btCylinderShape_setMargin_1":Ea,"emscripten_bind_btCylinderShape_getMargin_0":Da,"emscripten_bind_btCylinderShape_setLocalScaling_1":oa,"emscripten_bind_btCylinderShape_getLocalScaling_0":na,"emscripten_bind_btCylinderShape_calculateLocalInertia_2":ma,"emscripten_bind_btCylinderShape___destroy___0":_,"emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4":$E,"emscripten_bind_btDiscreteDynamicsWorld_setGravity_1":jk,"emscripten_bind_btDiscreteDynamicsWorld_getGravity_0":KE,"emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1":gk,"emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3":dk,"emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1":ak,"emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1":Zj,"emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2":Xj,"emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1":Rf,"emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1":Rj,"emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2":Pj,"emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3":Lj,"emscripten_bind_btDiscreteDynamicsWorld_setContactAddedCallback_1":Ij,"emscripten_bind_btDiscreteDynamicsWorld_setContactProcessedCallback_1":Ej,"emscripten_bind_btDiscreteDynamicsWorld_setContactDestroyedCallback_1":zj,"emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0":xd,"emscripten_bind_btDiscreteDynamicsWorld_rayTest_3":qd,"emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0":md,"emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0":kd,"emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1":xj,"emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2":vj,"emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3":te,"emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1":ne,"emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0":fe,"emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5":ce,"emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3":_d,"emscripten_bind_btDiscreteDynamicsWorld_contactTest_2":Ud,"emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1":Md,"emscripten_bind_btDiscreteDynamicsWorld_setDebugDrawer_1":Sc,"emscripten_bind_btDiscreteDynamicsWorld_getDebugDrawer_0":Fd,"emscripten_bind_btDiscreteDynamicsWorld_debugDrawWorld_0":Cd,"emscripten_bind_btDiscreteDynamicsWorld_debugDrawObject_3":wd,"emscripten_bind_btDiscreteDynamicsWorld_addAction_1":jd,"emscripten_bind_btDiscreteDynamicsWorld_removeAction_1":Ne,"emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0":Me,"emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_1":Ke,"emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_2":Ie,"emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_3":He,"emscripten_bind_btDiscreteDynamicsWorld___destroy___0":_,"emscripten_bind_btConvexShape_setLocalScaling_1":oa,"emscripten_bind_btConvexShape_getLocalScaling_0":na,"emscripten_bind_btConvexShape_calculateLocalInertia_2":ma,"emscripten_bind_btConvexShape_setMargin_1":Ea,"emscripten_bind_btConvexShape_getMargin_0":Da,"emscripten_bind_btConvexShape___destroy___0":_,"emscripten_bind_btDispatcher_getNumManifolds_0":Mf,"emscripten_bind_btDispatcher_getManifoldByIndexInternal_1":rj,"emscripten_bind_btDispatcher___destroy___0":_,"emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3":GC,"emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5":xC,"emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1":pj,"emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1":mj,"emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1":hj,"emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1":dj,"emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0":Gd,"emscripten_bind_btGeneric6DofConstraint_enableFeedback_1":kb,"emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btGeneric6DofConstraint_getParam_2":hb,"emscripten_bind_btGeneric6DofConstraint_setParam_3":gb,"emscripten_bind_btGeneric6DofConstraint___destroy___0":_,"emscripten_bind_btStridingMeshInterface_setScaling_1":Zi,"emscripten_bind_btStridingMeshInterface___destroy___0":_,"emscripten_bind_btMotionState_getWorldTransform_1":Ui,"emscripten_bind_btMotionState_setWorldTransform_1":zb,"emscripten_bind_btMotionState___destroy___0":_,"emscripten_bind_ConvexResultCallback_hasHit_0":Si,"emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0":Qi,"emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1":Pi,"emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0":Li,"emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1":Ii,"emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0":Ua,"emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1":Ta,"emscripten_bind_ConvexResultCallback___destroy___0":_,"emscripten_bind_ContactResultCallback_addSingleResult_7":Gi,"emscripten_bind_ContactResultCallback___destroy___0":_,"emscripten_bind_btSoftBodySolver___destroy___0":_,"emscripten_bind_RayResultCallback_hasHit_0":wf,"emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0":vf,"emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1":uf,"emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0":tf,"emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1":sf,"emscripten_bind_RayResultCallback_get_m_closestHitFraction_0":Ua,"emscripten_bind_RayResultCallback_set_m_closestHitFraction_1":Ta,"emscripten_bind_RayResultCallback_get_m_collisionObject_0":zd,"emscripten_bind_RayResultCallback_set_m_collisionObject_1":yd,"emscripten_bind_RayResultCallback___destroy___0":_,"emscripten_bind_btMatrix3x3_setEulerZYX_3":ly,"emscripten_bind_btMatrix3x3_getRotation_1":$x,"emscripten_bind_btMatrix3x3_getRow_1":Nx,"emscripten_bind_btMatrix3x3___destroy___0":pa,"emscripten_bind_btScalarArray_size_0":Ia,"emscripten_bind_btScalarArray_at_1":Kx,"emscripten_bind_btScalarArray___destroy___0":Ra,"emscripten_bind_Material_get_m_kLST_0":Ua,"emscripten_bind_Material_set_m_kLST_1":Ta,"emscripten_bind_Material_get_m_kAST_0":Nc,"emscripten_bind_Material_set_m_kAST_1":Mc,"emscripten_bind_Material_get_m_kVST_0":Lc,"emscripten_bind_Material_set_m_kVST_1":Kc,"emscripten_bind_Material_get_m_flags_0":Ix,"emscripten_bind_Material_set_m_flags_1":Hx,"emscripten_bind_Material___destroy___0":pa,"emscripten_bind_btDispatcherInfo_get_m_timeStep_0":td,"emscripten_bind_btDispatcherInfo_set_m_timeStep_1":sd,"emscripten_bind_btDispatcherInfo_get_m_stepCount_0":zg,"emscripten_bind_btDispatcherInfo_set_m_stepCount_1":ef,"emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0":zd,"emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1":yd,"emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0":Lc,"emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1":Kc,"emscripten_bind_btDispatcherInfo_get_m_useContinuous_0":Gx,"emscripten_bind_btDispatcherInfo_set_m_useContinuous_1":Fx,"emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0":Ex,"emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1":Dx,"emscripten_bind_btDispatcherInfo_get_m_enableSPU_0":Cx,"emscripten_bind_btDispatcherInfo_set_m_enableSPU_1":Bx,"emscripten_bind_btDispatcherInfo_get_m_useEpa_0":Ax,"emscripten_bind_btDispatcherInfo_set_m_useEpa_1":zx,"emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0":ri,"emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1":qi,"emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0":yx,"emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1":xx,"emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0":df,"emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1":cf,"emscripten_bind_btDispatcherInfo___destroy___0":pa,"emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0":Ha,"emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1":rd,"emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0":Jc,"emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1":Ic,"emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0":pi,"emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1":oi,"emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0":ni,"emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1":mi,"emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0":li,"emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1":ki,"emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0":ji,"emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1":ii,"emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0":hi,"emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1":gi,"emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0":fi,"emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1":ei,"emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0":di,"emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1":ci,"emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0":bi,"emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1":ai,"emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0":$h,"emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1":_h,"emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0":wx,"emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1":vx,"emscripten_bind_btWheelInfoConstructionInfo___destroy___0":pa,"emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1":ux,"emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2":tx,"emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1":oa,"emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0":na,"emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2":ma,"emscripten_bind_btConvexTriangleMeshShape_setMargin_1":Ea,"emscripten_bind_btConvexTriangleMeshShape_getMargin_0":Da,"emscripten_bind_btConvexTriangleMeshShape___destroy___0":_,"emscripten_bind_btBroadphaseInterface_getOverlappingPairCache_0":Mf,"emscripten_bind_btBroadphaseInterface___destroy___0":_,"emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3":sx,"emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4":rx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0":af,"emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1":$e,"emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0":qx,"emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1":px,"emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0":ox,"emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1":nx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0":mx,"emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1":lx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0":kx,"emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1":jx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0":ix,"emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1":hx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0":gx,"emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1":fx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0":ex,"emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1":dx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0":cx,"emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1":bx,"emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0":ax,"emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1":_w,"emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0":Zw,"emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1":Yw,"emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0":Xw,"emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1":Ww,"emscripten_bind_btRigidBodyConstructionInfo___destroy___0":pa,"emscripten_bind_btCollisionConfiguration___destroy___0":_,"emscripten_bind_btPersistentManifold_btPersistentManifold_0":Vw,"emscripten_bind_btPersistentManifold_getBody0_0":Uw,"emscripten_bind_btPersistentManifold_getBody1_0":Tw,"emscripten_bind_btPersistentManifold_getNumContacts_0":Sw,"emscripten_bind_btPersistentManifold_getContactPoint_1":Rw,"emscripten_bind_btPersistentManifold___destroy___0":_c,"emscripten_bind_btCompoundShape_btCompoundShape_0":Qw,"emscripten_bind_btCompoundShape_btCompoundShape_1":Pw,"emscripten_bind_btCompoundShape_addChildShape_2":Ow,"emscripten_bind_btCompoundShape_removeChildShape_1":jd,"emscripten_bind_btCompoundShape_removeChildShapeByIndex_1":Nw,"emscripten_bind_btCompoundShape_getNumChildShapes_0":Mw,"emscripten_bind_btCompoundShape_getChildShape_1":Kw,"emscripten_bind_btCompoundShape_updateChildTransform_2":Iw,"emscripten_bind_btCompoundShape_updateChildTransform_3":Hw,"emscripten_bind_btCompoundShape_setMargin_1":Ea,"emscripten_bind_btCompoundShape_getMargin_0":Da,"emscripten_bind_btCompoundShape_setLocalScaling_1":oa,"emscripten_bind_btCompoundShape_getLocalScaling_0":na,"emscripten_bind_btCompoundShape_calculateLocalInertia_2":ma,"emscripten_bind_btCompoundShape___destroy___0":_,"emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2":Gw,"emscripten_bind_ClosestConvexResultCallback_hasHit_0":Si,"emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0":zF,"emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1":Dw,"emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0":qh,"emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1":Cw,"emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0":Bw,"emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1":Aw,"emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0":zw,"emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1":yw,"emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0":Qi,"emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1":Pi,"emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0":Li,"emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1":Ii,"emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0":Ua,"emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1":Ta,"emscripten_bind_ClosestConvexResultCallback___destroy___0":_,"emscripten_bind_AllHitsRayResultCallback_AllHitsRayResultCallback_2":xw,"emscripten_bind_AllHitsRayResultCallback_hasHit_0":wf,"emscripten_bind_AllHitsRayResultCallback_get_m_collisionObjects_0":_e,"emscripten_bind_AllHitsRayResultCallback_set_m_collisionObjects_1":vw,"emscripten_bind_AllHitsRayResultCallback_get_m_rayFromWorld_0":Ze,"emscripten_bind_AllHitsRayResultCallback_set_m_rayFromWorld_1":Ye,"emscripten_bind_AllHitsRayResultCallback_get_m_rayToWorld_0":Xh,"emscripten_bind_AllHitsRayResultCallback_set_m_rayToWorld_1":Wh,"emscripten_bind_AllHitsRayResultCallback_get_m_hitNormalWorld_0":Vh,"emscripten_bind_AllHitsRayResultCallback_set_m_hitNormalWorld_1":tw,"emscripten_bind_AllHitsRayResultCallback_get_m_hitPointWorld_0":ph,"emscripten_bind_AllHitsRayResultCallback_set_m_hitPointWorld_1":rw,"emscripten_bind_AllHitsRayResultCallback_get_m_hitFractions_0":qw,"emscripten_bind_AllHitsRayResultCallback_set_m_hitFractions_1":pw,"emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterGroup_0":vf,"emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterGroup_1":uf,"emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterMask_0":tf,"emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterMask_1":sf,"emscripten_bind_AllHitsRayResultCallback_get_m_closestHitFraction_0":Ua,"emscripten_bind_AllHitsRayResultCallback_set_m_closestHitFraction_1":Ta,"emscripten_bind_AllHitsRayResultCallback_get_m_collisionObject_0":zd,"emscripten_bind_AllHitsRayResultCallback_set_m_collisionObject_1":yd,"emscripten_bind_AllHitsRayResultCallback___destroy___0":_,"emscripten_bind_tMaterialArray_size_0":Ia,"emscripten_bind_tMaterialArray_at_1":pd,"emscripten_bind_tMaterialArray___destroy___0":Ra,"emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1":mw,"emscripten_bind_btDefaultVehicleRaycaster_castRay_3":yk,"emscripten_bind_btDefaultVehicleRaycaster___destroy___0":_,"emscripten_bind_btEmptyShape_btEmptyShape_0":kw,"emscripten_bind_btEmptyShape_setLocalScaling_1":oa,"emscripten_bind_btEmptyShape_getLocalScaling_0":na,"emscripten_bind_btEmptyShape_calculateLocalInertia_2":ma,"emscripten_bind_btEmptyShape___destroy___0":_,"emscripten_bind_btConstraintSetting_btConstraintSetting_0":jw,"emscripten_bind_btConstraintSetting_get_m_tau_0":td,"emscripten_bind_btConstraintSetting_set_m_tau_1":sd,"emscripten_bind_btConstraintSetting_get_m_damping_0":Ua,"emscripten_bind_btConstraintSetting_set_m_damping_1":Ta,"emscripten_bind_btConstraintSetting_get_m_impulseClamp_0":Nc,"emscripten_bind_btConstraintSetting_set_m_impulseClamp_1":Mc,"emscripten_bind_btConstraintSetting___destroy___0":pa,"emscripten_bind_LocalShapeInfo_get_m_shapePart_0":od,"emscripten_bind_LocalShapeInfo_set_m_shapePart_1":nd,"emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0":zg,"emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1":ef,"emscripten_bind_LocalShapeInfo___destroy___0":pa,"emscripten_bind_btRigidBody_btRigidBody_1":iw,"emscripten_bind_btRigidBody_getCenterOfMassTransform_0":Tb,"emscripten_bind_btRigidBody_setCenterOfMassTransform_1":hw,"emscripten_bind_btRigidBody_setSleepingThresholds_2":gw,"emscripten_bind_btRigidBody_getLinearDamping_0":ew,"emscripten_bind_btRigidBody_getAngularDamping_0":dw,"emscripten_bind_btRigidBody_setDamping_2":cw,"emscripten_bind_btRigidBody_setMassProps_2":bw,"emscripten_bind_btRigidBody_getLinearFactor_0":aw,"emscripten_bind_btRigidBody_setLinearFactor_1":_v,"emscripten_bind_btRigidBody_applyTorque_1":Yv,"emscripten_bind_btRigidBody_applyLocalTorque_1":Xv,"emscripten_bind_btRigidBody_applyForce_2":Vv,"emscripten_bind_btRigidBody_applyCentralForce_1":Tv,"emscripten_bind_btRigidBody_applyCentralLocalForce_1":Sv,"emscripten_bind_btRigidBody_applyTorqueImpulse_1":Qv,"emscripten_bind_btRigidBody_applyImpulse_2":Pv,"emscripten_bind_btRigidBody_applyCentralImpulse_1":Ov,"emscripten_bind_btRigidBody_updateInertiaTensor_0":Nv,"emscripten_bind_btRigidBody_getLinearVelocity_0":Mv,"emscripten_bind_btRigidBody_getAngularVelocity_0":Lv,"emscripten_bind_btRigidBody_setLinearVelocity_1":Jv,"emscripten_bind_btRigidBody_setAngularVelocity_1":Hv,"emscripten_bind_btRigidBody_getMotionState_0":Fv,"emscripten_bind_btRigidBody_setMotionState_1":Ev,"emscripten_bind_btRigidBody_getAngularFactor_0":Cv,"emscripten_bind_btRigidBody_setAngularFactor_1":Bv,"emscripten_bind_btRigidBody_upcast_1":zv,"emscripten_bind_btRigidBody_getAabb_2":xv,"emscripten_bind_btRigidBody_applyGravity_0":wv,"emscripten_bind_btRigidBody_getGravity_0":vv,"emscripten_bind_btRigidBody_setGravity_1":uv,"emscripten_bind_btRigidBody_getBroadphaseProxy_0":Rb,"emscripten_bind_btRigidBody_clearForces_0":tv,"emscripten_bind_btRigidBody_setAnisotropicFriction_2":Gc,"emscripten_bind_btRigidBody_getCollisionShape_0":Fc,"emscripten_bind_btRigidBody_setContactProcessingThreshold_1":Vb,"emscripten_bind_btRigidBody_setActivationState_1":Dc,"emscripten_bind_btRigidBody_forceActivationState_1":Cc,"emscripten_bind_btRigidBody_activate_0":Bc,"emscripten_bind_btRigidBody_activate_1":Ac,"emscripten_bind_btRigidBody_isActive_0":zc,"emscripten_bind_btRigidBody_isKinematicObject_0":yc,"emscripten_bind_btRigidBody_isStaticObject_0":xc,"emscripten_bind_btRigidBody_isStaticOrKinematicObject_0":wc,"emscripten_bind_btRigidBody_getRestitution_0":uc,"emscripten_bind_btRigidBody_getFriction_0":tc,"emscripten_bind_btRigidBody_getRollingFriction_0":sc,"emscripten_bind_btRigidBody_setRestitution_1":qc,"emscripten_bind_btRigidBody_setFriction_1":pc,"emscripten_bind_btRigidBody_setRollingFriction_1":oc,"emscripten_bind_btRigidBody_getWorldTransform_0":Tb,"emscripten_bind_btRigidBody_getCollisionFlags_0":nc,"emscripten_bind_btRigidBody_setCollisionFlags_1":mc,"emscripten_bind_btRigidBody_setWorldTransform_1":lc,"emscripten_bind_btRigidBody_setCollisionShape_1":zb,"emscripten_bind_btRigidBody_setCcdMotionThreshold_1":kc,"emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1":jc,"emscripten_bind_btRigidBody_getUserIndex_0":Pa,"emscripten_bind_btRigidBody_setUserIndex_1":Oa,"emscripten_bind_btRigidBody_getUserPointer_0":Pa,"emscripten_bind_btRigidBody_setUserPointer_1":Oa,"emscripten_bind_btRigidBody_getBroadphaseHandle_0":Rb,"emscripten_bind_btRigidBody___destroy___0":ic,"emscripten_bind_btIndexedMeshArray_size_0":Ia,"emscripten_bind_btIndexedMeshArray_at_1":rv,"emscripten_bind_btIndexedMeshArray___destroy___0":Ra,"emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0":qv,"emscripten_bind_btDbvtBroadphase___destroy___0":_,"emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9":pv,"emscripten_bind_btHeightfieldTerrainShape_setMargin_1":Ea,"emscripten_bind_btHeightfieldTerrainShape_getMargin_0":Da,"emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1":oa,"emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0":na,"emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2":ma,"emscripten_bind_btHeightfieldTerrainShape___destroy___0":_,"emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0":ov,"emscripten_bind_btDefaultSoftBodySolver___destroy___0":_,"emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1":nv,"emscripten_bind_btCollisionDispatcher_getNumManifolds_0":Mf,"emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1":rj,"emscripten_bind_btCollisionDispatcher___destroy___0":_,"emscripten_bind_btAxisSweep3_btAxisSweep3_2":mv,"emscripten_bind_btAxisSweep3_btAxisSweep3_3":lv,"emscripten_bind_btAxisSweep3_btAxisSweep3_4":kv,"emscripten_bind_btAxisSweep3_btAxisSweep3_5":jv,"emscripten_bind_btAxisSweep3___destroy___0":_,"emscripten_bind_VoidPtr___destroy___0":pa,"emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0":iv,"emscripten_bind_btSoftBodyWorldInfo_get_air_density_0":td,"emscripten_bind_btSoftBodyWorldInfo_set_air_density_1":sd,"emscripten_bind_btSoftBodyWorldInfo_get_water_density_0":Ua,"emscripten_bind_btSoftBodyWorldInfo_set_water_density_1":Ta,"emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0":Nc,"emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1":Mc,"emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0":Lc,"emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1":Kc,"emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0":Jc,"emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1":Ic,"emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0":gv,"emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1":fv,"emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0":ev,"emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1":dv,"emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0":Ze,"emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1":Ye,"emscripten_bind_btSoftBodyWorldInfo___destroy___0":cv,"emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2":av,"emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4":$u,"emscripten_bind_btConeTwistConstraint_setLimit_2":_u,"emscripten_bind_btConeTwistConstraint_setAngularOnly_1":Yu,"emscripten_bind_btConeTwistConstraint_setDamping_1":Xu,"emscripten_bind_btConeTwistConstraint_enableMotor_1":Wu,"emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1":Vu,"emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1":Uu,"emscripten_bind_btConeTwistConstraint_setMotorTarget_1":Tu,"emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1":Su,"emscripten_bind_btConeTwistConstraint_enableFeedback_1":kb,"emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btConeTwistConstraint_getParam_2":hb,"emscripten_bind_btConeTwistConstraint_setParam_3":gb,"emscripten_bind_btConeTwistConstraint___destroy___0":_,"emscripten_bind_btHingeConstraint_btHingeConstraint_2":Ru,"emscripten_bind_btHingeConstraint_btHingeConstraint_3":Qu,"emscripten_bind_btHingeConstraint_btHingeConstraint_4":Ou,"emscripten_bind_btHingeConstraint_btHingeConstraint_5":Nu,"emscripten_bind_btHingeConstraint_btHingeConstraint_6":Mu,"emscripten_bind_btHingeConstraint_btHingeConstraint_7":Lu,"emscripten_bind_btHingeConstraint_setLimit_4":Ku,"emscripten_bind_btHingeConstraint_setLimit_5":Ju,"emscripten_bind_btHingeConstraint_enableAngularMotor_3":Iu,"emscripten_bind_btHingeConstraint_setAngularOnly_1":Gu,"emscripten_bind_btHingeConstraint_enableMotor_1":Fu,"emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1":Eu,"emscripten_bind_btHingeConstraint_setMotorTarget_2":Du,"emscripten_bind_btHingeConstraint_enableFeedback_1":kb,"emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btHingeConstraint_getParam_2":hb,"emscripten_bind_btHingeConstraint_setParam_3":gb,"emscripten_bind_btHingeConstraint___destroy___0":_,"emscripten_bind_btConeShapeZ_btConeShapeZ_2":Cu,"emscripten_bind_btConeShapeZ_setLocalScaling_1":oa,"emscripten_bind_btConeShapeZ_getLocalScaling_0":na,"emscripten_bind_btConeShapeZ_calculateLocalInertia_2":ma,"emscripten_bind_btConeShapeZ___destroy___0":_,"emscripten_bind_btConeShapeX_btConeShapeX_2":Bu,"emscripten_bind_btConeShapeX_setLocalScaling_1":oa,"emscripten_bind_btConeShapeX_getLocalScaling_0":na,"emscripten_bind_btConeShapeX_calculateLocalInertia_2":ma,"emscripten_bind_btConeShapeX___destroy___0":_,"emscripten_bind_btTriangleMesh_btTriangleMesh_0":Au,"emscripten_bind_btTriangleMesh_btTriangleMesh_1":zu,"emscripten_bind_btTriangleMesh_btTriangleMesh_2":yu,"emscripten_bind_btTriangleMesh_addTriangle_3":xu,"emscripten_bind_btTriangleMesh_addTriangle_4":wu,"emscripten_bind_btTriangleMesh_findOrAddVertex_2":uu,"emscripten_bind_btTriangleMesh_addIndex_1":tu,"emscripten_bind_btTriangleMesh_getIndexedMeshArray_0":su,"emscripten_bind_btTriangleMesh_setScaling_1":Zi,"emscripten_bind_btTriangleMesh___destroy___0":_,"emscripten_bind_btConvexHullShape_btConvexHullShape_0":ru,"emscripten_bind_btConvexHullShape_btConvexHullShape_1":qu,"emscripten_bind_btConvexHullShape_btConvexHullShape_2":pu,"emscripten_bind_btConvexHullShape_addPoint_1":ou,"emscripten_bind_btConvexHullShape_addPoint_2":nu,"emscripten_bind_btConvexHullShape_setMargin_1":Ea,"emscripten_bind_btConvexHullShape_getMargin_0":Da,"emscripten_bind_btConvexHullShape_getNumVertices_0":mu,"emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1":lu,"emscripten_bind_btConvexHullShape_recalcLocalAabb_0":ku,"emscripten_bind_btConvexHullShape_getConvexPolyhedron_0":hd,"emscripten_bind_btConvexHullShape_setLocalScaling_1":oa,"emscripten_bind_btConvexHullShape_getLocalScaling_0":na,"emscripten_bind_btConvexHullShape_calculateLocalInertia_2":ma,"emscripten_bind_btConvexHullShape___destroy___0":_,"emscripten_bind_btVehicleTuning_btVehicleTuning_0":ju,"emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0":td,"emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1":sd,"emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0":Ua,"emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1":Ta,"emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0":Nc,"emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1":Mc,"emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0":Lc,"emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1":Kc,"emscripten_bind_btVehicleTuning_get_m_frictionSlip_0":lh,"emscripten_bind_btVehicleTuning_set_m_frictionSlip_1":Oh,"emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0":Nh,"emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1":Mh,"emscripten_bind_btCollisionObjectWrapper_getWorldTransform_0":hu,"emscripten_bind_btCollisionObjectWrapper_getCollisionObject_0":gu,"emscripten_bind_btCollisionObjectWrapper_getCollisionShape_0":Ia,"emscripten_bind_btShapeHull_btShapeHull_1":fu,"emscripten_bind_btShapeHull_buildHull_1":eu,"emscripten_bind_btShapeHull_numVertices_0":cu,"emscripten_bind_btShapeHull_getVertexPointer_0":bu,"emscripten_bind_btShapeHull___destroy___0":$t,"emscripten_bind_btDefaultMotionState_btDefaultMotionState_0":_t,"emscripten_bind_btDefaultMotionState_btDefaultMotionState_1":Yt,"emscripten_bind_btDefaultMotionState_btDefaultMotionState_2":Xt,"emscripten_bind_btDefaultMotionState_getWorldTransform_1":Ui,"emscripten_bind_btDefaultMotionState_setWorldTransform_1":zb,"emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0":Qe,"emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1":Wt,"emscripten_bind_btDefaultMotionState___destroy___0":_,"emscripten_bind_btWheelInfo_btWheelInfo_1":Vt,"emscripten_bind_btWheelInfo_getSuspensionRestLength_0":St,"emscripten_bind_btWheelInfo_updateWheel_2":Rt,"emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0":Qt,"emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1":Ot,"emscripten_bind_btWheelInfo_get_m_frictionSlip_0":Pu,"emscripten_bind_btWheelInfo_set_m_frictionSlip_1":Nt,"emscripten_bind_btWheelInfo_get_m_engineForce_0":Mt,"emscripten_bind_btWheelInfo_set_m_engineForce_1":Lt,"emscripten_bind_btWheelInfo_get_m_rollInfluence_0":Kt,"emscripten_bind_btWheelInfo_set_m_rollInfluence_1":Jt,"emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0":It,"emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1":Ht,"emscripten_bind_btWheelInfo_get_m_wheelsRadius_0":Gt,"emscripten_bind_btWheelInfo_set_m_wheelsRadius_1":Ft,"emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0":Et,"emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1":Dt,"emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0":vu,"emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1":Ct,"emscripten_bind_btWheelInfo_get_m_steering_0":du,"emscripten_bind_btWheelInfo_set_m_steering_1":Bt,"emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0":At,"emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1":zt,"emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0":yt,"emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1":xt,"emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0":wt,"emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1":vt,"emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0":st,"emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1":rt,"emscripten_bind_btWheelInfo_get_m_raycastInfo_0":Ha,"emscripten_bind_btWheelInfo_set_m_raycastInfo_1":qt,"emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0":pt,"emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1":ot,"emscripten_bind_btWheelInfo_get_m_worldTransform_0":ph,"emscripten_bind_btWheelInfo_set_m_worldTransform_1":nt,"emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0":mt,"emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1":lt,"emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0":kt,"emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1":jt,"emscripten_bind_btWheelInfo_get_m_rotation_0":it,"emscripten_bind_btWheelInfo_set_m_rotation_1":ht,"emscripten_bind_btWheelInfo_get_m_deltaRotation_0":gt,"emscripten_bind_btWheelInfo_set_m_deltaRotation_1":ft,"emscripten_bind_btWheelInfo_get_m_brake_0":et,"emscripten_bind_btWheelInfo_set_m_brake_1":dt,"emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0":ct,"emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1":bt,"emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0":at,"emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1":$s,"emscripten_bind_btWheelInfo_get_m_skidInfo_0":Zs,"emscripten_bind_btWheelInfo_set_m_skidInfo_1":Ys,"emscripten_bind_btWheelInfo___destroy___0":pa,"emscripten_bind_btVector4_btVector4_0":Xs,"emscripten_bind_btVector4_btVector4_4":Ws,"emscripten_bind_btVector4_w_0":Zf,"emscripten_bind_btVector4_setValue_4":Lh,"emscripten_bind_btVector4_length_0":zl,"emscripten_bind_btVector4_x_0":me,"emscripten_bind_btVector4_y_0":ke,"emscripten_bind_btVector4_z_0":je,"emscripten_bind_btVector4_setX_1":ie,"emscripten_bind_btVector4_setY_1":he,"emscripten_bind_btVector4_setZ_1":ge,"emscripten_bind_btVector4_normalize_0":dl,"emscripten_bind_btVector4_rotate_2":Us,"emscripten_bind_btVector4_dot_1":Pk,"emscripten_bind_btVector4_op_mul_1":Nk,"emscripten_bind_btVector4_op_add_1":Hk,"emscripten_bind_btVector4_op_sub_1":Ek,"emscripten_bind_btVector4___destroy___0":_c,"emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0":Ts,"emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0":pa,"emscripten_bind_Anchor_get_m_node_0":od,"emscripten_bind_Anchor_set_m_node_1":nd,"emscripten_bind_Anchor_get_m_local_0":Qe,"emscripten_bind_Anchor_set_m_local_1":Xi,"emscripten_bind_Anchor_get_m_body_0":Kh,"emscripten_bind_Anchor_set_m_body_1":Jh,"emscripten_bind_Anchor_get_m_influence_0":Ih,"emscripten_bind_Anchor_set_m_influence_1":Hh,"emscripten_bind_Anchor_get_m_c0_0":qh,"emscripten_bind_Anchor_set_m_c0_1":Ss,"emscripten_bind_Anchor_get_m_c1_0":Rs,"emscripten_bind_Anchor_set_m_c1_1":Qs,"emscripten_bind_Anchor_get_m_c2_0":af,"emscripten_bind_Anchor_set_m_c2_1":$e,"emscripten_bind_Anchor___destroy___0":pa,"emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0":Ha,"emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1":rd,"emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0":Jc,"emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1":Ic,"emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0":Se,"emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1":Re,"emscripten_bind_btVehicleRaycasterResult___destroy___0":pa,"emscripten_bind_btVector3Array_size_0":Ia,"emscripten_bind_btVector3Array_at_1":Ps,"emscripten_bind_btVector3Array___destroy___0":Ra,"emscripten_bind_btConstraintSolver___destroy___0":_,"emscripten_bind_btRaycastVehicle_btRaycastVehicle_3":Os,"emscripten_bind_btRaycastVehicle_applyEngineForce_2":Ns,"emscripten_bind_btRaycastVehicle_setSteeringValue_2":Ms,"emscripten_bind_btRaycastVehicle_getWheelTransformWS_1":Ls,"emscripten_bind_btRaycastVehicle_updateWheelTransform_2":Ks,"emscripten_bind_btRaycastVehicle_addWheel_7":Js,"emscripten_bind_btRaycastVehicle_getNumWheels_0":Is,"emscripten_bind_btRaycastVehicle_getRigidBody_0":Gs,"emscripten_bind_btRaycastVehicle_getWheelInfo_1":Fs,"emscripten_bind_btRaycastVehicle_setBrake_2":Es,"emscripten_bind_btRaycastVehicle_setCoordinateSystem_3":Ds,"emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0":Cs,"emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0":Bs,"emscripten_bind_btRaycastVehicle_rayCast_1":As,"emscripten_bind_btRaycastVehicle_updateVehicle_1":zs,"emscripten_bind_btRaycastVehicle_resetSuspension_0":ys,"emscripten_bind_btRaycastVehicle_getSteeringValue_1":xs,"emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1":ws,"emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2":vs,"emscripten_bind_btRaycastVehicle_setPitchControl_1":us,"emscripten_bind_btRaycastVehicle_updateSuspension_1":ts,"emscripten_bind_btRaycastVehicle_updateFriction_1":ss,"emscripten_bind_btRaycastVehicle_getRightAxis_0":rs,"emscripten_bind_btRaycastVehicle_getUpAxis_0":qs,"emscripten_bind_btRaycastVehicle_getForwardAxis_0":ps,"emscripten_bind_btRaycastVehicle_getForwardVector_0":os,"emscripten_bind_btRaycastVehicle_getUserConstraintType_0":ms,"emscripten_bind_btRaycastVehicle_setUserConstraintType_1":ks,"emscripten_bind_btRaycastVehicle_setUserConstraintId_1":js,"emscripten_bind_btRaycastVehicle_getUserConstraintId_0":is,"emscripten_bind_btRaycastVehicle_updateAction_2":tg,"emscripten_bind_btRaycastVehicle___destroy___0":_,"emscripten_bind_btCylinderShapeX_btCylinderShapeX_1":hs,"emscripten_bind_btCylinderShapeX_setMargin_1":Ea,"emscripten_bind_btCylinderShapeX_getMargin_0":Da,"emscripten_bind_btCylinderShapeX_setLocalScaling_1":oa,"emscripten_bind_btCylinderShapeX_getLocalScaling_0":na,"emscripten_bind_btCylinderShapeX_calculateLocalInertia_2":ma,"emscripten_bind_btCylinderShapeX___destroy___0":_,"emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1":gs,"emscripten_bind_btCylinderShapeZ_setMargin_1":Ea,"emscripten_bind_btCylinderShapeZ_getMargin_0":Da,"emscripten_bind_btCylinderShapeZ_setLocalScaling_1":oa,"emscripten_bind_btCylinderShapeZ_getLocalScaling_0":na,"emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2":ma,"emscripten_bind_btCylinderShapeZ___destroy___0":_,"emscripten_bind_btConvexPolyhedron_get_m_vertices_0":Qe,"emscripten_bind_btConvexPolyhedron_set_m_vertices_1":fs,"emscripten_bind_btConvexPolyhedron_get_m_faces_0":Pe,"emscripten_bind_btConvexPolyhedron_set_m_faces_1":es,"emscripten_bind_btConvexPolyhedron___destroy___0":_,"emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0":as,"emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0":_,"emscripten_bind_tAnchorArray_size_0":Ia,"emscripten_bind_tAnchorArray_at_1":$r,"emscripten_bind_tAnchorArray_clear_0":Qa,"emscripten_bind_tAnchorArray_push_back_1":Zr,"emscripten_bind_tAnchorArray_pop_back_0":Yr,"emscripten_bind_tAnchorArray___destroy___0":Ra,"emscripten_bind_RaycastInfo_get_m_contactNormalWS_0":Ha,"emscripten_bind_RaycastInfo_set_m_contactNormalWS_1":rd,"emscripten_bind_RaycastInfo_get_m_contactPointWS_0":Jc,"emscripten_bind_RaycastInfo_set_m_contactPointWS_1":Ic,"emscripten_bind_RaycastInfo_get_m_suspensionLength_0":Se,"emscripten_bind_RaycastInfo_set_m_suspensionLength_1":Re,"emscripten_bind_RaycastInfo_get_m_hardPointWS_0":Bh,"emscripten_bind_RaycastInfo_set_m_hardPointWS_1":Ah,"emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0":zh,"emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1":yh,"emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0":xh,"emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1":wh,"emscripten_bind_RaycastInfo_get_m_isInContact_0":Xr,"emscripten_bind_RaycastInfo_set_m_isInContact_1":Wr,"emscripten_bind_RaycastInfo_get_m_groundObject_0":Gh,"emscripten_bind_RaycastInfo_set_m_groundObject_1":vh,"emscripten_bind_RaycastInfo___destroy___0":pa,"emscripten_bind_btMultiSphereShape_btMultiSphereShape_3":Vr,"emscripten_bind_btMultiSphereShape_setLocalScaling_1":oa,"emscripten_bind_btMultiSphereShape_getLocalScaling_0":na,"emscripten_bind_btMultiSphereShape_calculateLocalInertia_2":ma,"emscripten_bind_btMultiSphereShape___destroy___0":_,"emscripten_bind_btSoftBody_btSoftBody_4":Ur,"emscripten_bind_btSoftBody_checkLink_2":Tr,"emscripten_bind_btSoftBody_checkFace_3":Sr,"emscripten_bind_btSoftBody_appendMaterial_0":Rr,"emscripten_bind_btSoftBody_appendNode_2":Qr,"emscripten_bind_btSoftBody_appendLink_4":Pr,"emscripten_bind_btSoftBody_appendFace_4":Or,"emscripten_bind_btSoftBody_appendTetra_5":Nr,"emscripten_bind_btSoftBody_appendAnchor_4":Mr,"emscripten_bind_btSoftBody_addForce_1":Lr,"emscripten_bind_btSoftBody_addForce_2":Kr,"emscripten_bind_btSoftBody_addAeroForceToNode_2":Jr,"emscripten_bind_btSoftBody_getTotalMass_0":Ir,"emscripten_bind_btSoftBody_setTotalMass_2":Hr,"emscripten_bind_btSoftBody_setMass_2":Gr,"emscripten_bind_btSoftBody_transform_1":Fr,"emscripten_bind_btSoftBody_translate_1":Er,"emscripten_bind_btSoftBody_rotate_1":Dr,"emscripten_bind_btSoftBody_scale_1":Cr,"emscripten_bind_btSoftBody_generateClusters_1":Br,"emscripten_bind_btSoftBody_generateClusters_2":Ar,"emscripten_bind_btSoftBody_generateBendingConstraints_2":zr,"emscripten_bind_btSoftBody_upcast_1":yr,"emscripten_bind_btSoftBody_setAnisotropicFriction_2":Gc,"emscripten_bind_btSoftBody_getCollisionShape_0":Fc,"emscripten_bind_btSoftBody_setContactProcessingThreshold_1":Vb,"emscripten_bind_btSoftBody_setActivationState_1":Dc,"emscripten_bind_btSoftBody_forceActivationState_1":Cc,"emscripten_bind_btSoftBody_activate_0":Bc,"emscripten_bind_btSoftBody_activate_1":Ac,"emscripten_bind_btSoftBody_isActive_0":zc,"emscripten_bind_btSoftBody_isKinematicObject_0":yc,"emscripten_bind_btSoftBody_isStaticObject_0":xc,"emscripten_bind_btSoftBody_isStaticOrKinematicObject_0":wc,"emscripten_bind_btSoftBody_getRestitution_0":uc,"emscripten_bind_btSoftBody_getFriction_0":tc,"emscripten_bind_btSoftBody_getRollingFriction_0":sc,"emscripten_bind_btSoftBody_setRestitution_1":qc,"emscripten_bind_btSoftBody_setFriction_1":pc,"emscripten_bind_btSoftBody_setRollingFriction_1":oc,"emscripten_bind_btSoftBody_getWorldTransform_0":Tb,"emscripten_bind_btSoftBody_getCollisionFlags_0":nc,"emscripten_bind_btSoftBody_setCollisionFlags_1":mc,"emscripten_bind_btSoftBody_setWorldTransform_1":lc,"emscripten_bind_btSoftBody_setCollisionShape_1":zb,"emscripten_bind_btSoftBody_setCcdMotionThreshold_1":kc,"emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1":jc,"emscripten_bind_btSoftBody_getUserIndex_0":Pa,"emscripten_bind_btSoftBody_setUserIndex_1":Oa,"emscripten_bind_btSoftBody_getUserPointer_0":Pa,"emscripten_bind_btSoftBody_setUserPointer_1":Oa,"emscripten_bind_btSoftBody_getBroadphaseHandle_0":Rb,"emscripten_bind_btSoftBody_get_m_cfg_0":wr,"emscripten_bind_btSoftBody_set_m_cfg_1":vr,"emscripten_bind_btSoftBody_get_m_nodes_0":tr,"emscripten_bind_btSoftBody_set_m_nodes_1":sr,"emscripten_bind_btSoftBody_get_m_faces_0":pr,"emscripten_bind_btSoftBody_set_m_faces_1":or,"emscripten_bind_btSoftBody_get_m_materials_0":lr,"emscripten_bind_btSoftBody_set_m_materials_1":kr,"emscripten_bind_btSoftBody_get_m_anchors_0":jr,"emscripten_bind_btSoftBody_set_m_anchors_1":ir,"emscripten_bind_btSoftBody___destroy___0":ic,"emscripten_bind_btIntArray_size_0":Ia,"emscripten_bind_btIntArray_at_1":pd,"emscripten_bind_btIntArray___destroy___0":Ra,"emscripten_bind_Config_get_kVCF_0":Ua,"emscripten_bind_Config_set_kVCF_1":Ta,"emscripten_bind_Config_get_kDP_0":Nc,"emscripten_bind_Config_set_kDP_1":Mc,"emscripten_bind_Config_get_kDG_0":Lc,"emscripten_bind_Config_set_kDG_1":Kc,"emscripten_bind_Config_get_kLF_0":lh,"emscripten_bind_Config_set_kLF_1":Oh,"emscripten_bind_Config_get_kPR_0":Nh,"emscripten_bind_Config_set_kPR_1":Mh,"emscripten_bind_Config_get_kVC_0":Ih,"emscripten_bind_Config_set_kVC_1":Hh,"emscripten_bind_Config_get_kDF_0":ri,"emscripten_bind_Config_set_kDF_1":qi,"emscripten_bind_Config_get_kMT_0":Se,"emscripten_bind_Config_set_kMT_1":Re,"emscripten_bind_Config_get_kCHR_0":df,"emscripten_bind_Config_set_kCHR_1":cf,"emscripten_bind_Config_get_kKHR_0":uh,"emscripten_bind_Config_set_kKHR_1":th,"emscripten_bind_Config_get_kSHR_0":fr,"emscripten_bind_Config_set_kSHR_1":er,"emscripten_bind_Config_get_kAHR_0":ni,"emscripten_bind_Config_set_kAHR_1":mi,"emscripten_bind_Config_get_kSRHR_CL_0":li,"emscripten_bind_Config_set_kSRHR_CL_1":ki,"emscripten_bind_Config_get_kSKHR_CL_0":ji,"emscripten_bind_Config_set_kSKHR_CL_1":ii,"emscripten_bind_Config_get_kSSHR_CL_0":hi,"emscripten_bind_Config_set_kSSHR_CL_1":gi,"emscripten_bind_Config_get_kSR_SPLT_CL_0":fi,"emscripten_bind_Config_set_kSR_SPLT_CL_1":ei,"emscripten_bind_Config_get_kSK_SPLT_CL_0":di,"emscripten_bind_Config_set_kSK_SPLT_CL_1":ci,"emscripten_bind_Config_get_kSS_SPLT_CL_0":bi,"emscripten_bind_Config_set_kSS_SPLT_CL_1":ai,"emscripten_bind_Config_get_maxvolume_0":$h,"emscripten_bind_Config_set_maxvolume_1":_h,"emscripten_bind_Config_get_timescale_0":dr,"emscripten_bind_Config_set_timescale_1":cr,"emscripten_bind_Config_get_viterations_0":ls,"emscripten_bind_Config_set_viterations_1":br,"emscripten_bind_Config_get_piterations_0":Gh,"emscripten_bind_Config_set_piterations_1":vh,"emscripten_bind_Config_get_diterations_0":ar,"emscripten_bind_Config_set_diterations_1":$q,"emscripten_bind_Config_get_citerations_0":_q,"emscripten_bind_Config_set_citerations_1":Zq,"emscripten_bind_Config_get_collisions_0":Yq,"emscripten_bind_Config_set_collisions_1":Xq,"emscripten_bind_Config___destroy___0":Wq,"emscripten_bind_Node_get_m_x_0":nl,"emscripten_bind_Node_set_m_x_1":sh,"emscripten_bind_Node_get_m_q_0":Pe,"emscripten_bind_Node_set_m_q_1":rh,"emscripten_bind_Node_get_m_v_0":Ze,"emscripten_bind_Node_set_m_v_1":Ye,"emscripten_bind_Node_get_m_f_0":Xh,"emscripten_bind_Node_set_m_f_1":Wh,"emscripten_bind_Node_get_m_n_0":Vh,"emscripten_bind_Node_set_m_n_1":Uq,"emscripten_bind_Node_get_m_im_0":Tq,"emscripten_bind_Node_set_m_im_1":Sq,"emscripten_bind_Node_get_m_area_0":af,"emscripten_bind_Node_set_m_area_1":$e,"emscripten_bind_Node___destroy___0":pa,"emscripten_bind_btGhostPairCallback_btGhostPairCallback_0":Rq,"emscripten_bind_btGhostPairCallback___destroy___0":_,"emscripten_bind_btOverlappingPairCallback___destroy___0":_,"emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3":Pq,"emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4":Oq,"emscripten_bind_btKinematicCharacterController_setUpAxis_1":Nq,"emscripten_bind_btKinematicCharacterController_setWalkDirection_1":Sc,"emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2":Lq,"emscripten_bind_btKinematicCharacterController_warp_1":Kq,"emscripten_bind_btKinematicCharacterController_preStep_1":Jq,"emscripten_bind_btKinematicCharacterController_playerStep_2":Iq,"emscripten_bind_btKinematicCharacterController_setFallSpeed_1":Hq,"emscripten_bind_btKinematicCharacterController_setJumpSpeed_1":Gq,"emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1":Fq,"emscripten_bind_btKinematicCharacterController_canJump_0":Eq,"emscripten_bind_btKinematicCharacterController_jump_0":Dq,"emscripten_bind_btKinematicCharacterController_setGravity_1":Cq,"emscripten_bind_btKinematicCharacterController_getGravity_0":Bq,"emscripten_bind_btKinematicCharacterController_setMaxSlope_1":Aq,"emscripten_bind_btKinematicCharacterController_getMaxSlope_0":zq,"emscripten_bind_btKinematicCharacterController_getGhostObject_0":yq,"emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1":xq,"emscripten_bind_btKinematicCharacterController_onGround_0":wq,"emscripten_bind_btKinematicCharacterController_setUpInterpolate_1":vq,"emscripten_bind_btKinematicCharacterController_updateAction_2":tg,"emscripten_bind_btKinematicCharacterController___destroy___0":_,"emscripten_bind_btSoftBodyArray_size_0":Ia,"emscripten_bind_btSoftBodyArray_at_1":pd,"emscripten_bind_btSoftBodyArray___destroy___0":Ra,"emscripten_bind_btFaceArray_size_0":Ia,"emscripten_bind_btFaceArray_at_1":uq,"emscripten_bind_btFaceArray___destroy___0":tq,"emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2":qq,"emscripten_bind_btStaticPlaneShape_setLocalScaling_1":oa,"emscripten_bind_btStaticPlaneShape_getLocalScaling_0":na,"emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2":ma,"emscripten_bind_btStaticPlaneShape___destroy___0":_,"emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1":Rf,"emscripten_bind_btOverlappingPairCache_getNumOverlappingPairs_0":pq,"emscripten_bind_btOverlappingPairCache___destroy___0":_,"emscripten_bind_btIndexedMesh_get_m_numTriangles_0":od,"emscripten_bind_btIndexedMesh_set_m_numTriangles_1":nd,"emscripten_bind_btIndexedMesh___destroy___0":_c,"emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5":oq,"emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3":nq,"emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1":mq,"emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1":ne,"emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0":lq,"emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0":kq,"emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0":xd,"emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3":qd,"emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0":md,"emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0":kd,"emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1":xj,"emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2":vj,"emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3":te,"emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0":fe,"emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5":ce,"emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3":_d,"emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2":Ud,"emscripten_bind_btSoftRigidDynamicsWorld_updateSingleAabb_1":Md,"emscripten_bind_btSoftRigidDynamicsWorld_setDebugDrawer_1":Sc,"emscripten_bind_btSoftRigidDynamicsWorld_getDebugDrawer_0":Fd,"emscripten_bind_btSoftRigidDynamicsWorld_debugDrawWorld_0":Cd,"emscripten_bind_btSoftRigidDynamicsWorld_debugDrawObject_3":wd,"emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1":jk,"emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0":jq,"emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1":gk,"emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3":dk,"emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1":ak,"emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1":Zj,"emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2":Xj,"emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1":Rf,"emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1":Rj,"emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2":Pj,"emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3":Lj,"emscripten_bind_btSoftRigidDynamicsWorld_setContactAddedCallback_1":Ij,"emscripten_bind_btSoftRigidDynamicsWorld_setContactProcessedCallback_1":Ej,"emscripten_bind_btSoftRigidDynamicsWorld_setContactDestroyedCallback_1":zj,"emscripten_bind_btSoftRigidDynamicsWorld_addAction_1":jd,"emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1":Ne,"emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0":Me,"emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_1":Ke,"emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_2":Ie,"emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_3":He,"emscripten_bind_btSoftRigidDynamicsWorld___destroy___0":_,"emscripten_bind_btFixedConstraint_btFixedConstraint_4":iq,"emscripten_bind_btFixedConstraint_enableFeedback_1":kb,"emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btFixedConstraint_getParam_2":hb,"emscripten_bind_btFixedConstraint_setParam_3":gb,"emscripten_bind_btFixedConstraint___destroy___0":_,"emscripten_bind_btTransform_btTransform_0":hq,"emscripten_bind_btTransform_btTransform_2":gq,"emscripten_bind_btTransform_setIdentity_0":dq,"emscripten_bind_btTransform_setOrigin_1":bq,"emscripten_bind_btTransform_setRotation_1":aq,"emscripten_bind_btTransform_getOrigin_0":Gd,"emscripten_bind_btTransform_getRotation_0":_p,"emscripten_bind_btTransform_getBasis_0":Yp,"emscripten_bind_btTransform_setFromOpenGLMatrix_1":Xp,"emscripten_bind_btTransform_inverse_0":Up,"emscripten_bind_btTransform_op_mul_1":Sp,"emscripten_bind_btTransform___destroy___0":pa,"emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2":Pp,"emscripten_bind_ClosestRayResultCallback_hasHit_0":wf,"emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0":_e,"emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1":mh,"emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0":Bh,"emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1":Ah,"emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0":zh,"emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1":yh,"emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0":xh,"emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1":wh,"emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0":vf,"emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1":uf,"emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0":tf,"emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1":sf,"emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0":Ua,"emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1":Ta,"emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0":zd,"emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1":yd,"emscripten_bind_ClosestRayResultCallback___destroy___0":_,"emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0":Np,"emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1":Mp,"emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0":_,"emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0":Lp,"emscripten_bind_ConcreteContactResultCallback_addSingleResult_7":Gi,"emscripten_bind_ConcreteContactResultCallback___destroy___0":_,"emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2":Jp,"emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3":Ip,"emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1":oa,"emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0":na,"emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2":ma,"emscripten_bind_btBvhTriangleMeshShape___destroy___0":_,"emscripten_bind_btConstCollisionObjectArray_size_0":Ia,"emscripten_bind_btConstCollisionObjectArray_at_1":pd,"emscripten_bind_btConstCollisionObjectArray___destroy___0":Ra,"emscripten_bind_btSliderConstraint_btSliderConstraint_3":Hp,"emscripten_bind_btSliderConstraint_btSliderConstraint_5":Gp,"emscripten_bind_btSliderConstraint_setLowerLinLimit_1":Vb,"emscripten_bind_btSliderConstraint_setUpperLinLimit_1":Fp,"emscripten_bind_btSliderConstraint_setLowerAngLimit_1":Ep,"emscripten_bind_btSliderConstraint_setUpperAngLimit_1":Cp,"emscripten_bind_btSliderConstraint_enableFeedback_1":kb,"emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btSliderConstraint_getParam_2":hb,"emscripten_bind_btSliderConstraint_setParam_3":gb,"emscripten_bind_btSliderConstraint___destroy___0":_,"emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0":Ap,"emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2":Gc,"emscripten_bind_btPairCachingGhostObject_getCollisionShape_0":Fc,"emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1":Vb,"emscripten_bind_btPairCachingGhostObject_setActivationState_1":Dc,"emscripten_bind_btPairCachingGhostObject_forceActivationState_1":Cc,"emscripten_bind_btPairCachingGhostObject_activate_0":Bc,"emscripten_bind_btPairCachingGhostObject_activate_1":Ac,"emscripten_bind_btPairCachingGhostObject_isActive_0":zc,"emscripten_bind_btPairCachingGhostObject_isKinematicObject_0":yc,"emscripten_bind_btPairCachingGhostObject_isStaticObject_0":xc,"emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0":wc,"emscripten_bind_btPairCachingGhostObject_getRestitution_0":uc,"emscripten_bind_btPairCachingGhostObject_getFriction_0":tc,"emscripten_bind_btPairCachingGhostObject_getRollingFriction_0":sc,"emscripten_bind_btPairCachingGhostObject_setRestitution_1":qc,"emscripten_bind_btPairCachingGhostObject_setFriction_1":pc,"emscripten_bind_btPairCachingGhostObject_setRollingFriction_1":oc,"emscripten_bind_btPairCachingGhostObject_getWorldTransform_0":Tb,"emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0":nc,"emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1":mc,"emscripten_bind_btPairCachingGhostObject_setWorldTransform_1":lc,"emscripten_bind_btPairCachingGhostObject_setCollisionShape_1":zb,"emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1":kc,"emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1":jc,"emscripten_bind_btPairCachingGhostObject_getUserIndex_0":Pa,"emscripten_bind_btPairCachingGhostObject_setUserIndex_1":Oa,"emscripten_bind_btPairCachingGhostObject_getUserPointer_0":Pa,"emscripten_bind_btPairCachingGhostObject_setUserPointer_1":Oa,"emscripten_bind_btPairCachingGhostObject_getBroadphaseHandle_0":Rb,"emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0":Eg,"emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1":Il,"emscripten_bind_btPairCachingGhostObject___destroy___0":ic,"emscripten_bind_btManifoldPoint_getPositionWorldOnA_0":Gd,"emscripten_bind_btManifoldPoint_getPositionWorldOnB_0":zp,"emscripten_bind_btManifoldPoint_getAppliedImpulse_0":yp,"emscripten_bind_btManifoldPoint_getDistance_0":xp,"emscripten_bind_btManifoldPoint_get_m_localPointA_0":Ha,"emscripten_bind_btManifoldPoint_set_m_localPointA_1":rd,"emscripten_bind_btManifoldPoint_get_m_localPointB_0":Jc,"emscripten_bind_btManifoldPoint_set_m_localPointB_1":Ic,"emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0":pi,"emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1":oi,"emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0":VA,"emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1":Le,"emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0":wp,"emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1":vp,"emscripten_bind_btManifoldPoint_get_m_userPersistentData_0":up,"emscripten_bind_btManifoldPoint_set_m_userPersistentData_1":tp,"emscripten_bind_btManifoldPoint___destroy___0":pa,"emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2":sp,"emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4":rp,"emscripten_bind_btPoint2PointConstraint_setPivotA_1":qp,"emscripten_bind_btPoint2PointConstraint_setPivotB_1":op,"emscripten_bind_btPoint2PointConstraint_getPivotInA_0":mp,"emscripten_bind_btPoint2PointConstraint_getPivotInB_0":lp,"emscripten_bind_btPoint2PointConstraint_enableFeedback_1":kb,"emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btPoint2PointConstraint_getParam_2":hb,"emscripten_bind_btPoint2PointConstraint_setParam_3":gb,"emscripten_bind_btPoint2PointConstraint_get_m_setting_0":$v,"emscripten_bind_btPoint2PointConstraint_set_m_setting_1":kp,"emscripten_bind_btPoint2PointConstraint___destroy___0":_,"emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0":jp,"emscripten_bind_btSoftBodyHelpers_CreateRope_5":ip,"emscripten_bind_btSoftBodyHelpers_CreatePatch_9":hp,"emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10":gp,"emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4":fp,"emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5":ep,"emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4":dp,"emscripten_bind_btSoftBodyHelpers___destroy___0":pa,"emscripten_bind_btBroadphaseProxy_get_m_collisionFilterGroup_0":cp,"emscripten_bind_btBroadphaseProxy_set_m_collisionFilterGroup_1":bp,"emscripten_bind_btBroadphaseProxy_get_m_collisionFilterMask_0":ap,"emscripten_bind_btBroadphaseProxy_set_m_collisionFilterMask_1":$o,"emscripten_bind_btBroadphaseProxy___destroy___0":_c,"emscripten_bind_tNodeArray_size_0":Ia,"emscripten_bind_tNodeArray_at_1":_o,"emscripten_bind_tNodeArray___destroy___0":Ra,"emscripten_bind_btBoxShape_btBoxShape_1":Zo,"emscripten_bind_btBoxShape_setMargin_1":Ea,"emscripten_bind_btBoxShape_getMargin_0":Da,"emscripten_bind_btBoxShape_setLocalScaling_1":oa,"emscripten_bind_btBoxShape_getLocalScaling_0":na,"emscripten_bind_btBoxShape_calculateLocalInertia_2":ma,"emscripten_bind_btBoxShape___destroy___0":_,"emscripten_bind_btFace_get_m_indices_0":Ha,"emscripten_bind_btFace_set_m_indices_1":Yo,"emscripten_bind_btFace_get_m_plane_1":Xo,"emscripten_bind_btFace_set_m_plane_2":Wo,"emscripten_bind_btFace___destroy___0":Vo,"emscripten_bind_DebugDrawer_DebugDrawer_0":Uo,"emscripten_bind_DebugDrawer_drawLine_3":Ug,"emscripten_bind_DebugDrawer_drawContactPoint_5":Sg,"emscripten_bind_DebugDrawer_reportErrorWarning_1":Qg,"emscripten_bind_DebugDrawer_draw3dText_2":Pg,"emscripten_bind_DebugDrawer_setDebugMode_1":Mg,"emscripten_bind_DebugDrawer_getDebugMode_0":Ig,"emscripten_bind_DebugDrawer___destroy___0":_,"emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2":So,"emscripten_bind_btCapsuleShapeX_setMargin_1":Ea,"emscripten_bind_btCapsuleShapeX_getMargin_0":Da,"emscripten_bind_btCapsuleShapeX_getUpAxis_0":hd,"emscripten_bind_btCapsuleShapeX_getRadius_0":Fe,"emscripten_bind_btCapsuleShapeX_getHalfHeight_0":Ee,"emscripten_bind_btCapsuleShapeX_setLocalScaling_1":oa,"emscripten_bind_btCapsuleShapeX_getLocalScaling_0":na,"emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2":ma,"emscripten_bind_btCapsuleShapeX___destroy___0":_,"emscripten_bind_btQuaternion_btQuaternion_4":Ro,"emscripten_bind_btQuaternion_setValue_4":Lh,"emscripten_bind_btQuaternion_setEulerZYX_3":Qo,"emscripten_bind_btQuaternion_setRotation_2":Oo,"emscripten_bind_btQuaternion_normalize_0":Mo,"emscripten_bind_btQuaternion_length2_0":Ko,"emscripten_bind_btQuaternion_length_0":Jo,"emscripten_bind_btQuaternion_dot_1":Io,"emscripten_bind_btQuaternion_normalized_0":Ho,"emscripten_bind_btQuaternion_getAxis_0":Eo,"emscripten_bind_btQuaternion_inverse_0":Co,"emscripten_bind_btQuaternion_getAngle_0":Ao,"emscripten_bind_btQuaternion_getAngleShortestPath_0":yo,"emscripten_bind_btQuaternion_angle_1":wo,"emscripten_bind_btQuaternion_angleShortestPath_1":uo,"emscripten_bind_btQuaternion_op_add_1":ro,"emscripten_bind_btQuaternion_op_sub_1":oo,"emscripten_bind_btQuaternion_op_mul_1":mo,"emscripten_bind_btQuaternion_op_mulq_1":lo,"emscripten_bind_btQuaternion_op_div_1":jo,"emscripten_bind_btQuaternion_x_0":me,"emscripten_bind_btQuaternion_y_0":ke,"emscripten_bind_btQuaternion_z_0":je,"emscripten_bind_btQuaternion_w_0":Zf,"emscripten_bind_btQuaternion_setX_1":ie,"emscripten_bind_btQuaternion_setY_1":he,"emscripten_bind_btQuaternion_setZ_1":ge,"emscripten_bind_btQuaternion_setW_1":sk,"emscripten_bind_btQuaternion___destroy___0":pa,"emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2":io,"emscripten_bind_btCapsuleShapeZ_setMargin_1":Ea,"emscripten_bind_btCapsuleShapeZ_getMargin_0":Da,"emscripten_bind_btCapsuleShapeZ_getUpAxis_0":hd,"emscripten_bind_btCapsuleShapeZ_getRadius_0":Fe,"emscripten_bind_btCapsuleShapeZ_getHalfHeight_0":Ee,"emscripten_bind_btCapsuleShapeZ_setLocalScaling_1":oa,"emscripten_bind_btCapsuleShapeZ_getLocalScaling_0":na,"emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2":ma,"emscripten_bind_btCapsuleShapeZ___destroy___0":_,"emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0":ho,"emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1":go,"emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0":fo,"emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1":eo,"emscripten_bind_btContactSolverInfo_get_m_numIterations_0":Kh,"emscripten_bind_btContactSolverInfo_set_m_numIterations_1":Jh,"emscripten_bind_btContactSolverInfo___destroy___0":pa,"emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3":co,"emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5":bo,"emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2":ao,"emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2":$n,"emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2":_n,"emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_0":Zn,"emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_1":Yn,"emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_2":Xn,"emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1":pj,"emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1":mj,"emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1":hj,"emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1":dj,"emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0":Gd,"emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1":kb,"emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0":jb,"emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1":ib,"emscripten_bind_btGeneric6DofSpringConstraint_getParam_2":hb,"emscripten_bind_btGeneric6DofSpringConstraint_setParam_3":gb,"emscripten_bind_btGeneric6DofSpringConstraint___destroy___0":_,"emscripten_bind_btSphereShape_btSphereShape_1":Wn,"emscripten_bind_btSphereShape_setMargin_1":Ea,"emscripten_bind_btSphereShape_getMargin_0":Da,"emscripten_bind_btSphereShape_setLocalScaling_1":oa,"emscripten_bind_btSphereShape_getLocalScaling_0":na,"emscripten_bind_btSphereShape_calculateLocalInertia_2":ma,"emscripten_bind_btSphereShape___destroy___0":_,"emscripten_bind_Face_get_m_n_1":Un,"emscripten_bind_Face_set_m_n_2":Tn,"emscripten_bind_Face_get_m_normal_0":_e,"emscripten_bind_Face_set_m_normal_1":mh,"emscripten_bind_Face_get_m_ra_0":df,"emscripten_bind_Face_set_m_ra_1":cf,"emscripten_bind_Face___destroy___0":pa,"emscripten_bind_tFaceArray_size_0":Ia,"emscripten_bind_tFaceArray_at_1":Sn,"emscripten_bind_tFaceArray___destroy___0":Ra,"emscripten_bind_LocalConvexResult_LocalConvexResult_5":Rn,"emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0":od,"emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1":nd,"emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0":zg,"emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1":ef,"emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0":nl,"emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1":sh,"emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0":Pe,"emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1":rh,"emscripten_bind_LocalConvexResult_get_m_hitFraction_0":uh,"emscripten_bind_LocalConvexResult_set_m_hitFraction_1":th,"emscripten_bind_LocalConvexResult___destroy___0":pa,"emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP":hh,"emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP":gh,"emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM":fh,"emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM":eh,"emscripten_enum_PHY_ScalarType_PHY_FLOAT":Pn,"emscripten_enum_PHY_ScalarType_PHY_DOUBLE":hh,"emscripten_enum_PHY_ScalarType_PHY_INTEGER":gh,"emscripten_enum_PHY_ScalarType_PHY_SHORT":fh,"emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88":eh,"emscripten_enum_PHY_ScalarType_PHY_UCHAR":On,"malloc":ff,"free":ba,"__growWasmMemory":Ox,"dynCall_vi":Mx,"dynCall_v":Lx}}for(var P=new Uint8Array(123),Q=25;Q>=0;--Q){P[48+Q]=52+Q;P[65+Q]=Q;P[97+Q]=26+Q}P[43]=62;P[47]=63;function R(uint8Array,offset,b64){var S,T,Q=0,U=offset,V=b64.length,W=offset+(V*3>>2)-(b64[V-2]=="=")-(b64[V-1]=="=");for(;Q<V;Q+=4){S=P[b64.charCodeAt(Q+1)];T=P[b64.charCodeAt(Q+2)];uint8Array[U++]=P[b64.charCodeAt(Q)]<<2|S>>4;if(U<W)uint8Array[U++]=S<<4|T>>2;if(U<W)uint8Array[U++]=T<<6|P[b64.charCodeAt(Q+3)]}}var X=new Uint8Array(wasmMemory.buffer);R(X,1024,"");R(X,15022,"gD8AAIC/");R(X,15054,"");R(X,25827,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIz2w9JP9sPSb/kyxZA5MsWwAAAAAAAAACA2w9JQNsPScAAAIA/AADAPwAAAADcz9E1AAAAAADAFT9fX2N4YV9ndWFyZF9hY3F1aXJlIGRldGVjdGVkIHJlY3Vyc2l2ZSBpbml0aWFsaXphdGlvbgBQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQBTdDl0eXBlX2luZm8AAAAATGYAAMxlAABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAB0ZgAA5GUAANxlAABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAB0ZgAAFGYAAAhmAAAAAAAAOGYAAJIDAACTAwAAlAMAAJUDAACWAwAAlwMAAJgDAACZAwAAAAAAALxmAACSAwAAmgMAAJQDAACVAwAAlgMAAJsDAACcAwAAnQMAAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAAB0ZgAAlGYAADhmAAAAAAAAGGcAAJIDAACeAwAAlAMAAJUDAACWAwAAnwMAAKADAAChAwAATjEwX19jeHhhYml2MTIxX192bWlfY2xhc3NfdHlwZV9pbmZvRQAAAHRmAADwZgAAOGY=");R(X,26404,"CtejPAEBAAAAAABAAACAP2h4AACOAwAAjwMAAJADAACRAwAA/////w==");return j({"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"Math":Math},asmLibraryArg,wasmMemory.buffer)}


// EMSCRIPTEN_END_ASM




)(Aa,Ba,Ca)}}function Da(){return{then:function(a){a({instance:new ya})}}}var Ea=Error,WebAssembly={};ua=[];"object"!==typeof WebAssembly&&ta("no native wasm support detected");
var Ba,Ca=new function(a){var c=Array(a.initial);c.grow=function(){930<=c.length&&qa("Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.");c.push(null)};c.set=function(d,e){c[d]=e};c.get=function(d){return c[d]};return c}({initial:930,maximum:930,element:"anyfunc"}),Fa=!1;function assert(a,c){a||qa("Assertion failed: "+c)}var Ga="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0,Ha,Ia,Ja,Ka,La,Ma,wa=b.INITIAL_MEMORY||67108864;
if(Ba=b.wasmMemory?b.wasmMemory:new va)Ha=Ba.buffer;wa=Ha.byteLength;var Na=Ha;Ha=Na;b.HEAP8=Ia=new Int8Array(Na);b.HEAP16=new Int16Array(Na);b.HEAP32=Ka=new Int32Array(Na);b.HEAPU8=Ja=new Uint8Array(Na);b.HEAPU16=new Uint16Array(Na);b.HEAPU32=new Uint32Array(Na);b.HEAPF32=La=new Float32Array(Na);b.HEAPF64=Ma=new Float64Array(Na);Ka[7848]=5274432;
function Oa(a){for(;0<a.length;){var c=a.shift();if("function"==typeof c)c(b);else{var d=c.la;"number"===typeof d?void 0===c.N?b.dynCall_v(d):b.dynCall_vi(d,c.N):d(void 0===c.N?null:c.N)}}}var Pa=[],Qa=[],Ra=[],Sa=[],Ta=!1;function Ua(){var a=b.preRun.shift();Pa.unshift(a)}Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(a,c){var d=a&65535,e=c&65535;return d*e+((a>>>16)*e+d*(c>>>16)<<16)|0});if(!Math.fround){var Va=new Float32Array(1);Math.fround=function(a){Va[0]=a;return Va[0]}}
Math.clz32||(Math.clz32=function(a){var c=32,d=a>>16;d&&(c-=16,a=d);if(d=a>>8)c-=8,a=d;if(d=a>>4)c-=4,a=d;if(d=a>>2)c-=2,a=d;return a>>1?c-2:c-a});Math.trunc||(Math.trunc=function(a){return 0>a?Math.ceil(a):Math.floor(a)});var Wa=0,Xa=null,Ya=null;b.preloadedImages={};b.preloadedAudios={};function qa(a){if(b.onAbort)b.onAbort(a);a+="";sa(a);ta(a);Fa=!0;throw new Ea("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");}
function Za(a,c){return String.prototype.startsWith?a.startsWith(c):0===a.indexOf(c)}var $a="data:application/octet-stream;base64,",ab="";if(!Za(ab,$a)){var bb=ab;ab=b.locateFile?b.locateFile(bb,ja):ja+bb}function cb(){try{if(ua)return new Uint8Array(ua);var a=pa(ab);if(a)return a;if(la)return la(ab);throw"both async and sync fetching of the wasm failed";}catch(c){qa(c)}}
function db(){return ua||!ea&&!fa||"function"!==typeof fetch||Za(ab,"file://")?new Promise(function(a){a(cb())}):fetch(ab,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+ab+"'";return a.arrayBuffer()}).catch(function(){return cb()})}
var eb={1960:function(a,c,d,e,g,n,D,Y){a=b.getCache(b.ConcreteContactResultCallback)[a];if(!a.hasOwnProperty("addSingleResult"))throw"a JSImplementation must implement all functions, you forgot ConcreteContactResultCallback::addSingleResult.";return a.addSingleResult(c,d,e,g,n,D,Y)},2520:function(a,c,d,e){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("drawLine"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::drawLine.";a.drawLine(c,d,e)},2745:function(a,c,d,e,
g,n){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("drawContactPoint"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::drawContactPoint.";a.drawContactPoint(c,d,e,g,n)},3002:function(a,c){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("reportErrorWarning"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::reportErrorWarning.";a.reportErrorWarning(c)},3249:function(a,c,d){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("draw3dText"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::draw3dText.";
a.draw3dText(c,d)},3476:function(a,c){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("setDebugMode"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::setDebugMode.";a.setDebugMode(c)},3705:function(a){a=b.getCache(b.DebugDrawer)[a];if(!a.hasOwnProperty("getDebugMode"))throw"a JSImplementation must implement all functions, you forgot DebugDrawer::getDebugMode.";return a.getDebugMode()}};Qa.push({la:function(){fb()}});var gb=[];
function hb(a,c){gb.length=0;var d;for(c>>=2;d=Ja[a++];)gb.push(105>d?Ma[++c>>1]:Ka[c]),++c;return gb}var ib=!1;function ra(a){for(var c=[],d=0;d<a.length;d++){var e=a[d];255<e&&(ib&&assert(!1,"Character code "+e+" ("+String.fromCharCode(e)+")  at offset "+d+" not in 0x00-0xFF."),e&=255);c.push(String.fromCharCode(e))}return c.join("")}
var jb="function"===typeof atob?atob:function(a){var c="",d=0;a=a.replace(/[^A-Za-z0-9\+\/=]/g,"");do{var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var g="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var D="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));e=e<<2|g>>4;
g=(g&15)<<4|n>>2;var Y=(n&3)<<6|D;c+=String.fromCharCode(e);64!==n&&(c+=String.fromCharCode(g));64!==D&&(c+=String.fromCharCode(Y))}while(d<a.length);return c};
function pa(a){if(Za(a,$a)){a=a.slice($a.length);if("boolean"===typeof ha&&ha){try{var c=Buffer.from(a,"base64")}catch(n){c=new Buffer(a,"base64")}var d=new Uint8Array(c.buffer,c.byteOffset,c.byteLength)}else try{var e=jb(a),g=new Uint8Array(e.length);for(c=0;c<e.length;++c)g[c]=e.charCodeAt(c);d=g}catch(n){throw Error("Converting base64 string to bytes failed.");}return d}}
var Aa={abort:function(){qa()},emscripten_asm_const_dii:function(a,c,d){c=hb(c,d);return eb[a].apply(null,c)},emscripten_asm_const_iii:function(a,c,d){c=hb(c,d);return eb[a].apply(null,c)},emscripten_memcpy_big:Uint8Array.prototype.copyWithin?function(a,c,d){Ja.copyWithin(a,c,c+d)}:function(a,c,d){Ja.set(Ja.subarray(c,c+d),a)},emscripten_resize_heap:function(){qa("OOM")},gettimeofday:function(a){var c=Date.now();Ka[a>>2]=c/1E3|0;Ka[a+4>>2]=c%1E3*1E3|0;return 0},memory:Ba,table:Ca};
(function(){function a(g){b.asm=g.exports;Wa--;b.monitorRunDependencies&&b.monitorRunDependencies(Wa);0==Wa&&(null!==Xa&&(clearInterval(Xa),Xa=null),Ya&&(g=Ya,Ya=null,g()))}function c(g){a(g.instance)}function d(g){return db().then(function(){return Da()}).then(g,function(n){ta("failed to asynchronously prepare wasm: "+n);qa(n)})}var e={env:Aa,wasi_snapshot_preview1:Aa};Wa++;b.monitorRunDependencies&&b.monitorRunDependencies(Wa);if(b.instantiateWasm)try{return b.instantiateWasm(e,a)}catch(g){return ta("Module.instantiateWasm callback failed with error: "+
g),!1}(function(){if(ua||"function"!==typeof WebAssembly.instantiateStreaming||Za(ab,$a)||Za(ab,"file://")||"function"!==typeof fetch)return d(c);fetch(ab,{credentials:"same-origin"}).then(function(g){return WebAssembly.instantiateStreaming(g,e).then(c,function(n){ta("wasm streaming compile failed: "+n);ta("falling back to ArrayBuffer instantiation");return d(c)})})})();return{}})();var fb=b.___wasm_call_ctors=function(){return(fb=b.___wasm_call_ctors=b.asm.__wasm_call_ctors).apply(null,arguments)};
b.___em_js__array_bounds_check_error=function(){return(b.___em_js__array_bounds_check_error=b.asm.__em_js__array_bounds_check_error).apply(null,arguments)};
var kb=b._emscripten_bind_btCollisionWorld_getDispatcher_0=function(){return(kb=b._emscripten_bind_btCollisionWorld_getDispatcher_0=b.asm.emscripten_bind_btCollisionWorld_getDispatcher_0).apply(null,arguments)},lb=b._emscripten_bind_btCollisionWorld_rayTest_3=function(){return(lb=b._emscripten_bind_btCollisionWorld_rayTest_3=b.asm.emscripten_bind_btCollisionWorld_rayTest_3).apply(null,arguments)},mb=b._emscripten_bind_btCollisionWorld_getPairCache_0=function(){return(mb=b._emscripten_bind_btCollisionWorld_getPairCache_0=
b.asm.emscripten_bind_btCollisionWorld_getPairCache_0).apply(null,arguments)},nb=b._emscripten_bind_btCollisionWorld_getDispatchInfo_0=function(){return(nb=b._emscripten_bind_btCollisionWorld_getDispatchInfo_0=b.asm.emscripten_bind_btCollisionWorld_getDispatchInfo_0).apply(null,arguments)},ob=b._emscripten_bind_btCollisionWorld_addCollisionObject_1=function(){return(ob=b._emscripten_bind_btCollisionWorld_addCollisionObject_1=b.asm.emscripten_bind_btCollisionWorld_addCollisionObject_1).apply(null,
arguments)},pb=b._emscripten_bind_btCollisionWorld_addCollisionObject_2=function(){return(pb=b._emscripten_bind_btCollisionWorld_addCollisionObject_2=b.asm.emscripten_bind_btCollisionWorld_addCollisionObject_2).apply(null,arguments)},qb=b._emscripten_bind_btCollisionWorld_addCollisionObject_3=function(){return(qb=b._emscripten_bind_btCollisionWorld_addCollisionObject_3=b.asm.emscripten_bind_btCollisionWorld_addCollisionObject_3).apply(null,arguments)},rb=b._emscripten_bind_btCollisionWorld_removeCollisionObject_1=
function(){return(rb=b._emscripten_bind_btCollisionWorld_removeCollisionObject_1=b.asm.emscripten_bind_btCollisionWorld_removeCollisionObject_1).apply(null,arguments)},sb=b._emscripten_bind_btCollisionWorld_getBroadphase_0=function(){return(sb=b._emscripten_bind_btCollisionWorld_getBroadphase_0=b.asm.emscripten_bind_btCollisionWorld_getBroadphase_0).apply(null,arguments)},tb=b._emscripten_bind_btCollisionWorld_convexSweepTest_5=function(){return(tb=b._emscripten_bind_btCollisionWorld_convexSweepTest_5=
b.asm.emscripten_bind_btCollisionWorld_convexSweepTest_5).apply(null,arguments)},vb=b._emscripten_bind_btCollisionWorld_contactPairTest_3=function(){return(vb=b._emscripten_bind_btCollisionWorld_contactPairTest_3=b.asm.emscripten_bind_btCollisionWorld_contactPairTest_3).apply(null,arguments)},wb=b._emscripten_bind_btCollisionWorld_contactTest_2=function(){return(wb=b._emscripten_bind_btCollisionWorld_contactTest_2=b.asm.emscripten_bind_btCollisionWorld_contactTest_2).apply(null,arguments)},xb=b._emscripten_bind_btCollisionWorld_updateSingleAabb_1=
function(){return(xb=b._emscripten_bind_btCollisionWorld_updateSingleAabb_1=b.asm.emscripten_bind_btCollisionWorld_updateSingleAabb_1).apply(null,arguments)},yb=b._emscripten_bind_btCollisionWorld_setDebugDrawer_1=function(){return(yb=b._emscripten_bind_btCollisionWorld_setDebugDrawer_1=b.asm.emscripten_bind_btCollisionWorld_setDebugDrawer_1).apply(null,arguments)},zb=b._emscripten_bind_btCollisionWorld_getDebugDrawer_0=function(){return(zb=b._emscripten_bind_btCollisionWorld_getDebugDrawer_0=b.asm.emscripten_bind_btCollisionWorld_getDebugDrawer_0).apply(null,
arguments)},Ab=b._emscripten_bind_btCollisionWorld_debugDrawWorld_0=function(){return(Ab=b._emscripten_bind_btCollisionWorld_debugDrawWorld_0=b.asm.emscripten_bind_btCollisionWorld_debugDrawWorld_0).apply(null,arguments)},Bb=b._emscripten_bind_btCollisionWorld_debugDrawObject_3=function(){return(Bb=b._emscripten_bind_btCollisionWorld_debugDrawObject_3=b.asm.emscripten_bind_btCollisionWorld_debugDrawObject_3).apply(null,arguments)},Cb=b._emscripten_bind_btCollisionWorld___destroy___0=function(){return(Cb=
b._emscripten_bind_btCollisionWorld___destroy___0=b.asm.emscripten_bind_btCollisionWorld___destroy___0).apply(null,arguments)},Db=b._emscripten_bind_btCollisionShape_setLocalScaling_1=function(){return(Db=b._emscripten_bind_btCollisionShape_setLocalScaling_1=b.asm.emscripten_bind_btCollisionShape_setLocalScaling_1).apply(null,arguments)},Eb=b._emscripten_bind_btCollisionShape_getLocalScaling_0=function(){return(Eb=b._emscripten_bind_btCollisionShape_getLocalScaling_0=b.asm.emscripten_bind_btCollisionShape_getLocalScaling_0).apply(null,
arguments)},Fb=b._emscripten_bind_btCollisionShape_calculateLocalInertia_2=function(){return(Fb=b._emscripten_bind_btCollisionShape_calculateLocalInertia_2=b.asm.emscripten_bind_btCollisionShape_calculateLocalInertia_2).apply(null,arguments)},Gb=b._emscripten_bind_btCollisionShape_setMargin_1=function(){return(Gb=b._emscripten_bind_btCollisionShape_setMargin_1=b.asm.emscripten_bind_btCollisionShape_setMargin_1).apply(null,arguments)},Hb=b._emscripten_bind_btCollisionShape_getMargin_0=function(){return(Hb=
b._emscripten_bind_btCollisionShape_getMargin_0=b.asm.emscripten_bind_btCollisionShape_getMargin_0).apply(null,arguments)},Ib=b._emscripten_bind_btCollisionShape___destroy___0=function(){return(Ib=b._emscripten_bind_btCollisionShape___destroy___0=b.asm.emscripten_bind_btCollisionShape___destroy___0).apply(null,arguments)},Jb=b._emscripten_bind_btCollisionObject_setAnisotropicFriction_2=function(){return(Jb=b._emscripten_bind_btCollisionObject_setAnisotropicFriction_2=b.asm.emscripten_bind_btCollisionObject_setAnisotropicFriction_2).apply(null,
arguments)},Kb=b._emscripten_bind_btCollisionObject_getCollisionShape_0=function(){return(Kb=b._emscripten_bind_btCollisionObject_getCollisionShape_0=b.asm.emscripten_bind_btCollisionObject_getCollisionShape_0).apply(null,arguments)},Lb=b._emscripten_bind_btCollisionObject_setContactProcessingThreshold_1=function(){return(Lb=b._emscripten_bind_btCollisionObject_setContactProcessingThreshold_1=b.asm.emscripten_bind_btCollisionObject_setContactProcessingThreshold_1).apply(null,arguments)},Mb=b._emscripten_bind_btCollisionObject_setActivationState_1=
function(){return(Mb=b._emscripten_bind_btCollisionObject_setActivationState_1=b.asm.emscripten_bind_btCollisionObject_setActivationState_1).apply(null,arguments)},Nb=b._emscripten_bind_btCollisionObject_forceActivationState_1=function(){return(Nb=b._emscripten_bind_btCollisionObject_forceActivationState_1=b.asm.emscripten_bind_btCollisionObject_forceActivationState_1).apply(null,arguments)},Ob=b._emscripten_bind_btCollisionObject_activate_0=function(){return(Ob=b._emscripten_bind_btCollisionObject_activate_0=
b.asm.emscripten_bind_btCollisionObject_activate_0).apply(null,arguments)},Pb=b._emscripten_bind_btCollisionObject_activate_1=function(){return(Pb=b._emscripten_bind_btCollisionObject_activate_1=b.asm.emscripten_bind_btCollisionObject_activate_1).apply(null,arguments)},Qb=b._emscripten_bind_btCollisionObject_isActive_0=function(){return(Qb=b._emscripten_bind_btCollisionObject_isActive_0=b.asm.emscripten_bind_btCollisionObject_isActive_0).apply(null,arguments)},Rb=b._emscripten_bind_btCollisionObject_isKinematicObject_0=
function(){return(Rb=b._emscripten_bind_btCollisionObject_isKinematicObject_0=b.asm.emscripten_bind_btCollisionObject_isKinematicObject_0).apply(null,arguments)},Sb=b._emscripten_bind_btCollisionObject_isStaticObject_0=function(){return(Sb=b._emscripten_bind_btCollisionObject_isStaticObject_0=b.asm.emscripten_bind_btCollisionObject_isStaticObject_0).apply(null,arguments)},Tb=b._emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0=function(){return(Tb=b._emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0=
b.asm.emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0).apply(null,arguments)},Vb=b._emscripten_bind_btCollisionObject_getRestitution_0=function(){return(Vb=b._emscripten_bind_btCollisionObject_getRestitution_0=b.asm.emscripten_bind_btCollisionObject_getRestitution_0).apply(null,arguments)},Wb=b._emscripten_bind_btCollisionObject_getFriction_0=function(){return(Wb=b._emscripten_bind_btCollisionObject_getFriction_0=b.asm.emscripten_bind_btCollisionObject_getFriction_0).apply(null,arguments)},
Xb=b._emscripten_bind_btCollisionObject_getRollingFriction_0=function(){return(Xb=b._emscripten_bind_btCollisionObject_getRollingFriction_0=b.asm.emscripten_bind_btCollisionObject_getRollingFriction_0).apply(null,arguments)},Yb=b._emscripten_bind_btCollisionObject_setRestitution_1=function(){return(Yb=b._emscripten_bind_btCollisionObject_setRestitution_1=b.asm.emscripten_bind_btCollisionObject_setRestitution_1).apply(null,arguments)},Zb=b._emscripten_bind_btCollisionObject_setFriction_1=function(){return(Zb=
b._emscripten_bind_btCollisionObject_setFriction_1=b.asm.emscripten_bind_btCollisionObject_setFriction_1).apply(null,arguments)},$b=b._emscripten_bind_btCollisionObject_setRollingFriction_1=function(){return($b=b._emscripten_bind_btCollisionObject_setRollingFriction_1=b.asm.emscripten_bind_btCollisionObject_setRollingFriction_1).apply(null,arguments)},ac=b._emscripten_bind_btCollisionObject_getWorldTransform_0=function(){return(ac=b._emscripten_bind_btCollisionObject_getWorldTransform_0=b.asm.emscripten_bind_btCollisionObject_getWorldTransform_0).apply(null,
arguments)},bc=b._emscripten_bind_btCollisionObject_getCollisionFlags_0=function(){return(bc=b._emscripten_bind_btCollisionObject_getCollisionFlags_0=b.asm.emscripten_bind_btCollisionObject_getCollisionFlags_0).apply(null,arguments)},cc=b._emscripten_bind_btCollisionObject_setCollisionFlags_1=function(){return(cc=b._emscripten_bind_btCollisionObject_setCollisionFlags_1=b.asm.emscripten_bind_btCollisionObject_setCollisionFlags_1).apply(null,arguments)},ec=b._emscripten_bind_btCollisionObject_setWorldTransform_1=
function(){return(ec=b._emscripten_bind_btCollisionObject_setWorldTransform_1=b.asm.emscripten_bind_btCollisionObject_setWorldTransform_1).apply(null,arguments)},fc=b._emscripten_bind_btCollisionObject_setCollisionShape_1=function(){return(fc=b._emscripten_bind_btCollisionObject_setCollisionShape_1=b.asm.emscripten_bind_btCollisionObject_setCollisionShape_1).apply(null,arguments)},hc=b._emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=function(){return(hc=b._emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=
b.asm.emscripten_bind_btCollisionObject_setCcdMotionThreshold_1).apply(null,arguments)},ic=b._emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=function(){return(ic=b._emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=b.asm.emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1).apply(null,arguments)},jc=b._emscripten_bind_btCollisionObject_getUserIndex_0=function(){return(jc=b._emscripten_bind_btCollisionObject_getUserIndex_0=b.asm.emscripten_bind_btCollisionObject_getUserIndex_0).apply(null,
arguments)},kc=b._emscripten_bind_btCollisionObject_setUserIndex_1=function(){return(kc=b._emscripten_bind_btCollisionObject_setUserIndex_1=b.asm.emscripten_bind_btCollisionObject_setUserIndex_1).apply(null,arguments)},lc=b._emscripten_bind_btCollisionObject_getUserPointer_0=function(){return(lc=b._emscripten_bind_btCollisionObject_getUserPointer_0=b.asm.emscripten_bind_btCollisionObject_getUserPointer_0).apply(null,arguments)},mc=b._emscripten_bind_btCollisionObject_setUserPointer_1=function(){return(mc=
b._emscripten_bind_btCollisionObject_setUserPointer_1=b.asm.emscripten_bind_btCollisionObject_setUserPointer_1).apply(null,arguments)},nc=b._emscripten_bind_btCollisionObject_getBroadphaseHandle_0=function(){return(nc=b._emscripten_bind_btCollisionObject_getBroadphaseHandle_0=b.asm.emscripten_bind_btCollisionObject_getBroadphaseHandle_0).apply(null,arguments)},oc=b._emscripten_bind_btCollisionObject___destroy___0=function(){return(oc=b._emscripten_bind_btCollisionObject___destroy___0=b.asm.emscripten_bind_btCollisionObject___destroy___0).apply(null,
arguments)},pc=b._emscripten_bind_btDynamicsWorld_addAction_1=function(){return(pc=b._emscripten_bind_btDynamicsWorld_addAction_1=b.asm.emscripten_bind_btDynamicsWorld_addAction_1).apply(null,arguments)},qc=b._emscripten_bind_btDynamicsWorld_removeAction_1=function(){return(qc=b._emscripten_bind_btDynamicsWorld_removeAction_1=b.asm.emscripten_bind_btDynamicsWorld_removeAction_1).apply(null,arguments)},sc=b._emscripten_bind_btDynamicsWorld_getSolverInfo_0=function(){return(sc=b._emscripten_bind_btDynamicsWorld_getSolverInfo_0=
b.asm.emscripten_bind_btDynamicsWorld_getSolverInfo_0).apply(null,arguments)},tc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_1=function(){return(tc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_1=b.asm.emscripten_bind_btDynamicsWorld_setInternalTickCallback_1).apply(null,arguments)},uc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_2=function(){return(uc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_2=b.asm.emscripten_bind_btDynamicsWorld_setInternalTickCallback_2).apply(null,
arguments)},vc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_3=function(){return(vc=b._emscripten_bind_btDynamicsWorld_setInternalTickCallback_3=b.asm.emscripten_bind_btDynamicsWorld_setInternalTickCallback_3).apply(null,arguments)},wc=b._emscripten_bind_btDynamicsWorld_getDispatcher_0=function(){return(wc=b._emscripten_bind_btDynamicsWorld_getDispatcher_0=b.asm.emscripten_bind_btDynamicsWorld_getDispatcher_0).apply(null,arguments)},xc=b._emscripten_bind_btDynamicsWorld_rayTest_3=function(){return(xc=
b._emscripten_bind_btDynamicsWorld_rayTest_3=b.asm.emscripten_bind_btDynamicsWorld_rayTest_3).apply(null,arguments)},yc=b._emscripten_bind_btDynamicsWorld_getPairCache_0=function(){return(yc=b._emscripten_bind_btDynamicsWorld_getPairCache_0=b.asm.emscripten_bind_btDynamicsWorld_getPairCache_0).apply(null,arguments)},zc=b._emscripten_bind_btDynamicsWorld_getDispatchInfo_0=function(){return(zc=b._emscripten_bind_btDynamicsWorld_getDispatchInfo_0=b.asm.emscripten_bind_btDynamicsWorld_getDispatchInfo_0).apply(null,
arguments)},Ac=b._emscripten_bind_btDynamicsWorld_addCollisionObject_1=function(){return(Ac=b._emscripten_bind_btDynamicsWorld_addCollisionObject_1=b.asm.emscripten_bind_btDynamicsWorld_addCollisionObject_1).apply(null,arguments)},Bc=b._emscripten_bind_btDynamicsWorld_addCollisionObject_2=function(){return(Bc=b._emscripten_bind_btDynamicsWorld_addCollisionObject_2=b.asm.emscripten_bind_btDynamicsWorld_addCollisionObject_2).apply(null,arguments)},Ec=b._emscripten_bind_btDynamicsWorld_addCollisionObject_3=
function(){return(Ec=b._emscripten_bind_btDynamicsWorld_addCollisionObject_3=b.asm.emscripten_bind_btDynamicsWorld_addCollisionObject_3).apply(null,arguments)},Fc=b._emscripten_bind_btDynamicsWorld_removeCollisionObject_1=function(){return(Fc=b._emscripten_bind_btDynamicsWorld_removeCollisionObject_1=b.asm.emscripten_bind_btDynamicsWorld_removeCollisionObject_1).apply(null,arguments)},Gc=b._emscripten_bind_btDynamicsWorld_getBroadphase_0=function(){return(Gc=b._emscripten_bind_btDynamicsWorld_getBroadphase_0=
b.asm.emscripten_bind_btDynamicsWorld_getBroadphase_0).apply(null,arguments)},Hc=b._emscripten_bind_btDynamicsWorld_convexSweepTest_5=function(){return(Hc=b._emscripten_bind_btDynamicsWorld_convexSweepTest_5=b.asm.emscripten_bind_btDynamicsWorld_convexSweepTest_5).apply(null,arguments)},Ic=b._emscripten_bind_btDynamicsWorld_contactPairTest_3=function(){return(Ic=b._emscripten_bind_btDynamicsWorld_contactPairTest_3=b.asm.emscripten_bind_btDynamicsWorld_contactPairTest_3).apply(null,arguments)},Jc=
b._emscripten_bind_btDynamicsWorld_contactTest_2=function(){return(Jc=b._emscripten_bind_btDynamicsWorld_contactTest_2=b.asm.emscripten_bind_btDynamicsWorld_contactTest_2).apply(null,arguments)},Kc=b._emscripten_bind_btDynamicsWorld_updateSingleAabb_1=function(){return(Kc=b._emscripten_bind_btDynamicsWorld_updateSingleAabb_1=b.asm.emscripten_bind_btDynamicsWorld_updateSingleAabb_1).apply(null,arguments)},Lc=b._emscripten_bind_btDynamicsWorld_setDebugDrawer_1=function(){return(Lc=b._emscripten_bind_btDynamicsWorld_setDebugDrawer_1=
b.asm.emscripten_bind_btDynamicsWorld_setDebugDrawer_1).apply(null,arguments)},Mc=b._emscripten_bind_btDynamicsWorld_getDebugDrawer_0=function(){return(Mc=b._emscripten_bind_btDynamicsWorld_getDebugDrawer_0=b.asm.emscripten_bind_btDynamicsWorld_getDebugDrawer_0).apply(null,arguments)},Nc=b._emscripten_bind_btDynamicsWorld_debugDrawWorld_0=function(){return(Nc=b._emscripten_bind_btDynamicsWorld_debugDrawWorld_0=b.asm.emscripten_bind_btDynamicsWorld_debugDrawWorld_0).apply(null,arguments)},Oc=b._emscripten_bind_btDynamicsWorld_debugDrawObject_3=
function(){return(Oc=b._emscripten_bind_btDynamicsWorld_debugDrawObject_3=b.asm.emscripten_bind_btDynamicsWorld_debugDrawObject_3).apply(null,arguments)},Pc=b._emscripten_bind_btDynamicsWorld___destroy___0=function(){return(Pc=b._emscripten_bind_btDynamicsWorld___destroy___0=b.asm.emscripten_bind_btDynamicsWorld___destroy___0).apply(null,arguments)},Qc=b._emscripten_bind_btTypedConstraint_enableFeedback_1=function(){return(Qc=b._emscripten_bind_btTypedConstraint_enableFeedback_1=b.asm.emscripten_bind_btTypedConstraint_enableFeedback_1).apply(null,
arguments)},Rc=b._emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0=function(){return(Rc=b._emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0).apply(null,arguments)},Sc=b._emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1=function(){return(Sc=b._emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1).apply(null,
arguments)},Tc=b._emscripten_bind_btTypedConstraint_getParam_2=function(){return(Tc=b._emscripten_bind_btTypedConstraint_getParam_2=b.asm.emscripten_bind_btTypedConstraint_getParam_2).apply(null,arguments)},Uc=b._emscripten_bind_btTypedConstraint_setParam_3=function(){return(Uc=b._emscripten_bind_btTypedConstraint_setParam_3=b.asm.emscripten_bind_btTypedConstraint_setParam_3).apply(null,arguments)},Vc=b._emscripten_bind_btTypedConstraint___destroy___0=function(){return(Vc=b._emscripten_bind_btTypedConstraint___destroy___0=
b.asm.emscripten_bind_btTypedConstraint___destroy___0).apply(null,arguments)},Wc=b._emscripten_bind_btConcaveShape_setLocalScaling_1=function(){return(Wc=b._emscripten_bind_btConcaveShape_setLocalScaling_1=b.asm.emscripten_bind_btConcaveShape_setLocalScaling_1).apply(null,arguments)},Xc=b._emscripten_bind_btConcaveShape_getLocalScaling_0=function(){return(Xc=b._emscripten_bind_btConcaveShape_getLocalScaling_0=b.asm.emscripten_bind_btConcaveShape_getLocalScaling_0).apply(null,arguments)},Yc=b._emscripten_bind_btConcaveShape_calculateLocalInertia_2=
function(){return(Yc=b._emscripten_bind_btConcaveShape_calculateLocalInertia_2=b.asm.emscripten_bind_btConcaveShape_calculateLocalInertia_2).apply(null,arguments)},Zc=b._emscripten_bind_btConcaveShape___destroy___0=function(){return(Zc=b._emscripten_bind_btConcaveShape___destroy___0=b.asm.emscripten_bind_btConcaveShape___destroy___0).apply(null,arguments)},$c=b._emscripten_bind_btCapsuleShape_btCapsuleShape_2=function(){return($c=b._emscripten_bind_btCapsuleShape_btCapsuleShape_2=b.asm.emscripten_bind_btCapsuleShape_btCapsuleShape_2).apply(null,
arguments)},ad=b._emscripten_bind_btCapsuleShape_setMargin_1=function(){return(ad=b._emscripten_bind_btCapsuleShape_setMargin_1=b.asm.emscripten_bind_btCapsuleShape_setMargin_1).apply(null,arguments)},bd=b._emscripten_bind_btCapsuleShape_getMargin_0=function(){return(bd=b._emscripten_bind_btCapsuleShape_getMargin_0=b.asm.emscripten_bind_btCapsuleShape_getMargin_0).apply(null,arguments)},cd=b._emscripten_bind_btCapsuleShape_getUpAxis_0=function(){return(cd=b._emscripten_bind_btCapsuleShape_getUpAxis_0=
b.asm.emscripten_bind_btCapsuleShape_getUpAxis_0).apply(null,arguments)},dd=b._emscripten_bind_btCapsuleShape_getRadius_0=function(){return(dd=b._emscripten_bind_btCapsuleShape_getRadius_0=b.asm.emscripten_bind_btCapsuleShape_getRadius_0).apply(null,arguments)},ed=b._emscripten_bind_btCapsuleShape_getHalfHeight_0=function(){return(ed=b._emscripten_bind_btCapsuleShape_getHalfHeight_0=b.asm.emscripten_bind_btCapsuleShape_getHalfHeight_0).apply(null,arguments)},fd=b._emscripten_bind_btCapsuleShape_setLocalScaling_1=
function(){return(fd=b._emscripten_bind_btCapsuleShape_setLocalScaling_1=b.asm.emscripten_bind_btCapsuleShape_setLocalScaling_1).apply(null,arguments)},gd=b._emscripten_bind_btCapsuleShape_getLocalScaling_0=function(){return(gd=b._emscripten_bind_btCapsuleShape_getLocalScaling_0=b.asm.emscripten_bind_btCapsuleShape_getLocalScaling_0).apply(null,arguments)},hd=b._emscripten_bind_btCapsuleShape_calculateLocalInertia_2=function(){return(hd=b._emscripten_bind_btCapsuleShape_calculateLocalInertia_2=b.asm.emscripten_bind_btCapsuleShape_calculateLocalInertia_2).apply(null,
arguments)},id=b._emscripten_bind_btCapsuleShape___destroy___0=function(){return(id=b._emscripten_bind_btCapsuleShape___destroy___0=b.asm.emscripten_bind_btCapsuleShape___destroy___0).apply(null,arguments)},jd=b._emscripten_bind_btIDebugDraw_drawLine_3=function(){return(jd=b._emscripten_bind_btIDebugDraw_drawLine_3=b.asm.emscripten_bind_btIDebugDraw_drawLine_3).apply(null,arguments)},kd=b._emscripten_bind_btIDebugDraw_drawContactPoint_5=function(){return(kd=b._emscripten_bind_btIDebugDraw_drawContactPoint_5=
b.asm.emscripten_bind_btIDebugDraw_drawContactPoint_5).apply(null,arguments)},ld=b._emscripten_bind_btIDebugDraw_reportErrorWarning_1=function(){return(ld=b._emscripten_bind_btIDebugDraw_reportErrorWarning_1=b.asm.emscripten_bind_btIDebugDraw_reportErrorWarning_1).apply(null,arguments)},md=b._emscripten_bind_btIDebugDraw_draw3dText_2=function(){return(md=b._emscripten_bind_btIDebugDraw_draw3dText_2=b.asm.emscripten_bind_btIDebugDraw_draw3dText_2).apply(null,arguments)},nd=b._emscripten_bind_btIDebugDraw_setDebugMode_1=
function(){return(nd=b._emscripten_bind_btIDebugDraw_setDebugMode_1=b.asm.emscripten_bind_btIDebugDraw_setDebugMode_1).apply(null,arguments)},od=b._emscripten_bind_btIDebugDraw_getDebugMode_0=function(){return(od=b._emscripten_bind_btIDebugDraw_getDebugMode_0=b.asm.emscripten_bind_btIDebugDraw_getDebugMode_0).apply(null,arguments)},pd=b._emscripten_bind_btIDebugDraw___destroy___0=function(){return(pd=b._emscripten_bind_btIDebugDraw___destroy___0=b.asm.emscripten_bind_btIDebugDraw___destroy___0).apply(null,
arguments)},qd=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=function(){return(qd=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=b.asm.emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0).apply(null,arguments)},rd=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=function(){return(rd=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=
b.asm.emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1).apply(null,arguments)},sd=b._emscripten_bind_btDefaultCollisionConfiguration___destroy___0=function(){return(sd=b._emscripten_bind_btDefaultCollisionConfiguration___destroy___0=b.asm.emscripten_bind_btDefaultCollisionConfiguration___destroy___0).apply(null,arguments)},td=b._emscripten_bind_btTriangleMeshShape_setLocalScaling_1=function(){return(td=b._emscripten_bind_btTriangleMeshShape_setLocalScaling_1=b.asm.emscripten_bind_btTriangleMeshShape_setLocalScaling_1).apply(null,
arguments)},ud=b._emscripten_bind_btTriangleMeshShape_getLocalScaling_0=function(){return(ud=b._emscripten_bind_btTriangleMeshShape_getLocalScaling_0=b.asm.emscripten_bind_btTriangleMeshShape_getLocalScaling_0).apply(null,arguments)},vd=b._emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=function(){return(vd=b._emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=b.asm.emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2).apply(null,arguments)},wd=b._emscripten_bind_btTriangleMeshShape___destroy___0=
function(){return(wd=b._emscripten_bind_btTriangleMeshShape___destroy___0=b.asm.emscripten_bind_btTriangleMeshShape___destroy___0).apply(null,arguments)},xd=b._emscripten_bind_btGhostObject_btGhostObject_0=function(){return(xd=b._emscripten_bind_btGhostObject_btGhostObject_0=b.asm.emscripten_bind_btGhostObject_btGhostObject_0).apply(null,arguments)},yd=b._emscripten_bind_btGhostObject_getNumOverlappingObjects_0=function(){return(yd=b._emscripten_bind_btGhostObject_getNumOverlappingObjects_0=b.asm.emscripten_bind_btGhostObject_getNumOverlappingObjects_0).apply(null,
arguments)},zd=b._emscripten_bind_btGhostObject_getOverlappingObject_1=function(){return(zd=b._emscripten_bind_btGhostObject_getOverlappingObject_1=b.asm.emscripten_bind_btGhostObject_getOverlappingObject_1).apply(null,arguments)},Ad=b._emscripten_bind_btGhostObject_setAnisotropicFriction_2=function(){return(Ad=b._emscripten_bind_btGhostObject_setAnisotropicFriction_2=b.asm.emscripten_bind_btGhostObject_setAnisotropicFriction_2).apply(null,arguments)},Bd=b._emscripten_bind_btGhostObject_getCollisionShape_0=
function(){return(Bd=b._emscripten_bind_btGhostObject_getCollisionShape_0=b.asm.emscripten_bind_btGhostObject_getCollisionShape_0).apply(null,arguments)},Cd=b._emscripten_bind_btGhostObject_setContactProcessingThreshold_1=function(){return(Cd=b._emscripten_bind_btGhostObject_setContactProcessingThreshold_1=b.asm.emscripten_bind_btGhostObject_setContactProcessingThreshold_1).apply(null,arguments)},Dd=b._emscripten_bind_btGhostObject_setActivationState_1=function(){return(Dd=b._emscripten_bind_btGhostObject_setActivationState_1=
b.asm.emscripten_bind_btGhostObject_setActivationState_1).apply(null,arguments)},Ed=b._emscripten_bind_btGhostObject_forceActivationState_1=function(){return(Ed=b._emscripten_bind_btGhostObject_forceActivationState_1=b.asm.emscripten_bind_btGhostObject_forceActivationState_1).apply(null,arguments)},Fd=b._emscripten_bind_btGhostObject_activate_0=function(){return(Fd=b._emscripten_bind_btGhostObject_activate_0=b.asm.emscripten_bind_btGhostObject_activate_0).apply(null,arguments)},Gd=b._emscripten_bind_btGhostObject_activate_1=
function(){return(Gd=b._emscripten_bind_btGhostObject_activate_1=b.asm.emscripten_bind_btGhostObject_activate_1).apply(null,arguments)},Hd=b._emscripten_bind_btGhostObject_isActive_0=function(){return(Hd=b._emscripten_bind_btGhostObject_isActive_0=b.asm.emscripten_bind_btGhostObject_isActive_0).apply(null,arguments)},Id=b._emscripten_bind_btGhostObject_isKinematicObject_0=function(){return(Id=b._emscripten_bind_btGhostObject_isKinematicObject_0=b.asm.emscripten_bind_btGhostObject_isKinematicObject_0).apply(null,
arguments)},Jd=b._emscripten_bind_btGhostObject_isStaticObject_0=function(){return(Jd=b._emscripten_bind_btGhostObject_isStaticObject_0=b.asm.emscripten_bind_btGhostObject_isStaticObject_0).apply(null,arguments)},Kd=b._emscripten_bind_btGhostObject_isStaticOrKinematicObject_0=function(){return(Kd=b._emscripten_bind_btGhostObject_isStaticOrKinematicObject_0=b.asm.emscripten_bind_btGhostObject_isStaticOrKinematicObject_0).apply(null,arguments)},Ld=b._emscripten_bind_btGhostObject_getRestitution_0=function(){return(Ld=
b._emscripten_bind_btGhostObject_getRestitution_0=b.asm.emscripten_bind_btGhostObject_getRestitution_0).apply(null,arguments)},Md=b._emscripten_bind_btGhostObject_getFriction_0=function(){return(Md=b._emscripten_bind_btGhostObject_getFriction_0=b.asm.emscripten_bind_btGhostObject_getFriction_0).apply(null,arguments)},Nd=b._emscripten_bind_btGhostObject_getRollingFriction_0=function(){return(Nd=b._emscripten_bind_btGhostObject_getRollingFriction_0=b.asm.emscripten_bind_btGhostObject_getRollingFriction_0).apply(null,
arguments)},Od=b._emscripten_bind_btGhostObject_setRestitution_1=function(){return(Od=b._emscripten_bind_btGhostObject_setRestitution_1=b.asm.emscripten_bind_btGhostObject_setRestitution_1).apply(null,arguments)},Pd=b._emscripten_bind_btGhostObject_setFriction_1=function(){return(Pd=b._emscripten_bind_btGhostObject_setFriction_1=b.asm.emscripten_bind_btGhostObject_setFriction_1).apply(null,arguments)},Qd=b._emscripten_bind_btGhostObject_setRollingFriction_1=function(){return(Qd=b._emscripten_bind_btGhostObject_setRollingFriction_1=
b.asm.emscripten_bind_btGhostObject_setRollingFriction_1).apply(null,arguments)},Rd=b._emscripten_bind_btGhostObject_getWorldTransform_0=function(){return(Rd=b._emscripten_bind_btGhostObject_getWorldTransform_0=b.asm.emscripten_bind_btGhostObject_getWorldTransform_0).apply(null,arguments)},Sd=b._emscripten_bind_btGhostObject_getCollisionFlags_0=function(){return(Sd=b._emscripten_bind_btGhostObject_getCollisionFlags_0=b.asm.emscripten_bind_btGhostObject_getCollisionFlags_0).apply(null,arguments)},
Td=b._emscripten_bind_btGhostObject_setCollisionFlags_1=function(){return(Td=b._emscripten_bind_btGhostObject_setCollisionFlags_1=b.asm.emscripten_bind_btGhostObject_setCollisionFlags_1).apply(null,arguments)},Ud=b._emscripten_bind_btGhostObject_setWorldTransform_1=function(){return(Ud=b._emscripten_bind_btGhostObject_setWorldTransform_1=b.asm.emscripten_bind_btGhostObject_setWorldTransform_1).apply(null,arguments)},Vd=b._emscripten_bind_btGhostObject_setCollisionShape_1=function(){return(Vd=b._emscripten_bind_btGhostObject_setCollisionShape_1=
b.asm.emscripten_bind_btGhostObject_setCollisionShape_1).apply(null,arguments)},Wd=b._emscripten_bind_btGhostObject_setCcdMotionThreshold_1=function(){return(Wd=b._emscripten_bind_btGhostObject_setCcdMotionThreshold_1=b.asm.emscripten_bind_btGhostObject_setCcdMotionThreshold_1).apply(null,arguments)},Xd=b._emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=function(){return(Xd=b._emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=b.asm.emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1).apply(null,
arguments)},Yd=b._emscripten_bind_btGhostObject_getUserIndex_0=function(){return(Yd=b._emscripten_bind_btGhostObject_getUserIndex_0=b.asm.emscripten_bind_btGhostObject_getUserIndex_0).apply(null,arguments)},Zd=b._emscripten_bind_btGhostObject_setUserIndex_1=function(){return(Zd=b._emscripten_bind_btGhostObject_setUserIndex_1=b.asm.emscripten_bind_btGhostObject_setUserIndex_1).apply(null,arguments)},$d=b._emscripten_bind_btGhostObject_getUserPointer_0=function(){return($d=b._emscripten_bind_btGhostObject_getUserPointer_0=
b.asm.emscripten_bind_btGhostObject_getUserPointer_0).apply(null,arguments)},ae=b._emscripten_bind_btGhostObject_setUserPointer_1=function(){return(ae=b._emscripten_bind_btGhostObject_setUserPointer_1=b.asm.emscripten_bind_btGhostObject_setUserPointer_1).apply(null,arguments)},be=b._emscripten_bind_btGhostObject_getBroadphaseHandle_0=function(){return(be=b._emscripten_bind_btGhostObject_getBroadphaseHandle_0=b.asm.emscripten_bind_btGhostObject_getBroadphaseHandle_0).apply(null,arguments)},ce=b._emscripten_bind_btGhostObject___destroy___0=
function(){return(ce=b._emscripten_bind_btGhostObject___destroy___0=b.asm.emscripten_bind_btGhostObject___destroy___0).apply(null,arguments)},de=b._emscripten_bind_btConeShape_btConeShape_2=function(){return(de=b._emscripten_bind_btConeShape_btConeShape_2=b.asm.emscripten_bind_btConeShape_btConeShape_2).apply(null,arguments)},ee=b._emscripten_bind_btConeShape_setLocalScaling_1=function(){return(ee=b._emscripten_bind_btConeShape_setLocalScaling_1=b.asm.emscripten_bind_btConeShape_setLocalScaling_1).apply(null,
arguments)},fe=b._emscripten_bind_btConeShape_getLocalScaling_0=function(){return(fe=b._emscripten_bind_btConeShape_getLocalScaling_0=b.asm.emscripten_bind_btConeShape_getLocalScaling_0).apply(null,arguments)},ge=b._emscripten_bind_btConeShape_calculateLocalInertia_2=function(){return(ge=b._emscripten_bind_btConeShape_calculateLocalInertia_2=b.asm.emscripten_bind_btConeShape_calculateLocalInertia_2).apply(null,arguments)},he=b._emscripten_bind_btConeShape___destroy___0=function(){return(he=b._emscripten_bind_btConeShape___destroy___0=
b.asm.emscripten_bind_btConeShape___destroy___0).apply(null,arguments)},ie=b._emscripten_bind_btActionInterface_updateAction_2=function(){return(ie=b._emscripten_bind_btActionInterface_updateAction_2=b.asm.emscripten_bind_btActionInterface_updateAction_2).apply(null,arguments)},je=b._emscripten_bind_btActionInterface___destroy___0=function(){return(je=b._emscripten_bind_btActionInterface___destroy___0=b.asm.emscripten_bind_btActionInterface___destroy___0).apply(null,arguments)},ke=b._emscripten_bind_btVector3_btVector3_0=
function(){return(ke=b._emscripten_bind_btVector3_btVector3_0=b.asm.emscripten_bind_btVector3_btVector3_0).apply(null,arguments)},le=b._emscripten_bind_btVector3_btVector3_3=function(){return(le=b._emscripten_bind_btVector3_btVector3_3=b.asm.emscripten_bind_btVector3_btVector3_3).apply(null,arguments)},me=b._emscripten_bind_btVector3_length_0=function(){return(me=b._emscripten_bind_btVector3_length_0=b.asm.emscripten_bind_btVector3_length_0).apply(null,arguments)},ne=b._emscripten_bind_btVector3_x_0=
function(){return(ne=b._emscripten_bind_btVector3_x_0=b.asm.emscripten_bind_btVector3_x_0).apply(null,arguments)},oe=b._emscripten_bind_btVector3_y_0=function(){return(oe=b._emscripten_bind_btVector3_y_0=b.asm.emscripten_bind_btVector3_y_0).apply(null,arguments)},pe=b._emscripten_bind_btVector3_z_0=function(){return(pe=b._emscripten_bind_btVector3_z_0=b.asm.emscripten_bind_btVector3_z_0).apply(null,arguments)},qe=b._emscripten_bind_btVector3_setX_1=function(){return(qe=b._emscripten_bind_btVector3_setX_1=
b.asm.emscripten_bind_btVector3_setX_1).apply(null,arguments)},re=b._emscripten_bind_btVector3_setY_1=function(){return(re=b._emscripten_bind_btVector3_setY_1=b.asm.emscripten_bind_btVector3_setY_1).apply(null,arguments)},se=b._emscripten_bind_btVector3_setZ_1=function(){return(se=b._emscripten_bind_btVector3_setZ_1=b.asm.emscripten_bind_btVector3_setZ_1).apply(null,arguments)},te=b._emscripten_bind_btVector3_setValue_3=function(){return(te=b._emscripten_bind_btVector3_setValue_3=b.asm.emscripten_bind_btVector3_setValue_3).apply(null,
arguments)},ue=b._emscripten_bind_btVector3_normalize_0=function(){return(ue=b._emscripten_bind_btVector3_normalize_0=b.asm.emscripten_bind_btVector3_normalize_0).apply(null,arguments)},ve=b._emscripten_bind_btVector3_rotate_2=function(){return(ve=b._emscripten_bind_btVector3_rotate_2=b.asm.emscripten_bind_btVector3_rotate_2).apply(null,arguments)},we=b._emscripten_bind_btVector3_dot_1=function(){return(we=b._emscripten_bind_btVector3_dot_1=b.asm.emscripten_bind_btVector3_dot_1).apply(null,arguments)},
xe=b._emscripten_bind_btVector3_op_mul_1=function(){return(xe=b._emscripten_bind_btVector3_op_mul_1=b.asm.emscripten_bind_btVector3_op_mul_1).apply(null,arguments)},ye=b._emscripten_bind_btVector3_op_add_1=function(){return(ye=b._emscripten_bind_btVector3_op_add_1=b.asm.emscripten_bind_btVector3_op_add_1).apply(null,arguments)},ze=b._emscripten_bind_btVector3_op_sub_1=function(){return(ze=b._emscripten_bind_btVector3_op_sub_1=b.asm.emscripten_bind_btVector3_op_sub_1).apply(null,arguments)},Ae=b._emscripten_bind_btVector3___destroy___0=
function(){return(Ae=b._emscripten_bind_btVector3___destroy___0=b.asm.emscripten_bind_btVector3___destroy___0).apply(null,arguments)},Be=b._emscripten_bind_btVehicleRaycaster_castRay_3=function(){return(Be=b._emscripten_bind_btVehicleRaycaster_castRay_3=b.asm.emscripten_bind_btVehicleRaycaster_castRay_3).apply(null,arguments)},Ce=b._emscripten_bind_btVehicleRaycaster___destroy___0=function(){return(Ce=b._emscripten_bind_btVehicleRaycaster___destroy___0=b.asm.emscripten_bind_btVehicleRaycaster___destroy___0).apply(null,
arguments)},De=b._emscripten_bind_btQuadWord_x_0=function(){return(De=b._emscripten_bind_btQuadWord_x_0=b.asm.emscripten_bind_btQuadWord_x_0).apply(null,arguments)},Ee=b._emscripten_bind_btQuadWord_y_0=function(){return(Ee=b._emscripten_bind_btQuadWord_y_0=b.asm.emscripten_bind_btQuadWord_y_0).apply(null,arguments)},Fe=b._emscripten_bind_btQuadWord_z_0=function(){return(Fe=b._emscripten_bind_btQuadWord_z_0=b.asm.emscripten_bind_btQuadWord_z_0).apply(null,arguments)},Ge=b._emscripten_bind_btQuadWord_w_0=
function(){return(Ge=b._emscripten_bind_btQuadWord_w_0=b.asm.emscripten_bind_btQuadWord_w_0).apply(null,arguments)},He=b._emscripten_bind_btQuadWord_setX_1=function(){return(He=b._emscripten_bind_btQuadWord_setX_1=b.asm.emscripten_bind_btQuadWord_setX_1).apply(null,arguments)},Ie=b._emscripten_bind_btQuadWord_setY_1=function(){return(Ie=b._emscripten_bind_btQuadWord_setY_1=b.asm.emscripten_bind_btQuadWord_setY_1).apply(null,arguments)},Je=b._emscripten_bind_btQuadWord_setZ_1=function(){return(Je=
b._emscripten_bind_btQuadWord_setZ_1=b.asm.emscripten_bind_btQuadWord_setZ_1).apply(null,arguments)},Ke=b._emscripten_bind_btQuadWord_setW_1=function(){return(Ke=b._emscripten_bind_btQuadWord_setW_1=b.asm.emscripten_bind_btQuadWord_setW_1).apply(null,arguments)},Le=b._emscripten_bind_btQuadWord___destroy___0=function(){return(Le=b._emscripten_bind_btQuadWord___destroy___0=b.asm.emscripten_bind_btQuadWord___destroy___0).apply(null,arguments)},Me=b._emscripten_bind_btCylinderShape_btCylinderShape_1=
function(){return(Me=b._emscripten_bind_btCylinderShape_btCylinderShape_1=b.asm.emscripten_bind_btCylinderShape_btCylinderShape_1).apply(null,arguments)},Ne=b._emscripten_bind_btCylinderShape_setMargin_1=function(){return(Ne=b._emscripten_bind_btCylinderShape_setMargin_1=b.asm.emscripten_bind_btCylinderShape_setMargin_1).apply(null,arguments)},Oe=b._emscripten_bind_btCylinderShape_getMargin_0=function(){return(Oe=b._emscripten_bind_btCylinderShape_getMargin_0=b.asm.emscripten_bind_btCylinderShape_getMargin_0).apply(null,
arguments)},Pe=b._emscripten_bind_btCylinderShape_setLocalScaling_1=function(){return(Pe=b._emscripten_bind_btCylinderShape_setLocalScaling_1=b.asm.emscripten_bind_btCylinderShape_setLocalScaling_1).apply(null,arguments)},Qe=b._emscripten_bind_btCylinderShape_getLocalScaling_0=function(){return(Qe=b._emscripten_bind_btCylinderShape_getLocalScaling_0=b.asm.emscripten_bind_btCylinderShape_getLocalScaling_0).apply(null,arguments)},Re=b._emscripten_bind_btCylinderShape_calculateLocalInertia_2=function(){return(Re=
b._emscripten_bind_btCylinderShape_calculateLocalInertia_2=b.asm.emscripten_bind_btCylinderShape_calculateLocalInertia_2).apply(null,arguments)},Se=b._emscripten_bind_btCylinderShape___destroy___0=function(){return(Se=b._emscripten_bind_btCylinderShape___destroy___0=b.asm.emscripten_bind_btCylinderShape___destroy___0).apply(null,arguments)},Te=b._emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=function(){return(Te=b._emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=
b.asm.emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4).apply(null,arguments)},Ue=b._emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=function(){return(Ue=b._emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setGravity_1).apply(null,arguments)},Ve=b._emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=function(){return(Ve=b._emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getGravity_0).apply(null,
arguments)},We=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=function(){return(We=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1).apply(null,arguments)},Xe=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=function(){return(Xe=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3).apply(null,arguments)},Ye=b._emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=
function(){return(Ye=b._emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1).apply(null,arguments)},Ze=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=function(){return(Ze=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1).apply(null,arguments)},$e=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=function(){return($e=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=
b.asm.emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2).apply(null,arguments)},af=b._emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=function(){return(af=b._emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1).apply(null,arguments)},bf=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=function(){return(bf=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1).apply(null,
arguments)},cf=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=function(){return(cf=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=b.asm.emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2).apply(null,arguments)},df=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=function(){return(df=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=b.asm.emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3).apply(null,arguments)},ef=b._emscripten_bind_btDiscreteDynamicsWorld_setContactAddedCallback_1=
function(){return(ef=b._emscripten_bind_btDiscreteDynamicsWorld_setContactAddedCallback_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setContactAddedCallback_1).apply(null,arguments)},ff=b._emscripten_bind_btDiscreteDynamicsWorld_setContactProcessedCallback_1=function(){return(ff=b._emscripten_bind_btDiscreteDynamicsWorld_setContactProcessedCallback_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setContactProcessedCallback_1).apply(null,arguments)},gf=b._emscripten_bind_btDiscreteDynamicsWorld_setContactDestroyedCallback_1=
function(){return(gf=b._emscripten_bind_btDiscreteDynamicsWorld_setContactDestroyedCallback_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setContactDestroyedCallback_1).apply(null,arguments)},hf=b._emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=function(){return(hf=b._emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0).apply(null,arguments)},jf=b._emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=function(){return(jf=b._emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=
b.asm.emscripten_bind_btDiscreteDynamicsWorld_rayTest_3).apply(null,arguments)},kf=b._emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=function(){return(kf=b._emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0).apply(null,arguments)},lf=b._emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0=function(){return(lf=b._emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0).apply(null,
arguments)},mf=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=function(){return(mf=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1).apply(null,arguments)},nf=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=function(){return(nf=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2).apply(null,arguments)},of=
b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=function(){return(of=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=b.asm.emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3).apply(null,arguments)},pf=b._emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1=function(){return(pf=b._emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1).apply(null,arguments)},qf=b._emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0=
function(){return(qf=b._emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0).apply(null,arguments)},rf=b._emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5=function(){return(rf=b._emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5=b.asm.emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5).apply(null,arguments)},sf=b._emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3=function(){return(sf=b._emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3=
b.asm.emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3).apply(null,arguments)},tf=b._emscripten_bind_btDiscreteDynamicsWorld_contactTest_2=function(){return(tf=b._emscripten_bind_btDiscreteDynamicsWorld_contactTest_2=b.asm.emscripten_bind_btDiscreteDynamicsWorld_contactTest_2).apply(null,arguments)},uf=b._emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1=function(){return(uf=b._emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1).apply(null,
arguments)},vf=b._emscripten_bind_btDiscreteDynamicsWorld_setDebugDrawer_1=function(){return(vf=b._emscripten_bind_btDiscreteDynamicsWorld_setDebugDrawer_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setDebugDrawer_1).apply(null,arguments)},wf=b._emscripten_bind_btDiscreteDynamicsWorld_getDebugDrawer_0=function(){return(wf=b._emscripten_bind_btDiscreteDynamicsWorld_getDebugDrawer_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getDebugDrawer_0).apply(null,arguments)},xf=b._emscripten_bind_btDiscreteDynamicsWorld_debugDrawWorld_0=
function(){return(xf=b._emscripten_bind_btDiscreteDynamicsWorld_debugDrawWorld_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_debugDrawWorld_0).apply(null,arguments)},yf=b._emscripten_bind_btDiscreteDynamicsWorld_debugDrawObject_3=function(){return(yf=b._emscripten_bind_btDiscreteDynamicsWorld_debugDrawObject_3=b.asm.emscripten_bind_btDiscreteDynamicsWorld_debugDrawObject_3).apply(null,arguments)},zf=b._emscripten_bind_btDiscreteDynamicsWorld_addAction_1=function(){return(zf=b._emscripten_bind_btDiscreteDynamicsWorld_addAction_1=
b.asm.emscripten_bind_btDiscreteDynamicsWorld_addAction_1).apply(null,arguments)},Af=b._emscripten_bind_btDiscreteDynamicsWorld_removeAction_1=function(){return(Af=b._emscripten_bind_btDiscreteDynamicsWorld_removeAction_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_removeAction_1).apply(null,arguments)},Bf=b._emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0=function(){return(Bf=b._emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0=b.asm.emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0).apply(null,
arguments)},Cf=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_1=function(){return(Cf=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_1=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_1).apply(null,arguments)},Df=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_2=function(){return(Df=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_2=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_2).apply(null,
arguments)},Ef=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_3=function(){return(Ef=b._emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_3=b.asm.emscripten_bind_btDiscreteDynamicsWorld_setInternalTickCallback_3).apply(null,arguments)},Ff=b._emscripten_bind_btDiscreteDynamicsWorld___destroy___0=function(){return(Ff=b._emscripten_bind_btDiscreteDynamicsWorld___destroy___0=b.asm.emscripten_bind_btDiscreteDynamicsWorld___destroy___0).apply(null,arguments)},Gf=b._emscripten_bind_btConvexShape_setLocalScaling_1=
function(){return(Gf=b._emscripten_bind_btConvexShape_setLocalScaling_1=b.asm.emscripten_bind_btConvexShape_setLocalScaling_1).apply(null,arguments)},Hf=b._emscripten_bind_btConvexShape_getLocalScaling_0=function(){return(Hf=b._emscripten_bind_btConvexShape_getLocalScaling_0=b.asm.emscripten_bind_btConvexShape_getLocalScaling_0).apply(null,arguments)},If=b._emscripten_bind_btConvexShape_calculateLocalInertia_2=function(){return(If=b._emscripten_bind_btConvexShape_calculateLocalInertia_2=b.asm.emscripten_bind_btConvexShape_calculateLocalInertia_2).apply(null,
arguments)},Jf=b._emscripten_bind_btConvexShape_setMargin_1=function(){return(Jf=b._emscripten_bind_btConvexShape_setMargin_1=b.asm.emscripten_bind_btConvexShape_setMargin_1).apply(null,arguments)},Kf=b._emscripten_bind_btConvexShape_getMargin_0=function(){return(Kf=b._emscripten_bind_btConvexShape_getMargin_0=b.asm.emscripten_bind_btConvexShape_getMargin_0).apply(null,arguments)},Lf=b._emscripten_bind_btConvexShape___destroy___0=function(){return(Lf=b._emscripten_bind_btConvexShape___destroy___0=
b.asm.emscripten_bind_btConvexShape___destroy___0).apply(null,arguments)},Mf=b._emscripten_bind_btDispatcher_getNumManifolds_0=function(){return(Mf=b._emscripten_bind_btDispatcher_getNumManifolds_0=b.asm.emscripten_bind_btDispatcher_getNumManifolds_0).apply(null,arguments)},Nf=b._emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=function(){return(Nf=b._emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=b.asm.emscripten_bind_btDispatcher_getManifoldByIndexInternal_1).apply(null,arguments)},
Of=b._emscripten_bind_btDispatcher___destroy___0=function(){return(Of=b._emscripten_bind_btDispatcher___destroy___0=b.asm.emscripten_bind_btDispatcher___destroy___0).apply(null,arguments)},Pf=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=function(){return(Pf=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=b.asm.emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3).apply(null,arguments)},Qf=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=
function(){return(Qf=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=b.asm.emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5).apply(null,arguments)},Rf=b._emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1=function(){return(Rf=b._emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1=b.asm.emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1).apply(null,arguments)},Sf=b._emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1=function(){return(Sf=
b._emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1=b.asm.emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1).apply(null,arguments)},Tf=b._emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1=function(){return(Tf=b._emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1=b.asm.emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1).apply(null,arguments)},Uf=b._emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1=function(){return(Uf=b._emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1=
b.asm.emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1).apply(null,arguments)},Vf=b._emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0=function(){return(Vf=b._emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0=b.asm.emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0).apply(null,arguments)},Wf=b._emscripten_bind_btGeneric6DofConstraint_enableFeedback_1=function(){return(Wf=b._emscripten_bind_btGeneric6DofConstraint_enableFeedback_1=b.asm.emscripten_bind_btGeneric6DofConstraint_enableFeedback_1).apply(null,
arguments)},Xf=b._emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0=function(){return(Xf=b._emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0).apply(null,arguments)},Yf=b._emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1=function(){return(Yf=b._emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1).apply(null,
arguments)},Zf=b._emscripten_bind_btGeneric6DofConstraint_getParam_2=function(){return(Zf=b._emscripten_bind_btGeneric6DofConstraint_getParam_2=b.asm.emscripten_bind_btGeneric6DofConstraint_getParam_2).apply(null,arguments)},$f=b._emscripten_bind_btGeneric6DofConstraint_setParam_3=function(){return($f=b._emscripten_bind_btGeneric6DofConstraint_setParam_3=b.asm.emscripten_bind_btGeneric6DofConstraint_setParam_3).apply(null,arguments)},ag=b._emscripten_bind_btGeneric6DofConstraint___destroy___0=function(){return(ag=
b._emscripten_bind_btGeneric6DofConstraint___destroy___0=b.asm.emscripten_bind_btGeneric6DofConstraint___destroy___0).apply(null,arguments)},bg=b._emscripten_bind_btStridingMeshInterface_setScaling_1=function(){return(bg=b._emscripten_bind_btStridingMeshInterface_setScaling_1=b.asm.emscripten_bind_btStridingMeshInterface_setScaling_1).apply(null,arguments)},cg=b._emscripten_bind_btStridingMeshInterface___destroy___0=function(){return(cg=b._emscripten_bind_btStridingMeshInterface___destroy___0=b.asm.emscripten_bind_btStridingMeshInterface___destroy___0).apply(null,
arguments)},dg=b._emscripten_bind_btMotionState_getWorldTransform_1=function(){return(dg=b._emscripten_bind_btMotionState_getWorldTransform_1=b.asm.emscripten_bind_btMotionState_getWorldTransform_1).apply(null,arguments)},eg=b._emscripten_bind_btMotionState_setWorldTransform_1=function(){return(eg=b._emscripten_bind_btMotionState_setWorldTransform_1=b.asm.emscripten_bind_btMotionState_setWorldTransform_1).apply(null,arguments)},fg=b._emscripten_bind_btMotionState___destroy___0=function(){return(fg=
b._emscripten_bind_btMotionState___destroy___0=b.asm.emscripten_bind_btMotionState___destroy___0).apply(null,arguments)},gg=b._emscripten_bind_ConvexResultCallback_hasHit_0=function(){return(gg=b._emscripten_bind_ConvexResultCallback_hasHit_0=b.asm.emscripten_bind_ConvexResultCallback_hasHit_0).apply(null,arguments)},hg=b._emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0=function(){return(hg=b._emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0).apply(null,
arguments)},ig=b._emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1=function(){return(ig=b._emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1).apply(null,arguments)},jg=b._emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0=function(){return(jg=b._emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0=b.asm.emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0).apply(null,
arguments)},kg=b._emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1=function(){return(kg=b._emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1=b.asm.emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1).apply(null,arguments)},lg=b._emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0=function(){return(lg=b._emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0=b.asm.emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0).apply(null,
arguments)},mg=b._emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1=function(){return(mg=b._emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1=b.asm.emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1).apply(null,arguments)},ng=b._emscripten_bind_ConvexResultCallback___destroy___0=function(){return(ng=b._emscripten_bind_ConvexResultCallback___destroy___0=b.asm.emscripten_bind_ConvexResultCallback___destroy___0).apply(null,arguments)},og=b._emscripten_bind_ContactResultCallback_addSingleResult_7=
function(){return(og=b._emscripten_bind_ContactResultCallback_addSingleResult_7=b.asm.emscripten_bind_ContactResultCallback_addSingleResult_7).apply(null,arguments)},pg=b._emscripten_bind_ContactResultCallback___destroy___0=function(){return(pg=b._emscripten_bind_ContactResultCallback___destroy___0=b.asm.emscripten_bind_ContactResultCallback___destroy___0).apply(null,arguments)},qg=b._emscripten_bind_btSoftBodySolver___destroy___0=function(){return(qg=b._emscripten_bind_btSoftBodySolver___destroy___0=
b.asm.emscripten_bind_btSoftBodySolver___destroy___0).apply(null,arguments)},rg=b._emscripten_bind_RayResultCallback_hasHit_0=function(){return(rg=b._emscripten_bind_RayResultCallback_hasHit_0=b.asm.emscripten_bind_RayResultCallback_hasHit_0).apply(null,arguments)},sg=b._emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=function(){return(sg=b._emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0).apply(null,
arguments)},tg=b._emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=function(){return(tg=b._emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1).apply(null,arguments)},ug=b._emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=function(){return(ug=b._emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=b.asm.emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0).apply(null,arguments)},
vg=b._emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=function(){return(vg=b._emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=b.asm.emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1).apply(null,arguments)},wg=b._emscripten_bind_RayResultCallback_get_m_closestHitFraction_0=function(){return(wg=b._emscripten_bind_RayResultCallback_get_m_closestHitFraction_0=b.asm.emscripten_bind_RayResultCallback_get_m_closestHitFraction_0).apply(null,arguments)},xg=b._emscripten_bind_RayResultCallback_set_m_closestHitFraction_1=
function(){return(xg=b._emscripten_bind_RayResultCallback_set_m_closestHitFraction_1=b.asm.emscripten_bind_RayResultCallback_set_m_closestHitFraction_1).apply(null,arguments)},yg=b._emscripten_bind_RayResultCallback_get_m_collisionObject_0=function(){return(yg=b._emscripten_bind_RayResultCallback_get_m_collisionObject_0=b.asm.emscripten_bind_RayResultCallback_get_m_collisionObject_0).apply(null,arguments)},zg=b._emscripten_bind_RayResultCallback_set_m_collisionObject_1=function(){return(zg=b._emscripten_bind_RayResultCallback_set_m_collisionObject_1=
b.asm.emscripten_bind_RayResultCallback_set_m_collisionObject_1).apply(null,arguments)},Ag=b._emscripten_bind_RayResultCallback___destroy___0=function(){return(Ag=b._emscripten_bind_RayResultCallback___destroy___0=b.asm.emscripten_bind_RayResultCallback___destroy___0).apply(null,arguments)},Bg=b._emscripten_bind_btMatrix3x3_setEulerZYX_3=function(){return(Bg=b._emscripten_bind_btMatrix3x3_setEulerZYX_3=b.asm.emscripten_bind_btMatrix3x3_setEulerZYX_3).apply(null,arguments)},Cg=b._emscripten_bind_btMatrix3x3_getRotation_1=
function(){return(Cg=b._emscripten_bind_btMatrix3x3_getRotation_1=b.asm.emscripten_bind_btMatrix3x3_getRotation_1).apply(null,arguments)},Dg=b._emscripten_bind_btMatrix3x3_getRow_1=function(){return(Dg=b._emscripten_bind_btMatrix3x3_getRow_1=b.asm.emscripten_bind_btMatrix3x3_getRow_1).apply(null,arguments)},Eg=b._emscripten_bind_btMatrix3x3___destroy___0=function(){return(Eg=b._emscripten_bind_btMatrix3x3___destroy___0=b.asm.emscripten_bind_btMatrix3x3___destroy___0).apply(null,arguments)},Fg=b._emscripten_bind_btScalarArray_size_0=
function(){return(Fg=b._emscripten_bind_btScalarArray_size_0=b.asm.emscripten_bind_btScalarArray_size_0).apply(null,arguments)},Gg=b._emscripten_bind_btScalarArray_at_1=function(){return(Gg=b._emscripten_bind_btScalarArray_at_1=b.asm.emscripten_bind_btScalarArray_at_1).apply(null,arguments)},Hg=b._emscripten_bind_btScalarArray___destroy___0=function(){return(Hg=b._emscripten_bind_btScalarArray___destroy___0=b.asm.emscripten_bind_btScalarArray___destroy___0).apply(null,arguments)},Ig=b._emscripten_bind_Material_get_m_kLST_0=
function(){return(Ig=b._emscripten_bind_Material_get_m_kLST_0=b.asm.emscripten_bind_Material_get_m_kLST_0).apply(null,arguments)},Jg=b._emscripten_bind_Material_set_m_kLST_1=function(){return(Jg=b._emscripten_bind_Material_set_m_kLST_1=b.asm.emscripten_bind_Material_set_m_kLST_1).apply(null,arguments)},Kg=b._emscripten_bind_Material_get_m_kAST_0=function(){return(Kg=b._emscripten_bind_Material_get_m_kAST_0=b.asm.emscripten_bind_Material_get_m_kAST_0).apply(null,arguments)},Lg=b._emscripten_bind_Material_set_m_kAST_1=
function(){return(Lg=b._emscripten_bind_Material_set_m_kAST_1=b.asm.emscripten_bind_Material_set_m_kAST_1).apply(null,arguments)},Mg=b._emscripten_bind_Material_get_m_kVST_0=function(){return(Mg=b._emscripten_bind_Material_get_m_kVST_0=b.asm.emscripten_bind_Material_get_m_kVST_0).apply(null,arguments)},Ng=b._emscripten_bind_Material_set_m_kVST_1=function(){return(Ng=b._emscripten_bind_Material_set_m_kVST_1=b.asm.emscripten_bind_Material_set_m_kVST_1).apply(null,arguments)},Og=b._emscripten_bind_Material_get_m_flags_0=
function(){return(Og=b._emscripten_bind_Material_get_m_flags_0=b.asm.emscripten_bind_Material_get_m_flags_0).apply(null,arguments)},Pg=b._emscripten_bind_Material_set_m_flags_1=function(){return(Pg=b._emscripten_bind_Material_set_m_flags_1=b.asm.emscripten_bind_Material_set_m_flags_1).apply(null,arguments)},Qg=b._emscripten_bind_Material___destroy___0=function(){return(Qg=b._emscripten_bind_Material___destroy___0=b.asm.emscripten_bind_Material___destroy___0).apply(null,arguments)},Rg=b._emscripten_bind_btDispatcherInfo_get_m_timeStep_0=
function(){return(Rg=b._emscripten_bind_btDispatcherInfo_get_m_timeStep_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_timeStep_0).apply(null,arguments)},Sg=b._emscripten_bind_btDispatcherInfo_set_m_timeStep_1=function(){return(Sg=b._emscripten_bind_btDispatcherInfo_set_m_timeStep_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_timeStep_1).apply(null,arguments)},Tg=b._emscripten_bind_btDispatcherInfo_get_m_stepCount_0=function(){return(Tg=b._emscripten_bind_btDispatcherInfo_get_m_stepCount_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_stepCount_0).apply(null,
arguments)},Ug=b._emscripten_bind_btDispatcherInfo_set_m_stepCount_1=function(){return(Ug=b._emscripten_bind_btDispatcherInfo_set_m_stepCount_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_stepCount_1).apply(null,arguments)},Vg=b._emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0=function(){return(Vg=b._emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0).apply(null,arguments)},Wg=b._emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1=
function(){return(Wg=b._emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1).apply(null,arguments)},Xg=b._emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0=function(){return(Xg=b._emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0).apply(null,arguments)},Yg=b._emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1=function(){return(Yg=b._emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1=
b.asm.emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1).apply(null,arguments)},Zg=b._emscripten_bind_btDispatcherInfo_get_m_useContinuous_0=function(){return(Zg=b._emscripten_bind_btDispatcherInfo_get_m_useContinuous_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_useContinuous_0).apply(null,arguments)},$g=b._emscripten_bind_btDispatcherInfo_set_m_useContinuous_1=function(){return($g=b._emscripten_bind_btDispatcherInfo_set_m_useContinuous_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_useContinuous_1).apply(null,
arguments)},ah=b._emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0=function(){return(ah=b._emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0).apply(null,arguments)},bh=b._emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1=function(){return(bh=b._emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1).apply(null,arguments)},ch=b._emscripten_bind_btDispatcherInfo_get_m_enableSPU_0=
function(){return(ch=b._emscripten_bind_btDispatcherInfo_get_m_enableSPU_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_enableSPU_0).apply(null,arguments)},dh=b._emscripten_bind_btDispatcherInfo_set_m_enableSPU_1=function(){return(dh=b._emscripten_bind_btDispatcherInfo_set_m_enableSPU_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_enableSPU_1).apply(null,arguments)},eh=b._emscripten_bind_btDispatcherInfo_get_m_useEpa_0=function(){return(eh=b._emscripten_bind_btDispatcherInfo_get_m_useEpa_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_useEpa_0).apply(null,
arguments)},fh=b._emscripten_bind_btDispatcherInfo_set_m_useEpa_1=function(){return(fh=b._emscripten_bind_btDispatcherInfo_set_m_useEpa_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_useEpa_1).apply(null,arguments)},gh=b._emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0=function(){return(gh=b._emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0).apply(null,arguments)},hh=b._emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1=
function(){return(hh=b._emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1).apply(null,arguments)},ih=b._emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0=function(){return(ih=b._emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0).apply(null,arguments)},jh=b._emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1=
function(){return(jh=b._emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1).apply(null,arguments)},kh=b._emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0=function(){return(kh=b._emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0=b.asm.emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0).apply(null,arguments)},lh=b._emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1=
function(){return(lh=b._emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1=b.asm.emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1).apply(null,arguments)},mh=b._emscripten_bind_btDispatcherInfo___destroy___0=function(){return(mh=b._emscripten_bind_btDispatcherInfo___destroy___0=b.asm.emscripten_bind_btDispatcherInfo___destroy___0).apply(null,arguments)},nh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0=function(){return(nh=
b._emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0).apply(null,arguments)},oh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1=function(){return(oh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1).apply(null,arguments)},ph=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0=
function(){return(ph=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0).apply(null,arguments)},qh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1=function(){return(qh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1).apply(null,arguments)},rh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0=
function(){return(rh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0).apply(null,arguments)},sh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1=function(){return(sh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1).apply(null,arguments)},th=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0=
function(){return(th=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0).apply(null,arguments)},uh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1=function(){return(uh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1).apply(null,arguments)},vh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0=
function(){return(vh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0).apply(null,arguments)},wh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1=function(){return(wh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1).apply(null,arguments)},xh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0=
function(){return(xh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0).apply(null,arguments)},yh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1=function(){return(yh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1).apply(null,arguments)},zh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0=
function(){return(zh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0).apply(null,arguments)},Ah=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1=function(){return(Ah=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1).apply(null,arguments)},Bh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0=
function(){return(Bh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0).apply(null,arguments)},Ch=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1=function(){return(Ch=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1).apply(null,arguments)},Dh=
b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0=function(){return(Dh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0).apply(null,arguments)},Eh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1=function(){return(Eh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1).apply(null,
arguments)},Fh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0=function(){return(Fh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0).apply(null,arguments)},Gh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1=function(){return(Gh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1).apply(null,
arguments)},Hh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0=function(){return(Hh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0).apply(null,arguments)},Ih=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1=function(){return(Ih=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1).apply(null,
arguments)},Jh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0=function(){return(Jh=b._emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0=b.asm.emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0).apply(null,arguments)},Kh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1=function(){return(Kh=b._emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1=b.asm.emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1).apply(null,
arguments)},Lh=b._emscripten_bind_btWheelInfoConstructionInfo___destroy___0=function(){return(Lh=b._emscripten_bind_btWheelInfoConstructionInfo___destroy___0=b.asm.emscripten_bind_btWheelInfoConstructionInfo___destroy___0).apply(null,arguments)},Mh=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=function(){return(Mh=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=b.asm.emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1).apply(null,
arguments)},Nh=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=function(){return(Nh=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=b.asm.emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2).apply(null,arguments)},Oh=b._emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=function(){return(Oh=b._emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=b.asm.emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1).apply(null,
arguments)},Ph=b._emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0=function(){return(Ph=b._emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0=b.asm.emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0).apply(null,arguments)},Qh=b._emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=function(){return(Qh=b._emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=b.asm.emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2).apply(null,arguments)},
Rh=b._emscripten_bind_btConvexTriangleMeshShape_setMargin_1=function(){return(Rh=b._emscripten_bind_btConvexTriangleMeshShape_setMargin_1=b.asm.emscripten_bind_btConvexTriangleMeshShape_setMargin_1).apply(null,arguments)},Sh=b._emscripten_bind_btConvexTriangleMeshShape_getMargin_0=function(){return(Sh=b._emscripten_bind_btConvexTriangleMeshShape_getMargin_0=b.asm.emscripten_bind_btConvexTriangleMeshShape_getMargin_0).apply(null,arguments)},Th=b._emscripten_bind_btConvexTriangleMeshShape___destroy___0=
function(){return(Th=b._emscripten_bind_btConvexTriangleMeshShape___destroy___0=b.asm.emscripten_bind_btConvexTriangleMeshShape___destroy___0).apply(null,arguments)},Uh=b._emscripten_bind_btBroadphaseInterface_getOverlappingPairCache_0=function(){return(Uh=b._emscripten_bind_btBroadphaseInterface_getOverlappingPairCache_0=b.asm.emscripten_bind_btBroadphaseInterface_getOverlappingPairCache_0).apply(null,arguments)},Vh=b._emscripten_bind_btBroadphaseInterface___destroy___0=function(){return(Vh=b._emscripten_bind_btBroadphaseInterface___destroy___0=
b.asm.emscripten_bind_btBroadphaseInterface___destroy___0).apply(null,arguments)},Wh=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=function(){return(Wh=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=b.asm.emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3).apply(null,arguments)},Xh=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=function(){return(Xh=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=
b.asm.emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4).apply(null,arguments)},Yh=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=function(){return(Yh=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0).apply(null,arguments)},Zh=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=function(){return(Zh=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=
b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1).apply(null,arguments)},$h=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=function(){return($h=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0).apply(null,arguments)},ai=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=function(){return(ai=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=
b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1).apply(null,arguments)},bi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=function(){return(bi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0).apply(null,arguments)},ci=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=function(){return(ci=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1).apply(null,
arguments)},di=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=function(){return(di=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0).apply(null,arguments)},ei=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=function(){return(ei=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1).apply(null,
arguments)},fi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=function(){return(fi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0).apply(null,arguments)},gi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=function(){return(gi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1).apply(null,
arguments)},hi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=function(){return(hi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0).apply(null,arguments)},ii=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=function(){return(ii=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1).apply(null,
arguments)},ji=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=function(){return(ji=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0).apply(null,arguments)},ki=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=function(){return(ki=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1).apply(null,
arguments)},li=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=function(){return(li=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0).apply(null,arguments)},mi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=function(){return(mi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1).apply(null,
arguments)},ni=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=function(){return(ni=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0).apply(null,arguments)},oi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=function(){return(oi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1).apply(null,
arguments)},pi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=function(){return(pi=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0).apply(null,arguments)},qi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=function(){return(qi=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=
b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1).apply(null,arguments)},ri=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=function(){return(ri=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0).apply(null,arguments)},si=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=
function(){return(si=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1).apply(null,arguments)},ti=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=function(){return(ti=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=b.asm.emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0).apply(null,
arguments)},ui=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=function(){return(ui=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=b.asm.emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1).apply(null,arguments)},vi=b._emscripten_bind_btRigidBodyConstructionInfo___destroy___0=function(){return(vi=b._emscripten_bind_btRigidBodyConstructionInfo___destroy___0=b.asm.emscripten_bind_btRigidBodyConstructionInfo___destroy___0).apply(null,
arguments)},wi=b._emscripten_bind_btCollisionConfiguration___destroy___0=function(){return(wi=b._emscripten_bind_btCollisionConfiguration___destroy___0=b.asm.emscripten_bind_btCollisionConfiguration___destroy___0).apply(null,arguments)},xi=b._emscripten_bind_btPersistentManifold_btPersistentManifold_0=function(){return(xi=b._emscripten_bind_btPersistentManifold_btPersistentManifold_0=b.asm.emscripten_bind_btPersistentManifold_btPersistentManifold_0).apply(null,arguments)},yi=b._emscripten_bind_btPersistentManifold_getBody0_0=
function(){return(yi=b._emscripten_bind_btPersistentManifold_getBody0_0=b.asm.emscripten_bind_btPersistentManifold_getBody0_0).apply(null,arguments)},zi=b._emscripten_bind_btPersistentManifold_getBody1_0=function(){return(zi=b._emscripten_bind_btPersistentManifold_getBody1_0=b.asm.emscripten_bind_btPersistentManifold_getBody1_0).apply(null,arguments)},Ai=b._emscripten_bind_btPersistentManifold_getNumContacts_0=function(){return(Ai=b._emscripten_bind_btPersistentManifold_getNumContacts_0=b.asm.emscripten_bind_btPersistentManifold_getNumContacts_0).apply(null,
arguments)},Bi=b._emscripten_bind_btPersistentManifold_getContactPoint_1=function(){return(Bi=b._emscripten_bind_btPersistentManifold_getContactPoint_1=b.asm.emscripten_bind_btPersistentManifold_getContactPoint_1).apply(null,arguments)},Ci=b._emscripten_bind_btPersistentManifold___destroy___0=function(){return(Ci=b._emscripten_bind_btPersistentManifold___destroy___0=b.asm.emscripten_bind_btPersistentManifold___destroy___0).apply(null,arguments)},Di=b._emscripten_bind_btCompoundShape_btCompoundShape_0=
function(){return(Di=b._emscripten_bind_btCompoundShape_btCompoundShape_0=b.asm.emscripten_bind_btCompoundShape_btCompoundShape_0).apply(null,arguments)},Ei=b._emscripten_bind_btCompoundShape_btCompoundShape_1=function(){return(Ei=b._emscripten_bind_btCompoundShape_btCompoundShape_1=b.asm.emscripten_bind_btCompoundShape_btCompoundShape_1).apply(null,arguments)},Fi=b._emscripten_bind_btCompoundShape_addChildShape_2=function(){return(Fi=b._emscripten_bind_btCompoundShape_addChildShape_2=b.asm.emscripten_bind_btCompoundShape_addChildShape_2).apply(null,
arguments)},Gi=b._emscripten_bind_btCompoundShape_removeChildShape_1=function(){return(Gi=b._emscripten_bind_btCompoundShape_removeChildShape_1=b.asm.emscripten_bind_btCompoundShape_removeChildShape_1).apply(null,arguments)},Hi=b._emscripten_bind_btCompoundShape_removeChildShapeByIndex_1=function(){return(Hi=b._emscripten_bind_btCompoundShape_removeChildShapeByIndex_1=b.asm.emscripten_bind_btCompoundShape_removeChildShapeByIndex_1).apply(null,arguments)},Ii=b._emscripten_bind_btCompoundShape_getNumChildShapes_0=
function(){return(Ii=b._emscripten_bind_btCompoundShape_getNumChildShapes_0=b.asm.emscripten_bind_btCompoundShape_getNumChildShapes_0).apply(null,arguments)},Ji=b._emscripten_bind_btCompoundShape_getChildShape_1=function(){return(Ji=b._emscripten_bind_btCompoundShape_getChildShape_1=b.asm.emscripten_bind_btCompoundShape_getChildShape_1).apply(null,arguments)},Ki=b._emscripten_bind_btCompoundShape_updateChildTransform_2=function(){return(Ki=b._emscripten_bind_btCompoundShape_updateChildTransform_2=
b.asm.emscripten_bind_btCompoundShape_updateChildTransform_2).apply(null,arguments)},Li=b._emscripten_bind_btCompoundShape_updateChildTransform_3=function(){return(Li=b._emscripten_bind_btCompoundShape_updateChildTransform_3=b.asm.emscripten_bind_btCompoundShape_updateChildTransform_3).apply(null,arguments)},Mi=b._emscripten_bind_btCompoundShape_setMargin_1=function(){return(Mi=b._emscripten_bind_btCompoundShape_setMargin_1=b.asm.emscripten_bind_btCompoundShape_setMargin_1).apply(null,arguments)},
Ni=b._emscripten_bind_btCompoundShape_getMargin_0=function(){return(Ni=b._emscripten_bind_btCompoundShape_getMargin_0=b.asm.emscripten_bind_btCompoundShape_getMargin_0).apply(null,arguments)},Oi=b._emscripten_bind_btCompoundShape_setLocalScaling_1=function(){return(Oi=b._emscripten_bind_btCompoundShape_setLocalScaling_1=b.asm.emscripten_bind_btCompoundShape_setLocalScaling_1).apply(null,arguments)},Pi=b._emscripten_bind_btCompoundShape_getLocalScaling_0=function(){return(Pi=b._emscripten_bind_btCompoundShape_getLocalScaling_0=
b.asm.emscripten_bind_btCompoundShape_getLocalScaling_0).apply(null,arguments)},Qi=b._emscripten_bind_btCompoundShape_calculateLocalInertia_2=function(){return(Qi=b._emscripten_bind_btCompoundShape_calculateLocalInertia_2=b.asm.emscripten_bind_btCompoundShape_calculateLocalInertia_2).apply(null,arguments)},Ri=b._emscripten_bind_btCompoundShape___destroy___0=function(){return(Ri=b._emscripten_bind_btCompoundShape___destroy___0=b.asm.emscripten_bind_btCompoundShape___destroy___0).apply(null,arguments)},
Si=b._emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2=function(){return(Si=b._emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2=b.asm.emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2).apply(null,arguments)},Ti=b._emscripten_bind_ClosestConvexResultCallback_hasHit_0=function(){return(Ti=b._emscripten_bind_ClosestConvexResultCallback_hasHit_0=b.asm.emscripten_bind_ClosestConvexResultCallback_hasHit_0).apply(null,arguments)},
Ui=b._emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0=function(){return(Ui=b._emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0).apply(null,arguments)},Vi=b._emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1=function(){return(Vi=b._emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1).apply(null,
arguments)},Wi=b._emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0=function(){return(Wi=b._emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0).apply(null,arguments)},Xi=b._emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1=function(){return(Xi=b._emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1).apply(null,
arguments)},Yi=b._emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0=function(){return(Yi=b._emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0).apply(null,arguments)},Zi=b._emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1=function(){return(Zi=b._emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1).apply(null,
arguments)},$i=b._emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0=function(){return($i=b._emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0).apply(null,arguments)},aj=b._emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1=function(){return(aj=b._emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1).apply(null,
arguments)},bj=b._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0=function(){return(bj=b._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0).apply(null,arguments)},cj=b._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1=function(){return(cj=b._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1).apply(null,
arguments)},dj=b._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0=function(){return(dj=b._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0).apply(null,arguments)},ej=b._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1=function(){return(ej=b._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1).apply(null,
arguments)},fj=b._emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0=function(){return(fj=b._emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0=b.asm.emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0).apply(null,arguments)},gj=b._emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1=function(){return(gj=b._emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1=b.asm.emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1).apply(null,
arguments)},hj=b._emscripten_bind_ClosestConvexResultCallback___destroy___0=function(){return(hj=b._emscripten_bind_ClosestConvexResultCallback___destroy___0=b.asm.emscripten_bind_ClosestConvexResultCallback___destroy___0).apply(null,arguments)},ij=b._emscripten_bind_AllHitsRayResultCallback_AllHitsRayResultCallback_2=function(){return(ij=b._emscripten_bind_AllHitsRayResultCallback_AllHitsRayResultCallback_2=b.asm.emscripten_bind_AllHitsRayResultCallback_AllHitsRayResultCallback_2).apply(null,arguments)},
jj=b._emscripten_bind_AllHitsRayResultCallback_hasHit_0=function(){return(jj=b._emscripten_bind_AllHitsRayResultCallback_hasHit_0=b.asm.emscripten_bind_AllHitsRayResultCallback_hasHit_0).apply(null,arguments)},kj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObjects_0=function(){return(kj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObjects_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_collisionObjects_0).apply(null,arguments)},lj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObjects_1=
function(){return(lj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObjects_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_collisionObjects_1).apply(null,arguments)},mj=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayFromWorld_0=function(){return(mj=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayFromWorld_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_rayFromWorld_0).apply(null,arguments)},nj=b._emscripten_bind_AllHitsRayResultCallback_set_m_rayFromWorld_1=function(){return(nj=
b._emscripten_bind_AllHitsRayResultCallback_set_m_rayFromWorld_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_rayFromWorld_1).apply(null,arguments)},oj=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayToWorld_0=function(){return(oj=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayToWorld_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_rayToWorld_0).apply(null,arguments)},pj=b._emscripten_bind_AllHitsRayResultCallback_set_m_rayToWorld_1=function(){return(pj=b._emscripten_bind_AllHitsRayResultCallback_set_m_rayToWorld_1=
b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_rayToWorld_1).apply(null,arguments)},qj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitNormalWorld_0=function(){return(qj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitNormalWorld_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_hitNormalWorld_0).apply(null,arguments)},rj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitNormalWorld_1=function(){return(rj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitNormalWorld_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_hitNormalWorld_1).apply(null,
arguments)},sj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitPointWorld_0=function(){return(sj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitPointWorld_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_hitPointWorld_0).apply(null,arguments)},tj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitPointWorld_1=function(){return(tj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitPointWorld_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_hitPointWorld_1).apply(null,arguments)},
uj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitFractions_0=function(){return(uj=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitFractions_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_hitFractions_0).apply(null,arguments)},vj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitFractions_1=function(){return(vj=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitFractions_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_hitFractions_1).apply(null,arguments)},wj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterGroup_0=
function(){return(wj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterGroup_0).apply(null,arguments)},xj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterGroup_1=function(){return(xj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterGroup_1).apply(null,arguments)},yj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterMask_0=
function(){return(yj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterMask_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterMask_0).apply(null,arguments)},zj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterMask_1=function(){return(zj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterMask_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterMask_1).apply(null,arguments)},Aj=b._emscripten_bind_AllHitsRayResultCallback_get_m_closestHitFraction_0=
function(){return(Aj=b._emscripten_bind_AllHitsRayResultCallback_get_m_closestHitFraction_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_closestHitFraction_0).apply(null,arguments)},Bj=b._emscripten_bind_AllHitsRayResultCallback_set_m_closestHitFraction_1=function(){return(Bj=b._emscripten_bind_AllHitsRayResultCallback_set_m_closestHitFraction_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_closestHitFraction_1).apply(null,arguments)},Cj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObject_0=
function(){return(Cj=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObject_0=b.asm.emscripten_bind_AllHitsRayResultCallback_get_m_collisionObject_0).apply(null,arguments)},Dj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObject_1=function(){return(Dj=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObject_1=b.asm.emscripten_bind_AllHitsRayResultCallback_set_m_collisionObject_1).apply(null,arguments)},Ej=b._emscripten_bind_AllHitsRayResultCallback___destroy___0=function(){return(Ej=
b._emscripten_bind_AllHitsRayResultCallback___destroy___0=b.asm.emscripten_bind_AllHitsRayResultCallback___destroy___0).apply(null,arguments)},Fj=b._emscripten_bind_tMaterialArray_size_0=function(){return(Fj=b._emscripten_bind_tMaterialArray_size_0=b.asm.emscripten_bind_tMaterialArray_size_0).apply(null,arguments)},Gj=b._emscripten_bind_tMaterialArray_at_1=function(){return(Gj=b._emscripten_bind_tMaterialArray_at_1=b.asm.emscripten_bind_tMaterialArray_at_1).apply(null,arguments)},Hj=b._emscripten_bind_tMaterialArray___destroy___0=
function(){return(Hj=b._emscripten_bind_tMaterialArray___destroy___0=b.asm.emscripten_bind_tMaterialArray___destroy___0).apply(null,arguments)},Ij=b._emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1=function(){return(Ij=b._emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1=b.asm.emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1).apply(null,arguments)},Jj=b._emscripten_bind_btDefaultVehicleRaycaster_castRay_3=function(){return(Jj=b._emscripten_bind_btDefaultVehicleRaycaster_castRay_3=
b.asm.emscripten_bind_btDefaultVehicleRaycaster_castRay_3).apply(null,arguments)},Kj=b._emscripten_bind_btDefaultVehicleRaycaster___destroy___0=function(){return(Kj=b._emscripten_bind_btDefaultVehicleRaycaster___destroy___0=b.asm.emscripten_bind_btDefaultVehicleRaycaster___destroy___0).apply(null,arguments)},Lj=b._emscripten_bind_btEmptyShape_btEmptyShape_0=function(){return(Lj=b._emscripten_bind_btEmptyShape_btEmptyShape_0=b.asm.emscripten_bind_btEmptyShape_btEmptyShape_0).apply(null,arguments)},
Mj=b._emscripten_bind_btEmptyShape_setLocalScaling_1=function(){return(Mj=b._emscripten_bind_btEmptyShape_setLocalScaling_1=b.asm.emscripten_bind_btEmptyShape_setLocalScaling_1).apply(null,arguments)},Nj=b._emscripten_bind_btEmptyShape_getLocalScaling_0=function(){return(Nj=b._emscripten_bind_btEmptyShape_getLocalScaling_0=b.asm.emscripten_bind_btEmptyShape_getLocalScaling_0).apply(null,arguments)},Oj=b._emscripten_bind_btEmptyShape_calculateLocalInertia_2=function(){return(Oj=b._emscripten_bind_btEmptyShape_calculateLocalInertia_2=
b.asm.emscripten_bind_btEmptyShape_calculateLocalInertia_2).apply(null,arguments)},Pj=b._emscripten_bind_btEmptyShape___destroy___0=function(){return(Pj=b._emscripten_bind_btEmptyShape___destroy___0=b.asm.emscripten_bind_btEmptyShape___destroy___0).apply(null,arguments)},Qj=b._emscripten_bind_btConstraintSetting_btConstraintSetting_0=function(){return(Qj=b._emscripten_bind_btConstraintSetting_btConstraintSetting_0=b.asm.emscripten_bind_btConstraintSetting_btConstraintSetting_0).apply(null,arguments)},
Rj=b._emscripten_bind_btConstraintSetting_get_m_tau_0=function(){return(Rj=b._emscripten_bind_btConstraintSetting_get_m_tau_0=b.asm.emscripten_bind_btConstraintSetting_get_m_tau_0).apply(null,arguments)},Sj=b._emscripten_bind_btConstraintSetting_set_m_tau_1=function(){return(Sj=b._emscripten_bind_btConstraintSetting_set_m_tau_1=b.asm.emscripten_bind_btConstraintSetting_set_m_tau_1).apply(null,arguments)},Tj=b._emscripten_bind_btConstraintSetting_get_m_damping_0=function(){return(Tj=b._emscripten_bind_btConstraintSetting_get_m_damping_0=
b.asm.emscripten_bind_btConstraintSetting_get_m_damping_0).apply(null,arguments)},Uj=b._emscripten_bind_btConstraintSetting_set_m_damping_1=function(){return(Uj=b._emscripten_bind_btConstraintSetting_set_m_damping_1=b.asm.emscripten_bind_btConstraintSetting_set_m_damping_1).apply(null,arguments)},Vj=b._emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=function(){return(Vj=b._emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=b.asm.emscripten_bind_btConstraintSetting_get_m_impulseClamp_0).apply(null,
arguments)},Wj=b._emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=function(){return(Wj=b._emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=b.asm.emscripten_bind_btConstraintSetting_set_m_impulseClamp_1).apply(null,arguments)},Xj=b._emscripten_bind_btConstraintSetting___destroy___0=function(){return(Xj=b._emscripten_bind_btConstraintSetting___destroy___0=b.asm.emscripten_bind_btConstraintSetting___destroy___0).apply(null,arguments)},Yj=b._emscripten_bind_LocalShapeInfo_get_m_shapePart_0=
function(){return(Yj=b._emscripten_bind_LocalShapeInfo_get_m_shapePart_0=b.asm.emscripten_bind_LocalShapeInfo_get_m_shapePart_0).apply(null,arguments)},Zj=b._emscripten_bind_LocalShapeInfo_set_m_shapePart_1=function(){return(Zj=b._emscripten_bind_LocalShapeInfo_set_m_shapePart_1=b.asm.emscripten_bind_LocalShapeInfo_set_m_shapePart_1).apply(null,arguments)},ak=b._emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=function(){return(ak=b._emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=b.asm.emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0).apply(null,
arguments)},bk=b._emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=function(){return(bk=b._emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=b.asm.emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1).apply(null,arguments)},ck=b._emscripten_bind_LocalShapeInfo___destroy___0=function(){return(ck=b._emscripten_bind_LocalShapeInfo___destroy___0=b.asm.emscripten_bind_LocalShapeInfo___destroy___0).apply(null,arguments)},dk=b._emscripten_bind_btRigidBody_btRigidBody_1=function(){return(dk=b._emscripten_bind_btRigidBody_btRigidBody_1=
b.asm.emscripten_bind_btRigidBody_btRigidBody_1).apply(null,arguments)},ek=b._emscripten_bind_btRigidBody_getCenterOfMassTransform_0=function(){return(ek=b._emscripten_bind_btRigidBody_getCenterOfMassTransform_0=b.asm.emscripten_bind_btRigidBody_getCenterOfMassTransform_0).apply(null,arguments)},fk=b._emscripten_bind_btRigidBody_setCenterOfMassTransform_1=function(){return(fk=b._emscripten_bind_btRigidBody_setCenterOfMassTransform_1=b.asm.emscripten_bind_btRigidBody_setCenterOfMassTransform_1).apply(null,
arguments)},gk=b._emscripten_bind_btRigidBody_setSleepingThresholds_2=function(){return(gk=b._emscripten_bind_btRigidBody_setSleepingThresholds_2=b.asm.emscripten_bind_btRigidBody_setSleepingThresholds_2).apply(null,arguments)},hk=b._emscripten_bind_btRigidBody_getLinearDamping_0=function(){return(hk=b._emscripten_bind_btRigidBody_getLinearDamping_0=b.asm.emscripten_bind_btRigidBody_getLinearDamping_0).apply(null,arguments)},ik=b._emscripten_bind_btRigidBody_getAngularDamping_0=function(){return(ik=
b._emscripten_bind_btRigidBody_getAngularDamping_0=b.asm.emscripten_bind_btRigidBody_getAngularDamping_0).apply(null,arguments)},jk=b._emscripten_bind_btRigidBody_setDamping_2=function(){return(jk=b._emscripten_bind_btRigidBody_setDamping_2=b.asm.emscripten_bind_btRigidBody_setDamping_2).apply(null,arguments)},kk=b._emscripten_bind_btRigidBody_setMassProps_2=function(){return(kk=b._emscripten_bind_btRigidBody_setMassProps_2=b.asm.emscripten_bind_btRigidBody_setMassProps_2).apply(null,arguments)},
lk=b._emscripten_bind_btRigidBody_getLinearFactor_0=function(){return(lk=b._emscripten_bind_btRigidBody_getLinearFactor_0=b.asm.emscripten_bind_btRigidBody_getLinearFactor_0).apply(null,arguments)},mk=b._emscripten_bind_btRigidBody_setLinearFactor_1=function(){return(mk=b._emscripten_bind_btRigidBody_setLinearFactor_1=b.asm.emscripten_bind_btRigidBody_setLinearFactor_1).apply(null,arguments)},nk=b._emscripten_bind_btRigidBody_applyTorque_1=function(){return(nk=b._emscripten_bind_btRigidBody_applyTorque_1=
b.asm.emscripten_bind_btRigidBody_applyTorque_1).apply(null,arguments)},ok=b._emscripten_bind_btRigidBody_applyLocalTorque_1=function(){return(ok=b._emscripten_bind_btRigidBody_applyLocalTorque_1=b.asm.emscripten_bind_btRigidBody_applyLocalTorque_1).apply(null,arguments)},pk=b._emscripten_bind_btRigidBody_applyForce_2=function(){return(pk=b._emscripten_bind_btRigidBody_applyForce_2=b.asm.emscripten_bind_btRigidBody_applyForce_2).apply(null,arguments)},qk=b._emscripten_bind_btRigidBody_applyCentralForce_1=
function(){return(qk=b._emscripten_bind_btRigidBody_applyCentralForce_1=b.asm.emscripten_bind_btRigidBody_applyCentralForce_1).apply(null,arguments)},rk=b._emscripten_bind_btRigidBody_applyCentralLocalForce_1=function(){return(rk=b._emscripten_bind_btRigidBody_applyCentralLocalForce_1=b.asm.emscripten_bind_btRigidBody_applyCentralLocalForce_1).apply(null,arguments)},sk=b._emscripten_bind_btRigidBody_applyTorqueImpulse_1=function(){return(sk=b._emscripten_bind_btRigidBody_applyTorqueImpulse_1=b.asm.emscripten_bind_btRigidBody_applyTorqueImpulse_1).apply(null,
arguments)},tk=b._emscripten_bind_btRigidBody_applyImpulse_2=function(){return(tk=b._emscripten_bind_btRigidBody_applyImpulse_2=b.asm.emscripten_bind_btRigidBody_applyImpulse_2).apply(null,arguments)},uk=b._emscripten_bind_btRigidBody_applyCentralImpulse_1=function(){return(uk=b._emscripten_bind_btRigidBody_applyCentralImpulse_1=b.asm.emscripten_bind_btRigidBody_applyCentralImpulse_1).apply(null,arguments)},vk=b._emscripten_bind_btRigidBody_updateInertiaTensor_0=function(){return(vk=b._emscripten_bind_btRigidBody_updateInertiaTensor_0=
b.asm.emscripten_bind_btRigidBody_updateInertiaTensor_0).apply(null,arguments)},wk=b._emscripten_bind_btRigidBody_getLinearVelocity_0=function(){return(wk=b._emscripten_bind_btRigidBody_getLinearVelocity_0=b.asm.emscripten_bind_btRigidBody_getLinearVelocity_0).apply(null,arguments)},xk=b._emscripten_bind_btRigidBody_getAngularVelocity_0=function(){return(xk=b._emscripten_bind_btRigidBody_getAngularVelocity_0=b.asm.emscripten_bind_btRigidBody_getAngularVelocity_0).apply(null,arguments)},yk=b._emscripten_bind_btRigidBody_setLinearVelocity_1=
function(){return(yk=b._emscripten_bind_btRigidBody_setLinearVelocity_1=b.asm.emscripten_bind_btRigidBody_setLinearVelocity_1).apply(null,arguments)},zk=b._emscripten_bind_btRigidBody_setAngularVelocity_1=function(){return(zk=b._emscripten_bind_btRigidBody_setAngularVelocity_1=b.asm.emscripten_bind_btRigidBody_setAngularVelocity_1).apply(null,arguments)},Ak=b._emscripten_bind_btRigidBody_getMotionState_0=function(){return(Ak=b._emscripten_bind_btRigidBody_getMotionState_0=b.asm.emscripten_bind_btRigidBody_getMotionState_0).apply(null,
arguments)},Bk=b._emscripten_bind_btRigidBody_setMotionState_1=function(){return(Bk=b._emscripten_bind_btRigidBody_setMotionState_1=b.asm.emscripten_bind_btRigidBody_setMotionState_1).apply(null,arguments)},Ck=b._emscripten_bind_btRigidBody_getAngularFactor_0=function(){return(Ck=b._emscripten_bind_btRigidBody_getAngularFactor_0=b.asm.emscripten_bind_btRigidBody_getAngularFactor_0).apply(null,arguments)},Dk=b._emscripten_bind_btRigidBody_setAngularFactor_1=function(){return(Dk=b._emscripten_bind_btRigidBody_setAngularFactor_1=
b.asm.emscripten_bind_btRigidBody_setAngularFactor_1).apply(null,arguments)},Ek=b._emscripten_bind_btRigidBody_upcast_1=function(){return(Ek=b._emscripten_bind_btRigidBody_upcast_1=b.asm.emscripten_bind_btRigidBody_upcast_1).apply(null,arguments)},Fk=b._emscripten_bind_btRigidBody_getAabb_2=function(){return(Fk=b._emscripten_bind_btRigidBody_getAabb_2=b.asm.emscripten_bind_btRigidBody_getAabb_2).apply(null,arguments)},Gk=b._emscripten_bind_btRigidBody_applyGravity_0=function(){return(Gk=b._emscripten_bind_btRigidBody_applyGravity_0=
b.asm.emscripten_bind_btRigidBody_applyGravity_0).apply(null,arguments)},Hk=b._emscripten_bind_btRigidBody_getGravity_0=function(){return(Hk=b._emscripten_bind_btRigidBody_getGravity_0=b.asm.emscripten_bind_btRigidBody_getGravity_0).apply(null,arguments)},Ik=b._emscripten_bind_btRigidBody_setGravity_1=function(){return(Ik=b._emscripten_bind_btRigidBody_setGravity_1=b.asm.emscripten_bind_btRigidBody_setGravity_1).apply(null,arguments)},Jk=b._emscripten_bind_btRigidBody_getBroadphaseProxy_0=function(){return(Jk=
b._emscripten_bind_btRigidBody_getBroadphaseProxy_0=b.asm.emscripten_bind_btRigidBody_getBroadphaseProxy_0).apply(null,arguments)},Kk=b._emscripten_bind_btRigidBody_clearForces_0=function(){return(Kk=b._emscripten_bind_btRigidBody_clearForces_0=b.asm.emscripten_bind_btRigidBody_clearForces_0).apply(null,arguments)},Lk=b._emscripten_bind_btRigidBody_setAnisotropicFriction_2=function(){return(Lk=b._emscripten_bind_btRigidBody_setAnisotropicFriction_2=b.asm.emscripten_bind_btRigidBody_setAnisotropicFriction_2).apply(null,
arguments)},Mk=b._emscripten_bind_btRigidBody_getCollisionShape_0=function(){return(Mk=b._emscripten_bind_btRigidBody_getCollisionShape_0=b.asm.emscripten_bind_btRigidBody_getCollisionShape_0).apply(null,arguments)},Nk=b._emscripten_bind_btRigidBody_setContactProcessingThreshold_1=function(){return(Nk=b._emscripten_bind_btRigidBody_setContactProcessingThreshold_1=b.asm.emscripten_bind_btRigidBody_setContactProcessingThreshold_1).apply(null,arguments)},Ok=b._emscripten_bind_btRigidBody_setActivationState_1=
function(){return(Ok=b._emscripten_bind_btRigidBody_setActivationState_1=b.asm.emscripten_bind_btRigidBody_setActivationState_1).apply(null,arguments)},Pk=b._emscripten_bind_btRigidBody_forceActivationState_1=function(){return(Pk=b._emscripten_bind_btRigidBody_forceActivationState_1=b.asm.emscripten_bind_btRigidBody_forceActivationState_1).apply(null,arguments)},Qk=b._emscripten_bind_btRigidBody_activate_0=function(){return(Qk=b._emscripten_bind_btRigidBody_activate_0=b.asm.emscripten_bind_btRigidBody_activate_0).apply(null,
arguments)},Rk=b._emscripten_bind_btRigidBody_activate_1=function(){return(Rk=b._emscripten_bind_btRigidBody_activate_1=b.asm.emscripten_bind_btRigidBody_activate_1).apply(null,arguments)},Sk=b._emscripten_bind_btRigidBody_isActive_0=function(){return(Sk=b._emscripten_bind_btRigidBody_isActive_0=b.asm.emscripten_bind_btRigidBody_isActive_0).apply(null,arguments)},Tk=b._emscripten_bind_btRigidBody_isKinematicObject_0=function(){return(Tk=b._emscripten_bind_btRigidBody_isKinematicObject_0=b.asm.emscripten_bind_btRigidBody_isKinematicObject_0).apply(null,
arguments)},Uk=b._emscripten_bind_btRigidBody_isStaticObject_0=function(){return(Uk=b._emscripten_bind_btRigidBody_isStaticObject_0=b.asm.emscripten_bind_btRigidBody_isStaticObject_0).apply(null,arguments)},Vk=b._emscripten_bind_btRigidBody_isStaticOrKinematicObject_0=function(){return(Vk=b._emscripten_bind_btRigidBody_isStaticOrKinematicObject_0=b.asm.emscripten_bind_btRigidBody_isStaticOrKinematicObject_0).apply(null,arguments)},Wk=b._emscripten_bind_btRigidBody_getRestitution_0=function(){return(Wk=
b._emscripten_bind_btRigidBody_getRestitution_0=b.asm.emscripten_bind_btRigidBody_getRestitution_0).apply(null,arguments)},Xk=b._emscripten_bind_btRigidBody_getFriction_0=function(){return(Xk=b._emscripten_bind_btRigidBody_getFriction_0=b.asm.emscripten_bind_btRigidBody_getFriction_0).apply(null,arguments)},Yk=b._emscripten_bind_btRigidBody_getRollingFriction_0=function(){return(Yk=b._emscripten_bind_btRigidBody_getRollingFriction_0=b.asm.emscripten_bind_btRigidBody_getRollingFriction_0).apply(null,
arguments)},Zk=b._emscripten_bind_btRigidBody_setRestitution_1=function(){return(Zk=b._emscripten_bind_btRigidBody_setRestitution_1=b.asm.emscripten_bind_btRigidBody_setRestitution_1).apply(null,arguments)},$k=b._emscripten_bind_btRigidBody_setFriction_1=function(){return($k=b._emscripten_bind_btRigidBody_setFriction_1=b.asm.emscripten_bind_btRigidBody_setFriction_1).apply(null,arguments)},al=b._emscripten_bind_btRigidBody_setRollingFriction_1=function(){return(al=b._emscripten_bind_btRigidBody_setRollingFriction_1=
b.asm.emscripten_bind_btRigidBody_setRollingFriction_1).apply(null,arguments)},bl=b._emscripten_bind_btRigidBody_getWorldTransform_0=function(){return(bl=b._emscripten_bind_btRigidBody_getWorldTransform_0=b.asm.emscripten_bind_btRigidBody_getWorldTransform_0).apply(null,arguments)},cl=b._emscripten_bind_btRigidBody_getCollisionFlags_0=function(){return(cl=b._emscripten_bind_btRigidBody_getCollisionFlags_0=b.asm.emscripten_bind_btRigidBody_getCollisionFlags_0).apply(null,arguments)},dl=b._emscripten_bind_btRigidBody_setCollisionFlags_1=
function(){return(dl=b._emscripten_bind_btRigidBody_setCollisionFlags_1=b.asm.emscripten_bind_btRigidBody_setCollisionFlags_1).apply(null,arguments)},el=b._emscripten_bind_btRigidBody_setWorldTransform_1=function(){return(el=b._emscripten_bind_btRigidBody_setWorldTransform_1=b.asm.emscripten_bind_btRigidBody_setWorldTransform_1).apply(null,arguments)},fl=b._emscripten_bind_btRigidBody_setCollisionShape_1=function(){return(fl=b._emscripten_bind_btRigidBody_setCollisionShape_1=b.asm.emscripten_bind_btRigidBody_setCollisionShape_1).apply(null,
arguments)},gl=b._emscripten_bind_btRigidBody_setCcdMotionThreshold_1=function(){return(gl=b._emscripten_bind_btRigidBody_setCcdMotionThreshold_1=b.asm.emscripten_bind_btRigidBody_setCcdMotionThreshold_1).apply(null,arguments)},hl=b._emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=function(){return(hl=b._emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=b.asm.emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1).apply(null,arguments)},il=b._emscripten_bind_btRigidBody_getUserIndex_0=function(){return(il=
b._emscripten_bind_btRigidBody_getUserIndex_0=b.asm.emscripten_bind_btRigidBody_getUserIndex_0).apply(null,arguments)},jl=b._emscripten_bind_btRigidBody_setUserIndex_1=function(){return(jl=b._emscripten_bind_btRigidBody_setUserIndex_1=b.asm.emscripten_bind_btRigidBody_setUserIndex_1).apply(null,arguments)},kl=b._emscripten_bind_btRigidBody_getUserPointer_0=function(){return(kl=b._emscripten_bind_btRigidBody_getUserPointer_0=b.asm.emscripten_bind_btRigidBody_getUserPointer_0).apply(null,arguments)},
ll=b._emscripten_bind_btRigidBody_setUserPointer_1=function(){return(ll=b._emscripten_bind_btRigidBody_setUserPointer_1=b.asm.emscripten_bind_btRigidBody_setUserPointer_1).apply(null,arguments)},ml=b._emscripten_bind_btRigidBody_getBroadphaseHandle_0=function(){return(ml=b._emscripten_bind_btRigidBody_getBroadphaseHandle_0=b.asm.emscripten_bind_btRigidBody_getBroadphaseHandle_0).apply(null,arguments)},nl=b._emscripten_bind_btRigidBody___destroy___0=function(){return(nl=b._emscripten_bind_btRigidBody___destroy___0=
b.asm.emscripten_bind_btRigidBody___destroy___0).apply(null,arguments)},ol=b._emscripten_bind_btIndexedMeshArray_size_0=function(){return(ol=b._emscripten_bind_btIndexedMeshArray_size_0=b.asm.emscripten_bind_btIndexedMeshArray_size_0).apply(null,arguments)},pl=b._emscripten_bind_btIndexedMeshArray_at_1=function(){return(pl=b._emscripten_bind_btIndexedMeshArray_at_1=b.asm.emscripten_bind_btIndexedMeshArray_at_1).apply(null,arguments)},ql=b._emscripten_bind_btIndexedMeshArray___destroy___0=function(){return(ql=
b._emscripten_bind_btIndexedMeshArray___destroy___0=b.asm.emscripten_bind_btIndexedMeshArray___destroy___0).apply(null,arguments)},rl=b._emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=function(){return(rl=b._emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=b.asm.emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0).apply(null,arguments)},sl=b._emscripten_bind_btDbvtBroadphase___destroy___0=function(){return(sl=b._emscripten_bind_btDbvtBroadphase___destroy___0=b.asm.emscripten_bind_btDbvtBroadphase___destroy___0).apply(null,
arguments)},tl=b._emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9=function(){return(tl=b._emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9=b.asm.emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9).apply(null,arguments)},ul=b._emscripten_bind_btHeightfieldTerrainShape_setMargin_1=function(){return(ul=b._emscripten_bind_btHeightfieldTerrainShape_setMargin_1=b.asm.emscripten_bind_btHeightfieldTerrainShape_setMargin_1).apply(null,arguments)},
vl=b._emscripten_bind_btHeightfieldTerrainShape_getMargin_0=function(){return(vl=b._emscripten_bind_btHeightfieldTerrainShape_getMargin_0=b.asm.emscripten_bind_btHeightfieldTerrainShape_getMargin_0).apply(null,arguments)},wl=b._emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1=function(){return(wl=b._emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1=b.asm.emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1).apply(null,arguments)},xl=b._emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0=
function(){return(xl=b._emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0=b.asm.emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0).apply(null,arguments)},yl=b._emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2=function(){return(yl=b._emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2=b.asm.emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2).apply(null,arguments)},zl=b._emscripten_bind_btHeightfieldTerrainShape___destroy___0=function(){return(zl=
b._emscripten_bind_btHeightfieldTerrainShape___destroy___0=b.asm.emscripten_bind_btHeightfieldTerrainShape___destroy___0).apply(null,arguments)},Al=b._emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0=function(){return(Al=b._emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0=b.asm.emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0).apply(null,arguments)},Bl=b._emscripten_bind_btDefaultSoftBodySolver___destroy___0=function(){return(Bl=b._emscripten_bind_btDefaultSoftBodySolver___destroy___0=
b.asm.emscripten_bind_btDefaultSoftBodySolver___destroy___0).apply(null,arguments)},Cl=b._emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=function(){return(Cl=b._emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=b.asm.emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1).apply(null,arguments)},Dl=b._emscripten_bind_btCollisionDispatcher_getNumManifolds_0=function(){return(Dl=b._emscripten_bind_btCollisionDispatcher_getNumManifolds_0=b.asm.emscripten_bind_btCollisionDispatcher_getNumManifolds_0).apply(null,
arguments)},El=b._emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=function(){return(El=b._emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=b.asm.emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1).apply(null,arguments)},Fl=b._emscripten_bind_btCollisionDispatcher___destroy___0=function(){return(Fl=b._emscripten_bind_btCollisionDispatcher___destroy___0=b.asm.emscripten_bind_btCollisionDispatcher___destroy___0).apply(null,arguments)},Gl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_2=
function(){return(Gl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_2=b.asm.emscripten_bind_btAxisSweep3_btAxisSweep3_2).apply(null,arguments)},Hl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_3=function(){return(Hl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_3=b.asm.emscripten_bind_btAxisSweep3_btAxisSweep3_3).apply(null,arguments)},Il=b._emscripten_bind_btAxisSweep3_btAxisSweep3_4=function(){return(Il=b._emscripten_bind_btAxisSweep3_btAxisSweep3_4=b.asm.emscripten_bind_btAxisSweep3_btAxisSweep3_4).apply(null,
arguments)},Jl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_5=function(){return(Jl=b._emscripten_bind_btAxisSweep3_btAxisSweep3_5=b.asm.emscripten_bind_btAxisSweep3_btAxisSweep3_5).apply(null,arguments)},Kl=b._emscripten_bind_btAxisSweep3___destroy___0=function(){return(Kl=b._emscripten_bind_btAxisSweep3___destroy___0=b.asm.emscripten_bind_btAxisSweep3___destroy___0).apply(null,arguments)},Ll=b._emscripten_bind_VoidPtr___destroy___0=function(){return(Ll=b._emscripten_bind_VoidPtr___destroy___0=b.asm.emscripten_bind_VoidPtr___destroy___0).apply(null,
arguments)},Ml=b._emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0=function(){return(Ml=b._emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0).apply(null,arguments)},Nl=b._emscripten_bind_btSoftBodyWorldInfo_get_air_density_0=function(){return(Nl=b._emscripten_bind_btSoftBodyWorldInfo_get_air_density_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_air_density_0).apply(null,arguments)},Ol=b._emscripten_bind_btSoftBodyWorldInfo_set_air_density_1=
function(){return(Ol=b._emscripten_bind_btSoftBodyWorldInfo_set_air_density_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_air_density_1).apply(null,arguments)},Pl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_density_0=function(){return(Pl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_density_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_water_density_0).apply(null,arguments)},Ql=b._emscripten_bind_btSoftBodyWorldInfo_set_water_density_1=function(){return(Ql=b._emscripten_bind_btSoftBodyWorldInfo_set_water_density_1=
b.asm.emscripten_bind_btSoftBodyWorldInfo_set_water_density_1).apply(null,arguments)},Rl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0=function(){return(Rl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0).apply(null,arguments)},Sl=b._emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1=function(){return(Sl=b._emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1).apply(null,
arguments)},Tl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0=function(){return(Tl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0).apply(null,arguments)},Ul=b._emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1=function(){return(Ul=b._emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1).apply(null,arguments)},Vl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0=
function(){return(Vl=b._emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0).apply(null,arguments)},Wl=b._emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1=function(){return(Wl=b._emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1).apply(null,arguments)},Xl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0=function(){return(Xl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0=
b.asm.emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0).apply(null,arguments)},Yl=b._emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1=function(){return(Yl=b._emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1).apply(null,arguments)},Zl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0=function(){return(Zl=b._emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0).apply(null,
arguments)},$l=b._emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1=function(){return($l=b._emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1).apply(null,arguments)},am=b._emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0=function(){return(am=b._emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0=b.asm.emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0).apply(null,arguments)},bm=b._emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1=
function(){return(bm=b._emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1=b.asm.emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1).apply(null,arguments)},cm=b._emscripten_bind_btSoftBodyWorldInfo___destroy___0=function(){return(cm=b._emscripten_bind_btSoftBodyWorldInfo___destroy___0=b.asm.emscripten_bind_btSoftBodyWorldInfo___destroy___0).apply(null,arguments)},dm=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=function(){return(dm=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=
b.asm.emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2).apply(null,arguments)},em=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=function(){return(em=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=b.asm.emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4).apply(null,arguments)},fm=b._emscripten_bind_btConeTwistConstraint_setLimit_2=function(){return(fm=b._emscripten_bind_btConeTwistConstraint_setLimit_2=b.asm.emscripten_bind_btConeTwistConstraint_setLimit_2).apply(null,
arguments)},gm=b._emscripten_bind_btConeTwistConstraint_setAngularOnly_1=function(){return(gm=b._emscripten_bind_btConeTwistConstraint_setAngularOnly_1=b.asm.emscripten_bind_btConeTwistConstraint_setAngularOnly_1).apply(null,arguments)},hm=b._emscripten_bind_btConeTwistConstraint_setDamping_1=function(){return(hm=b._emscripten_bind_btConeTwistConstraint_setDamping_1=b.asm.emscripten_bind_btConeTwistConstraint_setDamping_1).apply(null,arguments)},im=b._emscripten_bind_btConeTwistConstraint_enableMotor_1=
function(){return(im=b._emscripten_bind_btConeTwistConstraint_enableMotor_1=b.asm.emscripten_bind_btConeTwistConstraint_enableMotor_1).apply(null,arguments)},jm=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=function(){return(jm=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=b.asm.emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1).apply(null,arguments)},km=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=function(){return(km=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=
b.asm.emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1).apply(null,arguments)},lm=b._emscripten_bind_btConeTwistConstraint_setMotorTarget_1=function(){return(lm=b._emscripten_bind_btConeTwistConstraint_setMotorTarget_1=b.asm.emscripten_bind_btConeTwistConstraint_setMotorTarget_1).apply(null,arguments)},mm=b._emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=function(){return(mm=b._emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=b.asm.emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1).apply(null,
arguments)},nm=b._emscripten_bind_btConeTwistConstraint_enableFeedback_1=function(){return(nm=b._emscripten_bind_btConeTwistConstraint_enableFeedback_1=b.asm.emscripten_bind_btConeTwistConstraint_enableFeedback_1).apply(null,arguments)},om=b._emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0=function(){return(om=b._emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0).apply(null,arguments)},
pm=b._emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1=function(){return(pm=b._emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1).apply(null,arguments)},qm=b._emscripten_bind_btConeTwistConstraint_getParam_2=function(){return(qm=b._emscripten_bind_btConeTwistConstraint_getParam_2=b.asm.emscripten_bind_btConeTwistConstraint_getParam_2).apply(null,arguments)},rm=b._emscripten_bind_btConeTwistConstraint_setParam_3=
function(){return(rm=b._emscripten_bind_btConeTwistConstraint_setParam_3=b.asm.emscripten_bind_btConeTwistConstraint_setParam_3).apply(null,arguments)},sm=b._emscripten_bind_btConeTwistConstraint___destroy___0=function(){return(sm=b._emscripten_bind_btConeTwistConstraint___destroy___0=b.asm.emscripten_bind_btConeTwistConstraint___destroy___0).apply(null,arguments)},tm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_2=function(){return(tm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_2=
b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_2).apply(null,arguments)},um=b._emscripten_bind_btHingeConstraint_btHingeConstraint_3=function(){return(um=b._emscripten_bind_btHingeConstraint_btHingeConstraint_3=b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_3).apply(null,arguments)},wm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_4=function(){return(wm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_4=b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_4).apply(null,
arguments)},xm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_5=function(){return(xm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_5=b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_5).apply(null,arguments)},ym=b._emscripten_bind_btHingeConstraint_btHingeConstraint_6=function(){return(ym=b._emscripten_bind_btHingeConstraint_btHingeConstraint_6=b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_6).apply(null,arguments)},zm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_7=
function(){return(zm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_7=b.asm.emscripten_bind_btHingeConstraint_btHingeConstraint_7).apply(null,arguments)},Am=b._emscripten_bind_btHingeConstraint_setLimit_4=function(){return(Am=b._emscripten_bind_btHingeConstraint_setLimit_4=b.asm.emscripten_bind_btHingeConstraint_setLimit_4).apply(null,arguments)},Bm=b._emscripten_bind_btHingeConstraint_setLimit_5=function(){return(Bm=b._emscripten_bind_btHingeConstraint_setLimit_5=b.asm.emscripten_bind_btHingeConstraint_setLimit_5).apply(null,
arguments)},Cm=b._emscripten_bind_btHingeConstraint_enableAngularMotor_3=function(){return(Cm=b._emscripten_bind_btHingeConstraint_enableAngularMotor_3=b.asm.emscripten_bind_btHingeConstraint_enableAngularMotor_3).apply(null,arguments)},Dm=b._emscripten_bind_btHingeConstraint_setAngularOnly_1=function(){return(Dm=b._emscripten_bind_btHingeConstraint_setAngularOnly_1=b.asm.emscripten_bind_btHingeConstraint_setAngularOnly_1).apply(null,arguments)},Em=b._emscripten_bind_btHingeConstraint_enableMotor_1=
function(){return(Em=b._emscripten_bind_btHingeConstraint_enableMotor_1=b.asm.emscripten_bind_btHingeConstraint_enableMotor_1).apply(null,arguments)},Fm=b._emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1=function(){return(Fm=b._emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1=b.asm.emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1).apply(null,arguments)},Gm=b._emscripten_bind_btHingeConstraint_setMotorTarget_2=function(){return(Gm=b._emscripten_bind_btHingeConstraint_setMotorTarget_2=
b.asm.emscripten_bind_btHingeConstraint_setMotorTarget_2).apply(null,arguments)},Hm=b._emscripten_bind_btHingeConstraint_enableFeedback_1=function(){return(Hm=b._emscripten_bind_btHingeConstraint_enableFeedback_1=b.asm.emscripten_bind_btHingeConstraint_enableFeedback_1).apply(null,arguments)},Im=b._emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0=function(){return(Im=b._emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0).apply(null,
arguments)},Jm=b._emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1=function(){return(Jm=b._emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1).apply(null,arguments)},Km=b._emscripten_bind_btHingeConstraint_getParam_2=function(){return(Km=b._emscripten_bind_btHingeConstraint_getParam_2=b.asm.emscripten_bind_btHingeConstraint_getParam_2).apply(null,arguments)},Lm=b._emscripten_bind_btHingeConstraint_setParam_3=
function(){return(Lm=b._emscripten_bind_btHingeConstraint_setParam_3=b.asm.emscripten_bind_btHingeConstraint_setParam_3).apply(null,arguments)},Mm=b._emscripten_bind_btHingeConstraint___destroy___0=function(){return(Mm=b._emscripten_bind_btHingeConstraint___destroy___0=b.asm.emscripten_bind_btHingeConstraint___destroy___0).apply(null,arguments)},Nm=b._emscripten_bind_btConeShapeZ_btConeShapeZ_2=function(){return(Nm=b._emscripten_bind_btConeShapeZ_btConeShapeZ_2=b.asm.emscripten_bind_btConeShapeZ_btConeShapeZ_2).apply(null,
arguments)},Om=b._emscripten_bind_btConeShapeZ_setLocalScaling_1=function(){return(Om=b._emscripten_bind_btConeShapeZ_setLocalScaling_1=b.asm.emscripten_bind_btConeShapeZ_setLocalScaling_1).apply(null,arguments)},Pm=b._emscripten_bind_btConeShapeZ_getLocalScaling_0=function(){return(Pm=b._emscripten_bind_btConeShapeZ_getLocalScaling_0=b.asm.emscripten_bind_btConeShapeZ_getLocalScaling_0).apply(null,arguments)},Qm=b._emscripten_bind_btConeShapeZ_calculateLocalInertia_2=function(){return(Qm=b._emscripten_bind_btConeShapeZ_calculateLocalInertia_2=
b.asm.emscripten_bind_btConeShapeZ_calculateLocalInertia_2).apply(null,arguments)},Rm=b._emscripten_bind_btConeShapeZ___destroy___0=function(){return(Rm=b._emscripten_bind_btConeShapeZ___destroy___0=b.asm.emscripten_bind_btConeShapeZ___destroy___0).apply(null,arguments)},Sm=b._emscripten_bind_btConeShapeX_btConeShapeX_2=function(){return(Sm=b._emscripten_bind_btConeShapeX_btConeShapeX_2=b.asm.emscripten_bind_btConeShapeX_btConeShapeX_2).apply(null,arguments)},Tm=b._emscripten_bind_btConeShapeX_setLocalScaling_1=
function(){return(Tm=b._emscripten_bind_btConeShapeX_setLocalScaling_1=b.asm.emscripten_bind_btConeShapeX_setLocalScaling_1).apply(null,arguments)},Um=b._emscripten_bind_btConeShapeX_getLocalScaling_0=function(){return(Um=b._emscripten_bind_btConeShapeX_getLocalScaling_0=b.asm.emscripten_bind_btConeShapeX_getLocalScaling_0).apply(null,arguments)},Vm=b._emscripten_bind_btConeShapeX_calculateLocalInertia_2=function(){return(Vm=b._emscripten_bind_btConeShapeX_calculateLocalInertia_2=b.asm.emscripten_bind_btConeShapeX_calculateLocalInertia_2).apply(null,
arguments)},Wm=b._emscripten_bind_btConeShapeX___destroy___0=function(){return(Wm=b._emscripten_bind_btConeShapeX___destroy___0=b.asm.emscripten_bind_btConeShapeX___destroy___0).apply(null,arguments)},Xm=b._emscripten_bind_btTriangleMesh_btTriangleMesh_0=function(){return(Xm=b._emscripten_bind_btTriangleMesh_btTriangleMesh_0=b.asm.emscripten_bind_btTriangleMesh_btTriangleMesh_0).apply(null,arguments)},Ym=b._emscripten_bind_btTriangleMesh_btTriangleMesh_1=function(){return(Ym=b._emscripten_bind_btTriangleMesh_btTriangleMesh_1=
b.asm.emscripten_bind_btTriangleMesh_btTriangleMesh_1).apply(null,arguments)},Zm=b._emscripten_bind_btTriangleMesh_btTriangleMesh_2=function(){return(Zm=b._emscripten_bind_btTriangleMesh_btTriangleMesh_2=b.asm.emscripten_bind_btTriangleMesh_btTriangleMesh_2).apply(null,arguments)},$m=b._emscripten_bind_btTriangleMesh_addTriangle_3=function(){return($m=b._emscripten_bind_btTriangleMesh_addTriangle_3=b.asm.emscripten_bind_btTriangleMesh_addTriangle_3).apply(null,arguments)},an=b._emscripten_bind_btTriangleMesh_addTriangle_4=
function(){return(an=b._emscripten_bind_btTriangleMesh_addTriangle_4=b.asm.emscripten_bind_btTriangleMesh_addTriangle_4).apply(null,arguments)},bn=b._emscripten_bind_btTriangleMesh_findOrAddVertex_2=function(){return(bn=b._emscripten_bind_btTriangleMesh_findOrAddVertex_2=b.asm.emscripten_bind_btTriangleMesh_findOrAddVertex_2).apply(null,arguments)},cn=b._emscripten_bind_btTriangleMesh_addIndex_1=function(){return(cn=b._emscripten_bind_btTriangleMesh_addIndex_1=b.asm.emscripten_bind_btTriangleMesh_addIndex_1).apply(null,
arguments)},dn=b._emscripten_bind_btTriangleMesh_getIndexedMeshArray_0=function(){return(dn=b._emscripten_bind_btTriangleMesh_getIndexedMeshArray_0=b.asm.emscripten_bind_btTriangleMesh_getIndexedMeshArray_0).apply(null,arguments)},en=b._emscripten_bind_btTriangleMesh_setScaling_1=function(){return(en=b._emscripten_bind_btTriangleMesh_setScaling_1=b.asm.emscripten_bind_btTriangleMesh_setScaling_1).apply(null,arguments)},fn=b._emscripten_bind_btTriangleMesh___destroy___0=function(){return(fn=b._emscripten_bind_btTriangleMesh___destroy___0=
b.asm.emscripten_bind_btTriangleMesh___destroy___0).apply(null,arguments)},gn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_0=function(){return(gn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_0=b.asm.emscripten_bind_btConvexHullShape_btConvexHullShape_0).apply(null,arguments)},hn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_1=function(){return(hn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_1=b.asm.emscripten_bind_btConvexHullShape_btConvexHullShape_1).apply(null,
arguments)},jn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_2=function(){return(jn=b._emscripten_bind_btConvexHullShape_btConvexHullShape_2=b.asm.emscripten_bind_btConvexHullShape_btConvexHullShape_2).apply(null,arguments)},kn=b._emscripten_bind_btConvexHullShape_addPoint_1=function(){return(kn=b._emscripten_bind_btConvexHullShape_addPoint_1=b.asm.emscripten_bind_btConvexHullShape_addPoint_1).apply(null,arguments)},ln=b._emscripten_bind_btConvexHullShape_addPoint_2=function(){return(ln=
b._emscripten_bind_btConvexHullShape_addPoint_2=b.asm.emscripten_bind_btConvexHullShape_addPoint_2).apply(null,arguments)},mn=b._emscripten_bind_btConvexHullShape_setMargin_1=function(){return(mn=b._emscripten_bind_btConvexHullShape_setMargin_1=b.asm.emscripten_bind_btConvexHullShape_setMargin_1).apply(null,arguments)},nn=b._emscripten_bind_btConvexHullShape_getMargin_0=function(){return(nn=b._emscripten_bind_btConvexHullShape_getMargin_0=b.asm.emscripten_bind_btConvexHullShape_getMargin_0).apply(null,
arguments)},on=b._emscripten_bind_btConvexHullShape_getNumVertices_0=function(){return(on=b._emscripten_bind_btConvexHullShape_getNumVertices_0=b.asm.emscripten_bind_btConvexHullShape_getNumVertices_0).apply(null,arguments)},pn=b._emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1=function(){return(pn=b._emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1=b.asm.emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1).apply(null,arguments)},qn=b._emscripten_bind_btConvexHullShape_recalcLocalAabb_0=
function(){return(qn=b._emscripten_bind_btConvexHullShape_recalcLocalAabb_0=b.asm.emscripten_bind_btConvexHullShape_recalcLocalAabb_0).apply(null,arguments)},rn=b._emscripten_bind_btConvexHullShape_getConvexPolyhedron_0=function(){return(rn=b._emscripten_bind_btConvexHullShape_getConvexPolyhedron_0=b.asm.emscripten_bind_btConvexHullShape_getConvexPolyhedron_0).apply(null,arguments)},sn=b._emscripten_bind_btConvexHullShape_setLocalScaling_1=function(){return(sn=b._emscripten_bind_btConvexHullShape_setLocalScaling_1=
b.asm.emscripten_bind_btConvexHullShape_setLocalScaling_1).apply(null,arguments)},tn=b._emscripten_bind_btConvexHullShape_getLocalScaling_0=function(){return(tn=b._emscripten_bind_btConvexHullShape_getLocalScaling_0=b.asm.emscripten_bind_btConvexHullShape_getLocalScaling_0).apply(null,arguments)},un=b._emscripten_bind_btConvexHullShape_calculateLocalInertia_2=function(){return(un=b._emscripten_bind_btConvexHullShape_calculateLocalInertia_2=b.asm.emscripten_bind_btConvexHullShape_calculateLocalInertia_2).apply(null,
arguments)},vn=b._emscripten_bind_btConvexHullShape___destroy___0=function(){return(vn=b._emscripten_bind_btConvexHullShape___destroy___0=b.asm.emscripten_bind_btConvexHullShape___destroy___0).apply(null,arguments)},wn=b._emscripten_bind_btVehicleTuning_btVehicleTuning_0=function(){return(wn=b._emscripten_bind_btVehicleTuning_btVehicleTuning_0=b.asm.emscripten_bind_btVehicleTuning_btVehicleTuning_0).apply(null,arguments)},xn=b._emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0=function(){return(xn=
b._emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0=b.asm.emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0).apply(null,arguments)},yn=b._emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1=function(){return(yn=b._emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1=b.asm.emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1).apply(null,arguments)},zn=b._emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0=function(){return(zn=b._emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0=
b.asm.emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0).apply(null,arguments)},An=b._emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1=function(){return(An=b._emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1=b.asm.emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1).apply(null,arguments)},Bn=b._emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0=function(){return(Bn=b._emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0=b.asm.emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0).apply(null,
arguments)},Cn=b._emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1=function(){return(Cn=b._emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1=b.asm.emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1).apply(null,arguments)},Dn=b._emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0=function(){return(Dn=b._emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0=b.asm.emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0).apply(null,arguments)},En=b._emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1=
function(){return(En=b._emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1=b.asm.emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1).apply(null,arguments)},Fn=b._emscripten_bind_btVehicleTuning_get_m_frictionSlip_0=function(){return(Fn=b._emscripten_bind_btVehicleTuning_get_m_frictionSlip_0=b.asm.emscripten_bind_btVehicleTuning_get_m_frictionSlip_0).apply(null,arguments)},Gn=b._emscripten_bind_btVehicleTuning_set_m_frictionSlip_1=function(){return(Gn=b._emscripten_bind_btVehicleTuning_set_m_frictionSlip_1=
b.asm.emscripten_bind_btVehicleTuning_set_m_frictionSlip_1).apply(null,arguments)},Hn=b._emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0=function(){return(Hn=b._emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0=b.asm.emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0).apply(null,arguments)},In=b._emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1=function(){return(In=b._emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1=b.asm.emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1).apply(null,
arguments)},Jn=b._emscripten_bind_btCollisionObjectWrapper_getWorldTransform_0=function(){return(Jn=b._emscripten_bind_btCollisionObjectWrapper_getWorldTransform_0=b.asm.emscripten_bind_btCollisionObjectWrapper_getWorldTransform_0).apply(null,arguments)},Kn=b._emscripten_bind_btCollisionObjectWrapper_getCollisionObject_0=function(){return(Kn=b._emscripten_bind_btCollisionObjectWrapper_getCollisionObject_0=b.asm.emscripten_bind_btCollisionObjectWrapper_getCollisionObject_0).apply(null,arguments)},
Ln=b._emscripten_bind_btCollisionObjectWrapper_getCollisionShape_0=function(){return(Ln=b._emscripten_bind_btCollisionObjectWrapper_getCollisionShape_0=b.asm.emscripten_bind_btCollisionObjectWrapper_getCollisionShape_0).apply(null,arguments)},Mn=b._emscripten_bind_btShapeHull_btShapeHull_1=function(){return(Mn=b._emscripten_bind_btShapeHull_btShapeHull_1=b.asm.emscripten_bind_btShapeHull_btShapeHull_1).apply(null,arguments)},Nn=b._emscripten_bind_btShapeHull_buildHull_1=function(){return(Nn=b._emscripten_bind_btShapeHull_buildHull_1=
b.asm.emscripten_bind_btShapeHull_buildHull_1).apply(null,arguments)},On=b._emscripten_bind_btShapeHull_numVertices_0=function(){return(On=b._emscripten_bind_btShapeHull_numVertices_0=b.asm.emscripten_bind_btShapeHull_numVertices_0).apply(null,arguments)},Pn=b._emscripten_bind_btShapeHull_getVertexPointer_0=function(){return(Pn=b._emscripten_bind_btShapeHull_getVertexPointer_0=b.asm.emscripten_bind_btShapeHull_getVertexPointer_0).apply(null,arguments)},Qn=b._emscripten_bind_btShapeHull___destroy___0=
function(){return(Qn=b._emscripten_bind_btShapeHull___destroy___0=b.asm.emscripten_bind_btShapeHull___destroy___0).apply(null,arguments)},Rn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=function(){return(Rn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=b.asm.emscripten_bind_btDefaultMotionState_btDefaultMotionState_0).apply(null,arguments)},Sn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=function(){return(Sn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=
b.asm.emscripten_bind_btDefaultMotionState_btDefaultMotionState_1).apply(null,arguments)},Tn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=function(){return(Tn=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=b.asm.emscripten_bind_btDefaultMotionState_btDefaultMotionState_2).apply(null,arguments)},Un=b._emscripten_bind_btDefaultMotionState_getWorldTransform_1=function(){return(Un=b._emscripten_bind_btDefaultMotionState_getWorldTransform_1=b.asm.emscripten_bind_btDefaultMotionState_getWorldTransform_1).apply(null,
arguments)},Vn=b._emscripten_bind_btDefaultMotionState_setWorldTransform_1=function(){return(Vn=b._emscripten_bind_btDefaultMotionState_setWorldTransform_1=b.asm.emscripten_bind_btDefaultMotionState_setWorldTransform_1).apply(null,arguments)},Wn=b._emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0=function(){return(Wn=b._emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0=b.asm.emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0).apply(null,arguments)},Xn=b._emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1=
function(){return(Xn=b._emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1=b.asm.emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1).apply(null,arguments)},Yn=b._emscripten_bind_btDefaultMotionState___destroy___0=function(){return(Yn=b._emscripten_bind_btDefaultMotionState___destroy___0=b.asm.emscripten_bind_btDefaultMotionState___destroy___0).apply(null,arguments)},Zn=b._emscripten_bind_btWheelInfo_btWheelInfo_1=function(){return(Zn=b._emscripten_bind_btWheelInfo_btWheelInfo_1=
b.asm.emscripten_bind_btWheelInfo_btWheelInfo_1).apply(null,arguments)},$n=b._emscripten_bind_btWheelInfo_getSuspensionRestLength_0=function(){return($n=b._emscripten_bind_btWheelInfo_getSuspensionRestLength_0=b.asm.emscripten_bind_btWheelInfo_getSuspensionRestLength_0).apply(null,arguments)},ao=b._emscripten_bind_btWheelInfo_updateWheel_2=function(){return(ao=b._emscripten_bind_btWheelInfo_updateWheel_2=b.asm.emscripten_bind_btWheelInfo_updateWheel_2).apply(null,arguments)},bo=b._emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0=
function(){return(bo=b._emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0=b.asm.emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0).apply(null,arguments)},co=b._emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1=function(){return(co=b._emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1=b.asm.emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1).apply(null,arguments)},eo=b._emscripten_bind_btWheelInfo_get_m_frictionSlip_0=function(){return(eo=b._emscripten_bind_btWheelInfo_get_m_frictionSlip_0=
b.asm.emscripten_bind_btWheelInfo_get_m_frictionSlip_0).apply(null,arguments)},fo=b._emscripten_bind_btWheelInfo_set_m_frictionSlip_1=function(){return(fo=b._emscripten_bind_btWheelInfo_set_m_frictionSlip_1=b.asm.emscripten_bind_btWheelInfo_set_m_frictionSlip_1).apply(null,arguments)},go=b._emscripten_bind_btWheelInfo_get_m_engineForce_0=function(){return(go=b._emscripten_bind_btWheelInfo_get_m_engineForce_0=b.asm.emscripten_bind_btWheelInfo_get_m_engineForce_0).apply(null,arguments)},ho=b._emscripten_bind_btWheelInfo_set_m_engineForce_1=
function(){return(ho=b._emscripten_bind_btWheelInfo_set_m_engineForce_1=b.asm.emscripten_bind_btWheelInfo_set_m_engineForce_1).apply(null,arguments)},io=b._emscripten_bind_btWheelInfo_get_m_rollInfluence_0=function(){return(io=b._emscripten_bind_btWheelInfo_get_m_rollInfluence_0=b.asm.emscripten_bind_btWheelInfo_get_m_rollInfluence_0).apply(null,arguments)},jo=b._emscripten_bind_btWheelInfo_set_m_rollInfluence_1=function(){return(jo=b._emscripten_bind_btWheelInfo_set_m_rollInfluence_1=b.asm.emscripten_bind_btWheelInfo_set_m_rollInfluence_1).apply(null,
arguments)},ko=b._emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0=function(){return(ko=b._emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0=b.asm.emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0).apply(null,arguments)},lo=b._emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1=function(){return(lo=b._emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1=b.asm.emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1).apply(null,arguments)},mo=b._emscripten_bind_btWheelInfo_get_m_wheelsRadius_0=
function(){return(mo=b._emscripten_bind_btWheelInfo_get_m_wheelsRadius_0=b.asm.emscripten_bind_btWheelInfo_get_m_wheelsRadius_0).apply(null,arguments)},no=b._emscripten_bind_btWheelInfo_set_m_wheelsRadius_1=function(){return(no=b._emscripten_bind_btWheelInfo_set_m_wheelsRadius_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelsRadius_1).apply(null,arguments)},oo=b._emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0=function(){return(oo=b._emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0=
b.asm.emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0).apply(null,arguments)},po=b._emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1=function(){return(po=b._emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1).apply(null,arguments)},qo=b._emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0=function(){return(qo=b._emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0=b.asm.emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0).apply(null,
arguments)},ro=b._emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1=function(){return(ro=b._emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1).apply(null,arguments)},so=b._emscripten_bind_btWheelInfo_get_m_steering_0=function(){return(so=b._emscripten_bind_btWheelInfo_get_m_steering_0=b.asm.emscripten_bind_btWheelInfo_get_m_steering_0).apply(null,arguments)},to=b._emscripten_bind_btWheelInfo_set_m_steering_1=function(){return(to=
b._emscripten_bind_btWheelInfo_set_m_steering_1=b.asm.emscripten_bind_btWheelInfo_set_m_steering_1).apply(null,arguments)},uo=b._emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0=function(){return(uo=b._emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0=b.asm.emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0).apply(null,arguments)},vo=b._emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1=function(){return(vo=b._emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1=b.asm.emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1).apply(null,
arguments)},wo=b._emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0=function(){return(wo=b._emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0=b.asm.emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0).apply(null,arguments)},xo=b._emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1=function(){return(xo=b._emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1=b.asm.emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1).apply(null,arguments)},yo=b._emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0=
function(){return(yo=b._emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0=b.asm.emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0).apply(null,arguments)},zo=b._emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1=function(){return(zo=b._emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1).apply(null,arguments)},Ao=b._emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0=function(){return(Ao=b._emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0=
b.asm.emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0).apply(null,arguments)},Bo=b._emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1=function(){return(Bo=b._emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1=b.asm.emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1).apply(null,arguments)},Co=b._emscripten_bind_btWheelInfo_get_m_raycastInfo_0=function(){return(Co=b._emscripten_bind_btWheelInfo_get_m_raycastInfo_0=b.asm.emscripten_bind_btWheelInfo_get_m_raycastInfo_0).apply(null,arguments)},Do=b._emscripten_bind_btWheelInfo_set_m_raycastInfo_1=
function(){return(Do=b._emscripten_bind_btWheelInfo_set_m_raycastInfo_1=b.asm.emscripten_bind_btWheelInfo_set_m_raycastInfo_1).apply(null,arguments)},Eo=b._emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0=function(){return(Eo=b._emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0=b.asm.emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0).apply(null,arguments)},Fo=b._emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1=function(){return(Fo=b._emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1=
b.asm.emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1).apply(null,arguments)},Go=b._emscripten_bind_btWheelInfo_get_m_worldTransform_0=function(){return(Go=b._emscripten_bind_btWheelInfo_get_m_worldTransform_0=b.asm.emscripten_bind_btWheelInfo_get_m_worldTransform_0).apply(null,arguments)},Ho=b._emscripten_bind_btWheelInfo_set_m_worldTransform_1=function(){return(Ho=b._emscripten_bind_btWheelInfo_set_m_worldTransform_1=b.asm.emscripten_bind_btWheelInfo_set_m_worldTransform_1).apply(null,
arguments)},Io=b._emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0=function(){return(Io=b._emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0=b.asm.emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0).apply(null,arguments)},Jo=b._emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1=function(){return(Jo=b._emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1).apply(null,arguments)},Ko=b._emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0=
function(){return(Ko=b._emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0=b.asm.emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0).apply(null,arguments)},Lo=b._emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1=function(){return(Lo=b._emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1=b.asm.emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1).apply(null,arguments)},Mo=b._emscripten_bind_btWheelInfo_get_m_rotation_0=function(){return(Mo=b._emscripten_bind_btWheelInfo_get_m_rotation_0=b.asm.emscripten_bind_btWheelInfo_get_m_rotation_0).apply(null,
arguments)},No=b._emscripten_bind_btWheelInfo_set_m_rotation_1=function(){return(No=b._emscripten_bind_btWheelInfo_set_m_rotation_1=b.asm.emscripten_bind_btWheelInfo_set_m_rotation_1).apply(null,arguments)},Oo=b._emscripten_bind_btWheelInfo_get_m_deltaRotation_0=function(){return(Oo=b._emscripten_bind_btWheelInfo_get_m_deltaRotation_0=b.asm.emscripten_bind_btWheelInfo_get_m_deltaRotation_0).apply(null,arguments)},Po=b._emscripten_bind_btWheelInfo_set_m_deltaRotation_1=function(){return(Po=b._emscripten_bind_btWheelInfo_set_m_deltaRotation_1=
b.asm.emscripten_bind_btWheelInfo_set_m_deltaRotation_1).apply(null,arguments)},Qo=b._emscripten_bind_btWheelInfo_get_m_brake_0=function(){return(Qo=b._emscripten_bind_btWheelInfo_get_m_brake_0=b.asm.emscripten_bind_btWheelInfo_get_m_brake_0).apply(null,arguments)},Ro=b._emscripten_bind_btWheelInfo_set_m_brake_1=function(){return(Ro=b._emscripten_bind_btWheelInfo_set_m_brake_1=b.asm.emscripten_bind_btWheelInfo_set_m_brake_1).apply(null,arguments)},So=b._emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0=
function(){return(So=b._emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0=b.asm.emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0).apply(null,arguments)},To=b._emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1=function(){return(To=b._emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1=b.asm.emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1).apply(null,arguments)},Uo=b._emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0=
function(){return(Uo=b._emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0=b.asm.emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0).apply(null,arguments)},Vo=b._emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1=function(){return(Vo=b._emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1=b.asm.emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1).apply(null,arguments)},Wo=b._emscripten_bind_btWheelInfo_get_m_skidInfo_0=function(){return(Wo=
b._emscripten_bind_btWheelInfo_get_m_skidInfo_0=b.asm.emscripten_bind_btWheelInfo_get_m_skidInfo_0).apply(null,arguments)},Xo=b._emscripten_bind_btWheelInfo_set_m_skidInfo_1=function(){return(Xo=b._emscripten_bind_btWheelInfo_set_m_skidInfo_1=b.asm.emscripten_bind_btWheelInfo_set_m_skidInfo_1).apply(null,arguments)},Yo=b._emscripten_bind_btWheelInfo___destroy___0=function(){return(Yo=b._emscripten_bind_btWheelInfo___destroy___0=b.asm.emscripten_bind_btWheelInfo___destroy___0).apply(null,arguments)},
Zo=b._emscripten_bind_btVector4_btVector4_0=function(){return(Zo=b._emscripten_bind_btVector4_btVector4_0=b.asm.emscripten_bind_btVector4_btVector4_0).apply(null,arguments)},$o=b._emscripten_bind_btVector4_btVector4_4=function(){return($o=b._emscripten_bind_btVector4_btVector4_4=b.asm.emscripten_bind_btVector4_btVector4_4).apply(null,arguments)},ap=b._emscripten_bind_btVector4_w_0=function(){return(ap=b._emscripten_bind_btVector4_w_0=b.asm.emscripten_bind_btVector4_w_0).apply(null,arguments)},bp=
b._emscripten_bind_btVector4_setValue_4=function(){return(bp=b._emscripten_bind_btVector4_setValue_4=b.asm.emscripten_bind_btVector4_setValue_4).apply(null,arguments)},cp=b._emscripten_bind_btVector4_length_0=function(){return(cp=b._emscripten_bind_btVector4_length_0=b.asm.emscripten_bind_btVector4_length_0).apply(null,arguments)},dp=b._emscripten_bind_btVector4_x_0=function(){return(dp=b._emscripten_bind_btVector4_x_0=b.asm.emscripten_bind_btVector4_x_0).apply(null,arguments)},ep=b._emscripten_bind_btVector4_y_0=
function(){return(ep=b._emscripten_bind_btVector4_y_0=b.asm.emscripten_bind_btVector4_y_0).apply(null,arguments)},fp=b._emscripten_bind_btVector4_z_0=function(){return(fp=b._emscripten_bind_btVector4_z_0=b.asm.emscripten_bind_btVector4_z_0).apply(null,arguments)},gp=b._emscripten_bind_btVector4_setX_1=function(){return(gp=b._emscripten_bind_btVector4_setX_1=b.asm.emscripten_bind_btVector4_setX_1).apply(null,arguments)},hp=b._emscripten_bind_btVector4_setY_1=function(){return(hp=b._emscripten_bind_btVector4_setY_1=
b.asm.emscripten_bind_btVector4_setY_1).apply(null,arguments)},ip=b._emscripten_bind_btVector4_setZ_1=function(){return(ip=b._emscripten_bind_btVector4_setZ_1=b.asm.emscripten_bind_btVector4_setZ_1).apply(null,arguments)},jp=b._emscripten_bind_btVector4_normalize_0=function(){return(jp=b._emscripten_bind_btVector4_normalize_0=b.asm.emscripten_bind_btVector4_normalize_0).apply(null,arguments)},kp=b._emscripten_bind_btVector4_rotate_2=function(){return(kp=b._emscripten_bind_btVector4_rotate_2=b.asm.emscripten_bind_btVector4_rotate_2).apply(null,
arguments)},lp=b._emscripten_bind_btVector4_dot_1=function(){return(lp=b._emscripten_bind_btVector4_dot_1=b.asm.emscripten_bind_btVector4_dot_1).apply(null,arguments)},mp=b._emscripten_bind_btVector4_op_mul_1=function(){return(mp=b._emscripten_bind_btVector4_op_mul_1=b.asm.emscripten_bind_btVector4_op_mul_1).apply(null,arguments)},np=b._emscripten_bind_btVector4_op_add_1=function(){return(np=b._emscripten_bind_btVector4_op_add_1=b.asm.emscripten_bind_btVector4_op_add_1).apply(null,arguments)},op=
b._emscripten_bind_btVector4_op_sub_1=function(){return(op=b._emscripten_bind_btVector4_op_sub_1=b.asm.emscripten_bind_btVector4_op_sub_1).apply(null,arguments)},pp=b._emscripten_bind_btVector4___destroy___0=function(){return(pp=b._emscripten_bind_btVector4___destroy___0=b.asm.emscripten_bind_btVector4___destroy___0).apply(null,arguments)},qp=b._emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=function(){return(qp=b._emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=
b.asm.emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0).apply(null,arguments)},rp=b._emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=function(){return(rp=b._emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=b.asm.emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0).apply(null,arguments)},sp=b._emscripten_bind_Anchor_get_m_node_0=function(){return(sp=b._emscripten_bind_Anchor_get_m_node_0=b.asm.emscripten_bind_Anchor_get_m_node_0).apply(null,
arguments)},tp=b._emscripten_bind_Anchor_set_m_node_1=function(){return(tp=b._emscripten_bind_Anchor_set_m_node_1=b.asm.emscripten_bind_Anchor_set_m_node_1).apply(null,arguments)},up=b._emscripten_bind_Anchor_get_m_local_0=function(){return(up=b._emscripten_bind_Anchor_get_m_local_0=b.asm.emscripten_bind_Anchor_get_m_local_0).apply(null,arguments)},vp=b._emscripten_bind_Anchor_set_m_local_1=function(){return(vp=b._emscripten_bind_Anchor_set_m_local_1=b.asm.emscripten_bind_Anchor_set_m_local_1).apply(null,
arguments)},wp=b._emscripten_bind_Anchor_get_m_body_0=function(){return(wp=b._emscripten_bind_Anchor_get_m_body_0=b.asm.emscripten_bind_Anchor_get_m_body_0).apply(null,arguments)},xp=b._emscripten_bind_Anchor_set_m_body_1=function(){return(xp=b._emscripten_bind_Anchor_set_m_body_1=b.asm.emscripten_bind_Anchor_set_m_body_1).apply(null,arguments)},yp=b._emscripten_bind_Anchor_get_m_influence_0=function(){return(yp=b._emscripten_bind_Anchor_get_m_influence_0=b.asm.emscripten_bind_Anchor_get_m_influence_0).apply(null,
arguments)},zp=b._emscripten_bind_Anchor_set_m_influence_1=function(){return(zp=b._emscripten_bind_Anchor_set_m_influence_1=b.asm.emscripten_bind_Anchor_set_m_influence_1).apply(null,arguments)},Ap=b._emscripten_bind_Anchor_get_m_c0_0=function(){return(Ap=b._emscripten_bind_Anchor_get_m_c0_0=b.asm.emscripten_bind_Anchor_get_m_c0_0).apply(null,arguments)},Bp=b._emscripten_bind_Anchor_set_m_c0_1=function(){return(Bp=b._emscripten_bind_Anchor_set_m_c0_1=b.asm.emscripten_bind_Anchor_set_m_c0_1).apply(null,
arguments)},Cp=b._emscripten_bind_Anchor_get_m_c1_0=function(){return(Cp=b._emscripten_bind_Anchor_get_m_c1_0=b.asm.emscripten_bind_Anchor_get_m_c1_0).apply(null,arguments)},Dp=b._emscripten_bind_Anchor_set_m_c1_1=function(){return(Dp=b._emscripten_bind_Anchor_set_m_c1_1=b.asm.emscripten_bind_Anchor_set_m_c1_1).apply(null,arguments)},Ep=b._emscripten_bind_Anchor_get_m_c2_0=function(){return(Ep=b._emscripten_bind_Anchor_get_m_c2_0=b.asm.emscripten_bind_Anchor_get_m_c2_0).apply(null,arguments)},Fp=
b._emscripten_bind_Anchor_set_m_c2_1=function(){return(Fp=b._emscripten_bind_Anchor_set_m_c2_1=b.asm.emscripten_bind_Anchor_set_m_c2_1).apply(null,arguments)},Gp=b._emscripten_bind_Anchor___destroy___0=function(){return(Gp=b._emscripten_bind_Anchor___destroy___0=b.asm.emscripten_bind_Anchor___destroy___0).apply(null,arguments)},Hp=b._emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0=function(){return(Hp=b._emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0=b.asm.emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0).apply(null,
arguments)},Ip=b._emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1=function(){return(Ip=b._emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1=b.asm.emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1).apply(null,arguments)},Jp=b._emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0=function(){return(Jp=b._emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0=b.asm.emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0).apply(null,
arguments)},Kp=b._emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1=function(){return(Kp=b._emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1=b.asm.emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1).apply(null,arguments)},Lp=b._emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0=function(){return(Lp=b._emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0=b.asm.emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0).apply(null,
arguments)},Mp=b._emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1=function(){return(Mp=b._emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1=b.asm.emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1).apply(null,arguments)},Np=b._emscripten_bind_btVehicleRaycasterResult___destroy___0=function(){return(Np=b._emscripten_bind_btVehicleRaycasterResult___destroy___0=b.asm.emscripten_bind_btVehicleRaycasterResult___destroy___0).apply(null,arguments)},Op=b._emscripten_bind_btVector3Array_size_0=
function(){return(Op=b._emscripten_bind_btVector3Array_size_0=b.asm.emscripten_bind_btVector3Array_size_0).apply(null,arguments)},Pp=b._emscripten_bind_btVector3Array_at_1=function(){return(Pp=b._emscripten_bind_btVector3Array_at_1=b.asm.emscripten_bind_btVector3Array_at_1).apply(null,arguments)},Qp=b._emscripten_bind_btVector3Array___destroy___0=function(){return(Qp=b._emscripten_bind_btVector3Array___destroy___0=b.asm.emscripten_bind_btVector3Array___destroy___0).apply(null,arguments)},Rp=b._emscripten_bind_btConstraintSolver___destroy___0=
function(){return(Rp=b._emscripten_bind_btConstraintSolver___destroy___0=b.asm.emscripten_bind_btConstraintSolver___destroy___0).apply(null,arguments)},Sp=b._emscripten_bind_btRaycastVehicle_btRaycastVehicle_3=function(){return(Sp=b._emscripten_bind_btRaycastVehicle_btRaycastVehicle_3=b.asm.emscripten_bind_btRaycastVehicle_btRaycastVehicle_3).apply(null,arguments)},Tp=b._emscripten_bind_btRaycastVehicle_applyEngineForce_2=function(){return(Tp=b._emscripten_bind_btRaycastVehicle_applyEngineForce_2=
b.asm.emscripten_bind_btRaycastVehicle_applyEngineForce_2).apply(null,arguments)},Up=b._emscripten_bind_btRaycastVehicle_setSteeringValue_2=function(){return(Up=b._emscripten_bind_btRaycastVehicle_setSteeringValue_2=b.asm.emscripten_bind_btRaycastVehicle_setSteeringValue_2).apply(null,arguments)},Vp=b._emscripten_bind_btRaycastVehicle_getWheelTransformWS_1=function(){return(Vp=b._emscripten_bind_btRaycastVehicle_getWheelTransformWS_1=b.asm.emscripten_bind_btRaycastVehicle_getWheelTransformWS_1).apply(null,
arguments)},Wp=b._emscripten_bind_btRaycastVehicle_updateWheelTransform_2=function(){return(Wp=b._emscripten_bind_btRaycastVehicle_updateWheelTransform_2=b.asm.emscripten_bind_btRaycastVehicle_updateWheelTransform_2).apply(null,arguments)},Xp=b._emscripten_bind_btRaycastVehicle_addWheel_7=function(){return(Xp=b._emscripten_bind_btRaycastVehicle_addWheel_7=b.asm.emscripten_bind_btRaycastVehicle_addWheel_7).apply(null,arguments)},Yp=b._emscripten_bind_btRaycastVehicle_getNumWheels_0=function(){return(Yp=
b._emscripten_bind_btRaycastVehicle_getNumWheels_0=b.asm.emscripten_bind_btRaycastVehicle_getNumWheels_0).apply(null,arguments)},Zp=b._emscripten_bind_btRaycastVehicle_getRigidBody_0=function(){return(Zp=b._emscripten_bind_btRaycastVehicle_getRigidBody_0=b.asm.emscripten_bind_btRaycastVehicle_getRigidBody_0).apply(null,arguments)},$p=b._emscripten_bind_btRaycastVehicle_getWheelInfo_1=function(){return($p=b._emscripten_bind_btRaycastVehicle_getWheelInfo_1=b.asm.emscripten_bind_btRaycastVehicle_getWheelInfo_1).apply(null,
arguments)},aq=b._emscripten_bind_btRaycastVehicle_setBrake_2=function(){return(aq=b._emscripten_bind_btRaycastVehicle_setBrake_2=b.asm.emscripten_bind_btRaycastVehicle_setBrake_2).apply(null,arguments)},bq=b._emscripten_bind_btRaycastVehicle_setCoordinateSystem_3=function(){return(bq=b._emscripten_bind_btRaycastVehicle_setCoordinateSystem_3=b.asm.emscripten_bind_btRaycastVehicle_setCoordinateSystem_3).apply(null,arguments)},cq=b._emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0=function(){return(cq=
b._emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0=b.asm.emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0).apply(null,arguments)},dq=b._emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0=function(){return(dq=b._emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0=b.asm.emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0).apply(null,arguments)},eq=b._emscripten_bind_btRaycastVehicle_rayCast_1=function(){return(eq=b._emscripten_bind_btRaycastVehicle_rayCast_1=
b.asm.emscripten_bind_btRaycastVehicle_rayCast_1).apply(null,arguments)},fq=b._emscripten_bind_btRaycastVehicle_updateVehicle_1=function(){return(fq=b._emscripten_bind_btRaycastVehicle_updateVehicle_1=b.asm.emscripten_bind_btRaycastVehicle_updateVehicle_1).apply(null,arguments)},gq=b._emscripten_bind_btRaycastVehicle_resetSuspension_0=function(){return(gq=b._emscripten_bind_btRaycastVehicle_resetSuspension_0=b.asm.emscripten_bind_btRaycastVehicle_resetSuspension_0).apply(null,arguments)},hq=b._emscripten_bind_btRaycastVehicle_getSteeringValue_1=
function(){return(hq=b._emscripten_bind_btRaycastVehicle_getSteeringValue_1=b.asm.emscripten_bind_btRaycastVehicle_getSteeringValue_1).apply(null,arguments)},iq=b._emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1=function(){return(iq=b._emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1=b.asm.emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1).apply(null,arguments)},jq=b._emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2=function(){return(jq=b._emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2=
b.asm.emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2).apply(null,arguments)},kq=b._emscripten_bind_btRaycastVehicle_setPitchControl_1=function(){return(kq=b._emscripten_bind_btRaycastVehicle_setPitchControl_1=b.asm.emscripten_bind_btRaycastVehicle_setPitchControl_1).apply(null,arguments)},lq=b._emscripten_bind_btRaycastVehicle_updateSuspension_1=function(){return(lq=b._emscripten_bind_btRaycastVehicle_updateSuspension_1=b.asm.emscripten_bind_btRaycastVehicle_updateSuspension_1).apply(null,
arguments)},mq=b._emscripten_bind_btRaycastVehicle_updateFriction_1=function(){return(mq=b._emscripten_bind_btRaycastVehicle_updateFriction_1=b.asm.emscripten_bind_btRaycastVehicle_updateFriction_1).apply(null,arguments)},nq=b._emscripten_bind_btRaycastVehicle_getRightAxis_0=function(){return(nq=b._emscripten_bind_btRaycastVehicle_getRightAxis_0=b.asm.emscripten_bind_btRaycastVehicle_getRightAxis_0).apply(null,arguments)},oq=b._emscripten_bind_btRaycastVehicle_getUpAxis_0=function(){return(oq=b._emscripten_bind_btRaycastVehicle_getUpAxis_0=
b.asm.emscripten_bind_btRaycastVehicle_getUpAxis_0).apply(null,arguments)},pq=b._emscripten_bind_btRaycastVehicle_getForwardAxis_0=function(){return(pq=b._emscripten_bind_btRaycastVehicle_getForwardAxis_0=b.asm.emscripten_bind_btRaycastVehicle_getForwardAxis_0).apply(null,arguments)},qq=b._emscripten_bind_btRaycastVehicle_getForwardVector_0=function(){return(qq=b._emscripten_bind_btRaycastVehicle_getForwardVector_0=b.asm.emscripten_bind_btRaycastVehicle_getForwardVector_0).apply(null,arguments)},
rq=b._emscripten_bind_btRaycastVehicle_getUserConstraintType_0=function(){return(rq=b._emscripten_bind_btRaycastVehicle_getUserConstraintType_0=b.asm.emscripten_bind_btRaycastVehicle_getUserConstraintType_0).apply(null,arguments)},sq=b._emscripten_bind_btRaycastVehicle_setUserConstraintType_1=function(){return(sq=b._emscripten_bind_btRaycastVehicle_setUserConstraintType_1=b.asm.emscripten_bind_btRaycastVehicle_setUserConstraintType_1).apply(null,arguments)},tq=b._emscripten_bind_btRaycastVehicle_setUserConstraintId_1=
function(){return(tq=b._emscripten_bind_btRaycastVehicle_setUserConstraintId_1=b.asm.emscripten_bind_btRaycastVehicle_setUserConstraintId_1).apply(null,arguments)},uq=b._emscripten_bind_btRaycastVehicle_getUserConstraintId_0=function(){return(uq=b._emscripten_bind_btRaycastVehicle_getUserConstraintId_0=b.asm.emscripten_bind_btRaycastVehicle_getUserConstraintId_0).apply(null,arguments)},vq=b._emscripten_bind_btRaycastVehicle_updateAction_2=function(){return(vq=b._emscripten_bind_btRaycastVehicle_updateAction_2=
b.asm.emscripten_bind_btRaycastVehicle_updateAction_2).apply(null,arguments)},wq=b._emscripten_bind_btRaycastVehicle___destroy___0=function(){return(wq=b._emscripten_bind_btRaycastVehicle___destroy___0=b.asm.emscripten_bind_btRaycastVehicle___destroy___0).apply(null,arguments)},xq=b._emscripten_bind_btCylinderShapeX_btCylinderShapeX_1=function(){return(xq=b._emscripten_bind_btCylinderShapeX_btCylinderShapeX_1=b.asm.emscripten_bind_btCylinderShapeX_btCylinderShapeX_1).apply(null,arguments)},yq=b._emscripten_bind_btCylinderShapeX_setMargin_1=
function(){return(yq=b._emscripten_bind_btCylinderShapeX_setMargin_1=b.asm.emscripten_bind_btCylinderShapeX_setMargin_1).apply(null,arguments)},zq=b._emscripten_bind_btCylinderShapeX_getMargin_0=function(){return(zq=b._emscripten_bind_btCylinderShapeX_getMargin_0=b.asm.emscripten_bind_btCylinderShapeX_getMargin_0).apply(null,arguments)},Aq=b._emscripten_bind_btCylinderShapeX_setLocalScaling_1=function(){return(Aq=b._emscripten_bind_btCylinderShapeX_setLocalScaling_1=b.asm.emscripten_bind_btCylinderShapeX_setLocalScaling_1).apply(null,
arguments)},Bq=b._emscripten_bind_btCylinderShapeX_getLocalScaling_0=function(){return(Bq=b._emscripten_bind_btCylinderShapeX_getLocalScaling_0=b.asm.emscripten_bind_btCylinderShapeX_getLocalScaling_0).apply(null,arguments)},Cq=b._emscripten_bind_btCylinderShapeX_calculateLocalInertia_2=function(){return(Cq=b._emscripten_bind_btCylinderShapeX_calculateLocalInertia_2=b.asm.emscripten_bind_btCylinderShapeX_calculateLocalInertia_2).apply(null,arguments)},Dq=b._emscripten_bind_btCylinderShapeX___destroy___0=
function(){return(Dq=b._emscripten_bind_btCylinderShapeX___destroy___0=b.asm.emscripten_bind_btCylinderShapeX___destroy___0).apply(null,arguments)},Eq=b._emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1=function(){return(Eq=b._emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1=b.asm.emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1).apply(null,arguments)},Fq=b._emscripten_bind_btCylinderShapeZ_setMargin_1=function(){return(Fq=b._emscripten_bind_btCylinderShapeZ_setMargin_1=b.asm.emscripten_bind_btCylinderShapeZ_setMargin_1).apply(null,
arguments)},Gq=b._emscripten_bind_btCylinderShapeZ_getMargin_0=function(){return(Gq=b._emscripten_bind_btCylinderShapeZ_getMargin_0=b.asm.emscripten_bind_btCylinderShapeZ_getMargin_0).apply(null,arguments)},Hq=b._emscripten_bind_btCylinderShapeZ_setLocalScaling_1=function(){return(Hq=b._emscripten_bind_btCylinderShapeZ_setLocalScaling_1=b.asm.emscripten_bind_btCylinderShapeZ_setLocalScaling_1).apply(null,arguments)},Iq=b._emscripten_bind_btCylinderShapeZ_getLocalScaling_0=function(){return(Iq=b._emscripten_bind_btCylinderShapeZ_getLocalScaling_0=
b.asm.emscripten_bind_btCylinderShapeZ_getLocalScaling_0).apply(null,arguments)},Jq=b._emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2=function(){return(Jq=b._emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2=b.asm.emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2).apply(null,arguments)},Kq=b._emscripten_bind_btCylinderShapeZ___destroy___0=function(){return(Kq=b._emscripten_bind_btCylinderShapeZ___destroy___0=b.asm.emscripten_bind_btCylinderShapeZ___destroy___0).apply(null,
arguments)},Lq=b._emscripten_bind_btConvexPolyhedron_get_m_vertices_0=function(){return(Lq=b._emscripten_bind_btConvexPolyhedron_get_m_vertices_0=b.asm.emscripten_bind_btConvexPolyhedron_get_m_vertices_0).apply(null,arguments)},Mq=b._emscripten_bind_btConvexPolyhedron_set_m_vertices_1=function(){return(Mq=b._emscripten_bind_btConvexPolyhedron_set_m_vertices_1=b.asm.emscripten_bind_btConvexPolyhedron_set_m_vertices_1).apply(null,arguments)},Nq=b._emscripten_bind_btConvexPolyhedron_get_m_faces_0=function(){return(Nq=
b._emscripten_bind_btConvexPolyhedron_get_m_faces_0=b.asm.emscripten_bind_btConvexPolyhedron_get_m_faces_0).apply(null,arguments)},Oq=b._emscripten_bind_btConvexPolyhedron_set_m_faces_1=function(){return(Oq=b._emscripten_bind_btConvexPolyhedron_set_m_faces_1=b.asm.emscripten_bind_btConvexPolyhedron_set_m_faces_1).apply(null,arguments)},Pq=b._emscripten_bind_btConvexPolyhedron___destroy___0=function(){return(Pq=b._emscripten_bind_btConvexPolyhedron___destroy___0=b.asm.emscripten_bind_btConvexPolyhedron___destroy___0).apply(null,
arguments)},Qq=b._emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=function(){return(Qq=b._emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=b.asm.emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0).apply(null,arguments)},Rq=b._emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=function(){return(Rq=b._emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=
b.asm.emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0).apply(null,arguments)},Sq=b._emscripten_bind_tAnchorArray_size_0=function(){return(Sq=b._emscripten_bind_tAnchorArray_size_0=b.asm.emscripten_bind_tAnchorArray_size_0).apply(null,arguments)},Tq=b._emscripten_bind_tAnchorArray_at_1=function(){return(Tq=b._emscripten_bind_tAnchorArray_at_1=b.asm.emscripten_bind_tAnchorArray_at_1).apply(null,arguments)},Uq=b._emscripten_bind_tAnchorArray_clear_0=function(){return(Uq=b._emscripten_bind_tAnchorArray_clear_0=
b.asm.emscripten_bind_tAnchorArray_clear_0).apply(null,arguments)},Vq=b._emscripten_bind_tAnchorArray_push_back_1=function(){return(Vq=b._emscripten_bind_tAnchorArray_push_back_1=b.asm.emscripten_bind_tAnchorArray_push_back_1).apply(null,arguments)},Wq=b._emscripten_bind_tAnchorArray_pop_back_0=function(){return(Wq=b._emscripten_bind_tAnchorArray_pop_back_0=b.asm.emscripten_bind_tAnchorArray_pop_back_0).apply(null,arguments)},Xq=b._emscripten_bind_tAnchorArray___destroy___0=function(){return(Xq=b._emscripten_bind_tAnchorArray___destroy___0=
b.asm.emscripten_bind_tAnchorArray___destroy___0).apply(null,arguments)},Yq=b._emscripten_bind_RaycastInfo_get_m_contactNormalWS_0=function(){return(Yq=b._emscripten_bind_RaycastInfo_get_m_contactNormalWS_0=b.asm.emscripten_bind_RaycastInfo_get_m_contactNormalWS_0).apply(null,arguments)},Zq=b._emscripten_bind_RaycastInfo_set_m_contactNormalWS_1=function(){return(Zq=b._emscripten_bind_RaycastInfo_set_m_contactNormalWS_1=b.asm.emscripten_bind_RaycastInfo_set_m_contactNormalWS_1).apply(null,arguments)},
$q=b._emscripten_bind_RaycastInfo_get_m_contactPointWS_0=function(){return($q=b._emscripten_bind_RaycastInfo_get_m_contactPointWS_0=b.asm.emscripten_bind_RaycastInfo_get_m_contactPointWS_0).apply(null,arguments)},ar=b._emscripten_bind_RaycastInfo_set_m_contactPointWS_1=function(){return(ar=b._emscripten_bind_RaycastInfo_set_m_contactPointWS_1=b.asm.emscripten_bind_RaycastInfo_set_m_contactPointWS_1).apply(null,arguments)},br=b._emscripten_bind_RaycastInfo_get_m_suspensionLength_0=function(){return(br=
b._emscripten_bind_RaycastInfo_get_m_suspensionLength_0=b.asm.emscripten_bind_RaycastInfo_get_m_suspensionLength_0).apply(null,arguments)},cr=b._emscripten_bind_RaycastInfo_set_m_suspensionLength_1=function(){return(cr=b._emscripten_bind_RaycastInfo_set_m_suspensionLength_1=b.asm.emscripten_bind_RaycastInfo_set_m_suspensionLength_1).apply(null,arguments)},dr=b._emscripten_bind_RaycastInfo_get_m_hardPointWS_0=function(){return(dr=b._emscripten_bind_RaycastInfo_get_m_hardPointWS_0=b.asm.emscripten_bind_RaycastInfo_get_m_hardPointWS_0).apply(null,
arguments)},er=b._emscripten_bind_RaycastInfo_set_m_hardPointWS_1=function(){return(er=b._emscripten_bind_RaycastInfo_set_m_hardPointWS_1=b.asm.emscripten_bind_RaycastInfo_set_m_hardPointWS_1).apply(null,arguments)},fr=b._emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0=function(){return(fr=b._emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0=b.asm.emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0).apply(null,arguments)},gr=b._emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1=function(){return(gr=
b._emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1=b.asm.emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1).apply(null,arguments)},hr=b._emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0=function(){return(hr=b._emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0=b.asm.emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0).apply(null,arguments)},ir=b._emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1=function(){return(ir=b._emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1=b.asm.emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1).apply(null,
arguments)},jr=b._emscripten_bind_RaycastInfo_get_m_isInContact_0=function(){return(jr=b._emscripten_bind_RaycastInfo_get_m_isInContact_0=b.asm.emscripten_bind_RaycastInfo_get_m_isInContact_0).apply(null,arguments)},kr=b._emscripten_bind_RaycastInfo_set_m_isInContact_1=function(){return(kr=b._emscripten_bind_RaycastInfo_set_m_isInContact_1=b.asm.emscripten_bind_RaycastInfo_set_m_isInContact_1).apply(null,arguments)},lr=b._emscripten_bind_RaycastInfo_get_m_groundObject_0=function(){return(lr=b._emscripten_bind_RaycastInfo_get_m_groundObject_0=
b.asm.emscripten_bind_RaycastInfo_get_m_groundObject_0).apply(null,arguments)},mr=b._emscripten_bind_RaycastInfo_set_m_groundObject_1=function(){return(mr=b._emscripten_bind_RaycastInfo_set_m_groundObject_1=b.asm.emscripten_bind_RaycastInfo_set_m_groundObject_1).apply(null,arguments)},nr=b._emscripten_bind_RaycastInfo___destroy___0=function(){return(nr=b._emscripten_bind_RaycastInfo___destroy___0=b.asm.emscripten_bind_RaycastInfo___destroy___0).apply(null,arguments)},or=b._emscripten_bind_btMultiSphereShape_btMultiSphereShape_3=
function(){return(or=b._emscripten_bind_btMultiSphereShape_btMultiSphereShape_3=b.asm.emscripten_bind_btMultiSphereShape_btMultiSphereShape_3).apply(null,arguments)},pr=b._emscripten_bind_btMultiSphereShape_setLocalScaling_1=function(){return(pr=b._emscripten_bind_btMultiSphereShape_setLocalScaling_1=b.asm.emscripten_bind_btMultiSphereShape_setLocalScaling_1).apply(null,arguments)},qr=b._emscripten_bind_btMultiSphereShape_getLocalScaling_0=function(){return(qr=b._emscripten_bind_btMultiSphereShape_getLocalScaling_0=
b.asm.emscripten_bind_btMultiSphereShape_getLocalScaling_0).apply(null,arguments)},rr=b._emscripten_bind_btMultiSphereShape_calculateLocalInertia_2=function(){return(rr=b._emscripten_bind_btMultiSphereShape_calculateLocalInertia_2=b.asm.emscripten_bind_btMultiSphereShape_calculateLocalInertia_2).apply(null,arguments)},sr=b._emscripten_bind_btMultiSphereShape___destroy___0=function(){return(sr=b._emscripten_bind_btMultiSphereShape___destroy___0=b.asm.emscripten_bind_btMultiSphereShape___destroy___0).apply(null,
arguments)},tr=b._emscripten_bind_btSoftBody_btSoftBody_4=function(){return(tr=b._emscripten_bind_btSoftBody_btSoftBody_4=b.asm.emscripten_bind_btSoftBody_btSoftBody_4).apply(null,arguments)},ur=b._emscripten_bind_btSoftBody_checkLink_2=function(){return(ur=b._emscripten_bind_btSoftBody_checkLink_2=b.asm.emscripten_bind_btSoftBody_checkLink_2).apply(null,arguments)},vr=b._emscripten_bind_btSoftBody_checkFace_3=function(){return(vr=b._emscripten_bind_btSoftBody_checkFace_3=b.asm.emscripten_bind_btSoftBody_checkFace_3).apply(null,
arguments)},wr=b._emscripten_bind_btSoftBody_appendMaterial_0=function(){return(wr=b._emscripten_bind_btSoftBody_appendMaterial_0=b.asm.emscripten_bind_btSoftBody_appendMaterial_0).apply(null,arguments)},xr=b._emscripten_bind_btSoftBody_appendNode_2=function(){return(xr=b._emscripten_bind_btSoftBody_appendNode_2=b.asm.emscripten_bind_btSoftBody_appendNode_2).apply(null,arguments)},yr=b._emscripten_bind_btSoftBody_appendLink_4=function(){return(yr=b._emscripten_bind_btSoftBody_appendLink_4=b.asm.emscripten_bind_btSoftBody_appendLink_4).apply(null,
arguments)},zr=b._emscripten_bind_btSoftBody_appendFace_4=function(){return(zr=b._emscripten_bind_btSoftBody_appendFace_4=b.asm.emscripten_bind_btSoftBody_appendFace_4).apply(null,arguments)},Ar=b._emscripten_bind_btSoftBody_appendTetra_5=function(){return(Ar=b._emscripten_bind_btSoftBody_appendTetra_5=b.asm.emscripten_bind_btSoftBody_appendTetra_5).apply(null,arguments)},Br=b._emscripten_bind_btSoftBody_appendAnchor_4=function(){return(Br=b._emscripten_bind_btSoftBody_appendAnchor_4=b.asm.emscripten_bind_btSoftBody_appendAnchor_4).apply(null,
arguments)},Cr=b._emscripten_bind_btSoftBody_addForce_1=function(){return(Cr=b._emscripten_bind_btSoftBody_addForce_1=b.asm.emscripten_bind_btSoftBody_addForce_1).apply(null,arguments)},Dr=b._emscripten_bind_btSoftBody_addForce_2=function(){return(Dr=b._emscripten_bind_btSoftBody_addForce_2=b.asm.emscripten_bind_btSoftBody_addForce_2).apply(null,arguments)},Er=b._emscripten_bind_btSoftBody_addAeroForceToNode_2=function(){return(Er=b._emscripten_bind_btSoftBody_addAeroForceToNode_2=b.asm.emscripten_bind_btSoftBody_addAeroForceToNode_2).apply(null,
arguments)},Fr=b._emscripten_bind_btSoftBody_getTotalMass_0=function(){return(Fr=b._emscripten_bind_btSoftBody_getTotalMass_0=b.asm.emscripten_bind_btSoftBody_getTotalMass_0).apply(null,arguments)},Gr=b._emscripten_bind_btSoftBody_setTotalMass_2=function(){return(Gr=b._emscripten_bind_btSoftBody_setTotalMass_2=b.asm.emscripten_bind_btSoftBody_setTotalMass_2).apply(null,arguments)},Hr=b._emscripten_bind_btSoftBody_setMass_2=function(){return(Hr=b._emscripten_bind_btSoftBody_setMass_2=b.asm.emscripten_bind_btSoftBody_setMass_2).apply(null,
arguments)},Ir=b._emscripten_bind_btSoftBody_transform_1=function(){return(Ir=b._emscripten_bind_btSoftBody_transform_1=b.asm.emscripten_bind_btSoftBody_transform_1).apply(null,arguments)},Jr=b._emscripten_bind_btSoftBody_translate_1=function(){return(Jr=b._emscripten_bind_btSoftBody_translate_1=b.asm.emscripten_bind_btSoftBody_translate_1).apply(null,arguments)},Kr=b._emscripten_bind_btSoftBody_rotate_1=function(){return(Kr=b._emscripten_bind_btSoftBody_rotate_1=b.asm.emscripten_bind_btSoftBody_rotate_1).apply(null,
arguments)},Lr=b._emscripten_bind_btSoftBody_scale_1=function(){return(Lr=b._emscripten_bind_btSoftBody_scale_1=b.asm.emscripten_bind_btSoftBody_scale_1).apply(null,arguments)},Mr=b._emscripten_bind_btSoftBody_generateClusters_1=function(){return(Mr=b._emscripten_bind_btSoftBody_generateClusters_1=b.asm.emscripten_bind_btSoftBody_generateClusters_1).apply(null,arguments)},Nr=b._emscripten_bind_btSoftBody_generateClusters_2=function(){return(Nr=b._emscripten_bind_btSoftBody_generateClusters_2=b.asm.emscripten_bind_btSoftBody_generateClusters_2).apply(null,
arguments)},Or=b._emscripten_bind_btSoftBody_generateBendingConstraints_2=function(){return(Or=b._emscripten_bind_btSoftBody_generateBendingConstraints_2=b.asm.emscripten_bind_btSoftBody_generateBendingConstraints_2).apply(null,arguments)},Pr=b._emscripten_bind_btSoftBody_upcast_1=function(){return(Pr=b._emscripten_bind_btSoftBody_upcast_1=b.asm.emscripten_bind_btSoftBody_upcast_1).apply(null,arguments)},Qr=b._emscripten_bind_btSoftBody_setAnisotropicFriction_2=function(){return(Qr=b._emscripten_bind_btSoftBody_setAnisotropicFriction_2=
b.asm.emscripten_bind_btSoftBody_setAnisotropicFriction_2).apply(null,arguments)},Rr=b._emscripten_bind_btSoftBody_getCollisionShape_0=function(){return(Rr=b._emscripten_bind_btSoftBody_getCollisionShape_0=b.asm.emscripten_bind_btSoftBody_getCollisionShape_0).apply(null,arguments)},Sr=b._emscripten_bind_btSoftBody_setContactProcessingThreshold_1=function(){return(Sr=b._emscripten_bind_btSoftBody_setContactProcessingThreshold_1=b.asm.emscripten_bind_btSoftBody_setContactProcessingThreshold_1).apply(null,
arguments)},Tr=b._emscripten_bind_btSoftBody_setActivationState_1=function(){return(Tr=b._emscripten_bind_btSoftBody_setActivationState_1=b.asm.emscripten_bind_btSoftBody_setActivationState_1).apply(null,arguments)},Ur=b._emscripten_bind_btSoftBody_forceActivationState_1=function(){return(Ur=b._emscripten_bind_btSoftBody_forceActivationState_1=b.asm.emscripten_bind_btSoftBody_forceActivationState_1).apply(null,arguments)},Vr=b._emscripten_bind_btSoftBody_activate_0=function(){return(Vr=b._emscripten_bind_btSoftBody_activate_0=
b.asm.emscripten_bind_btSoftBody_activate_0).apply(null,arguments)},Wr=b._emscripten_bind_btSoftBody_activate_1=function(){return(Wr=b._emscripten_bind_btSoftBody_activate_1=b.asm.emscripten_bind_btSoftBody_activate_1).apply(null,arguments)},Xr=b._emscripten_bind_btSoftBody_isActive_0=function(){return(Xr=b._emscripten_bind_btSoftBody_isActive_0=b.asm.emscripten_bind_btSoftBody_isActive_0).apply(null,arguments)},Yr=b._emscripten_bind_btSoftBody_isKinematicObject_0=function(){return(Yr=b._emscripten_bind_btSoftBody_isKinematicObject_0=
b.asm.emscripten_bind_btSoftBody_isKinematicObject_0).apply(null,arguments)},Zr=b._emscripten_bind_btSoftBody_isStaticObject_0=function(){return(Zr=b._emscripten_bind_btSoftBody_isStaticObject_0=b.asm.emscripten_bind_btSoftBody_isStaticObject_0).apply(null,arguments)},$r=b._emscripten_bind_btSoftBody_isStaticOrKinematicObject_0=function(){return($r=b._emscripten_bind_btSoftBody_isStaticOrKinematicObject_0=b.asm.emscripten_bind_btSoftBody_isStaticOrKinematicObject_0).apply(null,arguments)},as=b._emscripten_bind_btSoftBody_getRestitution_0=
function(){return(as=b._emscripten_bind_btSoftBody_getRestitution_0=b.asm.emscripten_bind_btSoftBody_getRestitution_0).apply(null,arguments)},bs=b._emscripten_bind_btSoftBody_getFriction_0=function(){return(bs=b._emscripten_bind_btSoftBody_getFriction_0=b.asm.emscripten_bind_btSoftBody_getFriction_0).apply(null,arguments)},cs=b._emscripten_bind_btSoftBody_getRollingFriction_0=function(){return(cs=b._emscripten_bind_btSoftBody_getRollingFriction_0=b.asm.emscripten_bind_btSoftBody_getRollingFriction_0).apply(null,
arguments)},ds=b._emscripten_bind_btSoftBody_setRestitution_1=function(){return(ds=b._emscripten_bind_btSoftBody_setRestitution_1=b.asm.emscripten_bind_btSoftBody_setRestitution_1).apply(null,arguments)},es=b._emscripten_bind_btSoftBody_setFriction_1=function(){return(es=b._emscripten_bind_btSoftBody_setFriction_1=b.asm.emscripten_bind_btSoftBody_setFriction_1).apply(null,arguments)},gs=b._emscripten_bind_btSoftBody_setRollingFriction_1=function(){return(gs=b._emscripten_bind_btSoftBody_setRollingFriction_1=
b.asm.emscripten_bind_btSoftBody_setRollingFriction_1).apply(null,arguments)},hs=b._emscripten_bind_btSoftBody_getWorldTransform_0=function(){return(hs=b._emscripten_bind_btSoftBody_getWorldTransform_0=b.asm.emscripten_bind_btSoftBody_getWorldTransform_0).apply(null,arguments)},is=b._emscripten_bind_btSoftBody_getCollisionFlags_0=function(){return(is=b._emscripten_bind_btSoftBody_getCollisionFlags_0=b.asm.emscripten_bind_btSoftBody_getCollisionFlags_0).apply(null,arguments)},js=b._emscripten_bind_btSoftBody_setCollisionFlags_1=
function(){return(js=b._emscripten_bind_btSoftBody_setCollisionFlags_1=b.asm.emscripten_bind_btSoftBody_setCollisionFlags_1).apply(null,arguments)},ks=b._emscripten_bind_btSoftBody_setWorldTransform_1=function(){return(ks=b._emscripten_bind_btSoftBody_setWorldTransform_1=b.asm.emscripten_bind_btSoftBody_setWorldTransform_1).apply(null,arguments)},ls=b._emscripten_bind_btSoftBody_setCollisionShape_1=function(){return(ls=b._emscripten_bind_btSoftBody_setCollisionShape_1=b.asm.emscripten_bind_btSoftBody_setCollisionShape_1).apply(null,
arguments)},ms=b._emscripten_bind_btSoftBody_setCcdMotionThreshold_1=function(){return(ms=b._emscripten_bind_btSoftBody_setCcdMotionThreshold_1=b.asm.emscripten_bind_btSoftBody_setCcdMotionThreshold_1).apply(null,arguments)},ns=b._emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1=function(){return(ns=b._emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1=b.asm.emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1).apply(null,arguments)},ps=b._emscripten_bind_btSoftBody_getUserIndex_0=function(){return(ps=
b._emscripten_bind_btSoftBody_getUserIndex_0=b.asm.emscripten_bind_btSoftBody_getUserIndex_0).apply(null,arguments)},qs=b._emscripten_bind_btSoftBody_setUserIndex_1=function(){return(qs=b._emscripten_bind_btSoftBody_setUserIndex_1=b.asm.emscripten_bind_btSoftBody_setUserIndex_1).apply(null,arguments)},rs=b._emscripten_bind_btSoftBody_getUserPointer_0=function(){return(rs=b._emscripten_bind_btSoftBody_getUserPointer_0=b.asm.emscripten_bind_btSoftBody_getUserPointer_0).apply(null,arguments)},ss=b._emscripten_bind_btSoftBody_setUserPointer_1=
function(){return(ss=b._emscripten_bind_btSoftBody_setUserPointer_1=b.asm.emscripten_bind_btSoftBody_setUserPointer_1).apply(null,arguments)},ts=b._emscripten_bind_btSoftBody_getBroadphaseHandle_0=function(){return(ts=b._emscripten_bind_btSoftBody_getBroadphaseHandle_0=b.asm.emscripten_bind_btSoftBody_getBroadphaseHandle_0).apply(null,arguments)},us=b._emscripten_bind_btSoftBody_get_m_cfg_0=function(){return(us=b._emscripten_bind_btSoftBody_get_m_cfg_0=b.asm.emscripten_bind_btSoftBody_get_m_cfg_0).apply(null,
arguments)},vs=b._emscripten_bind_btSoftBody_set_m_cfg_1=function(){return(vs=b._emscripten_bind_btSoftBody_set_m_cfg_1=b.asm.emscripten_bind_btSoftBody_set_m_cfg_1).apply(null,arguments)},xs=b._emscripten_bind_btSoftBody_get_m_nodes_0=function(){return(xs=b._emscripten_bind_btSoftBody_get_m_nodes_0=b.asm.emscripten_bind_btSoftBody_get_m_nodes_0).apply(null,arguments)},ys=b._emscripten_bind_btSoftBody_set_m_nodes_1=function(){return(ys=b._emscripten_bind_btSoftBody_set_m_nodes_1=b.asm.emscripten_bind_btSoftBody_set_m_nodes_1).apply(null,
arguments)},zs=b._emscripten_bind_btSoftBody_get_m_faces_0=function(){return(zs=b._emscripten_bind_btSoftBody_get_m_faces_0=b.asm.emscripten_bind_btSoftBody_get_m_faces_0).apply(null,arguments)},As=b._emscripten_bind_btSoftBody_set_m_faces_1=function(){return(As=b._emscripten_bind_btSoftBody_set_m_faces_1=b.asm.emscripten_bind_btSoftBody_set_m_faces_1).apply(null,arguments)},Bs=b._emscripten_bind_btSoftBody_get_m_materials_0=function(){return(Bs=b._emscripten_bind_btSoftBody_get_m_materials_0=b.asm.emscripten_bind_btSoftBody_get_m_materials_0).apply(null,
arguments)},Cs=b._emscripten_bind_btSoftBody_set_m_materials_1=function(){return(Cs=b._emscripten_bind_btSoftBody_set_m_materials_1=b.asm.emscripten_bind_btSoftBody_set_m_materials_1).apply(null,arguments)},Ds=b._emscripten_bind_btSoftBody_get_m_anchors_0=function(){return(Ds=b._emscripten_bind_btSoftBody_get_m_anchors_0=b.asm.emscripten_bind_btSoftBody_get_m_anchors_0).apply(null,arguments)},Es=b._emscripten_bind_btSoftBody_set_m_anchors_1=function(){return(Es=b._emscripten_bind_btSoftBody_set_m_anchors_1=
b.asm.emscripten_bind_btSoftBody_set_m_anchors_1).apply(null,arguments)},Fs=b._emscripten_bind_btSoftBody___destroy___0=function(){return(Fs=b._emscripten_bind_btSoftBody___destroy___0=b.asm.emscripten_bind_btSoftBody___destroy___0).apply(null,arguments)},Gs=b._emscripten_bind_btIntArray_size_0=function(){return(Gs=b._emscripten_bind_btIntArray_size_0=b.asm.emscripten_bind_btIntArray_size_0).apply(null,arguments)},Hs=b._emscripten_bind_btIntArray_at_1=function(){return(Hs=b._emscripten_bind_btIntArray_at_1=
b.asm.emscripten_bind_btIntArray_at_1).apply(null,arguments)},Is=b._emscripten_bind_btIntArray___destroy___0=function(){return(Is=b._emscripten_bind_btIntArray___destroy___0=b.asm.emscripten_bind_btIntArray___destroy___0).apply(null,arguments)},Js=b._emscripten_bind_Config_get_kVCF_0=function(){return(Js=b._emscripten_bind_Config_get_kVCF_0=b.asm.emscripten_bind_Config_get_kVCF_0).apply(null,arguments)},Ks=b._emscripten_bind_Config_set_kVCF_1=function(){return(Ks=b._emscripten_bind_Config_set_kVCF_1=
b.asm.emscripten_bind_Config_set_kVCF_1).apply(null,arguments)},Ls=b._emscripten_bind_Config_get_kDP_0=function(){return(Ls=b._emscripten_bind_Config_get_kDP_0=b.asm.emscripten_bind_Config_get_kDP_0).apply(null,arguments)},Ms=b._emscripten_bind_Config_set_kDP_1=function(){return(Ms=b._emscripten_bind_Config_set_kDP_1=b.asm.emscripten_bind_Config_set_kDP_1).apply(null,arguments)},Ns=b._emscripten_bind_Config_get_kDG_0=function(){return(Ns=b._emscripten_bind_Config_get_kDG_0=b.asm.emscripten_bind_Config_get_kDG_0).apply(null,
arguments)},Os=b._emscripten_bind_Config_set_kDG_1=function(){return(Os=b._emscripten_bind_Config_set_kDG_1=b.asm.emscripten_bind_Config_set_kDG_1).apply(null,arguments)},Ps=b._emscripten_bind_Config_get_kLF_0=function(){return(Ps=b._emscripten_bind_Config_get_kLF_0=b.asm.emscripten_bind_Config_get_kLF_0).apply(null,arguments)},Qs=b._emscripten_bind_Config_set_kLF_1=function(){return(Qs=b._emscripten_bind_Config_set_kLF_1=b.asm.emscripten_bind_Config_set_kLF_1).apply(null,arguments)},Rs=b._emscripten_bind_Config_get_kPR_0=
function(){return(Rs=b._emscripten_bind_Config_get_kPR_0=b.asm.emscripten_bind_Config_get_kPR_0).apply(null,arguments)},Ss=b._emscripten_bind_Config_set_kPR_1=function(){return(Ss=b._emscripten_bind_Config_set_kPR_1=b.asm.emscripten_bind_Config_set_kPR_1).apply(null,arguments)},Ts=b._emscripten_bind_Config_get_kVC_0=function(){return(Ts=b._emscripten_bind_Config_get_kVC_0=b.asm.emscripten_bind_Config_get_kVC_0).apply(null,arguments)},Us=b._emscripten_bind_Config_set_kVC_1=function(){return(Us=b._emscripten_bind_Config_set_kVC_1=
b.asm.emscripten_bind_Config_set_kVC_1).apply(null,arguments)},Vs=b._emscripten_bind_Config_get_kDF_0=function(){return(Vs=b._emscripten_bind_Config_get_kDF_0=b.asm.emscripten_bind_Config_get_kDF_0).apply(null,arguments)},Ws=b._emscripten_bind_Config_set_kDF_1=function(){return(Ws=b._emscripten_bind_Config_set_kDF_1=b.asm.emscripten_bind_Config_set_kDF_1).apply(null,arguments)},Xs=b._emscripten_bind_Config_get_kMT_0=function(){return(Xs=b._emscripten_bind_Config_get_kMT_0=b.asm.emscripten_bind_Config_get_kMT_0).apply(null,
arguments)},Ys=b._emscripten_bind_Config_set_kMT_1=function(){return(Ys=b._emscripten_bind_Config_set_kMT_1=b.asm.emscripten_bind_Config_set_kMT_1).apply(null,arguments)},Zs=b._emscripten_bind_Config_get_kCHR_0=function(){return(Zs=b._emscripten_bind_Config_get_kCHR_0=b.asm.emscripten_bind_Config_get_kCHR_0).apply(null,arguments)},$s=b._emscripten_bind_Config_set_kCHR_1=function(){return($s=b._emscripten_bind_Config_set_kCHR_1=b.asm.emscripten_bind_Config_set_kCHR_1).apply(null,arguments)},at=b._emscripten_bind_Config_get_kKHR_0=
function(){return(at=b._emscripten_bind_Config_get_kKHR_0=b.asm.emscripten_bind_Config_get_kKHR_0).apply(null,arguments)},bt=b._emscripten_bind_Config_set_kKHR_1=function(){return(bt=b._emscripten_bind_Config_set_kKHR_1=b.asm.emscripten_bind_Config_set_kKHR_1).apply(null,arguments)},ct=b._emscripten_bind_Config_get_kSHR_0=function(){return(ct=b._emscripten_bind_Config_get_kSHR_0=b.asm.emscripten_bind_Config_get_kSHR_0).apply(null,arguments)},dt=b._emscripten_bind_Config_set_kSHR_1=function(){return(dt=
b._emscripten_bind_Config_set_kSHR_1=b.asm.emscripten_bind_Config_set_kSHR_1).apply(null,arguments)},et=b._emscripten_bind_Config_get_kAHR_0=function(){return(et=b._emscripten_bind_Config_get_kAHR_0=b.asm.emscripten_bind_Config_get_kAHR_0).apply(null,arguments)},ft=b._emscripten_bind_Config_set_kAHR_1=function(){return(ft=b._emscripten_bind_Config_set_kAHR_1=b.asm.emscripten_bind_Config_set_kAHR_1).apply(null,arguments)},gt=b._emscripten_bind_Config_get_kSRHR_CL_0=function(){return(gt=b._emscripten_bind_Config_get_kSRHR_CL_0=
b.asm.emscripten_bind_Config_get_kSRHR_CL_0).apply(null,arguments)},ht=b._emscripten_bind_Config_set_kSRHR_CL_1=function(){return(ht=b._emscripten_bind_Config_set_kSRHR_CL_1=b.asm.emscripten_bind_Config_set_kSRHR_CL_1).apply(null,arguments)},it=b._emscripten_bind_Config_get_kSKHR_CL_0=function(){return(it=b._emscripten_bind_Config_get_kSKHR_CL_0=b.asm.emscripten_bind_Config_get_kSKHR_CL_0).apply(null,arguments)},jt=b._emscripten_bind_Config_set_kSKHR_CL_1=function(){return(jt=b._emscripten_bind_Config_set_kSKHR_CL_1=
b.asm.emscripten_bind_Config_set_kSKHR_CL_1).apply(null,arguments)},kt=b._emscripten_bind_Config_get_kSSHR_CL_0=function(){return(kt=b._emscripten_bind_Config_get_kSSHR_CL_0=b.asm.emscripten_bind_Config_get_kSSHR_CL_0).apply(null,arguments)},lt=b._emscripten_bind_Config_set_kSSHR_CL_1=function(){return(lt=b._emscripten_bind_Config_set_kSSHR_CL_1=b.asm.emscripten_bind_Config_set_kSSHR_CL_1).apply(null,arguments)},mt=b._emscripten_bind_Config_get_kSR_SPLT_CL_0=function(){return(mt=b._emscripten_bind_Config_get_kSR_SPLT_CL_0=
b.asm.emscripten_bind_Config_get_kSR_SPLT_CL_0).apply(null,arguments)},nt=b._emscripten_bind_Config_set_kSR_SPLT_CL_1=function(){return(nt=b._emscripten_bind_Config_set_kSR_SPLT_CL_1=b.asm.emscripten_bind_Config_set_kSR_SPLT_CL_1).apply(null,arguments)},ot=b._emscripten_bind_Config_get_kSK_SPLT_CL_0=function(){return(ot=b._emscripten_bind_Config_get_kSK_SPLT_CL_0=b.asm.emscripten_bind_Config_get_kSK_SPLT_CL_0).apply(null,arguments)},pt=b._emscripten_bind_Config_set_kSK_SPLT_CL_1=function(){return(pt=
b._emscripten_bind_Config_set_kSK_SPLT_CL_1=b.asm.emscripten_bind_Config_set_kSK_SPLT_CL_1).apply(null,arguments)},qt=b._emscripten_bind_Config_get_kSS_SPLT_CL_0=function(){return(qt=b._emscripten_bind_Config_get_kSS_SPLT_CL_0=b.asm.emscripten_bind_Config_get_kSS_SPLT_CL_0).apply(null,arguments)},rt=b._emscripten_bind_Config_set_kSS_SPLT_CL_1=function(){return(rt=b._emscripten_bind_Config_set_kSS_SPLT_CL_1=b.asm.emscripten_bind_Config_set_kSS_SPLT_CL_1).apply(null,arguments)},st=b._emscripten_bind_Config_get_maxvolume_0=
function(){return(st=b._emscripten_bind_Config_get_maxvolume_0=b.asm.emscripten_bind_Config_get_maxvolume_0).apply(null,arguments)},tt=b._emscripten_bind_Config_set_maxvolume_1=function(){return(tt=b._emscripten_bind_Config_set_maxvolume_1=b.asm.emscripten_bind_Config_set_maxvolume_1).apply(null,arguments)},ut=b._emscripten_bind_Config_get_timescale_0=function(){return(ut=b._emscripten_bind_Config_get_timescale_0=b.asm.emscripten_bind_Config_get_timescale_0).apply(null,arguments)},vt=b._emscripten_bind_Config_set_timescale_1=
function(){return(vt=b._emscripten_bind_Config_set_timescale_1=b.asm.emscripten_bind_Config_set_timescale_1).apply(null,arguments)},wt=b._emscripten_bind_Config_get_viterations_0=function(){return(wt=b._emscripten_bind_Config_get_viterations_0=b.asm.emscripten_bind_Config_get_viterations_0).apply(null,arguments)},xt=b._emscripten_bind_Config_set_viterations_1=function(){return(xt=b._emscripten_bind_Config_set_viterations_1=b.asm.emscripten_bind_Config_set_viterations_1).apply(null,arguments)},yt=
b._emscripten_bind_Config_get_piterations_0=function(){return(yt=b._emscripten_bind_Config_get_piterations_0=b.asm.emscripten_bind_Config_get_piterations_0).apply(null,arguments)},zt=b._emscripten_bind_Config_set_piterations_1=function(){return(zt=b._emscripten_bind_Config_set_piterations_1=b.asm.emscripten_bind_Config_set_piterations_1).apply(null,arguments)},At=b._emscripten_bind_Config_get_diterations_0=function(){return(At=b._emscripten_bind_Config_get_diterations_0=b.asm.emscripten_bind_Config_get_diterations_0).apply(null,
arguments)},Bt=b._emscripten_bind_Config_set_diterations_1=function(){return(Bt=b._emscripten_bind_Config_set_diterations_1=b.asm.emscripten_bind_Config_set_diterations_1).apply(null,arguments)},Ct=b._emscripten_bind_Config_get_citerations_0=function(){return(Ct=b._emscripten_bind_Config_get_citerations_0=b.asm.emscripten_bind_Config_get_citerations_0).apply(null,arguments)},Dt=b._emscripten_bind_Config_set_citerations_1=function(){return(Dt=b._emscripten_bind_Config_set_citerations_1=b.asm.emscripten_bind_Config_set_citerations_1).apply(null,
arguments)},Et=b._emscripten_bind_Config_get_collisions_0=function(){return(Et=b._emscripten_bind_Config_get_collisions_0=b.asm.emscripten_bind_Config_get_collisions_0).apply(null,arguments)},Ft=b._emscripten_bind_Config_set_collisions_1=function(){return(Ft=b._emscripten_bind_Config_set_collisions_1=b.asm.emscripten_bind_Config_set_collisions_1).apply(null,arguments)},Gt=b._emscripten_bind_Config___destroy___0=function(){return(Gt=b._emscripten_bind_Config___destroy___0=b.asm.emscripten_bind_Config___destroy___0).apply(null,
arguments)},Ht=b._emscripten_bind_Node_get_m_x_0=function(){return(Ht=b._emscripten_bind_Node_get_m_x_0=b.asm.emscripten_bind_Node_get_m_x_0).apply(null,arguments)},It=b._emscripten_bind_Node_set_m_x_1=function(){return(It=b._emscripten_bind_Node_set_m_x_1=b.asm.emscripten_bind_Node_set_m_x_1).apply(null,arguments)},Jt=b._emscripten_bind_Node_get_m_q_0=function(){return(Jt=b._emscripten_bind_Node_get_m_q_0=b.asm.emscripten_bind_Node_get_m_q_0).apply(null,arguments)},Kt=b._emscripten_bind_Node_set_m_q_1=
function(){return(Kt=b._emscripten_bind_Node_set_m_q_1=b.asm.emscripten_bind_Node_set_m_q_1).apply(null,arguments)},Lt=b._emscripten_bind_Node_get_m_v_0=function(){return(Lt=b._emscripten_bind_Node_get_m_v_0=b.asm.emscripten_bind_Node_get_m_v_0).apply(null,arguments)},Mt=b._emscripten_bind_Node_set_m_v_1=function(){return(Mt=b._emscripten_bind_Node_set_m_v_1=b.asm.emscripten_bind_Node_set_m_v_1).apply(null,arguments)},Nt=b._emscripten_bind_Node_get_m_f_0=function(){return(Nt=b._emscripten_bind_Node_get_m_f_0=
b.asm.emscripten_bind_Node_get_m_f_0).apply(null,arguments)},Ot=b._emscripten_bind_Node_set_m_f_1=function(){return(Ot=b._emscripten_bind_Node_set_m_f_1=b.asm.emscripten_bind_Node_set_m_f_1).apply(null,arguments)},Pt=b._emscripten_bind_Node_get_m_n_0=function(){return(Pt=b._emscripten_bind_Node_get_m_n_0=b.asm.emscripten_bind_Node_get_m_n_0).apply(null,arguments)},Qt=b._emscripten_bind_Node_set_m_n_1=function(){return(Qt=b._emscripten_bind_Node_set_m_n_1=b.asm.emscripten_bind_Node_set_m_n_1).apply(null,
arguments)},Rt=b._emscripten_bind_Node_get_m_im_0=function(){return(Rt=b._emscripten_bind_Node_get_m_im_0=b.asm.emscripten_bind_Node_get_m_im_0).apply(null,arguments)},St=b._emscripten_bind_Node_set_m_im_1=function(){return(St=b._emscripten_bind_Node_set_m_im_1=b.asm.emscripten_bind_Node_set_m_im_1).apply(null,arguments)},Tt=b._emscripten_bind_Node_get_m_area_0=function(){return(Tt=b._emscripten_bind_Node_get_m_area_0=b.asm.emscripten_bind_Node_get_m_area_0).apply(null,arguments)},Ut=b._emscripten_bind_Node_set_m_area_1=
function(){return(Ut=b._emscripten_bind_Node_set_m_area_1=b.asm.emscripten_bind_Node_set_m_area_1).apply(null,arguments)},Vt=b._emscripten_bind_Node___destroy___0=function(){return(Vt=b._emscripten_bind_Node___destroy___0=b.asm.emscripten_bind_Node___destroy___0).apply(null,arguments)},Wt=b._emscripten_bind_btGhostPairCallback_btGhostPairCallback_0=function(){return(Wt=b._emscripten_bind_btGhostPairCallback_btGhostPairCallback_0=b.asm.emscripten_bind_btGhostPairCallback_btGhostPairCallback_0).apply(null,
arguments)},Xt=b._emscripten_bind_btGhostPairCallback___destroy___0=function(){return(Xt=b._emscripten_bind_btGhostPairCallback___destroy___0=b.asm.emscripten_bind_btGhostPairCallback___destroy___0).apply(null,arguments)},Yt=b._emscripten_bind_btOverlappingPairCallback___destroy___0=function(){return(Yt=b._emscripten_bind_btOverlappingPairCallback___destroy___0=b.asm.emscripten_bind_btOverlappingPairCallback___destroy___0).apply(null,arguments)},Zt=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=
function(){return(Zt=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=b.asm.emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3).apply(null,arguments)},$t=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=function(){return($t=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=b.asm.emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4).apply(null,
arguments)},au=b._emscripten_bind_btKinematicCharacterController_setUpAxis_1=function(){return(au=b._emscripten_bind_btKinematicCharacterController_setUpAxis_1=b.asm.emscripten_bind_btKinematicCharacterController_setUpAxis_1).apply(null,arguments)},bu=b._emscripten_bind_btKinematicCharacterController_setWalkDirection_1=function(){return(bu=b._emscripten_bind_btKinematicCharacterController_setWalkDirection_1=b.asm.emscripten_bind_btKinematicCharacterController_setWalkDirection_1).apply(null,arguments)},
cu=b._emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=function(){return(cu=b._emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=b.asm.emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2).apply(null,arguments)},du=b._emscripten_bind_btKinematicCharacterController_warp_1=function(){return(du=b._emscripten_bind_btKinematicCharacterController_warp_1=b.asm.emscripten_bind_btKinematicCharacterController_warp_1).apply(null,arguments)},
eu=b._emscripten_bind_btKinematicCharacterController_preStep_1=function(){return(eu=b._emscripten_bind_btKinematicCharacterController_preStep_1=b.asm.emscripten_bind_btKinematicCharacterController_preStep_1).apply(null,arguments)},fu=b._emscripten_bind_btKinematicCharacterController_playerStep_2=function(){return(fu=b._emscripten_bind_btKinematicCharacterController_playerStep_2=b.asm.emscripten_bind_btKinematicCharacterController_playerStep_2).apply(null,arguments)},gu=b._emscripten_bind_btKinematicCharacterController_setFallSpeed_1=
function(){return(gu=b._emscripten_bind_btKinematicCharacterController_setFallSpeed_1=b.asm.emscripten_bind_btKinematicCharacterController_setFallSpeed_1).apply(null,arguments)},hu=b._emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=function(){return(hu=b._emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=b.asm.emscripten_bind_btKinematicCharacterController_setJumpSpeed_1).apply(null,arguments)},iu=b._emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=function(){return(iu=
b._emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=b.asm.emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1).apply(null,arguments)},ju=b._emscripten_bind_btKinematicCharacterController_canJump_0=function(){return(ju=b._emscripten_bind_btKinematicCharacterController_canJump_0=b.asm.emscripten_bind_btKinematicCharacterController_canJump_0).apply(null,arguments)},ku=b._emscripten_bind_btKinematicCharacterController_jump_0=function(){return(ku=b._emscripten_bind_btKinematicCharacterController_jump_0=
b.asm.emscripten_bind_btKinematicCharacterController_jump_0).apply(null,arguments)},lu=b._emscripten_bind_btKinematicCharacterController_setGravity_1=function(){return(lu=b._emscripten_bind_btKinematicCharacterController_setGravity_1=b.asm.emscripten_bind_btKinematicCharacterController_setGravity_1).apply(null,arguments)},mu=b._emscripten_bind_btKinematicCharacterController_getGravity_0=function(){return(mu=b._emscripten_bind_btKinematicCharacterController_getGravity_0=b.asm.emscripten_bind_btKinematicCharacterController_getGravity_0).apply(null,
arguments)},nu=b._emscripten_bind_btKinematicCharacterController_setMaxSlope_1=function(){return(nu=b._emscripten_bind_btKinematicCharacterController_setMaxSlope_1=b.asm.emscripten_bind_btKinematicCharacterController_setMaxSlope_1).apply(null,arguments)},ou=b._emscripten_bind_btKinematicCharacterController_getMaxSlope_0=function(){return(ou=b._emscripten_bind_btKinematicCharacterController_getMaxSlope_0=b.asm.emscripten_bind_btKinematicCharacterController_getMaxSlope_0).apply(null,arguments)},pu=
b._emscripten_bind_btKinematicCharacterController_getGhostObject_0=function(){return(pu=b._emscripten_bind_btKinematicCharacterController_getGhostObject_0=b.asm.emscripten_bind_btKinematicCharacterController_getGhostObject_0).apply(null,arguments)},qu=b._emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=function(){return(qu=b._emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=b.asm.emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1).apply(null,
arguments)},ru=b._emscripten_bind_btKinematicCharacterController_onGround_0=function(){return(ru=b._emscripten_bind_btKinematicCharacterController_onGround_0=b.asm.emscripten_bind_btKinematicCharacterController_onGround_0).apply(null,arguments)},su=b._emscripten_bind_btKinematicCharacterController_setUpInterpolate_1=function(){return(su=b._emscripten_bind_btKinematicCharacterController_setUpInterpolate_1=b.asm.emscripten_bind_btKinematicCharacterController_setUpInterpolate_1).apply(null,arguments)},
tu=b._emscripten_bind_btKinematicCharacterController_updateAction_2=function(){return(tu=b._emscripten_bind_btKinematicCharacterController_updateAction_2=b.asm.emscripten_bind_btKinematicCharacterController_updateAction_2).apply(null,arguments)},uu=b._emscripten_bind_btKinematicCharacterController___destroy___0=function(){return(uu=b._emscripten_bind_btKinematicCharacterController___destroy___0=b.asm.emscripten_bind_btKinematicCharacterController___destroy___0).apply(null,arguments)},vu=b._emscripten_bind_btSoftBodyArray_size_0=
function(){return(vu=b._emscripten_bind_btSoftBodyArray_size_0=b.asm.emscripten_bind_btSoftBodyArray_size_0).apply(null,arguments)},wu=b._emscripten_bind_btSoftBodyArray_at_1=function(){return(wu=b._emscripten_bind_btSoftBodyArray_at_1=b.asm.emscripten_bind_btSoftBodyArray_at_1).apply(null,arguments)},xu=b._emscripten_bind_btSoftBodyArray___destroy___0=function(){return(xu=b._emscripten_bind_btSoftBodyArray___destroy___0=b.asm.emscripten_bind_btSoftBodyArray___destroy___0).apply(null,arguments)},
yu=b._emscripten_bind_btFaceArray_size_0=function(){return(yu=b._emscripten_bind_btFaceArray_size_0=b.asm.emscripten_bind_btFaceArray_size_0).apply(null,arguments)},zu=b._emscripten_bind_btFaceArray_at_1=function(){return(zu=b._emscripten_bind_btFaceArray_at_1=b.asm.emscripten_bind_btFaceArray_at_1).apply(null,arguments)},Au=b._emscripten_bind_btFaceArray___destroy___0=function(){return(Au=b._emscripten_bind_btFaceArray___destroy___0=b.asm.emscripten_bind_btFaceArray___destroy___0).apply(null,arguments)},
Bu=b._emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=function(){return(Bu=b._emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=b.asm.emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2).apply(null,arguments)},Cu=b._emscripten_bind_btStaticPlaneShape_setLocalScaling_1=function(){return(Cu=b._emscripten_bind_btStaticPlaneShape_setLocalScaling_1=b.asm.emscripten_bind_btStaticPlaneShape_setLocalScaling_1).apply(null,arguments)},Du=b._emscripten_bind_btStaticPlaneShape_getLocalScaling_0=
function(){return(Du=b._emscripten_bind_btStaticPlaneShape_getLocalScaling_0=b.asm.emscripten_bind_btStaticPlaneShape_getLocalScaling_0).apply(null,arguments)},Eu=b._emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=function(){return(Eu=b._emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=b.asm.emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2).apply(null,arguments)},Fu=b._emscripten_bind_btStaticPlaneShape___destroy___0=function(){return(Fu=b._emscripten_bind_btStaticPlaneShape___destroy___0=
b.asm.emscripten_bind_btStaticPlaneShape___destroy___0).apply(null,arguments)},Gu=b._emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=function(){return(Gu=b._emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=b.asm.emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1).apply(null,arguments)},Hu=b._emscripten_bind_btOverlappingPairCache_getNumOverlappingPairs_0=function(){return(Hu=b._emscripten_bind_btOverlappingPairCache_getNumOverlappingPairs_0=
b.asm.emscripten_bind_btOverlappingPairCache_getNumOverlappingPairs_0).apply(null,arguments)},Iu=b._emscripten_bind_btOverlappingPairCache___destroy___0=function(){return(Iu=b._emscripten_bind_btOverlappingPairCache___destroy___0=b.asm.emscripten_bind_btOverlappingPairCache___destroy___0).apply(null,arguments)},Ju=b._emscripten_bind_btIndexedMesh_get_m_numTriangles_0=function(){return(Ju=b._emscripten_bind_btIndexedMesh_get_m_numTriangles_0=b.asm.emscripten_bind_btIndexedMesh_get_m_numTriangles_0).apply(null,
arguments)},Ku=b._emscripten_bind_btIndexedMesh_set_m_numTriangles_1=function(){return(Ku=b._emscripten_bind_btIndexedMesh_set_m_numTriangles_1=b.asm.emscripten_bind_btIndexedMesh_set_m_numTriangles_1).apply(null,arguments)},Lu=b._emscripten_bind_btIndexedMesh___destroy___0=function(){return(Lu=b._emscripten_bind_btIndexedMesh___destroy___0=b.asm.emscripten_bind_btIndexedMesh___destroy___0).apply(null,arguments)},Mu=b._emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5=function(){return(Mu=
b._emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5).apply(null,arguments)},Nu=b._emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3=function(){return(Nu=b._emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3).apply(null,arguments)},Ou=b._emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1=function(){return(Ou=b._emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1=
b.asm.emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1).apply(null,arguments)},Pu=b._emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1=function(){return(Pu=b._emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1).apply(null,arguments)},Qu=b._emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0=function(){return(Qu=b._emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0).apply(null,
arguments)},Ru=b._emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0=function(){return(Ru=b._emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0).apply(null,arguments)},Su=b._emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0=function(){return(Su=b._emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0).apply(null,arguments)},Tu=b._emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3=
function(){return(Tu=b._emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3).apply(null,arguments)},Uu=b._emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0=function(){return(Uu=b._emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0).apply(null,arguments)},Vu=b._emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0=function(){return(Vu=b._emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0=
b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0).apply(null,arguments)},Wu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1=function(){return(Wu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1).apply(null,arguments)},Xu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2=function(){return(Xu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2).apply(null,
arguments)},Yu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3=function(){return(Yu=b._emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3).apply(null,arguments)},Zu=b._emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0=function(){return(Zu=b._emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0).apply(null,arguments)},$u=b._emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5=
function(){return($u=b._emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5).apply(null,arguments)},av=b._emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3=function(){return(av=b._emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3).apply(null,arguments)},bv=b._emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2=function(){return(bv=b._emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2=
b.asm.emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2).apply(null,arguments)},cv=b._emscripten_bind_btSoftRigidDynamicsWorld_updateSingleAabb_1=function(){return(cv=b._emscripten_bind_btSoftRigidDynamicsWorld_updateSingleAabb_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_updateSingleAabb_1).apply(null,arguments)},dv=b._emscripten_bind_btSoftRigidDynamicsWorld_setDebugDrawer_1=function(){return(dv=b._emscripten_bind_btSoftRigidDynamicsWorld_setDebugDrawer_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setDebugDrawer_1).apply(null,
arguments)},ev=b._emscripten_bind_btSoftRigidDynamicsWorld_getDebugDrawer_0=function(){return(ev=b._emscripten_bind_btSoftRigidDynamicsWorld_getDebugDrawer_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getDebugDrawer_0).apply(null,arguments)},fv=b._emscripten_bind_btSoftRigidDynamicsWorld_debugDrawWorld_0=function(){return(fv=b._emscripten_bind_btSoftRigidDynamicsWorld_debugDrawWorld_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_debugDrawWorld_0).apply(null,arguments)},gv=b._emscripten_bind_btSoftRigidDynamicsWorld_debugDrawObject_3=
function(){return(gv=b._emscripten_bind_btSoftRigidDynamicsWorld_debugDrawObject_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_debugDrawObject_3).apply(null,arguments)},hv=b._emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1=function(){return(hv=b._emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1).apply(null,arguments)},iv=b._emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0=function(){return(iv=b._emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0=
b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0).apply(null,arguments)},jv=b._emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1=function(){return(jv=b._emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1).apply(null,arguments)},kv=b._emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3=function(){return(kv=b._emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3).apply(null,
arguments)},lv=b._emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1=function(){return(lv=b._emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1).apply(null,arguments)},mv=b._emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1=function(){return(mv=b._emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1).apply(null,arguments)},nv=b._emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2=
function(){return(nv=b._emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2).apply(null,arguments)},ov=b._emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1=function(){return(ov=b._emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1).apply(null,arguments)},pv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1=function(){return(pv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1=
b.asm.emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1).apply(null,arguments)},qv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2=function(){return(qv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2).apply(null,arguments)},rv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3=function(){return(rv=b._emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3).apply(null,
arguments)},sv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactAddedCallback_1=function(){return(sv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactAddedCallback_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setContactAddedCallback_1).apply(null,arguments)},tv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactProcessedCallback_1=function(){return(tv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactProcessedCallback_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setContactProcessedCallback_1).apply(null,
arguments)},uv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactDestroyedCallback_1=function(){return(uv=b._emscripten_bind_btSoftRigidDynamicsWorld_setContactDestroyedCallback_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setContactDestroyedCallback_1).apply(null,arguments)},vv=b._emscripten_bind_btSoftRigidDynamicsWorld_addAction_1=function(){return(vv=b._emscripten_bind_btSoftRigidDynamicsWorld_addAction_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_addAction_1).apply(null,arguments)},
wv=b._emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1=function(){return(wv=b._emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1).apply(null,arguments)},xv=b._emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0=function(){return(xv=b._emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0).apply(null,arguments)},yv=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_1=
function(){return(yv=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_1=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_1).apply(null,arguments)},zv=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_2=function(){return(zv=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_2=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_2).apply(null,arguments)},Av=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_3=
function(){return(Av=b._emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_3=b.asm.emscripten_bind_btSoftRigidDynamicsWorld_setInternalTickCallback_3).apply(null,arguments)},Bv=b._emscripten_bind_btSoftRigidDynamicsWorld___destroy___0=function(){return(Bv=b._emscripten_bind_btSoftRigidDynamicsWorld___destroy___0=b.asm.emscripten_bind_btSoftRigidDynamicsWorld___destroy___0).apply(null,arguments)},Cv=b._emscripten_bind_btFixedConstraint_btFixedConstraint_4=function(){return(Cv=b._emscripten_bind_btFixedConstraint_btFixedConstraint_4=
b.asm.emscripten_bind_btFixedConstraint_btFixedConstraint_4).apply(null,arguments)},Dv=b._emscripten_bind_btFixedConstraint_enableFeedback_1=function(){return(Dv=b._emscripten_bind_btFixedConstraint_enableFeedback_1=b.asm.emscripten_bind_btFixedConstraint_enableFeedback_1).apply(null,arguments)},Ev=b._emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0=function(){return(Ev=b._emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0).apply(null,
arguments)},Fv=b._emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1=function(){return(Fv=b._emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1).apply(null,arguments)},Gv=b._emscripten_bind_btFixedConstraint_getParam_2=function(){return(Gv=b._emscripten_bind_btFixedConstraint_getParam_2=b.asm.emscripten_bind_btFixedConstraint_getParam_2).apply(null,arguments)},Hv=b._emscripten_bind_btFixedConstraint_setParam_3=
function(){return(Hv=b._emscripten_bind_btFixedConstraint_setParam_3=b.asm.emscripten_bind_btFixedConstraint_setParam_3).apply(null,arguments)},Iv=b._emscripten_bind_btFixedConstraint___destroy___0=function(){return(Iv=b._emscripten_bind_btFixedConstraint___destroy___0=b.asm.emscripten_bind_btFixedConstraint___destroy___0).apply(null,arguments)},Jv=b._emscripten_bind_btTransform_btTransform_0=function(){return(Jv=b._emscripten_bind_btTransform_btTransform_0=b.asm.emscripten_bind_btTransform_btTransform_0).apply(null,
arguments)},Kv=b._emscripten_bind_btTransform_btTransform_2=function(){return(Kv=b._emscripten_bind_btTransform_btTransform_2=b.asm.emscripten_bind_btTransform_btTransform_2).apply(null,arguments)},Lv=b._emscripten_bind_btTransform_setIdentity_0=function(){return(Lv=b._emscripten_bind_btTransform_setIdentity_0=b.asm.emscripten_bind_btTransform_setIdentity_0).apply(null,arguments)},Mv=b._emscripten_bind_btTransform_setOrigin_1=function(){return(Mv=b._emscripten_bind_btTransform_setOrigin_1=b.asm.emscripten_bind_btTransform_setOrigin_1).apply(null,
arguments)},Nv=b._emscripten_bind_btTransform_setRotation_1=function(){return(Nv=b._emscripten_bind_btTransform_setRotation_1=b.asm.emscripten_bind_btTransform_setRotation_1).apply(null,arguments)},Ov=b._emscripten_bind_btTransform_getOrigin_0=function(){return(Ov=b._emscripten_bind_btTransform_getOrigin_0=b.asm.emscripten_bind_btTransform_getOrigin_0).apply(null,arguments)},Pv=b._emscripten_bind_btTransform_getRotation_0=function(){return(Pv=b._emscripten_bind_btTransform_getRotation_0=b.asm.emscripten_bind_btTransform_getRotation_0).apply(null,
arguments)},Qv=b._emscripten_bind_btTransform_getBasis_0=function(){return(Qv=b._emscripten_bind_btTransform_getBasis_0=b.asm.emscripten_bind_btTransform_getBasis_0).apply(null,arguments)},Rv=b._emscripten_bind_btTransform_setFromOpenGLMatrix_1=function(){return(Rv=b._emscripten_bind_btTransform_setFromOpenGLMatrix_1=b.asm.emscripten_bind_btTransform_setFromOpenGLMatrix_1).apply(null,arguments)},Sv=b._emscripten_bind_btTransform_inverse_0=function(){return(Sv=b._emscripten_bind_btTransform_inverse_0=
b.asm.emscripten_bind_btTransform_inverse_0).apply(null,arguments)},Tv=b._emscripten_bind_btTransform_op_mul_1=function(){return(Tv=b._emscripten_bind_btTransform_op_mul_1=b.asm.emscripten_bind_btTransform_op_mul_1).apply(null,arguments)},Uv=b._emscripten_bind_btTransform___destroy___0=function(){return(Uv=b._emscripten_bind_btTransform___destroy___0=b.asm.emscripten_bind_btTransform___destroy___0).apply(null,arguments)},Vv=b._emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=function(){return(Vv=
b._emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=b.asm.emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2).apply(null,arguments)},Wv=b._emscripten_bind_ClosestRayResultCallback_hasHit_0=function(){return(Wv=b._emscripten_bind_ClosestRayResultCallback_hasHit_0=b.asm.emscripten_bind_ClosestRayResultCallback_hasHit_0).apply(null,arguments)},Xv=b._emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=function(){return(Xv=b._emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=
b.asm.emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0).apply(null,arguments)},Yv=b._emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=function(){return(Yv=b._emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1).apply(null,arguments)},Zv=b._emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=function(){return(Zv=b._emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0).apply(null,
arguments)},$v=b._emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=function(){return($v=b._emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1).apply(null,arguments)},aw=b._emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=function(){return(aw=b._emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0).apply(null,arguments)},
bw=b._emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=function(){return(bw=b._emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1).apply(null,arguments)},cw=b._emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=function(){return(cw=b._emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0).apply(null,arguments)},
dw=b._emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=function(){return(dw=b._emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1).apply(null,arguments)},ew=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=function(){return(ew=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0).apply(null,
arguments)},fw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=function(){return(fw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1).apply(null,arguments)},gw=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=function(){return(gw=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0).apply(null,
arguments)},hw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=function(){return(hw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1).apply(null,arguments)},iw=b._emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0=function(){return(iw=b._emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0).apply(null,
arguments)},jw=b._emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1=function(){return(jw=b._emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1).apply(null,arguments)},kw=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=function(){return(kw=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=b.asm.emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0).apply(null,
arguments)},lw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=function(){return(lw=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=b.asm.emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1).apply(null,arguments)},mw=b._emscripten_bind_ClosestRayResultCallback___destroy___0=function(){return(mw=b._emscripten_bind_ClosestRayResultCallback___destroy___0=b.asm.emscripten_bind_ClosestRayResultCallback___destroy___0).apply(null,arguments)},nw=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0=
function(){return(nw=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0=b.asm.emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0).apply(null,arguments)},ow=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1=function(){return(ow=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1=b.asm.emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1).apply(null,
arguments)},pw=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0=function(){return(pw=b._emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0=b.asm.emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0).apply(null,arguments)},qw=b._emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0=function(){return(qw=b._emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0=b.asm.emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0).apply(null,
arguments)},rw=b._emscripten_bind_ConcreteContactResultCallback_addSingleResult_7=function(){return(rw=b._emscripten_bind_ConcreteContactResultCallback_addSingleResult_7=b.asm.emscripten_bind_ConcreteContactResultCallback_addSingleResult_7).apply(null,arguments)},sw=b._emscripten_bind_ConcreteContactResultCallback___destroy___0=function(){return(sw=b._emscripten_bind_ConcreteContactResultCallback___destroy___0=b.asm.emscripten_bind_ConcreteContactResultCallback___destroy___0).apply(null,arguments)},
tw=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=function(){return(tw=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=b.asm.emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2).apply(null,arguments)},uw=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=function(){return(uw=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=b.asm.emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3).apply(null,arguments)},
vw=b._emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=function(){return(vw=b._emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=b.asm.emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1).apply(null,arguments)},ww=b._emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0=function(){return(ww=b._emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0=b.asm.emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0).apply(null,arguments)},xw=b._emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=
function(){return(xw=b._emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=b.asm.emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2).apply(null,arguments)},yw=b._emscripten_bind_btBvhTriangleMeshShape___destroy___0=function(){return(yw=b._emscripten_bind_btBvhTriangleMeshShape___destroy___0=b.asm.emscripten_bind_btBvhTriangleMeshShape___destroy___0).apply(null,arguments)},zw=b._emscripten_bind_btConstCollisionObjectArray_size_0=function(){return(zw=b._emscripten_bind_btConstCollisionObjectArray_size_0=
b.asm.emscripten_bind_btConstCollisionObjectArray_size_0).apply(null,arguments)},Aw=b._emscripten_bind_btConstCollisionObjectArray_at_1=function(){return(Aw=b._emscripten_bind_btConstCollisionObjectArray_at_1=b.asm.emscripten_bind_btConstCollisionObjectArray_at_1).apply(null,arguments)},Bw=b._emscripten_bind_btConstCollisionObjectArray___destroy___0=function(){return(Bw=b._emscripten_bind_btConstCollisionObjectArray___destroy___0=b.asm.emscripten_bind_btConstCollisionObjectArray___destroy___0).apply(null,
arguments)},Cw=b._emscripten_bind_btSliderConstraint_btSliderConstraint_3=function(){return(Cw=b._emscripten_bind_btSliderConstraint_btSliderConstraint_3=b.asm.emscripten_bind_btSliderConstraint_btSliderConstraint_3).apply(null,arguments)},Dw=b._emscripten_bind_btSliderConstraint_btSliderConstraint_5=function(){return(Dw=b._emscripten_bind_btSliderConstraint_btSliderConstraint_5=b.asm.emscripten_bind_btSliderConstraint_btSliderConstraint_5).apply(null,arguments)},Ew=b._emscripten_bind_btSliderConstraint_setLowerLinLimit_1=
function(){return(Ew=b._emscripten_bind_btSliderConstraint_setLowerLinLimit_1=b.asm.emscripten_bind_btSliderConstraint_setLowerLinLimit_1).apply(null,arguments)},Fw=b._emscripten_bind_btSliderConstraint_setUpperLinLimit_1=function(){return(Fw=b._emscripten_bind_btSliderConstraint_setUpperLinLimit_1=b.asm.emscripten_bind_btSliderConstraint_setUpperLinLimit_1).apply(null,arguments)},Gw=b._emscripten_bind_btSliderConstraint_setLowerAngLimit_1=function(){return(Gw=b._emscripten_bind_btSliderConstraint_setLowerAngLimit_1=
b.asm.emscripten_bind_btSliderConstraint_setLowerAngLimit_1).apply(null,arguments)},Hw=b._emscripten_bind_btSliderConstraint_setUpperAngLimit_1=function(){return(Hw=b._emscripten_bind_btSliderConstraint_setUpperAngLimit_1=b.asm.emscripten_bind_btSliderConstraint_setUpperAngLimit_1).apply(null,arguments)},Iw=b._emscripten_bind_btSliderConstraint_enableFeedback_1=function(){return(Iw=b._emscripten_bind_btSliderConstraint_enableFeedback_1=b.asm.emscripten_bind_btSliderConstraint_enableFeedback_1).apply(null,
arguments)},Jw=b._emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0=function(){return(Jw=b._emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0).apply(null,arguments)},Kw=b._emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1=function(){return(Kw=b._emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1).apply(null,
arguments)},Lw=b._emscripten_bind_btSliderConstraint_getParam_2=function(){return(Lw=b._emscripten_bind_btSliderConstraint_getParam_2=b.asm.emscripten_bind_btSliderConstraint_getParam_2).apply(null,arguments)},Mw=b._emscripten_bind_btSliderConstraint_setParam_3=function(){return(Mw=b._emscripten_bind_btSliderConstraint_setParam_3=b.asm.emscripten_bind_btSliderConstraint_setParam_3).apply(null,arguments)},Nw=b._emscripten_bind_btSliderConstraint___destroy___0=function(){return(Nw=b._emscripten_bind_btSliderConstraint___destroy___0=
b.asm.emscripten_bind_btSliderConstraint___destroy___0).apply(null,arguments)},Ow=b._emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=function(){return(Ow=b._emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=b.asm.emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0).apply(null,arguments)},Pw=b._emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2=function(){return(Pw=b._emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2=
b.asm.emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2).apply(null,arguments)},Qw=b._emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=function(){return(Qw=b._emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=b.asm.emscripten_bind_btPairCachingGhostObject_getCollisionShape_0).apply(null,arguments)},Rw=b._emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1=function(){return(Rw=b._emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1=
b.asm.emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1).apply(null,arguments)},Sw=b._emscripten_bind_btPairCachingGhostObject_setActivationState_1=function(){return(Sw=b._emscripten_bind_btPairCachingGhostObject_setActivationState_1=b.asm.emscripten_bind_btPairCachingGhostObject_setActivationState_1).apply(null,arguments)},Tw=b._emscripten_bind_btPairCachingGhostObject_forceActivationState_1=function(){return(Tw=b._emscripten_bind_btPairCachingGhostObject_forceActivationState_1=
b.asm.emscripten_bind_btPairCachingGhostObject_forceActivationState_1).apply(null,arguments)},Uw=b._emscripten_bind_btPairCachingGhostObject_activate_0=function(){return(Uw=b._emscripten_bind_btPairCachingGhostObject_activate_0=b.asm.emscripten_bind_btPairCachingGhostObject_activate_0).apply(null,arguments)},Vw=b._emscripten_bind_btPairCachingGhostObject_activate_1=function(){return(Vw=b._emscripten_bind_btPairCachingGhostObject_activate_1=b.asm.emscripten_bind_btPairCachingGhostObject_activate_1).apply(null,
arguments)},Ww=b._emscripten_bind_btPairCachingGhostObject_isActive_0=function(){return(Ww=b._emscripten_bind_btPairCachingGhostObject_isActive_0=b.asm.emscripten_bind_btPairCachingGhostObject_isActive_0).apply(null,arguments)},Xw=b._emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=function(){return(Xw=b._emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=b.asm.emscripten_bind_btPairCachingGhostObject_isKinematicObject_0).apply(null,arguments)},Yw=b._emscripten_bind_btPairCachingGhostObject_isStaticObject_0=
function(){return(Yw=b._emscripten_bind_btPairCachingGhostObject_isStaticObject_0=b.asm.emscripten_bind_btPairCachingGhostObject_isStaticObject_0).apply(null,arguments)},Zw=b._emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0=function(){return(Zw=b._emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0=b.asm.emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0).apply(null,arguments)},$w=b._emscripten_bind_btPairCachingGhostObject_getRestitution_0=
function(){return($w=b._emscripten_bind_btPairCachingGhostObject_getRestitution_0=b.asm.emscripten_bind_btPairCachingGhostObject_getRestitution_0).apply(null,arguments)},ax=b._emscripten_bind_btPairCachingGhostObject_getFriction_0=function(){return(ax=b._emscripten_bind_btPairCachingGhostObject_getFriction_0=b.asm.emscripten_bind_btPairCachingGhostObject_getFriction_0).apply(null,arguments)},bx=b._emscripten_bind_btPairCachingGhostObject_getRollingFriction_0=function(){return(bx=b._emscripten_bind_btPairCachingGhostObject_getRollingFriction_0=
b.asm.emscripten_bind_btPairCachingGhostObject_getRollingFriction_0).apply(null,arguments)},cx=b._emscripten_bind_btPairCachingGhostObject_setRestitution_1=function(){return(cx=b._emscripten_bind_btPairCachingGhostObject_setRestitution_1=b.asm.emscripten_bind_btPairCachingGhostObject_setRestitution_1).apply(null,arguments)},dx=b._emscripten_bind_btPairCachingGhostObject_setFriction_1=function(){return(dx=b._emscripten_bind_btPairCachingGhostObject_setFriction_1=b.asm.emscripten_bind_btPairCachingGhostObject_setFriction_1).apply(null,
arguments)},ex=b._emscripten_bind_btPairCachingGhostObject_setRollingFriction_1=function(){return(ex=b._emscripten_bind_btPairCachingGhostObject_setRollingFriction_1=b.asm.emscripten_bind_btPairCachingGhostObject_setRollingFriction_1).apply(null,arguments)},fx=b._emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=function(){return(fx=b._emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=b.asm.emscripten_bind_btPairCachingGhostObject_getWorldTransform_0).apply(null,arguments)},
gx=b._emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=function(){return(gx=b._emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=b.asm.emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0).apply(null,arguments)},hx=b._emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=function(){return(hx=b._emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=b.asm.emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1).apply(null,arguments)},ix=b._emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=
function(){return(ix=b._emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=b.asm.emscripten_bind_btPairCachingGhostObject_setWorldTransform_1).apply(null,arguments)},jx=b._emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=function(){return(jx=b._emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=b.asm.emscripten_bind_btPairCachingGhostObject_setCollisionShape_1).apply(null,arguments)},kx=b._emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=function(){return(kx=
b._emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=b.asm.emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1).apply(null,arguments)},lx=b._emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=function(){return(lx=b._emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=b.asm.emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1).apply(null,arguments)},mx=b._emscripten_bind_btPairCachingGhostObject_getUserIndex_0=function(){return(mx=
b._emscripten_bind_btPairCachingGhostObject_getUserIndex_0=b.asm.emscripten_bind_btPairCachingGhostObject_getUserIndex_0).apply(null,arguments)},nx=b._emscripten_bind_btPairCachingGhostObject_setUserIndex_1=function(){return(nx=b._emscripten_bind_btPairCachingGhostObject_setUserIndex_1=b.asm.emscripten_bind_btPairCachingGhostObject_setUserIndex_1).apply(null,arguments)},ox=b._emscripten_bind_btPairCachingGhostObject_getUserPointer_0=function(){return(ox=b._emscripten_bind_btPairCachingGhostObject_getUserPointer_0=
b.asm.emscripten_bind_btPairCachingGhostObject_getUserPointer_0).apply(null,arguments)},px=b._emscripten_bind_btPairCachingGhostObject_setUserPointer_1=function(){return(px=b._emscripten_bind_btPairCachingGhostObject_setUserPointer_1=b.asm.emscripten_bind_btPairCachingGhostObject_setUserPointer_1).apply(null,arguments)},qx=b._emscripten_bind_btPairCachingGhostObject_getBroadphaseHandle_0=function(){return(qx=b._emscripten_bind_btPairCachingGhostObject_getBroadphaseHandle_0=b.asm.emscripten_bind_btPairCachingGhostObject_getBroadphaseHandle_0).apply(null,
arguments)},rx=b._emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=function(){return(rx=b._emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=b.asm.emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0).apply(null,arguments)},sx=b._emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=function(){return(sx=b._emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=b.asm.emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1).apply(null,
arguments)},tx=b._emscripten_bind_btPairCachingGhostObject___destroy___0=function(){return(tx=b._emscripten_bind_btPairCachingGhostObject___destroy___0=b.asm.emscripten_bind_btPairCachingGhostObject___destroy___0).apply(null,arguments)},ux=b._emscripten_bind_btManifoldPoint_getPositionWorldOnA_0=function(){return(ux=b._emscripten_bind_btManifoldPoint_getPositionWorldOnA_0=b.asm.emscripten_bind_btManifoldPoint_getPositionWorldOnA_0).apply(null,arguments)},vx=b._emscripten_bind_btManifoldPoint_getPositionWorldOnB_0=
function(){return(vx=b._emscripten_bind_btManifoldPoint_getPositionWorldOnB_0=b.asm.emscripten_bind_btManifoldPoint_getPositionWorldOnB_0).apply(null,arguments)},wx=b._emscripten_bind_btManifoldPoint_getAppliedImpulse_0=function(){return(wx=b._emscripten_bind_btManifoldPoint_getAppliedImpulse_0=b.asm.emscripten_bind_btManifoldPoint_getAppliedImpulse_0).apply(null,arguments)},xx=b._emscripten_bind_btManifoldPoint_getDistance_0=function(){return(xx=b._emscripten_bind_btManifoldPoint_getDistance_0=b.asm.emscripten_bind_btManifoldPoint_getDistance_0).apply(null,
arguments)},yx=b._emscripten_bind_btManifoldPoint_get_m_localPointA_0=function(){return(yx=b._emscripten_bind_btManifoldPoint_get_m_localPointA_0=b.asm.emscripten_bind_btManifoldPoint_get_m_localPointA_0).apply(null,arguments)},zx=b._emscripten_bind_btManifoldPoint_set_m_localPointA_1=function(){return(zx=b._emscripten_bind_btManifoldPoint_set_m_localPointA_1=b.asm.emscripten_bind_btManifoldPoint_set_m_localPointA_1).apply(null,arguments)},Ax=b._emscripten_bind_btManifoldPoint_get_m_localPointB_0=
function(){return(Ax=b._emscripten_bind_btManifoldPoint_get_m_localPointB_0=b.asm.emscripten_bind_btManifoldPoint_get_m_localPointB_0).apply(null,arguments)},Bx=b._emscripten_bind_btManifoldPoint_set_m_localPointB_1=function(){return(Bx=b._emscripten_bind_btManifoldPoint_set_m_localPointB_1=b.asm.emscripten_bind_btManifoldPoint_set_m_localPointB_1).apply(null,arguments)},Cx=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=function(){return(Cx=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=
b.asm.emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0).apply(null,arguments)},Dx=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=function(){return(Dx=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=b.asm.emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1).apply(null,arguments)},Ex=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=function(){return(Ex=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=b.asm.emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0).apply(null,
arguments)},Fx=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=function(){return(Fx=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=b.asm.emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1).apply(null,arguments)},Gx=b._emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=function(){return(Gx=b._emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=b.asm.emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0).apply(null,arguments)},Hx=b._emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=
function(){return(Hx=b._emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=b.asm.emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1).apply(null,arguments)},Ix=b._emscripten_bind_btManifoldPoint_get_m_userPersistentData_0=function(){return(Ix=b._emscripten_bind_btManifoldPoint_get_m_userPersistentData_0=b.asm.emscripten_bind_btManifoldPoint_get_m_userPersistentData_0).apply(null,arguments)},Jx=b._emscripten_bind_btManifoldPoint_set_m_userPersistentData_1=function(){return(Jx=b._emscripten_bind_btManifoldPoint_set_m_userPersistentData_1=
b.asm.emscripten_bind_btManifoldPoint_set_m_userPersistentData_1).apply(null,arguments)},Kx=b._emscripten_bind_btManifoldPoint___destroy___0=function(){return(Kx=b._emscripten_bind_btManifoldPoint___destroy___0=b.asm.emscripten_bind_btManifoldPoint___destroy___0).apply(null,arguments)},Lx=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=function(){return(Lx=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=b.asm.emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2).apply(null,
arguments)},Mx=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=function(){return(Mx=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=b.asm.emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4).apply(null,arguments)},Nx=b._emscripten_bind_btPoint2PointConstraint_setPivotA_1=function(){return(Nx=b._emscripten_bind_btPoint2PointConstraint_setPivotA_1=b.asm.emscripten_bind_btPoint2PointConstraint_setPivotA_1).apply(null,arguments)},Ox=b._emscripten_bind_btPoint2PointConstraint_setPivotB_1=
function(){return(Ox=b._emscripten_bind_btPoint2PointConstraint_setPivotB_1=b.asm.emscripten_bind_btPoint2PointConstraint_setPivotB_1).apply(null,arguments)},Px=b._emscripten_bind_btPoint2PointConstraint_getPivotInA_0=function(){return(Px=b._emscripten_bind_btPoint2PointConstraint_getPivotInA_0=b.asm.emscripten_bind_btPoint2PointConstraint_getPivotInA_0).apply(null,arguments)},Qx=b._emscripten_bind_btPoint2PointConstraint_getPivotInB_0=function(){return(Qx=b._emscripten_bind_btPoint2PointConstraint_getPivotInB_0=
b.asm.emscripten_bind_btPoint2PointConstraint_getPivotInB_0).apply(null,arguments)},Rx=b._emscripten_bind_btPoint2PointConstraint_enableFeedback_1=function(){return(Rx=b._emscripten_bind_btPoint2PointConstraint_enableFeedback_1=b.asm.emscripten_bind_btPoint2PointConstraint_enableFeedback_1).apply(null,arguments)},Sx=b._emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0=function(){return(Sx=b._emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0).apply(null,
arguments)},Tx=b._emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1=function(){return(Tx=b._emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1).apply(null,arguments)},Ux=b._emscripten_bind_btPoint2PointConstraint_getParam_2=function(){return(Ux=b._emscripten_bind_btPoint2PointConstraint_getParam_2=b.asm.emscripten_bind_btPoint2PointConstraint_getParam_2).apply(null,arguments)},Vx=b._emscripten_bind_btPoint2PointConstraint_setParam_3=
function(){return(Vx=b._emscripten_bind_btPoint2PointConstraint_setParam_3=b.asm.emscripten_bind_btPoint2PointConstraint_setParam_3).apply(null,arguments)},Wx=b._emscripten_bind_btPoint2PointConstraint_get_m_setting_0=function(){return(Wx=b._emscripten_bind_btPoint2PointConstraint_get_m_setting_0=b.asm.emscripten_bind_btPoint2PointConstraint_get_m_setting_0).apply(null,arguments)},Xx=b._emscripten_bind_btPoint2PointConstraint_set_m_setting_1=function(){return(Xx=b._emscripten_bind_btPoint2PointConstraint_set_m_setting_1=
b.asm.emscripten_bind_btPoint2PointConstraint_set_m_setting_1).apply(null,arguments)},Yx=b._emscripten_bind_btPoint2PointConstraint___destroy___0=function(){return(Yx=b._emscripten_bind_btPoint2PointConstraint___destroy___0=b.asm.emscripten_bind_btPoint2PointConstraint___destroy___0).apply(null,arguments)},Zx=b._emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0=function(){return(Zx=b._emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0=b.asm.emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0).apply(null,
arguments)},$x=b._emscripten_bind_btSoftBodyHelpers_CreateRope_5=function(){return($x=b._emscripten_bind_btSoftBodyHelpers_CreateRope_5=b.asm.emscripten_bind_btSoftBodyHelpers_CreateRope_5).apply(null,arguments)},ay=b._emscripten_bind_btSoftBodyHelpers_CreatePatch_9=function(){return(ay=b._emscripten_bind_btSoftBodyHelpers_CreatePatch_9=b.asm.emscripten_bind_btSoftBodyHelpers_CreatePatch_9).apply(null,arguments)},by=b._emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10=function(){return(by=b._emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10=
b.asm.emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10).apply(null,arguments)},cy=b._emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4=function(){return(cy=b._emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4=b.asm.emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4).apply(null,arguments)},dy=b._emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5=function(){return(dy=b._emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5=b.asm.emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5).apply(null,
arguments)},ey=b._emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4=function(){return(ey=b._emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4=b.asm.emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4).apply(null,arguments)},fy=b._emscripten_bind_btSoftBodyHelpers___destroy___0=function(){return(fy=b._emscripten_bind_btSoftBodyHelpers___destroy___0=b.asm.emscripten_bind_btSoftBodyHelpers___destroy___0).apply(null,arguments)},gy=b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterGroup_0=
function(){return(gy=b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterGroup_0=b.asm.emscripten_bind_btBroadphaseProxy_get_m_collisionFilterGroup_0).apply(null,arguments)},hy=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterGroup_1=function(){return(hy=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterGroup_1=b.asm.emscripten_bind_btBroadphaseProxy_set_m_collisionFilterGroup_1).apply(null,arguments)},iy=b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterMask_0=function(){return(iy=
b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterMask_0=b.asm.emscripten_bind_btBroadphaseProxy_get_m_collisionFilterMask_0).apply(null,arguments)},jy=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterMask_1=function(){return(jy=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterMask_1=b.asm.emscripten_bind_btBroadphaseProxy_set_m_collisionFilterMask_1).apply(null,arguments)},ky=b._emscripten_bind_btBroadphaseProxy___destroy___0=function(){return(ky=b._emscripten_bind_btBroadphaseProxy___destroy___0=
b.asm.emscripten_bind_btBroadphaseProxy___destroy___0).apply(null,arguments)},ly=b._emscripten_bind_tNodeArray_size_0=function(){return(ly=b._emscripten_bind_tNodeArray_size_0=b.asm.emscripten_bind_tNodeArray_size_0).apply(null,arguments)},my=b._emscripten_bind_tNodeArray_at_1=function(){return(my=b._emscripten_bind_tNodeArray_at_1=b.asm.emscripten_bind_tNodeArray_at_1).apply(null,arguments)},ny=b._emscripten_bind_tNodeArray___destroy___0=function(){return(ny=b._emscripten_bind_tNodeArray___destroy___0=
b.asm.emscripten_bind_tNodeArray___destroy___0).apply(null,arguments)},oy=b._emscripten_bind_btBoxShape_btBoxShape_1=function(){return(oy=b._emscripten_bind_btBoxShape_btBoxShape_1=b.asm.emscripten_bind_btBoxShape_btBoxShape_1).apply(null,arguments)},py=b._emscripten_bind_btBoxShape_setMargin_1=function(){return(py=b._emscripten_bind_btBoxShape_setMargin_1=b.asm.emscripten_bind_btBoxShape_setMargin_1).apply(null,arguments)},qy=b._emscripten_bind_btBoxShape_getMargin_0=function(){return(qy=b._emscripten_bind_btBoxShape_getMargin_0=
b.asm.emscripten_bind_btBoxShape_getMargin_0).apply(null,arguments)},ry=b._emscripten_bind_btBoxShape_setLocalScaling_1=function(){return(ry=b._emscripten_bind_btBoxShape_setLocalScaling_1=b.asm.emscripten_bind_btBoxShape_setLocalScaling_1).apply(null,arguments)},sy=b._emscripten_bind_btBoxShape_getLocalScaling_0=function(){return(sy=b._emscripten_bind_btBoxShape_getLocalScaling_0=b.asm.emscripten_bind_btBoxShape_getLocalScaling_0).apply(null,arguments)},ty=b._emscripten_bind_btBoxShape_calculateLocalInertia_2=
function(){return(ty=b._emscripten_bind_btBoxShape_calculateLocalInertia_2=b.asm.emscripten_bind_btBoxShape_calculateLocalInertia_2).apply(null,arguments)},uy=b._emscripten_bind_btBoxShape___destroy___0=function(){return(uy=b._emscripten_bind_btBoxShape___destroy___0=b.asm.emscripten_bind_btBoxShape___destroy___0).apply(null,arguments)},vy=b._emscripten_bind_btFace_get_m_indices_0=function(){return(vy=b._emscripten_bind_btFace_get_m_indices_0=b.asm.emscripten_bind_btFace_get_m_indices_0).apply(null,
arguments)},wy=b._emscripten_bind_btFace_set_m_indices_1=function(){return(wy=b._emscripten_bind_btFace_set_m_indices_1=b.asm.emscripten_bind_btFace_set_m_indices_1).apply(null,arguments)},xy=b._emscripten_bind_btFace_get_m_plane_1=function(){return(xy=b._emscripten_bind_btFace_get_m_plane_1=b.asm.emscripten_bind_btFace_get_m_plane_1).apply(null,arguments)},yy=b._emscripten_bind_btFace_set_m_plane_2=function(){return(yy=b._emscripten_bind_btFace_set_m_plane_2=b.asm.emscripten_bind_btFace_set_m_plane_2).apply(null,
arguments)},zy=b._emscripten_bind_btFace___destroy___0=function(){return(zy=b._emscripten_bind_btFace___destroy___0=b.asm.emscripten_bind_btFace___destroy___0).apply(null,arguments)},Ay=b._emscripten_bind_DebugDrawer_DebugDrawer_0=function(){return(Ay=b._emscripten_bind_DebugDrawer_DebugDrawer_0=b.asm.emscripten_bind_DebugDrawer_DebugDrawer_0).apply(null,arguments)},By=b._emscripten_bind_DebugDrawer_drawLine_3=function(){return(By=b._emscripten_bind_DebugDrawer_drawLine_3=b.asm.emscripten_bind_DebugDrawer_drawLine_3).apply(null,
arguments)},Cy=b._emscripten_bind_DebugDrawer_drawContactPoint_5=function(){return(Cy=b._emscripten_bind_DebugDrawer_drawContactPoint_5=b.asm.emscripten_bind_DebugDrawer_drawContactPoint_5).apply(null,arguments)},Dy=b._emscripten_bind_DebugDrawer_reportErrorWarning_1=function(){return(Dy=b._emscripten_bind_DebugDrawer_reportErrorWarning_1=b.asm.emscripten_bind_DebugDrawer_reportErrorWarning_1).apply(null,arguments)},Ey=b._emscripten_bind_DebugDrawer_draw3dText_2=function(){return(Ey=b._emscripten_bind_DebugDrawer_draw3dText_2=
b.asm.emscripten_bind_DebugDrawer_draw3dText_2).apply(null,arguments)},Fy=b._emscripten_bind_DebugDrawer_setDebugMode_1=function(){return(Fy=b._emscripten_bind_DebugDrawer_setDebugMode_1=b.asm.emscripten_bind_DebugDrawer_setDebugMode_1).apply(null,arguments)},Gy=b._emscripten_bind_DebugDrawer_getDebugMode_0=function(){return(Gy=b._emscripten_bind_DebugDrawer_getDebugMode_0=b.asm.emscripten_bind_DebugDrawer_getDebugMode_0).apply(null,arguments)},Hy=b._emscripten_bind_DebugDrawer___destroy___0=function(){return(Hy=
b._emscripten_bind_DebugDrawer___destroy___0=b.asm.emscripten_bind_DebugDrawer___destroy___0).apply(null,arguments)},Iy=b._emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2=function(){return(Iy=b._emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2=b.asm.emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2).apply(null,arguments)},Jy=b._emscripten_bind_btCapsuleShapeX_setMargin_1=function(){return(Jy=b._emscripten_bind_btCapsuleShapeX_setMargin_1=b.asm.emscripten_bind_btCapsuleShapeX_setMargin_1).apply(null,
arguments)},Ky=b._emscripten_bind_btCapsuleShapeX_getMargin_0=function(){return(Ky=b._emscripten_bind_btCapsuleShapeX_getMargin_0=b.asm.emscripten_bind_btCapsuleShapeX_getMargin_0).apply(null,arguments)},Ly=b._emscripten_bind_btCapsuleShapeX_getUpAxis_0=function(){return(Ly=b._emscripten_bind_btCapsuleShapeX_getUpAxis_0=b.asm.emscripten_bind_btCapsuleShapeX_getUpAxis_0).apply(null,arguments)},My=b._emscripten_bind_btCapsuleShapeX_getRadius_0=function(){return(My=b._emscripten_bind_btCapsuleShapeX_getRadius_0=
b.asm.emscripten_bind_btCapsuleShapeX_getRadius_0).apply(null,arguments)},Ny=b._emscripten_bind_btCapsuleShapeX_getHalfHeight_0=function(){return(Ny=b._emscripten_bind_btCapsuleShapeX_getHalfHeight_0=b.asm.emscripten_bind_btCapsuleShapeX_getHalfHeight_0).apply(null,arguments)},Oy=b._emscripten_bind_btCapsuleShapeX_setLocalScaling_1=function(){return(Oy=b._emscripten_bind_btCapsuleShapeX_setLocalScaling_1=b.asm.emscripten_bind_btCapsuleShapeX_setLocalScaling_1).apply(null,arguments)},Py=b._emscripten_bind_btCapsuleShapeX_getLocalScaling_0=
function(){return(Py=b._emscripten_bind_btCapsuleShapeX_getLocalScaling_0=b.asm.emscripten_bind_btCapsuleShapeX_getLocalScaling_0).apply(null,arguments)},Qy=b._emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2=function(){return(Qy=b._emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2=b.asm.emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2).apply(null,arguments)},Ry=b._emscripten_bind_btCapsuleShapeX___destroy___0=function(){return(Ry=b._emscripten_bind_btCapsuleShapeX___destroy___0=
b.asm.emscripten_bind_btCapsuleShapeX___destroy___0).apply(null,arguments)},Sy=b._emscripten_bind_btQuaternion_btQuaternion_4=function(){return(Sy=b._emscripten_bind_btQuaternion_btQuaternion_4=b.asm.emscripten_bind_btQuaternion_btQuaternion_4).apply(null,arguments)},Ty=b._emscripten_bind_btQuaternion_setValue_4=function(){return(Ty=b._emscripten_bind_btQuaternion_setValue_4=b.asm.emscripten_bind_btQuaternion_setValue_4).apply(null,arguments)},Uy=b._emscripten_bind_btQuaternion_setEulerZYX_3=function(){return(Uy=
b._emscripten_bind_btQuaternion_setEulerZYX_3=b.asm.emscripten_bind_btQuaternion_setEulerZYX_3).apply(null,arguments)},Vy=b._emscripten_bind_btQuaternion_setRotation_2=function(){return(Vy=b._emscripten_bind_btQuaternion_setRotation_2=b.asm.emscripten_bind_btQuaternion_setRotation_2).apply(null,arguments)},Wy=b._emscripten_bind_btQuaternion_normalize_0=function(){return(Wy=b._emscripten_bind_btQuaternion_normalize_0=b.asm.emscripten_bind_btQuaternion_normalize_0).apply(null,arguments)},Xy=b._emscripten_bind_btQuaternion_length2_0=
function(){return(Xy=b._emscripten_bind_btQuaternion_length2_0=b.asm.emscripten_bind_btQuaternion_length2_0).apply(null,arguments)},Yy=b._emscripten_bind_btQuaternion_length_0=function(){return(Yy=b._emscripten_bind_btQuaternion_length_0=b.asm.emscripten_bind_btQuaternion_length_0).apply(null,arguments)},Zy=b._emscripten_bind_btQuaternion_dot_1=function(){return(Zy=b._emscripten_bind_btQuaternion_dot_1=b.asm.emscripten_bind_btQuaternion_dot_1).apply(null,arguments)},$y=b._emscripten_bind_btQuaternion_normalized_0=
function(){return($y=b._emscripten_bind_btQuaternion_normalized_0=b.asm.emscripten_bind_btQuaternion_normalized_0).apply(null,arguments)},az=b._emscripten_bind_btQuaternion_getAxis_0=function(){return(az=b._emscripten_bind_btQuaternion_getAxis_0=b.asm.emscripten_bind_btQuaternion_getAxis_0).apply(null,arguments)},bz=b._emscripten_bind_btQuaternion_inverse_0=function(){return(bz=b._emscripten_bind_btQuaternion_inverse_0=b.asm.emscripten_bind_btQuaternion_inverse_0).apply(null,arguments)},cz=b._emscripten_bind_btQuaternion_getAngle_0=
function(){return(cz=b._emscripten_bind_btQuaternion_getAngle_0=b.asm.emscripten_bind_btQuaternion_getAngle_0).apply(null,arguments)},dz=b._emscripten_bind_btQuaternion_getAngleShortestPath_0=function(){return(dz=b._emscripten_bind_btQuaternion_getAngleShortestPath_0=b.asm.emscripten_bind_btQuaternion_getAngleShortestPath_0).apply(null,arguments)},ez=b._emscripten_bind_btQuaternion_angle_1=function(){return(ez=b._emscripten_bind_btQuaternion_angle_1=b.asm.emscripten_bind_btQuaternion_angle_1).apply(null,
arguments)},fz=b._emscripten_bind_btQuaternion_angleShortestPath_1=function(){return(fz=b._emscripten_bind_btQuaternion_angleShortestPath_1=b.asm.emscripten_bind_btQuaternion_angleShortestPath_1).apply(null,arguments)},gz=b._emscripten_bind_btQuaternion_op_add_1=function(){return(gz=b._emscripten_bind_btQuaternion_op_add_1=b.asm.emscripten_bind_btQuaternion_op_add_1).apply(null,arguments)},hz=b._emscripten_bind_btQuaternion_op_sub_1=function(){return(hz=b._emscripten_bind_btQuaternion_op_sub_1=b.asm.emscripten_bind_btQuaternion_op_sub_1).apply(null,
arguments)},iz=b._emscripten_bind_btQuaternion_op_mul_1=function(){return(iz=b._emscripten_bind_btQuaternion_op_mul_1=b.asm.emscripten_bind_btQuaternion_op_mul_1).apply(null,arguments)},jz=b._emscripten_bind_btQuaternion_op_mulq_1=function(){return(jz=b._emscripten_bind_btQuaternion_op_mulq_1=b.asm.emscripten_bind_btQuaternion_op_mulq_1).apply(null,arguments)},kz=b._emscripten_bind_btQuaternion_op_div_1=function(){return(kz=b._emscripten_bind_btQuaternion_op_div_1=b.asm.emscripten_bind_btQuaternion_op_div_1).apply(null,
arguments)},lz=b._emscripten_bind_btQuaternion_x_0=function(){return(lz=b._emscripten_bind_btQuaternion_x_0=b.asm.emscripten_bind_btQuaternion_x_0).apply(null,arguments)},mz=b._emscripten_bind_btQuaternion_y_0=function(){return(mz=b._emscripten_bind_btQuaternion_y_0=b.asm.emscripten_bind_btQuaternion_y_0).apply(null,arguments)},nz=b._emscripten_bind_btQuaternion_z_0=function(){return(nz=b._emscripten_bind_btQuaternion_z_0=b.asm.emscripten_bind_btQuaternion_z_0).apply(null,arguments)},oz=b._emscripten_bind_btQuaternion_w_0=
function(){return(oz=b._emscripten_bind_btQuaternion_w_0=b.asm.emscripten_bind_btQuaternion_w_0).apply(null,arguments)},pz=b._emscripten_bind_btQuaternion_setX_1=function(){return(pz=b._emscripten_bind_btQuaternion_setX_1=b.asm.emscripten_bind_btQuaternion_setX_1).apply(null,arguments)},qz=b._emscripten_bind_btQuaternion_setY_1=function(){return(qz=b._emscripten_bind_btQuaternion_setY_1=b.asm.emscripten_bind_btQuaternion_setY_1).apply(null,arguments)},rz=b._emscripten_bind_btQuaternion_setZ_1=function(){return(rz=
b._emscripten_bind_btQuaternion_setZ_1=b.asm.emscripten_bind_btQuaternion_setZ_1).apply(null,arguments)},sz=b._emscripten_bind_btQuaternion_setW_1=function(){return(sz=b._emscripten_bind_btQuaternion_setW_1=b.asm.emscripten_bind_btQuaternion_setW_1).apply(null,arguments)},tz=b._emscripten_bind_btQuaternion___destroy___0=function(){return(tz=b._emscripten_bind_btQuaternion___destroy___0=b.asm.emscripten_bind_btQuaternion___destroy___0).apply(null,arguments)},uz=b._emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2=
function(){return(uz=b._emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2=b.asm.emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2).apply(null,arguments)},vz=b._emscripten_bind_btCapsuleShapeZ_setMargin_1=function(){return(vz=b._emscripten_bind_btCapsuleShapeZ_setMargin_1=b.asm.emscripten_bind_btCapsuleShapeZ_setMargin_1).apply(null,arguments)},wz=b._emscripten_bind_btCapsuleShapeZ_getMargin_0=function(){return(wz=b._emscripten_bind_btCapsuleShapeZ_getMargin_0=b.asm.emscripten_bind_btCapsuleShapeZ_getMargin_0).apply(null,
arguments)},xz=b._emscripten_bind_btCapsuleShapeZ_getUpAxis_0=function(){return(xz=b._emscripten_bind_btCapsuleShapeZ_getUpAxis_0=b.asm.emscripten_bind_btCapsuleShapeZ_getUpAxis_0).apply(null,arguments)},yz=b._emscripten_bind_btCapsuleShapeZ_getRadius_0=function(){return(yz=b._emscripten_bind_btCapsuleShapeZ_getRadius_0=b.asm.emscripten_bind_btCapsuleShapeZ_getRadius_0).apply(null,arguments)},zz=b._emscripten_bind_btCapsuleShapeZ_getHalfHeight_0=function(){return(zz=b._emscripten_bind_btCapsuleShapeZ_getHalfHeight_0=
b.asm.emscripten_bind_btCapsuleShapeZ_getHalfHeight_0).apply(null,arguments)},Az=b._emscripten_bind_btCapsuleShapeZ_setLocalScaling_1=function(){return(Az=b._emscripten_bind_btCapsuleShapeZ_setLocalScaling_1=b.asm.emscripten_bind_btCapsuleShapeZ_setLocalScaling_1).apply(null,arguments)},Bz=b._emscripten_bind_btCapsuleShapeZ_getLocalScaling_0=function(){return(Bz=b._emscripten_bind_btCapsuleShapeZ_getLocalScaling_0=b.asm.emscripten_bind_btCapsuleShapeZ_getLocalScaling_0).apply(null,arguments)},Cz=
b._emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2=function(){return(Cz=b._emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2=b.asm.emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2).apply(null,arguments)},Dz=b._emscripten_bind_btCapsuleShapeZ___destroy___0=function(){return(Dz=b._emscripten_bind_btCapsuleShapeZ___destroy___0=b.asm.emscripten_bind_btCapsuleShapeZ___destroy___0).apply(null,arguments)},Ez=b._emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0=function(){return(Ez=
b._emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0=b.asm.emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0).apply(null,arguments)},Fz=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1=function(){return(Fz=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1=b.asm.emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1).apply(null,arguments)},Gz=b._emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0=function(){return(Gz=b._emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0=
b.asm.emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0).apply(null,arguments)},Hz=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1=function(){return(Hz=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1=b.asm.emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1).apply(null,arguments)},Iz=b._emscripten_bind_btContactSolverInfo_get_m_numIterations_0=function(){return(Iz=b._emscripten_bind_btContactSolverInfo_get_m_numIterations_0=
b.asm.emscripten_bind_btContactSolverInfo_get_m_numIterations_0).apply(null,arguments)},Jz=b._emscripten_bind_btContactSolverInfo_set_m_numIterations_1=function(){return(Jz=b._emscripten_bind_btContactSolverInfo_set_m_numIterations_1=b.asm.emscripten_bind_btContactSolverInfo_set_m_numIterations_1).apply(null,arguments)},Kz=b._emscripten_bind_btContactSolverInfo___destroy___0=function(){return(Kz=b._emscripten_bind_btContactSolverInfo___destroy___0=b.asm.emscripten_bind_btContactSolverInfo___destroy___0).apply(null,
arguments)},Lz=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3=function(){return(Lz=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3).apply(null,arguments)},Mz=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5=function(){return(Mz=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5).apply(null,
arguments)},Nz=b._emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2=function(){return(Nz=b._emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2).apply(null,arguments)},Oz=b._emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2=function(){return(Oz=b._emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2).apply(null,arguments)},Pz=
b._emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2=function(){return(Pz=b._emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2).apply(null,arguments)},Qz=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_0=function(){return(Qz=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_0=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_0).apply(null,arguments)},Rz=
b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_1=function(){return(Rz=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_1).apply(null,arguments)},Sz=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_2=function(){return(Sz=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_2=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_2).apply(null,
arguments)},Tz=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1=function(){return(Tz=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1).apply(null,arguments)},Uz=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1=function(){return(Uz=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1).apply(null,
arguments)},Vz=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1=function(){return(Vz=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1).apply(null,arguments)},Wz=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1=function(){return(Wz=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1).apply(null,
arguments)},Xz=b._emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0=function(){return(Xz=b._emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0).apply(null,arguments)},Yz=b._emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1=function(){return(Yz=b._emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1).apply(null,
arguments)},Zz=b._emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0=function(){return(Zz=b._emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0).apply(null,arguments)},$z=b._emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1=function(){return($z=b._emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1).apply(null,
arguments)},aA=b._emscripten_bind_btGeneric6DofSpringConstraint_getParam_2=function(){return(aA=b._emscripten_bind_btGeneric6DofSpringConstraint_getParam_2=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_getParam_2).apply(null,arguments)},bA=b._emscripten_bind_btGeneric6DofSpringConstraint_setParam_3=function(){return(bA=b._emscripten_bind_btGeneric6DofSpringConstraint_setParam_3=b.asm.emscripten_bind_btGeneric6DofSpringConstraint_setParam_3).apply(null,arguments)},cA=b._emscripten_bind_btGeneric6DofSpringConstraint___destroy___0=
function(){return(cA=b._emscripten_bind_btGeneric6DofSpringConstraint___destroy___0=b.asm.emscripten_bind_btGeneric6DofSpringConstraint___destroy___0).apply(null,arguments)},dA=b._emscripten_bind_btSphereShape_btSphereShape_1=function(){return(dA=b._emscripten_bind_btSphereShape_btSphereShape_1=b.asm.emscripten_bind_btSphereShape_btSphereShape_1).apply(null,arguments)},eA=b._emscripten_bind_btSphereShape_setMargin_1=function(){return(eA=b._emscripten_bind_btSphereShape_setMargin_1=b.asm.emscripten_bind_btSphereShape_setMargin_1).apply(null,
arguments)},fA=b._emscripten_bind_btSphereShape_getMargin_0=function(){return(fA=b._emscripten_bind_btSphereShape_getMargin_0=b.asm.emscripten_bind_btSphereShape_getMargin_0).apply(null,arguments)},gA=b._emscripten_bind_btSphereShape_setLocalScaling_1=function(){return(gA=b._emscripten_bind_btSphereShape_setLocalScaling_1=b.asm.emscripten_bind_btSphereShape_setLocalScaling_1).apply(null,arguments)},hA=b._emscripten_bind_btSphereShape_getLocalScaling_0=function(){return(hA=b._emscripten_bind_btSphereShape_getLocalScaling_0=
b.asm.emscripten_bind_btSphereShape_getLocalScaling_0).apply(null,arguments)},iA=b._emscripten_bind_btSphereShape_calculateLocalInertia_2=function(){return(iA=b._emscripten_bind_btSphereShape_calculateLocalInertia_2=b.asm.emscripten_bind_btSphereShape_calculateLocalInertia_2).apply(null,arguments)},jA=b._emscripten_bind_btSphereShape___destroy___0=function(){return(jA=b._emscripten_bind_btSphereShape___destroy___0=b.asm.emscripten_bind_btSphereShape___destroy___0).apply(null,arguments)},kA=b._emscripten_bind_Face_get_m_n_1=
function(){return(kA=b._emscripten_bind_Face_get_m_n_1=b.asm.emscripten_bind_Face_get_m_n_1).apply(null,arguments)},lA=b._emscripten_bind_Face_set_m_n_2=function(){return(lA=b._emscripten_bind_Face_set_m_n_2=b.asm.emscripten_bind_Face_set_m_n_2).apply(null,arguments)},mA=b._emscripten_bind_Face_get_m_normal_0=function(){return(mA=b._emscripten_bind_Face_get_m_normal_0=b.asm.emscripten_bind_Face_get_m_normal_0).apply(null,arguments)},nA=b._emscripten_bind_Face_set_m_normal_1=function(){return(nA=b._emscripten_bind_Face_set_m_normal_1=
b.asm.emscripten_bind_Face_set_m_normal_1).apply(null,arguments)},oA=b._emscripten_bind_Face_get_m_ra_0=function(){return(oA=b._emscripten_bind_Face_get_m_ra_0=b.asm.emscripten_bind_Face_get_m_ra_0).apply(null,arguments)},pA=b._emscripten_bind_Face_set_m_ra_1=function(){return(pA=b._emscripten_bind_Face_set_m_ra_1=b.asm.emscripten_bind_Face_set_m_ra_1).apply(null,arguments)},qA=b._emscripten_bind_Face___destroy___0=function(){return(qA=b._emscripten_bind_Face___destroy___0=b.asm.emscripten_bind_Face___destroy___0).apply(null,
arguments)},rA=b._emscripten_bind_tFaceArray_size_0=function(){return(rA=b._emscripten_bind_tFaceArray_size_0=b.asm.emscripten_bind_tFaceArray_size_0).apply(null,arguments)},sA=b._emscripten_bind_tFaceArray_at_1=function(){return(sA=b._emscripten_bind_tFaceArray_at_1=b.asm.emscripten_bind_tFaceArray_at_1).apply(null,arguments)},tA=b._emscripten_bind_tFaceArray___destroy___0=function(){return(tA=b._emscripten_bind_tFaceArray___destroy___0=b.asm.emscripten_bind_tFaceArray___destroy___0).apply(null,
arguments)},uA=b._emscripten_bind_LocalConvexResult_LocalConvexResult_5=function(){return(uA=b._emscripten_bind_LocalConvexResult_LocalConvexResult_5=b.asm.emscripten_bind_LocalConvexResult_LocalConvexResult_5).apply(null,arguments)},vA=b._emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0=function(){return(vA=b._emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0=b.asm.emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0).apply(null,arguments)},wA=b._emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1=
function(){return(wA=b._emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1=b.asm.emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1).apply(null,arguments)},xA=b._emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0=function(){return(xA=b._emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0=b.asm.emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0).apply(null,arguments)},yA=b._emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1=function(){return(yA=b._emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1=
b.asm.emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1).apply(null,arguments)},zA=b._emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0=function(){return(zA=b._emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0=b.asm.emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0).apply(null,arguments)},AA=b._emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1=function(){return(AA=b._emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1=b.asm.emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1).apply(null,
arguments)},BA=b._emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0=function(){return(BA=b._emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0=b.asm.emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0).apply(null,arguments)},CA=b._emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1=function(){return(CA=b._emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1=b.asm.emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1).apply(null,arguments)},DA=b._emscripten_bind_LocalConvexResult_get_m_hitFraction_0=
function(){return(DA=b._emscripten_bind_LocalConvexResult_get_m_hitFraction_0=b.asm.emscripten_bind_LocalConvexResult_get_m_hitFraction_0).apply(null,arguments)},EA=b._emscripten_bind_LocalConvexResult_set_m_hitFraction_1=function(){return(EA=b._emscripten_bind_LocalConvexResult_set_m_hitFraction_1=b.asm.emscripten_bind_LocalConvexResult_set_m_hitFraction_1).apply(null,arguments)},FA=b._emscripten_bind_LocalConvexResult___destroy___0=function(){return(FA=b._emscripten_bind_LocalConvexResult___destroy___0=
b.asm.emscripten_bind_LocalConvexResult___destroy___0).apply(null,arguments)},GA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP=function(){return(GA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP=b.asm.emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP).apply(null,arguments)},HA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP=function(){return(HA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP=b.asm.emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP).apply(null,
arguments)},IA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM=function(){return(IA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM=b.asm.emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM).apply(null,arguments)},JA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM=function(){return(JA=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM=b.asm.emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM).apply(null,arguments)},KA=b._emscripten_enum_PHY_ScalarType_PHY_FLOAT=
function(){return(KA=b._emscripten_enum_PHY_ScalarType_PHY_FLOAT=b.asm.emscripten_enum_PHY_ScalarType_PHY_FLOAT).apply(null,arguments)},LA=b._emscripten_enum_PHY_ScalarType_PHY_DOUBLE=function(){return(LA=b._emscripten_enum_PHY_ScalarType_PHY_DOUBLE=b.asm.emscripten_enum_PHY_ScalarType_PHY_DOUBLE).apply(null,arguments)},MA=b._emscripten_enum_PHY_ScalarType_PHY_INTEGER=function(){return(MA=b._emscripten_enum_PHY_ScalarType_PHY_INTEGER=b.asm.emscripten_enum_PHY_ScalarType_PHY_INTEGER).apply(null,arguments)},
NA=b._emscripten_enum_PHY_ScalarType_PHY_SHORT=function(){return(NA=b._emscripten_enum_PHY_ScalarType_PHY_SHORT=b.asm.emscripten_enum_PHY_ScalarType_PHY_SHORT).apply(null,arguments)},OA=b._emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88=function(){return(OA=b._emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88=b.asm.emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88).apply(null,arguments)},PA=b._emscripten_enum_PHY_ScalarType_PHY_UCHAR=function(){return(PA=b._emscripten_enum_PHY_ScalarType_PHY_UCHAR=b.asm.emscripten_enum_PHY_ScalarType_PHY_UCHAR).apply(null,
arguments)};b._malloc=function(){return(b._malloc=b.asm.malloc).apply(null,arguments)};b._free=function(){return(b._free=b.asm.free).apply(null,arguments)};var xa=b.__growWasmMemory=function(){return(xa=b.__growWasmMemory=b.asm.__growWasmMemory).apply(null,arguments)};b.dynCall_vi=function(){return(b.dynCall_vi=b.asm.dynCall_vi).apply(null,arguments)};b.dynCall_v=function(){return(b.dynCall_v=b.asm.dynCall_v).apply(null,arguments)};
b.UTF8ToString=function(a,c){if(a){var d=a+c;for(c=a;Ja[c]&&!(c>=d);)++c;if(16<c-a&&Ja.subarray&&Ga)a=Ga.decode(Ja.subarray(a,c));else{for(d="";a<c;){var e=Ja[a++];if(e&128){var g=Ja[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var n=Ja[a++]&63;e=224==(e&240)?(e&15)<<12|g<<6|n:(e&7)<<18|g<<12|n<<6|Ja[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}a=d}}else a="";return a};var QA;
Ya=function RA(){QA||SA();QA||(Ya=RA)};
function SA(){function a(){if(!QA&&(QA=!0,b.calledRun=!0,!Fa)){Ta=!0;Oa(Qa);Oa(Ra);aa(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for("function"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();Sa.unshift(c)}Oa(Sa)}}if(!(0<Wa)){if(b.preRun)for("function"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)Ua();Oa(Pa);0<Wa||(b.setStatus?(b.setStatus("Running..."),setTimeout(function(){setTimeout(function(){b.setStatus("")},1);a()},1)):
a())}}b.run=SA;if(b.preInit)for("function"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();noExitRuntime=!0;SA();function f(){}f.prototype=Object.create(f.prototype);f.prototype.constructor=f;f.prototype.b=f;f.c={};b.WrapperObject=f;function h(a){return(a||f).c}b.getCache=h;function k(a,c){var d=h(c),e=d[a];if(e)return e;e=Object.create((c||f).prototype);e.a=a;return d[a]=e}b.wrapPointer=k;b.castObject=function(a,c){return k(a.a,c)};b.NULL=k(0);
b.destroy=function(a){if(!a.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";a.__destroy__();delete h(a.b)[a.a]};b.compare=function(a,c){return a.a===c.a};b.getPointer=function(a){return a.a};b.getClass=function(a){return a.b};var TA=0,UA=0,VA=0,WA=[],XA=0;function YA(){if(XA){for(var a=0;a<WA.length;a++)b._free(WA[a]);WA.length=0;b._free(TA);TA=0;UA+=XA;XA=0}TA||(UA+=128,TA=b._malloc(UA),assert(TA));VA=0}
function ZA(a,c){assert(TA);a=a.length*c.BYTES_PER_ELEMENT;a=a+7&-8;VA+a>=UA?(assert(0<a),XA+=a,c=b._malloc(a),WA.push(c)):(c=TA+VA,VA+=a);return c}function $A(a,c,d){d>>>=0;switch(c.BYTES_PER_ELEMENT){case 2:d>>>=1;break;case 4:d>>>=2;break;case 8:d>>>=3}for(var e=0;e<a.length;e++)c[d+e]=a[e]}
function aB(a){if("string"===typeof a){for(var c=0,d=0;d<a.length;++d){var e=a.charCodeAt(d);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++d)&1023);127>=e?++c:c=2047>=e?c+2:65535>=e?c+3:c+4}c=Array(c+1);e=c.length;d=0;if(0<e){e=d+e-1;for(var g=0;g<a.length;++g){var n=a.charCodeAt(g);if(55296<=n&&57343>=n){var D=a.charCodeAt(++g);n=65536+((n&1023)<<10)|D&1023}if(127>=n){if(d>=e)break;c[d++]=n}else{if(2047>=n){if(d+1>=e)break;c[d++]=192|n>>6}else{if(65535>=n){if(d+2>=e)break;c[d++]=224|
n>>12}else{if(d+3>=e)break;c[d++]=240|n>>18;c[d++]=128|n>>12&63}c[d++]=128|n>>6&63}c[d++]=128|n&63}}c[d]=0}a=ZA(c,Ia);$A(c,Ia,a)}return a}function bB(a){if("object"===typeof a){var c=ZA(a,La);$A(a,La,c);return c}return a}function cB(){throw"cannot construct a btCollisionWorld, no constructor in IDL";}cB.prototype=Object.create(f.prototype);cB.prototype.constructor=cB;cB.prototype.b=cB;cB.c={};b.btCollisionWorld=cB;cB.prototype.getDispatcher=function(){return k(kb(this.a),dB)};
cB.prototype.rayTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);lb(e,a,c,d)};cB.prototype.getPairCache=function(){return k(mb(this.a),eB)};cB.prototype.getDispatchInfo=function(){return k(nb(this.a),l)};cB.prototype.addCollisionObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?ob(e,a):void 0===d?pb(e,a,c):qb(e,a,c,d)};
cB.prototype.removeCollisionObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);rb(c,a)};cB.prototype.getBroadphase=function(){return k(sb(this.a),fB)};cB.prototype.convexSweepTest=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);tb(n,a,c,d,e,g)};
cB.prototype.contactPairTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);vb(e,a,c,d)};cB.prototype.contactTest=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);wb(d,a,c)};cB.prototype.updateSingleAabb=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xb(c,a)};cB.prototype.setDebugDrawer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yb(c,a)};
cB.prototype.getDebugDrawer=function(){return k(zb(this.a),gB)};cB.prototype.debugDrawWorld=function(){Ab(this.a)};cB.prototype.debugDrawObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Bb(e,a,c,d)};cB.prototype.__destroy__=function(){Cb(this.a)};function m(){throw"cannot construct a btCollisionShape, no constructor in IDL";}m.prototype=Object.create(f.prototype);m.prototype.constructor=m;m.prototype.b=m;m.c={};
b.btCollisionShape=m;m.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Db(c,a)};m.prototype.getLocalScaling=function(){return k(Eb(this.a),p)};m.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Fb(d,a,c)};m.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gb(c,a)};m.prototype.getMargin=function(){return Hb(this.a)};m.prototype.__destroy__=function(){Ib(this.a)};
function q(){throw"cannot construct a btCollisionObject, no constructor in IDL";}q.prototype=Object.create(f.prototype);q.prototype.constructor=q;q.prototype.b=q;q.c={};b.btCollisionObject=q;q.prototype.setAnisotropicFriction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Jb(d,a,c)};q.prototype.getCollisionShape=function(){return k(Kb(this.a),m)};q.prototype.setContactProcessingThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Lb(c,a)};
q.prototype.setActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mb(c,a)};q.prototype.forceActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Nb(c,a)};q.prototype.activate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);void 0===a?Ob(c):Pb(c,a)};q.prototype.isActive=function(){return!!Qb(this.a)};q.prototype.isKinematicObject=function(){return!!Rb(this.a)};q.prototype.isStaticObject=function(){return!!Sb(this.a)};
q.prototype.isStaticOrKinematicObject=function(){return!!Tb(this.a)};q.prototype.getRestitution=function(){return Vb(this.a)};q.prototype.getFriction=function(){return Wb(this.a)};q.prototype.getRollingFriction=function(){return Xb(this.a)};q.prototype.setRestitution=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yb(c,a)};q.prototype.setFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zb(c,a)};
q.prototype.setRollingFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$b(c,a)};q.prototype.getWorldTransform=function(){return k(ac(this.a),r)};q.prototype.getCollisionFlags=function(){return bc(this.a)};q.prototype.setCollisionFlags=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cc(c,a)};q.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ec(c,a)};
q.prototype.setCollisionShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fc(c,a)};q.prototype.setCcdMotionThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hc(c,a)};q.prototype.setCcdSweptSphereRadius=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ic(c,a)};q.prototype.getUserIndex=function(){return jc(this.a)};q.prototype.setUserIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);kc(c,a)};
q.prototype.getUserPointer=function(){return k(lc(this.a),hB)};q.prototype.setUserPointer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mc(c,a)};q.prototype.getBroadphaseHandle=function(){return k(nc(this.a),iB)};q.prototype.__destroy__=function(){oc(this.a)};function jB(){throw"cannot construct a btDynamicsWorld, no constructor in IDL";}jB.prototype=Object.create(cB.prototype);jB.prototype.constructor=jB;jB.prototype.b=jB;jB.c={};b.btDynamicsWorld=jB;
jB.prototype.addAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pc(c,a)};jB.prototype.removeAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qc(c,a)};jB.prototype.getSolverInfo=function(){return k(sc(this.a),t)};jB.prototype.setInternalTickCallback=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?tc(e,a):void 0===d?uc(e,a,c):vc(e,a,c,d)};
jB.prototype.getDispatcher=function(){return k(wc(this.a),dB)};jB.prototype.rayTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);xc(e,a,c,d)};jB.prototype.getPairCache=function(){return k(yc(this.a),eB)};jB.prototype.getDispatchInfo=function(){return k(zc(this.a),l)};
jB.prototype.addCollisionObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?Ac(e,a):void 0===d?Bc(e,a,c):Ec(e,a,c,d)};jB.prototype.removeCollisionObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fc(c,a)};jB.prototype.getBroadphase=function(){return k(Gc(this.a),fB)};
jB.prototype.convexSweepTest=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);Hc(n,a,c,d,e,g)};jB.prototype.contactPairTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Ic(e,a,c,d)};
jB.prototype.contactTest=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Jc(d,a,c)};jB.prototype.updateSingleAabb=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kc(c,a)};jB.prototype.setDebugDrawer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Lc(c,a)};jB.prototype.getDebugDrawer=function(){return k(Mc(this.a),gB)};jB.prototype.debugDrawWorld=function(){Nc(this.a)};
jB.prototype.debugDrawObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Oc(e,a,c,d)};jB.prototype.__destroy__=function(){Pc(this.a)};function kB(){throw"cannot construct a btTypedConstraint, no constructor in IDL";}kB.prototype=Object.create(f.prototype);kB.prototype.constructor=kB;kB.prototype.b=kB;kB.c={};b.btTypedConstraint=kB;
kB.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Qc(c,a)};kB.prototype.getBreakingImpulseThreshold=function(){return Rc(this.a)};kB.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sc(c,a)};kB.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Tc(d,a,c)};
kB.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Uc(e,a,c,d)};kB.prototype.__destroy__=function(){Vc(this.a)};function lB(){throw"cannot construct a btConcaveShape, no constructor in IDL";}lB.prototype=Object.create(m.prototype);lB.prototype.constructor=lB;lB.prototype.b=lB;lB.c={};b.btConcaveShape=lB;lB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wc(c,a)};
lB.prototype.getLocalScaling=function(){return k(Xc(this.a),p)};lB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Yc(d,a,c)};lB.prototype.__destroy__=function(){Zc(this.a)};function mB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=$c(a,c);h(mB)[this.a]=this}mB.prototype=Object.create(m.prototype);mB.prototype.constructor=mB;mB.prototype.b=mB;mB.c={};b.btCapsuleShape=mB;
mB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ad(c,a)};mB.prototype.getMargin=function(){return bd(this.a)};mB.prototype.getUpAxis=function(){return cd(this.a)};mB.prototype.getRadius=function(){return dd(this.a)};mB.prototype.getHalfHeight=function(){return ed(this.a)};mB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fd(c,a)};mB.prototype.getLocalScaling=function(){return k(gd(this.a),p)};
mB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);hd(d,a,c)};mB.prototype.__destroy__=function(){id(this.a)};function gB(){throw"cannot construct a btIDebugDraw, no constructor in IDL";}gB.prototype=Object.create(f.prototype);gB.prototype.constructor=gB;gB.prototype.b=gB;gB.c={};b.btIDebugDraw=gB;
gB.prototype.drawLine=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);jd(e,a,c,d)};gB.prototype.drawContactPoint=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);kd(n,a,c,d,e,g)};
gB.prototype.reportErrorWarning=function(a){var c=this.a;YA();a=a&&"object"===typeof a?a.a:aB(a);ld(c,a)};gB.prototype.draw3dText=function(a,c){var d=this.a;YA();a&&"object"===typeof a&&(a=a.a);c=c&&"object"===typeof c?c.a:aB(c);md(d,a,c)};gB.prototype.setDebugMode=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nd(c,a)};gB.prototype.getDebugMode=function(){return od(this.a)};gB.prototype.__destroy__=function(){pd(this.a)};
function nB(a){a&&"object"===typeof a&&(a=a.a);this.a=void 0===a?qd():rd(a);h(nB)[this.a]=this}nB.prototype=Object.create(f.prototype);nB.prototype.constructor=nB;nB.prototype.b=nB;nB.c={};b.btDefaultCollisionConfiguration=nB;nB.prototype.__destroy__=function(){sd(this.a)};function oB(){throw"cannot construct a btTriangleMeshShape, no constructor in IDL";}oB.prototype=Object.create(lB.prototype);oB.prototype.constructor=oB;oB.prototype.b=oB;oB.c={};b.btTriangleMeshShape=oB;
oB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);td(c,a)};oB.prototype.getLocalScaling=function(){return k(ud(this.a),p)};oB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);vd(d,a,c)};oB.prototype.__destroy__=function(){wd(this.a)};function u(){this.a=xd();h(u)[this.a]=this}u.prototype=Object.create(q.prototype);u.prototype.constructor=u;u.prototype.b=u;u.c={};b.btGhostObject=u;
u.prototype.getNumOverlappingObjects=function(){return yd(this.a)};u.prototype.getOverlappingObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(zd(c,a),q)};u.prototype.setAnisotropicFriction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Ad(d,a,c)};u.prototype.getCollisionShape=function(){return k(Bd(this.a),m)};u.prototype.setContactProcessingThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Cd(c,a)};
u.prototype.setActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dd(c,a)};u.prototype.forceActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ed(c,a)};u.prototype.activate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);void 0===a?Fd(c):Gd(c,a)};u.prototype.isActive=function(){return!!Hd(this.a)};u.prototype.isKinematicObject=function(){return!!Id(this.a)};u.prototype.isStaticObject=function(){return!!Jd(this.a)};
u.prototype.isStaticOrKinematicObject=function(){return!!Kd(this.a)};u.prototype.getRestitution=function(){return Ld(this.a)};u.prototype.getFriction=function(){return Md(this.a)};u.prototype.getRollingFriction=function(){return Nd(this.a)};u.prototype.setRestitution=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Od(c,a)};u.prototype.setFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Pd(c,a)};
u.prototype.setRollingFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Qd(c,a)};u.prototype.getWorldTransform=function(){return k(Rd(this.a),r)};u.prototype.getCollisionFlags=function(){return Sd(this.a)};u.prototype.setCollisionFlags=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Td(c,a)};u.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ud(c,a)};
u.prototype.setCollisionShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vd(c,a)};u.prototype.setCcdMotionThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wd(c,a)};u.prototype.setCcdSweptSphereRadius=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Xd(c,a)};u.prototype.getUserIndex=function(){return Yd(this.a)};u.prototype.setUserIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zd(c,a)};
u.prototype.getUserPointer=function(){return k($d(this.a),hB)};u.prototype.setUserPointer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ae(c,a)};u.prototype.getBroadphaseHandle=function(){return k(be(this.a),iB)};u.prototype.__destroy__=function(){ce(this.a)};function pB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=de(a,c);h(pB)[this.a]=this}pB.prototype=Object.create(m.prototype);pB.prototype.constructor=pB;pB.prototype.b=pB;pB.c={};b.btConeShape=pB;
pB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ee(c,a)};pB.prototype.getLocalScaling=function(){return k(fe(this.a),p)};pB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);ge(d,a,c)};pB.prototype.__destroy__=function(){he(this.a)};function qB(){throw"cannot construct a btActionInterface, no constructor in IDL";}qB.prototype=Object.create(f.prototype);qB.prototype.constructor=qB;
qB.prototype.b=qB;qB.c={};b.btActionInterface=qB;qB.prototype.updateAction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);ie(d,a,c)};qB.prototype.__destroy__=function(){je(this.a)};function p(a,c,d){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);this.a=void 0===a?ke():void 0===c?_emscripten_bind_btVector3_btVector3_1(a):void 0===d?_emscripten_bind_btVector3_btVector3_2(a,c):le(a,c,d);h(p)[this.a]=this}
p.prototype=Object.create(f.prototype);p.prototype.constructor=p;p.prototype.b=p;p.c={};b.btVector3=p;p.prototype.length=p.prototype.length=function(){return me(this.a)};p.prototype.x=p.prototype.x=function(){return ne(this.a)};p.prototype.y=p.prototype.y=function(){return oe(this.a)};p.prototype.z=p.prototype.z=function(){return pe(this.a)};p.prototype.setX=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qe(c,a)};
p.prototype.setY=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);re(c,a)};p.prototype.setZ=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);se(c,a)};p.prototype.setValue=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);te(e,a,c,d)};p.prototype.normalize=p.prototype.normalize=function(){ue(this.a)};
p.prototype.rotate=p.prototype.rotate=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return k(ve(d,a,c),p)};p.prototype.dot=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return we(c,a)};p.prototype.op_mul=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(xe(c,a),p)};p.prototype.op_add=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(ye(c,a),p)};
p.prototype.op_sub=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(ze(c,a),p)};p.prototype.__destroy__=function(){Ae(this.a)};function rB(){throw"cannot construct a btVehicleRaycaster, no constructor in IDL";}rB.prototype=Object.create(f.prototype);rB.prototype.constructor=rB;rB.prototype.b=rB;rB.c={};b.btVehicleRaycaster=rB;rB.prototype.castRay=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Be(e,a,c,d)};
rB.prototype.__destroy__=function(){Ce(this.a)};function sB(){throw"cannot construct a btQuadWord, no constructor in IDL";}sB.prototype=Object.create(f.prototype);sB.prototype.constructor=sB;sB.prototype.b=sB;sB.c={};b.btQuadWord=sB;sB.prototype.x=sB.prototype.x=function(){return De(this.a)};sB.prototype.y=sB.prototype.y=function(){return Ee(this.a)};sB.prototype.z=sB.prototype.z=function(){return Fe(this.a)};sB.prototype.w=function(){return Ge(this.a)};
sB.prototype.setX=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);He(c,a)};sB.prototype.setY=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ie(c,a)};sB.prototype.setZ=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Je(c,a)};sB.prototype.setW=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ke(c,a)};sB.prototype.__destroy__=function(){Le(this.a)};function tB(a){a&&"object"===typeof a&&(a=a.a);this.a=Me(a);h(tB)[this.a]=this}tB.prototype=Object.create(m.prototype);
tB.prototype.constructor=tB;tB.prototype.b=tB;tB.c={};b.btCylinderShape=tB;tB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ne(c,a)};tB.prototype.getMargin=function(){return Oe(this.a)};tB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Pe(c,a)};tB.prototype.getLocalScaling=function(){return k(Qe(this.a),p)};
tB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Re(d,a,c)};tB.prototype.__destroy__=function(){Se(this.a)};function w(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=Te(a,c,d,e);h(w)[this.a]=this}w.prototype=Object.create(jB.prototype);w.prototype.constructor=w;w.prototype.b=w;w.c={};b.btDiscreteDynamicsWorld=w;
w.prototype.setGravity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ue(c,a)};w.prototype.getGravity=function(){return k(Ve(this.a),p)};w.prototype.addRigidBody=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?We(e,a):void 0===d?_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(e,a,c):Xe(e,a,c,d)};w.prototype.removeRigidBody=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ye(c,a)};
w.prototype.addConstraint=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===c?Ze(d,a):$e(d,a,c)};w.prototype.removeConstraint=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);af(c,a)};w.prototype.stepSimulation=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);return void 0===c?bf(e,a):void 0===d?cf(e,a,c):df(e,a,c,d)};
w.prototype.setContactAddedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ef(c,a)};w.prototype.setContactProcessedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ff(c,a)};w.prototype.setContactDestroyedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gf(c,a)};w.prototype.getDispatcher=function(){return k(hf(this.a),dB)};
w.prototype.rayTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);jf(e,a,c,d)};w.prototype.getPairCache=function(){return k(kf(this.a),eB)};w.prototype.getDispatchInfo=function(){return k(lf(this.a),l)};w.prototype.addCollisionObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?mf(e,a):void 0===d?nf(e,a,c):of(e,a,c,d)};
w.prototype.removeCollisionObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pf(c,a)};w.prototype.getBroadphase=function(){return k(qf(this.a),fB)};w.prototype.convexSweepTest=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);rf(n,a,c,d,e,g)};
w.prototype.contactPairTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);sf(e,a,c,d)};w.prototype.contactTest=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);tf(d,a,c)};w.prototype.updateSingleAabb=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);uf(c,a)};w.prototype.setDebugDrawer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vf(c,a)};
w.prototype.getDebugDrawer=function(){return k(wf(this.a),gB)};w.prototype.debugDrawWorld=function(){xf(this.a)};w.prototype.debugDrawObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);yf(e,a,c,d)};w.prototype.addAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zf(c,a)};w.prototype.removeAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Af(c,a)};
w.prototype.getSolverInfo=function(){return k(Bf(this.a),t)};w.prototype.setInternalTickCallback=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?Cf(e,a):void 0===d?Df(e,a,c):Ef(e,a,c,d)};w.prototype.__destroy__=function(){Ff(this.a)};function uB(){throw"cannot construct a btConvexShape, no constructor in IDL";}uB.prototype=Object.create(m.prototype);uB.prototype.constructor=uB;uB.prototype.b=uB;uB.c={};
b.btConvexShape=uB;uB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gf(c,a)};uB.prototype.getLocalScaling=function(){return k(Hf(this.a),p)};uB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);If(d,a,c)};uB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jf(c,a)};uB.prototype.getMargin=function(){return Kf(this.a)};uB.prototype.__destroy__=function(){Lf(this.a)};
function dB(){throw"cannot construct a btDispatcher, no constructor in IDL";}dB.prototype=Object.create(f.prototype);dB.prototype.constructor=dB;dB.prototype.b=dB;dB.c={};b.btDispatcher=dB;dB.prototype.getNumManifolds=function(){return Mf(this.a)};dB.prototype.getManifoldByIndexInternal=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Nf(c,a),vB)};dB.prototype.__destroy__=function(){Of(this.a)};
function wB(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=void 0===e?Pf(a,c,d):void 0===g?_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(a,c,d,e):Qf(a,c,d,e,g);h(wB)[this.a]=this}wB.prototype=Object.create(kB.prototype);wB.prototype.constructor=wB;wB.prototype.b=wB;wB.c={};b.btGeneric6DofConstraint=wB;
wB.prototype.setLinearLowerLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Rf(c,a)};wB.prototype.setLinearUpperLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sf(c,a)};wB.prototype.setAngularLowerLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tf(c,a)};wB.prototype.setAngularUpperLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Uf(c,a)};wB.prototype.getFrameOffsetA=function(){return k(Vf(this.a),r)};
wB.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wf(c,a)};wB.prototype.getBreakingImpulseThreshold=function(){return Xf(this.a)};wB.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yf(c,a)};wB.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Zf(d,a,c)};
wB.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);$f(e,a,c,d)};wB.prototype.__destroy__=function(){ag(this.a)};function xB(){throw"cannot construct a btStridingMeshInterface, no constructor in IDL";}xB.prototype=Object.create(f.prototype);xB.prototype.constructor=xB;xB.prototype.b=xB;xB.c={};b.btStridingMeshInterface=xB;
xB.prototype.setScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bg(c,a)};xB.prototype.__destroy__=function(){cg(this.a)};function yB(){throw"cannot construct a btMotionState, no constructor in IDL";}yB.prototype=Object.create(f.prototype);yB.prototype.constructor=yB;yB.prototype.b=yB;yB.c={};b.btMotionState=yB;yB.prototype.getWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dg(c,a)};
yB.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);eg(c,a)};yB.prototype.__destroy__=function(){fg(this.a)};function x(){throw"cannot construct a ConvexResultCallback, no constructor in IDL";}x.prototype=Object.create(f.prototype);x.prototype.constructor=x;x.prototype.b=x;x.c={};b.ConvexResultCallback=x;x.prototype.hasHit=function(){return!!gg(this.a)};x.prototype.get_m_collisionFilterGroup=x.prototype.f=function(){return hg(this.a)};
x.prototype.set_m_collisionFilterGroup=x.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ig(c,a)};Object.defineProperty(x.prototype,"m_collisionFilterGroup",{get:x.prototype.f,set:x.prototype.h});x.prototype.get_m_collisionFilterMask=x.prototype.g=function(){return jg(this.a)};x.prototype.set_m_collisionFilterMask=x.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);kg(c,a)};Object.defineProperty(x.prototype,"m_collisionFilterMask",{get:x.prototype.g,set:x.prototype.i});
x.prototype.get_m_closestHitFraction=x.prototype.j=function(){return lg(this.a)};x.prototype.set_m_closestHitFraction=x.prototype.l=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mg(c,a)};Object.defineProperty(x.prototype,"m_closestHitFraction",{get:x.prototype.j,set:x.prototype.l});x.prototype.__destroy__=function(){ng(this.a)};function zB(){throw"cannot construct a ContactResultCallback, no constructor in IDL";}zB.prototype=Object.create(f.prototype);zB.prototype.constructor=zB;
zB.prototype.b=zB;zB.c={};b.ContactResultCallback=zB;zB.prototype.addSingleResult=function(a,c,d,e,g,n,D){var Y=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);return og(Y,a,c,d,e,g,n,D)};zB.prototype.__destroy__=function(){pg(this.a)};function AB(){throw"cannot construct a btSoftBodySolver, no constructor in IDL";}
AB.prototype=Object.create(f.prototype);AB.prototype.constructor=AB;AB.prototype.b=AB;AB.c={};b.btSoftBodySolver=AB;AB.prototype.__destroy__=function(){qg(this.a)};function y(){throw"cannot construct a RayResultCallback, no constructor in IDL";}y.prototype=Object.create(f.prototype);y.prototype.constructor=y;y.prototype.b=y;y.c={};b.RayResultCallback=y;y.prototype.hasHit=function(){return!!rg(this.a)};y.prototype.get_m_collisionFilterGroup=y.prototype.f=function(){return sg(this.a)};
y.prototype.set_m_collisionFilterGroup=y.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tg(c,a)};Object.defineProperty(y.prototype,"m_collisionFilterGroup",{get:y.prototype.f,set:y.prototype.h});y.prototype.get_m_collisionFilterMask=y.prototype.g=function(){return ug(this.a)};y.prototype.set_m_collisionFilterMask=y.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vg(c,a)};Object.defineProperty(y.prototype,"m_collisionFilterMask",{get:y.prototype.g,set:y.prototype.i});
y.prototype.get_m_closestHitFraction=y.prototype.j=function(){return wg(this.a)};y.prototype.set_m_closestHitFraction=y.prototype.l=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xg(c,a)};Object.defineProperty(y.prototype,"m_closestHitFraction",{get:y.prototype.j,set:y.prototype.l});y.prototype.get_m_collisionObject=y.prototype.u=function(){return k(yg(this.a),q)};y.prototype.set_m_collisionObject=y.prototype.G=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zg(c,a)};
Object.defineProperty(y.prototype,"m_collisionObject",{get:y.prototype.u,set:y.prototype.G});y.prototype.__destroy__=function(){Ag(this.a)};function BB(){throw"cannot construct a btMatrix3x3, no constructor in IDL";}BB.prototype=Object.create(f.prototype);BB.prototype.constructor=BB;BB.prototype.b=BB;BB.c={};b.btMatrix3x3=BB;BB.prototype.setEulerZYX=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Bg(e,a,c,d)};
BB.prototype.getRotation=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Cg(c,a)};BB.prototype.getRow=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Dg(c,a),p)};BB.prototype.__destroy__=function(){Eg(this.a)};function CB(){throw"cannot construct a btScalarArray, no constructor in IDL";}CB.prototype=Object.create(f.prototype);CB.prototype.constructor=CB;CB.prototype.b=CB;CB.c={};b.btScalarArray=CB;CB.prototype.size=CB.prototype.size=function(){return Fg(this.a)};
CB.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return Gg(c,a)};CB.prototype.__destroy__=function(){Hg(this.a)};function z(){throw"cannot construct a Material, no constructor in IDL";}z.prototype=Object.create(f.prototype);z.prototype.constructor=z;z.prototype.b=z;z.c={};b.Material=z;z.prototype.get_m_kLST=z.prototype.Kb=function(){return Ig(this.a)};z.prototype.set_m_kLST=z.prototype.ve=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jg(c,a)};
Object.defineProperty(z.prototype,"m_kLST",{get:z.prototype.Kb,set:z.prototype.ve});z.prototype.get_m_kAST=z.prototype.Jb=function(){return Kg(this.a)};z.prototype.set_m_kAST=z.prototype.ue=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Lg(c,a)};Object.defineProperty(z.prototype,"m_kAST",{get:z.prototype.Jb,set:z.prototype.ue});z.prototype.get_m_kVST=z.prototype.Lb=function(){return Mg(this.a)};
z.prototype.set_m_kVST=z.prototype.we=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ng(c,a)};Object.defineProperty(z.prototype,"m_kVST",{get:z.prototype.Lb,set:z.prototype.we});z.prototype.get_m_flags=z.prototype.rb=function(){return Og(this.a)};z.prototype.set_m_flags=z.prototype.ce=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Pg(c,a)};Object.defineProperty(z.prototype,"m_flags",{get:z.prototype.rb,set:z.prototype.ce});z.prototype.__destroy__=function(){Qg(this.a)};
function l(){throw"cannot construct a btDispatcherInfo, no constructor in IDL";}l.prototype=Object.create(f.prototype);l.prototype.constructor=l;l.prototype.b=l;l.c={};b.btDispatcherInfo=l;l.prototype.get_m_timeStep=l.prototype.zc=function(){return Rg(this.a)};l.prototype.set_m_timeStep=l.prototype.kf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sg(c,a)};Object.defineProperty(l.prototype,"m_timeStep",{get:l.prototype.zc,set:l.prototype.kf});l.prototype.get_m_stepCount=l.prototype.qc=function(){return Tg(this.a)};
l.prototype.set_m_stepCount=l.prototype.af=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ug(c,a)};Object.defineProperty(l.prototype,"m_stepCount",{get:l.prototype.qc,set:l.prototype.af});l.prototype.get_m_dispatchFunc=l.prototype.kb=function(){return Vg(this.a)};l.prototype.set_m_dispatchFunc=l.prototype.Wd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wg(c,a)};Object.defineProperty(l.prototype,"m_dispatchFunc",{get:l.prototype.kb,set:l.prototype.Wd});
l.prototype.get_m_timeOfImpact=l.prototype.yc=function(){return Xg(this.a)};l.prototype.set_m_timeOfImpact=l.prototype.jf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yg(c,a)};Object.defineProperty(l.prototype,"m_timeOfImpact",{get:l.prototype.yc,set:l.prototype.jf});l.prototype.get_m_useContinuous=l.prototype.Bc=function(){return!!Zg(this.a)};l.prototype.set_m_useContinuous=l.prototype.mf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$g(c,a)};
Object.defineProperty(l.prototype,"m_useContinuous",{get:l.prototype.Bc,set:l.prototype.mf});l.prototype.get_m_enableSatConvex=l.prototype.ob=function(){return!!ah(this.a)};l.prototype.set_m_enableSatConvex=l.prototype.$d=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bh(c,a)};Object.defineProperty(l.prototype,"m_enableSatConvex",{get:l.prototype.ob,set:l.prototype.$d});l.prototype.get_m_enableSPU=l.prototype.nb=function(){return!!ch(this.a)};
l.prototype.set_m_enableSPU=l.prototype.Zd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dh(c,a)};Object.defineProperty(l.prototype,"m_enableSPU",{get:l.prototype.nb,set:l.prototype.Zd});l.prototype.get_m_useEpa=l.prototype.Dc=function(){return!!eh(this.a)};l.prototype.set_m_useEpa=l.prototype.pf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fh(c,a)};Object.defineProperty(l.prototype,"m_useEpa",{get:l.prototype.Dc,set:l.prototype.pf});
l.prototype.get_m_allowedCcdPenetration=l.prototype.Na=function(){return gh(this.a)};l.prototype.set_m_allowedCcdPenetration=l.prototype.zd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hh(c,a)};Object.defineProperty(l.prototype,"m_allowedCcdPenetration",{get:l.prototype.Na,set:l.prototype.zd});l.prototype.get_m_useConvexConservativeDistanceUtil=l.prototype.Cc=function(){return!!ih(this.a)};
l.prototype.set_m_useConvexConservativeDistanceUtil=l.prototype.nf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jh(c,a)};Object.defineProperty(l.prototype,"m_useConvexConservativeDistanceUtil",{get:l.prototype.Cc,set:l.prototype.nf});l.prototype.get_m_convexConservativeDistanceThreshold=l.prototype.fb=function(){return kh(this.a)};l.prototype.set_m_convexConservativeDistanceThreshold=l.prototype.Rd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lh(c,a)};
Object.defineProperty(l.prototype,"m_convexConservativeDistanceThreshold",{get:l.prototype.fb,set:l.prototype.Rd});l.prototype.__destroy__=function(){mh(this.a)};function A(){throw"cannot construct a btWheelInfoConstructionInfo, no constructor in IDL";}A.prototype=Object.create(f.prototype);A.prototype.constructor=A;A.prototype.b=A;A.c={};b.btWheelInfoConstructionInfo=A;A.prototype.get_m_chassisConnectionCS=A.prototype.Za=function(){return k(nh(this.a),p)};
A.prototype.set_m_chassisConnectionCS=A.prototype.Ld=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);oh(c,a)};Object.defineProperty(A.prototype,"m_chassisConnectionCS",{get:A.prototype.Za,set:A.prototype.Ld});A.prototype.get_m_wheelDirectionCS=A.prototype.V=function(){return k(ph(this.a),p)};A.prototype.set_m_wheelDirectionCS=A.prototype.fa=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qh(c,a)};Object.defineProperty(A.prototype,"m_wheelDirectionCS",{get:A.prototype.V,set:A.prototype.fa});
A.prototype.get_m_wheelAxleCS=A.prototype.U=function(){return k(rh(this.a),p)};A.prototype.set_m_wheelAxleCS=A.prototype.ea=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sh(c,a)};Object.defineProperty(A.prototype,"m_wheelAxleCS",{get:A.prototype.U,set:A.prototype.ea});A.prototype.get_m_suspensionRestLength=A.prototype.vc=function(){return th(this.a)};A.prototype.set_m_suspensionRestLength=A.prototype.ff=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);uh(c,a)};
Object.defineProperty(A.prototype,"m_suspensionRestLength",{get:A.prototype.vc,set:A.prototype.ff});A.prototype.get_m_maxSuspensionTravelCm=A.prototype.D=function(){return vh(this.a)};A.prototype.set_m_maxSuspensionTravelCm=A.prototype.L=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);wh(c,a)};Object.defineProperty(A.prototype,"m_maxSuspensionTravelCm",{get:A.prototype.D,set:A.prototype.L});A.prototype.get_m_wheelRadius=A.prototype.Jc=function(){return xh(this.a)};
A.prototype.set_m_wheelRadius=A.prototype.vf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yh(c,a)};Object.defineProperty(A.prototype,"m_wheelRadius",{get:A.prototype.Jc,set:A.prototype.vf});A.prototype.get_m_suspensionStiffness=A.prototype.F=function(){return zh(this.a)};A.prototype.set_m_suspensionStiffness=A.prototype.M=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ah(c,a)};Object.defineProperty(A.prototype,"m_suspensionStiffness",{get:A.prototype.F,set:A.prototype.M});
A.prototype.get_m_wheelsDampingCompression=A.prototype.W=function(){return Bh(this.a)};A.prototype.set_m_wheelsDampingCompression=A.prototype.ga=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ch(c,a)};Object.defineProperty(A.prototype,"m_wheelsDampingCompression",{get:A.prototype.W,set:A.prototype.ga});A.prototype.get_m_wheelsDampingRelaxation=A.prototype.X=function(){return Dh(this.a)};
A.prototype.set_m_wheelsDampingRelaxation=A.prototype.ha=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Eh(c,a)};Object.defineProperty(A.prototype,"m_wheelsDampingRelaxation",{get:A.prototype.X,set:A.prototype.ha});A.prototype.get_m_frictionSlip=A.prototype.v=function(){return Fh(this.a)};A.prototype.set_m_frictionSlip=A.prototype.H=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gh(c,a)};Object.defineProperty(A.prototype,"m_frictionSlip",{get:A.prototype.v,set:A.prototype.H});
A.prototype.get_m_maxSuspensionForce=A.prototype.C=function(){return Hh(this.a)};A.prototype.set_m_maxSuspensionForce=A.prototype.K=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ih(c,a)};Object.defineProperty(A.prototype,"m_maxSuspensionForce",{get:A.prototype.C,set:A.prototype.K});A.prototype.get_m_bIsFrontWheel=A.prototype.O=function(){return!!Jh(this.a)};A.prototype.set_m_bIsFrontWheel=A.prototype.Z=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kh(c,a)};
Object.defineProperty(A.prototype,"m_bIsFrontWheel",{get:A.prototype.O,set:A.prototype.Z});A.prototype.__destroy__=function(){Lh(this.a)};function DB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=void 0===c?Mh(a):Nh(a,c);h(DB)[this.a]=this}DB.prototype=Object.create(uB.prototype);DB.prototype.constructor=DB;DB.prototype.b=DB;DB.c={};b.btConvexTriangleMeshShape=DB;DB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Oh(c,a)};
DB.prototype.getLocalScaling=function(){return k(Ph(this.a),p)};DB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Qh(d,a,c)};DB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Rh(c,a)};DB.prototype.getMargin=function(){return Sh(this.a)};DB.prototype.__destroy__=function(){Th(this.a)};function fB(){throw"cannot construct a btBroadphaseInterface, no constructor in IDL";}fB.prototype=Object.create(f.prototype);
fB.prototype.constructor=fB;fB.prototype.b=fB;fB.c={};b.btBroadphaseInterface=fB;fB.prototype.getOverlappingPairCache=function(){return k(Uh(this.a),eB)};fB.prototype.__destroy__=function(){Vh(this.a)};function B(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=void 0===e?Wh(a,c,d):Xh(a,c,d,e);h(B)[this.a]=this}B.prototype=Object.create(f.prototype);B.prototype.constructor=B;B.prototype.b=B;B.c={};
b.btRigidBodyConstructionInfo=B;B.prototype.get_m_linearDamping=B.prototype.Mb=function(){return Yh(this.a)};B.prototype.set_m_linearDamping=B.prototype.xe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zh(c,a)};Object.defineProperty(B.prototype,"m_linearDamping",{get:B.prototype.Mb,set:B.prototype.xe});B.prototype.get_m_angularDamping=B.prototype.Pa=function(){return $h(this.a)};
B.prototype.set_m_angularDamping=B.prototype.Bd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ai(c,a)};Object.defineProperty(B.prototype,"m_angularDamping",{get:B.prototype.Pa,set:B.prototype.Bd});B.prototype.get_m_friction=B.prototype.sb=function(){return bi(this.a)};B.prototype.set_m_friction=B.prototype.de=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ci(c,a)};Object.defineProperty(B.prototype,"m_friction",{get:B.prototype.sb,set:B.prototype.de});
B.prototype.get_m_rollingFriction=B.prototype.ic=function(){return di(this.a)};B.prototype.set_m_rollingFriction=B.prototype.Te=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ei(c,a)};Object.defineProperty(B.prototype,"m_rollingFriction",{get:B.prototype.ic,set:B.prototype.Te});B.prototype.get_m_restitution=B.prototype.fc=function(){return fi(this.a)};B.prototype.set_m_restitution=B.prototype.Re=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gi(c,a)};
Object.defineProperty(B.prototype,"m_restitution",{get:B.prototype.fc,set:B.prototype.Re});B.prototype.get_m_linearSleepingThreshold=B.prototype.Nb=function(){return hi(this.a)};B.prototype.set_m_linearSleepingThreshold=B.prototype.ye=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ii(c,a)};Object.defineProperty(B.prototype,"m_linearSleepingThreshold",{get:B.prototype.Nb,set:B.prototype.ye});B.prototype.get_m_angularSleepingThreshold=B.prototype.Qa=function(){return ji(this.a)};
B.prototype.set_m_angularSleepingThreshold=B.prototype.Cd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ki(c,a)};Object.defineProperty(B.prototype,"m_angularSleepingThreshold",{get:B.prototype.Qa,set:B.prototype.Cd});B.prototype.get_m_additionalDamping=B.prototype.Ka=function(){return!!li(this.a)};B.prototype.set_m_additionalDamping=B.prototype.wd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mi(c,a)};
Object.defineProperty(B.prototype,"m_additionalDamping",{get:B.prototype.Ka,set:B.prototype.wd});B.prototype.get_m_additionalDampingFactor=B.prototype.La=function(){return ni(this.a)};B.prototype.set_m_additionalDampingFactor=B.prototype.xd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);oi(c,a)};Object.defineProperty(B.prototype,"m_additionalDampingFactor",{get:B.prototype.La,set:B.prototype.xd});B.prototype.get_m_additionalLinearDampingThresholdSqr=B.prototype.Ma=function(){return pi(this.a)};
B.prototype.set_m_additionalLinearDampingThresholdSqr=B.prototype.yd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qi(c,a)};Object.defineProperty(B.prototype,"m_additionalLinearDampingThresholdSqr",{get:B.prototype.Ma,set:B.prototype.yd});B.prototype.get_m_additionalAngularDampingThresholdSqr=B.prototype.Ja=function(){return ri(this.a)};B.prototype.set_m_additionalAngularDampingThresholdSqr=B.prototype.vd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);si(c,a)};
Object.defineProperty(B.prototype,"m_additionalAngularDampingThresholdSqr",{get:B.prototype.Ja,set:B.prototype.vd});B.prototype.get_m_additionalAngularDampingFactor=B.prototype.Ia=function(){return ti(this.a)};B.prototype.set_m_additionalAngularDampingFactor=B.prototype.ud=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ui(c,a)};Object.defineProperty(B.prototype,"m_additionalAngularDampingFactor",{get:B.prototype.Ia,set:B.prototype.ud});B.prototype.__destroy__=function(){vi(this.a)};
function EB(){throw"cannot construct a btCollisionConfiguration, no constructor in IDL";}EB.prototype=Object.create(f.prototype);EB.prototype.constructor=EB;EB.prototype.b=EB;EB.c={};b.btCollisionConfiguration=EB;EB.prototype.__destroy__=function(){wi(this.a)};function vB(){this.a=xi();h(vB)[this.a]=this}vB.prototype=Object.create(f.prototype);vB.prototype.constructor=vB;vB.prototype.b=vB;vB.c={};b.btPersistentManifold=vB;vB.prototype.getBody0=function(){return k(yi(this.a),q)};
vB.prototype.getBody1=function(){return k(zi(this.a),q)};vB.prototype.getNumContacts=function(){return Ai(this.a)};vB.prototype.getContactPoint=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Bi(c,a),C)};vB.prototype.__destroy__=function(){Ci(this.a)};function FB(a){a&&"object"===typeof a&&(a=a.a);this.a=void 0===a?Di():Ei(a);h(FB)[this.a]=this}FB.prototype=Object.create(m.prototype);FB.prototype.constructor=FB;FB.prototype.b=FB;FB.c={};b.btCompoundShape=FB;
FB.prototype.addChildShape=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Fi(d,a,c)};FB.prototype.removeChildShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gi(c,a)};FB.prototype.removeChildShapeByIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hi(c,a)};FB.prototype.getNumChildShapes=function(){return Ii(this.a)};FB.prototype.getChildShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Ji(c,a),m)};
FB.prototype.updateChildTransform=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===d?Ki(e,a,c):Li(e,a,c,d)};FB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mi(c,a)};FB.prototype.getMargin=function(){return Ni(this.a)};FB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Oi(c,a)};FB.prototype.getLocalScaling=function(){return k(Pi(this.a),p)};
FB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Qi(d,a,c)};FB.prototype.__destroy__=function(){Ri(this.a)};function E(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Si(a,c);h(E)[this.a]=this}E.prototype=Object.create(x.prototype);E.prototype.constructor=E;E.prototype.b=E;E.c={};b.ClosestConvexResultCallback=E;E.prototype.hasHit=function(){return!!Ti(this.a)};
E.prototype.get_m_convexFromWorld=E.prototype.gb=function(){return k(Ui(this.a),p)};E.prototype.set_m_convexFromWorld=E.prototype.Sd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vi(c,a)};Object.defineProperty(E.prototype,"m_convexFromWorld",{get:E.prototype.gb,set:E.prototype.Sd});E.prototype.get_m_convexToWorld=E.prototype.hb=function(){return k(Wi(this.a),p)};E.prototype.set_m_convexToWorld=E.prototype.Td=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Xi(c,a)};
Object.defineProperty(E.prototype,"m_convexToWorld",{get:E.prototype.hb,set:E.prototype.Td});E.prototype.get_m_hitNormalWorld=E.prototype.A=function(){return k(Yi(this.a),p)};E.prototype.set_m_hitNormalWorld=E.prototype.I=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zi(c,a)};Object.defineProperty(E.prototype,"m_hitNormalWorld",{get:E.prototype.A,set:E.prototype.I});E.prototype.get_m_hitPointWorld=E.prototype.B=function(){return k($i(this.a),p)};
E.prototype.set_m_hitPointWorld=E.prototype.J=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);aj(c,a)};Object.defineProperty(E.prototype,"m_hitPointWorld",{get:E.prototype.B,set:E.prototype.J});E.prototype.get_m_collisionFilterGroup=E.prototype.f=function(){return bj(this.a)};E.prototype.set_m_collisionFilterGroup=E.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cj(c,a)};Object.defineProperty(E.prototype,"m_collisionFilterGroup",{get:E.prototype.f,set:E.prototype.h});
E.prototype.get_m_collisionFilterMask=E.prototype.g=function(){return dj(this.a)};E.prototype.set_m_collisionFilterMask=E.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ej(c,a)};Object.defineProperty(E.prototype,"m_collisionFilterMask",{get:E.prototype.g,set:E.prototype.i});E.prototype.get_m_closestHitFraction=E.prototype.j=function(){return fj(this.a)};E.prototype.set_m_closestHitFraction=E.prototype.l=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gj(c,a)};
Object.defineProperty(E.prototype,"m_closestHitFraction",{get:E.prototype.j,set:E.prototype.l});E.prototype.__destroy__=function(){hj(this.a)};function F(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=ij(a,c);h(F)[this.a]=this}F.prototype=Object.create(y.prototype);F.prototype.constructor=F;F.prototype.b=F;F.c={};b.AllHitsRayResultCallback=F;F.prototype.hasHit=function(){return!!jj(this.a)};
F.prototype.get_m_collisionObjects=F.prototype.bb=function(){return k(kj(this.a),GB)};F.prototype.set_m_collisionObjects=F.prototype.Od=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lj(c,a)};Object.defineProperty(F.prototype,"m_collisionObjects",{get:F.prototype.bb,set:F.prototype.Od});F.prototype.get_m_rayFromWorld=F.prototype.S=function(){return k(mj(this.a),p)};F.prototype.set_m_rayFromWorld=F.prototype.ba=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nj(c,a)};
Object.defineProperty(F.prototype,"m_rayFromWorld",{get:F.prototype.S,set:F.prototype.ba});F.prototype.get_m_rayToWorld=F.prototype.T=function(){return k(oj(this.a),p)};F.prototype.set_m_rayToWorld=F.prototype.da=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pj(c,a)};Object.defineProperty(F.prototype,"m_rayToWorld",{get:F.prototype.T,set:F.prototype.da});F.prototype.get_m_hitNormalWorld=F.prototype.A=function(){return k(qj(this.a),HB)};
F.prototype.set_m_hitNormalWorld=F.prototype.I=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);rj(c,a)};Object.defineProperty(F.prototype,"m_hitNormalWorld",{get:F.prototype.A,set:F.prototype.I});F.prototype.get_m_hitPointWorld=F.prototype.B=function(){return k(sj(this.a),HB)};F.prototype.set_m_hitPointWorld=F.prototype.J=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tj(c,a)};Object.defineProperty(F.prototype,"m_hitPointWorld",{get:F.prototype.B,set:F.prototype.J});
F.prototype.get_m_hitFractions=F.prototype.zb=function(){return k(uj(this.a),CB)};F.prototype.set_m_hitFractions=F.prototype.ke=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vj(c,a)};Object.defineProperty(F.prototype,"m_hitFractions",{get:F.prototype.zb,set:F.prototype.ke});F.prototype.get_m_collisionFilterGroup=F.prototype.f=function(){return wj(this.a)};F.prototype.set_m_collisionFilterGroup=F.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xj(c,a)};
Object.defineProperty(F.prototype,"m_collisionFilterGroup",{get:F.prototype.f,set:F.prototype.h});F.prototype.get_m_collisionFilterMask=F.prototype.g=function(){return yj(this.a)};F.prototype.set_m_collisionFilterMask=F.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zj(c,a)};Object.defineProperty(F.prototype,"m_collisionFilterMask",{get:F.prototype.g,set:F.prototype.i});F.prototype.get_m_closestHitFraction=F.prototype.j=function(){return Aj(this.a)};
F.prototype.set_m_closestHitFraction=F.prototype.l=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bj(c,a)};Object.defineProperty(F.prototype,"m_closestHitFraction",{get:F.prototype.j,set:F.prototype.l});F.prototype.get_m_collisionObject=F.prototype.u=function(){return k(Cj(this.a),q)};F.prototype.set_m_collisionObject=F.prototype.G=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dj(c,a)};Object.defineProperty(F.prototype,"m_collisionObject",{get:F.prototype.u,set:F.prototype.G});
F.prototype.__destroy__=function(){Ej(this.a)};function IB(){throw"cannot construct a tMaterialArray, no constructor in IDL";}IB.prototype=Object.create(f.prototype);IB.prototype.constructor=IB;IB.prototype.b=IB;IB.c={};b.tMaterialArray=IB;IB.prototype.size=IB.prototype.size=function(){return Fj(this.a)};IB.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Gj(c,a),z)};IB.prototype.__destroy__=function(){Hj(this.a)};
function JB(a){a&&"object"===typeof a&&(a=a.a);this.a=Ij(a);h(JB)[this.a]=this}JB.prototype=Object.create(rB.prototype);JB.prototype.constructor=JB;JB.prototype.b=JB;JB.c={};b.btDefaultVehicleRaycaster=JB;JB.prototype.castRay=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Jj(e,a,c,d)};JB.prototype.__destroy__=function(){Kj(this.a)};function KB(){this.a=Lj();h(KB)[this.a]=this}KB.prototype=Object.create(lB.prototype);
KB.prototype.constructor=KB;KB.prototype.b=KB;KB.c={};b.btEmptyShape=KB;KB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mj(c,a)};KB.prototype.getLocalScaling=function(){return k(Nj(this.a),p)};KB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Oj(d,a,c)};KB.prototype.__destroy__=function(){Pj(this.a)};function G(){this.a=Qj();h(G)[this.a]=this}G.prototype=Object.create(f.prototype);
G.prototype.constructor=G;G.prototype.b=G;G.c={};b.btConstraintSetting=G;G.prototype.get_m_tau=G.prototype.xc=function(){return Rj(this.a)};G.prototype.set_m_tau=G.prototype.hf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sj(c,a)};Object.defineProperty(G.prototype,"m_tau",{get:G.prototype.xc,set:G.prototype.hf});G.prototype.get_m_damping=G.prototype.ib=function(){return Tj(this.a)};G.prototype.set_m_damping=G.prototype.Ud=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Uj(c,a)};
Object.defineProperty(G.prototype,"m_damping",{get:G.prototype.ib,set:G.prototype.Ud});G.prototype.get_m_impulseClamp=G.prototype.Fb=function(){return Vj(this.a)};G.prototype.set_m_impulseClamp=G.prototype.qe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wj(c,a)};Object.defineProperty(G.prototype,"m_impulseClamp",{get:G.prototype.Fb,set:G.prototype.qe});G.prototype.__destroy__=function(){Xj(this.a)};function LB(){throw"cannot construct a LocalShapeInfo, no constructor in IDL";}
LB.prototype=Object.create(f.prototype);LB.prototype.constructor=LB;LB.prototype.b=LB;LB.c={};b.LocalShapeInfo=LB;LB.prototype.get_m_shapePart=LB.prototype.lc=function(){return Yj(this.a)};LB.prototype.set_m_shapePart=LB.prototype.We=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zj(c,a)};Object.defineProperty(LB.prototype,"m_shapePart",{get:LB.prototype.lc,set:LB.prototype.We});LB.prototype.get_m_triangleIndex=LB.prototype.Ac=function(){return ak(this.a)};
LB.prototype.set_m_triangleIndex=LB.prototype.lf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bk(c,a)};Object.defineProperty(LB.prototype,"m_triangleIndex",{get:LB.prototype.Ac,set:LB.prototype.lf});LB.prototype.__destroy__=function(){ck(this.a)};function H(a){a&&"object"===typeof a&&(a=a.a);this.a=dk(a);h(H)[this.a]=this}H.prototype=Object.create(q.prototype);H.prototype.constructor=H;H.prototype.b=H;H.c={};b.btRigidBody=H;
H.prototype.getCenterOfMassTransform=function(){return k(ek(this.a),r)};H.prototype.setCenterOfMassTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fk(c,a)};H.prototype.setSleepingThresholds=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);gk(d,a,c)};H.prototype.getLinearDamping=function(){return hk(this.a)};H.prototype.getAngularDamping=function(){return ik(this.a)};
H.prototype.setDamping=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);jk(d,a,c)};H.prototype.setMassProps=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);kk(d,a,c)};H.prototype.getLinearFactor=function(){return k(lk(this.a),p)};H.prototype.setLinearFactor=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mk(c,a)};H.prototype.applyTorque=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nk(c,a)};
H.prototype.applyLocalTorque=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ok(c,a)};H.prototype.applyForce=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);pk(d,a,c)};H.prototype.applyCentralForce=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qk(c,a)};H.prototype.applyCentralLocalForce=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);rk(c,a)};
H.prototype.applyTorqueImpulse=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sk(c,a)};H.prototype.applyImpulse=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);tk(d,a,c)};H.prototype.applyCentralImpulse=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);uk(c,a)};H.prototype.updateInertiaTensor=function(){vk(this.a)};H.prototype.getLinearVelocity=function(){return k(wk(this.a),p)};
H.prototype.getAngularVelocity=function(){return k(xk(this.a),p)};H.prototype.setLinearVelocity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yk(c,a)};H.prototype.setAngularVelocity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zk(c,a)};H.prototype.getMotionState=function(){return k(Ak(this.a),yB)};H.prototype.setMotionState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bk(c,a)};H.prototype.getAngularFactor=function(){return k(Ck(this.a),p)};
H.prototype.setAngularFactor=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dk(c,a)};H.prototype.upcast=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Ek(c,a),H)};H.prototype.getAabb=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Fk(d,a,c)};H.prototype.applyGravity=function(){Gk(this.a)};H.prototype.getGravity=function(){return k(Hk(this.a),p)};
H.prototype.setGravity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ik(c,a)};H.prototype.getBroadphaseProxy=function(){return k(Jk(this.a),iB)};H.prototype.clearForces=function(){Kk(this.a)};H.prototype.setAnisotropicFriction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Lk(d,a,c)};H.prototype.getCollisionShape=function(){return k(Mk(this.a),m)};
H.prototype.setContactProcessingThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Nk(c,a)};H.prototype.setActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ok(c,a)};H.prototype.forceActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Pk(c,a)};H.prototype.activate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);void 0===a?Qk(c):Rk(c,a)};H.prototype.isActive=function(){return!!Sk(this.a)};H.prototype.isKinematicObject=function(){return!!Tk(this.a)};
H.prototype.isStaticObject=function(){return!!Uk(this.a)};H.prototype.isStaticOrKinematicObject=function(){return!!Vk(this.a)};H.prototype.getRestitution=function(){return Wk(this.a)};H.prototype.getFriction=function(){return Xk(this.a)};H.prototype.getRollingFriction=function(){return Yk(this.a)};H.prototype.setRestitution=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zk(c,a)};H.prototype.setFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$k(c,a)};
H.prototype.setRollingFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);al(c,a)};H.prototype.getWorldTransform=function(){return k(bl(this.a),r)};H.prototype.getCollisionFlags=function(){return cl(this.a)};H.prototype.setCollisionFlags=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dl(c,a)};H.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);el(c,a)};
H.prototype.setCollisionShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fl(c,a)};H.prototype.setCcdMotionThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gl(c,a)};H.prototype.setCcdSweptSphereRadius=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hl(c,a)};H.prototype.getUserIndex=function(){return il(this.a)};H.prototype.setUserIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jl(c,a)};
H.prototype.getUserPointer=function(){return k(kl(this.a),hB)};H.prototype.setUserPointer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ll(c,a)};H.prototype.getBroadphaseHandle=function(){return k(ml(this.a),iB)};H.prototype.__destroy__=function(){nl(this.a)};function MB(){throw"cannot construct a btIndexedMeshArray, no constructor in IDL";}MB.prototype=Object.create(f.prototype);MB.prototype.constructor=MB;MB.prototype.b=MB;MB.c={};b.btIndexedMeshArray=MB;
MB.prototype.size=MB.prototype.size=function(){return ol(this.a)};MB.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(pl(c,a),NB)};MB.prototype.__destroy__=function(){ql(this.a)};function OB(){this.a=rl();h(OB)[this.a]=this}OB.prototype=Object.create(f.prototype);OB.prototype.constructor=OB;OB.prototype.b=OB;OB.c={};b.btDbvtBroadphase=OB;OB.prototype.__destroy__=function(){sl(this.a)};
function PB(a,c,d,e,g,n,D,Y,ma){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);Y&&"object"===typeof Y&&(Y=Y.a);ma&&"object"===typeof ma&&(ma=ma.a);this.a=tl(a,c,d,e,g,n,D,Y,ma);h(PB)[this.a]=this}PB.prototype=Object.create(lB.prototype);PB.prototype.constructor=PB;PB.prototype.b=PB;PB.c={};b.btHeightfieldTerrainShape=PB;
PB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ul(c,a)};PB.prototype.getMargin=function(){return vl(this.a)};PB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);wl(c,a)};PB.prototype.getLocalScaling=function(){return k(xl(this.a),p)};PB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);yl(d,a,c)};PB.prototype.__destroy__=function(){zl(this.a)};
function QB(){this.a=Al();h(QB)[this.a]=this}QB.prototype=Object.create(AB.prototype);QB.prototype.constructor=QB;QB.prototype.b=QB;QB.c={};b.btDefaultSoftBodySolver=QB;QB.prototype.__destroy__=function(){Bl(this.a)};function RB(a){a&&"object"===typeof a&&(a=a.a);this.a=Cl(a);h(RB)[this.a]=this}RB.prototype=Object.create(dB.prototype);RB.prototype.constructor=RB;RB.prototype.b=RB;RB.c={};b.btCollisionDispatcher=RB;RB.prototype.getNumManifolds=function(){return Dl(this.a)};
RB.prototype.getManifoldByIndexInternal=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(El(c,a),vB)};RB.prototype.__destroy__=function(){Fl(this.a)};function SB(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=void 0===d?Gl(a,c):void 0===e?Hl(a,c,d):void 0===g?Il(a,c,d,e):Jl(a,c,d,e,g);h(SB)[this.a]=this}SB.prototype=Object.create(f.prototype);
SB.prototype.constructor=SB;SB.prototype.b=SB;SB.c={};b.btAxisSweep3=SB;SB.prototype.__destroy__=function(){Kl(this.a)};function hB(){throw"cannot construct a VoidPtr, no constructor in IDL";}hB.prototype=Object.create(f.prototype);hB.prototype.constructor=hB;hB.prototype.b=hB;hB.c={};b.VoidPtr=hB;hB.prototype.__destroy__=function(){Ll(this.a)};function I(){this.a=Ml();h(I)[this.a]=this}I.prototype=Object.create(f.prototype);I.prototype.constructor=I;I.prototype.b=I;I.c={};b.btSoftBodyWorldInfo=I;
I.prototype.get_air_density=I.prototype.ma=function(){return Nl(this.a)};I.prototype.set_air_density=I.prototype.Xc=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ol(c,a)};Object.defineProperty(I.prototype,"air_density",{get:I.prototype.ma,set:I.prototype.Xc});I.prototype.get_water_density=I.prototype.Sc=function(){return Pl(this.a)};I.prototype.set_water_density=I.prototype.Ef=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ql(c,a)};
Object.defineProperty(I.prototype,"water_density",{get:I.prototype.Sc,set:I.prototype.Ef});I.prototype.get_water_offset=I.prototype.Uc=function(){return Rl(this.a)};I.prototype.set_water_offset=I.prototype.Gf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sl(c,a)};Object.defineProperty(I.prototype,"water_offset",{get:I.prototype.Uc,set:I.prototype.Gf});I.prototype.get_m_maxDisplacement=I.prototype.Tb=function(){return Tl(this.a)};
I.prototype.set_m_maxDisplacement=I.prototype.Ee=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ul(c,a)};Object.defineProperty(I.prototype,"m_maxDisplacement",{get:I.prototype.Tb,set:I.prototype.Ee});I.prototype.get_water_normal=I.prototype.Tc=function(){return k(Vl(this.a),p)};I.prototype.set_water_normal=I.prototype.Ff=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wl(c,a)};Object.defineProperty(I.prototype,"water_normal",{get:I.prototype.Tc,set:I.prototype.Ff});
I.prototype.get_m_broadphase=I.prototype.Ua=function(){return k(Xl(this.a),fB)};I.prototype.set_m_broadphase=I.prototype.Gd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yl(c,a)};Object.defineProperty(I.prototype,"m_broadphase",{get:I.prototype.Ua,set:I.prototype.Gd});I.prototype.get_m_dispatcher=I.prototype.lb=function(){return k(Zl(this.a),dB)};I.prototype.set_m_dispatcher=I.prototype.Xd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$l(c,a)};
Object.defineProperty(I.prototype,"m_dispatcher",{get:I.prototype.lb,set:I.prototype.Xd});I.prototype.get_m_gravity=I.prototype.ub=function(){return k(am(this.a),p)};I.prototype.set_m_gravity=I.prototype.fe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bm(c,a)};Object.defineProperty(I.prototype,"m_gravity",{get:I.prototype.ub,set:I.prototype.fe});I.prototype.__destroy__=function(){cm(this.a)};
function TB(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=void 0===d?dm(a,c):void 0===e?_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(a,c,d):em(a,c,d,e);h(TB)[this.a]=this}TB.prototype=Object.create(kB.prototype);TB.prototype.constructor=TB;TB.prototype.b=TB;TB.c={};b.btConeTwistConstraint=TB;
TB.prototype.setLimit=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);fm(d,a,c)};TB.prototype.setAngularOnly=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gm(c,a)};TB.prototype.setDamping=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hm(c,a)};TB.prototype.enableMotor=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);im(c,a)};TB.prototype.setMaxMotorImpulse=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jm(c,a)};
TB.prototype.setMaxMotorImpulseNormalized=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);km(c,a)};TB.prototype.setMotorTarget=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lm(c,a)};TB.prototype.setMotorTargetInConstraintSpace=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mm(c,a)};TB.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nm(c,a)};TB.prototype.getBreakingImpulseThreshold=function(){return om(this.a)};
TB.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pm(c,a)};TB.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return qm(d,a,c)};TB.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);rm(e,a,c,d)};TB.prototype.__destroy__=function(){sm(this.a)};
function UB(a,c,d,e,g,n,D){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);this.a=void 0===d?tm(a,c):void 0===e?um(a,c,d):void 0===g?wm(a,c,d,e):void 0===n?xm(a,c,d,e,g):void 0===D?ym(a,c,d,e,g,n):zm(a,c,d,e,g,n,D);h(UB)[this.a]=this}UB.prototype=Object.create(kB.prototype);UB.prototype.constructor=UB;UB.prototype.b=UB;
UB.c={};b.btHingeConstraint=UB;UB.prototype.setLimit=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);void 0===g?Am(n,a,c,d,e):Bm(n,a,c,d,e,g)};UB.prototype.enableAngularMotor=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Cm(e,a,c,d)};
UB.prototype.setAngularOnly=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dm(c,a)};UB.prototype.enableMotor=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Em(c,a)};UB.prototype.setMaxMotorImpulse=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fm(c,a)};UB.prototype.setMotorTarget=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Gm(d,a,c)};
UB.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hm(c,a)};UB.prototype.getBreakingImpulseThreshold=function(){return Im(this.a)};UB.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jm(c,a)};UB.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Km(d,a,c)};
UB.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Lm(e,a,c,d)};UB.prototype.__destroy__=function(){Mm(this.a)};function VB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Nm(a,c);h(VB)[this.a]=this}VB.prototype=Object.create(pB.prototype);VB.prototype.constructor=VB;VB.prototype.b=VB;VB.c={};b.btConeShapeZ=VB;
VB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Om(c,a)};VB.prototype.getLocalScaling=function(){return k(Pm(this.a),p)};VB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Qm(d,a,c)};VB.prototype.__destroy__=function(){Rm(this.a)};function WB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Sm(a,c);h(WB)[this.a]=this}WB.prototype=Object.create(pB.prototype);
WB.prototype.constructor=WB;WB.prototype.b=WB;WB.c={};b.btConeShapeX=WB;WB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tm(c,a)};WB.prototype.getLocalScaling=function(){return k(Um(this.a),p)};WB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Vm(d,a,c)};WB.prototype.__destroy__=function(){Wm(this.a)};
function XB(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=void 0===a?Xm():void 0===c?Ym(a):Zm(a,c);h(XB)[this.a]=this}XB.prototype=Object.create(xB.prototype);XB.prototype.constructor=XB;XB.prototype.b=XB;XB.c={};b.btTriangleMesh=XB;XB.prototype.addTriangle=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);void 0===e?$m(g,a,c,d):an(g,a,c,d,e)};
XB.prototype.findOrAddVertex=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return bn(d,a,c)};XB.prototype.addIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cn(c,a)};XB.prototype.getIndexedMeshArray=function(){return k(dn(this.a),MB)};XB.prototype.setScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);en(c,a)};XB.prototype.__destroy__=function(){fn(this.a)};
function YB(a,c){YA();"object"==typeof a&&(a=bB(a));c&&"object"===typeof c&&(c=c.a);this.a=void 0===a?gn():void 0===c?hn(a):jn(a,c);h(YB)[this.a]=this}YB.prototype=Object.create(m.prototype);YB.prototype.constructor=YB;YB.prototype.b=YB;YB.c={};b.btConvexHullShape=YB;YB.prototype.addPoint=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===c?kn(d,a):ln(d,a,c)};YB.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mn(c,a)};
YB.prototype.getMargin=function(){return nn(this.a)};YB.prototype.getNumVertices=function(){return on(this.a)};YB.prototype.initializePolyhedralFeatures=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return!!pn(c,a)};YB.prototype.recalcLocalAabb=function(){qn(this.a)};YB.prototype.getConvexPolyhedron=function(){return k(rn(this.a),ZB)};YB.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sn(c,a)};
YB.prototype.getLocalScaling=function(){return k(tn(this.a),p)};YB.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);un(d,a,c)};YB.prototype.__destroy__=function(){vn(this.a)};function K(){this.a=wn();h(K)[this.a]=this}K.prototype=Object.create(f.prototype);K.prototype.constructor=K;K.prototype.b=K;K.c={};b.btVehicleTuning=K;K.prototype.get_m_suspensionStiffness=K.prototype.F=function(){return xn(this.a)};
K.prototype.set_m_suspensionStiffness=K.prototype.M=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yn(c,a)};Object.defineProperty(K.prototype,"m_suspensionStiffness",{get:K.prototype.F,set:K.prototype.M});K.prototype.get_m_suspensionCompression=K.prototype.rc=function(){return zn(this.a)};K.prototype.set_m_suspensionCompression=K.prototype.bf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);An(c,a)};
Object.defineProperty(K.prototype,"m_suspensionCompression",{get:K.prototype.rc,set:K.prototype.bf});K.prototype.get_m_suspensionDamping=K.prototype.sc=function(){return Bn(this.a)};K.prototype.set_m_suspensionDamping=K.prototype.cf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Cn(c,a)};Object.defineProperty(K.prototype,"m_suspensionDamping",{get:K.prototype.sc,set:K.prototype.cf});K.prototype.get_m_maxSuspensionTravelCm=K.prototype.D=function(){return Dn(this.a)};
K.prototype.set_m_maxSuspensionTravelCm=K.prototype.L=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);En(c,a)};Object.defineProperty(K.prototype,"m_maxSuspensionTravelCm",{get:K.prototype.D,set:K.prototype.L});K.prototype.get_m_frictionSlip=K.prototype.v=function(){return Fn(this.a)};K.prototype.set_m_frictionSlip=K.prototype.H=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gn(c,a)};Object.defineProperty(K.prototype,"m_frictionSlip",{get:K.prototype.v,set:K.prototype.H});
K.prototype.get_m_maxSuspensionForce=K.prototype.C=function(){return Hn(this.a)};K.prototype.set_m_maxSuspensionForce=K.prototype.K=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);In(c,a)};Object.defineProperty(K.prototype,"m_maxSuspensionForce",{get:K.prototype.C,set:K.prototype.K});function $B(){throw"cannot construct a btCollisionObjectWrapper, no constructor in IDL";}$B.prototype=Object.create(f.prototype);$B.prototype.constructor=$B;$B.prototype.b=$B;$B.c={};
b.btCollisionObjectWrapper=$B;$B.prototype.getWorldTransform=function(){return k(Jn(this.a),r)};$B.prototype.getCollisionObject=function(){return k(Kn(this.a),q)};$B.prototype.getCollisionShape=function(){return k(Ln(this.a),m)};function aC(a){a&&"object"===typeof a&&(a=a.a);this.a=Mn(a);h(aC)[this.a]=this}aC.prototype=Object.create(f.prototype);aC.prototype.constructor=aC;aC.prototype.b=aC;aC.c={};b.btShapeHull=aC;
aC.prototype.buildHull=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return!!Nn(c,a)};aC.prototype.numVertices=function(){return On(this.a)};aC.prototype.getVertexPointer=function(){return k(Pn(this.a),p)};aC.prototype.__destroy__=function(){Qn(this.a)};function bC(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=void 0===a?Rn():void 0===c?Sn(a):Tn(a,c);h(bC)[this.a]=this}bC.prototype=Object.create(yB.prototype);bC.prototype.constructor=bC;bC.prototype.b=bC;
bC.c={};b.btDefaultMotionState=bC;bC.prototype.getWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Un(c,a)};bC.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vn(c,a)};bC.prototype.get_m_graphicsWorldTrans=bC.prototype.tb=function(){return k(Wn(this.a),r)};bC.prototype.set_m_graphicsWorldTrans=bC.prototype.ee=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Xn(c,a)};
Object.defineProperty(bC.prototype,"m_graphicsWorldTrans",{get:bC.prototype.tb,set:bC.prototype.ee});bC.prototype.__destroy__=function(){Yn(this.a)};function L(a){a&&"object"===typeof a&&(a=a.a);this.a=Zn(a);h(L)[this.a]=this}L.prototype=Object.create(f.prototype);L.prototype.constructor=L;L.prototype.b=L;L.c={};b.btWheelInfo=L;L.prototype.getSuspensionRestLength=function(){return $n(this.a)};
L.prototype.updateWheel=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);ao(d,a,c)};L.prototype.get_m_suspensionStiffness=L.prototype.F=function(){return bo(this.a)};L.prototype.set_m_suspensionStiffness=L.prototype.M=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);co(c,a)};Object.defineProperty(L.prototype,"m_suspensionStiffness",{get:L.prototype.F,set:L.prototype.M});L.prototype.get_m_frictionSlip=L.prototype.v=function(){return eo(this.a)};
L.prototype.set_m_frictionSlip=L.prototype.H=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fo(c,a)};Object.defineProperty(L.prototype,"m_frictionSlip",{get:L.prototype.v,set:L.prototype.H});L.prototype.get_m_engineForce=L.prototype.pb=function(){return go(this.a)};L.prototype.set_m_engineForce=L.prototype.ae=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ho(c,a)};Object.defineProperty(L.prototype,"m_engineForce",{get:L.prototype.pb,set:L.prototype.ae});
L.prototype.get_m_rollInfluence=L.prototype.hc=function(){return io(this.a)};L.prototype.set_m_rollInfluence=L.prototype.Se=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jo(c,a)};Object.defineProperty(L.prototype,"m_rollInfluence",{get:L.prototype.hc,set:L.prototype.Se});L.prototype.get_m_suspensionRestLength1=L.prototype.wc=function(){return ko(this.a)};L.prototype.set_m_suspensionRestLength1=L.prototype.gf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lo(c,a)};
Object.defineProperty(L.prototype,"m_suspensionRestLength1",{get:L.prototype.wc,set:L.prototype.gf});L.prototype.get_m_wheelsRadius=L.prototype.Kc=function(){return mo(this.a)};L.prototype.set_m_wheelsRadius=L.prototype.wf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);no(c,a)};Object.defineProperty(L.prototype,"m_wheelsRadius",{get:L.prototype.Kc,set:L.prototype.wf});L.prototype.get_m_wheelsDampingCompression=L.prototype.W=function(){return oo(this.a)};
L.prototype.set_m_wheelsDampingCompression=L.prototype.ga=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);po(c,a)};Object.defineProperty(L.prototype,"m_wheelsDampingCompression",{get:L.prototype.W,set:L.prototype.ga});L.prototype.get_m_wheelsDampingRelaxation=L.prototype.X=function(){return qo(this.a)};L.prototype.set_m_wheelsDampingRelaxation=L.prototype.ha=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ro(c,a)};
Object.defineProperty(L.prototype,"m_wheelsDampingRelaxation",{get:L.prototype.X,set:L.prototype.ha});L.prototype.get_m_steering=L.prototype.pc=function(){return so(this.a)};L.prototype.set_m_steering=L.prototype.$e=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);to(c,a)};Object.defineProperty(L.prototype,"m_steering",{get:L.prototype.pc,set:L.prototype.$e});L.prototype.get_m_maxSuspensionForce=L.prototype.C=function(){return uo(this.a)};
L.prototype.set_m_maxSuspensionForce=L.prototype.K=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vo(c,a)};Object.defineProperty(L.prototype,"m_maxSuspensionForce",{get:L.prototype.C,set:L.prototype.K});L.prototype.get_m_maxSuspensionTravelCm=L.prototype.D=function(){return wo(this.a)};L.prototype.set_m_maxSuspensionTravelCm=L.prototype.L=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xo(c,a)};Object.defineProperty(L.prototype,"m_maxSuspensionTravelCm",{get:L.prototype.D,set:L.prototype.L});
L.prototype.get_m_wheelsSuspensionForce=L.prototype.Lc=function(){return yo(this.a)};L.prototype.set_m_wheelsSuspensionForce=L.prototype.xf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zo(c,a)};Object.defineProperty(L.prototype,"m_wheelsSuspensionForce",{get:L.prototype.Lc,set:L.prototype.xf});L.prototype.get_m_bIsFrontWheel=L.prototype.O=function(){return!!Ao(this.a)};L.prototype.set_m_bIsFrontWheel=L.prototype.Z=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bo(c,a)};
Object.defineProperty(L.prototype,"m_bIsFrontWheel",{get:L.prototype.O,set:L.prototype.Z});L.prototype.get_m_raycastInfo=L.prototype.ec=function(){return k(Co(this.a),M)};L.prototype.set_m_raycastInfo=L.prototype.Qe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Do(c,a)};Object.defineProperty(L.prototype,"m_raycastInfo",{get:L.prototype.ec,set:L.prototype.Qe});L.prototype.get_m_chassisConnectionPointCS=L.prototype.$a=function(){return k(Eo(this.a),p)};
L.prototype.set_m_chassisConnectionPointCS=L.prototype.Md=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fo(c,a)};Object.defineProperty(L.prototype,"m_chassisConnectionPointCS",{get:L.prototype.$a,set:L.prototype.Md});L.prototype.get_m_worldTransform=L.prototype.Mc=function(){return k(Go(this.a),r)};L.prototype.set_m_worldTransform=L.prototype.yf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ho(c,a)};Object.defineProperty(L.prototype,"m_worldTransform",{get:L.prototype.Mc,set:L.prototype.yf});
L.prototype.get_m_wheelDirectionCS=L.prototype.V=function(){return k(Io(this.a),p)};L.prototype.set_m_wheelDirectionCS=L.prototype.fa=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jo(c,a)};Object.defineProperty(L.prototype,"m_wheelDirectionCS",{get:L.prototype.V,set:L.prototype.fa});L.prototype.get_m_wheelAxleCS=L.prototype.U=function(){return k(Ko(this.a),p)};L.prototype.set_m_wheelAxleCS=L.prototype.ea=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Lo(c,a)};
Object.defineProperty(L.prototype,"m_wheelAxleCS",{get:L.prototype.U,set:L.prototype.ea});L.prototype.get_m_rotation=L.prototype.jc=function(){return Mo(this.a)};L.prototype.set_m_rotation=L.prototype.Ue=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);No(c,a)};Object.defineProperty(L.prototype,"m_rotation",{get:L.prototype.jc,set:L.prototype.Ue});L.prototype.get_m_deltaRotation=L.prototype.jb=function(){return Oo(this.a)};
L.prototype.set_m_deltaRotation=L.prototype.Vd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Po(c,a)};Object.defineProperty(L.prototype,"m_deltaRotation",{get:L.prototype.jb,set:L.prototype.Vd});L.prototype.get_m_brake=L.prototype.Ta=function(){return Qo(this.a)};L.prototype.set_m_brake=L.prototype.Fd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ro(c,a)};Object.defineProperty(L.prototype,"m_brake",{get:L.prototype.Ta,set:L.prototype.Fd});
L.prototype.get_m_clippedInvContactDotSuspension=L.prototype.ab=function(){return So(this.a)};L.prototype.set_m_clippedInvContactDotSuspension=L.prototype.Nd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);To(c,a)};Object.defineProperty(L.prototype,"m_clippedInvContactDotSuspension",{get:L.prototype.ab,set:L.prototype.Nd});L.prototype.get_m_suspensionRelativeVelocity=L.prototype.uc=function(){return Uo(this.a)};
L.prototype.set_m_suspensionRelativeVelocity=L.prototype.ef=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vo(c,a)};Object.defineProperty(L.prototype,"m_suspensionRelativeVelocity",{get:L.prototype.uc,set:L.prototype.ef});L.prototype.get_m_skidInfo=L.prototype.mc=function(){return Wo(this.a)};L.prototype.set_m_skidInfo=L.prototype.Xe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Xo(c,a)};Object.defineProperty(L.prototype,"m_skidInfo",{get:L.prototype.mc,set:L.prototype.Xe});
L.prototype.__destroy__=function(){Yo(this.a)};function N(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=void 0===a?Zo():void 0===c?_emscripten_bind_btVector4_btVector4_1(a):void 0===d?_emscripten_bind_btVector4_btVector4_2(a,c):void 0===e?_emscripten_bind_btVector4_btVector4_3(a,c,d):$o(a,c,d,e);h(N)[this.a]=this}N.prototype=Object.create(p.prototype);N.prototype.constructor=N;N.prototype.b=N;N.c={};
b.btVector4=N;N.prototype.w=function(){return ap(this.a)};N.prototype.setValue=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);bp(g,a,c,d,e)};N.prototype.length=N.prototype.length=function(){return cp(this.a)};N.prototype.x=N.prototype.x=function(){return dp(this.a)};N.prototype.y=N.prototype.y=function(){return ep(this.a)};N.prototype.z=N.prototype.z=function(){return fp(this.a)};
N.prototype.setX=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gp(c,a)};N.prototype.setY=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hp(c,a)};N.prototype.setZ=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ip(c,a)};N.prototype.normalize=N.prototype.normalize=function(){jp(this.a)};N.prototype.rotate=N.prototype.rotate=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return k(kp(d,a,c),p)};
N.prototype.dot=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return lp(c,a)};N.prototype.op_mul=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(mp(c,a),p)};N.prototype.op_add=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(np(c,a),p)};N.prototype.op_sub=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(op(c,a),p)};N.prototype.__destroy__=function(){pp(this.a)};function cC(){this.a=qp();h(cC)[this.a]=this}cC.prototype=Object.create(f.prototype);
cC.prototype.constructor=cC;cC.prototype.b=cC;cC.c={};b.btDefaultCollisionConstructionInfo=cC;cC.prototype.__destroy__=function(){rp(this.a)};function O(){throw"cannot construct a Anchor, no constructor in IDL";}O.prototype=Object.create(f.prototype);O.prototype.constructor=O;O.prototype.b=O;O.c={};b.Anchor=O;O.prototype.get_m_node=O.prototype.Ub=function(){return k(sp(this.a),Node)};O.prototype.set_m_node=O.prototype.Fe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tp(c,a)};
Object.defineProperty(O.prototype,"m_node",{get:O.prototype.Ub,set:O.prototype.Fe});O.prototype.get_m_local=O.prototype.Ob=function(){return k(up(this.a),p)};O.prototype.set_m_local=O.prototype.ze=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vp(c,a)};Object.defineProperty(O.prototype,"m_local",{get:O.prototype.Ob,set:O.prototype.ze});O.prototype.get_m_body=O.prototype.Sa=function(){return k(wp(this.a),H)};
O.prototype.set_m_body=O.prototype.Ed=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xp(c,a)};Object.defineProperty(O.prototype,"m_body",{get:O.prototype.Sa,set:O.prototype.Ed});O.prototype.get_m_influence=O.prototype.Hb=function(){return yp(this.a)};O.prototype.set_m_influence=O.prototype.se=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zp(c,a)};Object.defineProperty(O.prototype,"m_influence",{get:O.prototype.Hb,set:O.prototype.se});
O.prototype.get_m_c0=O.prototype.Va=function(){return k(Ap(this.a),BB)};O.prototype.set_m_c0=O.prototype.Hd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bp(c,a)};Object.defineProperty(O.prototype,"m_c0",{get:O.prototype.Va,set:O.prototype.Hd});O.prototype.get_m_c1=O.prototype.Wa=function(){return k(Cp(this.a),p)};O.prototype.set_m_c1=O.prototype.Id=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dp(c,a)};Object.defineProperty(O.prototype,"m_c1",{get:O.prototype.Wa,set:O.prototype.Id});
O.prototype.get_m_c2=O.prototype.Xa=function(){return Ep(this.a)};O.prototype.set_m_c2=O.prototype.Jd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fp(c,a)};Object.defineProperty(O.prototype,"m_c2",{get:O.prototype.Xa,set:O.prototype.Jd});O.prototype.__destroy__=function(){Gp(this.a)};function P(){throw"cannot construct a btVehicleRaycasterResult, no constructor in IDL";}P.prototype=Object.create(f.prototype);P.prototype.constructor=P;P.prototype.b=P;P.c={};b.btVehicleRaycasterResult=P;
P.prototype.get_m_hitPointInWorld=P.prototype.Cb=function(){return k(Hp(this.a),p)};P.prototype.set_m_hitPointInWorld=P.prototype.ne=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ip(c,a)};Object.defineProperty(P.prototype,"m_hitPointInWorld",{get:P.prototype.Cb,set:P.prototype.ne});P.prototype.get_m_hitNormalInWorld=P.prototype.Ab=function(){return k(Jp(this.a),p)};P.prototype.set_m_hitNormalInWorld=P.prototype.le=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kp(c,a)};
Object.defineProperty(P.prototype,"m_hitNormalInWorld",{get:P.prototype.Ab,set:P.prototype.le});P.prototype.get_m_distFraction=P.prototype.mb=function(){return Lp(this.a)};P.prototype.set_m_distFraction=P.prototype.Yd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mp(c,a)};Object.defineProperty(P.prototype,"m_distFraction",{get:P.prototype.mb,set:P.prototype.Yd});P.prototype.__destroy__=function(){Np(this.a)};
function HB(){throw"cannot construct a btVector3Array, no constructor in IDL";}HB.prototype=Object.create(f.prototype);HB.prototype.constructor=HB;HB.prototype.b=HB;HB.c={};b.btVector3Array=HB;HB.prototype.size=HB.prototype.size=function(){return Op(this.a)};HB.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Pp(c,a),p)};HB.prototype.__destroy__=function(){Qp(this.a)};function dC(){throw"cannot construct a btConstraintSolver, no constructor in IDL";}dC.prototype=Object.create(f.prototype);
dC.prototype.constructor=dC;dC.prototype.b=dC;dC.c={};b.btConstraintSolver=dC;dC.prototype.__destroy__=function(){Rp(this.a)};function Q(a,c,d){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);this.a=Sp(a,c,d);h(Q)[this.a]=this}Q.prototype=Object.create(qB.prototype);Q.prototype.constructor=Q;Q.prototype.b=Q;Q.c={};b.btRaycastVehicle=Q;
Q.prototype.applyEngineForce=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Tp(d,a,c)};Q.prototype.setSteeringValue=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Up(d,a,c)};Q.prototype.getWheelTransformWS=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Vp(c,a),r)};
Q.prototype.updateWheelTransform=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Wp(d,a,c)};Q.prototype.addWheel=function(a,c,d,e,g,n,D){var Y=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);return k(Xp(Y,a,c,d,e,g,n,D),L)};Q.prototype.getNumWheels=function(){return Yp(this.a)};
Q.prototype.getRigidBody=function(){return k(Zp(this.a),H)};Q.prototype.getWheelInfo=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k($p(c,a),L)};Q.prototype.setBrake=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);aq(d,a,c)};Q.prototype.setCoordinateSystem=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);bq(e,a,c,d)};Q.prototype.getCurrentSpeedKmHour=function(){return cq(this.a)};
Q.prototype.getChassisWorldTransform=function(){return k(dq(this.a),r)};Q.prototype.rayCast=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return eq(c,a)};Q.prototype.updateVehicle=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fq(c,a)};Q.prototype.resetSuspension=function(){gq(this.a)};Q.prototype.getSteeringValue=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return hq(c,a)};
Q.prototype.updateWheelTransformsWS=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===c?iq(d,a):jq(d,a,c)};Q.prototype.setPitchControl=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);kq(c,a)};Q.prototype.updateSuspension=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lq(c,a)};Q.prototype.updateFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mq(c,a)};Q.prototype.getRightAxis=function(){return nq(this.a)};
Q.prototype.getUpAxis=function(){return oq(this.a)};Q.prototype.getForwardAxis=function(){return pq(this.a)};Q.prototype.getForwardVector=function(){return k(qq(this.a),p)};Q.prototype.getUserConstraintType=function(){return rq(this.a)};Q.prototype.setUserConstraintType=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sq(c,a)};Q.prototype.setUserConstraintId=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tq(c,a)};Q.prototype.getUserConstraintId=function(){return uq(this.a)};
Q.prototype.updateAction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);vq(d,a,c)};Q.prototype.__destroy__=function(){wq(this.a)};function eC(a){a&&"object"===typeof a&&(a=a.a);this.a=xq(a);h(eC)[this.a]=this}eC.prototype=Object.create(tB.prototype);eC.prototype.constructor=eC;eC.prototype.b=eC;eC.c={};b.btCylinderShapeX=eC;eC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yq(c,a)};eC.prototype.getMargin=function(){return zq(this.a)};
eC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Aq(c,a)};eC.prototype.getLocalScaling=function(){return k(Bq(this.a),p)};eC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Cq(d,a,c)};eC.prototype.__destroy__=function(){Dq(this.a)};function fC(a){a&&"object"===typeof a&&(a=a.a);this.a=Eq(a);h(fC)[this.a]=this}fC.prototype=Object.create(tB.prototype);fC.prototype.constructor=fC;
fC.prototype.b=fC;fC.c={};b.btCylinderShapeZ=fC;fC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fq(c,a)};fC.prototype.getMargin=function(){return Gq(this.a)};fC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hq(c,a)};fC.prototype.getLocalScaling=function(){return k(Iq(this.a),p)};fC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Jq(d,a,c)};
fC.prototype.__destroy__=function(){Kq(this.a)};function ZB(){throw"cannot construct a btConvexPolyhedron, no constructor in IDL";}ZB.prototype=Object.create(f.prototype);ZB.prototype.constructor=ZB;ZB.prototype.b=ZB;ZB.c={};b.btConvexPolyhedron=ZB;ZB.prototype.get_m_vertices=ZB.prototype.Gc=function(){return k(Lq(this.a),HB)};ZB.prototype.set_m_vertices=ZB.prototype.sf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mq(c,a)};
Object.defineProperty(ZB.prototype,"m_vertices",{get:ZB.prototype.Gc,set:ZB.prototype.sf});ZB.prototype.get_m_faces=ZB.prototype.P=function(){return k(Nq(this.a),gC)};ZB.prototype.set_m_faces=ZB.prototype.$=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Oq(c,a)};Object.defineProperty(ZB.prototype,"m_faces",{get:ZB.prototype.P,set:ZB.prototype.$});ZB.prototype.__destroy__=function(){Pq(this.a)};function hC(){this.a=Qq();h(hC)[this.a]=this}hC.prototype=Object.create(f.prototype);
hC.prototype.constructor=hC;hC.prototype.b=hC;hC.c={};b.btSequentialImpulseConstraintSolver=hC;hC.prototype.__destroy__=function(){Rq(this.a)};function iC(){throw"cannot construct a tAnchorArray, no constructor in IDL";}iC.prototype=Object.create(f.prototype);iC.prototype.constructor=iC;iC.prototype.b=iC;iC.c={};b.tAnchorArray=iC;iC.prototype.size=iC.prototype.size=function(){return Sq(this.a)};iC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Tq(c,a),O)};
iC.prototype.clear=iC.prototype.clear=function(){Uq(this.a)};iC.prototype.push_back=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vq(c,a)};iC.prototype.pop_back=function(){Wq(this.a)};iC.prototype.__destroy__=function(){Xq(this.a)};function M(){throw"cannot construct a RaycastInfo, no constructor in IDL";}M.prototype=Object.create(f.prototype);M.prototype.constructor=M;M.prototype.b=M;M.c={};b.RaycastInfo=M;
M.prototype.get_m_contactNormalWS=M.prototype.cb=function(){return k(Yq(this.a),p)};M.prototype.set_m_contactNormalWS=M.prototype.Pd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Zq(c,a)};Object.defineProperty(M.prototype,"m_contactNormalWS",{get:M.prototype.cb,set:M.prototype.Pd});M.prototype.get_m_contactPointWS=M.prototype.eb=function(){return k($q(this.a),p)};M.prototype.set_m_contactPointWS=M.prototype.Qd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ar(c,a)};
Object.defineProperty(M.prototype,"m_contactPointWS",{get:M.prototype.eb,set:M.prototype.Qd});M.prototype.get_m_suspensionLength=M.prototype.tc=function(){return br(this.a)};M.prototype.set_m_suspensionLength=M.prototype.df=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cr(c,a)};Object.defineProperty(M.prototype,"m_suspensionLength",{get:M.prototype.tc,set:M.prototype.df});M.prototype.get_m_hardPointWS=M.prototype.wb=function(){return k(dr(this.a),p)};
M.prototype.set_m_hardPointWS=M.prototype.he=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);er(c,a)};Object.defineProperty(M.prototype,"m_hardPointWS",{get:M.prototype.wb,set:M.prototype.he});M.prototype.get_m_wheelDirectionWS=M.prototype.Ic=function(){return k(fr(this.a),p)};M.prototype.set_m_wheelDirectionWS=M.prototype.uf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gr(c,a)};Object.defineProperty(M.prototype,"m_wheelDirectionWS",{get:M.prototype.Ic,set:M.prototype.uf});
M.prototype.get_m_wheelAxleWS=M.prototype.Hc=function(){return k(hr(this.a),p)};M.prototype.set_m_wheelAxleWS=M.prototype.tf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ir(c,a)};Object.defineProperty(M.prototype,"m_wheelAxleWS",{get:M.prototype.Hc,set:M.prototype.tf});M.prototype.get_m_isInContact=M.prototype.Ib=function(){return!!jr(this.a)};M.prototype.set_m_isInContact=M.prototype.te=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);kr(c,a)};
Object.defineProperty(M.prototype,"m_isInContact",{get:M.prototype.Ib,set:M.prototype.te});M.prototype.get_m_groundObject=M.prototype.vb=function(){return lr(this.a)};M.prototype.set_m_groundObject=M.prototype.ge=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);mr(c,a)};Object.defineProperty(M.prototype,"m_groundObject",{get:M.prototype.vb,set:M.prototype.ge});M.prototype.__destroy__=function(){nr(this.a)};
function jC(a,c,d){YA();a&&"object"===typeof a&&(a=a.a);"object"==typeof c&&(c=bB(c));d&&"object"===typeof d&&(d=d.a);this.a=or(a,c,d);h(jC)[this.a]=this}jC.prototype=Object.create(m.prototype);jC.prototype.constructor=jC;jC.prototype.b=jC;jC.c={};b.btMultiSphereShape=jC;jC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pr(c,a)};jC.prototype.getLocalScaling=function(){return k(qr(this.a),p)};
jC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);rr(d,a,c)};jC.prototype.__destroy__=function(){sr(this.a)};function R(a,c,d,e){YA();a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);"object"==typeof e&&(e=bB(e));this.a=tr(a,c,d,e);h(R)[this.a]=this}R.prototype=Object.create(q.prototype);R.prototype.constructor=R;R.prototype.b=R;R.c={};b.btSoftBody=R;
R.prototype.checkLink=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return!!ur(d,a,c)};R.prototype.checkFace=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);return!!vr(e,a,c,d)};R.prototype.appendMaterial=function(){return k(wr(this.a),z)};R.prototype.appendNode=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);xr(d,a,c)};
R.prototype.appendLink=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);yr(g,a,c,d,e)};R.prototype.appendFace=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);zr(g,a,c,d,e)};
R.prototype.appendTetra=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);Ar(n,a,c,d,e,g)};R.prototype.appendAnchor=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);Br(g,a,c,d,e)};
R.prototype.addForce=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===c?Cr(d,a):Dr(d,a,c)};R.prototype.addAeroForceToNode=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Er(d,a,c)};R.prototype.getTotalMass=function(){return Fr(this.a)};R.prototype.setTotalMass=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Gr(d,a,c)};
R.prototype.setMass=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Hr(d,a,c)};R.prototype.transform=R.prototype.transform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ir(c,a)};R.prototype.translate=R.prototype.translate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jr(c,a)};R.prototype.rotate=R.prototype.rotate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kr(c,a)};
R.prototype.scale=R.prototype.scale=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Lr(c,a)};R.prototype.generateClusters=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return void 0===c?Mr(d,a):Nr(d,a,c)};R.prototype.generateBendingConstraints=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Or(d,a,c)};R.prototype.upcast=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Pr(c,a),R)};
R.prototype.setAnisotropicFriction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Qr(d,a,c)};R.prototype.getCollisionShape=function(){return k(Rr(this.a),m)};R.prototype.setContactProcessingThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sr(c,a)};R.prototype.setActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tr(c,a)};
R.prototype.forceActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ur(c,a)};R.prototype.activate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);void 0===a?Vr(c):Wr(c,a)};R.prototype.isActive=function(){return!!Xr(this.a)};R.prototype.isKinematicObject=function(){return!!Yr(this.a)};R.prototype.isStaticObject=function(){return!!Zr(this.a)};R.prototype.isStaticOrKinematicObject=function(){return!!$r(this.a)};R.prototype.getRestitution=function(){return as(this.a)};
R.prototype.getFriction=function(){return bs(this.a)};R.prototype.getRollingFriction=function(){return cs(this.a)};R.prototype.setRestitution=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ds(c,a)};R.prototype.setFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);es(c,a)};R.prototype.setRollingFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gs(c,a)};R.prototype.getWorldTransform=function(){return k(hs(this.a),r)};R.prototype.getCollisionFlags=function(){return is(this.a)};
R.prototype.setCollisionFlags=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);js(c,a)};R.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ks(c,a)};R.prototype.setCollisionShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ls(c,a)};R.prototype.setCcdMotionThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ms(c,a)};R.prototype.setCcdSweptSphereRadius=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ns(c,a)};
R.prototype.getUserIndex=function(){return ps(this.a)};R.prototype.setUserIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qs(c,a)};R.prototype.getUserPointer=function(){return k(rs(this.a),hB)};R.prototype.setUserPointer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ss(c,a)};R.prototype.getBroadphaseHandle=function(){return k(ts(this.a),iB)};R.prototype.get_m_cfg=R.prototype.Ya=function(){return k(us(this.a),S)};
R.prototype.set_m_cfg=R.prototype.Kd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vs(c,a)};Object.defineProperty(R.prototype,"m_cfg",{get:R.prototype.Ya,set:R.prototype.Kd});R.prototype.get_m_nodes=R.prototype.Vb=function(){return k(xs(this.a),kC)};R.prototype.set_m_nodes=R.prototype.Ge=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ys(c,a)};Object.defineProperty(R.prototype,"m_nodes",{get:R.prototype.Vb,set:R.prototype.Ge});
R.prototype.get_m_faces=R.prototype.P=function(){return k(zs(this.a),lC)};R.prototype.set_m_faces=R.prototype.$=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);As(c,a)};Object.defineProperty(R.prototype,"m_faces",{get:R.prototype.P,set:R.prototype.$});R.prototype.get_m_materials=R.prototype.Sb=function(){return k(Bs(this.a),IB)};R.prototype.set_m_materials=R.prototype.De=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Cs(c,a)};
Object.defineProperty(R.prototype,"m_materials",{get:R.prototype.Sb,set:R.prototype.De});R.prototype.get_m_anchors=R.prototype.Oa=function(){return k(Ds(this.a),iC)};R.prototype.set_m_anchors=R.prototype.Ad=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Es(c,a)};Object.defineProperty(R.prototype,"m_anchors",{get:R.prototype.Oa,set:R.prototype.Ad});R.prototype.__destroy__=function(){Fs(this.a)};function mC(){throw"cannot construct a btIntArray, no constructor in IDL";}mC.prototype=Object.create(f.prototype);
mC.prototype.constructor=mC;mC.prototype.b=mC;mC.c={};b.btIntArray=mC;mC.prototype.size=mC.prototype.size=function(){return Gs(this.a)};mC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return Hs(c,a)};mC.prototype.__destroy__=function(){Is(this.a)};function S(){throw"cannot construct a Config, no constructor in IDL";}S.prototype=Object.create(f.prototype);S.prototype.constructor=S;S.prototype.b=S;S.c={};b.Config=S;S.prototype.get_kVCF=S.prototype.Ha=function(){return Js(this.a)};
S.prototype.set_kVCF=S.prototype.td=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ks(c,a)};Object.defineProperty(S.prototype,"kVCF",{get:S.prototype.Ha,set:S.prototype.td});S.prototype.get_kDP=S.prototype.ua=function(){return Ls(this.a)};S.prototype.set_kDP=S.prototype.ed=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ms(c,a)};Object.defineProperty(S.prototype,"kDP",{get:S.prototype.ua,set:S.prototype.ed});S.prototype.get_kDG=S.prototype.ta=function(){return Ns(this.a)};
S.prototype.set_kDG=S.prototype.dd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Os(c,a)};Object.defineProperty(S.prototype,"kDG",{get:S.prototype.ta,set:S.prototype.dd});S.prototype.get_kLF=S.prototype.wa=function(){return Ps(this.a)};S.prototype.set_kLF=S.prototype.hd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Qs(c,a)};Object.defineProperty(S.prototype,"kLF",{get:S.prototype.wa,set:S.prototype.hd});S.prototype.get_kPR=S.prototype.ya=function(){return Rs(this.a)};
S.prototype.set_kPR=S.prototype.kd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ss(c,a)};Object.defineProperty(S.prototype,"kPR",{get:S.prototype.ya,set:S.prototype.kd});S.prototype.get_kVC=S.prototype.Ga=function(){return Ts(this.a)};S.prototype.set_kVC=S.prototype.sd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Us(c,a)};Object.defineProperty(S.prototype,"kVC",{get:S.prototype.Ga,set:S.prototype.sd});S.prototype.get_kDF=S.prototype.sa=function(){return Vs(this.a)};
S.prototype.set_kDF=S.prototype.cd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ws(c,a)};Object.defineProperty(S.prototype,"kDF",{get:S.prototype.sa,set:S.prototype.cd});S.prototype.get_kMT=S.prototype.xa=function(){return Xs(this.a)};S.prototype.set_kMT=S.prototype.jd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ys(c,a)};Object.defineProperty(S.prototype,"kMT",{get:S.prototype.xa,set:S.prototype.jd});S.prototype.get_kCHR=S.prototype.ra=function(){return Zs(this.a)};
S.prototype.set_kCHR=S.prototype.bd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$s(c,a)};Object.defineProperty(S.prototype,"kCHR",{get:S.prototype.ra,set:S.prototype.bd});S.prototype.get_kKHR=S.prototype.va=function(){return at(this.a)};S.prototype.set_kKHR=S.prototype.gd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bt(c,a)};Object.defineProperty(S.prototype,"kKHR",{get:S.prototype.va,set:S.prototype.gd});S.prototype.get_kSHR=S.prototype.za=function(){return ct(this.a)};
S.prototype.set_kSHR=S.prototype.ld=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dt(c,a)};Object.defineProperty(S.prototype,"kSHR",{get:S.prototype.za,set:S.prototype.ld});S.prototype.get_kAHR=S.prototype.qa=function(){return et(this.a)};S.prototype.set_kAHR=S.prototype.ad=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ft(c,a)};Object.defineProperty(S.prototype,"kAHR",{get:S.prototype.qa,set:S.prototype.ad});S.prototype.get_kSRHR_CL=S.prototype.Ca=function(){return gt(this.a)};
S.prototype.set_kSRHR_CL=S.prototype.od=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ht(c,a)};Object.defineProperty(S.prototype,"kSRHR_CL",{get:S.prototype.Ca,set:S.prototype.od});S.prototype.get_kSKHR_CL=S.prototype.Aa=function(){return it(this.a)};S.prototype.set_kSKHR_CL=S.prototype.md=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jt(c,a)};Object.defineProperty(S.prototype,"kSKHR_CL",{get:S.prototype.Aa,set:S.prototype.md});S.prototype.get_kSSHR_CL=S.prototype.Ea=function(){return kt(this.a)};
S.prototype.set_kSSHR_CL=S.prototype.qd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lt(c,a)};Object.defineProperty(S.prototype,"kSSHR_CL",{get:S.prototype.Ea,set:S.prototype.qd});S.prototype.get_kSR_SPLT_CL=S.prototype.Da=function(){return mt(this.a)};S.prototype.set_kSR_SPLT_CL=S.prototype.pd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nt(c,a)};Object.defineProperty(S.prototype,"kSR_SPLT_CL",{get:S.prototype.Da,set:S.prototype.pd});
S.prototype.get_kSK_SPLT_CL=S.prototype.Ba=function(){return ot(this.a)};S.prototype.set_kSK_SPLT_CL=S.prototype.nd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pt(c,a)};Object.defineProperty(S.prototype,"kSK_SPLT_CL",{get:S.prototype.Ba,set:S.prototype.nd});S.prototype.get_kSS_SPLT_CL=S.prototype.Fa=function(){return qt(this.a)};S.prototype.set_kSS_SPLT_CL=S.prototype.rd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);rt(c,a)};
Object.defineProperty(S.prototype,"kSS_SPLT_CL",{get:S.prototype.Fa,set:S.prototype.rd});S.prototype.get_maxvolume=S.prototype.Oc=function(){return st(this.a)};S.prototype.set_maxvolume=S.prototype.Af=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tt(c,a)};Object.defineProperty(S.prototype,"maxvolume",{get:S.prototype.Oc,set:S.prototype.Af});S.prototype.get_timescale=S.prototype.Qc=function(){return ut(this.a)};
S.prototype.set_timescale=S.prototype.Cf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vt(c,a)};Object.defineProperty(S.prototype,"timescale",{get:S.prototype.Qc,set:S.prototype.Cf});S.prototype.get_viterations=S.prototype.Rc=function(){return wt(this.a)};S.prototype.set_viterations=S.prototype.Df=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);xt(c,a)};Object.defineProperty(S.prototype,"viterations",{get:S.prototype.Rc,set:S.prototype.Df});
S.prototype.get_piterations=S.prototype.Pc=function(){return yt(this.a)};S.prototype.set_piterations=S.prototype.Bf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zt(c,a)};Object.defineProperty(S.prototype,"piterations",{get:S.prototype.Pc,set:S.prototype.Bf});S.prototype.get_diterations=S.prototype.pa=function(){return At(this.a)};S.prototype.set_diterations=S.prototype.$c=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bt(c,a)};
Object.defineProperty(S.prototype,"diterations",{get:S.prototype.pa,set:S.prototype.$c});S.prototype.get_citerations=S.prototype.na=function(){return Ct(this.a)};S.prototype.set_citerations=S.prototype.Yc=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dt(c,a)};Object.defineProperty(S.prototype,"citerations",{get:S.prototype.na,set:S.prototype.Yc});S.prototype.get_collisions=S.prototype.oa=function(){return Et(this.a)};
S.prototype.set_collisions=S.prototype.Zc=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ft(c,a)};Object.defineProperty(S.prototype,"collisions",{get:S.prototype.oa,set:S.prototype.Zc});S.prototype.__destroy__=function(){Gt(this.a)};function Node(){throw"cannot construct a Node, no constructor in IDL";}Node.prototype=Object.create(f.prototype);Node.prototype.constructor=Node;Node.prototype.b=Node;Node.c={};b.Node=Node;
Node.prototype.get_m_x=Node.prototype.Nc=function(){return k(Ht(this.a),p)};Node.prototype.set_m_x=Node.prototype.zf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);It(c,a)};Object.defineProperty(Node.prototype,"m_x",{get:Node.prototype.Nc,set:Node.prototype.zf});Node.prototype.get_m_q=Node.prototype.cc=function(){return k(Jt(this.a),p)};Node.prototype.set_m_q=Node.prototype.Oe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kt(c,a)};
Object.defineProperty(Node.prototype,"m_q",{get:Node.prototype.cc,set:Node.prototype.Oe});Node.prototype.get_m_v=Node.prototype.Fc=function(){return k(Lt(this.a),p)};Node.prototype.set_m_v=Node.prototype.rf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mt(c,a)};Object.defineProperty(Node.prototype,"m_v",{get:Node.prototype.Fc,set:Node.prototype.rf});Node.prototype.get_m_f=Node.prototype.qb=function(){return k(Nt(this.a),p)};
Node.prototype.set_m_f=Node.prototype.be=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ot(c,a)};Object.defineProperty(Node.prototype,"m_f",{get:Node.prototype.qb,set:Node.prototype.be});Node.prototype.get_m_n=Node.prototype.R=function(){return k(Pt(this.a),p)};Node.prototype.set_m_n=Node.prototype.aa=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Qt(c,a)};Object.defineProperty(Node.prototype,"m_n",{get:Node.prototype.R,set:Node.prototype.aa});
Node.prototype.get_m_im=Node.prototype.Eb=function(){return Rt(this.a)};Node.prototype.set_m_im=Node.prototype.pe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);St(c,a)};Object.defineProperty(Node.prototype,"m_im",{get:Node.prototype.Eb,set:Node.prototype.pe});Node.prototype.get_m_area=Node.prototype.Ra=function(){return Tt(this.a)};Node.prototype.set_m_area=Node.prototype.Dd=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ut(c,a)};
Object.defineProperty(Node.prototype,"m_area",{get:Node.prototype.Ra,set:Node.prototype.Dd});Node.prototype.__destroy__=function(){Vt(this.a)};function nC(){this.a=Wt();h(nC)[this.a]=this}nC.prototype=Object.create(f.prototype);nC.prototype.constructor=nC;nC.prototype.b=nC;nC.c={};b.btGhostPairCallback=nC;nC.prototype.__destroy__=function(){Xt(this.a)};function oC(){throw"cannot construct a btOverlappingPairCallback, no constructor in IDL";}oC.prototype=Object.create(f.prototype);
oC.prototype.constructor=oC;oC.prototype.b=oC;oC.c={};b.btOverlappingPairCallback=oC;oC.prototype.__destroy__=function(){Yt(this.a)};function pC(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=void 0===e?Zt(a,c,d):$t(a,c,d,e);h(pC)[this.a]=this}pC.prototype=Object.create(qB.prototype);pC.prototype.constructor=pC;pC.prototype.b=pC;pC.c={};b.btKinematicCharacterController=pC;
pC.prototype.setUpAxis=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);au(c,a)};pC.prototype.setWalkDirection=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bu(c,a)};pC.prototype.setVelocityForTimeInterval=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);cu(d,a,c)};pC.prototype.warp=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);du(c,a)};pC.prototype.preStep=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);eu(c,a)};
pC.prototype.playerStep=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);fu(d,a,c)};pC.prototype.setFallSpeed=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gu(c,a)};pC.prototype.setJumpSpeed=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hu(c,a)};pC.prototype.setMaxJumpHeight=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);iu(c,a)};pC.prototype.canJump=function(){return!!ju(this.a)};pC.prototype.jump=function(){ku(this.a)};
pC.prototype.setGravity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lu(c,a)};pC.prototype.getGravity=function(){return mu(this.a)};pC.prototype.setMaxSlope=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nu(c,a)};pC.prototype.getMaxSlope=function(){return ou(this.a)};pC.prototype.getGhostObject=function(){return k(pu(this.a),T)};pC.prototype.setUseGhostSweepTest=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qu(c,a)};pC.prototype.onGround=function(){return!!ru(this.a)};
pC.prototype.setUpInterpolate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);su(c,a)};pC.prototype.updateAction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);tu(d,a,c)};pC.prototype.__destroy__=function(){uu(this.a)};function qC(){throw"cannot construct a btSoftBodyArray, no constructor in IDL";}qC.prototype=Object.create(f.prototype);qC.prototype.constructor=qC;qC.prototype.b=qC;qC.c={};b.btSoftBodyArray=qC;
qC.prototype.size=qC.prototype.size=function(){return vu(this.a)};qC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(wu(c,a),R)};qC.prototype.__destroy__=function(){xu(this.a)};function gC(){throw"cannot construct a btFaceArray, no constructor in IDL";}gC.prototype=Object.create(f.prototype);gC.prototype.constructor=gC;gC.prototype.b=gC;gC.c={};b.btFaceArray=gC;gC.prototype.size=gC.prototype.size=function(){return yu(this.a)};
gC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(zu(c,a),rC)};gC.prototype.__destroy__=function(){Au(this.a)};function sC(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Bu(a,c);h(sC)[this.a]=this}sC.prototype=Object.create(lB.prototype);sC.prototype.constructor=sC;sC.prototype.b=sC;sC.c={};b.btStaticPlaneShape=sC;sC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Cu(c,a)};
sC.prototype.getLocalScaling=function(){return k(Du(this.a),p)};sC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Eu(d,a,c)};sC.prototype.__destroy__=function(){Fu(this.a)};function eB(){throw"cannot construct a btOverlappingPairCache, no constructor in IDL";}eB.prototype=Object.create(f.prototype);eB.prototype.constructor=eB;eB.prototype.b=eB;eB.c={};b.btOverlappingPairCache=eB;
eB.prototype.setInternalGhostPairCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gu(c,a)};eB.prototype.getNumOverlappingPairs=function(){return Hu(this.a)};eB.prototype.__destroy__=function(){Iu(this.a)};function NB(){throw"cannot construct a btIndexedMesh, no constructor in IDL";}NB.prototype=Object.create(f.prototype);NB.prototype.constructor=NB;NB.prototype.b=NB;NB.c={};b.btIndexedMesh=NB;NB.prototype.get_m_numTriangles=NB.prototype.Zb=function(){return Ju(this.a)};
NB.prototype.set_m_numTriangles=NB.prototype.Ke=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ku(c,a)};Object.defineProperty(NB.prototype,"m_numTriangles",{get:NB.prototype.Zb,set:NB.prototype.Ke});NB.prototype.__destroy__=function(){Lu(this.a)};function U(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=Mu(a,c,d,e,g);h(U)[this.a]=this}U.prototype=Object.create(w.prototype);
U.prototype.constructor=U;U.prototype.b=U;U.c={};b.btSoftRigidDynamicsWorld=U;U.prototype.addSoftBody=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Nu(e,a,c,d)};U.prototype.removeSoftBody=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ou(c,a)};U.prototype.removeCollisionObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Pu(c,a)};U.prototype.getWorldInfo=function(){return k(Qu(this.a),I)};
U.prototype.getSoftBodyArray=function(){return k(Ru(this.a),qC)};U.prototype.getDispatcher=function(){return k(Su(this.a),dB)};U.prototype.rayTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Tu(e,a,c,d)};U.prototype.getPairCache=function(){return k(Uu(this.a),eB)};U.prototype.getDispatchInfo=function(){return k(Vu(this.a),l)};
U.prototype.addCollisionObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?Wu(e,a):void 0===d?Xu(e,a,c):Yu(e,a,c,d)};U.prototype.getBroadphase=function(){return k(Zu(this.a),fB)};
U.prototype.convexSweepTest=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);$u(n,a,c,d,e,g)};U.prototype.contactPairTest=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);av(e,a,c,d)};
U.prototype.contactTest=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);bv(d,a,c)};U.prototype.updateSingleAabb=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cv(c,a)};U.prototype.setDebugDrawer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dv(c,a)};U.prototype.getDebugDrawer=function(){return k(ev(this.a),gB)};U.prototype.debugDrawWorld=function(){fv(this.a)};
U.prototype.debugDrawObject=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);gv(e,a,c,d)};U.prototype.setGravity=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hv(c,a)};U.prototype.getGravity=function(){return k(iv(this.a),p)};
U.prototype.addRigidBody=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?jv(e,a):void 0===d?_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_2(e,a,c):kv(e,a,c,d)};U.prototype.removeRigidBody=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lv(c,a)};U.prototype.addConstraint=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===c?mv(d,a):nv(d,a,c)};
U.prototype.removeConstraint=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ov(c,a)};U.prototype.stepSimulation=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);return void 0===c?pv(e,a):void 0===d?qv(e,a,c):rv(e,a,c,d)};U.prototype.setContactAddedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sv(c,a)};
U.prototype.setContactProcessedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);tv(c,a)};U.prototype.setContactDestroyedCallback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);uv(c,a)};U.prototype.addAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vv(c,a)};U.prototype.removeAction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);wv(c,a)};U.prototype.getSolverInfo=function(){return k(xv(this.a),t)};
U.prototype.setInternalTickCallback=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);void 0===c?yv(e,a):void 0===d?zv(e,a,c):Av(e,a,c,d)};U.prototype.__destroy__=function(){Bv(this.a)};function tC(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=Cv(a,c,d,e);h(tC)[this.a]=this}tC.prototype=Object.create(kB.prototype);
tC.prototype.constructor=tC;tC.prototype.b=tC;tC.c={};b.btFixedConstraint=tC;tC.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dv(c,a)};tC.prototype.getBreakingImpulseThreshold=function(){return Ev(this.a)};tC.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fv(c,a)};tC.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Gv(d,a,c)};
tC.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Hv(e,a,c,d)};tC.prototype.__destroy__=function(){Iv(this.a)};function r(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=void 0===a?Jv():void 0===c?_emscripten_bind_btTransform_btTransform_1(a):Kv(a,c);h(r)[this.a]=this}r.prototype=Object.create(f.prototype);r.prototype.constructor=r;r.prototype.b=r;r.c={};b.btTransform=r;
r.prototype.setIdentity=function(){Lv(this.a)};r.prototype.setOrigin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Mv(c,a)};r.prototype.setRotation=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Nv(c,a)};r.prototype.getOrigin=function(){return k(Ov(this.a),p)};r.prototype.getRotation=function(){return k(Pv(this.a),V)};r.prototype.getBasis=function(){return k(Qv(this.a),BB)};r.prototype.setFromOpenGLMatrix=function(a){var c=this.a;YA();"object"==typeof a&&(a=bB(a));Rv(c,a)};
r.prototype.inverse=r.prototype.inverse=function(){return k(Sv(this.a),r)};r.prototype.op_mul=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Tv(c,a),r)};r.prototype.__destroy__=function(){Uv(this.a)};function W(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Vv(a,c);h(W)[this.a]=this}W.prototype=Object.create(y.prototype);W.prototype.constructor=W;W.prototype.b=W;W.c={};b.ClosestRayResultCallback=W;W.prototype.hasHit=function(){return!!Wv(this.a)};
W.prototype.get_m_rayFromWorld=W.prototype.S=function(){return k(Xv(this.a),p)};W.prototype.set_m_rayFromWorld=W.prototype.ba=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yv(c,a)};Object.defineProperty(W.prototype,"m_rayFromWorld",{get:W.prototype.S,set:W.prototype.ba});W.prototype.get_m_rayToWorld=W.prototype.T=function(){return k(Zv(this.a),p)};W.prototype.set_m_rayToWorld=W.prototype.da=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$v(c,a)};
Object.defineProperty(W.prototype,"m_rayToWorld",{get:W.prototype.T,set:W.prototype.da});W.prototype.get_m_hitNormalWorld=W.prototype.A=function(){return k(aw(this.a),p)};W.prototype.set_m_hitNormalWorld=W.prototype.I=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);bw(c,a)};Object.defineProperty(W.prototype,"m_hitNormalWorld",{get:W.prototype.A,set:W.prototype.I});W.prototype.get_m_hitPointWorld=W.prototype.B=function(){return k(cw(this.a),p)};
W.prototype.set_m_hitPointWorld=W.prototype.J=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dw(c,a)};Object.defineProperty(W.prototype,"m_hitPointWorld",{get:W.prototype.B,set:W.prototype.J});W.prototype.get_m_collisionFilterGroup=W.prototype.f=function(){return ew(this.a)};W.prototype.set_m_collisionFilterGroup=W.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);fw(c,a)};Object.defineProperty(W.prototype,"m_collisionFilterGroup",{get:W.prototype.f,set:W.prototype.h});
W.prototype.get_m_collisionFilterMask=W.prototype.g=function(){return gw(this.a)};W.prototype.set_m_collisionFilterMask=W.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hw(c,a)};Object.defineProperty(W.prototype,"m_collisionFilterMask",{get:W.prototype.g,set:W.prototype.i});W.prototype.get_m_closestHitFraction=W.prototype.j=function(){return iw(this.a)};W.prototype.set_m_closestHitFraction=W.prototype.l=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jw(c,a)};
Object.defineProperty(W.prototype,"m_closestHitFraction",{get:W.prototype.j,set:W.prototype.l});W.prototype.get_m_collisionObject=W.prototype.u=function(){return k(kw(this.a),q)};W.prototype.set_m_collisionObject=W.prototype.G=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lw(c,a)};Object.defineProperty(W.prototype,"m_collisionObject",{get:W.prototype.u,set:W.prototype.G});W.prototype.__destroy__=function(){mw(this.a)};
function uC(a){a&&"object"===typeof a&&(a=a.a);this.a=void 0===a?nw():ow(a);h(uC)[this.a]=this}uC.prototype=Object.create(nB.prototype);uC.prototype.constructor=uC;uC.prototype.b=uC;uC.c={};b.btSoftBodyRigidBodyCollisionConfiguration=uC;uC.prototype.__destroy__=function(){pw(this.a)};function vC(){this.a=qw();h(vC)[this.a]=this}vC.prototype=Object.create(zB.prototype);vC.prototype.constructor=vC;vC.prototype.b=vC;vC.c={};b.ConcreteContactResultCallback=vC;
vC.prototype.addSingleResult=function(a,c,d,e,g,n,D){var Y=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);return rw(Y,a,c,d,e,g,n,D)};vC.prototype.__destroy__=function(){sw(this.a)};
function xC(a,c,d){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);this.a=void 0===d?tw(a,c):uw(a,c,d);h(xC)[this.a]=this}xC.prototype=Object.create(oB.prototype);xC.prototype.constructor=xC;xC.prototype.b=xC;xC.c={};b.btBvhTriangleMeshShape=xC;xC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vw(c,a)};xC.prototype.getLocalScaling=function(){return k(ww(this.a),p)};
xC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);xw(d,a,c)};xC.prototype.__destroy__=function(){yw(this.a)};function GB(){throw"cannot construct a btConstCollisionObjectArray, no constructor in IDL";}GB.prototype=Object.create(f.prototype);GB.prototype.constructor=GB;GB.prototype.b=GB;GB.c={};b.btConstCollisionObjectArray=GB;GB.prototype.size=GB.prototype.size=function(){return zw(this.a)};
GB.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(Aw(c,a),q)};GB.prototype.__destroy__=function(){Bw(this.a)};function yC(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=void 0===e?Cw(a,c,d):void 0===g?_emscripten_bind_btSliderConstraint_btSliderConstraint_4(a,c,d,e):Dw(a,c,d,e,g);h(yC)[this.a]=this}yC.prototype=Object.create(kB.prototype);
yC.prototype.constructor=yC;yC.prototype.b=yC;yC.c={};b.btSliderConstraint=yC;yC.prototype.setLowerLinLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ew(c,a)};yC.prototype.setUpperLinLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fw(c,a)};yC.prototype.setLowerAngLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Gw(c,a)};yC.prototype.setUpperAngLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hw(c,a)};
yC.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Iw(c,a)};yC.prototype.getBreakingImpulseThreshold=function(){return Jw(this.a)};yC.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Kw(c,a)};yC.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Lw(d,a,c)};
yC.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Mw(e,a,c,d)};yC.prototype.__destroy__=function(){Nw(this.a)};function T(){this.a=Ow();h(T)[this.a]=this}T.prototype=Object.create(u.prototype);T.prototype.constructor=T;T.prototype.b=T;T.c={};b.btPairCachingGhostObject=T;
T.prototype.setAnisotropicFriction=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Pw(d,a,c)};T.prototype.getCollisionShape=function(){return k(Qw(this.a),m)};T.prototype.setContactProcessingThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Rw(c,a)};T.prototype.setActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Sw(c,a)};
T.prototype.forceActivationState=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tw(c,a)};T.prototype.activate=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);void 0===a?Uw(c):Vw(c,a)};T.prototype.isActive=function(){return!!Ww(this.a)};T.prototype.isKinematicObject=function(){return!!Xw(this.a)};T.prototype.isStaticObject=function(){return!!Yw(this.a)};T.prototype.isStaticOrKinematicObject=function(){return!!Zw(this.a)};T.prototype.getRestitution=function(){return $w(this.a)};
T.prototype.getFriction=function(){return ax(this.a)};T.prototype.getRollingFriction=function(){return bx(this.a)};T.prototype.setRestitution=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);cx(c,a)};T.prototype.setFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);dx(c,a)};T.prototype.setRollingFriction=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ex(c,a)};T.prototype.getWorldTransform=function(){return k(fx(this.a),r)};T.prototype.getCollisionFlags=function(){return gx(this.a)};
T.prototype.setCollisionFlags=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hx(c,a)};T.prototype.setWorldTransform=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ix(c,a)};T.prototype.setCollisionShape=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jx(c,a)};T.prototype.setCcdMotionThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);kx(c,a)};T.prototype.setCcdSweptSphereRadius=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);lx(c,a)};
T.prototype.getUserIndex=function(){return mx(this.a)};T.prototype.setUserIndex=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nx(c,a)};T.prototype.getUserPointer=function(){return k(ox(this.a),hB)};T.prototype.setUserPointer=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);px(c,a)};T.prototype.getBroadphaseHandle=function(){return k(qx(this.a),iB)};T.prototype.getNumOverlappingObjects=function(){return rx(this.a)};
T.prototype.getOverlappingObject=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(sx(c,a),q)};T.prototype.__destroy__=function(){tx(this.a)};function C(){throw"cannot construct a btManifoldPoint, no constructor in IDL";}C.prototype=Object.create(f.prototype);C.prototype.constructor=C;C.prototype.b=C;C.c={};b.btManifoldPoint=C;C.prototype.getPositionWorldOnA=function(){return k(ux(this.a),p)};C.prototype.getPositionWorldOnB=function(){return k(vx(this.a),p)};
C.prototype.getAppliedImpulse=function(){return wx(this.a)};C.prototype.getDistance=function(){return xx(this.a)};C.prototype.get_m_localPointA=C.prototype.Pb=function(){return k(yx(this.a),p)};C.prototype.set_m_localPointA=C.prototype.Ae=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);zx(c,a)};Object.defineProperty(C.prototype,"m_localPointA",{get:C.prototype.Pb,set:C.prototype.Ae});C.prototype.get_m_localPointB=C.prototype.Qb=function(){return k(Ax(this.a),p)};
C.prototype.set_m_localPointB=C.prototype.Be=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Bx(c,a)};Object.defineProperty(C.prototype,"m_localPointB",{get:C.prototype.Qb,set:C.prototype.Be});C.prototype.get_m_positionWorldOnB=C.prototype.bc=function(){return k(Cx(this.a),p)};C.prototype.set_m_positionWorldOnB=C.prototype.Ne=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Dx(c,a)};Object.defineProperty(C.prototype,"m_positionWorldOnB",{get:C.prototype.bc,set:C.prototype.Ne});
C.prototype.get_m_positionWorldOnA=C.prototype.ac=function(){return k(Ex(this.a),p)};C.prototype.set_m_positionWorldOnA=C.prototype.Me=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fx(c,a)};Object.defineProperty(C.prototype,"m_positionWorldOnA",{get:C.prototype.ac,set:C.prototype.Me});C.prototype.get_m_normalWorldOnB=C.prototype.Xb=function(){return k(Gx(this.a),p)};C.prototype.set_m_normalWorldOnB=C.prototype.Ie=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hx(c,a)};
Object.defineProperty(C.prototype,"m_normalWorldOnB",{get:C.prototype.Xb,set:C.prototype.Ie});C.prototype.get_m_userPersistentData=C.prototype.Ec=function(){return Ix(this.a)};C.prototype.set_m_userPersistentData=C.prototype.qf=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jx(c,a)};Object.defineProperty(C.prototype,"m_userPersistentData",{get:C.prototype.Ec,set:C.prototype.qf});C.prototype.__destroy__=function(){Kx(this.a)};
function zC(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=void 0===d?Lx(a,c):void 0===e?_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(a,c,d):Mx(a,c,d,e);h(zC)[this.a]=this}zC.prototype=Object.create(kB.prototype);zC.prototype.constructor=zC;zC.prototype.b=zC;zC.c={};b.btPoint2PointConstraint=zC;zC.prototype.setPivotA=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Nx(c,a)};
zC.prototype.setPivotB=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Ox(c,a)};zC.prototype.getPivotInA=function(){return k(Px(this.a),p)};zC.prototype.getPivotInB=function(){return k(Qx(this.a),p)};zC.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Rx(c,a)};zC.prototype.getBreakingImpulseThreshold=function(){return Sx(this.a)};zC.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tx(c,a)};
zC.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return Ux(d,a,c)};zC.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Vx(e,a,c,d)};zC.prototype.get_m_setting=zC.prototype.kc=function(){return k(Wx(this.a),G)};zC.prototype.set_m_setting=zC.prototype.Ve=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Xx(c,a)};
Object.defineProperty(zC.prototype,"m_setting",{get:zC.prototype.kc,set:zC.prototype.Ve});zC.prototype.__destroy__=function(){Yx(this.a)};function AC(){this.a=Zx();h(AC)[this.a]=this}AC.prototype=Object.create(f.prototype);AC.prototype.constructor=AC;AC.prototype.b=AC;AC.c={};b.btSoftBodyHelpers=AC;
AC.prototype.CreateRope=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);return k($x(n,a,c,d,e,g),R)};
AC.prototype.CreatePatch=function(a,c,d,e,g,n,D,Y,ma){var v=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);Y&&"object"===typeof Y&&(Y=Y.a);ma&&"object"===typeof ma&&(ma=ma.a);return k(ay(v,a,c,d,e,g,n,D,Y,ma),R)};
AC.prototype.CreatePatchUV=function(a,c,d,e,g,n,D,Y,ma,v){var J=this.a;YA();a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);n&&"object"===typeof n&&(n=n.a);D&&"object"===typeof D&&(D=D.a);Y&&"object"===typeof Y&&(Y=Y.a);ma&&"object"===typeof ma&&(ma=ma.a);"object"==typeof v&&(v=bB(v));return k(by(J,a,c,d,e,g,n,D,Y,ma,v),R)};
AC.prototype.CreateEllipsoid=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);return k(cy(g,a,c,d,e),R)};
AC.prototype.CreateFromTriMesh=function(a,c,d,e,g){var n=this.a;YA();a&&"object"===typeof a&&(a=a.a);"object"==typeof c&&(c=bB(c));if("object"==typeof d&&"object"===typeof d){var D=ZA(d,Ka);$A(d,Ka,D);d=D}e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);return k(dy(n,a,c,d,e,g),R)};
AC.prototype.CreateFromConvexHull=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);return k(ey(g,a,c,d,e),R)};AC.prototype.__destroy__=function(){fy(this.a)};function iB(){throw"cannot construct a btBroadphaseProxy, no constructor in IDL";}iB.prototype=Object.create(f.prototype);iB.prototype.constructor=iB;iB.prototype.b=iB;iB.c={};b.btBroadphaseProxy=iB;
iB.prototype.get_m_collisionFilterGroup=iB.prototype.f=function(){return gy(this.a)};iB.prototype.set_m_collisionFilterGroup=iB.prototype.h=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);hy(c,a)};Object.defineProperty(iB.prototype,"m_collisionFilterGroup",{get:iB.prototype.f,set:iB.prototype.h});iB.prototype.get_m_collisionFilterMask=iB.prototype.g=function(){return iy(this.a)};
iB.prototype.set_m_collisionFilterMask=iB.prototype.i=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);jy(c,a)};Object.defineProperty(iB.prototype,"m_collisionFilterMask",{get:iB.prototype.g,set:iB.prototype.i});iB.prototype.__destroy__=function(){ky(this.a)};function kC(){throw"cannot construct a tNodeArray, no constructor in IDL";}kC.prototype=Object.create(f.prototype);kC.prototype.constructor=kC;kC.prototype.b=kC;kC.c={};b.tNodeArray=kC;kC.prototype.size=kC.prototype.size=function(){return ly(this.a)};
kC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(my(c,a),Node)};kC.prototype.__destroy__=function(){ny(this.a)};function BC(a){a&&"object"===typeof a&&(a=a.a);this.a=oy(a);h(BC)[this.a]=this}BC.prototype=Object.create(m.prototype);BC.prototype.constructor=BC;BC.prototype.b=BC;BC.c={};b.btBoxShape=BC;BC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);py(c,a)};BC.prototype.getMargin=function(){return qy(this.a)};
BC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);ry(c,a)};BC.prototype.getLocalScaling=function(){return k(sy(this.a),p)};BC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);ty(d,a,c)};BC.prototype.__destroy__=function(){uy(this.a)};function rC(){throw"cannot construct a btFace, no constructor in IDL";}rC.prototype=Object.create(f.prototype);rC.prototype.constructor=rC;rC.prototype.b=rC;
rC.c={};b.btFace=rC;rC.prototype.get_m_indices=rC.prototype.Gb=function(){return k(vy(this.a),mC)};rC.prototype.set_m_indices=rC.prototype.re=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);wy(c,a)};Object.defineProperty(rC.prototype,"m_indices",{get:rC.prototype.Gb,set:rC.prototype.re});rC.prototype.get_m_plane=rC.prototype.$b=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return xy(c,a)};
rC.prototype.set_m_plane=rC.prototype.Le=function(a,c){var d=this.a;YA();a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);yy(d,a,c)};Object.defineProperty(rC.prototype,"m_plane",{get:rC.prototype.$b,set:rC.prototype.Le});rC.prototype.__destroy__=function(){zy(this.a)};function CC(){this.a=Ay();h(CC)[this.a]=this}CC.prototype=Object.create(gB.prototype);CC.prototype.constructor=CC;CC.prototype.b=CC;CC.c={};b.DebugDrawer=CC;
CC.prototype.drawLine=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);By(e,a,c,d)};CC.prototype.drawContactPoint=function(a,c,d,e,g){var n=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);Cy(n,a,c,d,e,g)};
CC.prototype.reportErrorWarning=function(a){var c=this.a;YA();a=a&&"object"===typeof a?a.a:aB(a);Dy(c,a)};CC.prototype.draw3dText=function(a,c){var d=this.a;YA();a&&"object"===typeof a&&(a=a.a);c=c&&"object"===typeof c?c.a:aB(c);Ey(d,a,c)};CC.prototype.setDebugMode=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fy(c,a)};CC.prototype.getDebugMode=function(){return Gy(this.a)};CC.prototype.__destroy__=function(){Hy(this.a)};
function DC(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=Iy(a,c);h(DC)[this.a]=this}DC.prototype=Object.create(mB.prototype);DC.prototype.constructor=DC;DC.prototype.b=DC;DC.c={};b.btCapsuleShapeX=DC;DC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jy(c,a)};DC.prototype.getMargin=function(){return Ky(this.a)};DC.prototype.getUpAxis=function(){return Ly(this.a)};DC.prototype.getRadius=function(){return My(this.a)};
DC.prototype.getHalfHeight=function(){return Ny(this.a)};DC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Oy(c,a)};DC.prototype.getLocalScaling=function(){return k(Py(this.a),p)};DC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Qy(d,a,c)};DC.prototype.__destroy__=function(){Ry(this.a)};
function V(a,c,d,e){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);this.a=Sy(a,c,d,e);h(V)[this.a]=this}V.prototype=Object.create(sB.prototype);V.prototype.constructor=V;V.prototype.b=V;V.c={};b.btQuaternion=V;V.prototype.setValue=function(a,c,d,e){var g=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);Ty(g,a,c,d,e)};
V.prototype.setEulerZYX=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);Uy(e,a,c,d)};V.prototype.setRotation=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Vy(d,a,c)};V.prototype.normalize=V.prototype.normalize=function(){Wy(this.a)};V.prototype.length2=function(){return Xy(this.a)};V.prototype.length=V.prototype.length=function(){return Yy(this.a)};
V.prototype.dot=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return Zy(c,a)};V.prototype.normalized=function(){return k($y(this.a),V)};V.prototype.getAxis=function(){return k(az(this.a),p)};V.prototype.inverse=V.prototype.inverse=function(){return k(bz(this.a),V)};V.prototype.getAngle=function(){return cz(this.a)};V.prototype.getAngleShortestPath=function(){return dz(this.a)};V.prototype.angle=V.prototype.angle=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return ez(c,a)};
V.prototype.angleShortestPath=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return fz(c,a)};V.prototype.op_add=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(gz(c,a),V)};V.prototype.op_sub=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(hz(c,a),V)};V.prototype.op_mul=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(iz(c,a),V)};V.prototype.op_mulq=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(jz(c,a),V)};
V.prototype.op_div=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(kz(c,a),V)};V.prototype.x=V.prototype.x=function(){return lz(this.a)};V.prototype.y=V.prototype.y=function(){return mz(this.a)};V.prototype.z=V.prototype.z=function(){return nz(this.a)};V.prototype.w=function(){return oz(this.a)};V.prototype.setX=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pz(c,a)};V.prototype.setY=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);qz(c,a)};
V.prototype.setZ=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);rz(c,a)};V.prototype.setW=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);sz(c,a)};V.prototype.__destroy__=function(){tz(this.a)};function EC(a,c){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);this.a=uz(a,c);h(EC)[this.a]=this}EC.prototype=Object.create(mB.prototype);EC.prototype.constructor=EC;EC.prototype.b=EC;EC.c={};b.btCapsuleShapeZ=EC;
EC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);vz(c,a)};EC.prototype.getMargin=function(){return wz(this.a)};EC.prototype.getUpAxis=function(){return xz(this.a)};EC.prototype.getRadius=function(){return yz(this.a)};EC.prototype.getHalfHeight=function(){return zz(this.a)};EC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Az(c,a)};EC.prototype.getLocalScaling=function(){return k(Bz(this.a),p)};
EC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Cz(d,a,c)};EC.prototype.__destroy__=function(){Dz(this.a)};function t(){throw"cannot construct a btContactSolverInfo, no constructor in IDL";}t.prototype=Object.create(f.prototype);t.prototype.constructor=t;t.prototype.b=t;t.c={};b.btContactSolverInfo=t;t.prototype.get_m_splitImpulse=t.prototype.nc=function(){return!!Ez(this.a)};
t.prototype.set_m_splitImpulse=t.prototype.Ye=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Fz(c,a)};Object.defineProperty(t.prototype,"m_splitImpulse",{get:t.prototype.nc,set:t.prototype.Ye});t.prototype.get_m_splitImpulsePenetrationThreshold=t.prototype.oc=function(){return Gz(this.a)};t.prototype.set_m_splitImpulsePenetrationThreshold=t.prototype.Ze=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Hz(c,a)};
Object.defineProperty(t.prototype,"m_splitImpulsePenetrationThreshold",{get:t.prototype.oc,set:t.prototype.Ze});t.prototype.get_m_numIterations=t.prototype.Yb=function(){return Iz(this.a)};t.prototype.set_m_numIterations=t.prototype.Je=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Jz(c,a)};Object.defineProperty(t.prototype,"m_numIterations",{get:t.prototype.Yb,set:t.prototype.Je});t.prototype.__destroy__=function(){Kz(this.a)};
function FC(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=void 0===e?Lz(a,c,d):void 0===g?_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_4(a,c,d,e):Mz(a,c,d,e,g);h(FC)[this.a]=this}FC.prototype=Object.create(wB.prototype);FC.prototype.constructor=FC;FC.prototype.b=FC;FC.c={};b.btGeneric6DofSpringConstraint=FC;
FC.prototype.enableSpring=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Nz(d,a,c)};FC.prototype.setStiffness=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Oz(d,a,c)};FC.prototype.setDamping=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);Pz(d,a,c)};
FC.prototype.setEquilibriumPoint=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);void 0===a?Qz(d):void 0===c?Rz(d,a):Sz(d,a,c)};FC.prototype.setLinearLowerLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Tz(c,a)};FC.prototype.setLinearUpperLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Uz(c,a)};FC.prototype.setAngularLowerLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Vz(c,a)};
FC.prototype.setAngularUpperLimit=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Wz(c,a)};FC.prototype.getFrameOffsetA=function(){return k(Xz(this.a),r)};FC.prototype.enableFeedback=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);Yz(c,a)};FC.prototype.getBreakingImpulseThreshold=function(){return Zz(this.a)};FC.prototype.setBreakingImpulseThreshold=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);$z(c,a)};
FC.prototype.getParam=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);return aA(d,a,c)};FC.prototype.setParam=function(a,c,d){var e=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);bA(e,a,c,d)};FC.prototype.__destroy__=function(){cA(this.a)};function GC(a){a&&"object"===typeof a&&(a=a.a);this.a=dA(a);h(GC)[this.a]=this}GC.prototype=Object.create(m.prototype);GC.prototype.constructor=GC;
GC.prototype.b=GC;GC.c={};b.btSphereShape=GC;GC.prototype.setMargin=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);eA(c,a)};GC.prototype.getMargin=function(){return fA(this.a)};GC.prototype.setLocalScaling=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);gA(c,a)};GC.prototype.getLocalScaling=function(){return k(hA(this.a),p)};GC.prototype.calculateLocalInertia=function(a,c){var d=this.a;a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);iA(d,a,c)};
GC.prototype.__destroy__=function(){jA(this.a)};function X(){throw"cannot construct a Face, no constructor in IDL";}X.prototype=Object.create(f.prototype);X.prototype.constructor=X;X.prototype.b=X;X.c={};b.Face=X;X.prototype.get_m_n=X.prototype.R=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(kA(c,a),Node)};X.prototype.set_m_n=X.prototype.aa=function(a,c){var d=this.a;YA();a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);lA(d,a,c)};
Object.defineProperty(X.prototype,"m_n",{get:X.prototype.R,set:X.prototype.aa});X.prototype.get_m_normal=X.prototype.Wb=function(){return k(mA(this.a),p)};X.prototype.set_m_normal=X.prototype.He=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);nA(c,a)};Object.defineProperty(X.prototype,"m_normal",{get:X.prototype.Wb,set:X.prototype.He});X.prototype.get_m_ra=X.prototype.dc=function(){return oA(this.a)};
X.prototype.set_m_ra=X.prototype.Pe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);pA(c,a)};Object.defineProperty(X.prototype,"m_ra",{get:X.prototype.dc,set:X.prototype.Pe});X.prototype.__destroy__=function(){qA(this.a)};function lC(){throw"cannot construct a tFaceArray, no constructor in IDL";}lC.prototype=Object.create(f.prototype);lC.prototype.constructor=lC;lC.prototype.b=lC;lC.c={};b.tFaceArray=lC;lC.prototype.size=lC.prototype.size=function(){return rA(this.a)};
lC.prototype.at=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);return k(sA(c,a),X)};lC.prototype.__destroy__=function(){tA(this.a)};function Z(a,c,d,e,g){a&&"object"===typeof a&&(a=a.a);c&&"object"===typeof c&&(c=c.a);d&&"object"===typeof d&&(d=d.a);e&&"object"===typeof e&&(e=e.a);g&&"object"===typeof g&&(g=g.a);this.a=uA(a,c,d,e,g);h(Z)[this.a]=this}Z.prototype=Object.create(f.prototype);Z.prototype.constructor=Z;Z.prototype.b=Z;Z.c={};b.LocalConvexResult=Z;
Z.prototype.get_m_hitCollisionObject=Z.prototype.xb=function(){return k(vA(this.a),q)};Z.prototype.set_m_hitCollisionObject=Z.prototype.ie=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);wA(c,a)};Object.defineProperty(Z.prototype,"m_hitCollisionObject",{get:Z.prototype.xb,set:Z.prototype.ie});Z.prototype.get_m_localShapeInfo=Z.prototype.Rb=function(){return k(xA(this.a),LB)};Z.prototype.set_m_localShapeInfo=Z.prototype.Ce=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);yA(c,a)};
Object.defineProperty(Z.prototype,"m_localShapeInfo",{get:Z.prototype.Rb,set:Z.prototype.Ce});Z.prototype.get_m_hitNormalLocal=Z.prototype.Bb=function(){return k(zA(this.a),p)};Z.prototype.set_m_hitNormalLocal=Z.prototype.me=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);AA(c,a)};Object.defineProperty(Z.prototype,"m_hitNormalLocal",{get:Z.prototype.Bb,set:Z.prototype.me});Z.prototype.get_m_hitPointLocal=Z.prototype.Db=function(){return k(BA(this.a),p)};
Z.prototype.set_m_hitPointLocal=Z.prototype.oe=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);CA(c,a)};Object.defineProperty(Z.prototype,"m_hitPointLocal",{get:Z.prototype.Db,set:Z.prototype.oe});Z.prototype.get_m_hitFraction=Z.prototype.yb=function(){return DA(this.a)};Z.prototype.set_m_hitFraction=Z.prototype.je=function(a){var c=this.a;a&&"object"===typeof a&&(a=a.a);EA(c,a)};Object.defineProperty(Z.prototype,"m_hitFraction",{get:Z.prototype.yb,set:Z.prototype.je});
Z.prototype.__destroy__=function(){FA(this.a)};(function(){function a(){b.BT_CONSTRAINT_ERP=GA();b.BT_CONSTRAINT_STOP_ERP=HA();b.BT_CONSTRAINT_CFM=IA();b.BT_CONSTRAINT_STOP_CFM=JA();b.PHY_FLOAT=KA();b.PHY_DOUBLE=LA();b.PHY_INTEGER=MA();b.PHY_SHORT=NA();b.PHY_FIXEDPOINT88=OA();b.PHY_UCHAR=PA()}Ta?a():Ra.unshift(a)})();this.Ammo=b;


  return Ammo.ready
}
);
})();
if (true)
      module.exports = Ammo;
    else {}
    

/***/ }),

/***/ 578:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACESFilmicToneMapping": () => (/* binding */ ACESFilmicToneMapping),
/* harmony export */   "AddEquation": () => (/* binding */ AddEquation),
/* harmony export */   "AddOperation": () => (/* binding */ AddOperation),
/* harmony export */   "AdditiveAnimationBlendMode": () => (/* binding */ AdditiveAnimationBlendMode),
/* harmony export */   "AdditiveBlending": () => (/* binding */ AdditiveBlending),
/* harmony export */   "AlphaFormat": () => (/* binding */ AlphaFormat),
/* harmony export */   "AlwaysDepth": () => (/* binding */ AlwaysDepth),
/* harmony export */   "AlwaysStencilFunc": () => (/* binding */ AlwaysStencilFunc),
/* harmony export */   "AmbientLight": () => (/* binding */ AmbientLight),
/* harmony export */   "AmbientLightProbe": () => (/* binding */ AmbientLightProbe),
/* harmony export */   "AnimationClip": () => (/* binding */ AnimationClip),
/* harmony export */   "AnimationLoader": () => (/* binding */ AnimationLoader),
/* harmony export */   "AnimationMixer": () => (/* binding */ AnimationMixer),
/* harmony export */   "AnimationObjectGroup": () => (/* binding */ AnimationObjectGroup),
/* harmony export */   "AnimationUtils": () => (/* binding */ AnimationUtils),
/* harmony export */   "ArcCurve": () => (/* binding */ ArcCurve),
/* harmony export */   "ArrayCamera": () => (/* binding */ ArrayCamera),
/* harmony export */   "ArrowHelper": () => (/* binding */ ArrowHelper),
/* harmony export */   "Audio": () => (/* binding */ Audio),
/* harmony export */   "AudioAnalyser": () => (/* binding */ AudioAnalyser),
/* harmony export */   "AudioContext": () => (/* binding */ AudioContext),
/* harmony export */   "AudioListener": () => (/* binding */ AudioListener),
/* harmony export */   "AudioLoader": () => (/* binding */ AudioLoader),
/* harmony export */   "AxesHelper": () => (/* binding */ AxesHelper),
/* harmony export */   "AxisHelper": () => (/* binding */ AxisHelper),
/* harmony export */   "BackSide": () => (/* binding */ BackSide),
/* harmony export */   "BasicDepthPacking": () => (/* binding */ BasicDepthPacking),
/* harmony export */   "BasicShadowMap": () => (/* binding */ BasicShadowMap),
/* harmony export */   "BinaryTextureLoader": () => (/* binding */ BinaryTextureLoader),
/* harmony export */   "Bone": () => (/* binding */ Bone),
/* harmony export */   "BooleanKeyframeTrack": () => (/* binding */ BooleanKeyframeTrack),
/* harmony export */   "BoundingBoxHelper": () => (/* binding */ BoundingBoxHelper),
/* harmony export */   "Box2": () => (/* binding */ Box2),
/* harmony export */   "Box3": () => (/* binding */ Box3),
/* harmony export */   "Box3Helper": () => (/* binding */ Box3Helper),
/* harmony export */   "BoxBufferGeometry": () => (/* binding */ BoxGeometry),
/* harmony export */   "BoxGeometry": () => (/* binding */ BoxGeometry),
/* harmony export */   "BoxHelper": () => (/* binding */ BoxHelper),
/* harmony export */   "BufferAttribute": () => (/* binding */ BufferAttribute),
/* harmony export */   "BufferGeometry": () => (/* binding */ BufferGeometry),
/* harmony export */   "BufferGeometryLoader": () => (/* binding */ BufferGeometryLoader),
/* harmony export */   "ByteType": () => (/* binding */ ByteType),
/* harmony export */   "Cache": () => (/* binding */ Cache),
/* harmony export */   "Camera": () => (/* binding */ Camera),
/* harmony export */   "CameraHelper": () => (/* binding */ CameraHelper),
/* harmony export */   "CanvasRenderer": () => (/* binding */ CanvasRenderer),
/* harmony export */   "CanvasTexture": () => (/* binding */ CanvasTexture),
/* harmony export */   "CatmullRomCurve3": () => (/* binding */ CatmullRomCurve3),
/* harmony export */   "CineonToneMapping": () => (/* binding */ CineonToneMapping),
/* harmony export */   "CircleBufferGeometry": () => (/* binding */ CircleGeometry),
/* harmony export */   "CircleGeometry": () => (/* binding */ CircleGeometry),
/* harmony export */   "ClampToEdgeWrapping": () => (/* binding */ ClampToEdgeWrapping),
/* harmony export */   "Clock": () => (/* binding */ Clock),
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "ColorKeyframeTrack": () => (/* binding */ ColorKeyframeTrack),
/* harmony export */   "CompressedTexture": () => (/* binding */ CompressedTexture),
/* harmony export */   "CompressedTextureLoader": () => (/* binding */ CompressedTextureLoader),
/* harmony export */   "ConeBufferGeometry": () => (/* binding */ ConeGeometry),
/* harmony export */   "ConeGeometry": () => (/* binding */ ConeGeometry),
/* harmony export */   "CubeCamera": () => (/* binding */ CubeCamera),
/* harmony export */   "CubeReflectionMapping": () => (/* binding */ CubeReflectionMapping),
/* harmony export */   "CubeRefractionMapping": () => (/* binding */ CubeRefractionMapping),
/* harmony export */   "CubeTexture": () => (/* binding */ CubeTexture),
/* harmony export */   "CubeTextureLoader": () => (/* binding */ CubeTextureLoader),
/* harmony export */   "CubeUVReflectionMapping": () => (/* binding */ CubeUVReflectionMapping),
/* harmony export */   "CubeUVRefractionMapping": () => (/* binding */ CubeUVRefractionMapping),
/* harmony export */   "CubicBezierCurve": () => (/* binding */ CubicBezierCurve),
/* harmony export */   "CubicBezierCurve3": () => (/* binding */ CubicBezierCurve3),
/* harmony export */   "CubicInterpolant": () => (/* binding */ CubicInterpolant),
/* harmony export */   "CullFaceBack": () => (/* binding */ CullFaceBack),
/* harmony export */   "CullFaceFront": () => (/* binding */ CullFaceFront),
/* harmony export */   "CullFaceFrontBack": () => (/* binding */ CullFaceFrontBack),
/* harmony export */   "CullFaceNone": () => (/* binding */ CullFaceNone),
/* harmony export */   "Curve": () => (/* binding */ Curve),
/* harmony export */   "CurvePath": () => (/* binding */ CurvePath),
/* harmony export */   "CustomBlending": () => (/* binding */ CustomBlending),
/* harmony export */   "CustomToneMapping": () => (/* binding */ CustomToneMapping),
/* harmony export */   "CylinderBufferGeometry": () => (/* binding */ CylinderGeometry),
/* harmony export */   "CylinderGeometry": () => (/* binding */ CylinderGeometry),
/* harmony export */   "Cylindrical": () => (/* binding */ Cylindrical),
/* harmony export */   "DataTexture": () => (/* binding */ DataTexture),
/* harmony export */   "DataTexture2DArray": () => (/* binding */ DataTexture2DArray),
/* harmony export */   "DataTexture3D": () => (/* binding */ DataTexture3D),
/* harmony export */   "DataTextureLoader": () => (/* binding */ DataTextureLoader),
/* harmony export */   "DataUtils": () => (/* binding */ DataUtils),
/* harmony export */   "DecrementStencilOp": () => (/* binding */ DecrementStencilOp),
/* harmony export */   "DecrementWrapStencilOp": () => (/* binding */ DecrementWrapStencilOp),
/* harmony export */   "DefaultLoadingManager": () => (/* binding */ DefaultLoadingManager),
/* harmony export */   "DepthFormat": () => (/* binding */ DepthFormat),
/* harmony export */   "DepthStencilFormat": () => (/* binding */ DepthStencilFormat),
/* harmony export */   "DepthTexture": () => (/* binding */ DepthTexture),
/* harmony export */   "DirectionalLight": () => (/* binding */ DirectionalLight),
/* harmony export */   "DirectionalLightHelper": () => (/* binding */ DirectionalLightHelper),
/* harmony export */   "DiscreteInterpolant": () => (/* binding */ DiscreteInterpolant),
/* harmony export */   "DodecahedronBufferGeometry": () => (/* binding */ DodecahedronGeometry),
/* harmony export */   "DodecahedronGeometry": () => (/* binding */ DodecahedronGeometry),
/* harmony export */   "DoubleSide": () => (/* binding */ DoubleSide),
/* harmony export */   "DstAlphaFactor": () => (/* binding */ DstAlphaFactor),
/* harmony export */   "DstColorFactor": () => (/* binding */ DstColorFactor),
/* harmony export */   "DynamicBufferAttribute": () => (/* binding */ DynamicBufferAttribute),
/* harmony export */   "DynamicCopyUsage": () => (/* binding */ DynamicCopyUsage),
/* harmony export */   "DynamicDrawUsage": () => (/* binding */ DynamicDrawUsage),
/* harmony export */   "DynamicReadUsage": () => (/* binding */ DynamicReadUsage),
/* harmony export */   "EdgesGeometry": () => (/* binding */ EdgesGeometry),
/* harmony export */   "EdgesHelper": () => (/* binding */ EdgesHelper),
/* harmony export */   "EllipseCurve": () => (/* binding */ EllipseCurve),
/* harmony export */   "EqualDepth": () => (/* binding */ EqualDepth),
/* harmony export */   "EqualStencilFunc": () => (/* binding */ EqualStencilFunc),
/* harmony export */   "EquirectangularReflectionMapping": () => (/* binding */ EquirectangularReflectionMapping),
/* harmony export */   "EquirectangularRefractionMapping": () => (/* binding */ EquirectangularRefractionMapping),
/* harmony export */   "Euler": () => (/* binding */ Euler),
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher),
/* harmony export */   "ExtrudeBufferGeometry": () => (/* binding */ ExtrudeGeometry),
/* harmony export */   "ExtrudeGeometry": () => (/* binding */ ExtrudeGeometry),
/* harmony export */   "FaceColors": () => (/* binding */ FaceColors),
/* harmony export */   "FileLoader": () => (/* binding */ FileLoader),
/* harmony export */   "FlatShading": () => (/* binding */ FlatShading),
/* harmony export */   "Float16BufferAttribute": () => (/* binding */ Float16BufferAttribute),
/* harmony export */   "Float32Attribute": () => (/* binding */ Float32Attribute),
/* harmony export */   "Float32BufferAttribute": () => (/* binding */ Float32BufferAttribute),
/* harmony export */   "Float64Attribute": () => (/* binding */ Float64Attribute),
/* harmony export */   "Float64BufferAttribute": () => (/* binding */ Float64BufferAttribute),
/* harmony export */   "FloatType": () => (/* binding */ FloatType),
/* harmony export */   "Fog": () => (/* binding */ Fog),
/* harmony export */   "FogExp2": () => (/* binding */ FogExp2),
/* harmony export */   "Font": () => (/* binding */ Font),
/* harmony export */   "FontLoader": () => (/* binding */ FontLoader),
/* harmony export */   "FrontSide": () => (/* binding */ FrontSide),
/* harmony export */   "Frustum": () => (/* binding */ Frustum),
/* harmony export */   "GLBufferAttribute": () => (/* binding */ GLBufferAttribute),
/* harmony export */   "GLSL1": () => (/* binding */ GLSL1),
/* harmony export */   "GLSL3": () => (/* binding */ GLSL3),
/* harmony export */   "GammaEncoding": () => (/* binding */ GammaEncoding),
/* harmony export */   "GreaterDepth": () => (/* binding */ GreaterDepth),
/* harmony export */   "GreaterEqualDepth": () => (/* binding */ GreaterEqualDepth),
/* harmony export */   "GreaterEqualStencilFunc": () => (/* binding */ GreaterEqualStencilFunc),
/* harmony export */   "GreaterStencilFunc": () => (/* binding */ GreaterStencilFunc),
/* harmony export */   "GridHelper": () => (/* binding */ GridHelper),
/* harmony export */   "Group": () => (/* binding */ Group),
/* harmony export */   "HalfFloatType": () => (/* binding */ HalfFloatType),
/* harmony export */   "HemisphereLight": () => (/* binding */ HemisphereLight),
/* harmony export */   "HemisphereLightHelper": () => (/* binding */ HemisphereLightHelper),
/* harmony export */   "HemisphereLightProbe": () => (/* binding */ HemisphereLightProbe),
/* harmony export */   "IcosahedronBufferGeometry": () => (/* binding */ IcosahedronGeometry),
/* harmony export */   "IcosahedronGeometry": () => (/* binding */ IcosahedronGeometry),
/* harmony export */   "ImageBitmapLoader": () => (/* binding */ ImageBitmapLoader),
/* harmony export */   "ImageLoader": () => (/* binding */ ImageLoader),
/* harmony export */   "ImageUtils": () => (/* binding */ ImageUtils),
/* harmony export */   "ImmediateRenderObject": () => (/* binding */ ImmediateRenderObject),
/* harmony export */   "IncrementStencilOp": () => (/* binding */ IncrementStencilOp),
/* harmony export */   "IncrementWrapStencilOp": () => (/* binding */ IncrementWrapStencilOp),
/* harmony export */   "InstancedBufferAttribute": () => (/* binding */ InstancedBufferAttribute),
/* harmony export */   "InstancedBufferGeometry": () => (/* binding */ InstancedBufferGeometry),
/* harmony export */   "InstancedInterleavedBuffer": () => (/* binding */ InstancedInterleavedBuffer),
/* harmony export */   "InstancedMesh": () => (/* binding */ InstancedMesh),
/* harmony export */   "Int16Attribute": () => (/* binding */ Int16Attribute),
/* harmony export */   "Int16BufferAttribute": () => (/* binding */ Int16BufferAttribute),
/* harmony export */   "Int32Attribute": () => (/* binding */ Int32Attribute),
/* harmony export */   "Int32BufferAttribute": () => (/* binding */ Int32BufferAttribute),
/* harmony export */   "Int8Attribute": () => (/* binding */ Int8Attribute),
/* harmony export */   "Int8BufferAttribute": () => (/* binding */ Int8BufferAttribute),
/* harmony export */   "IntType": () => (/* binding */ IntType),
/* harmony export */   "InterleavedBuffer": () => (/* binding */ InterleavedBuffer),
/* harmony export */   "InterleavedBufferAttribute": () => (/* binding */ InterleavedBufferAttribute),
/* harmony export */   "Interpolant": () => (/* binding */ Interpolant),
/* harmony export */   "InterpolateDiscrete": () => (/* binding */ InterpolateDiscrete),
/* harmony export */   "InterpolateLinear": () => (/* binding */ InterpolateLinear),
/* harmony export */   "InterpolateSmooth": () => (/* binding */ InterpolateSmooth),
/* harmony export */   "InvertStencilOp": () => (/* binding */ InvertStencilOp),
/* harmony export */   "JSONLoader": () => (/* binding */ JSONLoader),
/* harmony export */   "KeepStencilOp": () => (/* binding */ KeepStencilOp),
/* harmony export */   "KeyframeTrack": () => (/* binding */ KeyframeTrack),
/* harmony export */   "LOD": () => (/* binding */ LOD),
/* harmony export */   "LatheBufferGeometry": () => (/* binding */ LatheGeometry),
/* harmony export */   "LatheGeometry": () => (/* binding */ LatheGeometry),
/* harmony export */   "Layers": () => (/* binding */ Layers),
/* harmony export */   "LensFlare": () => (/* binding */ LensFlare),
/* harmony export */   "LessDepth": () => (/* binding */ LessDepth),
/* harmony export */   "LessEqualDepth": () => (/* binding */ LessEqualDepth),
/* harmony export */   "LessEqualStencilFunc": () => (/* binding */ LessEqualStencilFunc),
/* harmony export */   "LessStencilFunc": () => (/* binding */ LessStencilFunc),
/* harmony export */   "Light": () => (/* binding */ Light),
/* harmony export */   "LightProbe": () => (/* binding */ LightProbe),
/* harmony export */   "Line": () => (/* binding */ Line),
/* harmony export */   "Line3": () => (/* binding */ Line3),
/* harmony export */   "LineBasicMaterial": () => (/* binding */ LineBasicMaterial),
/* harmony export */   "LineCurve": () => (/* binding */ LineCurve),
/* harmony export */   "LineCurve3": () => (/* binding */ LineCurve3),
/* harmony export */   "LineDashedMaterial": () => (/* binding */ LineDashedMaterial),
/* harmony export */   "LineLoop": () => (/* binding */ LineLoop),
/* harmony export */   "LinePieces": () => (/* binding */ LinePieces),
/* harmony export */   "LineSegments": () => (/* binding */ LineSegments),
/* harmony export */   "LineStrip": () => (/* binding */ LineStrip),
/* harmony export */   "LinearEncoding": () => (/* binding */ LinearEncoding),
/* harmony export */   "LinearFilter": () => (/* binding */ LinearFilter),
/* harmony export */   "LinearInterpolant": () => (/* binding */ LinearInterpolant),
/* harmony export */   "LinearMipMapLinearFilter": () => (/* binding */ LinearMipMapLinearFilter),
/* harmony export */   "LinearMipMapNearestFilter": () => (/* binding */ LinearMipMapNearestFilter),
/* harmony export */   "LinearMipmapLinearFilter": () => (/* binding */ LinearMipmapLinearFilter),
/* harmony export */   "LinearMipmapNearestFilter": () => (/* binding */ LinearMipmapNearestFilter),
/* harmony export */   "LinearToneMapping": () => (/* binding */ LinearToneMapping),
/* harmony export */   "Loader": () => (/* binding */ Loader),
/* harmony export */   "LoaderUtils": () => (/* binding */ LoaderUtils),
/* harmony export */   "LoadingManager": () => (/* binding */ LoadingManager),
/* harmony export */   "LogLuvEncoding": () => (/* binding */ LogLuvEncoding),
/* harmony export */   "LoopOnce": () => (/* binding */ LoopOnce),
/* harmony export */   "LoopPingPong": () => (/* binding */ LoopPingPong),
/* harmony export */   "LoopRepeat": () => (/* binding */ LoopRepeat),
/* harmony export */   "LuminanceAlphaFormat": () => (/* binding */ LuminanceAlphaFormat),
/* harmony export */   "LuminanceFormat": () => (/* binding */ LuminanceFormat),
/* harmony export */   "MOUSE": () => (/* binding */ MOUSE),
/* harmony export */   "Material": () => (/* binding */ Material),
/* harmony export */   "MaterialLoader": () => (/* binding */ MaterialLoader),
/* harmony export */   "Math": () => (/* binding */ MathUtils),
/* harmony export */   "MathUtils": () => (/* binding */ MathUtils),
/* harmony export */   "Matrix3": () => (/* binding */ Matrix3),
/* harmony export */   "Matrix4": () => (/* binding */ Matrix4),
/* harmony export */   "MaxEquation": () => (/* binding */ MaxEquation),
/* harmony export */   "Mesh": () => (/* binding */ Mesh),
/* harmony export */   "MeshBasicMaterial": () => (/* binding */ MeshBasicMaterial),
/* harmony export */   "MeshDepthMaterial": () => (/* binding */ MeshDepthMaterial),
/* harmony export */   "MeshDistanceMaterial": () => (/* binding */ MeshDistanceMaterial),
/* harmony export */   "MeshFaceMaterial": () => (/* binding */ MeshFaceMaterial),
/* harmony export */   "MeshLambertMaterial": () => (/* binding */ MeshLambertMaterial),
/* harmony export */   "MeshMatcapMaterial": () => (/* binding */ MeshMatcapMaterial),
/* harmony export */   "MeshNormalMaterial": () => (/* binding */ MeshNormalMaterial),
/* harmony export */   "MeshPhongMaterial": () => (/* binding */ MeshPhongMaterial),
/* harmony export */   "MeshPhysicalMaterial": () => (/* binding */ MeshPhysicalMaterial),
/* harmony export */   "MeshStandardMaterial": () => (/* binding */ MeshStandardMaterial),
/* harmony export */   "MeshToonMaterial": () => (/* binding */ MeshToonMaterial),
/* harmony export */   "MinEquation": () => (/* binding */ MinEquation),
/* harmony export */   "MirroredRepeatWrapping": () => (/* binding */ MirroredRepeatWrapping),
/* harmony export */   "MixOperation": () => (/* binding */ MixOperation),
/* harmony export */   "MultiMaterial": () => (/* binding */ MultiMaterial),
/* harmony export */   "MultiplyBlending": () => (/* binding */ MultiplyBlending),
/* harmony export */   "MultiplyOperation": () => (/* binding */ MultiplyOperation),
/* harmony export */   "NearestFilter": () => (/* binding */ NearestFilter),
/* harmony export */   "NearestMipMapLinearFilter": () => (/* binding */ NearestMipMapLinearFilter),
/* harmony export */   "NearestMipMapNearestFilter": () => (/* binding */ NearestMipMapNearestFilter),
/* harmony export */   "NearestMipmapLinearFilter": () => (/* binding */ NearestMipmapLinearFilter),
/* harmony export */   "NearestMipmapNearestFilter": () => (/* binding */ NearestMipmapNearestFilter),
/* harmony export */   "NeverDepth": () => (/* binding */ NeverDepth),
/* harmony export */   "NeverStencilFunc": () => (/* binding */ NeverStencilFunc),
/* harmony export */   "NoBlending": () => (/* binding */ NoBlending),
/* harmony export */   "NoColors": () => (/* binding */ NoColors),
/* harmony export */   "NoToneMapping": () => (/* binding */ NoToneMapping),
/* harmony export */   "NormalAnimationBlendMode": () => (/* binding */ NormalAnimationBlendMode),
/* harmony export */   "NormalBlending": () => (/* binding */ NormalBlending),
/* harmony export */   "NotEqualDepth": () => (/* binding */ NotEqualDepth),
/* harmony export */   "NotEqualStencilFunc": () => (/* binding */ NotEqualStencilFunc),
/* harmony export */   "NumberKeyframeTrack": () => (/* binding */ NumberKeyframeTrack),
/* harmony export */   "Object3D": () => (/* binding */ Object3D),
/* harmony export */   "ObjectLoader": () => (/* binding */ ObjectLoader),
/* harmony export */   "ObjectSpaceNormalMap": () => (/* binding */ ObjectSpaceNormalMap),
/* harmony export */   "OctahedronBufferGeometry": () => (/* binding */ OctahedronGeometry),
/* harmony export */   "OctahedronGeometry": () => (/* binding */ OctahedronGeometry),
/* harmony export */   "OneFactor": () => (/* binding */ OneFactor),
/* harmony export */   "OneMinusDstAlphaFactor": () => (/* binding */ OneMinusDstAlphaFactor),
/* harmony export */   "OneMinusDstColorFactor": () => (/* binding */ OneMinusDstColorFactor),
/* harmony export */   "OneMinusSrcAlphaFactor": () => (/* binding */ OneMinusSrcAlphaFactor),
/* harmony export */   "OneMinusSrcColorFactor": () => (/* binding */ OneMinusSrcColorFactor),
/* harmony export */   "OrthographicCamera": () => (/* binding */ OrthographicCamera),
/* harmony export */   "PCFShadowMap": () => (/* binding */ PCFShadowMap),
/* harmony export */   "PCFSoftShadowMap": () => (/* binding */ PCFSoftShadowMap),
/* harmony export */   "PMREMGenerator": () => (/* binding */ PMREMGenerator),
/* harmony export */   "ParametricGeometry": () => (/* binding */ ParametricGeometry),
/* harmony export */   "Particle": () => (/* binding */ Particle),
/* harmony export */   "ParticleBasicMaterial": () => (/* binding */ ParticleBasicMaterial),
/* harmony export */   "ParticleSystem": () => (/* binding */ ParticleSystem),
/* harmony export */   "ParticleSystemMaterial": () => (/* binding */ ParticleSystemMaterial),
/* harmony export */   "Path": () => (/* binding */ Path),
/* harmony export */   "PerspectiveCamera": () => (/* binding */ PerspectiveCamera),
/* harmony export */   "Plane": () => (/* binding */ Plane),
/* harmony export */   "PlaneBufferGeometry": () => (/* binding */ PlaneGeometry),
/* harmony export */   "PlaneGeometry": () => (/* binding */ PlaneGeometry),
/* harmony export */   "PlaneHelper": () => (/* binding */ PlaneHelper),
/* harmony export */   "PointCloud": () => (/* binding */ PointCloud),
/* harmony export */   "PointCloudMaterial": () => (/* binding */ PointCloudMaterial),
/* harmony export */   "PointLight": () => (/* binding */ PointLight),
/* harmony export */   "PointLightHelper": () => (/* binding */ PointLightHelper),
/* harmony export */   "Points": () => (/* binding */ Points),
/* harmony export */   "PointsMaterial": () => (/* binding */ PointsMaterial),
/* harmony export */   "PolarGridHelper": () => (/* binding */ PolarGridHelper),
/* harmony export */   "PolyhedronBufferGeometry": () => (/* binding */ PolyhedronGeometry),
/* harmony export */   "PolyhedronGeometry": () => (/* binding */ PolyhedronGeometry),
/* harmony export */   "PositionalAudio": () => (/* binding */ PositionalAudio),
/* harmony export */   "PropertyBinding": () => (/* binding */ PropertyBinding),
/* harmony export */   "PropertyMixer": () => (/* binding */ PropertyMixer),
/* harmony export */   "QuadraticBezierCurve": () => (/* binding */ QuadraticBezierCurve),
/* harmony export */   "QuadraticBezierCurve3": () => (/* binding */ QuadraticBezierCurve3),
/* harmony export */   "Quaternion": () => (/* binding */ Quaternion),
/* harmony export */   "QuaternionKeyframeTrack": () => (/* binding */ QuaternionKeyframeTrack),
/* harmony export */   "QuaternionLinearInterpolant": () => (/* binding */ QuaternionLinearInterpolant),
/* harmony export */   "REVISION": () => (/* binding */ REVISION),
/* harmony export */   "RGBADepthPacking": () => (/* binding */ RGBADepthPacking),
/* harmony export */   "RGBAFormat": () => (/* binding */ RGBAFormat),
/* harmony export */   "RGBAIntegerFormat": () => (/* binding */ RGBAIntegerFormat),
/* harmony export */   "RGBA_ASTC_10x10_Format": () => (/* binding */ RGBA_ASTC_10x10_Format),
/* harmony export */   "RGBA_ASTC_10x5_Format": () => (/* binding */ RGBA_ASTC_10x5_Format),
/* harmony export */   "RGBA_ASTC_10x6_Format": () => (/* binding */ RGBA_ASTC_10x6_Format),
/* harmony export */   "RGBA_ASTC_10x8_Format": () => (/* binding */ RGBA_ASTC_10x8_Format),
/* harmony export */   "RGBA_ASTC_12x10_Format": () => (/* binding */ RGBA_ASTC_12x10_Format),
/* harmony export */   "RGBA_ASTC_12x12_Format": () => (/* binding */ RGBA_ASTC_12x12_Format),
/* harmony export */   "RGBA_ASTC_4x4_Format": () => (/* binding */ RGBA_ASTC_4x4_Format),
/* harmony export */   "RGBA_ASTC_5x4_Format": () => (/* binding */ RGBA_ASTC_5x4_Format),
/* harmony export */   "RGBA_ASTC_5x5_Format": () => (/* binding */ RGBA_ASTC_5x5_Format),
/* harmony export */   "RGBA_ASTC_6x5_Format": () => (/* binding */ RGBA_ASTC_6x5_Format),
/* harmony export */   "RGBA_ASTC_6x6_Format": () => (/* binding */ RGBA_ASTC_6x6_Format),
/* harmony export */   "RGBA_ASTC_8x5_Format": () => (/* binding */ RGBA_ASTC_8x5_Format),
/* harmony export */   "RGBA_ASTC_8x6_Format": () => (/* binding */ RGBA_ASTC_8x6_Format),
/* harmony export */   "RGBA_ASTC_8x8_Format": () => (/* binding */ RGBA_ASTC_8x8_Format),
/* harmony export */   "RGBA_BPTC_Format": () => (/* binding */ RGBA_BPTC_Format),
/* harmony export */   "RGBA_ETC2_EAC_Format": () => (/* binding */ RGBA_ETC2_EAC_Format),
/* harmony export */   "RGBA_PVRTC_2BPPV1_Format": () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),
/* harmony export */   "RGBA_PVRTC_4BPPV1_Format": () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),
/* harmony export */   "RGBA_S3TC_DXT1_Format": () => (/* binding */ RGBA_S3TC_DXT1_Format),
/* harmony export */   "RGBA_S3TC_DXT3_Format": () => (/* binding */ RGBA_S3TC_DXT3_Format),
/* harmony export */   "RGBA_S3TC_DXT5_Format": () => (/* binding */ RGBA_S3TC_DXT5_Format),
/* harmony export */   "RGBDEncoding": () => (/* binding */ RGBDEncoding),
/* harmony export */   "RGBEEncoding": () => (/* binding */ RGBEEncoding),
/* harmony export */   "RGBEFormat": () => (/* binding */ RGBEFormat),
/* harmony export */   "RGBFormat": () => (/* binding */ RGBFormat),
/* harmony export */   "RGBIntegerFormat": () => (/* binding */ RGBIntegerFormat),
/* harmony export */   "RGBM16Encoding": () => (/* binding */ RGBM16Encoding),
/* harmony export */   "RGBM7Encoding": () => (/* binding */ RGBM7Encoding),
/* harmony export */   "RGB_ETC1_Format": () => (/* binding */ RGB_ETC1_Format),
/* harmony export */   "RGB_ETC2_Format": () => (/* binding */ RGB_ETC2_Format),
/* harmony export */   "RGB_PVRTC_2BPPV1_Format": () => (/* binding */ RGB_PVRTC_2BPPV1_Format),
/* harmony export */   "RGB_PVRTC_4BPPV1_Format": () => (/* binding */ RGB_PVRTC_4BPPV1_Format),
/* harmony export */   "RGB_S3TC_DXT1_Format": () => (/* binding */ RGB_S3TC_DXT1_Format),
/* harmony export */   "RGFormat": () => (/* binding */ RGFormat),
/* harmony export */   "RGIntegerFormat": () => (/* binding */ RGIntegerFormat),
/* harmony export */   "RawShaderMaterial": () => (/* binding */ RawShaderMaterial),
/* harmony export */   "Ray": () => (/* binding */ Ray),
/* harmony export */   "Raycaster": () => (/* binding */ Raycaster),
/* harmony export */   "RectAreaLight": () => (/* binding */ RectAreaLight),
/* harmony export */   "RedFormat": () => (/* binding */ RedFormat),
/* harmony export */   "RedIntegerFormat": () => (/* binding */ RedIntegerFormat),
/* harmony export */   "ReinhardToneMapping": () => (/* binding */ ReinhardToneMapping),
/* harmony export */   "RepeatWrapping": () => (/* binding */ RepeatWrapping),
/* harmony export */   "ReplaceStencilOp": () => (/* binding */ ReplaceStencilOp),
/* harmony export */   "ReverseSubtractEquation": () => (/* binding */ ReverseSubtractEquation),
/* harmony export */   "RingBufferGeometry": () => (/* binding */ RingGeometry),
/* harmony export */   "RingGeometry": () => (/* binding */ RingGeometry),
/* harmony export */   "SRGB8_ALPHA8_ASTC_10x10_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x10_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_10x5_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x5_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_10x6_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x6_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_10x8_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x8_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_12x10_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_12x10_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_12x12_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_12x12_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_4x4_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_4x4_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_5x4_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_5x4_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_5x5_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_5x5_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_6x5_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_6x5_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_6x6_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_6x6_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_8x5_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x5_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_8x6_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x6_Format),
/* harmony export */   "SRGB8_ALPHA8_ASTC_8x8_Format": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x8_Format),
/* harmony export */   "Scene": () => (/* binding */ Scene),
/* harmony export */   "SceneUtils": () => (/* binding */ SceneUtils),
/* harmony export */   "ShaderChunk": () => (/* binding */ ShaderChunk),
/* harmony export */   "ShaderLib": () => (/* binding */ ShaderLib),
/* harmony export */   "ShaderMaterial": () => (/* binding */ ShaderMaterial),
/* harmony export */   "ShadowMaterial": () => (/* binding */ ShadowMaterial),
/* harmony export */   "Shape": () => (/* binding */ Shape),
/* harmony export */   "ShapeBufferGeometry": () => (/* binding */ ShapeGeometry),
/* harmony export */   "ShapeGeometry": () => (/* binding */ ShapeGeometry),
/* harmony export */   "ShapePath": () => (/* binding */ ShapePath),
/* harmony export */   "ShapeUtils": () => (/* binding */ ShapeUtils),
/* harmony export */   "ShortType": () => (/* binding */ ShortType),
/* harmony export */   "Skeleton": () => (/* binding */ Skeleton),
/* harmony export */   "SkeletonHelper": () => (/* binding */ SkeletonHelper),
/* harmony export */   "SkinnedMesh": () => (/* binding */ SkinnedMesh),
/* harmony export */   "SmoothShading": () => (/* binding */ SmoothShading),
/* harmony export */   "Sphere": () => (/* binding */ Sphere),
/* harmony export */   "SphereBufferGeometry": () => (/* binding */ SphereGeometry),
/* harmony export */   "SphereGeometry": () => (/* binding */ SphereGeometry),
/* harmony export */   "Spherical": () => (/* binding */ Spherical),
/* harmony export */   "SphericalHarmonics3": () => (/* binding */ SphericalHarmonics3),
/* harmony export */   "SplineCurve": () => (/* binding */ SplineCurve),
/* harmony export */   "SpotLight": () => (/* binding */ SpotLight),
/* harmony export */   "SpotLightHelper": () => (/* binding */ SpotLightHelper),
/* harmony export */   "Sprite": () => (/* binding */ Sprite),
/* harmony export */   "SpriteMaterial": () => (/* binding */ SpriteMaterial),
/* harmony export */   "SrcAlphaFactor": () => (/* binding */ SrcAlphaFactor),
/* harmony export */   "SrcAlphaSaturateFactor": () => (/* binding */ SrcAlphaSaturateFactor),
/* harmony export */   "SrcColorFactor": () => (/* binding */ SrcColorFactor),
/* harmony export */   "StaticCopyUsage": () => (/* binding */ StaticCopyUsage),
/* harmony export */   "StaticDrawUsage": () => (/* binding */ StaticDrawUsage),
/* harmony export */   "StaticReadUsage": () => (/* binding */ StaticReadUsage),
/* harmony export */   "StereoCamera": () => (/* binding */ StereoCamera),
/* harmony export */   "StreamCopyUsage": () => (/* binding */ StreamCopyUsage),
/* harmony export */   "StreamDrawUsage": () => (/* binding */ StreamDrawUsage),
/* harmony export */   "StreamReadUsage": () => (/* binding */ StreamReadUsage),
/* harmony export */   "StringKeyframeTrack": () => (/* binding */ StringKeyframeTrack),
/* harmony export */   "SubtractEquation": () => (/* binding */ SubtractEquation),
/* harmony export */   "SubtractiveBlending": () => (/* binding */ SubtractiveBlending),
/* harmony export */   "TOUCH": () => (/* binding */ TOUCH),
/* harmony export */   "TangentSpaceNormalMap": () => (/* binding */ TangentSpaceNormalMap),
/* harmony export */   "TetrahedronBufferGeometry": () => (/* binding */ TetrahedronGeometry),
/* harmony export */   "TetrahedronGeometry": () => (/* binding */ TetrahedronGeometry),
/* harmony export */   "TextGeometry": () => (/* binding */ TextGeometry),
/* harmony export */   "Texture": () => (/* binding */ Texture),
/* harmony export */   "TextureLoader": () => (/* binding */ TextureLoader),
/* harmony export */   "TorusBufferGeometry": () => (/* binding */ TorusGeometry),
/* harmony export */   "TorusGeometry": () => (/* binding */ TorusGeometry),
/* harmony export */   "TorusKnotBufferGeometry": () => (/* binding */ TorusKnotGeometry),
/* harmony export */   "TorusKnotGeometry": () => (/* binding */ TorusKnotGeometry),
/* harmony export */   "Triangle": () => (/* binding */ Triangle),
/* harmony export */   "TriangleFanDrawMode": () => (/* binding */ TriangleFanDrawMode),
/* harmony export */   "TriangleStripDrawMode": () => (/* binding */ TriangleStripDrawMode),
/* harmony export */   "TrianglesDrawMode": () => (/* binding */ TrianglesDrawMode),
/* harmony export */   "TubeBufferGeometry": () => (/* binding */ TubeGeometry),
/* harmony export */   "TubeGeometry": () => (/* binding */ TubeGeometry),
/* harmony export */   "UVMapping": () => (/* binding */ UVMapping),
/* harmony export */   "Uint16Attribute": () => (/* binding */ Uint16Attribute),
/* harmony export */   "Uint16BufferAttribute": () => (/* binding */ Uint16BufferAttribute),
/* harmony export */   "Uint32Attribute": () => (/* binding */ Uint32Attribute),
/* harmony export */   "Uint32BufferAttribute": () => (/* binding */ Uint32BufferAttribute),
/* harmony export */   "Uint8Attribute": () => (/* binding */ Uint8Attribute),
/* harmony export */   "Uint8BufferAttribute": () => (/* binding */ Uint8BufferAttribute),
/* harmony export */   "Uint8ClampedAttribute": () => (/* binding */ Uint8ClampedAttribute),
/* harmony export */   "Uint8ClampedBufferAttribute": () => (/* binding */ Uint8ClampedBufferAttribute),
/* harmony export */   "Uniform": () => (/* binding */ Uniform),
/* harmony export */   "UniformsLib": () => (/* binding */ UniformsLib),
/* harmony export */   "UniformsUtils": () => (/* binding */ UniformsUtils),
/* harmony export */   "UnsignedByteType": () => (/* binding */ UnsignedByteType),
/* harmony export */   "UnsignedInt248Type": () => (/* binding */ UnsignedInt248Type),
/* harmony export */   "UnsignedIntType": () => (/* binding */ UnsignedIntType),
/* harmony export */   "UnsignedShort4444Type": () => (/* binding */ UnsignedShort4444Type),
/* harmony export */   "UnsignedShort5551Type": () => (/* binding */ UnsignedShort5551Type),
/* harmony export */   "UnsignedShort565Type": () => (/* binding */ UnsignedShort565Type),
/* harmony export */   "UnsignedShortType": () => (/* binding */ UnsignedShortType),
/* harmony export */   "VSMShadowMap": () => (/* binding */ VSMShadowMap),
/* harmony export */   "Vector2": () => (/* binding */ Vector2),
/* harmony export */   "Vector3": () => (/* binding */ Vector3),
/* harmony export */   "Vector4": () => (/* binding */ Vector4),
/* harmony export */   "VectorKeyframeTrack": () => (/* binding */ VectorKeyframeTrack),
/* harmony export */   "Vertex": () => (/* binding */ Vertex),
/* harmony export */   "VertexColors": () => (/* binding */ VertexColors),
/* harmony export */   "VideoTexture": () => (/* binding */ VideoTexture),
/* harmony export */   "WebGL1Renderer": () => (/* binding */ WebGL1Renderer),
/* harmony export */   "WebGLCubeRenderTarget": () => (/* binding */ WebGLCubeRenderTarget),
/* harmony export */   "WebGLMultipleRenderTargets": () => (/* binding */ WebGLMultipleRenderTargets),
/* harmony export */   "WebGLMultisampleRenderTarget": () => (/* binding */ WebGLMultisampleRenderTarget),
/* harmony export */   "WebGLRenderTarget": () => (/* binding */ WebGLRenderTarget),
/* harmony export */   "WebGLRenderTargetCube": () => (/* binding */ WebGLRenderTargetCube),
/* harmony export */   "WebGLRenderer": () => (/* binding */ WebGLRenderer),
/* harmony export */   "WebGLUtils": () => (/* binding */ WebGLUtils),
/* harmony export */   "WireframeGeometry": () => (/* binding */ WireframeGeometry),
/* harmony export */   "WireframeHelper": () => (/* binding */ WireframeHelper),
/* harmony export */   "WrapAroundEnding": () => (/* binding */ WrapAroundEnding),
/* harmony export */   "XHRLoader": () => (/* binding */ XHRLoader),
/* harmony export */   "ZeroCurvatureEnding": () => (/* binding */ ZeroCurvatureEnding),
/* harmony export */   "ZeroFactor": () => (/* binding */ ZeroFactor),
/* harmony export */   "ZeroSlopeEnding": () => (/* binding */ ZeroSlopeEnding),
/* harmony export */   "ZeroStencilOp": () => (/* binding */ ZeroStencilOp),
/* harmony export */   "sRGBEncoding": () => (/* binding */ sRGBEncoding)
/* harmony export */ });
/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION = '134';
const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const FlatShading = 1;
const SmoothShading = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;

const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const CubeUVRefractionMapping = 307;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedShort565Type = 1019;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBFormat = 1022;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const RGBEFormat = RGBAFormat;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBIntegerFormat = 1032;
const RGBAIntegerFormat = 1033;

const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
const LinearEncoding = 3000;
const sRGBEncoding = 3001;
const GammaEncoding = 3007;
const RGBEEncoding = 3002;
const LogLuvEncoding = 3003;
const RGBM7Encoding = 3004;
const RGBM16Encoding = 3005;
const RGBDEncoding = 3006;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;

const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;

const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;

const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;

const GLSL1 = '100';
const GLSL3 = '300 es';

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

class EventDispatcher {

	addEventListener( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		const listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	}

	hasEventListener( type, listener ) {

		if ( this._listeners === undefined ) return false;

		const listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	}

	removeEventListener( type, listener ) {

		if ( this._listeners === undefined ) return;

		const listeners = this._listeners;
		const listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			const index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	}

	dispatchEvent( event ) {

		if ( this._listeners === undefined ) return;

		const listeners = this._listeners;
		const listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			// Make a copy, in case listeners are removed while iterating.
			const array = listenerArray.slice( 0 );

			for ( let i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

			event.target = null;

		}

	}

}

let _seed = 1234567;

const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

//

const _lut = [];

for ( let i = 0; i < 256; i ++ ) {

	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

}

const hasRandomUUID = typeof crypto !== 'undefined' && 'randomUUID' in crypto;

function generateUUID() {

	if ( hasRandomUUID ) {

		return crypto.randomUUID().toUpperCase();

	}

	// TODO Remove this code when crypto.randomUUID() is available everywhere
	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toUpperCase() here flattens concatenated strings to save heap memory space.
	return uuid.toUpperCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s % 2147483647;

	// Park-Miller algorithm

	_seed = _seed * 16807 % 2147483647;

	return ( _seed - 1 ) / 2147483646;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

var MathUtils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler
});

class Vector2 {

	constructor( x = 0, y = 0 ) {

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width( value ) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height( value ) {

		this.y = value;

	}

	set( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	}

	roundToZero() {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y;

	}

	cross( v ) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

		return angle;

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	}

	fromBufferAttribute( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	}

	rotateAround( center, angle ) {

		const c = Math.cos( angle ), s = Math.sin( angle );

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;

	}

}

Vector2.prototype.isVector2 = true;

class Matrix3 {

	constructor() {

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrix3Column( this, 0 );
		yAxis.setFromMatrix3Column( this, 1 );
		zAxis.setFromMatrix3Column( this, 2 );

		return this;

	}

	setFromMatrix4( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[ 8 ],
			me[ 1 ], me[ 5 ], me[ 9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	}

	invert() {

		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	}

	transpose() {

		let tmp;
		const m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	}

	getNormalMatrix( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).invert().transpose();

	}

	transposeIntoArray( r ) {

		const m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	}

	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

		const c = Math.cos( rotation );
		const s = Math.sin( rotation );

		this.set(
			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
			0, 0, 1
		);

		return this;

	}

	scale( sx, sy ) {

		const te = this.elements;

		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

		return this;

	}

	rotate( theta ) {

		const c = Math.cos( theta );
		const s = Math.sin( theta );

		const te = this.elements;

		const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
		const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

		te[ 0 ] = c * a11 + s * a21;
		te[ 3 ] = c * a12 + s * a22;
		te[ 6 ] = c * a13 + s * a23;

		te[ 1 ] = - s * a11 + c * a21;
		te[ 4 ] = - s * a12 + c * a22;
		te[ 7 ] = - s * a13 + c * a23;

		return this;

	}

	translate( tx, ty ) {

		const te = this.elements;

		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

	clone() {

		return new this.constructor().fromArray( this.elements );

	}

}

Matrix3.prototype.isMatrix3 = true;

function arrayMax( array ) {

	if ( array.length === 0 ) return - Infinity;

	let max = array[ 0 ];

	for ( let i = 1, l = array.length; i < l; ++ i ) {

		if ( array[ i ] > max ) max = array[ i ];

	}

	return max;

}

const TYPED_ARRAYS = {
	Int8Array: Int8Array,
	Uint8Array: Uint8Array,
	Uint8ClampedArray: Uint8ClampedArray,
	Int16Array: Int16Array,
	Uint16Array: Uint16Array,
	Int32Array: Int32Array,
	Uint32Array: Uint32Array,
	Float32Array: Float32Array,
	Float64Array: Float64Array
};

function getTypedArray( type, buffer ) {

	return new TYPED_ARRAYS[ type ]( buffer );

}

function createElementNS( name ) {

	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

}

/**
  * cyrb53 hash for string from: https://stackoverflow.com/a/52171480
  *
  * Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc
  *
  * It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination
  * of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's
  * faster than either would be in JavaScript and significantly simpler to implement. Keep in
  * mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.
  *
  * @param {string} str
  * @param {number} seed, default 0
  * @returns number
  */
function hashString( str, seed = 0 ) {

	let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;

	for ( let i = 0, ch; i < str.length; i ++ ) {

		ch = str.charCodeAt( i );

		h1 = Math.imul( h1 ^ ch, 2654435761 );

		h2 = Math.imul( h2 ^ ch, 1597334677 );

	}

	h1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 ) ^ Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );

	h2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 ) ^ Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );

	return 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );

}

let _canvas;

class ImageUtils {

	static getDataURL( image ) {

		if ( /^data:/i.test( image.src ) ) {

			return image.src;

		}

		if ( typeof HTMLCanvasElement == 'undefined' ) {

			return image.src;

		}

		let canvas;

		if ( image instanceof HTMLCanvasElement ) {

			canvas = image;

		} else {

			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

			_canvas.width = image.width;
			_canvas.height = image.height;

			const context = _canvas.getContext( '2d' );

			if ( image instanceof ImageData ) {

				context.putImageData( image, 0, 0 );

			} else {

				context.drawImage( image, 0, 0, image.width, image.height );

			}

			canvas = _canvas;

		}

		if ( canvas.width > 2048 || canvas.height > 2048 ) {

			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

			return canvas.toDataURL( 'image/jpeg', 0.6 );

		} else {

			return canvas.toDataURL( 'image/png' );

		}

	}

}

let textureId = 0;

class Texture extends EventDispatcher {

	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {

		super();

		Object.defineProperty( this, 'id', { value: textureId ++ } );

		this.uuid = generateUUID();

		this.name = '';

		this.image = image;
		this.mipmaps = [];

		this.mapping = mapping;

		this.wrapS = wrapS;
		this.wrapT = wrapT;

		this.magFilter = magFilter;
		this.minFilter = minFilter;

		this.anisotropy = anisotropy;

		this.format = format;
		this.internalFormat = null;
		this.type = type;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding;

		this.userData = {};

		this.version = 0;
		this.onUpdate = null;

		this.isRenderTargetTexture = false;

	}

	updateMatrix() {

		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.name = source.name;

		this.image = source.image;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.internalFormat = source.internalFormat;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );
		this.center.copy( source.center );
		this.rotation = source.rotation;

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrix.copy( source.matrix );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		return this;

	}

	toJSON( meta ) {

		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		const output = {

			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			mapping: this.mapping,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			center: [ this.center.x, this.center.y ],
			rotation: this.rotation,

			wrap: [ this.wrapS, this.wrapT ],

			format: this.format,
			type: this.type,
			encoding: this.encoding,

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY,

			premultiplyAlpha: this.premultiplyAlpha,
			unpackAlignment: this.unpackAlignment

		};

		if ( this.image !== undefined ) {

			// TODO: Move to THREE.Image

			const image = this.image;

			if ( image.uuid === undefined ) {

				image.uuid = generateUUID(); // UGH

			}

			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

				let url;

				if ( Array.isArray( image ) ) {

					// process array of images e.g. CubeTexture

					url = [];

					for ( let i = 0, l = image.length; i < l; i ++ ) {

						// check cube texture with data textures

						if ( image[ i ].isDataTexture ) {

							url.push( serializeImage( image[ i ].image ) );

						} else {

							url.push( serializeImage( image[ i ] ) );

						}

					}

				} else {

					// process single image

					url = serializeImage( image );

				}

				meta.images[ image.uuid ] = {
					uuid: image.uuid,
					url: url
				};

			}

			output.image = image.uuid;

		}

		if ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;

		if ( ! isRootObject ) {

			meta.textures[ this.uuid ] = output;

		}

		return output;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

	transformUv( uv ) {

		if ( this.mapping !== UVMapping ) return uv;

		uv.applyMatrix3( this.matrix );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}

					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}

					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

		return uv;

	}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;

Texture.prototype.isTexture = true;

function serializeImage( image ) {

	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

		// default images

		return ImageUtils.getDataURL( image );

	} else {

		if ( image.data ) {

			// images of DataTexture

			return {
				data: Array.prototype.slice.call( image.data ),
				width: image.width,
				height: image.height,
				type: image.data.constructor.name
			};

		} else {

			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
			return {};

		}

	}

}

class Vector4 {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

	}

	get width() {

		return this.z;

	}

	set width( value ) {

		this.z = value;

	}

	get height() {

		return this.w;

	}

	set height( value ) {

		this.w = value;

	}

	set( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setW( w ) {

		this.w = w;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z, this.w );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	}

	add( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	}

	sub( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;
		this.w *= v.w;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z, w = this.w;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	setAxisAngleFromQuaternion( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		const s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			this.x = 1;
			this.y = 0;
			this.z = 0;

		} else {

			this.x = q.x / s;
			this.y = q.y / s;
			this.z = q.z / s;

		}

		return this;

	}

	setAxisAngleFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		let angle, x, y, z; // variables for result
		const epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			const xx = ( m11 + 1 ) / 2;
			const yy = ( m22 + 1 ) / 2;
			const zz = ( m33 + 1 ) / 2;
			const xy = ( m12 + m21 ) / 4;
			const xz = ( m13 + m31 ) / 4;
			const yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			( m13 - m31 ) * ( m13 - m31 ) +
			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	}

	roundToZero() {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;
		this.w = v1.w + ( v2.w - v1.w ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	}

	fromBufferAttribute( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();
		this.w = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;
		yield this.w;

	}

}

Vector4.prototype.isVector4 = true;

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
class WebGLRenderTarget extends EventDispatcher {

	constructor( width, height, options = {} ) {

		super();

		this.width = width;
		this.height = height;
		this.depth = 1;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
		this.texture.isRenderTargetTexture = true;

		this.texture.image = { width: width, height: height, depth: 1 };

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	setTexture( texture ) {

		texture.image = {
			width: this.width,
			height: this.height,
			depth: this.depth
		};

		this.texture = texture;

	}

	setSize( width, height, depth = 1 ) {

		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

			this.width = width;
			this.height = height;
			this.depth = depth;

			this.texture.image.width = width;
			this.texture.image.height = height;
			this.texture.image.depth = depth;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.width = source.width;
		this.height = source.height;
		this.depth = source.depth;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();
		this.texture.image = { ...this.texture.image }; // See #20328.

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

}

WebGLRenderTarget.prototype.isWebGLRenderTarget = true;

class WebGLMultipleRenderTargets extends WebGLRenderTarget {

	constructor( width, height, count ) {

		super( width, height );

		const texture = this.texture;

		this.texture = [];

		for ( let i = 0; i < count; i ++ ) {

			this.texture[ i ] = texture.clone();

		}

	}

	setSize( width, height, depth = 1 ) {

		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

			this.width = width;
			this.height = height;
			this.depth = depth;

			for ( let i = 0, il = this.texture.length; i < il; i ++ ) {

				this.texture[ i ].image.width = width;
				this.texture[ i ].image.height = height;
				this.texture[ i ].image.depth = depth;

			}

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

		return this;

	}

	copy( source ) {

		this.dispose();

		this.width = source.width;
		this.height = source.height;
		this.depth = source.depth;

		this.viewport.set( 0, 0, this.width, this.height );
		this.scissor.set( 0, 0, this.width, this.height );

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		this.texture.length = 0;

		for ( let i = 0, il = source.texture.length; i < il; i ++ ) {

			this.texture[ i ] = source.texture[ i ].clone();

		}

		return this;

	}

}

WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;

class WebGLMultisampleRenderTarget extends WebGLRenderTarget {

	constructor( width, height, options ) {

		super( width, height, options );

		this.samples = 4;

	}

	copy( source ) {

		super.copy.call( this, source );

		this.samples = source.samples;

		return this;

	}

}

WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;

class Quaternion {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerp( qa, qb, qm, t ) {

		console.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );
		return qm.slerpQuaternions( qa, qb, t );

	}

	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( t === 0 ) {

			dst[ dstOffset + 0 ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
			return;

		}

		if ( t === 1 ) {

			dst[ dstOffset + 0 ] = x1;
			dst[ dstOffset + 1 ] = y1;
			dst[ dstOffset + 2 ] = z1;
			dst[ dstOffset + 3 ] = w1;
			return;

		}

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				const sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

		const x0 = src0[ srcOffset0 ];
		const y0 = src0[ srcOffset0 + 1 ];
		const z0 = src0[ srcOffset0 + 2 ];
		const w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 ];
		const y1 = src1[ srcOffset1 + 1 ];
		const z1 = src1[ srcOffset1 + 2 ];
		const w1 = src1[ srcOffset1 + 3 ];

		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w( value ) {

		this._w = value;
		this._onChangeCallback();

	}

	set( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._w );

	}

	copy( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos( x / 2 );
		const c2 = cos( y / 2 );
		const c3 = cos( z / 2 );

		const s1 = sin( x / 2 );
		const s2 = sin( y / 2 );
		const s3 = sin( z / 2 );

		switch ( order ) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33;

		if ( trace > 0 ) {

			const s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot( vTo ) + 1;

		if ( r < Number.EPSILON ) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo( q ) {

		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );

	}

	rotateTowards( q, step ) {

		const angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		const t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	}

	identity() {

		return this.set( 0, 0, 0, 1 );

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	}

	normalize() {

		let l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	}

	premultiply( q ) {

		return this.multiplyQuaternions( q, this );

	}

	multiplyQuaternions( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions( qa, qb, t ) {

		this.copy( qa ).slerp( qb, t );

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt( 1 - u1 );
		const sqrtu1 = Math.sqrt( u1 );

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos( u2 ),
			sqrtu1 * Math.sin( u3 ),
			sqrtu1 * Math.cos( u3 ),
			sqrt1u1 * Math.sin( u2 ),
		);

	}

	equals( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	}

	fromArray( array, offset = 0 ) {

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this._x = attribute.getX( index );
		this._y = attribute.getY( index );
		this._z = attribute.getZ( index );
		this._w = attribute.getW( index );

		return this;

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

}

Quaternion.prototype.isQuaternion = true;

class Vector3 {

	constructor( x = 0, y = 0, z = 0 ) {

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set( x, y, z ) {

		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

	}

	applyAxisAngle( axis, angle ) {

		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	}

	applyNormalMatrix( m ) {

		return this.applyMatrix3( m ).normalize();

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	}

	applyQuaternion( q ) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	}

	unproject( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	}

	transformDirection( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	}

	roundToZero() {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;

		return this;

	}

	cross( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		return this.crossVectors( this, v );

	}

	crossVectors( a, b ) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector( v ) {

		const denominator = v.lengthSq();

		if ( denominator === 0 ) return this.set( 0, 0, 0 );

		const scalar = v.dot( this ) / denominator;

		return this.copy( v ).multiplyScalar( scalar );

	}

	projectOnPlane( planeNormal ) {

		_vector$c.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector$c );

	}

	reflect( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	}

	setFromSpherical( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	}

	setFromSphericalCoords( radius, phi, theta ) {

		const sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	}

	setFromCylindrical( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	}

	setFromCylindricalCoords( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	}

	setFromMatrixPosition( m ) {

		const e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	}

	setFromMatrixScale( m ) {

		const sx = this.setFromMatrixColumn( m, 0 ).length();
		const sy = this.setFromMatrixColumn( m, 1 ).length();
		const sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	}

	setFromMatrix3Column( m, index ) {

		return this.fromArray( m.elements, index * 3 );

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	}

	fromBufferAttribute( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = ( Math.random() - 0.5 ) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt( 1 - u ** 2 );

		this.x = f * Math.cos( t );
		this.y = f * Math.sin( t );
		this.z = u;

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

Vector3.prototype.isVector3 = true;

const _vector$c = /*@__PURE__*/ new Vector3();
const _quaternion$4 = /*@__PURE__*/ new Quaternion();

class Box3 {

	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

		this.min = min;
		this.max = max;

	}

	set( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	}

	setFromArray( array ) {

		let minX = + Infinity;
		let minY = + Infinity;
		let minZ = + Infinity;

		let maxX = - Infinity;
		let maxY = - Infinity;
		let maxZ = - Infinity;

		for ( let i = 0, l = array.length; i < l; i += 3 ) {

			const x = array[ i ];
			const y = array[ i + 1 ];
			const z = array[ i + 2 ];

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	}

	setFromBufferAttribute( attribute ) {

		let minX = + Infinity;
		let minY = + Infinity;
		let minZ = + Infinity;

		let maxX = - Infinity;
		let maxY = - Infinity;
		let maxZ = - Infinity;

		for ( let i = 0, l = attribute.count; i < l; i ++ ) {

			const x = attribute.getX( i );
			const y = attribute.getY( i );
			const z = attribute.getZ( i );

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	}

	setFromPoints( points ) {

		this.makeEmpty();

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	}

	setFromCenterAndSize( center, size ) {

		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );

		this.min.copy( center ).sub( halfSize );
		this.max.copy( center ).add( halfSize );

		return this;

	}

	setFromObject( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	}

	makeEmpty() {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	}

	isEmpty() {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	}

	getCenter( target ) {

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	}

	getSize( target ) {

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

	}

	expandByPoint( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	}

	expandByVector( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	}

	expandByScalar( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	}

	expandByObject( object ) {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		object.updateWorldMatrix( false, false );

		const geometry = object.geometry;

		if ( geometry !== undefined ) {

			if ( geometry.boundingBox === null ) {

				geometry.computeBoundingBox();

			}

			_box$3.copy( geometry.boundingBox );
			_box$3.applyMatrix4( object.matrixWorld );

			this.union( _box$3 );

		}

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			this.expandByObject( children[ i ] );

		}

		return this;

	}

	containsPoint( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	}

	containsBox( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	}

	getParameter( point, target ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return target.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	}

	intersectsBox( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	}

	intersectsSphere( sphere ) {

		// Find the point on the AABB closest to the sphere center.
		this.clampPoint( sphere.center, _vector$b );

		// If that point is inside the sphere, the AABB and sphere intersect.
		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

	}

	intersectsPlane( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		let min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= - plane.constant && max >= - plane.constant );

	}

	intersectsTriangle( triangle ) {

		if ( this.isEmpty() ) {

			return false;

		}

		// compute box center and extents
		this.getCenter( _center );
		_extents.subVectors( this.max, _center );

		// translate triangle to aabb origin
		_v0$2.subVectors( triangle.a, _center );
		_v1$7.subVectors( triangle.b, _center );
		_v2$3.subVectors( triangle.c, _center );

		// compute edge vectors for triangle
		_f0.subVectors( _v1$7, _v0$2 );
		_f1.subVectors( _v2$3, _v1$7 );
		_f2.subVectors( _v0$2, _v2$3 );

		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
		let axes = [
			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
		];
		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {

			return false;

		}

		// test 3 face normals from the aabb
		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {

			return false;

		}

		// finally testing the face normal of the triangle
		// use already existing triangle edge vectors here
		_triangleNormal.crossVectors( _f0, _f1 );
		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

		return satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );

	}

	clampPoint( point, target ) {

		return target.copy( point ).clamp( this.min, this.max );

	}

	distanceToPoint( point ) {

		const clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );

		return clampedPoint.sub( point ).length();

	}

	getBoundingSphere( target ) {

		this.getCenter( target.center );

		target.radius = this.getSize( _vector$b ).length() * 0.5;

		return target;

	}

	intersect( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	}

	union( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	}

	applyMatrix4( matrix ) {

		// transform of empty box is an empty box.
		if ( this.isEmpty() ) return this;

		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

		this.setFromPoints( _points );

		return this;

	}

	translate( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	}

	equals( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

}

Box3.prototype.isBox3 = true;

const _points = [
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3()
];

const _vector$b = /*@__PURE__*/ new Vector3();

const _box$3 = /*@__PURE__*/ new Box3();

// triangle centered vertices

const _v0$2 = /*@__PURE__*/ new Vector3();
const _v1$7 = /*@__PURE__*/ new Vector3();
const _v2$3 = /*@__PURE__*/ new Vector3();

// triangle edge vectors

const _f0 = /*@__PURE__*/ new Vector3();
const _f1 = /*@__PURE__*/ new Vector3();
const _f2 = /*@__PURE__*/ new Vector3();

const _center = /*@__PURE__*/ new Vector3();
const _extents = /*@__PURE__*/ new Vector3();
const _triangleNormal = /*@__PURE__*/ new Vector3();
const _testAxis = /*@__PURE__*/ new Vector3();

function satForAxes( axes, v0, v1, v2, extents ) {

	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

		_testAxis.fromArray( axes, i );
		// project the aabb onto the seperating axis
		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
		// project all 3 vertices of the triangle onto the seperating axis
		const p0 = v0.dot( _testAxis );
		const p1 = v1.dot( _testAxis );
		const p2 = v2.dot( _testAxis );
		// actual test, basically see if either of the most extreme of the triangle points intersects r
		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

			// points of the projected triangle are outside the projected half-length of the aabb
			// the axis is seperating and we can exit
			return false;

		}

	}

	return true;

}

const _box$2 = /*@__PURE__*/ new Box3();
const _v1$6 = /*@__PURE__*/ new Vector3();
const _toFarthestPoint = /*@__PURE__*/ new Vector3();
const _toPoint = /*@__PURE__*/ new Vector3();

class Sphere {

	constructor( center = new Vector3(), radius = - 1 ) {

		this.center = center;
		this.radius = radius;

	}

	set( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	}

	setFromPoints( points, optionalCenter ) {

		const center = this.center;

		if ( optionalCenter !== undefined ) {

			center.copy( optionalCenter );

		} else {

			_box$2.setFromPoints( points ).getCenter( center );

		}

		let maxRadiusSq = 0;

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

		}

		this.radius = Math.sqrt( maxRadiusSq );

		return this;

	}

	copy( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	}

	isEmpty() {

		return ( this.radius < 0 );

	}

	makeEmpty() {

		this.center.set( 0, 0, 0 );
		this.radius = - 1;

		return this;

	}

	containsPoint( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	}

	distanceToPoint( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	}

	intersectsSphere( sphere ) {

		const radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	}

	intersectsBox( box ) {

		return box.intersectsSphere( this );

	}

	intersectsPlane( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	}

	clampPoint( point, target ) {

		const deltaLengthSq = this.center.distanceToSquared( point );

		target.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			target.sub( this.center ).normalize();
			target.multiplyScalar( this.radius ).add( this.center );

		}

		return target;

	}

	getBoundingBox( target ) {

		if ( this.isEmpty() ) {

			// Empty sphere produces empty bounding box
			target.makeEmpty();
			return target;

		}

		target.set( this.center, this.center );
		target.expandByScalar( this.radius );

		return target;

	}

	applyMatrix4( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	}

	translate( offset ) {

		this.center.add( offset );

		return this;

	}

	expandByPoint( point ) {

		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671

		_toPoint.subVectors( point, this.center );

		const lengthSq = _toPoint.lengthSq();

		if ( lengthSq > ( this.radius * this.radius ) ) {

			const length = Math.sqrt( lengthSq );
			const missingRadiusHalf = ( length - this.radius ) * 0.5;

			// Nudge this sphere towards the target point. Add half the missing distance to radius,
			// and the other half to position. This gives a tighter enclosure, instead of if
			// the whole missing distance were just added to radius.

			this.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );
			this.radius += missingRadiusHalf;

		}

		return this;

	}

	union( sphere ) {

		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769

		// To enclose another sphere into this sphere, we only need to enclose two points:
		// 1) Enclose the farthest point on the other sphere into this sphere.
		// 2) Enclose the opposite point of the farthest point into this sphere.

		_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );

		this.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );
		this.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );

		return this;

	}

	equals( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _vector$a = /*@__PURE__*/ new Vector3();
const _segCenter = /*@__PURE__*/ new Vector3();
const _segDir = /*@__PURE__*/ new Vector3();
const _diff = /*@__PURE__*/ new Vector3();

const _edge1 = /*@__PURE__*/ new Vector3();
const _edge2 = /*@__PURE__*/ new Vector3();
const _normal$1 = /*@__PURE__*/ new Vector3();

class Ray {

	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

		this.origin = origin;
		this.direction = direction;

	}

	set( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	}

	copy( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	}

	at( t, target ) {

		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	}

	lookAt( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	}

	recast( t ) {

		this.origin.copy( this.at( t, _vector$a ) );

		return this;

	}

	closestPointToPoint( point, target ) {

		target.subVectors( point, this.origin );

		const directionDistance = target.dot( this.direction );

		if ( directionDistance < 0 ) {

			return target.copy( this.origin );

		}

		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	}

	distanceToPoint( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	}

	distanceSqToPoint( point ) {

		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );

		// point behind the ray

		if ( directionDistance < 0 ) {

			return this.origin.distanceToSquared( point );

		}

		_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		return _vector$a.distanceToSquared( point );

	}

	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
		// It returns the min distance between the ray and the segment
		// defined by v0 and v1
		// It can also set two optional targets :
		// - The closest point on the ray
		// - The closest point on the segment

		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
		_segDir.copy( v1 ).sub( v0 ).normalize();
		_diff.copy( this.origin ).sub( _segCenter );

		const segExtent = v0.distanceTo( v1 ) * 0.5;
		const a01 = - this.direction.dot( _segDir );
		const b0 = _diff.dot( this.direction );
		const b1 = - _diff.dot( _segDir );
		const c = _diff.lengthSq();
		const det = Math.abs( 1 - a01 * a01 );
		let s0, s1, sqrDist, extDet;

		if ( det > 0 ) {

			// The ray and segment are not parallel.

			s0 = a01 * b1 - b0;
			s1 = a01 * b0 - b1;
			extDet = segExtent * det;

			if ( s0 >= 0 ) {

				if ( s1 >= - extDet ) {

					if ( s1 <= extDet ) {

						// region 0
						// Minimum at interior points of ray and segment.

						const invDet = 1 / det;
						s0 *= invDet;
						s1 *= invDet;
						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

					} else {

						// region 1

						s1 = segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					// region 5

					s1 = - segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			} else {

				if ( s1 <= - extDet ) {

					// region 4

					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				} else if ( s1 <= extDet ) {

					// region 3

					s0 = 0;
					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

				} else {

					// region 2

					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			}

		} else {

			// Ray and segment are parallel.

			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

		}

		if ( optionalPointOnRay ) {

			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

		}

		if ( optionalPointOnSegment ) {

			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

		}

		return sqrDist;

	}

	intersectSphere( sphere, target ) {

		_vector$a.subVectors( sphere.center, this.origin );
		const tca = _vector$a.dot( this.direction );
		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
		const radius2 = sphere.radius * sphere.radius;

		if ( d2 > radius2 ) return null;

		const thc = Math.sqrt( radius2 - d2 );

		// t0 = first intersect point - entrance on front of sphere
		const t0 = tca - thc;

		// t1 = second intersect point - exit point on back of sphere
		const t1 = tca + thc;

		// test to see if both t0 and t1 are behind the ray - if so, return null
		if ( t0 < 0 && t1 < 0 ) return null;

		// test to see if t0 is behind the ray:
		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
		// in order to always return an intersect point that is in front of the ray.
		if ( t0 < 0 ) return this.at( t1, target );

		// else t0 is in front of the ray, so return the first collision point scaled by t0
		return this.at( t0, target );

	}

	intersectsSphere( sphere ) {

		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

	}

	distanceToPlane( plane ) {

		const denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	}

	intersectPlane( plane, target ) {

		const t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, target );

	}

	intersectsPlane( plane ) {

		// check if the ray lies on the plane first

		const distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		const denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	}

	intersectBox( box, target ) {

		let tmin, tmax, tymin, tymax, tzmin, tzmax;

		const invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		const origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, target );

	}

	intersectsBox( box ) {

		return this.intersectBox( box, _vector$a ) !== null;

	}

	intersectTriangle( a, b, c, backfaceCulling, target ) {

		// Compute the offset origin, edges, and normal.

		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

		_edge1.subVectors( b, a );
		_edge2.subVectors( c, a );
		_normal$1.crossVectors( _edge1, _edge2 );

		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
		let DdN = this.direction.dot( _normal$1 );
		let sign;

		if ( DdN > 0 ) {

			if ( backfaceCulling ) return null;
			sign = 1;

		} else if ( DdN < 0 ) {

			sign = - 1;
			DdN = - DdN;

		} else {

			return null;

		}

		_diff.subVectors( this.origin, a );
		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

		// b1 < 0, no intersection
		if ( DdQxE2 < 0 ) {

			return null;

		}

		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

		// b2 < 0, no intersection
		if ( DdE1xQ < 0 ) {

			return null;

		}

		// b1+b2 > 1, no intersection
		if ( DdQxE2 + DdE1xQ > DdN ) {

			return null;

		}

		// Line intersects triangle, check if ray does.
		const QdN = - sign * _diff.dot( _normal$1 );

		// t < 0, no intersection
		if ( QdN < 0 ) {

			return null;

		}

		// Ray intersects triangle.
		return this.at( QdN / DdN, target );

	}

	applyMatrix4( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	}

	equals( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

class Matrix4 {

	constructor() {

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4().fromArray( this.elements );

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	}

	copyPosition( m ) {

		const te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	}

	setFromMatrix3( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ], 0,
			me[ 1 ], me[ 4 ], me[ 7 ], 0,
			me[ 2 ], me[ 5 ], me[ 8 ], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	}

	makeBasis( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation( m ) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromEuler( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos( x ), b = Math.sin( x );
		const c = Math.cos( y ), d = Math.sin( y );
		const e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromQuaternion( q ) {

		return this.compose( _zero, q, _one );

	}

	lookAt( eye, target, up ) {

		const te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	}

	multiply( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	}

	setPosition( x, y, z ) {

		const te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	}

	scale( v ) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	}

	makeTranslation( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationX( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos( angle );
		const s = Math.sin( angle );
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear( xy, xz, yx, yz, zx, zy ) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose( position, quaternion, scale ) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x,	y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	}

	decompose( position, quaternion, scale ) {

		const te = this.elements;

		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1$2.copy( this );

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1$2.elements[ 0 ] *= invSX;
		_m1$2.elements[ 1 ] *= invSX;
		_m1$2.elements[ 2 ] *= invSX;

		_m1$2.elements[ 4 ] *= invSY;
		_m1$2.elements[ 5 ] *= invSY;
		_m1$2.elements[ 6 ] *= invSY;

		_m1$2.elements[ 8 ] *= invSZ;
		_m1$2.elements[ 9 ] *= invSZ;
		_m1$2.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1$2 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		const te = this.elements;
		const x = 2 * near / ( right - left );
		const y = 2 * near / ( top - bottom );

		const a = ( right + left ) / ( right - left );
		const b = ( top + bottom ) / ( top - bottom );
		const c = - ( far + near ) / ( far - near );
		const d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	}

	makeOrthographic( left, right, top, bottom, near, far ) {

		const te = this.elements;
		const w = 1.0 / ( right - left );
		const h = 1.0 / ( top - bottom );
		const p = 1.0 / ( far - near );

		const x = ( right + left ) * w;
		const y = ( top + bottom ) * h;
		const z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

}

Matrix4.prototype.isMatrix4 = true;

const _v1$5 = /*@__PURE__*/ new Vector3();
const _m1$2 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
const _x = /*@__PURE__*/ new Vector3();
const _y = /*@__PURE__*/ new Vector3();
const _z = /*@__PURE__*/ new Vector3();

const _matrix$1 = /*@__PURE__*/ new Matrix4();
const _quaternion$3 = /*@__PURE__*/ new Quaternion();

class Euler {

	constructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get order() {

		return this._order;

	}

	set order( value ) {

		this._order = value;
		this._onChangeCallback();

	}

	set( x, y, z, order = this._order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._order );

	}

	copy( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m, order = this._order, update = true ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements;
		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		switch ( order ) {

			case 'XYZ':

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

				break;

			case 'YXZ':

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.9999999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

				break;

			case 'ZXY':

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.9999999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

				break;

			case 'ZYX':

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

				break;

			case 'YZX':

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

				break;

			case 'XZY':

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

				break;

			default:

				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

		}

		this._order = order;

		if ( update === true ) this._onChangeCallback();

		return this;

	}

	setFromQuaternion( q, order, update ) {

		_matrix$1.makeRotationFromQuaternion( q );

		return this.setFromRotationMatrix( _matrix$1, order, update );

	}

	setFromVector3( v, order = this._order ) {

		return this.set( v.x, v.y, v.z, order );

	}

	reorder( newOrder ) {

		// WARNING: this discards revolution information -bhouston

		_quaternion$3.setFromEuler( this );

		return this.setFromQuaternion( _quaternion$3, newOrder );

	}

	equals( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	}

	fromArray( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	}

	toVector3( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new Vector3( this._x, this._y, this._z );

		}

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

}

Euler.prototype.isEuler = true;

Euler.DefaultOrder = 'XYZ';
Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

class Layers {

	constructor() {

		this.mask = 1 | 0;

	}

	set( channel ) {

		this.mask = 1 << channel | 0;

	}

	enable( channel ) {

		this.mask |= 1 << channel | 0;

	}

	enableAll() {

		this.mask = 0xffffffff | 0;

	}

	toggle( channel ) {

		this.mask ^= 1 << channel | 0;

	}

	disable( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	}

	disableAll() {

		this.mask = 0;

	}

	test( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

}

let _object3DId = 0;

const _v1$4 = /*@__PURE__*/ new Vector3();
const _q1 = /*@__PURE__*/ new Quaternion();
const _m1$1 = /*@__PURE__*/ new Matrix4();
const _target = /*@__PURE__*/ new Vector3();

const _position$3 = /*@__PURE__*/ new Vector3();
const _scale$2 = /*@__PURE__*/ new Vector3();
const _quaternion$2 = /*@__PURE__*/ new Quaternion();

const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

const _addedEvent = { type: 'added' };
const _removedEvent = { type: 'removed' };

class Object3D extends EventDispatcher {

	constructor() {

		super();

		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		const position = new Vector3();
		const rotation = new Euler();
		const quaternion = new Quaternion();
		const scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation._onChange( onRotationChange );
		quaternion._onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.animations = [];

		this.userData = {};

	}

	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

	applyMatrix4( matrix ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		this.matrix.premultiply( matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	}

	applyQuaternion( q ) {

		this.quaternion.premultiply( q );

		return this;

	}

	setRotationFromAxisAngle( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	}

	setRotationFromEuler( euler ) {

		this.quaternion.setFromEuler( euler, true );

	}

	setRotationFromMatrix( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	}

	setRotationFromQuaternion( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	}

	rotateOnAxis( axis, angle ) {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.multiply( _q1 );

		return this;

	}

	rotateOnWorldAxis( axis, angle ) {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.premultiply( _q1 );

		return this;

	}

	rotateX( angle ) {

		return this.rotateOnAxis( _xAxis, angle );

	}

	rotateY( angle ) {

		return this.rotateOnAxis( _yAxis, angle );

	}

	rotateZ( angle ) {

		return this.rotateOnAxis( _zAxis, angle );

	}

	translateOnAxis( axis, distance ) {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

		this.position.add( _v1$4.multiplyScalar( distance ) );

		return this;

	}

	translateX( distance ) {

		return this.translateOnAxis( _xAxis, distance );

	}

	translateY( distance ) {

		return this.translateOnAxis( _yAxis, distance );

	}

	translateZ( distance ) {

		return this.translateOnAxis( _zAxis, distance );

	}

	localToWorld( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	}

	worldToLocal( vector ) {

		return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );

	}

	lookAt( x, y, z ) {

		// This method does not support objects having non-uniformly-scaled parent(s)

		if ( x.isVector3 ) {

			_target.copy( x );

		} else {

			_target.set( x, y, z );

		}

		const parent = this.parent;

		this.updateWorldMatrix( true, false );

		_position$3.setFromMatrixPosition( this.matrixWorld );

		if ( this.isCamera || this.isLight ) {

			_m1$1.lookAt( _position$3, _target, this.up );

		} else {

			_m1$1.lookAt( _target, _position$3, this.up );

		}

		this.quaternion.setFromRotationMatrix( _m1$1 );

		if ( parent ) {

			_m1$1.extractRotation( parent.matrixWorld );
			_q1.setFromRotationMatrix( _m1$1 );
			this.quaternion.premultiply( _q1.invert() );

		}

	}

	add( object ) {

		if ( arguments.length > 1 ) {

			for ( let i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
			return this;

		}

		if ( object && object.isObject3D ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			this.children.push( object );

			object.dispatchEvent( _addedEvent );

		} else {

			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

		}

		return this;

	}

	remove( object ) {

		if ( arguments.length > 1 ) {

			for ( let i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		const index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;
			this.children.splice( index, 1 );

			object.dispatchEvent( _removedEvent );

		}

		return this;

	}

	removeFromParent() {

		const parent = this.parent;

		if ( parent !== null ) {

			parent.remove( this );

		}

		return this;

	}

	clear() {

		for ( let i = 0; i < this.children.length; i ++ ) {

			const object = this.children[ i ];

			object.parent = null;

			object.dispatchEvent( _removedEvent );

		}

		this.children.length = 0;

		return this;


	}

	attach( object ) {

		// adds object as a child of this, while maintaining the object's world transform

		this.updateWorldMatrix( true, false );

		_m1$1.copy( this.matrixWorld ).invert();

		if ( object.parent !== null ) {

			object.parent.updateWorldMatrix( true, false );

			_m1$1.multiply( object.parent.matrixWorld );

		}

		object.applyMatrix4( _m1$1 );

		this.add( object );

		object.updateWorldMatrix( false, true );

		return this;

	}

	getObjectById( id ) {

		return this.getObjectByProperty( 'id', id );

	}

	getObjectByName( name ) {

		return this.getObjectByProperty( 'name', name );

	}

	getObjectByProperty( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

			const child = this.children[ i ];
			const object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	}

	getWorldPosition( target ) {

		this.updateWorldMatrix( true, false );

		return target.setFromMatrixPosition( this.matrixWorld );

	}

	getWorldQuaternion( target ) {

		this.updateWorldMatrix( true, false );

		this.matrixWorld.decompose( _position$3, target, _scale$2 );

		return target;

	}

	getWorldScale( target ) {

		this.updateWorldMatrix( true, false );

		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

		return target;

	}

	getWorldDirection( target ) {

		this.updateWorldMatrix( true, false );

		const e = this.matrixWorld.elements;

		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

	}

	raycast() {}

	traverse( callback ) {

		callback( this );

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	}

	traverseVisible( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	}

	traverseAncestors( callback ) {

		const parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	}

	updateMatrix() {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	}

	updateMatrixWorld( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	}

	updateWorldMatrix( updateParents, updateChildren ) {

		const parent = this.parent;

		if ( updateParents === true && parent !== null ) {

			parent.updateWorldMatrix( true, false );

		}

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.parent === null ) {

			this.matrixWorld.copy( this.matrix );

		} else {

			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

		}

		// update children

		if ( updateChildren === true ) {

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateWorldMatrix( false, true );

			}

		}

	}

	toJSON( meta ) {

		// meta is a string when called from JSON.stringify
		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		const output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {},
				skeletons: {},
				animations: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		const object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( this.frustumCulled === false ) object.frustumCulled = false;
		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

		object.layers = this.layers.mask;
		object.matrix = this.matrix.toArray();

		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

		// object specific properties

		if ( this.isInstancedMesh ) {

			object.type = 'InstancedMesh';
			object.count = this.count;
			object.instanceMatrix = this.instanceMatrix.toJSON();
			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

		}

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.isScene ) {

			if ( this.background ) {

				if ( this.background.isColor ) {

					object.background = this.background.toJSON();

				} else if ( this.background.isTexture ) {

					object.background = this.background.toJSON( meta ).uuid;

				}

			}

			if ( this.environment && this.environment.isTexture ) {

				object.environment = this.environment.toJSON( meta ).uuid;

			}

		} else if ( this.isMesh || this.isLine || this.isPoints ) {

			object.geometry = serialize( meta.geometries, this.geometry );

			const parameters = this.geometry.parameters;

			if ( parameters !== undefined && parameters.shapes !== undefined ) {

				const shapes = parameters.shapes;

				if ( Array.isArray( shapes ) ) {

					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

						const shape = shapes[ i ];

						serialize( meta.shapes, shape );

					}

				} else {

					serialize( meta.shapes, shapes );

				}

			}

		}

		if ( this.isSkinnedMesh ) {

			object.bindMode = this.bindMode;
			object.bindMatrix = this.bindMatrix.toArray();

			if ( this.skeleton !== undefined ) {

				serialize( meta.skeletons, this.skeleton );

				object.skeleton = this.skeleton.uuid;

			}

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				const uuids = [];

				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( let i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		//

		if ( this.animations.length > 0 ) {

			object.animations = [];

			for ( let i = 0; i < this.animations.length; i ++ ) {

				const animation = this.animations[ i ];

				object.animations.push( serialize( meta.animations, animation ) );

			}

		}

		if ( isRootObject ) {

			const geometries = extractFromCache( meta.geometries );
			const materials = extractFromCache( meta.materials );
			const textures = extractFromCache( meta.textures );
			const images = extractFromCache( meta.images );
			const shapes = extractFromCache( meta.shapes );
			const skeletons = extractFromCache( meta.skeletons );
			const animations = extractFromCache( meta.animations );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;
			if ( shapes.length > 0 ) output.shapes = shapes;
			if ( skeletons.length > 0 ) output.skeletons = skeletons;
			if ( animations.length > 0 ) output.animations = animations;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			const values = [];
			for ( const key in cache ) {

				const data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

	}

	clone( recursive ) {

		return new this.constructor().copy( this, recursive );

	}

	copy( source, recursive = true ) {

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.rotation.order = source.rotation.order;
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( let i = 0; i < source.children.length; i ++ ) {

				const child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

}

Object3D.DefaultUp = new Vector3( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object3D.prototype.isObject3D = true;

const _v0$1 = /*@__PURE__*/ new Vector3();
const _v1$3 = /*@__PURE__*/ new Vector3();
const _v2$2 = /*@__PURE__*/ new Vector3();
const _v3$1 = /*@__PURE__*/ new Vector3();

const _vab = /*@__PURE__*/ new Vector3();
const _vac = /*@__PURE__*/ new Vector3();
const _vbc = /*@__PURE__*/ new Vector3();
const _vap = /*@__PURE__*/ new Vector3();
const _vbp = /*@__PURE__*/ new Vector3();
const _vcp = /*@__PURE__*/ new Vector3();

class Triangle {

	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

		this.a = a;
		this.b = b;
		this.c = c;

	}

	static getNormal( a, b, c, target ) {

		target.subVectors( c, b );
		_v0$1.subVectors( a, b );
		target.cross( _v0$1 );

		const targetLengthSq = target.lengthSq();
		if ( targetLengthSq > 0 ) {

			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

		}

		return target.set( 0, 0, 0 );

	}

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	static getBarycoord( point, a, b, c, target ) {

		_v0$1.subVectors( c, a );
		_v1$3.subVectors( b, a );
		_v2$2.subVectors( point, a );

		const dot00 = _v0$1.dot( _v0$1 );
		const dot01 = _v0$1.dot( _v1$3 );
		const dot02 = _v0$1.dot( _v2$2 );
		const dot11 = _v1$3.dot( _v1$3 );
		const dot12 = _v1$3.dot( _v2$2 );

		const denom = ( dot00 * dot11 - dot01 * dot01 );

		// collinear or singular triangle
		if ( denom === 0 ) {

			// arbitrary location outside of triangle?
			// not sure if this is the best idea, maybe should be returning undefined
			return target.set( - 2, - 1, - 1 );

		}

		const invDenom = 1 / denom;
		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

		// barycentric coordinates must always sum to 1
		return target.set( 1 - u - v, v, u );

	}

	static containsPoint( point, a, b, c ) {

		this.getBarycoord( point, a, b, c, _v3$1 );

		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );

	}

	static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {

		this.getBarycoord( point, p1, p2, p3, _v3$1 );

		target.set( 0, 0 );
		target.addScaledVector( uv1, _v3$1.x );
		target.addScaledVector( uv2, _v3$1.y );
		target.addScaledVector( uv3, _v3$1.z );

		return target;

	}

	static isFrontFacing( a, b, c, direction ) {

		_v0$1.subVectors( c, b );
		_v1$3.subVectors( a, b );

		// strictly front facing
		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

	}

	set( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	}

	setFromPointsAndIndices( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	}

	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

		this.a.fromBufferAttribute( attribute, i0 );
		this.b.fromBufferAttribute( attribute, i1 );
		this.c.fromBufferAttribute( attribute, i2 );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	}

	getArea() {

		_v0$1.subVectors( this.c, this.b );
		_v1$3.subVectors( this.a, this.b );

		return _v0$1.cross( _v1$3 ).length() * 0.5;

	}

	getMidpoint( target ) {

		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	}

	getNormal( target ) {

		return Triangle.getNormal( this.a, this.b, this.c, target );

	}

	getPlane( target ) {

		return target.setFromCoplanarPoints( this.a, this.b, this.c );

	}

	getBarycoord( point, target ) {

		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

	}

	getUV( point, uv1, uv2, uv3, target ) {

		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

	}

	containsPoint( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	}

	isFrontFacing( direction ) {

		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

	}

	intersectsBox( box ) {

		return box.intersectsTriangle( this );

	}

	closestPointToPoint( p, target ) {

		const a = this.a, b = this.b, c = this.c;
		let v, w;

		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
		// basically, we're distinguishing which of the voronoi regions of the triangle
		// the point lies in with the minimum amount of redundant computation.

		_vab.subVectors( b, a );
		_vac.subVectors( c, a );
		_vap.subVectors( p, a );
		const d1 = _vab.dot( _vap );
		const d2 = _vac.dot( _vap );
		if ( d1 <= 0 && d2 <= 0 ) {

			// vertex region of A; barycentric coords (1, 0, 0)
			return target.copy( a );

		}

		_vbp.subVectors( p, b );
		const d3 = _vab.dot( _vbp );
		const d4 = _vac.dot( _vbp );
		if ( d3 >= 0 && d4 <= d3 ) {

			// vertex region of B; barycentric coords (0, 1, 0)
			return target.copy( b );

		}

		const vc = d1 * d4 - d3 * d2;
		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

			v = d1 / ( d1 - d3 );
			// edge region of AB; barycentric coords (1-v, v, 0)
			return target.copy( a ).addScaledVector( _vab, v );

		}

		_vcp.subVectors( p, c );
		const d5 = _vab.dot( _vcp );
		const d6 = _vac.dot( _vcp );
		if ( d6 >= 0 && d5 <= d6 ) {

			// vertex region of C; barycentric coords (0, 0, 1)
			return target.copy( c );

		}

		const vb = d5 * d2 - d1 * d6;
		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

			w = d2 / ( d2 - d6 );
			// edge region of AC; barycentric coords (1-w, 0, w)
			return target.copy( a ).addScaledVector( _vac, w );

		}

		const va = d3 * d6 - d5 * d4;
		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

			_vbc.subVectors( c, b );
			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
			// edge region of BC; barycentric coords (0, 1-w, w)
			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

		}

		// face region
		const denom = 1 / ( va + vb + vc );
		// u = va * denom
		v = vb * denom;
		w = vc * denom;

		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

	}

	equals( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

}

let materialId = 0;

class Material extends EventDispatcher {

	constructor() {

		super();

		Object.defineProperty( this, 'id', { value: materialId ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.vertexColors = false;

		this.opacity = 1;
		this.format = RGBAFormat;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaToCoverage = false;
		this.premultipliedAlpha = false;

		this.visible = true;

		this.toneMapped = true;

		this.userData = {};

		this.version = 0;

		this._alphaTest = 0;

	}

	get alphaTest() {

		return this._alphaTest;

	}

	set alphaTest( value ) {

		if ( this._alphaTest > 0 !== value > 0 ) {

			this.version ++;

		}

		this._alphaTest = value;

	}

	onBuild( /* shaderobject, renderer */ ) {}

	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

	onBeforeCompile( /* shaderobject, renderer */ ) {}

	customProgramCacheKey() {

		return this.onBeforeCompile.toString();

	}

	setValues( values ) {

		if ( values === undefined ) return;

		for ( const key in values ) {

			const newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
				continue;

			}

			// for backward compatability if shading is set in the constructor
			if ( key === 'shading' ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( newValue === FlatShading ) ? true : false;
				continue;

			}

			const currentValue = this[ key ];

			if ( currentValue === undefined ) {

				console.warn( 'THREE.' + this.type + ': \'' + key + '\' is not a property of this material.' );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	}

	toJSON( meta ) {

		const isRoot = ( meta === undefined || typeof meta === 'string' );

		if ( isRoot ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		const data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) data.name = this.name;

		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

		if ( this.roughness !== undefined ) data.roughness = this.roughness;
		if ( this.metalness !== undefined ) data.metalness = this.metalness;

		if ( this.sheen !== undefined ) data.sheen = this.sheen;
		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
		if ( this.shininess !== undefined ) data.shininess = this.shininess;
		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

		}

		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

		}

		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

		}

		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

		if ( this.lightMap && this.lightMap.isTexture ) {

			data.lightMap = this.lightMap.toJSON( meta ).uuid;
			data.lightMapIntensity = this.lightMapIntensity;

		}

		if ( this.aoMap && this.aoMap.isTexture ) {

			data.aoMap = this.aoMap.toJSON( meta ).uuid;
			data.aoMapIntensity = this.aoMapIntensity;

		}

		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}

		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalMapType = this.normalMapType;
			data.normalScale = this.normalScale.toArray();

		}

		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}

		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;

			if ( this.combine !== undefined ) data.combine = this.combine;

		}

		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.transmission !== undefined ) data.transmission = this.transmission;
		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
		if ( this.thickness !== undefined ) data.thickness = this.thickness;
		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
		if ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;
		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

		if ( this.size !== undefined ) data.size = this.size;
		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

		if ( this.blending !== NormalBlending ) data.blending = this.blending;
		if ( this.side !== FrontSide ) data.side = this.side;
		if ( this.vertexColors ) data.vertexColors = true;

		if ( this.opacity < 1 ) data.opacity = this.opacity;
		if ( this.format !== RGBAFormat ) data.format = this.format;
		if ( this.transparent === true ) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;
		data.colorWrite = this.colorWrite;

		data.stencilWrite = this.stencilWrite;
		data.stencilWriteMask = this.stencilWriteMask;
		data.stencilFunc = this.stencilFunc;
		data.stencilRef = this.stencilRef;
		data.stencilFuncMask = this.stencilFuncMask;
		data.stencilFail = this.stencilFail;
		data.stencilZFail = this.stencilZFail;
		data.stencilZPass = this.stencilZPass;

		// rotation (SpriteMaterial)
		if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;

		if ( this.polygonOffset === true ) data.polygonOffset = true;
		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

		if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;
		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
		if ( this.scale !== undefined ) data.scale = this.scale;

		if ( this.dithering === true ) data.dithering = true;

		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
		if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

		if ( this.wireframe === true ) data.wireframe = this.wireframe;
		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

		if ( this.flatShading === true ) data.flatShading = this.flatShading;

		if ( this.visible === false ) data.visible = false;

		if ( this.toneMapped === false ) data.toneMapped = false;

		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			const values = [];

			for ( const key in cache ) {

				const data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRoot ) {

			const textures = extractFromCache( meta.textures );
			const images = extractFromCache( meta.images );

			if ( textures.length > 0 ) data.textures = textures;
			if ( images.length > 0 ) data.images = images;

		}

		return data;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.name = source.name;

		this.fog = source.fog;

		this.blending = source.blending;
		this.side = source.side;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.format = source.format;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.stencilWriteMask = source.stencilWriteMask;
		this.stencilFunc = source.stencilFunc;
		this.stencilRef = source.stencilRef;
		this.stencilFuncMask = source.stencilFuncMask;
		this.stencilFail = source.stencilFail;
		this.stencilZFail = source.stencilZFail;
		this.stencilZPass = source.stencilZPass;
		this.stencilWrite = source.stencilWrite;

		const srcPlanes = source.clippingPlanes;
		let dstPlanes = null;

		if ( srcPlanes !== null ) {

			const n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( let i = 0; i !== n; ++ i ) {

				dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

		}

		this.clippingPlanes = dstPlanes;
		this.clipIntersection = source.clipIntersection;
		this.clipShadows = source.clipShadows;

		this.shadowSide = source.shadowSide;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.alphaToCoverage = source.alphaToCoverage;
		this.premultipliedAlpha = source.premultipliedAlpha;

		this.visible = source.visible;

		this.toneMapped = source.toneMapped;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

}

Material.prototype.isMaterial = true;

const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

const _hslA = { h: 0, s: 0, l: 0 };
const _hslB = { h: 0, s: 0, l: 0 };

function hue2rgb( p, q, t ) {

	if ( t < 0 ) t += 1;
	if ( t > 1 ) t -= 1;
	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
	if ( t < 1 / 2 ) return q;
	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
	return p;

}

function SRGBToLinear( c ) {

	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

}

function LinearToSRGB( c ) {

	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

}

class Color {

	constructor( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	set( value ) {

		if ( value && value.isColor ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	}

	setScalar( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	}

	setHex( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	}

	setRGB( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	}

	setHSL( h, s, l ) {

		// h,s,l ranges are in 0.0 - 1.0
		h = euclideanModulo( h, 1 );
		s = clamp( s, 0, 1 );
		l = clamp( l, 0, 1 );

		if ( s === 0 ) {

			this.r = this.g = this.b = l;

		} else {

			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
			const q = ( 2 * l ) - p;

			this.r = hue2rgb( q, p, h + 1 / 3 );
			this.g = hue2rgb( q, p, h );
			this.b = hue2rgb( q, p, h - 1 / 3 );

		}

		return this;

	}

	setStyle( style ) {

		function handleAlpha( string ) {

			if ( string === undefined ) return;

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		let m;

		if ( m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			let color;
			const name = m[ 1 ];
			const components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

						handleAlpha( color[ 4 ] );

						return this;

					}

					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

						handleAlpha( color[ 4 ] );

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						const h = parseFloat( color[ 1 ] ) / 360;
						const s = parseInt( color[ 2 ], 10 ) / 100;
						const l = parseInt( color[ 3 ], 10 ) / 100;

						handleAlpha( color[ 4 ] );

						return this.setHSL( h, s, l );

					}

					break;

			}

		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

			// hex color

			const hex = m[ 1 ];
			const size = hex.length;

			if ( size === 3 ) {

				// #ff0
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

				return this;

			} else if ( size === 6 ) {

				// #ff0000
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

				return this;

			}

		}

		if ( style && style.length > 0 ) {

			return this.setColorName( style );

		}

		return this;

	}

	setColorName( style ) {

		// color keywords
		const hex = _colorKeywords[ style.toLowerCase() ];

		if ( hex !== undefined ) {

			// red
			this.setHex( hex );

		} else {

			// unknown color
			console.warn( 'THREE.Color: Unknown color ' + style );

		}

		return this;

	}

	clone() {

		return new this.constructor( this.r, this.g, this.b );

	}

	copy( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	}

	copyGammaToLinear( color, gammaFactor = 2.0 ) {

		this.r = Math.pow( color.r, gammaFactor );
		this.g = Math.pow( color.g, gammaFactor );
		this.b = Math.pow( color.b, gammaFactor );

		return this;

	}

	copyLinearToGamma( color, gammaFactor = 2.0 ) {

		const safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

		this.r = Math.pow( color.r, safeInverse );
		this.g = Math.pow( color.g, safeInverse );
		this.b = Math.pow( color.b, safeInverse );

		return this;

	}

	convertGammaToLinear( gammaFactor ) {

		this.copyGammaToLinear( this, gammaFactor );

		return this;

	}

	convertLinearToGamma( gammaFactor ) {

		this.copyLinearToGamma( this, gammaFactor );

		return this;

	}

	copySRGBToLinear( color ) {

		this.r = SRGBToLinear( color.r );
		this.g = SRGBToLinear( color.g );
		this.b = SRGBToLinear( color.b );

		return this;

	}

	copyLinearToSRGB( color ) {

		this.r = LinearToSRGB( color.r );
		this.g = LinearToSRGB( color.g );
		this.b = LinearToSRGB( color.b );

		return this;

	}

	convertSRGBToLinear() {

		this.copySRGBToLinear( this );

		return this;

	}

	convertLinearToSRGB() {

		this.copyLinearToSRGB( this );

		return this;

	}

	getHex() {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	}

	getHexString() {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	}

	getHSL( target ) {

		// h,s,l ranges are in 0.0 - 1.0

		const r = this.r, g = this.g, b = this.b;

		const max = Math.max( r, g, b );
		const min = Math.min( r, g, b );

		let hue, saturation;
		const lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			const delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		target.h = hue;
		target.s = saturation;
		target.l = lightness;

		return target;

	}

	getStyle() {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	}

	offsetHSL( h, s, l ) {

		this.getHSL( _hslA );

		_hslA.h += h; _hslA.s += s; _hslA.l += l;

		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

		return this;

	}

	add( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	}

	addColors( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	}

	addScalar( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	}

	sub( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	}

	multiply( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	}

	multiplyScalar( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	}

	lerp( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	}

	lerpColors( color1, color2, alpha ) {

		this.r = color1.r + ( color2.r - color1.r ) * alpha;
		this.g = color1.g + ( color2.g - color1.g ) * alpha;
		this.b = color1.b + ( color2.b - color1.b ) * alpha;

		return this;

	}

	lerpHSL( color, alpha ) {

		this.getHSL( _hslA );
		color.getHSL( _hslB );

		const h = lerp( _hslA.h, _hslB.h, alpha );
		const s = lerp( _hslA.s, _hslB.s, alpha );
		const l = lerp( _hslA.l, _hslB.l, alpha );

		this.setHSL( h, s, l );

		return this;

	}

	equals( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	}

	fromArray( array, offset = 0 ) {

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.r = attribute.getX( index );
		this.g = attribute.getY( index );
		this.b = attribute.getZ( index );

		if ( attribute.normalized === true ) {

			// assuming Uint8Array

			this.r /= 255;
			this.g /= 255;
			this.b /= 255;

		}

		return this;

	}

	toJSON() {

		return this.getHex();

	}

}

Color.NAMES = _colorKeywords;

Color.prototype.isColor = true;
Color.prototype.r = 1;
Color.prototype.g = 1;
Color.prototype.b = 1;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */

class MeshBasicMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		return this;

	}

}

MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

const _vector$9 = /*@__PURE__*/ new Vector3();
const _vector2$1 = /*@__PURE__*/ new Vector2();

class BufferAttribute {

	constructor( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	onUploadCallback() {}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	setUsage( value ) {

		this.usage = value;

		return this;

	}

	copy( source ) {

		this.name = source.name;
		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.usage = source.usage;

		return this;

	}

	copyAt( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	}

	copyArray( array ) {

		this.array.set( array );

		return this;

	}

	copyColorsArray( colors ) {

		const array = this.array;
		let offset = 0;

		for ( let i = 0, l = colors.length; i < l; i ++ ) {

			let color = colors[ i ];

			if ( color === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
				color = new Color();

			}

			array[ offset ++ ] = color.r;
			array[ offset ++ ] = color.g;
			array[ offset ++ ] = color.b;

		}

		return this;

	}

	copyVector2sArray( vectors ) {

		const array = this.array;
		let offset = 0;

		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

			let vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
				vector = new Vector2();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;

		}

		return this;

	}

	copyVector3sArray( vectors ) {

		const array = this.array;
		let offset = 0;

		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

			let vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
				vector = new Vector3();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;

		}

		return this;

	}

	copyVector4sArray( vectors ) {

		const array = this.array;
		let offset = 0;

		for ( let i = 0, l = vectors.length; i < l; i ++ ) {

			let vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
				vector = new Vector4();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;
			array[ offset ++ ] = vector.w;

		}

		return this;

	}

	applyMatrix3( m ) {

		if ( this.itemSize === 2 ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector2$1.fromBufferAttribute( this, i );
				_vector2$1.applyMatrix3( m );

				this.setXY( i, _vector2$1.x, _vector2$1.y );

			}

		} else if ( this.itemSize === 3 ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$9.fromBufferAttribute( this, i );
				_vector$9.applyMatrix3( m );

				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

			}

		}

		return this;

	}

	applyMatrix4( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$9.x = this.getX( i );
			_vector$9.y = this.getY( i );
			_vector$9.z = this.getZ( i );

			_vector$9.applyMatrix4( m );

			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

		}

		return this;

	}

	applyNormalMatrix( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$9.x = this.getX( i );
			_vector$9.y = this.getY( i );
			_vector$9.z = this.getZ( i );

			_vector$9.applyNormalMatrix( m );

			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

		}

		return this;

	}

	transformDirection( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$9.x = this.getX( i );
			_vector$9.y = this.getY( i );
			_vector$9.z = this.getZ( i );

			_vector$9.transformDirection( m );

			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

		}

		return this;

	}

	set( value, offset = 0 ) {

		this.array.set( value, offset );

		return this;

	}

	getX( index ) {

		return this.array[ index * this.itemSize ];

	}

	setX( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	}

	getY( index ) {

		return this.array[ index * this.itemSize + 1 ];

	}

	setY( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	}

	getZ( index ) {

		return this.array[ index * this.itemSize + 2 ];

	}

	setZ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	}

	getW( index ) {

		return this.array[ index * this.itemSize + 3 ];

	}

	setW( index, w ) {

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	}

	setXY( index, x, y ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	}

	setXYZ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	}

	setXYZW( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	}

	onUpload( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

	clone() {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

	toJSON() {

		const data = {
			itemSize: this.itemSize,
			type: this.array.constructor.name,
			array: Array.prototype.slice.call( this.array ),
			normalized: this.normalized
		};

		if ( this.name !== '' ) data.name = this.name;
		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
		if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;

		return data;

	}

}

BufferAttribute.prototype.isBufferAttribute = true;

//

class Int8BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Int8Array( array ), itemSize, normalized );

	}

}

class Uint8BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint8Array( array ), itemSize, normalized );

	}

}

class Uint8ClampedBufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint8ClampedArray( array ), itemSize, normalized );

	}

}

class Int16BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Int16Array( array ), itemSize, normalized );

	}

}

class Uint16BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint16Array( array ), itemSize, normalized );

	}

}

class Int32BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Int32Array( array ), itemSize, normalized );

	}

}

class Uint32BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint32Array( array ), itemSize, normalized );

	}

}

class Float16BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint16Array( array ), itemSize, normalized );

	}

}

Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;

class Float32BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Float32Array( array ), itemSize, normalized );

	}

}

class Float64BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Float64Array( array ), itemSize, normalized );

	}

}

let _id = 0;

const _m1 = /*@__PURE__*/ new Matrix4();
const _obj = /*@__PURE__*/ new Object3D();
const _offset = /*@__PURE__*/ new Vector3();
const _box$1 = /*@__PURE__*/ new Box3();
const _boxMorphTargets = /*@__PURE__*/ new Box3();
const _vector$8 = /*@__PURE__*/ new Vector3();

class BufferGeometry extends EventDispatcher {

	constructor() {

		super();

		Object.defineProperty( this, 'id', { value: _id ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};
		this.morphTargetsRelative = false;

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	getIndex() {

		return this.index;

	}

	setIndex( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

		return this;

	}

	getAttribute( name ) {

		return this.attributes[ name ];

	}

	setAttribute( name, attribute ) {

		this.attributes[ name ] = attribute;

		return this;

	}

	deleteAttribute( name ) {

		delete this.attributes[ name ];

		return this;

	}

	hasAttribute( name ) {

		return this.attributes[ name ] !== undefined;

	}

	addGroup( start, count, materialIndex = 0 ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	}

	clearGroups() {

		this.groups = [];

	}

	setDrawRange( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	}

	applyMatrix4( matrix ) {

		const position = this.attributes.position;

		if ( position !== undefined ) {

			position.applyMatrix4( matrix );

			position.needsUpdate = true;

		}

		const normal = this.attributes.normal;

		if ( normal !== undefined ) {

			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normal.applyNormalMatrix( normalMatrix );

			normal.needsUpdate = true;

		}

		const tangent = this.attributes.tangent;

		if ( tangent !== undefined ) {

			tangent.transformDirection( matrix );

			tangent.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	}

	applyQuaternion( q ) {

		_m1.makeRotationFromQuaternion( q );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateX( angle ) {

		// rotate geometry around world x-axis

		_m1.makeRotationX( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateY( angle ) {

		// rotate geometry around world y-axis

		_m1.makeRotationY( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateZ( angle ) {

		// rotate geometry around world z-axis

		_m1.makeRotationZ( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	translate( x, y, z ) {

		// translate geometry

		_m1.makeTranslation( x, y, z );

		this.applyMatrix4( _m1 );

		return this;

	}

	scale( x, y, z ) {

		// scale geometry

		_m1.makeScale( x, y, z );

		this.applyMatrix4( _m1 );

		return this;

	}

	lookAt( vector ) {

		_obj.lookAt( vector );

		_obj.updateMatrix();

		this.applyMatrix4( _obj.matrix );

		return this;

	}

	center() {

		this.computeBoundingBox();

		this.boundingBox.getCenter( _offset ).negate();

		this.translate( _offset.x, _offset.y, _offset.z );

		return this;

	}

	setFromPoints( points ) {

		const position = [];

		for ( let i = 0, l = points.length; i < l; i ++ ) {

			const point = points[ i ];
			position.push( point.x, point.y, point.z || 0 );

		}

		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

		return this;

	}

	computeBoundingBox() {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if ( position && position.isGLBufferAttribute ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );

			this.boundingBox.set(
				new Vector3( - Infinity, - Infinity, - Infinity ),
				new Vector3( + Infinity, + Infinity, + Infinity )
			);

			return;

		}

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					_box$1.setFromBufferAttribute( morphAttribute );

					if ( this.morphTargetsRelative ) {

						_vector$8.addVectors( this.boundingBox.min, _box$1.min );
						this.boundingBox.expandByPoint( _vector$8 );

						_vector$8.addVectors( this.boundingBox.max, _box$1.max );
						this.boundingBox.expandByPoint( _vector$8 );

					} else {

						this.boundingBox.expandByPoint( _box$1.min );
						this.boundingBox.expandByPoint( _box$1.max );

					}

				}

			}

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	}

	computeBoundingSphere() {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if ( position && position.isGLBufferAttribute ) {

			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );

			this.boundingSphere.set( new Vector3(), Infinity );

			return;

		}

		if ( position ) {

			// first, find the center of the bounding sphere

			const center = this.boundingSphere.center;

			_box$1.setFromBufferAttribute( position );

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

					if ( this.morphTargetsRelative ) {

						_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );
						_box$1.expandByPoint( _vector$8 );

						_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );
						_box$1.expandByPoint( _vector$8 );

					} else {

						_box$1.expandByPoint( _boxMorphTargets.min );
						_box$1.expandByPoint( _boxMorphTargets.max );

					}

				}

			}

			_box$1.getCenter( center );

			// second, try to find a boundingSphere with a radius smaller than the
			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

			let maxRadiusSq = 0;

			for ( let i = 0, il = position.count; i < il; i ++ ) {

				_vector$8.fromBufferAttribute( position, i );

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

			}

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					const morphTargetsRelative = this.morphTargetsRelative;

					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

						_vector$8.fromBufferAttribute( morphAttribute, j );

						if ( morphTargetsRelative ) {

							_offset.fromBufferAttribute( position, j );
							_vector$8.add( _offset );

						}

						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

					}

				}

			}

			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

			if ( isNaN( this.boundingSphere.radius ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

			}

		}

	}

	computeTangents() {

		const index = this.index;
		const attributes = this.attributes;

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if ( index === null ||
			 attributes.position === undefined ||
			 attributes.normal === undefined ||
			 attributes.uv === undefined ) {

			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
			return;

		}

		const indices = index.array;
		const positions = attributes.position.array;
		const normals = attributes.normal.array;
		const uvs = attributes.uv.array;

		const nVertices = positions.length / 3;

		if ( attributes.tangent === undefined ) {

			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );

		}

		const tangents = attributes.tangent.array;

		const tan1 = [], tan2 = [];

		for ( let i = 0; i < nVertices; i ++ ) {

			tan1[ i ] = new Vector3();
			tan2[ i ] = new Vector3();

		}

		const vA = new Vector3(),
			vB = new Vector3(),
			vC = new Vector3(),

			uvA = new Vector2(),
			uvB = new Vector2(),
			uvC = new Vector2(),

			sdir = new Vector3(),
			tdir = new Vector3();

		function handleTriangle( a, b, c ) {

			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );

			uvA.fromArray( uvs, a * 2 );
			uvB.fromArray( uvs, b * 2 );
			uvC.fromArray( uvs, c * 2 );

			vB.sub( vA );
			vC.sub( vA );

			uvB.sub( uvA );
			uvC.sub( uvA );

			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

			// silently ignore degenerate uv triangles having coincident or colinear vertices

			if ( ! isFinite( r ) ) return;

			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		let groups = this.groups;

		if ( groups.length === 0 ) {

			groups = [ {
				start: 0,
				count: indices.length
			} ];

		}

		for ( let i = 0, il = groups.length; i < il; ++ i ) {

			const group = groups[ i ];

			const start = group.start;
			const count = group.count;

			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

				handleTriangle(
					indices[ j + 0 ],
					indices[ j + 1 ],
					indices[ j + 2 ]
				);

			}

		}

		const tmp = new Vector3(), tmp2 = new Vector3();
		const n = new Vector3(), n2 = new Vector3();

		function handleVertex( v ) {

			n.fromArray( normals, v * 3 );
			n2.copy( n );

			const t = tan1[ v ];

			// Gram-Schmidt orthogonalize

			tmp.copy( t );
			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

			// Calculate handedness

			tmp2.crossVectors( n2, t );
			const test = tmp2.dot( tan2[ v ] );
			const w = ( test < 0.0 ) ? - 1.0 : 1.0;

			tangents[ v * 4 ] = tmp.x;
			tangents[ v * 4 + 1 ] = tmp.y;
			tangents[ v * 4 + 2 ] = tmp.z;
			tangents[ v * 4 + 3 ] = w;

		}

		for ( let i = 0, il = groups.length; i < il; ++ i ) {

			const group = groups[ i ];

			const start = group.start;
			const count = group.count;

			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

				handleVertex( indices[ j + 0 ] );
				handleVertex( indices[ j + 1 ] );
				handleVertex( indices[ j + 2 ] );

			}

		}

	}

	computeVertexNormals() {

		const index = this.index;
		const positionAttribute = this.getAttribute( 'position' );

		if ( positionAttribute !== undefined ) {

			let normalAttribute = this.getAttribute( 'normal' );

			if ( normalAttribute === undefined ) {

				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
				this.setAttribute( 'normal', normalAttribute );

			} else {

				// reset existing normals to zero

				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

					normalAttribute.setXYZ( i, 0, 0, 0 );

				}

			}

			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
			const cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				for ( let i = 0, il = index.count; i < il; i += 3 ) {

					const vA = index.getX( i + 0 );
					const vB = index.getX( i + 1 );
					const vC = index.getX( i + 2 );

					pA.fromBufferAttribute( positionAttribute, vA );
					pB.fromBufferAttribute( positionAttribute, vB );
					pC.fromBufferAttribute( positionAttribute, vC );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					nA.fromBufferAttribute( normalAttribute, vA );
					nB.fromBufferAttribute( normalAttribute, vB );
					nC.fromBufferAttribute( normalAttribute, vC );

					nA.add( cb );
					nB.add( cb );
					nC.add( cb );

					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

					pA.fromBufferAttribute( positionAttribute, i + 0 );
					pB.fromBufferAttribute( positionAttribute, i + 1 );
					pC.fromBufferAttribute( positionAttribute, i + 2 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

				}

			}

			this.normalizeNormals();

			normalAttribute.needsUpdate = true;

		}

	}

	merge( geometry, offset ) {

		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
			return;

		}

		if ( offset === undefined ) {

			offset = 0;

			console.warn(
				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
			);

		}

		const attributes = this.attributes;

		for ( const key in attributes ) {

			if ( geometry.attributes[ key ] === undefined ) continue;

			const attribute1 = attributes[ key ];
			const attributeArray1 = attribute1.array;

			const attribute2 = geometry.attributes[ key ];
			const attributeArray2 = attribute2.array;

			const attributeOffset = attribute2.itemSize * offset;
			const length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

			for ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

				attributeArray1[ j ] = attributeArray2[ i ];

			}

		}

		return this;

	}

	normalizeNormals() {

		const normals = this.attributes.normal;

		for ( let i = 0, il = normals.count; i < il; i ++ ) {

			_vector$8.fromBufferAttribute( normals, i );

			_vector$8.normalize();

			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

		}

	}

	toNonIndexed() {

		function convertBufferAttribute( attribute, indices ) {

			const array = attribute.array;
			const itemSize = attribute.itemSize;
			const normalized = attribute.normalized;

			const array2 = new array.constructor( indices.length * itemSize );

			let index = 0, index2 = 0;

			for ( let i = 0, l = indices.length; i < l; i ++ ) {

				if ( attribute.isInterleavedBufferAttribute ) {

					index = indices[ i ] * attribute.data.stride + attribute.offset;

				} else {

					index = indices[ i ] * itemSize;

				}

				for ( let j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			return new BufferAttribute( array2, itemSize, normalized );

		}

		//

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
			return this;

		}

		const geometry2 = new BufferGeometry();

		const indices = this.index.array;
		const attributes = this.attributes;

		// attributes

		for ( const name in attributes ) {

			const attribute = attributes[ name ];

			const newAttribute = convertBufferAttribute( attribute, indices );

			geometry2.setAttribute( name, newAttribute );

		}

		// morph attributes

		const morphAttributes = this.morphAttributes;

		for ( const name in morphAttributes ) {

			const morphArray = [];
			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

				const attribute = morphAttribute[ i ];

				const newAttribute = convertBufferAttribute( attribute, indices );

				morphArray.push( newAttribute );

			}

			geometry2.morphAttributes[ name ] = morphArray;

		}

		geometry2.morphTargetsRelative = this.morphTargetsRelative;

		// groups

		const groups = this.groups;

		for ( let i = 0, l = groups.length; i < l; i ++ ) {

			const group = groups[ i ];
			geometry2.addGroup( group.start, group.count, group.materialIndex );

		}

		return geometry2;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;
		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

		if ( this.parameters !== undefined ) {

			const parameters = this.parameters;

			for ( const key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		// for simplicity the code assumes attributes are not shared across geometries, see #15811

		data.data = { attributes: {} };

		const index = this.index;

		if ( index !== null ) {

			data.data.index = {
				type: index.array.constructor.name,
				array: Array.prototype.slice.call( index.array )
			};

		}

		const attributes = this.attributes;

		for ( const key in attributes ) {

			const attribute = attributes[ key ];

			data.data.attributes[ key ] = attribute.toJSON( data.data );

		}

		const morphAttributes = {};
		let hasMorphAttributes = false;

		for ( const key in this.morphAttributes ) {

			const attributeArray = this.morphAttributes[ key ];

			const array = [];

			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

				const attribute = attributeArray[ i ];

				array.push( attribute.toJSON( data.data ) );

			}

			if ( array.length > 0 ) {

				morphAttributes[ key ] = array;

				hasMorphAttributes = true;

			}

		}

		if ( hasMorphAttributes ) {

			data.data.morphAttributes = morphAttributes;
			data.data.morphTargetsRelative = this.morphTargetsRelative;

		}

		const groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		const boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	}

	clone() {

		 return new this.constructor().copy( this );

	}

	copy( source ) {

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// used for storing cloned, shared data

		const data = {};

		// name

		this.name = source.name;

		// index

		const index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone( data ) );

		}

		// attributes

		const attributes = source.attributes;

		for ( const name in attributes ) {

			const attribute = attributes[ name ];
			this.setAttribute( name, attribute.clone( data ) );

		}

		// morph attributes

		const morphAttributes = source.morphAttributes;

		for ( const name in morphAttributes ) {

			const array = [];
			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone( data ) );

			}

			this.morphAttributes[ name ] = array;

		}

		this.morphTargetsRelative = source.morphTargetsRelative;

		// groups

		const groups = source.groups;

		for ( let i = 0, l = groups.length; i < l; i ++ ) {

			const group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		const boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		const boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		// user data

		this.userData = source.userData;

		// geometry generator parameters

		if ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

}

BufferGeometry.prototype.isBufferGeometry = true;

const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
const _ray$2 = /*@__PURE__*/ new Ray();
const _sphere$3 = /*@__PURE__*/ new Sphere();

const _vA$1 = /*@__PURE__*/ new Vector3();
const _vB$1 = /*@__PURE__*/ new Vector3();
const _vC$1 = /*@__PURE__*/ new Vector3();

const _tempA = /*@__PURE__*/ new Vector3();
const _tempB = /*@__PURE__*/ new Vector3();
const _tempC = /*@__PURE__*/ new Vector3();

const _morphA = /*@__PURE__*/ new Vector3();
const _morphB = /*@__PURE__*/ new Vector3();
const _morphC = /*@__PURE__*/ new Vector3();

const _uvA$1 = /*@__PURE__*/ new Vector2();
const _uvB$1 = /*@__PURE__*/ new Vector2();
const _uvC$1 = /*@__PURE__*/ new Vector2();

const _intersectionPoint = /*@__PURE__*/ new Vector3();
const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

class Mesh extends Object3D {

	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

		super();

		this.type = 'Mesh';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy( source ) {

		super.copy( source );

		if ( source.morphTargetInfluences !== undefined ) {

			this.morphTargetInfluences = source.morphTargetInfluences.slice();

		}

		if ( source.morphTargetDictionary !== undefined ) {

			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

		}

		this.material = source.material;
		this.geometry = source.geometry;

		return this;

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		if ( geometry.isBufferGeometry ) {

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			const morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

			}

		}

	}

	raycast( raycaster, intersects ) {

		const geometry = this.geometry;
		const material = this.material;
		const matrixWorld = this.matrixWorld;

		if ( material === undefined ) return;

		// Checking boundingSphere distance to ray

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		_sphere$3.copy( geometry.boundingSphere );
		_sphere$3.applyMatrix4( matrixWorld );

		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;

		//

		_inverseMatrix$2.copy( matrixWorld ).invert();
		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

		// Check boundingBox before continuing

		if ( geometry.boundingBox !== null ) {

			if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;

		}

		let intersection;

		if ( geometry.isBufferGeometry ) {

			const index = geometry.index;
			const position = geometry.attributes.position;
			const morphPosition = geometry.morphAttributes.position;
			const morphTargetsRelative = geometry.morphTargetsRelative;
			const uv = geometry.attributes.uv;
			const uv2 = geometry.attributes.uv2;
			const groups = geometry.groups;
			const drawRange = geometry.drawRange;

			if ( index !== null ) {

				// indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = index.getX( j );
							const b = index.getX( j + 1 );
							const c = index.getX( j + 2 );

							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = index.getX( i );
						const b = index.getX( i + 1 );
						const c = index.getX( i + 2 );

						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( position !== undefined ) {

				// non-indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = j;
							const b = j + 1;
							const c = j + 2;

							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = i;
						const b = i + 1;
						const c = i + 2;

						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			}

		} else if ( geometry.isGeometry ) {

			console.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

	}

}

Mesh.prototype.isMesh = true;

function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

	let intersect;

	if ( material.side === BackSide ) {

		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

	} else {

		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

	}

	if ( intersect === null ) return null;

	_intersectionPointWorld.copy( point );
	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

	if ( distance < raycaster.near || distance > raycaster.far ) return null;

	return {
		distance: distance,
		point: _intersectionPointWorld.clone(),
		object: object
	};

}

function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

	_vA$1.fromBufferAttribute( position, a );
	_vB$1.fromBufferAttribute( position, b );
	_vC$1.fromBufferAttribute( position, c );

	const morphInfluences = object.morphTargetInfluences;

	if ( morphPosition && morphInfluences ) {

		_morphA.set( 0, 0, 0 );
		_morphB.set( 0, 0, 0 );
		_morphC.set( 0, 0, 0 );

		for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

			const influence = morphInfluences[ i ];
			const morphAttribute = morphPosition[ i ];

			if ( influence === 0 ) continue;

			_tempA.fromBufferAttribute( morphAttribute, a );
			_tempB.fromBufferAttribute( morphAttribute, b );
			_tempC.fromBufferAttribute( morphAttribute, c );

			if ( morphTargetsRelative ) {

				_morphA.addScaledVector( _tempA, influence );
				_morphB.addScaledVector( _tempB, influence );
				_morphC.addScaledVector( _tempC, influence );

			} else {

				_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );
				_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );
				_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );

			}

		}

		_vA$1.add( _morphA );
		_vB$1.add( _morphB );
		_vC$1.add( _morphC );

	}

	if ( object.isSkinnedMesh ) {

		object.boneTransform( a, _vA$1 );
		object.boneTransform( b, _vB$1 );
		object.boneTransform( c, _vC$1 );

	}

	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

	if ( intersection ) {

		if ( uv ) {

			_uvA$1.fromBufferAttribute( uv, a );
			_uvB$1.fromBufferAttribute( uv, b );
			_uvC$1.fromBufferAttribute( uv, c );

			intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

		}

		if ( uv2 ) {

			_uvA$1.fromBufferAttribute( uv2, a );
			_uvB$1.fromBufferAttribute( uv2, b );
			_uvC$1.fromBufferAttribute( uv2, c );

			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

		}

		const face = {
			a: a,
			b: b,
			c: c,
			normal: new Vector3(),
			materialIndex: 0
		};

		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

		intersection.face = face;

	}

	return intersection;

}

class BoxGeometry extends BufferGeometry {

	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

		super();

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		const scope = this;

		// segments

		widthSegments = Math.floor( widthSegments );
		heightSegments = Math.floor( heightSegments );
		depthSegments = Math.floor( depthSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let numberOfVertices = 0;
		let groupStart = 0;

		// build each side of the box geometry

		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			const segmentWidth = width / gridX;
			const segmentHeight = height / gridY;

			const widthHalf = width / 2;
			const heightHalf = height / 2;
			const depthHalf = depth / 2;

			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;

			let vertexCounter = 0;
			let groupCount = 0;

			const vector = new Vector3();

			// generate vertices, normals and uvs

			for ( let iy = 0; iy < gridY1; iy ++ ) {

				const y = iy * segmentHeight - heightHalf;

				for ( let ix = 0; ix < gridX1; ix ++ ) {

					const x = ix * segmentWidth - widthHalf;

					// set values to correct vector component

					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer

					vertices.push( vector.x, vector.y, vector.z );

					// set values to correct vector component

					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer

					normals.push( vector.x, vector.y, vector.z );

					// uvs

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

					// counters

					vertexCounter += 1;

				}

			}

			// indices

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( let iy = 0; iy < gridY; iy ++ ) {

				for ( let ix = 0; ix < gridX; ix ++ ) {

					const a = numberOfVertices + ix + gridX1 * iy;
					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// increase counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups

			groupStart += groupCount;

			// update total number of vertices

			numberOfVertices += vertexCounter;

		}

	}

	static fromJSON( data ) {

		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

	}

}

/**
 * Uniform Utilities
 */

function cloneUniforms( src ) {

	const dst = {};

	for ( const u in src ) {

		dst[ u ] = {};

		for ( const p in src[ u ] ) {

			const property = src[ u ][ p ];

			if ( property && ( property.isColor ||
				property.isMatrix3 || property.isMatrix4 ||
				property.isVector2 || property.isVector3 || property.isVector4 ||
				property.isTexture || property.isQuaternion ) ) {

				dst[ u ][ p ] = property.clone();

			} else if ( Array.isArray( property ) ) {

				dst[ u ][ p ] = property.slice();

			} else {

				dst[ u ][ p ] = property;

			}

		}

	}

	return dst;

}

function mergeUniforms( uniforms ) {

	const merged = {};

	for ( let u = 0; u < uniforms.length; u ++ ) {

		const tmp = cloneUniforms( uniforms[ u ] );

		for ( const p in tmp ) {

			merged[ p ] = tmp[ p ];

		}

	}

	return merged;

}

// Legacy

const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */

class ShaderMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = default_vertex;
		this.fragmentShader = default_fragment;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		this.glslVersion = null;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	copy( source ) {

		super.copy( source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = cloneUniforms( source.uniforms );

		this.defines = Object.assign( {}, source.defines );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.extensions = Object.assign( {}, source.extensions );

		this.glslVersion = source.glslVersion;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.glslVersion = this.glslVersion;
		data.uniforms = {};

		for ( const name in this.uniforms ) {

			const uniform = this.uniforms[ name ];
			const value = uniform.value;

			if ( value && value.isTexture ) {

				data.uniforms[ name ] = {
					type: 't',
					value: value.toJSON( meta ).uuid
				};

			} else if ( value && value.isColor ) {

				data.uniforms[ name ] = {
					type: 'c',
					value: value.getHex()
				};

			} else if ( value && value.isVector2 ) {

				data.uniforms[ name ] = {
					type: 'v2',
					value: value.toArray()
				};

			} else if ( value && value.isVector3 ) {

				data.uniforms[ name ] = {
					type: 'v3',
					value: value.toArray()
				};

			} else if ( value && value.isVector4 ) {

				data.uniforms[ name ] = {
					type: 'v4',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix3 ) {

				data.uniforms[ name ] = {
					type: 'm3',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix4 ) {

				data.uniforms[ name ] = {
					type: 'm4',
					value: value.toArray()
				};

			} else {

				data.uniforms[ name ] = {
					value: value
				};

				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

			}

		}

		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		const extensions = {};

		for ( const key in this.extensions ) {

			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

		}

		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

		return data;

	}

}

ShaderMaterial.prototype.isShaderMaterial = true;

class Camera extends Object3D {

	constructor() {

		super();

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();

		this.projectionMatrix = new Matrix4();
		this.projectionMatrixInverse = new Matrix4();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );

		this.projectionMatrix.copy( source.projectionMatrix );
		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

		return this;

	}

	getWorldDirection( target ) {

		this.updateWorldMatrix( true, false );

		const e = this.matrixWorld.elements;

		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

	}

	updateMatrixWorld( force ) {

		super.updateMatrixWorld( force );

		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

	}

	updateWorldMatrix( updateParents, updateChildren ) {

		super.updateWorldMatrix( updateParents, updateChildren );

		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

Camera.prototype.isCamera = true;

class PerspectiveCamera extends Camera {

	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

		super();

		this.type = 'PerspectiveCamera';

		this.fov = fov;
		this.zoom = 1;

		this.near = near;
		this.far = far;
		this.focus = 10;

		this.aspect = aspect;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	}

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength( focalLength ) {

		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	}

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength() {

		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	}

	getEffectiveFOV() {

		return RAD2DEG * 2 * Math.atan(
			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

	}

	getFilmWidth() {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	}

	getFilmHeight() {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	}

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const near = this.near;
		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
		let height = 2 * top;
		let width = this.aspect * height;
		let left = - 0.5 * width;
		const view = this.view;

		if ( this.view !== null && this.view.enabled ) {

			const fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		const skew = this.filmOffset;
		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

}

PerspectiveCamera.prototype.isPerspectiveCamera = true;

const fov = 90, aspect = 1;

class CubeCamera extends Object3D {

	constructor( near, far, renderTarget ) {

		super();

		this.type = 'CubeCamera';

		if ( renderTarget.isWebGLCubeRenderTarget !== true ) {

			console.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );
			return;

		}

		this.renderTarget = renderTarget;

		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.layers = this.layers;
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.layers = this.layers;
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.layers = this.layers;
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.layers = this.layers;
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.layers = this.layers;
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.layers = this.layers;
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

	}

	update( renderer, scene ) {

		if ( this.parent === null ) this.updateMatrixWorld();

		const renderTarget = this.renderTarget;

		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

		const currentXrEnabled = renderer.xr.enabled;
		const currentRenderTarget = renderer.getRenderTarget();

		renderer.xr.enabled = false;

		const generateMipmaps = renderTarget.texture.generateMipmaps;

		renderTarget.texture.generateMipmaps = false;

		renderer.setRenderTarget( renderTarget, 0 );
		renderer.render( scene, cameraPX );

		renderer.setRenderTarget( renderTarget, 1 );
		renderer.render( scene, cameraNX );

		renderer.setRenderTarget( renderTarget, 2 );
		renderer.render( scene, cameraPY );

		renderer.setRenderTarget( renderTarget, 3 );
		renderer.render( scene, cameraNY );

		renderer.setRenderTarget( renderTarget, 4 );
		renderer.render( scene, cameraPZ );

		renderTarget.texture.generateMipmaps = generateMipmaps;

		renderer.setRenderTarget( renderTarget, 5 );
		renderer.render( scene, cameraNZ );

		renderer.setRenderTarget( currentRenderTarget );

		renderer.xr.enabled = currentXrEnabled;

	}

}

class CubeTexture extends Texture {

	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	get images() {

		return this.image;

	}

	set images( value ) {

		this.image = value;

	}

}

CubeTexture.prototype.isCubeTexture = true;

class WebGLCubeRenderTarget extends WebGLRenderTarget {

	constructor( size, options, dummy ) {

		if ( Number.isInteger( options ) ) {

			console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );

			options = dummy;

		}

		super( size, size, options );

		options = options || {};

		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

		this.texture = new CubeTexture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
		this.texture.isRenderTargetTexture = true;

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		this.texture._needsFlipEnvMap = false;

	}

	fromEquirectangularTexture( renderer, texture ) {

		this.texture.type = texture.type;
		this.texture.format = RGBAFormat; // see #18859
		this.texture.encoding = texture.encoding;

		this.texture.generateMipmaps = texture.generateMipmaps;
		this.texture.minFilter = texture.minFilter;
		this.texture.magFilter = texture.magFilter;

		const shader = {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
		};

		const geometry = new BoxGeometry( 5, 5, 5 );

		const material = new ShaderMaterial( {

			name: 'CubemapFromEquirect',

			uniforms: cloneUniforms( shader.uniforms ),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide,
			blending: NoBlending

		} );

		material.uniforms.tEquirect.value = texture;

		const mesh = new Mesh( geometry, material );

		const currentMinFilter = texture.minFilter;

		// Avoid blurred poles
		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

		const camera = new CubeCamera( 1, 10, this );
		camera.update( renderer, mesh );

		texture.minFilter = currentMinFilter;

		mesh.geometry.dispose();
		mesh.material.dispose();

		return this;

	}

	clear( renderer, color, depth, stencil ) {

		const currentRenderTarget = renderer.getRenderTarget();

		for ( let i = 0; i < 6; i ++ ) {

			renderer.setRenderTarget( this, i );

			renderer.clear( color, depth, stencil );

		}

		renderer.setRenderTarget( currentRenderTarget );

	}

}

WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

const _vector1 = /*@__PURE__*/ new Vector3();
const _vector2 = /*@__PURE__*/ new Vector3();
const _normalMatrix = /*@__PURE__*/ new Matrix3();

class Plane {

	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

		// normal is assumed to be normalized

		this.normal = normal;
		this.constant = constant;

	}

	set( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	}

	setComponents( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	}

	setFromNormalAndCoplanarPoint( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );

		return this;

	}

	setFromCoplanarPoints( a, b, c ) {

		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

		this.setFromNormalAndCoplanarPoint( normal, a );

		return this;

	}

	copy( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	}

	normalize() {

		// Note: will lead to a divide by zero if the plane is invalid.

		const inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	}

	negate() {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	}

	distanceToPoint( point ) {

		return this.normal.dot( point ) + this.constant;

	}

	distanceToSphere( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	}

	projectPoint( point, target ) {

		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

	}

	intersectLine( line, target ) {

		const direction = line.delta( _vector1 );

		const denominator = this.normal.dot( direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( this.distanceToPoint( line.start ) === 0 ) {

				return target.copy( line.start );

			}

			// Unsure if this is the correct method to handle this case.
			return null;

		}

		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

		if ( t < 0 || t > 1 ) {

			return null;

		}

		return target.copy( direction ).multiplyScalar( t ).add( line.start );

	}

	intersectsLine( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		const startSign = this.distanceToPoint( line.start );
		const endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	}

	intersectsBox( box ) {

		return box.intersectsPlane( this );

	}

	intersectsSphere( sphere ) {

		return sphere.intersectsPlane( this );

	}

	coplanarPoint( target ) {

		return target.copy( this.normal ).multiplyScalar( - this.constant );

	}

	applyMatrix4( matrix, optionalNormalMatrix ) {

		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

		this.constant = - referencePoint.dot( normal );

		return this;

	}

	translate( offset ) {

		this.constant -= offset.dot( this.normal );

		return this;

	}

	equals( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

Plane.prototype.isPlane = true;

const _sphere$2 = /*@__PURE__*/ new Sphere();
const _vector$7 = /*@__PURE__*/ new Vector3();

class Frustum {

	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

		this.planes = [ p0, p1, p2, p3, p4, p5 ];

	}

	set( p0, p1, p2, p3, p4, p5 ) {

		const planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	}

	copy( frustum ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	}

	setFromProjectionMatrix( m ) {

		const planes = this.planes;
		const me = m.elements;
		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	}

	intersectsObject( object ) {

		const geometry = object.geometry;

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

		return this.intersectsSphere( _sphere$2 );

	}

	intersectsSprite( sprite ) {

		_sphere$2.center.set( 0, 0, 0 );
		_sphere$2.radius = 0.7071067811865476;
		_sphere$2.applyMatrix4( sprite.matrixWorld );

		return this.intersectsSphere( _sphere$2 );

	}

	intersectsSphere( sphere ) {

		const planes = this.planes;
		const center = sphere.center;
		const negRadius = - sphere.radius;

		for ( let i = 0; i < 6; i ++ ) {

			const distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	}

	intersectsBox( box ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			const plane = planes[ i ];

			// corner at max distance

			_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
			_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
			_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

			if ( plane.distanceToPoint( _vector$7 ) < 0 ) {

				return false;

			}

		}

		return true;

	}

	containsPoint( point ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

function WebGLAnimation() {

	let context = null;
	let isAnimating = false;
	let animationLoop = null;
	let requestId = null;

	function onAnimationFrame( time, frame ) {

		animationLoop( time, frame );

		requestId = context.requestAnimationFrame( onAnimationFrame );

	}

	return {

		start: function () {

			if ( isAnimating === true ) return;
			if ( animationLoop === null ) return;

			requestId = context.requestAnimationFrame( onAnimationFrame );

			isAnimating = true;

		},

		stop: function () {

			context.cancelAnimationFrame( requestId );

			isAnimating = false;

		},

		setAnimationLoop: function ( callback ) {

			animationLoop = callback;

		},

		setContext: function ( value ) {

			context = value;

		}

	};

}

function WebGLAttributes( gl, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	const buffers = new WeakMap();

	function createBuffer( attribute, bufferType ) {

		const array = attribute.array;
		const usage = attribute.usage;

		const buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		let type = 5126;

		if ( array instanceof Float32Array ) {

			type = 5126;

		} else if ( array instanceof Float64Array ) {

			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

		} else if ( array instanceof Uint16Array ) {

			if ( attribute.isFloat16BufferAttribute ) {

				if ( isWebGL2 ) {

					type = 5131;

				} else {

					console.warn( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );

				}

			} else {

				type = 5123;

			}

		} else if ( array instanceof Int16Array ) {

			type = 5122;

		} else if ( array instanceof Uint32Array ) {

			type = 5125;

		} else if ( array instanceof Int32Array ) {

			type = 5124;

		} else if ( array instanceof Int8Array ) {

			type = 5120;

		} else if ( array instanceof Uint8Array ) {

			type = 5121;

		} else if ( array instanceof Uint8ClampedArray ) {

			type = 5121;

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		const array = attribute.array;
		const updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else {

			if ( isWebGL2 ) {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array, updateRange.offset, updateRange.count );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			}

			updateRange.count = - 1; // reset range

		}

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		return buffers.get( attribute );

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		const data = buffers.get( attribute );

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			buffers.delete( attribute );

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isGLBufferAttribute ) {

			const cached = buffers.get( attribute );

			if ( ! cached || cached.version < attribute.version ) {

				buffers.set( attribute, {
					buffer: attribute.buffer,
					type: attribute.type,
					bytesPerElement: attribute.elementSize,
					version: attribute.version
				} );

			}

			return;

		}

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		const data = buffers.get( attribute );

		if ( data === undefined ) {

			buffers.set( attribute, createBuffer( attribute, bufferType ) );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

class PlaneGeometry extends BufferGeometry {

	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

		super();
		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		const width_half = width / 2;
		const height_half = height / 2;

		const gridX = Math.floor( widthSegments );
		const gridY = Math.floor( heightSegments );

		const gridX1 = gridX + 1;
		const gridY1 = gridY + 1;

		const segment_width = width / gridX;
		const segment_height = height / gridY;

		//

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		for ( let iy = 0; iy < gridY1; iy ++ ) {

			const y = iy * segment_height - height_half;

			for ( let ix = 0; ix < gridX1; ix ++ ) {

				const x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		for ( let iy = 0; iy < gridY; iy ++ ) {

			for ( let ix = 0; ix < gridX; ix ++ ) {

				const a = ix + gridX1 * iy;
				const b = ix + gridX1 * ( iy + 1 );
				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				const d = ( ix + 1 ) + gridX1 * iy;

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	static fromJSON( data ) {

		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

	}

}

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "vec3 transformed = vec3( position );";

var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";

var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";

var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";

var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";

var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";

var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

const ShaderChunk = {
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	alphatest_pars_fragment: alphatest_pars_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	encodings_fragment: encodings_fragment,
	encodings_pars_fragment: encodings_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_common_pars_fragment: envmap_common_pars_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_vertex: lights_lambert_vertex,
	lights_pars_begin: lights_pars_begin,
	lights_toon_fragment: lights_toon_fragment,
	lights_toon_pars_fragment: lights_toon_pars_fragment,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_fragment_begin: lights_fragment_begin,
	lights_fragment_maps: lights_fragment_maps,
	lights_fragment_end: lights_fragment_end,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_fragment_begin: normal_fragment_begin,
	normal_fragment_maps: normal_fragment_maps,
	normal_pars_fragment: normal_pars_fragment,
	normal_pars_vertex: normal_pars_vertex,
	normal_vertex: normal_vertex,
	normalmap_pars_fragment: normalmap_pars_fragment,
	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
	clearcoat_pars_fragment: clearcoat_pars_fragment,
	output_fragment: output_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	transmission_fragment: transmission_fragment,
	transmission_pars_fragment: transmission_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	uv2_pars_fragment: uv2_pars_fragment,
	uv2_pars_vertex: uv2_pars_vertex,
	uv2_vertex: uv2_vertex,
	worldpos_vertex: worldpos_vertex,

	background_vert: vertex$g,
	background_frag: fragment$g,
	cube_vert: vertex$f,
	cube_frag: fragment$f,
	depth_vert: vertex$e,
	depth_frag: fragment$e,
	distanceRGBA_vert: vertex$d,
	distanceRGBA_frag: fragment$d,
	equirect_vert: vertex$c,
	equirect_frag: fragment$c,
	linedashed_vert: vertex$b,
	linedashed_frag: fragment$b,
	meshbasic_vert: vertex$a,
	meshbasic_frag: fragment$a,
	meshlambert_vert: vertex$9,
	meshlambert_frag: fragment$9,
	meshmatcap_vert: vertex$8,
	meshmatcap_frag: fragment$8,
	meshnormal_vert: vertex$7,
	meshnormal_frag: fragment$7,
	meshphong_vert: vertex$6,
	meshphong_frag: fragment$6,
	meshphysical_vert: vertex$5,
	meshphysical_frag: fragment$5,
	meshtoon_vert: vertex$4,
	meshtoon_frag: fragment$4,
	points_vert: vertex$3,
	points_frag: fragment$3,
	shadow_vert: vertex$2,
	shadow_frag: fragment$2,
	sprite_vert: vertex$1,
	sprite_frag: fragment$1
};

/**
 * Uniforms library for shared webgl shaders
 */

const UniformsLib = {

	common: {

		diffuse: { value: new Color( 0xffffff ) },
		opacity: { value: 1.0 },

		map: { value: null },
		uvTransform: { value: new Matrix3() },
		uv2Transform: { value: new Matrix3() },

		alphaMap: { value: null },
		alphaTest: { value: 0 }

	},

	specularmap: {

		specularMap: { value: null },

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 }, // basic, lambert, phong
		ior: { value: 1.5 }, // standard, physical
		refractionRatio: { value: 0.98 },
		maxMipLevel: { value: 0 }

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		lightProbe: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {}
		} },

		directionalLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {}
		} },

		spotLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {}
		} },

		pointLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {},
			shadowCameraNear: {},
			shadowCameraFar: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} },

		ltc_1: { value: null },
		ltc_2: { value: null }

	},

	points: {

		diffuse: { value: new Color( 0xffffff ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		alphaMap: { value: null },
		alphaTest: { value: 0 },
		uvTransform: { value: new Matrix3() }

	},

	sprite: {

		diffuse: { value: new Color( 0xffffff ) },
		opacity: { value: 1.0 },
		center: { value: new Vector2( 0.5, 0.5 ) },
		rotation: { value: 0.0 },
		map: { value: null },
		alphaMap: { value: null },
		alphaTest: { value: 0 },
		uvTransform: { value: new Matrix3() }

	}

};

const ShaderLib = {

	basic: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				specular: { value: new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				roughness: { value: 1.0 },
				metalness: { value: 0.0 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	toon: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshtoon_vert,
		fragmentShader: ShaderChunk.meshtoon_frag

	},

	matcap: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.fog,
			{
				matcap: { value: null }
			}
		] ),

		vertexShader: ShaderChunk.meshmatcap_vert,
		fragmentShader: ShaderChunk.meshmatcap_frag

	},

	points: {

		uniforms: mergeUniforms( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.meshnormal_vert,
		fragmentShader: ShaderChunk.meshnormal_frag

	},

	sprite: {

		uniforms: mergeUniforms( [
			UniformsLib.sprite,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.sprite_vert,
		fragmentShader: ShaderChunk.sprite_frag

	},

	background: {

		uniforms: {
			uvTransform: { value: new Matrix3() },
			t2D: { value: null },
		},

		vertexShader: ShaderChunk.background_vert,
		fragmentShader: ShaderChunk.background_frag

	},
	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: mergeUniforms( [
			UniformsLib.envmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: mergeUniforms( [
			UniformsLib.common,
			UniformsLib.displacementmap,
			{
				referencePosition: { value: new Vector3() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		] ),

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	},

	shadow: {

		uniforms: mergeUniforms( [
			UniformsLib.lights,
			UniformsLib.fog,
			{
				color: { value: new Color( 0x00000 ) },
				opacity: { value: 1.0 }
			},
		] ),

		vertexShader: ShaderChunk.shadow_vert,
		fragmentShader: ShaderChunk.shadow_frag

	}

};

ShaderLib.physical = {

	uniforms: mergeUniforms( [
		ShaderLib.standard.uniforms,
		{
			clearcoat: { value: 0 },
			clearcoatMap: { value: null },
			clearcoatRoughness: { value: 0 },
			clearcoatRoughnessMap: { value: null },
			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
			clearcoatNormalMap: { value: null },
			sheen: { value: 0 },
			sheenColor: { value: new Color( 0x000000 ) },
			sheenColorMap: { value: null },
			sheenRoughness: { value: 0 },
			sheenRoughnessMap: { value: null },
			transmission: { value: 0 },
			transmissionMap: { value: null },
			transmissionSamplerSize: { value: new Vector2() },
			transmissionSamplerMap: { value: null },
			thickness: { value: 0 },
			thicknessMap: { value: null },
			attenuationDistance: { value: 0 },
			attenuationColor: { value: new Color( 0x000000 ) },
			specularIntensity: { value: 0 },
			specularIntensityMap: { value: null },
			specularColor: { value: new Color( 1, 1, 1 ) },
			specularColorMap: { value: null },
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

function WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {

	const clearColor = new Color( 0x000000 );
	let clearAlpha = 0;

	let planeMesh;
	let boxMesh;

	let currentBackground = null;
	let currentBackgroundVersion = 0;
	let currentTonemapping = null;

	function render( renderList, scene ) {

		let forceClear = false;
		let background = scene.isScene === true ? scene.background : null;

		if ( background && background.isTexture ) {

			background = cubemaps.get( background );

		}

		// Ignore background in AR
		// TODO: Reconsider this.

		const xr = renderer.xr;
		const session = xr.getSession && xr.getSession();

		if ( session && session.environmentBlendMode === 'additive' ) {

			background = null;

		}

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

			if ( boxMesh === undefined ) {

				boxMesh = new Mesh(
					new BoxGeometry( 1, 1, 1 ),
					new ShaderMaterial( {
						name: 'BackgroundCubeMaterial',
						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					} )
				);

				boxMesh.geometry.deleteAttribute( 'normal' );
				boxMesh.geometry.deleteAttribute( 'uv' );

				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

					this.matrixWorld.copyPosition( camera.matrixWorld );

				};

				// enable code injection for non-built-in material
				Object.defineProperty( boxMesh.material, 'envMap', {

					get: function () {

						return this.uniforms.envMap.value;

					}

				} );

				objects.update( boxMesh );

			}

			boxMesh.material.uniforms.envMap.value = background;
			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;

			if ( currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping ) {

				boxMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}

			// push to the pre-sorted opaque render list
			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

		} else if ( background && background.isTexture ) {

			if ( planeMesh === undefined ) {

				planeMesh = new Mesh(
					new PlaneGeometry( 2, 2 ),
					new ShaderMaterial( {
						name: 'BackgroundMaterial',
						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
						vertexShader: ShaderLib.background.vertexShader,
						fragmentShader: ShaderLib.background.fragmentShader,
						side: FrontSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					} )
				);

				planeMesh.geometry.deleteAttribute( 'normal' );

				// enable code injection for non-built-in material
				Object.defineProperty( planeMesh.material, 'map', {

					get: function () {

						return this.uniforms.t2D.value;

					}

				} );

				objects.update( planeMesh );

			}

			planeMesh.material.uniforms.t2D.value = background;

			if ( background.matrixAutoUpdate === true ) {

				background.updateMatrix();

			}

			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

			if ( currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping ) {

				planeMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}


			// push to the pre-sorted opaque render list
			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

		}

	}

	function setClear( color, alpha ) {

		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha = 1 ) {

			clearColor.set( color );
			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

	const maxVertexAttributes = gl.getParameter( 34921 );

	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
	const vaoAvailable = capabilities.isWebGL2 || extension !== null;

	const bindingStates = {};

	const defaultState = createBindingState( null );
	let currentState = defaultState;

	function setup( object, material, program, geometry, index ) {

		let updateBuffers = false;

		if ( vaoAvailable ) {

			const state = getBindingState( geometry, program, material );

			if ( currentState !== state ) {

				currentState = state;
				bindVertexArrayObject( currentState.object );

			}

			updateBuffers = needsUpdate( geometry, index );

			if ( updateBuffers ) saveCache( geometry, index );

		} else {

			const wireframe = ( material.wireframe === true );

			if ( currentState.geometry !== geometry.id ||
				currentState.program !== program.id ||
				currentState.wireframe !== wireframe ) {

				currentState.geometry = geometry.id;
				currentState.program = program.id;
				currentState.wireframe = wireframe;

				updateBuffers = true;

			}

		}

		if ( object.isInstancedMesh === true ) {

			updateBuffers = true;

		}

		if ( index !== null ) {

			attributes.update( index, 34963 );

		}

		if ( updateBuffers ) {

			setupVertexAttributes( object, material, program, geometry );

			if ( index !== null ) {

				gl.bindBuffer( 34963, attributes.get( index ).buffer );

			}

		}

	}

	function createVertexArrayObject() {

		if ( capabilities.isWebGL2 ) return gl.createVertexArray();

		return extension.createVertexArrayOES();

	}

	function bindVertexArrayObject( vao ) {

		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

		return extension.bindVertexArrayOES( vao );

	}

	function deleteVertexArrayObject( vao ) {

		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

		return extension.deleteVertexArrayOES( vao );

	}

	function getBindingState( geometry, program, material ) {

		const wireframe = ( material.wireframe === true );

		let programMap = bindingStates[ geometry.id ];

		if ( programMap === undefined ) {

			programMap = {};
			bindingStates[ geometry.id ] = programMap;

		}

		let stateMap = programMap[ program.id ];

		if ( stateMap === undefined ) {

			stateMap = {};
			programMap[ program.id ] = stateMap;

		}

		let state = stateMap[ wireframe ];

		if ( state === undefined ) {

			state = createBindingState( createVertexArrayObject() );
			stateMap[ wireframe ] = state;

		}

		return state;

	}

	function createBindingState( vao ) {

		const newAttributes = [];
		const enabledAttributes = [];
		const attributeDivisors = [];

		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

			newAttributes[ i ] = 0;
			enabledAttributes[ i ] = 0;
			attributeDivisors[ i ] = 0;

		}

		return {

			// for backward compatibility on non-VAO support browser
			geometry: null,
			program: null,
			wireframe: false,

			newAttributes: newAttributes,
			enabledAttributes: enabledAttributes,
			attributeDivisors: attributeDivisors,
			object: vao,
			attributes: {},
			index: null

		};

	}

	function needsUpdate( geometry, index ) {

		const cachedAttributes = currentState.attributes;
		const geometryAttributes = geometry.attributes;

		let attributesNum = 0;

		for ( const key in geometryAttributes ) {

			const cachedAttribute = cachedAttributes[ key ];
			const geometryAttribute = geometryAttributes[ key ];

			if ( cachedAttribute === undefined ) return true;

			if ( cachedAttribute.attribute !== geometryAttribute ) return true;

			if ( cachedAttribute.data !== geometryAttribute.data ) return true;

			attributesNum ++;

		}

		if ( currentState.attributesNum !== attributesNum ) return true;

		if ( currentState.index !== index ) return true;

		return false;

	}

	function saveCache( geometry, index ) {

		const cache = {};
		const attributes = geometry.attributes;
		let attributesNum = 0;

		for ( const key in attributes ) {

			const attribute = attributes[ key ];

			const data = {};
			data.attribute = attribute;

			if ( attribute.data ) {

				data.data = attribute.data;

			}

			cache[ key ] = data;

			attributesNum ++;

		}

		currentState.attributes = cache;
		currentState.attributesNum = attributesNum;

		currentState.index = index;

	}

	function initAttributes() {

		const newAttributes = currentState.newAttributes;

		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		enableAttributeAndDivisor( attribute, 0 );

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;
		const attributeDivisors = currentState.attributeDivisors;

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;

		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {

		if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {

			gl.vertexAttribIPointer( index, size, type, stride, offset );

		} else {

			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

		}

	}

	function setupVertexAttributes( object, material, program, geometry ) {

		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

		}

		initAttributes();

		const geometryAttributes = geometry.attributes;

		const programAttributes = program.getAttributes();

		const materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( const name in programAttributes ) {

			const programAttribute = programAttributes[ name ];

			if ( programAttribute.location >= 0 ) {

				let geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute === undefined ) {

					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

				}

				if ( geometryAttribute !== undefined ) {

					const normalized = geometryAttribute.normalized;
					const size = geometryAttribute.itemSize;

					const attribute = attributes.get( geometryAttribute );

					// TODO Attribute may not be available on context restore

					if ( attribute === undefined ) continue;

					const buffer = attribute.buffer;
					const type = attribute.type;
					const bytesPerElement = attribute.bytesPerElement;

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						const data = geometryAttribute.data;
						const stride = data.stride;
						const offset = geometryAttribute.offset;

						if ( data && data.isInstancedInterleavedBuffer ) {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

							}

							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

							}

						} else {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttribute( programAttribute.location + i );

							}

						}

						gl.bindBuffer( 34962, buffer );

						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								stride * bytesPerElement,
								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement
							);

						}

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

							}

							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttribute( programAttribute.location + i );

							}

						}

						gl.bindBuffer( 34962, buffer );

						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								size * bytesPerElement,
								( size / programAttribute.locationSize ) * i * bytesPerElement
							);

						}

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					const value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								gl.vertexAttrib2fv( programAttribute.location, value );
								break;

							case 3:
								gl.vertexAttrib3fv( programAttribute.location, value );
								break;

							case 4:
								gl.vertexAttrib4fv( programAttribute.location, value );
								break;

							default:
								gl.vertexAttrib1fv( programAttribute.location, value );

						}

					}

				}

			}

		}

		disableUnusedAttributes();

	}

	function dispose() {

		reset();

		for ( const geometryId in bindingStates ) {

			const programMap = bindingStates[ geometryId ];

			for ( const programId in programMap ) {

				const stateMap = programMap[ programId ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ programId ];

			}

			delete bindingStates[ geometryId ];

		}

	}

	function releaseStatesOfGeometry( geometry ) {

		if ( bindingStates[ geometry.id ] === undefined ) return;

		const programMap = bindingStates[ geometry.id ];

		for ( const programId in programMap ) {

			const stateMap = programMap[ programId ];

			for ( const wireframe in stateMap ) {

				deleteVertexArrayObject( stateMap[ wireframe ].object );

				delete stateMap[ wireframe ];

			}

			delete programMap[ programId ];

		}

		delete bindingStates[ geometry.id ];

	}

	function releaseStatesOfProgram( program ) {

		for ( const geometryId in bindingStates ) {

			const programMap = bindingStates[ geometryId ];

			if ( programMap[ program.id ] === undefined ) continue;

			const stateMap = programMap[ program.id ];

			for ( const wireframe in stateMap ) {

				deleteVertexArrayObject( stateMap[ wireframe ].object );

				delete stateMap[ wireframe ];

			}

			delete programMap[ program.id ];

		}

	}

	function reset() {

		resetDefaultState();

		if ( currentState === defaultState ) return;

		currentState = defaultState;
		bindVertexArrayObject( currentState.object );

	}

	// for backward-compatilibity

	function resetDefaultState() {

		defaultState.geometry = null;
		defaultState.program = null;
		defaultState.wireframe = false;

	}

	return {

		setup: setup,
		reset: reset,
		resetDefaultState: resetDefaultState,
		dispose: dispose,
		releaseStatesOfGeometry: releaseStatesOfGeometry,
		releaseStatesOfProgram: releaseStatesOfProgram,

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		disableUnusedAttributes: disableUnusedAttributes

	};

}

function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		info.update( count, mode, 1 );

	}

	function renderInstances( start, count, primcount ) {

		if ( primcount === 0 ) return;

		let extension, methodName;

		if ( isWebGL2 ) {

			extension = gl;
			methodName = 'drawArraysInstanced';

		} else {

			extension = extensions.get( 'ANGLE_instanced_arrays' );
			methodName = 'drawArraysInstancedANGLE';

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		extension[ methodName ]( mode, start, count, primcount );

		info.update( count, mode, primcount );

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLCapabilities( gl, extensions, parameters ) {

	let maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	/* eslint-disable no-undef */
	const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
	/* eslint-enable no-undef */

	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	const maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );

	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

	const maxTextures = gl.getParameter( 34930 );
	const maxVertexTextures = gl.getParameter( 35660 );
	const maxTextureSize = gl.getParameter( 3379 );
	const maxCubemapSize = gl.getParameter( 34076 );

	const maxAttributes = gl.getParameter( 34921 );
	const maxVertexUniforms = gl.getParameter( 36347 );
	const maxVaryings = gl.getParameter( 36348 );
	const maxFragmentUniforms = gl.getParameter( 36349 );

	const vertexTextures = maxVertexTextures > 0;
	const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
	const floatVertexTextures = vertexTextures && floatFragmentTextures;

	const maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

	return {

		isWebGL2: isWebGL2,

		drawBuffers: drawBuffers,

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures,

		maxSamples: maxSamples

	};

}

function WebGLClipping( properties ) {

	const scope = this;

	let globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false;

	const plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function ( planes, enableLocalClipping, camera ) {

		const enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes( planes, camera, 0 );
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function () {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function () {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function ( material, camera, useCache ) {

		const planes = material.clippingPlanes,
			clipIntersection = material.clipIntersection,
			clipShadows = material.clipShadows;

		const materialProperties = properties.get( material );

		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

			// there's no local clipping

			if ( renderingShadows ) {

				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();

			}

		} else {

			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4;

			let dstArray = materialProperties.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, useCache );

			for ( let i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			materialProperties.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		const nPlanes = planes !== null ? planes.length : 0;
		let dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				const flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;
		scope.numIntersection = 0;

		return dstArray;

	}

}

function WebGLCubeMaps( renderer ) {

	let cubemaps = new WeakMap();

	function mapTextureMapping( texture, mapping ) {

		if ( mapping === EquirectangularReflectionMapping ) {

			texture.mapping = CubeReflectionMapping;

		} else if ( mapping === EquirectangularRefractionMapping ) {

			texture.mapping = CubeRefractionMapping;

		}

		return texture;

	}

	function get( texture ) {

		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {

			const mapping = texture.mapping;

			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

				if ( cubemaps.has( texture ) ) {

					const cubemap = cubemaps.get( texture ).texture;
					return mapTextureMapping( cubemap, texture.mapping );

				} else {

					const image = texture.image;

					if ( image && image.height > 0 ) {

						const currentRenderTarget = renderer.getRenderTarget();

						const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
						renderTarget.fromEquirectangularTexture( renderer, texture );
						cubemaps.set( texture, renderTarget );

						renderer.setRenderTarget( currentRenderTarget );

						texture.addEventListener( 'dispose', onTextureDispose );

						return mapTextureMapping( renderTarget.texture, texture.mapping );

					} else {

						// image not yet ready. try the conversion next frame

						return null;

					}

				}

			}

		}

		return texture;

	}

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		const cubemap = cubemaps.get( texture );

		if ( cubemap !== undefined ) {

			cubemaps.delete( texture );
			cubemap.dispose();

		}

	}

	function dispose() {

		cubemaps = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

class OrthographicCamera extends Camera {

	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

		super();

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = near;
		this.far = far;

		this.updateProjectionMatrix();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	}

	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		const cx = ( this.right + this.left ) / 2;
		const cy = ( this.top + this.bottom ) / 2;

		let left = cx - dx;
		let right = cx + dx;
		let top = cy + dy;
		let bottom = cy - dy;

		if ( this.view !== null && this.view.enabled ) {

			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

			left += scaleW * this.view.offsetX;
			right = left + scaleW * this.view.width;
			top -= scaleH * this.view.offsetY;
			bottom = top - scaleH * this.view.height;

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		return data;

	}

}

OrthographicCamera.prototype.isOrthographicCamera = true;

class RawShaderMaterial extends ShaderMaterial {

	constructor( parameters ) {

		super( parameters );

		this.type = 'RawShaderMaterial';

	}

}

RawShaderMaterial.prototype.isRawShaderMaterial = true;

const LOD_MIN = 4;
const LOD_MAX = 8;
const SIZE_MAX = Math.pow( 2, LOD_MAX );

// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES = 20;

const ENCODINGS = {
	[ LinearEncoding ]: 0,
	[ sRGBEncoding ]: 1,
	[ RGBEEncoding ]: 2,
	[ RGBM7Encoding ]: 3,
	[ RGBM16Encoding ]: 4,
	[ RGBDEncoding ]: 5,
	[ GammaEncoding ]: 6
};

const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
const { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();
const _clearColor = /*@__PURE__*/ new Color();
let _oldTarget = null;

// Golden Ratio
const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
const INV_PHI = 1 / PHI;

// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections = [
	/*@__PURE__*/ new Vector3( 1, 1, 1 ),
	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];

/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/

class PMREMGenerator {

	constructor( renderer ) {

		this._renderer = renderer;
		this._pingPongRenderTarget = null;

		this._blurMaterial = _getBlurShader( MAX_SAMPLES );
		this._equirectShader = null;
		this._cubemapShader = null;

		this._compileMaterial( this._blurMaterial );

	}

	/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */
	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

		_oldTarget = this._renderer.getRenderTarget();
		const cubeUVRenderTarget = this._allocateTargets();

		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );
		if ( sigma > 0 ) {

			this._blur( cubeUVRenderTarget, 0, 0, sigma );

		}

		this._applyPMREM( cubeUVRenderTarget );
		this._cleanup( cubeUVRenderTarget );

		return cubeUVRenderTarget;

	}

	/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromEquirectangular( equirectangular ) {

		return this._fromTexture( equirectangular );

	}

	/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromCubemap( cubemap ) {

		return this._fromTexture( cubemap );

	}

	/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileCubemapShader() {

		if ( this._cubemapShader === null ) {

			this._cubemapShader = _getCubemapShader();
			this._compileMaterial( this._cubemapShader );

		}

	}

	/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileEquirectangularShader() {

		if ( this._equirectShader === null ) {

			this._equirectShader = _getEquirectShader();
			this._compileMaterial( this._equirectShader );

		}

	}

	/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */
	dispose() {

		this._blurMaterial.dispose();

		if ( this._cubemapShader !== null ) this._cubemapShader.dispose();
		if ( this._equirectShader !== null ) this._equirectShader.dispose();

		for ( let i = 0; i < _lodPlanes.length; i ++ ) {

			_lodPlanes[ i ].dispose();

		}

	}

	// private interface

	_cleanup( outputTarget ) {

		this._pingPongRenderTarget.dispose();
		this._renderer.setRenderTarget( _oldTarget );
		outputTarget.scissorTest = false;
		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

	}

	_fromTexture( texture ) {

		_oldTarget = this._renderer.getRenderTarget();
		const cubeUVRenderTarget = this._allocateTargets( texture );
		this._textureToCubeUV( texture, cubeUVRenderTarget );
		this._applyPMREM( cubeUVRenderTarget );
		this._cleanup( cubeUVRenderTarget );

		return cubeUVRenderTarget;

	}

	_allocateTargets( texture ) { // warning: null texture is valid

		const params = {
			magFilter: NearestFilter,
			minFilter: NearestFilter,
			generateMipmaps: false,
			type: UnsignedByteType,
			format: RGBEFormat,
			encoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,
			depthBuffer: false
		};

		const cubeUVRenderTarget = _createRenderTarget( params );
		cubeUVRenderTarget.depthBuffer = texture ? false : true;
		this._pingPongRenderTarget = _createRenderTarget( params );
		return cubeUVRenderTarget;

	}

	_compileMaterial( material ) {

		const tmpMesh = new Mesh( _lodPlanes[ 0 ], material );
		this._renderer.compile( tmpMesh, _flatCamera );

	}

	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

		const fov = 90;
		const aspect = 1;
		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
		const renderer = this._renderer;

		const originalAutoClear = renderer.autoClear;
		const outputEncoding = renderer.outputEncoding;
		const toneMapping = renderer.toneMapping;
		renderer.getClearColor( _clearColor );

		renderer.toneMapping = NoToneMapping;
		renderer.outputEncoding = LinearEncoding;
		renderer.autoClear = false;

		const backgroundMaterial = new MeshBasicMaterial( {
			name: 'PMREM.Background',
			side: BackSide,
			depthWrite: false,
			depthTest: false,
		} );

		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

		let useSolidColor = false;
		const background = scene.background;

		if ( background ) {

			if ( background.isColor ) {

				backgroundMaterial.color.copy( background );
				scene.background = null;
				useSolidColor = true;

			}

		} else {

			backgroundMaterial.color.copy( _clearColor );
			useSolidColor = true;

		}

		for ( let i = 0; i < 6; i ++ ) {

			const col = i % 3;
			if ( col == 0 ) {

				cubeCamera.up.set( 0, upSign[ i ], 0 );
				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

			} else if ( col == 1 ) {

				cubeCamera.up.set( 0, 0, upSign[ i ] );
				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

			} else {

				cubeCamera.up.set( 0, upSign[ i ], 0 );
				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

			}

			_setViewport( cubeUVRenderTarget,
				col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );
			renderer.setRenderTarget( cubeUVRenderTarget );

			if ( useSolidColor ) {

				renderer.render( backgroundBox, cubeCamera );

			}

			renderer.render( scene, cubeCamera );

		}

		backgroundBox.geometry.dispose();
		backgroundBox.material.dispose();

		renderer.toneMapping = toneMapping;
		renderer.outputEncoding = outputEncoding;
		renderer.autoClear = originalAutoClear;
		scene.background = background;

	}

	_setEncoding( uniform, texture ) {

		if ( this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding ) {

			uniform.value = ENCODINGS[ LinearEncoding ];

		} else {

			uniform.value = ENCODINGS[ texture.encoding ];

		}

	}

	_textureToCubeUV( texture, cubeUVRenderTarget ) {

		const renderer = this._renderer;

		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

		if ( isCubeTexture ) {

			if ( this._cubemapShader == null ) {

				this._cubemapShader = _getCubemapShader();

			}

		} else {

			if ( this._equirectShader == null ) {

				this._equirectShader = _getEquirectShader();

			}

		}

		const material = isCubeTexture ? this._cubemapShader : this._equirectShader;
		const mesh = new Mesh( _lodPlanes[ 0 ], material );

		const uniforms = material.uniforms;

		uniforms[ 'envMap' ].value = texture;

		if ( ! isCubeTexture ) {

			uniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );

		}

		this._setEncoding( uniforms[ 'inputEncoding' ], texture );
		this._setEncoding( uniforms[ 'outputEncoding' ], cubeUVRenderTarget.texture );

		_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );

		renderer.setRenderTarget( cubeUVRenderTarget );
		renderer.render( mesh, _flatCamera );

	}

	_applyPMREM( cubeUVRenderTarget ) {

		const renderer = this._renderer;
		const autoClear = renderer.autoClear;
		renderer.autoClear = false;

		for ( let i = 1; i < TOTAL_LODS; i ++ ) {

			const sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );

			const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];

			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

		}

		renderer.autoClear = autoClear;

	}

	/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */
	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

		const pingPongRenderTarget = this._pingPongRenderTarget;

		this._halfBlur(
			cubeUVRenderTarget,
			pingPongRenderTarget,
			lodIn,
			lodOut,
			sigma,
			'latitudinal',
			poleAxis );

		this._halfBlur(
			pingPongRenderTarget,
			cubeUVRenderTarget,
			lodOut,
			lodOut,
			sigma,
			'longitudinal',
			poleAxis );

	}

	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

		const renderer = this._renderer;
		const blurMaterial = this._blurMaterial;

		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

			console.error(
				'blur direction must be either latitudinal or longitudinal!' );

		}

		// Number of standard deviations at which to cut off the discrete approximation.
		const STANDARD_DEVIATIONS = 3;

		const blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );
		const blurUniforms = blurMaterial.uniforms;

		const pixels = _sizeLods[ lodIn ] - 1;
		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
		const sigmaPixels = sigmaRadians / radiansPerPixel;
		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

		if ( samples > MAX_SAMPLES ) {

			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

		}

		const weights = [];
		let sum = 0;

		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

			const x = i / sigmaPixels;
			const weight = Math.exp( - x * x / 2 );
			weights.push( weight );

			if ( i == 0 ) {

				sum += weight;

			} else if ( i < samples ) {

				sum += 2 * weight;

			}

		}

		for ( let i = 0; i < weights.length; i ++ ) {

			weights[ i ] = weights[ i ] / sum;

		}

		blurUniforms[ 'envMap' ].value = targetIn.texture;
		blurUniforms[ 'samples' ].value = samples;
		blurUniforms[ 'weights' ].value = weights;
		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

		if ( poleAxis ) {

			blurUniforms[ 'poleAxis' ].value = poleAxis;

		}

		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
		blurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;

		this._setEncoding( blurUniforms[ 'inputEncoding' ], targetIn.texture );
		this._setEncoding( blurUniforms[ 'outputEncoding' ], targetIn.texture );

		const outputSize = _sizeLods[ lodOut ];
		const x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );
		const y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );

		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
		renderer.setRenderTarget( targetOut );
		renderer.render( blurMesh, _flatCamera );

	}

}

function _isLDR( texture ) {

	if ( texture === undefined || texture.type !== UnsignedByteType ) return false;

	return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;

}

function _createPlanes() {

	const _lodPlanes = [];
	const _sizeLods = [];
	const _sigmas = [];

	let lod = LOD_MAX;

	for ( let i = 0; i < TOTAL_LODS; i ++ ) {

		const sizeLod = Math.pow( 2, lod );
		_sizeLods.push( sizeLod );
		let sigma = 1.0 / sizeLod;

		if ( i > LOD_MAX - LOD_MIN ) {

			sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];

		} else if ( i == 0 ) {

			sigma = 0;

		}

		_sigmas.push( sigma );

		const texelSize = 1.0 / ( sizeLod - 1 );
		const min = - texelSize / 2;
		const max = 1 + texelSize / 2;
		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

		const cubeFaces = 6;
		const vertices = 6;
		const positionSize = 3;
		const uvSize = 2;
		const faceIndexSize = 1;

		const position = new Float32Array( positionSize * vertices * cubeFaces );
		const uv = new Float32Array( uvSize * vertices * cubeFaces );
		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

		for ( let face = 0; face < cubeFaces; face ++ ) {

			const x = ( face % 3 ) * 2 / 3 - 1;
			const y = face > 2 ? 0 : - 1;
			const coordinates = [
				x, y, 0,
				x + 2 / 3, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y + 1, 0
			];
			position.set( coordinates, positionSize * vertices * face );
			uv.set( uv1, uvSize * vertices * face );
			const fill = [ face, face, face, face, face, face ];
			faceIndex.set( fill, faceIndexSize * vertices * face );

		}

		const planes = new BufferGeometry();
		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
		_lodPlanes.push( planes );

		if ( lod > LOD_MIN ) {

			lod --;

		}

	}

	return { _lodPlanes, _sizeLods, _sigmas };

}

function _createRenderTarget( params ) {

	const cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );
	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
	cubeUVRenderTarget.scissorTest = true;
	return cubeUVRenderTarget;

}

function _setViewport( target, x, y, width, height ) {

	target.viewport.set( x, y, width, height );
	target.scissor.set( x, y, width, height );

}

function _getBlurShader( maxSamples ) {

	const weights = new Float32Array( maxSamples );
	const poleAxis = new Vector3( 0, 1, 0 );
	const shaderMaterial = new RawShaderMaterial( {

		name: 'SphericalGaussianBlur',

		defines: { 'n': maxSamples },

		uniforms: {
			'envMap': { value: null },
			'samples': { value: 1 },
			'weights': { value: weights },
			'latitudinal': { value: false },
			'dTheta': { value: 0 },
			'mipInt': { value: 0 },
			'poleAxis': { value: poleAxis },
			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${ _getEncodings() }

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

	return shaderMaterial;

}

function _getEquirectShader() {

	const texelSize = new Vector2( 1, 1 );
	const shaderMaterial = new RawShaderMaterial( {

		name: 'EquirectangularToCubeUV',

		uniforms: {
			'envMap': { value: null },
			'texelSize': { value: texelSize },
			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${ _getEncodings() }

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

	return shaderMaterial;

}

function _getCubemapShader() {

	const shaderMaterial = new RawShaderMaterial( {

		name: 'CubemapToCubeUV',

		uniforms: {
			'envMap': { value: null },
			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${ _getEncodings() }

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

	return shaderMaterial;

}

function _getCommonVertexShader() {

	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

}

function _getEncodings() {

	return /* glsl */`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`;

}

function WebGLCubeUVMaps( renderer ) {

	let cubeUVmaps = new WeakMap();

	let pmremGenerator = null;

	function get( texture ) {

		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {

			const mapping = texture.mapping;

			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

			if ( isEquirectMap || isCubeMap ) {

				// equirect/cube map to cubeUV conversion

				if ( cubeUVmaps.has( texture ) ) {

					return cubeUVmaps.get( texture ).texture;

				} else {

					const image = texture.image;

					if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

						const currentRenderTarget = renderer.getRenderTarget();

						if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

						const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
						cubeUVmaps.set( texture, renderTarget );

						renderer.setRenderTarget( currentRenderTarget );

						texture.addEventListener( 'dispose', onTextureDispose );

						return renderTarget.texture;

					} else {

						// image not yet ready. try the conversion next frame

						return null;

					}

				}

			}

		}

		return texture;

	}

	function isCubeTextureComplete( image ) {

		let count = 0;
		const length = 6;

		for ( let i = 0; i < length; i ++ ) {

			if ( image[ i ] !== undefined ) count ++;

		}

		return count === length;


	}

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		const cubemapUV = cubeUVmaps.get( texture );

		if ( cubemapUV !== undefined ) {

			cubeUVmaps.delete( texture );
			cubemapUV.dispose();

		}

	}

	function dispose() {

		cubeUVmaps = new WeakMap();

		if ( pmremGenerator !== null ) {

			pmremGenerator.dispose();
			pmremGenerator = null;

		}

	}

	return {
		get: get,
		dispose: dispose
	};

}

function WebGLExtensions( gl ) {

	const extensions = {};

	function getExtension( name ) {

		if ( extensions[ name ] !== undefined ) {

			return extensions[ name ];

		}

		let extension;

		switch ( name ) {

			case 'WEBGL_depth_texture':
				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
				break;

			case 'EXT_texture_filter_anisotropic':
				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
				break;

			case 'WEBGL_compressed_texture_s3tc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
				break;

			case 'WEBGL_compressed_texture_pvrtc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
				break;

			default:
				extension = gl.getExtension( name );

		}

		extensions[ name ] = extension;

		return extension;

	}

	return {

		has: function ( name ) {

			return getExtension( name ) !== null;

		},

		init: function ( capabilities ) {

			if ( capabilities.isWebGL2 ) {

				getExtension( 'EXT_color_buffer_float' );

			} else {

				getExtension( 'WEBGL_depth_texture' );
				getExtension( 'OES_texture_float' );
				getExtension( 'OES_texture_half_float' );
				getExtension( 'OES_texture_half_float_linear' );
				getExtension( 'OES_standard_derivatives' );
				getExtension( 'OES_element_index_uint' );
				getExtension( 'OES_vertex_array_object' );
				getExtension( 'ANGLE_instanced_arrays' );

			}

			getExtension( 'OES_texture_float_linear' );
			getExtension( 'EXT_color_buffer_half_float' );

		},

		get: function ( name ) {

			const extension = getExtension( name );

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			return extension;

		}

	};

}

function WebGLGeometries( gl, attributes, info, bindingStates ) {

	const geometries = {};
	const wireframeAttributes = new WeakMap();

	function onGeometryDispose( event ) {

		const geometry = event.target;

		if ( geometry.index !== null ) {

			attributes.remove( geometry.index );

		}

		for ( const name in geometry.attributes ) {

			attributes.remove( geometry.attributes[ name ] );

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		const attribute = wireframeAttributes.get( geometry );

		if ( attribute ) {

			attributes.remove( attribute );
			wireframeAttributes.delete( geometry );

		}

		bindingStates.releaseStatesOfGeometry( geometry );

		if ( geometry.isInstancedBufferGeometry === true ) {

			delete geometry._maxInstanceCount;

		}

		//

		info.memory.geometries --;

	}

	function get( object, geometry ) {

		if ( geometries[ geometry.id ] === true ) return geometry;

		geometry.addEventListener( 'dispose', onGeometryDispose );

		geometries[ geometry.id ] = true;

		info.memory.geometries ++;

		return geometry;

	}

	function update( geometry ) {

		const geometryAttributes = geometry.attributes;

		// Updating index buffer in VAO now. See WebGLBindingStates.

		for ( const name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], 34962 );

		}

		// morph targets

		const morphAttributes = geometry.morphAttributes;

		for ( const name in morphAttributes ) {

			const array = morphAttributes[ name ];

			for ( let i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], 34962 );

			}

		}

	}

	function updateWireframeAttribute( geometry ) {

		const indices = [];

		const geometryIndex = geometry.index;
		const geometryPosition = geometry.attributes.position;
		let version = 0;

		if ( geometryIndex !== null ) {

			const array = geometryIndex.array;
			version = geometryIndex.version;

			for ( let i = 0, l = array.length; i < l; i += 3 ) {

				const a = array[ i + 0 ];
				const b = array[ i + 1 ];
				const c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else {

			const array = geometryPosition.array;
			version = geometryPosition.version;

			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				const a = i + 0;
				const b = i + 1;
				const c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		}

		const attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
		attribute.version = version;

		// Updating index buffer in VAO now. See WebGLBindingStates

		//

		const previousAttribute = wireframeAttributes.get( geometry );

		if ( previousAttribute ) attributes.remove( previousAttribute );

		//

		wireframeAttributes.set( geometry, attribute );

	}

	function getWireframeAttribute( geometry ) {

		const currentAttribute = wireframeAttributes.get( geometry );

		if ( currentAttribute ) {

			const geometryIndex = geometry.index;

			if ( geometryIndex !== null ) {

				// if the attribute is obsolete, create a new one

				if ( currentAttribute.version < geometryIndex.version ) {

					updateWireframeAttribute( geometry );

				}

			}

		} else {

			updateWireframeAttribute( geometry );

		}

		return wireframeAttributes.get( geometry );

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode( value ) {

		mode = value;

	}

	let type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		info.update( count, mode, 1 );

	}

	function renderInstances( start, count, primcount ) {

		if ( primcount === 0 ) return;

		let extension, methodName;

		if ( isWebGL2 ) {

			extension = gl;
			methodName = 'drawElementsInstanced';

		} else {

			extension = extensions.get( 'ANGLE_instanced_arrays' );
			methodName = 'drawElementsInstancedANGLE';

			if ( extension === null ) {

				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

		info.update( count, mode, primcount );

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLInfo( gl ) {

	const memory = {
		geometries: 0,
		textures: 0
	};

	const render = {
		frame: 0,
		calls: 0,
		triangles: 0,
		points: 0,
		lines: 0
	};

	function update( count, mode, instanceCount ) {

		render.calls ++;

		switch ( mode ) {

			case 4:
				render.triangles += instanceCount * ( count / 3 );
				break;

			case 1:
				render.lines += instanceCount * ( count / 2 );
				break;

			case 3:
				render.lines += instanceCount * ( count - 1 );
				break;

			case 2:
				render.lines += instanceCount * count;
				break;

			case 0:
				render.points += instanceCount * count;
				break;

			default:
				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
				break;

		}

	}

	function reset() {

		render.frame ++;
		render.calls = 0;
		render.triangles = 0;
		render.points = 0;
		render.lines = 0;

	}

	return {
		memory: memory,
		render: render,
		programs: null,
		autoReset: true,
		reset: reset,
		update: update
	};

}

class DataTexture2DArray extends Texture {

	constructor( data = null, width = 1, height = 1, depth = 1 ) {

		super( null );

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

		this.needsUpdate = true;

	}

}

DataTexture2DArray.prototype.isDataTexture2DArray = true;

function numericalSort( a, b ) {

	return a[ 0 ] - b[ 0 ];

}

function absNumericalSort( a, b ) {

	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

}

function denormalize( morph, attribute ) {

	let denominator = 1;
	const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;

	if ( array instanceof Int8Array ) denominator = 127;
	else if ( array instanceof Int16Array ) denominator = 32767;
	else if ( array instanceof Int32Array ) denominator = 2147483647;
	else console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );

	morph.divideScalar( denominator );

}

function WebGLMorphtargets( gl, capabilities, textures ) {

	const influencesList = {};
	const morphInfluences = new Float32Array( 8 );
	const morphTextures = new WeakMap();
	const morph = new Vector3();

	const workInfluences = [];

	for ( let i = 0; i < 8; i ++ ) {

		workInfluences[ i ] = [ i, 0 ];

	}

	function update( object, geometry, material, program ) {

		const objectInfluences = object.morphTargetInfluences;

		if ( capabilities.isWebGL2 === true ) {

			// instead of using attributes, the WebGL 2 code path encodes morph targets
			// into an array of data textures. Each layer represents a single morph target.

			const numberOfMorphTargets = geometry.morphAttributes.position.length;

			let entry = morphTextures.get( geometry );

			if ( entry === undefined || entry.count !== numberOfMorphTargets ) {

				if ( entry !== undefined ) entry.texture.dispose();

				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;

				const morphTargets = geometry.morphAttributes.position;
				const morphNormals = geometry.morphAttributes.normal || [];

				const numberOfVertices = geometry.attributes.position.count;
				const numberOfVertexData = ( hasMorphNormals === true ) ? 2 : 1; // (v,n) vs. (v)

				let width = numberOfVertices * numberOfVertexData;
				let height = 1;

				if ( width > capabilities.maxTextureSize ) {

					height = Math.ceil( width / capabilities.maxTextureSize );
					width = capabilities.maxTextureSize;

				}

				const buffer = new Float32Array( width * height * 4 * numberOfMorphTargets );

				const texture = new DataTexture2DArray( buffer, width, height, numberOfMorphTargets );
				texture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)
				texture.type = FloatType;

				// fill buffer

				const vertexDataStride = numberOfVertexData * 4;

				for ( let i = 0; i < numberOfMorphTargets; i ++ ) {

					const morphTarget = morphTargets[ i ];
					const morphNormal = morphNormals[ i ];

					const offset = width * height * 4 * i;

					for ( let j = 0; j < morphTarget.count; j ++ ) {

						morph.fromBufferAttribute( morphTarget, j );

						if ( morphTarget.normalized === true ) denormalize( morph, morphTarget );

						const stride = j * vertexDataStride;

						buffer[ offset + stride + 0 ] = morph.x;
						buffer[ offset + stride + 1 ] = morph.y;
						buffer[ offset + stride + 2 ] = morph.z;
						buffer[ offset + stride + 3 ] = 0;

						if ( hasMorphNormals === true ) {

							morph.fromBufferAttribute( morphNormal, j );

							if ( morphNormal.normalized === true ) denormalize( morph, morphNormal );

							buffer[ offset + stride + 4 ] = morph.x;
							buffer[ offset + stride + 5 ] = morph.y;
							buffer[ offset + stride + 6 ] = morph.z;
							buffer[ offset + stride + 7 ] = 0;

						}

					}

				}

				entry = {
					count: numberOfMorphTargets,
					texture: texture,
					size: new Vector2( width, height )
				};

				morphTextures.set( geometry, entry );

			}

			//

			let morphInfluencesSum = 0;

			for ( let i = 0; i < objectInfluences.length; i ++ ) {

				morphInfluencesSum += objectInfluences[ i ];

			}

			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

			program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
			program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );


		} else {

			// When object doesn't have morph target influences defined, we treat it as a 0-length array
			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

			const length = objectInfluences === undefined ? 0 : objectInfluences.length;

			let influences = influencesList[ geometry.id ];

			if ( influences === undefined || influences.length !== length ) {

				// initialise list

				influences = [];

				for ( let i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			// Collect influences

			for ( let i = 0; i < length; i ++ ) {

				const influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			for ( let i = 0; i < 8; i ++ ) {

				if ( i < length && influences[ i ][ 1 ] ) {

					workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
					workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

				} else {

					workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
					workInfluences[ i ][ 1 ] = 0;

				}

			}

			workInfluences.sort( numericalSort );

			const morphTargets = geometry.morphAttributes.position;
			const morphNormals = geometry.morphAttributes.normal;

			let morphInfluencesSum = 0;

			for ( let i = 0; i < 8; i ++ ) {

				const influence = workInfluences[ i ];
				const index = influence[ 0 ];
				const value = influence[ 1 ];

				if ( index !== Number.MAX_SAFE_INTEGER && value ) {

					if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

						geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

					}

					if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

						geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

					}

					morphInfluences[ i ] = value;
					morphInfluencesSum += value;

				} else {

					if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {

						geometry.deleteAttribute( 'morphTarget' + i );

					}

					if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {

						geometry.deleteAttribute( 'morphNormal' + i );

					}

					morphInfluences[ i ] = 0;

				}

			}

			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

	}

	return {

		update: update

	};

}

function WebGLObjects( gl, geometries, attributes, info ) {

	let updateMap = new WeakMap();

	function update( object ) {

		const frame = info.render.frame;

		const geometry = object.geometry;
		const buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateMap.get( buffergeometry ) !== frame ) {

			geometries.update( buffergeometry );

			updateMap.set( buffergeometry, frame );

		}

		if ( object.isInstancedMesh ) {

			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

				object.addEventListener( 'dispose', onInstancedMeshDispose );

			}

			attributes.update( object.instanceMatrix, 34962 );

			if ( object.instanceColor !== null ) {

				attributes.update( object.instanceColor, 34962 );

			}

		}

		return buffergeometry;

	}

	function dispose() {

		updateMap = new WeakMap();

	}

	function onInstancedMeshDispose( event ) {

		const instancedMesh = event.target;

		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

		attributes.remove( instancedMesh.instanceMatrix );

		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

	}

	return {

		update: update,
		dispose: dispose

	};

}

class DataTexture3D extends Texture {

	constructor( data = null, width = 1, height = 1, depth = 1 ) {

		// We're going to add .setXXX() methods for setting properties later.
		// Users can still set in DataTexture3D directly.
		//
		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
		// 	texture.anisotropy = 16;
		//
		// See #14839

		super( null );

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

		this.needsUpdate = true;

	}

}

DataTexture3D.prototype.isDataTexture3D = true;

/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

const emptyTexture = new Texture();
const emptyTexture2dArray = new DataTexture2DArray();
const emptyTexture3d = new DataTexture3D();
const emptyCubeTexture = new CubeTexture();

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

const arrayCacheF32 = [];
const arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

const mat4array = new Float32Array( 16 );
const mat3array = new Float32Array( 9 );
const mat2array = new Float32Array( 4 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	const firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	const n = nBlocks * blockSize;
	let r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

function arraysEqual( a, b ) {

	if ( a.length !== b.length ) return false;

	for ( let i = 0, l = a.length; i < l; i ++ ) {

		if ( a[ i ] !== b[ i ] ) return false;

	}

	return true;

}

function copyArray( a, b ) {

	for ( let i = 0, l = b.length; i < l; i ++ ) {

		a[ i ] = b[ i ];

	}

}

// Texture unit allocation

function allocTexUnits( textures, n ) {

	let r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( let i = 0; i !== n; ++ i ) {

		r[ i ] = textures.allocateTextureUnit();

	}

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValueV1f( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1f( this.addr, v );

	cache[ 0 ] = v;

}

// Single float vector (from flat array or THREE.VectorN)

function setValueV2f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

			gl.uniform2f( this.addr, v.x, v.y );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform2fv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV3f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

			gl.uniform3f( this.addr, v.x, v.y, v.z );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;

		}

	} else if ( v.r !== undefined ) {

		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

			gl.uniform3f( this.addr, v.r, v.g, v.b );

			cache[ 0 ] = v.r;
			cache[ 1 ] = v.g;
			cache[ 2 ] = v.b;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform3fv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV4f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;
			cache[ 3 ] = v.w;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform4fv( this.addr, v );

		copyArray( cache, v );

	}

}

// Single matrix (from flat array or THREE.MatrixN)

function setValueM2( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix2fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat2array.set( elements );

		gl.uniformMatrix2fv( this.addr, false, mat2array );

		copyArray( cache, elements );

	}

}

function setValueM3( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix3fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat3array.set( elements );

		gl.uniformMatrix3fv( this.addr, false, mat3array );

		copyArray( cache, elements );

	}

}

function setValueM4( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix4fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat4array.set( elements );

		gl.uniformMatrix4fv( this.addr, false, mat4array );

		copyArray( cache, elements );

	}

}

// Single integer / boolean

function setValueV1i( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1i( this.addr, v );

	cache[ 0 ] = v;

}

// Single integer / boolean vector (from flat array)

function setValueV2i( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform2iv( this.addr, v );

	copyArray( cache, v );

}

function setValueV3i( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform3iv( this.addr, v );

	copyArray( cache, v );

}

function setValueV4i( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform4iv( this.addr, v );

	copyArray( cache, v );

}

// Single unsigned integer

function setValueV1ui( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1ui( this.addr, v );

	cache[ 0 ] = v;

}

// Single unsigned integer vector (from flat array)

function setValueV2ui( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform2uiv( this.addr, v );

	copyArray( cache, v );

}

function setValueV3ui( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform3uiv( this.addr, v );

	copyArray( cache, v );

}

function setValueV4ui( gl, v ) {

	const cache = this.cache;

	if ( arraysEqual( cache, v ) ) return;

	gl.uniform4uiv( this.addr, v );

	copyArray( cache, v );

}


// Single texture (2D / Cube)

function setValueT1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.safeSetTexture2D( v || emptyTexture, unit );

}

function setValueT3D1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTexture3D( v || emptyTexture3d, unit );

}

function setValueT6( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.safeSetTextureCube( v || emptyCubeTexture, unit );

}

function setValueT2DArray1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTexture2DArray( v || emptyTexture2dArray, unit );

}

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValueV1f; // FLOAT
		case 0x8b50: return setValueV2f; // _VEC2
		case 0x8b51: return setValueV3f; // _VEC3
		case 0x8b52: return setValueV4f; // _VEC4

		case 0x8b5a: return setValueM2; // _MAT2
		case 0x8b5b: return setValueM3; // _MAT3
		case 0x8b5c: return setValueM4; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

		case 0x1405: return setValueV1ui; // UINT
		case 0x8dc6: return setValueV2ui; // _VEC2
		case 0x8dc7: return setValueV3ui; // _VEC3
		case 0x8dc8: return setValueV4ui; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1;

		case 0x8b5f: // SAMPLER_3D
		case 0x8dcb: // INT_SAMPLER_3D
		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
			return setValueT3D1;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6;

		case 0x8dc1: // SAMPLER_2D_ARRAY
		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
			return setValueT2DArray1;

	}

}


// Array of scalars

function setValueV1fArray( gl, v ) {

	gl.uniform1fv( this.addr, v );

}

// Array of vectors (from flat array or array of THREE.VectorN)

function setValueV2fArray( gl, v ) {

	const data = flatten( v, this.size, 2 );

	gl.uniform2fv( this.addr, data );

}

function setValueV3fArray( gl, v ) {

	const data = flatten( v, this.size, 3 );

	gl.uniform3fv( this.addr, data );

}

function setValueV4fArray( gl, v ) {

	const data = flatten( v, this.size, 4 );

	gl.uniform4fv( this.addr, data );

}

// Array of matrices (from flat array or array of THREE.MatrixN)

function setValueM2Array( gl, v ) {

	const data = flatten( v, this.size, 4 );

	gl.uniformMatrix2fv( this.addr, false, data );

}

function setValueM3Array( gl, v ) {

	const data = flatten( v, this.size, 9 );

	gl.uniformMatrix3fv( this.addr, false, data );

}

function setValueM4Array( gl, v ) {

	const data = flatten( v, this.size, 16 );

	gl.uniformMatrix4fv( this.addr, false, data );

}

// Array of integer / boolean

function setValueV1iArray( gl, v ) {

	gl.uniform1iv( this.addr, v );

}

// Array of integer / boolean vectors (from flat array)

function setValueV2iArray( gl, v ) {

	gl.uniform2iv( this.addr, v );

}

function setValueV3iArray( gl, v ) {

	gl.uniform3iv( this.addr, v );

}

function setValueV4iArray( gl, v ) {

	gl.uniform4iv( this.addr, v );

}

// Array of unsigned integer

function setValueV1uiArray( gl, v ) {

	gl.uniform1uiv( this.addr, v );

}

// Array of unsigned integer vectors (from flat array)

function setValueV2uiArray( gl, v ) {

	gl.uniform2uiv( this.addr, v );

}

function setValueV3uiArray( gl, v ) {

	gl.uniform3uiv( this.addr, v );

}

function setValueV4uiArray( gl, v ) {

	gl.uniform4uiv( this.addr, v );

}


// Array of textures (2D / Cube)

function setValueT1Array( gl, v, textures ) {

	const n = v.length;

	const units = allocTexUnits( textures, n );

	gl.uniform1iv( this.addr, units );

	for ( let i = 0; i !== n; ++ i ) {

		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT6Array( gl, v, textures ) {

	const n = v.length;

	const units = allocTexUnits( textures, n );

	gl.uniform1iv( this.addr, units );

	for ( let i = 0; i !== n; ++ i ) {

		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValueV1fArray; // FLOAT
		case 0x8b50: return setValueV2fArray; // _VEC2
		case 0x8b51: return setValueV3fArray; // _VEC3
		case 0x8b52: return setValueV4fArray; // _VEC4

		case 0x8b5a: return setValueM2Array; // _MAT2
		case 0x8b5b: return setValueM3Array; // _MAT3
		case 0x8b5c: return setValueM4Array; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

		case 0x1405: return setValueV1uiArray; // UINT
		case 0x8dc6: return setValueV2uiArray; // _VEC2
		case 0x8dc7: return setValueV3uiArray; // _VEC3
		case 0x8dc8: return setValueV4uiArray; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1Array;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6Array;

	}

}

// --- Uniform Classes ---

function SingleUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.cache = [];
	this.setValue = getSingularSetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function PureArrayUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.cache = [];
	this.size = activeInfo.size;
	this.setValue = getPureArraySetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

PureArrayUniform.prototype.updateCache = function ( data ) {

	const cache = this.cache;

	if ( data instanceof Float32Array && cache.length !== data.length ) {

		this.cache = new Float32Array( data.length );

	}

	copyArray( cache, data );

};

function StructuredUniform( id ) {

	this.id = id;

	this.seq = [];
	this.map = {};

}

StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

	const seq = this.seq;

	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

		const u = seq[ i ];
		u.setValue( gl, value[ u.id ], textures );

	}

};

// --- Top-level ---

// Parser - builds up the property tree from the path strings

const RePathPart = /(\w+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	const path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	while ( true ) {

		const match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex;

		let id = match[ 1 ];
		const idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) id = id | 0; // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
				new SingleUniform( id, activeInfo, addr ) :
				new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			const map = container.map;
			let next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

function WebGLUniforms( gl, program ) {

	this.seq = [];
	this.map = {};

	const n = gl.getProgramParameter( program, 35718 );

	for ( let i = 0; i < n; ++ i ) {

		const info = gl.getActiveUniform( program, i ),
			addr = gl.getUniformLocation( program, info.name );

		parseUniform( info, addr, this );

	}

}

WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

	const u = this.map[ name ];

	if ( u !== undefined ) u.setValue( gl, value, textures );

};

WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

	const v = object[ name ];

	if ( v !== undefined ) this.setValue( gl, name, v );

};


// Static interface

WebGLUniforms.upload = function ( gl, seq, values, textures ) {

	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

		const u = seq[ i ],
			v = values[ u.id ];

		if ( v.needsUpdate !== false ) {

			// note: always updating when .needsUpdate is undefined
			u.setValue( gl, v.value, textures );

		}

	}

};

WebGLUniforms.seqWithValue = function ( seq, values ) {

	const r = [];

	for ( let i = 0, n = seq.length; i !== n; ++ i ) {

		const u = seq[ i ];
		if ( u.id in values ) r.push( u );

	}

	return r;

};

function WebGLShader( gl, type, string ) {

	const shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	return shader;

}

let programIdCount = 0;

function addLineNumbers( string ) {

	const lines = string.split( '\n' );

	for ( let i = 0; i < lines.length; i ++ ) {

		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	}

	return lines.join( '\n' );

}

function getEncodingComponents( encoding ) {

	switch ( encoding ) {

		case LinearEncoding:
			return [ 'Linear', '( value )' ];
		case sRGBEncoding:
			return [ 'sRGB', '( value )' ];
		case RGBEEncoding:
			return [ 'RGBE', '( value )' ];
		case RGBM7Encoding:
			return [ 'RGBM', '( value, 7.0 )' ];
		case RGBM16Encoding:
			return [ 'RGBM', '( value, 16.0 )' ];
		case RGBDEncoding:
			return [ 'RGBD', '( value, 256.0 )' ];
		case GammaEncoding:
			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
		case LogLuvEncoding:
			return [ 'LogLuv', '( value )' ];
		default:
			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
			return [ 'Linear', '( value )' ];

	}

}

function getShaderErrors( gl, shader, type ) {

	const status = gl.getShaderParameter( shader, 35713 );
	const errors = gl.getShaderInfoLog( shader ).trim();

	if ( status && errors === '' ) return '';

	// --enable-privileged-webgl-extension
	// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	return type.toUpperCase() + '\n\n' + errors + '\n\n' + addLineNumbers( gl.getShaderSource( shader ) );

}

function getTexelDecodingFunction( functionName, encoding ) {

	const components = getEncodingComponents( encoding );
	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

}

function getTexelEncodingFunction( functionName, encoding ) {

	const components = getEncodingComponents( encoding );
	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

}

function getToneMappingFunction( functionName, toneMapping ) {

	let toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = 'Linear';
			break;

		case ReinhardToneMapping:
			toneMappingName = 'Reinhard';
			break;

		case CineonToneMapping:
			toneMappingName = 'OptimizedCineon';
			break;

		case ACESFilmicToneMapping:
			toneMappingName = 'ACESFilmic';
			break;

		case CustomToneMapping:
			toneMappingName = 'Custom';
			break;

		default:
			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
			toneMappingName = 'Linear';

	}

	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

}

function generateExtensions( parameters ) {

	const chunks = [
		( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	const chunks = [];

	for ( const name in defines ) {

		const value = defines[ name ];

		if ( value === false ) continue;

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program ) {

	const attributes = {};

	const n = gl.getProgramParameter( program, 35721 );

	for ( let i = 0; i < n; i ++ ) {

		const info = gl.getActiveAttrib( program, i );
		const name = info.name;

		let locationSize = 1;
		if ( info.type === 35674 ) locationSize = 2;
		if ( info.type === 35675 ) locationSize = 3;
		if ( info.type === 35676 ) locationSize = 4;

		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

		attributes[ name ] = {
			type: info.type,
			location: gl.getAttribLocation( program, name ),
			locationSize: locationSize
		};

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

}

function replaceClippingPlaneNums( string, parameters ) {

	return string
		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

}

// Resolve Includes

const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

function resolveIncludes( string ) {

	return string.replace( includePattern, includeReplacer );

}

function includeReplacer( match, include ) {

	const string = ShaderChunk[ include ];

	if ( string === undefined ) {

		throw new Error( 'Can not resolve #include <' + include + '>' );

	}

	return resolveIncludes( string );

}

// Unroll Loops

const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

function unrollLoops( string ) {

	return string
		.replace( unrollLoopPattern, loopReplacer )
		.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );

}

function deprecatedLoopReplacer( match, start, end, snippet ) {

	console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );
	return loopReplacer( match, start, end, snippet );

}

function loopReplacer( match, start, end, snippet ) {

	let string = '';

	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

		string += snippet
			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
			.replace( /UNROLLED_LOOP_INDEX/g, i );

	}

	return string;

}

//

function generatePrecision( parameters ) {

	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

	if ( parameters.precision === 'highp' ) {

		precisionstring += '\n#define HIGH_PRECISION';

	} else if ( parameters.precision === 'mediump' ) {

		precisionstring += '\n#define MEDIUM_PRECISION';

	} else if ( parameters.precision === 'lowp' ) {

		precisionstring += '\n#define LOW_PRECISION';

	}

	return precisionstring;

}

function generateShadowMapTypeDefine( parameters ) {

	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	} else if ( parameters.shadowMapType === VSMShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

	}

	return shadowMapTypeDefine;

}

function generateEnvMapTypeDefine( parameters ) {

	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

	if ( parameters.envMap ) {

		switch ( parameters.envMapMode ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
			case CubeUVRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

		}

	}

	return envMapTypeDefine;

}

function generateEnvMapModeDefine( parameters ) {

	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

	if ( parameters.envMap ) {

		switch ( parameters.envMapMode ) {

			case CubeRefractionMapping:
			case CubeUVRefractionMapping:

				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

	}

	return envMapModeDefine;

}

function generateEnvMapBlendingDefine( parameters ) {

	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

	if ( parameters.envMap ) {

		switch ( parameters.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	return envMapBlendingDefine;

}

function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

	// TODO Send this event to Three.js DevTools
	// console.log( 'WebGLProgram', cacheKey );

	const gl = renderer.getContext();

	const defines = parameters.defines;

	let vertexShader = parameters.vertexShader;
	let fragmentShader = parameters.fragmentShader;

	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
	const envMapModeDefine = generateEnvMapModeDefine( parameters );
	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


	const gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

	const customDefines = generateDefines( defines );

	const program = gl.createProgram();

	let prefixVertex, prefixFragment;
	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

	if ( parameters.isRawShaderMaterial ) {

		prefixVertex = [

			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixVertex.length > 0 ) {

			prefixVertex += '\n';

		}

		prefixFragment = [

			customExtensions,
			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixFragment.length > 0 ) {

			prefixFragment += '\n';

		}

	} else {

		prefixVertex = [

			generatePrecision( parameters ),

			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			parameters.instancing ? '#define USE_INSTANCING' : '',
			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			'#define MAX_BONES ' + parameters.maxBones,
			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',

			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

			parameters.vertexTangents ? '#define USE_TANGENT' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUvs ? '#define USE_UV' : '',
			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',
			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
			( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			'#ifdef USE_INSTANCING',

			'	attribute mat4 instanceMatrix;',

			'#endif',

			'#ifdef USE_INSTANCING_COLOR',

			'	attribute vec3 instanceColor;',

			'#endif',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_TANGENT',

			'	attribute vec4 tangent;',

			'#endif',

			'#if defined( USE_COLOR_ALPHA )',

			'	attribute vec4 color;',

			'#elif defined( USE_COLOR )',

			'	attribute vec3 color;',

			'#endif',

			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			generatePrecision( parameters ),

			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.matcap ? '#define USE_MATCAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.alphaTest ? '#define USE_ALPHATEST' : '',

			parameters.sheen ? '#define USE_SHEEN' : '',
			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.vertexTangents ? '#define USE_TANGENT' : '',
			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUvs ? '#define USE_UV' : '',
			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',
			parameters.format === RGBFormat ? '#define OPAQUE' : '',

			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
			parameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
			parameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
			parameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
			parameters.specularColorMap ? getTexelDecodingFunction( 'specularColorMapTexelToLinear', parameters.specularColorMapEncoding ) : '',
			parameters.sheenColorMap ? getTexelDecodingFunction( 'sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding ) : '',
			parameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',
			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),

			parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = resolveIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );
	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

	fragmentShader = resolveIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );
	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

	vertexShader = unrollLoops( vertexShader );
	fragmentShader = unrollLoops( fragmentShader );

	if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {

		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

		versionString = '#version 300 es\n';

		prefixVertex = [
			'precision mediump sampler2DArray;',
			'#define attribute in',
			'#define varying out',
			'#define texture2D texture'
		].join( '\n' ) + '\n' + prefixVertex;

		prefixFragment = [
			'#define varying in',
			( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',
			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
			'#define gl_FragDepthEXT gl_FragDepth',
			'#define texture2D texture',
			'#define textureCube texture',
			'#define texture2DProj textureProj',
			'#define texture2DLodEXT textureLod',
			'#define texture2DProjLodEXT textureProjLod',
			'#define textureCubeLodEXT textureLod',
			'#define texture2DGradEXT textureGrad',
			'#define texture2DProjGradEXT textureProjGrad',
			'#define textureCubeGradEXT textureGrad'
		].join( '\n' ) + '\n' + prefixFragment;

	}

	const vertexGlsl = versionString + prefixVertex + vertexShader;
	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	const glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
	const glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( parameters.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	// check for link errors
	if ( renderer.debug.checkShaderErrors ) {

		const programLog = gl.getProgramInfoLog( program ).trim();
		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

		let runnable = true;
		let haveDiagnostics = true;

		if ( gl.getProgramParameter( program, 35714 ) === false ) {

			runnable = false;

			const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
			const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

			console.error(
				'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
				'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\n\n' +
				'Program Info Log: ' + programLog + '\n' +
				vertexErrors + '\n' +
				fragmentErrors
			);

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

	}

	// Clean up

	// Crashes in iOS9 and iOS10. #18402
	// gl.detachShader( program, glVertexShader );
	// gl.detachShader( program, glFragmentShader );

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	let cachedUniforms;

	this.getUniforms = function () {

		if ( cachedUniforms === undefined ) {

			cachedUniforms = new WebGLUniforms( gl, program );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	let cachedAttributes;

	this.getAttributes = function () {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function () {

		bindingStates.releaseStatesOfProgram( this );

		gl.deleteProgram( program );
		this.program = undefined;

	};

	//

	this.name = parameters.shaderName;
	this.id = programIdCount ++;
	this.cacheKey = cacheKey;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

	const programs = [];

	const isWebGL2 = capabilities.isWebGL2;
	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
	const floatVertexTextures = capabilities.floatVertexTextures;
	const maxVertexUniforms = capabilities.maxVertexUniforms;
	const vertexTextures = capabilities.vertexTextures;

	let precision = capabilities.precision;

	const shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'toon',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		MeshMatcapMaterial: 'matcap',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow',
		SpriteMaterial: 'sprite'
	};

	const parameterNames = [
		'precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor',
		'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV',
		'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap',
		'objectSpaceNormalMap', 'tangentSpaceNormalMap',
		'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap',
		'displacementMap', 'specularMap', , 'roughnessMap', 'metalnessMap', 'gradientMap',
		'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2',
		'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning',
		'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha',
		'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights',
		'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows',
		'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights',
		'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format',
		'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding',
		'transmission', 'transmissionMap', 'thicknessMap',
		'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'
	];

	function getMaxBones( object ) {

		const skeleton = object.skeleton;
		const bones = skeleton.bones;

		if ( floatVertexTextures ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			const nVertexUniforms = maxVertexUniforms;
			const nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			const maxBones = Math.min( nVertexMatrices, bones.length );

			if ( maxBones < bones.length ) {

				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
				return 0;

			}

			return maxBones;

		}

	}

	function getTextureEncodingFromMap( map ) {

		let encoding;

		if ( map && map.isTexture ) {

			encoding = map.encoding;

		} else if ( map && map.isWebGLRenderTarget ) {

			console.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.' );
			encoding = map.texture.encoding;

		} else {

			encoding = LinearEncoding;

		}

		if ( isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding ) {

			encoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2

		}

		return encoding;

	}

	function getParameters( material, lights, shadows, scene, object ) {

		const fog = scene.fog;
		const environment = material.isMeshStandardMaterial ? scene.environment : null;

		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );

		const shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		const maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		let vertexShader, fragmentShader;

		if ( shaderID ) {

			const shader = ShaderLib[ shaderID ];

			vertexShader = shader.vertexShader;
			fragmentShader = shader.fragmentShader;

		} else {

			vertexShader = material.vertexShader;
			fragmentShader = material.fragmentShader;

		}

		const currentRenderTarget = renderer.getRenderTarget();

		const useAlphaTest = material.alphaTest > 0;
		const useClearcoat = material.clearcoat > 0;

		const parameters = {

			isWebGL2: isWebGL2,

			shaderID: shaderID,
			shaderName: material.type,

			vertexShader: vertexShader,
			fragmentShader: fragmentShader,
			defines: material.defines,

			isRawShaderMaterial: material.isRawShaderMaterial === true,
			glslVersion: material.glslVersion,

			precision: precision,

			instancing: object.isInstancedMesh === true,
			instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,

			supportsVertexTextures: vertexTextures,
			outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,
			map: !! material.map,
			mapEncoding: getTextureEncodingFromMap( material.map ),
			matcap: !! material.matcap,
			matcapEncoding: getTextureEncodingFromMap( material.matcap ),
			envMap: !! envMap,
			envMapMode: envMap && envMap.mapping,
			envMapEncoding: getTextureEncodingFromMap( envMap ),
			envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),
			lightMap: !! material.lightMap,
			lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),
			aoMap: !! material.aoMap,
			emissiveMap: !! material.emissiveMap,
			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,

			clearcoat: useClearcoat,
			clearcoatMap: useClearcoat && !! material.clearcoatMap,
			clearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,
			clearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,

			displacementMap: !! material.displacementMap,
			roughnessMap: !! material.roughnessMap,
			metalnessMap: !! material.metalnessMap,
			specularMap: !! material.specularMap,
			specularIntensityMap: !! material.specularIntensityMap,
			specularColorMap: !! material.specularColorMap,
			specularColorMapEncoding: getTextureEncodingFromMap( material.specularColorMap ),

			alphaMap: !! material.alphaMap,
			alphaTest: useAlphaTest,

			gradientMap: !! material.gradientMap,

			sheen: material.sheen > 0,
			sheenColorMap: !! material.sheenColorMap,
			sheenColorMapEncoding: getTextureEncodingFromMap( material.sheenColorMap ),
			sheenRoughnessMap: !! material.sheenRoughnessMap,

			transmission: material.transmission > 0,
			transmissionMap: !! material.transmissionMap,
			thicknessMap: !! material.thicknessMap,

			combine: material.combine,

			vertexTangents: ( !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent ),
			vertexColors: material.vertexColors,
			vertexAlphas: material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || material.sheenRoughnessMap,
			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,

			fog: !! fog,
			useFog: material.fog,
			fogExp2: ( fog && fog.isFogExp2 ),

			flatShading: !! material.flatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			skinning: object.isSkinnedMesh === true && maxBones > 0,
			maxBones: maxBones,
			useVertexTexture: floatVertexTextures,

			morphTargets: !! object.geometry && !! object.geometry.morphAttributes.position,
			morphNormals: !! object.geometry && !! object.geometry.morphAttributes.normal,
			morphTargetsCount: ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numDirLightShadows: lights.directionalShadowMap.length,
			numPointLightShadows: lights.pointShadowMap.length,
			numSpotLightShadows: lights.spotShadowMap.length,

			numClippingPlanes: clipping.numPlanes,
			numClipIntersection: clipping.numIntersection,

			format: material.format,
			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,

			index0AttributeName: material.index0AttributeName,

			extensionDerivatives: material.extensions && material.extensions.derivatives,
			extensionFragDepth: material.extensions && material.extensions.fragDepth,
			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

			rendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),
			rendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),
			rendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),

			customProgramCacheKey: material.customProgramCacheKey()

		};

		return parameters;

	}

	function getProgramCacheKey( parameters ) {

		const array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( hashString( parameters.fragmentShader ) );
			array.push( hashString( parameters.vertexShader ) );

		}

		if ( parameters.defines !== undefined ) {

			for ( const name in parameters.defines ) {

				array.push( name );
				array.push( parameters.defines[ name ] );

			}

		}

		if ( parameters.isRawShaderMaterial === false ) {

			for ( let i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			array.push( renderer.outputEncoding );
			array.push( renderer.gammaFactor );

		}

		array.push( parameters.customProgramCacheKey );

		return array.join();

	}

	function getUniforms( material ) {

		const shaderID = shaderIDs[ material.type ];
		let uniforms;

		if ( shaderID ) {

			const shader = ShaderLib[ shaderID ];
			uniforms = UniformsUtils.clone( shader.uniforms );

		} else {

			uniforms = material.uniforms;

		}

		return uniforms;

	}

	function acquireProgram( parameters, cacheKey ) {

		let program;

		// Check if code has been already compiled
		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

			const preexistingProgram = programs[ p ];

			if ( preexistingProgram.cacheKey === cacheKey ) {

				program = preexistingProgram;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
			programs.push( program );

		}

		return program;

	}

	function releaseProgram( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			const i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	}

	return {
		getParameters: getParameters,
		getProgramCacheKey: getProgramCacheKey,
		getUniforms: getUniforms,
		acquireProgram: acquireProgram,
		releaseProgram: releaseProgram,
		// Exposed for resource monitoring & error feedback via renderer.info:
		programs: programs
	};

}

function WebGLProperties() {

	let properties = new WeakMap();

	function get( object ) {

		let map = properties.get( object );

		if ( map === undefined ) {

			map = {};
			properties.set( object, map );

		}

		return map;

	}

	function remove( object ) {

		properties.delete( object );

	}

	function update( object, key, value ) {

		properties.get( object )[ key ] = value;

	}

	function dispose() {

		properties = new WeakMap();

	}

	return {
		get: get,
		remove: remove,
		update: update,
		dispose: dispose
	};

}

function painterSortStable( a, b ) {

	if ( a.groupOrder !== b.groupOrder ) {

		return a.groupOrder - b.groupOrder;

	} else if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.program !== b.program ) {

		return a.program.id - b.program.id;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.groupOrder !== b.groupOrder ) {

		return a.groupOrder - b.groupOrder;

	} else if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}


function WebGLRenderList( properties ) {

	const renderItems = [];
	let renderItemsIndex = 0;

	const opaque = [];
	const transmissive = [];
	const transparent = [];

	const defaultProgram = { id: - 1 };

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transmissive.length = 0;
		transparent.length = 0;

	}

	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

		let renderItem = renderItems[ renderItemsIndex ];
		const materialProperties = properties.get( material );

		if ( renderItem === undefined ) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				program: materialProperties.program || defaultProgram,
				groupOrder: groupOrder,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[ renderItemsIndex ] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.program = materialProperties.program || defaultProgram;
			renderItem.groupOrder = groupOrder;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		renderItemsIndex ++;

		return renderItem;

	}

	function push( object, geometry, material, groupOrder, z, group ) {

		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

		if ( material.transmission > 0.0 ) {

			transmissive.push( renderItem );

		} else if ( material.transparent === true ) {

			transparent.push( renderItem );

		} else {

			opaque.push( renderItem );

		}

	}

	function unshift( object, geometry, material, groupOrder, z, group ) {

		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

		if ( material.transmission > 0.0 ) {

			transmissive.unshift( renderItem );

		} else if ( material.transparent === true ) {

			transparent.unshift( renderItem );

		} else {

			opaque.unshift( renderItem );

		}

	}

	function sort( customOpaqueSort, customTransparentSort ) {

		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

	}

	function finish() {

		// Clear references from inactive renderItems in the list

		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

			const renderItem = renderItems[ i ];

			if ( renderItem.id === null ) break;

			renderItem.id = null;
			renderItem.object = null;
			renderItem.geometry = null;
			renderItem.material = null;
			renderItem.program = null;
			renderItem.group = null;

		}

	}

	return {

		opaque: opaque,
		transmissive: transmissive,
		transparent: transparent,

		init: init,
		push: push,
		unshift: unshift,
		finish: finish,

		sort: sort
	};

}

function WebGLRenderLists( properties ) {

	let lists = new WeakMap();

	function get( scene, renderCallDepth ) {

		let list;

		if ( lists.has( scene ) === false ) {

			list = new WebGLRenderList( properties );
			lists.set( scene, [ list ] );

		} else {

			if ( renderCallDepth >= lists.get( scene ).length ) {

				list = new WebGLRenderList( properties );
				lists.get( scene ).push( list );

			} else {

				list = lists.get( scene )[ renderCallDepth ];

			}

		}

		return list;

	}

	function dispose() {

		lists = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

function UniformsCache() {

	const lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			let uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

function ShadowUniformsCache() {

	const lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			let uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				// TODO (abelnation): set RectAreaLight shadow uniforms

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}



let nextVersion = 0;

function shadowCastingLightsFirst( lightA, lightB ) {

	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

}

function WebGLLights( extensions, capabilities ) {

	const cache = new UniformsCache();

	const shadowCache = ShadowUniformsCache();

	const state = {

		version: 0,

		hash: {
			directionalLength: - 1,
			pointLength: - 1,
			spotLength: - 1,
			rectAreaLength: - 1,
			hemiLength: - 1,

			numDirectionalShadows: - 1,
			numPointShadows: - 1,
			numSpotShadows: - 1
		},

		ambient: [ 0, 0, 0 ],
		probe: [],
		directional: [],
		directionalShadow: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotShadow: [],
		spotShadowMap: [],
		spotShadowMatrix: [],
		rectArea: [],
		rectAreaLTC1: null,
		rectAreaLTC2: null,
		point: [],
		pointShadow: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: []

	};

	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

	const vector3 = new Vector3();
	const matrix4 = new Matrix4();
	const matrix42 = new Matrix4();

	function setup( lights, physicallyCorrectLights ) {

		let r = 0, g = 0, b = 0;

		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		let numDirectionalShadows = 0;
		let numPointShadows = 0;
		let numSpotShadows = 0;

		lights.sort( shadowCastingLightsFirst );

		// artist-friendly light intensity scaling factor
		const scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;

		for ( let i = 0, l = lights.length; i < l; i ++ ) {

			const light = lights[ i ];

			const color = light.color;
			const intensity = light.intensity;
			const distance = light.distance;

			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity * scaleFactor;
				g += color.g * intensity * scaleFactor;
				b += color.b * intensity * scaleFactor;

			} else if ( light.isLightProbe ) {

				for ( let j = 0; j < 9; j ++ ) {

					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

				}

			} else if ( light.isDirectionalLight ) {

				const uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );

				if ( light.castShadow ) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.directionalShadow[ directionalLength ] = shadowUniforms;
					state.directionalShadowMap[ directionalLength ] = shadowMap;
					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

					numDirectionalShadows ++;

				}

				state.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				const uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );

				uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
				uniforms.distance = distance;

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = light.decay;

				if ( light.castShadow ) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.spotShadow[ spotLength ] = shadowUniforms;
					state.spotShadowMap[ spotLength ] = shadowMap;
					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

					numSpotShadows ++;

				}

				state.spot[ spotLength ] = uniforms;

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				const uniforms = cache.get( light );

				// (a) intensity is the total visible light emitted
				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

				// (b) intensity is the brightness of the light
				uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				state.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				const uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
				uniforms.distance = light.distance;
				uniforms.decay = light.decay;

				if ( light.castShadow ) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;
					shadowUniforms.shadowCameraNear = shadow.camera.near;
					shadowUniforms.shadowCameraFar = shadow.camera.far;

					state.pointShadow[ pointLength ] = shadowUniforms;
					state.pointShadowMap[ pointLength ] = shadowMap;
					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

					numPointShadows ++;

				}

				state.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				const uniforms = cache.get( light );

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );

				state.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		if ( rectAreaLength > 0 ) {

			if ( capabilities.isWebGL2 ) {

				// WebGL 2

				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

			} else {

				// WebGL 1

				if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

				} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {

					state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
					state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

				} else {

					console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );

				}

			}

		}

		state.ambient[ 0 ] = r;
		state.ambient[ 1 ] = g;
		state.ambient[ 2 ] = b;

		const hash = state.hash;

		if ( hash.directionalLength !== directionalLength ||
			hash.pointLength !== pointLength ||
			hash.spotLength !== spotLength ||
			hash.rectAreaLength !== rectAreaLength ||
			hash.hemiLength !== hemiLength ||
			hash.numDirectionalShadows !== numDirectionalShadows ||
			hash.numPointShadows !== numPointShadows ||
			hash.numSpotShadows !== numSpotShadows ) {

			state.directional.length = directionalLength;
			state.spot.length = spotLength;
			state.rectArea.length = rectAreaLength;
			state.point.length = pointLength;
			state.hemi.length = hemiLength;

			state.directionalShadow.length = numDirectionalShadows;
			state.directionalShadowMap.length = numDirectionalShadows;
			state.pointShadow.length = numPointShadows;
			state.pointShadowMap.length = numPointShadows;
			state.spotShadow.length = numSpotShadows;
			state.spotShadowMap.length = numSpotShadows;
			state.directionalShadowMatrix.length = numDirectionalShadows;
			state.pointShadowMatrix.length = numPointShadows;
			state.spotShadowMatrix.length = numSpotShadows;

			hash.directionalLength = directionalLength;
			hash.pointLength = pointLength;
			hash.spotLength = spotLength;
			hash.rectAreaLength = rectAreaLength;
			hash.hemiLength = hemiLength;

			hash.numDirectionalShadows = numDirectionalShadows;
			hash.numPointShadows = numPointShadows;
			hash.numSpotShadows = numSpotShadows;

			state.version = nextVersion ++;

		}

	}

	function setupView( lights, camera ) {

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		const viewMatrix = camera.matrixWorldInverse;

		for ( let i = 0, l = lights.length; i < l; i ++ ) {

			const light = lights[ i ];

			if ( light.isDirectionalLight ) {

				const uniforms = state.directional[ directionalLength ];

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				const uniforms = state.spot[ spotLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				const uniforms = state.rectArea[ rectAreaLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy( light.matrixWorld );
				matrix4.premultiply( viewMatrix );
				matrix42.extractRotation( matrix4 );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( matrix42 );
				uniforms.halfHeight.applyMatrix4( matrix42 );

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				const uniforms = state.point[ pointLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				const uniforms = state.hemi[ hemiLength ];

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );
				uniforms.direction.normalize();

				hemiLength ++;

			}

		}

	}

	return {
		setup: setup,
		setupView: setupView,
		state: state
	};

}

function WebGLRenderState( extensions, capabilities ) {

	const lights = new WebGLLights( extensions, capabilities );

	const lightsArray = [];
	const shadowsArray = [];

	function init() {

		lightsArray.length = 0;
		shadowsArray.length = 0;

	}

	function pushLight( light ) {

		lightsArray.push( light );

	}

	function pushShadow( shadowLight ) {

		shadowsArray.push( shadowLight );

	}

	function setupLights( physicallyCorrectLights ) {

		lights.setup( lightsArray, physicallyCorrectLights );

	}

	function setupLightsView( camera ) {

		lights.setupView( lightsArray, camera );

	}

	const state = {
		lightsArray: lightsArray,
		shadowsArray: shadowsArray,

		lights: lights
	};

	return {
		init: init,
		state: state,
		setupLights: setupLights,
		setupLightsView: setupLightsView,

		pushLight: pushLight,
		pushShadow: pushShadow
	};

}

function WebGLRenderStates( extensions, capabilities ) {

	let renderStates = new WeakMap();

	function get( scene, renderCallDepth = 0 ) {

		let renderState;

		if ( renderStates.has( scene ) === false ) {

			renderState = new WebGLRenderState( extensions, capabilities );
			renderStates.set( scene, [ renderState ] );

		} else {

			if ( renderCallDepth >= renderStates.get( scene ).length ) {

				renderState = new WebGLRenderState( extensions, capabilities );
				renderStates.get( scene ).push( renderState );

			} else {

				renderState = renderStates.get( scene )[ renderCallDepth ];

			}

		}

		return renderState;

	}

	function dispose() {

		renderStates = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

class MeshDepthMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.depthPacking = source.depthPacking;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	}

}

MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */

class MeshDistanceMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.fog = false;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	}

}

MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

function WebGLShadowMap( _renderer, _objects, _capabilities ) {

	let _frustum = new Frustum();

	const _shadowMapSize = new Vector2(),
		_viewportSize = new Vector2(),

		_viewport = new Vector4(),

		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
		_distanceMaterial = new MeshDistanceMaterial(),

		_materialCache = {},

		_maxTextureSize = _capabilities.maxTextureSize;

	const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

	const shadowMaterialVertical = new ShaderMaterial( {
		defines: {
			VSM_SAMPLES: 8
		},
		uniforms: {
			shadow_pass: { value: null },
			resolution: { value: new Vector2() },
			radius: { value: 4.0 }
		},

		vertexShader: vertex,
		fragmentShader: fragment

	} );

	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

	const fullScreenTri = new BufferGeometry();
	fullScreenTri.setAttribute(
		'position',
		new BufferAttribute(
			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
			3
		)
	);

	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

	const scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;

	this.render = function ( lights, scene, camera ) {

		if ( scope.enabled === false ) return;
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

		if ( lights.length === 0 ) return;

		const currentRenderTarget = _renderer.getRenderTarget();
		const activeCubeFace = _renderer.getActiveCubeFace();
		const activeMipmapLevel = _renderer.getActiveMipmapLevel();

		const _state = _renderer.state;

		// Set GL state for depth map.
		_state.setBlending( NoBlending );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// render depth map

		for ( let i = 0, il = lights.length; i < il; i ++ ) {

			const light = lights[ i ];
			const shadow = light.shadow;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

			_shadowMapSize.copy( shadow.mapSize );

			const shadowFrameExtents = shadow.getFrameExtents();

			_shadowMapSize.multiply( shadowFrameExtents );

			_viewportSize.copy( shadow.mapSize );

			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

				if ( _shadowMapSize.x > _maxTextureSize ) {

					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
					shadow.mapSize.x = _viewportSize.x;

				}

				if ( _shadowMapSize.y > _maxTextureSize ) {

					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
					shadow.mapSize.y = _viewportSize.y;

				}

			}

			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

				const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + '.shadowMap';

				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

				shadow.camera.updateProjectionMatrix();

			}

			if ( shadow.map === null ) {

				const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + '.shadowMap';

				shadow.camera.updateProjectionMatrix();

			}

			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();

			const viewportCount = shadow.getViewportCount();

			for ( let vp = 0; vp < viewportCount; vp ++ ) {

				const viewport = shadow.getViewport( vp );

				_viewport.set(
					_viewportSize.x * viewport.x,
					_viewportSize.y * viewport.y,
					_viewportSize.x * viewport.z,
					_viewportSize.y * viewport.w
				);

				_state.viewport( _viewport );

				shadow.updateMatrices( light, vp );

				_frustum = shadow.getFrustum();

				renderObject( scene, camera, shadow.camera, light, this.type );

			}

			// do blur pass for VSM

			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

				VSMPass( shadow, camera );

			}

			shadow.needsUpdate = false;

		}

		scope.needsUpdate = false;

		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

	};

	function VSMPass( shadow, camera ) {

		const geometry = _objects.update( fullScreenMesh );

		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

			shadowMaterialVertical.needsUpdate = true;
			shadowMaterialHorizontal.needsUpdate = true;

		}

		// vertical pass

		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget( shadow.mapPass );
		_renderer.clear();
		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

		// horizontal pass

		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget( shadow.map );
		_renderer.clear();
		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

	}

	function getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {

		let result = null;

		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

		if ( customMaterial !== undefined ) {

			result = customMaterial;

		} else {

			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

		}

		if ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||
			( material.displacementMap && material.displacementScale !== 0 ) ||
			( material.alphaMap && material.alphaTest > 0 ) ) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			const keyA = result.uuid, keyB = material.uuid;

			let materialsForVariant = _materialCache[ keyA ];

			if ( materialsForVariant === undefined ) {

				materialsForVariant = {};
				_materialCache[ keyA ] = materialsForVariant;

			}

			let cachedMaterial = materialsForVariant[ keyB ];

			if ( cachedMaterial === undefined ) {

				cachedMaterial = result.clone();
				materialsForVariant[ keyB ] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		if ( type === VSMShadowMap ) {

			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

		} else {

			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

		}

		result.alphaMap = material.alphaMap;
		result.alphaTest = material.alphaTest;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.displacementMap = material.displacementMap;
		result.displacementScale = material.displacementScale;
		result.displacementBias = material.displacementBias;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
			result.nearDistance = shadowCameraNear;
			result.farDistance = shadowCameraFar;

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, light, type ) {

		if ( object.visible === false ) return;

		const visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				const geometry = _objects.update( object );
				const material = object.material;

				if ( Array.isArray( material ) ) {

					const groups = geometry.groups;

					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

						const group = groups[ k ];
						const groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							const depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					const depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );

					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, light, type );

		}

	}

}

function WebGLState( gl, extensions, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	function ColorBuffer() {

		let locked = false;

		const color = new Vector4();
		let currentColorMask = null;
		const currentColorClear = new Vector4( 0, 0, 0, 0 );

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		let locked = false;

		let currentDepthMask = null;
		let currentDepthFunc = null;
		let currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( 2929 );

				} else {

					disable( 2929 );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( 512 );
								break;

							case AlwaysDepth:

								gl.depthFunc( 519 );
								break;

							case LessDepth:

								gl.depthFunc( 513 );
								break;

							case LessEqualDepth:

								gl.depthFunc( 515 );
								break;

							case EqualDepth:

								gl.depthFunc( 514 );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( 518 );
								break;

							case GreaterDepth:

								gl.depthFunc( 516 );
								break;

							case NotEqualDepth:

								gl.depthFunc( 517 );
								break;

							default:

								gl.depthFunc( 515 );

						}

					} else {

						gl.depthFunc( 515 );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		let locked = false;

		let currentStencilMask = null;
		let currentStencilFunc = null;
		let currentStencilRef = null;
		let currentStencilFuncMask = null;
		let currentStencilFail = null;
		let currentStencilZFail = null;
		let currentStencilZPass = null;
		let currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( ! locked ) {

					if ( stencilTest ) {

						enable( 2960 );

					} else {

						disable( 2960 );

					}

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef !== stencilRef ||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail !== stencilFail ||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	const colorBuffer = new ColorBuffer();
	const depthBuffer = new DepthBuffer();
	const stencilBuffer = new StencilBuffer();

	let enabledCapabilities = {};

	let xrFramebuffer = null;
	let currentBoundFramebuffers = {};

	let currentProgram = null;

	let currentBlendingEnabled = false;
	let currentBlending = null;
	let currentBlendEquation = null;
	let currentBlendSrc = null;
	let currentBlendDst = null;
	let currentBlendEquationAlpha = null;
	let currentBlendSrcAlpha = null;
	let currentBlendDstAlpha = null;
	let currentPremultipledAlpha = false;

	let currentFlipSided = null;
	let currentCullFace = null;

	let currentLineWidth = null;

	let currentPolygonOffsetFactor = null;
	let currentPolygonOffsetUnits = null;

	const maxTextures = gl.getParameter( 35661 );

	let lineWidthAvailable = false;
	let version = 0;
	const glVersion = gl.getParameter( 7938 );

	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
		lineWidthAvailable = ( version >= 1.0 );

	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
		lineWidthAvailable = ( version >= 2.0 );

	}

	let currentTextureSlot = null;
	let currentBoundTextures = {};

	const scissorParam = gl.getParameter( 3088 );
	const viewportParam = gl.getParameter( 2978 );

	const currentScissor = new Vector4().fromArray( scissorParam );
	const currentViewport = new Vector4().fromArray( viewportParam );

	function createTexture( type, target, count ) {

		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		const texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, 10241, 9728 );
		gl.texParameteri( type, 10240, 9728 );

		for ( let i = 0; i < count; i ++ ) {

			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

		}

		return texture;

	}

	const emptyTextures = {};
	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

	// init

	colorBuffer.setClear( 0, 0, 0, 1 );
	depthBuffer.setClear( 1 );
	stencilBuffer.setClear( 0 );

	enable( 2929 );
	depthBuffer.setFunc( LessEqualDepth );

	setFlipSided( false );
	setCullFace( CullFaceBack );
	enable( 2884 );

	setBlending( NoBlending );

	//

	function enable( id ) {

		if ( enabledCapabilities[ id ] !== true ) {

			gl.enable( id );
			enabledCapabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( enabledCapabilities[ id ] !== false ) {

			gl.disable( id );
			enabledCapabilities[ id ] = false;

		}

	}

	function bindXRFramebuffer( framebuffer ) {

		if ( framebuffer !== xrFramebuffer ) {

			gl.bindFramebuffer( 36160, framebuffer );

			xrFramebuffer = framebuffer;

		}

	}

	function bindFramebuffer( target, framebuffer ) {

		if ( framebuffer === null && xrFramebuffer !== null ) framebuffer = xrFramebuffer; // use active XR framebuffer if available

		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

			gl.bindFramebuffer( target, framebuffer );

			currentBoundFramebuffers[ target ] = framebuffer;

			if ( isWebGL2 ) {

				// 36009 is equivalent to 36160

				if ( target === 36009 ) {

					currentBoundFramebuffers[ 36160 ] = framebuffer;

				}

				if ( target === 36160 ) {

					currentBoundFramebuffers[ 36009 ] = framebuffer;

				}

			}

			return true;

		}

		return false;

	}

	function useProgram( program ) {

		if ( currentProgram !== program ) {

			gl.useProgram( program );

			currentProgram = program;

			return true;

		}

		return false;

	}

	const equationToGL = {
		[ AddEquation ]: 32774,
		[ SubtractEquation ]: 32778,
		[ ReverseSubtractEquation ]: 32779
	};

	if ( isWebGL2 ) {

		equationToGL[ MinEquation ] = 32775;
		equationToGL[ MaxEquation ] = 32776;

	} else {

		const extension = extensions.get( 'EXT_blend_minmax' );

		if ( extension !== null ) {

			equationToGL[ MinEquation ] = extension.MIN_EXT;
			equationToGL[ MaxEquation ] = extension.MAX_EXT;

		}

	}

	const factorToGL = {
		[ ZeroFactor ]: 0,
		[ OneFactor ]: 1,
		[ SrcColorFactor ]: 768,
		[ SrcAlphaFactor ]: 770,
		[ SrcAlphaSaturateFactor ]: 776,
		[ DstColorFactor ]: 774,
		[ DstAlphaFactor ]: 772,
		[ OneMinusSrcColorFactor ]: 769,
		[ OneMinusSrcAlphaFactor ]: 771,
		[ OneMinusDstColorFactor ]: 775,
		[ OneMinusDstAlphaFactor ]: 773
	};

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending === NoBlending ) {

			if ( currentBlendingEnabled === true ) {

				disable( 3042 );
				currentBlendingEnabled = false;

			}

			return;

		}

		if ( currentBlendingEnabled === false ) {

			enable( 3042 );
			currentBlendingEnabled = true;

		}

		if ( blending !== CustomBlending ) {

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

					gl.blendEquation( 32774 );

					currentBlendEquation = AddEquation;
					currentBlendEquationAlpha = AddEquation;

				}

				if ( premultipliedAlpha ) {

					switch ( blending ) {

						case NormalBlending:
							gl.blendFuncSeparate( 1, 771, 1, 771 );
							break;

						case AdditiveBlending:
							gl.blendFunc( 1, 1 );
							break;

						case SubtractiveBlending:
							gl.blendFuncSeparate( 0, 0, 769, 771 );
							break;

						case MultiplyBlending:
							gl.blendFuncSeparate( 0, 768, 0, 770 );
							break;

						default:
							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
							break;

					}

				} else {

					switch ( blending ) {

						case NormalBlending:
							gl.blendFuncSeparate( 770, 771, 1, 771 );
							break;

						case AdditiveBlending:
							gl.blendFunc( 770, 1 );
							break;

						case SubtractiveBlending:
							gl.blendFunc( 0, 769 );
							break;

						case MultiplyBlending:
							gl.blendFunc( 0, 768 );
							break;

						default:
							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
							break;

					}

				}

				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			return;

		}

		// custom blending

		blendEquationAlpha = blendEquationAlpha || blendEquation;
		blendSrcAlpha = blendSrcAlpha || blendSrc;
		blendDstAlpha = blendDstAlpha || blendDst;

		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

			currentBlendEquation = blendEquation;
			currentBlendEquationAlpha = blendEquationAlpha;

		}

		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

			currentBlendSrc = blendSrc;
			currentBlendDst = blendDst;
			currentBlendSrcAlpha = blendSrcAlpha;
			currentBlendDstAlpha = blendDstAlpha;

		}

		currentBlending = blending;
		currentPremultipledAlpha = null;

	}

	function setMaterial( material, frontFaceCW ) {

		material.side === DoubleSide
			? disable( 2884 )
			: enable( 2884 );

		let flipSided = ( material.side === BackSide );
		if ( frontFaceCW ) flipSided = ! flipSided;

		setFlipSided( flipSided );

		( material.blending === NormalBlending && material.transparent === false )
			? setBlending( NoBlending )
			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		const stencilWrite = material.stencilWrite;
		stencilBuffer.setTest( stencilWrite );
		if ( stencilWrite ) {

			stencilBuffer.setMask( material.stencilWriteMask );
			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

		}

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		material.alphaToCoverage === true
			? enable( 32926 )
			: disable( 32926 );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( 2304 );

			} else {

				gl.frontFace( 2305 );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( 2884 );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( 1029 );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( 1028 );

				} else {

					gl.cullFace( 1032 );

				}

			}

		} else {

			disable( 2884 );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) gl.lineWidth( width );

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( 32823 );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( 32823 );

		}

	}

	function setScissorTest( scissorTest ) {

		if ( scissorTest ) {

			enable( 3089 );

		} else {

			disable( 3089 );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture ) {

		if ( currentTextureSlot === null ) {

			activeTexture();

		}

		let boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ currentTextureSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function unbindTexture() {

		const boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

			gl.bindTexture( boundTexture.type, null );

			boundTexture.type = undefined;
			boundTexture.texture = undefined;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage3D() {

		try {

			gl.texImage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	//

	function reset() {

		// reset state

		gl.disable( 3042 );
		gl.disable( 2884 );
		gl.disable( 2929 );
		gl.disable( 32823 );
		gl.disable( 3089 );
		gl.disable( 2960 );
		gl.disable( 32926 );

		gl.blendEquation( 32774 );
		gl.blendFunc( 1, 0 );
		gl.blendFuncSeparate( 1, 0, 1, 0 );

		gl.colorMask( true, true, true, true );
		gl.clearColor( 0, 0, 0, 0 );

		gl.depthMask( true );
		gl.depthFunc( 513 );
		gl.clearDepth( 1 );

		gl.stencilMask( 0xffffffff );
		gl.stencilFunc( 519, 0, 0xffffffff );
		gl.stencilOp( 7680, 7680, 7680 );
		gl.clearStencil( 0 );

		gl.cullFace( 1029 );
		gl.frontFace( 2305 );

		gl.polygonOffset( 0, 0 );

		gl.activeTexture( 33984 );

		gl.bindFramebuffer( 36160, null );

		if ( isWebGL2 === true ) {

			gl.bindFramebuffer( 36009, null );
			gl.bindFramebuffer( 36008, null );

		}

		gl.useProgram( null );

		gl.lineWidth( 1 );

		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

		// reset internals

		enabledCapabilities = {};

		currentTextureSlot = null;
		currentBoundTextures = {};

		xrFramebuffer = null;
		currentBoundFramebuffers = {};

		currentProgram = null;

		currentBlendingEnabled = false;
		currentBlending = null;
		currentBlendEquation = null;
		currentBlendSrc = null;
		currentBlendDst = null;
		currentBlendEquationAlpha = null;
		currentBlendSrcAlpha = null;
		currentBlendDstAlpha = null;
		currentPremultipledAlpha = false;

		currentFlipSided = null;
		currentCullFace = null;

		currentLineWidth = null;

		currentPolygonOffsetFactor = null;
		currentPolygonOffsetUnits = null;

		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		enable: enable,
		disable: disable,

		bindFramebuffer: bindFramebuffer,
		bindXRFramebuffer: bindXRFramebuffer,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		unbindTexture: unbindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,
		texImage3D: texImage3D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

	const isWebGL2 = capabilities.isWebGL2;
	const maxTextures = capabilities.maxTextures;
	const maxCubemapSize = capabilities.maxCubemapSize;
	const maxTextureSize = capabilities.maxTextureSize;
	const maxSamples = capabilities.maxSamples;

	const _videoTextures = new WeakMap();
	let _canvas;

	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

	let useOffscreenCanvas = false;

	try {

		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

	} catch ( err ) {

		// Ignore any errors

	}

	function createCanvas( width, height ) {

		// Use OffscreenCanvas when available. Specially needed in web workers

		return useOffscreenCanvas ?
			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

	}

	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

		let scale = 1;

		// handle case if texture exceeds max size

		if ( image.width > maxSize || image.height > maxSize ) {

			scale = maxSize / Math.max( image.width, image.height );

		}

		// only perform resize if necessary

		if ( scale < 1 || needsPowerOfTwo === true ) {

			// only perform resize for certain image types

			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;

				const width = floor( scale * image.width );
				const height = floor( scale * image.height );

				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

				// cube textures can't reuse the same canvas

				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

				canvas.width = width;
				canvas.height = height;

				const context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, width, height );

				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

				return canvas;

			} else {

				if ( 'data' in image ) {

					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

				}

				return image;

			}

		}

		return image;

	}

	function isPowerOfTwo$1( image ) {

		return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );

	}

	function textureNeedsPowerOfTwo( texture ) {

		if ( isWebGL2 ) return false;

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

		return texture.generateMipmaps && supportsMips &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	function generateMipmap( target, texture, width, height, depth = 1 ) {

		_gl.generateMipmap( target );

		const textureProperties = properties.get( texture );

		textureProperties.__maxMipLevel = Math.log2( Math.max( width, height, depth ) );

	}

	function getInternalFormat( internalFormatName, glFormat, glType, encoding ) {

		if ( isWebGL2 === false ) return glFormat;

		if ( internalFormatName !== null ) {

			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

		}

		let internalFormat = glFormat;

		if ( glFormat === 6403 ) {

			if ( glType === 5126 ) internalFormat = 33326;
			if ( glType === 5131 ) internalFormat = 33325;
			if ( glType === 5121 ) internalFormat = 33321;

		}

		if ( glFormat === 6407 ) {

			if ( glType === 5126 ) internalFormat = 34837;
			if ( glType === 5131 ) internalFormat = 34843;
			if ( glType === 5121 ) internalFormat = 32849;

		}

		if ( glFormat === 6408 ) {

			if ( glType === 5126 ) internalFormat = 34836;
			if ( glType === 5131 ) internalFormat = 34842;
			if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding ) ? 35907 : 32856;

		}

		if ( internalFormat === 33325 || internalFormat === 33326 ||
			internalFormat === 34842 || internalFormat === 34836 ) {

			extensions.get( 'EXT_color_buffer_float' );

		}

		return internalFormat;

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

			return 9728;

		}

		return 9729;

	}

	//

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		if ( texture.isVideoTexture ) {

			_videoTextures.delete( texture );

		}

		info.memory.textures --;

	}

	function onRenderTargetDispose( event ) {

		const renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

	}

	//

	function deallocateTexture( texture ) {

		const textureProperties = properties.get( texture );

		if ( textureProperties.__webglInit === undefined ) return;

		_gl.deleteTexture( textureProperties.__webglTexture );

		properties.remove( texture );

	}

	function deallocateRenderTarget( renderTarget ) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get( renderTarget );
		const textureProperties = properties.get( texture );

		if ( ! renderTarget ) return;

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

			info.memory.textures --;

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLCubeRenderTarget ) {

			for ( let i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );
			if ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );
			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

		}

		if ( renderTarget.isWebGLMultipleRenderTargets ) {

			for ( let i = 0, il = texture.length; i < il; i ++ ) {

				const attachmentProperties = properties.get( texture[ i ] );

				if ( attachmentProperties.__webglTexture ) {

					_gl.deleteTexture( attachmentProperties.__webglTexture );

					info.memory.textures --;

				}

				properties.remove( texture[ i ] );

			}

		}

		properties.remove( texture );
		properties.remove( renderTarget );

	}

	//

	let textureUnits = 0;

	function resetTextureUnits() {

		textureUnits = 0;

	}

	function allocateTextureUnit() {

		const textureUnit = textureUnits;

		if ( textureUnit >= maxTextures ) {

			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

		}

		textureUnits += 1;

		return textureUnit;

	}

	//

	function setTexture2D( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.isVideoTexture ) updateVideoTexture( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			const image = texture.image;

			if ( image === undefined ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.activeTexture( 33984 + slot );
		state.bindTexture( 3553, textureProperties.__webglTexture );

	}

	function setTexture2DArray( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadTexture( textureProperties, texture, slot );
			return;

		}

		state.activeTexture( 33984 + slot );
		state.bindTexture( 35866, textureProperties.__webglTexture );

	}

	function setTexture3D( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadTexture( textureProperties, texture, slot );
			return;

		}

		state.activeTexture( 33984 + slot );
		state.bindTexture( 32879, textureProperties.__webglTexture );

	}

	function setTextureCube( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadCubeTexture( textureProperties, texture, slot );
			return;

		}

		state.activeTexture( 33984 + slot );
		state.bindTexture( 34067, textureProperties.__webglTexture );

	}

	const wrappingToGL = {
		[ RepeatWrapping ]: 10497,
		[ ClampToEdgeWrapping ]: 33071,
		[ MirroredRepeatWrapping ]: 33648
	};

	const filterToGL = {
		[ NearestFilter ]: 9728,
		[ NearestMipmapNearestFilter ]: 9984,
		[ NearestMipmapLinearFilter ]: 9986,

		[ LinearFilter ]: 9729,
		[ LinearMipmapNearestFilter ]: 9985,
		[ LinearMipmapLinearFilter ]: 9987
	};

	function setTextureParameters( textureType, texture, supportsMips ) {

		if ( supportsMips ) {

			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

			if ( textureType === 32879 || textureType === 35866 ) {

				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

			}

			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

		} else {

			_gl.texParameteri( textureType, 10242, 33071 );
			_gl.texParameteri( textureType, 10243, 33071 );

			if ( textureType === 32879 || textureType === 35866 ) {

				_gl.texParameteri( textureType, 32882, 33071 );

			}

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

			}

			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

			}

		}

		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
			if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function initTexture( textureProperties, texture ) {

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			info.memory.textures ++;

		}

	}

	function uploadTexture( textureProperties, texture, slot ) {

		let textureType = 3553;

		if ( texture.isDataTexture2DArray ) textureType = 35866;
		if ( texture.isDataTexture3D ) textureType = 32879;

		initTexture( textureProperties, texture );

		state.activeTexture( 33984 + slot );
		state.bindTexture( textureType, textureProperties.__webglTexture );

		_gl.pixelStorei( 37440, texture.flipY );
		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
		_gl.pixelStorei( 3317, texture.unpackAlignment );
		_gl.pixelStorei( 37443, 0 );

		const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
		const image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

		const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
			glFormat = utils.convert( texture.format );

		let glType = utils.convert( texture.type ),
			glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );

		setTextureParameters( textureType, texture, supportsMips );

		let mipmap;
		const mipmaps = texture.mipmaps;

		if ( texture.isDepthTexture ) {

			// populate depth texture with dummy data

			glInternalFormat = 6402;

			if ( isWebGL2 ) {

				if ( texture.type === FloatType ) {

					glInternalFormat = 36012;

				} else if ( texture.type === UnsignedIntType ) {

					glInternalFormat = 33190;

				} else if ( texture.type === UnsignedInt248Type ) {

					glInternalFormat = 35056;

				} else {

					glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D

				}

			} else {

				if ( texture.type === FloatType ) {

					console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

				}

			}

			// validation checks for WebGL 1

			if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

					texture.type = UnsignedShortType;
					glType = utils.convert( texture.type );

				}

			}

			if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				glInternalFormat = 34041;

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedInt248Type ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

					texture.type = UnsignedInt248Type;
					glType = utils.convert( texture.type );

				}

			}

			//

			state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

		} else if ( texture.isDataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && supportsMips ) {

				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;
				textureProperties.__maxMipLevel = mipmaps.length - 1;

			} else {

				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;

			}

		} else if ( texture.isCompressedTexture ) {

			for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

					if ( glFormat !== null ) {

						state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

					}

				} else {

					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

			textureProperties.__maxMipLevel = mipmaps.length - 1;

		} else if ( texture.isDataTexture2DArray ) {

			state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
			textureProperties.__maxMipLevel = 0;

		} else if ( texture.isDataTexture3D ) {

			state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
			textureProperties.__maxMipLevel = 0;

		} else {

			// regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && supportsMips ) {

				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;
				textureProperties.__maxMipLevel = mipmaps.length - 1;

			} else {

				state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
				textureProperties.__maxMipLevel = 0;

			}

		}

		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

			generateMipmap( textureType, texture, image.width, image.height );

		}

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) texture.onUpdate( texture );

	}

	function uploadCubeTexture( textureProperties, texture, slot ) {

		if ( texture.image.length !== 6 ) return;

		initTexture( textureProperties, texture );

		state.activeTexture( 33984 + slot );
		state.bindTexture( 34067, textureProperties.__webglTexture );

		_gl.pixelStorei( 37440, texture.flipY );
		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
		_gl.pixelStorei( 3317, texture.unpackAlignment );
		_gl.pixelStorei( 37443, 0 );

		const isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );
		const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

		const cubeImage = [];

		for ( let i = 0; i < 6; i ++ ) {

			if ( ! isCompressed && ! isDataTexture ) {

				cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

			} else {

				cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

			}

		}

		const image = cubeImage[ 0 ],
			supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
			glFormat = utils.convert( texture.format ),
			glType = utils.convert( texture.type ),
			glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );

		setTextureParameters( 34067, texture, supportsMips );

		let mipmaps;

		if ( isCompressed ) {

			for ( let i = 0; i < 6; i ++ ) {

				mipmaps = cubeImage[ i ].mipmaps;

				for ( let j = 0; j < mipmaps.length; j ++ ) {

					const mipmap = mipmaps[ j ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( glFormat !== null ) {

							state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

						}

					} else {

						state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			}

			textureProperties.__maxMipLevel = mipmaps.length - 1;

		} else {

			mipmaps = texture.mipmaps;

			for ( let i = 0; i < 6; i ++ ) {

				if ( isDataTexture ) {

					state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

					for ( let j = 0; j < mipmaps.length; j ++ ) {

						const mipmap = mipmaps[ j ];
						const mipmapImage = mipmap.image[ i ].image;

						state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

					}

				} else {

					state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

					for ( let j = 0; j < mipmaps.length; j ++ ) {

						const mipmap = mipmaps[ j ];

						state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

					}

				}

			}

			textureProperties.__maxMipLevel = mipmaps.length;

		}

		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

			// We assume images for cube map have the same size.
			generateMipmap( 34067, texture, image.width, image.height );

		}

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) texture.onUpdate( texture );

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {

		const glFormat = utils.convert( texture.format );
		const glType = utils.convert( texture.type );
		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );

		if ( textureTarget === 32879 || textureTarget === 35866 ) {

			state.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );

		} else {

			state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

		}

		state.bindFramebuffer( 36160, framebuffer );
		_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );
		state.bindFramebuffer( 36160, null );

	}

	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

		_gl.bindRenderbuffer( 36161, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			let glInternalFormat = 33189;

			if ( isMultisample ) {

				const depthTexture = renderTarget.depthTexture;

				if ( depthTexture && depthTexture.isDepthTexture ) {

					if ( depthTexture.type === FloatType ) {

						glInternalFormat = 36012;

					} else if ( depthTexture.type === UnsignedIntType ) {

						glInternalFormat = 33190;

					}

				}

				const samples = getRenderTargetSamples( renderTarget );

				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

			} else {

				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

			}

			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			if ( isMultisample ) {

				const samples = getRenderTargetSamples( renderTarget );

				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );

			} else {

				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

			}


			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

		} else {

			// Use the first texture for MRT so far
			const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;

			const glFormat = utils.convert( texture.format );
			const glType = utils.convert( texture.type );
			const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );

			if ( isMultisample ) {

				const samples = getRenderTargetSamples( renderTarget );

				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

			} else {

				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

			}

		}

		_gl.bindRenderbuffer( 36161, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

		state.bindFramebuffer( 36160, framebuffer );

		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

		}

		// upload an empty depth texture with framebuffer size
		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {

			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;

		}

		setTexture2D( renderTarget.depthTexture, 0 );

		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

		} else {

			throw new Error( 'Unknown depthTexture format' );

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		const renderTargetProperties = properties.get( renderTarget );

		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

		if ( renderTarget.depthTexture ) {

			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( let i = 0; i < 6; i ++ ) {

					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

				}

			} else {

				state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

			}

		}

		state.bindFramebuffer( 36160, null );

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get( renderTarget );
		const textureProperties = properties.get( texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {

			textureProperties.__webglTexture = _gl.createTexture();
			textureProperties.__version = texture.version;
			info.memory.textures ++;

		}

		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
		const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
		const isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
		const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

		// Handles WebGL2 RGBFormat fallback - #18858

		if ( isWebGL2 && texture.format === RGBFormat && ( texture.type === FloatType || texture.type === HalfFloatType ) ) {

			texture.format = RGBAFormat;

			console.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );

		}

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( let i = 0; i < 6; i ++ ) {

				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			if ( isMultipleRenderTargets ) {

				if ( capabilities.drawBuffers ) {

					const textures = renderTarget.texture;

					for ( let i = 0, il = textures.length; i < il; i ++ ) {

						const attachmentProperties = properties.get( textures[ i ] );

						if ( attachmentProperties.__webglTexture === undefined ) {

							attachmentProperties.__webglTexture = _gl.createTexture();

							info.memory.textures ++;

						}

					}

				} else {

					console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );

				}

			} else if ( isMultisample ) {

				if ( isWebGL2 ) {

					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );

					const glFormat = utils.convert( texture.format );
					const glType = utils.convert( texture.type );
					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
					const samples = getRenderTargetSamples( renderTarget );
					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
					_gl.bindRenderbuffer( 36161, null );

					if ( renderTarget.depthBuffer ) {

						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

					}

					state.bindFramebuffer( 36160, null );


				} else {

					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

				}

			}

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( 34067, textureProperties.__webglTexture );
			setTextureParameters( 34067, texture, supportsMips );

			for ( let i = 0; i < 6; i ++ ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( 34067, texture, renderTarget.width, renderTarget.height );

			}

			state.unbindTexture();

		} else if ( isMultipleRenderTargets ) {

			const textures = renderTarget.texture;

			for ( let i = 0, il = textures.length; i < il; i ++ ) {

				const attachment = textures[ i ];
				const attachmentProperties = properties.get( attachment );

				state.bindTexture( 3553, attachmentProperties.__webglTexture );
				setTextureParameters( 3553, attachment, supportsMips );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );

				if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {

					generateMipmap( 3553, attachment, renderTarget.width, renderTarget.height );

				}

			}

			state.unbindTexture();

		} else {

			let glTextureType = 3553;

			if ( isRenderTarget3D ) {

				// Render targets containing layers, i.e: Texture 3D and 2d arrays

				if ( isWebGL2 ) {

					const isTexture3D = texture.isDataTexture3D;
					glTextureType = isTexture3D ? 32879 : 35866;

				} else {

					console.warn( 'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.' );

				}

			}

			state.bindTexture( glTextureType, textureProperties.__webglTexture );
			setTextureParameters( glTextureType, texture, supportsMips );
			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth );

			}

			state.unbindTexture();

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

		for ( let i = 0, il = textures.length; i < il; i ++ ) {

			const texture = textures[ i ];

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
				const webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				generateMipmap( target, texture, renderTarget.width, renderTarget.height );
				state.unbindTexture();

			}

		}

	}

	function updateMultisampleRenderTarget( renderTarget ) {

		if ( renderTarget.isWebGLMultisampleRenderTarget ) {

			if ( isWebGL2 ) {

				const width = renderTarget.width;
				const height = renderTarget.height;
				let mask = 16384;

				if ( renderTarget.depthBuffer ) mask |= 256;
				if ( renderTarget.stencilBuffer ) mask |= 1024;

				const renderTargetProperties = properties.get( renderTarget );

				state.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
				state.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

				state.bindFramebuffer( 36008, null );
				state.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );

			} else {

				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

			}

		}

	}

	function getRenderTargetSamples( renderTarget ) {

		return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
			Math.min( maxSamples, renderTarget.samples ) : 0;

	}

	function updateVideoTexture( texture ) {

		const frame = info.render.frame;

		// Check the last frame we updated the VideoTexture

		if ( _videoTextures.get( texture ) !== frame ) {

			_videoTextures.set( texture, frame );
			texture.update();

		}

	}

	// backwards compatibility

	let warnedTexture2D = false;
	let warnedTextureCube = false;

	function safeSetTexture2D( texture, slot ) {

		if ( texture && texture.isWebGLRenderTarget ) {

			if ( warnedTexture2D === false ) {

				console.warn( 'THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.' );
				warnedTexture2D = true;

			}

			texture = texture.texture;

		}

		setTexture2D( texture, slot );

	}

	function safeSetTextureCube( texture, slot ) {

		if ( texture && texture.isWebGLCubeRenderTarget ) {

			if ( warnedTextureCube === false ) {

				console.warn( 'THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.' );
				warnedTextureCube = true;

			}

			texture = texture.texture;

		}


		setTextureCube( texture, slot );

	}

	//

	this.allocateTextureUnit = allocateTextureUnit;
	this.resetTextureUnits = resetTextureUnits;

	this.setTexture2D = setTexture2D;
	this.setTexture2DArray = setTexture2DArray;
	this.setTexture3D = setTexture3D;
	this.setTextureCube = setTextureCube;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

	this.safeSetTexture2D = safeSetTexture2D;
	this.safeSetTextureCube = safeSetTextureCube;

}

function WebGLUtils( gl, extensions, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	function convert( p ) {

		let extension;

		if ( p === UnsignedByteType ) return 5121;
		if ( p === UnsignedShort4444Type ) return 32819;
		if ( p === UnsignedShort5551Type ) return 32820;
		if ( p === UnsignedShort565Type ) return 33635;

		if ( p === ByteType ) return 5120;
		if ( p === ShortType ) return 5122;
		if ( p === UnsignedShortType ) return 5123;
		if ( p === IntType ) return 5124;
		if ( p === UnsignedIntType ) return 5125;
		if ( p === FloatType ) return 5126;

		if ( p === HalfFloatType ) {

			if ( isWebGL2 ) return 5131;

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) {

				return extension.HALF_FLOAT_OES;

			} else {

				return null;

			}

		}

		if ( p === AlphaFormat ) return 6406;
		if ( p === RGBFormat ) return 6407;
		if ( p === RGBAFormat ) return 6408;
		if ( p === LuminanceFormat ) return 6409;
		if ( p === LuminanceAlphaFormat ) return 6410;
		if ( p === DepthFormat ) return 6402;
		if ( p === DepthStencilFormat ) return 34041;
		if ( p === RedFormat ) return 6403;

		// WebGL2 formats.

		if ( p === RedIntegerFormat ) return 36244;
		if ( p === RGFormat ) return 33319;
		if ( p === RGIntegerFormat ) return 33320;
		if ( p === RGBIntegerFormat ) return 36248;
		if ( p === RGBAIntegerFormat ) return 36249;

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			} else {

				return null;

			}

		}

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			} else {

				return null;

			}

		}

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) {

				return extension.COMPRESSED_RGB_ETC1_WEBGL;

			} else {

				return null;

			}

		}

		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

			if ( extension !== null ) {

				if ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;
				if ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;

			}

		}

		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||
			p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||
			p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||
			p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||
			p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||
			p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

			if ( extension !== null ) {

				// TODO Complete?

				return p;

			} else {

				return null;

			}

		}

		if ( p === RGBA_BPTC_Format ) {

			extension = extensions.get( 'EXT_texture_compression_bptc' );

			if ( extension !== null ) {

				// TODO Complete?

				return p;

			} else {

				return null;

			}

		}

		if ( p === UnsignedInt248Type ) {

			if ( isWebGL2 ) return 34042;

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) {

				return extension.UNSIGNED_INT_24_8_WEBGL;

			} else {

				return null;

			}

		}

	}

	return { convert: convert };

}

class ArrayCamera extends PerspectiveCamera {

	constructor( array = [] ) {

		super();

		this.cameras = array;

	}

}

ArrayCamera.prototype.isArrayCamera = true;

class Group extends Object3D {

	constructor() {

		super();

		this.type = 'Group';

	}

}

Group.prototype.isGroup = true;

const _moveEvent = { type: 'move' };

class WebXRController {

	constructor() {

		this._targetRay = null;
		this._grip = null;
		this._hand = null;

	}

	getHandSpace() {

		if ( this._hand === null ) {

			this._hand = new Group();
			this._hand.matrixAutoUpdate = false;
			this._hand.visible = false;

			this._hand.joints = {};
			this._hand.inputState = { pinching: false };

		}

		return this._hand;

	}

	getTargetRaySpace() {

		if ( this._targetRay === null ) {

			this._targetRay = new Group();
			this._targetRay.matrixAutoUpdate = false;
			this._targetRay.visible = false;
			this._targetRay.hasLinearVelocity = false;
			this._targetRay.linearVelocity = new Vector3();
			this._targetRay.hasAngularVelocity = false;
			this._targetRay.angularVelocity = new Vector3();

		}

		return this._targetRay;

	}

	getGripSpace() {

		if ( this._grip === null ) {

			this._grip = new Group();
			this._grip.matrixAutoUpdate = false;
			this._grip.visible = false;
			this._grip.hasLinearVelocity = false;
			this._grip.linearVelocity = new Vector3();
			this._grip.hasAngularVelocity = false;
			this._grip.angularVelocity = new Vector3();

		}

		return this._grip;

	}

	dispatchEvent( event ) {

		if ( this._targetRay !== null ) {

			this._targetRay.dispatchEvent( event );

		}

		if ( this._grip !== null ) {

			this._grip.dispatchEvent( event );

		}

		if ( this._hand !== null ) {

			this._hand.dispatchEvent( event );

		}

		return this;

	}

	disconnect( inputSource ) {

		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

		if ( this._targetRay !== null ) {

			this._targetRay.visible = false;

		}

		if ( this._grip !== null ) {

			this._grip.visible = false;

		}

		if ( this._hand !== null ) {

			this._hand.visible = false;

		}

		return this;

	}

	update( inputSource, frame, referenceSpace ) {

		let inputPose = null;
		let gripPose = null;
		let handPose = null;

		const targetRay = this._targetRay;
		const grip = this._grip;
		const hand = this._hand;

		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

			if ( targetRay !== null ) {

				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

				if ( inputPose !== null ) {

					targetRay.matrix.fromArray( inputPose.transform.matrix );
					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );

					if ( inputPose.linearVelocity ) {

						targetRay.hasLinearVelocity = true;
						targetRay.linearVelocity.copy( inputPose.linearVelocity );

					} else {

						targetRay.hasLinearVelocity = false;

					}

					if ( inputPose.angularVelocity ) {

						targetRay.hasAngularVelocity = true;
						targetRay.angularVelocity.copy( inputPose.angularVelocity );

					} else {

						targetRay.hasAngularVelocity = false;

					}

					this.dispatchEvent( _moveEvent );

				}

			}

			if ( hand && inputSource.hand ) {

				handPose = true;

				for ( const inputjoint of inputSource.hand.values() ) {

					// Update the joints groups with the XRJoint poses
					const jointPose = frame.getJointPose( inputjoint, referenceSpace );

					if ( hand.joints[ inputjoint.jointName ] === undefined ) {

						// The transform of this joint will be updated with the joint pose on each frame
						const joint = new Group();
						joint.matrixAutoUpdate = false;
						joint.visible = false;
						hand.joints[ inputjoint.jointName ] = joint;
						// ??
						hand.add( joint );

					}

					const joint = hand.joints[ inputjoint.jointName ];

					if ( jointPose !== null ) {

						joint.matrix.fromArray( jointPose.transform.matrix );
						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
						joint.jointRadius = jointPose.radius;

					}

					joint.visible = jointPose !== null;

				}

				// Custom events

				// Check pinchz
				const indexTip = hand.joints[ 'index-finger-tip' ];
				const thumbTip = hand.joints[ 'thumb-tip' ];
				const distance = indexTip.position.distanceTo( thumbTip.position );

				const distanceToPinch = 0.02;
				const threshold = 0.005;

				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

					hand.inputState.pinching = false;
					this.dispatchEvent( {
						type: 'pinchend',
						handedness: inputSource.handedness,
						target: this
					} );

				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

					hand.inputState.pinching = true;
					this.dispatchEvent( {
						type: 'pinchstart',
						handedness: inputSource.handedness,
						target: this
					} );

				}

			} else {

				if ( grip !== null && inputSource.gripSpace ) {

					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

					if ( gripPose !== null ) {

						grip.matrix.fromArray( gripPose.transform.matrix );
						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );

						if ( gripPose.linearVelocity ) {

							grip.hasLinearVelocity = true;
							grip.linearVelocity.copy( gripPose.linearVelocity );

						} else {

							grip.hasLinearVelocity = false;

						}

						if ( gripPose.angularVelocity ) {

							grip.hasAngularVelocity = true;
							grip.angularVelocity.copy( gripPose.angularVelocity );

						} else {

							grip.hasAngularVelocity = false;

						}

					}

				}

			}

		}

		if ( targetRay !== null ) {

			targetRay.visible = ( inputPose !== null );

		}

		if ( grip !== null ) {

			grip.visible = ( gripPose !== null );

		}

		if ( hand !== null ) {

			hand.visible = ( handPose !== null );

		}

		return this;

	}

}

class WebXRManager extends EventDispatcher {

	constructor( renderer, gl ) {

		super();

		const scope = this;
		const state = renderer.state;

		let session = null;
		let framebufferScaleFactor = 1.0;

		let referenceSpace = null;
		let referenceSpaceType = 'local-floor';

		let pose = null;
		let glBinding = null;
		let glFramebuffer = null;
		let glProjLayer = null;
		let glBaseLayer = null;
		let isMultisample = false;
		let glMultisampledFramebuffer = null;
		let glColorRenderbuffer = null;
		let glDepthRenderbuffer = null;
		let xrFrame = null;
		let depthStyle = null;
		let clearStyle = null;

		const controllers = [];
		const inputSourcesMap = new Map();

		//

		const cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();

		const cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();

		const cameras = [ cameraL, cameraR ];

		const cameraVR = new ArrayCamera();
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		let _currentDepthNear = null;
		let _currentDepthFar = null;

		//

		this.cameraAutoUpdate = true;
		this.enabled = false;

		this.isPresenting = false;

		this.getController = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getTargetRaySpace();

		};

		this.getControllerGrip = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getGripSpace();

		};

		this.getHand = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getHandSpace();

		};

		//

		function onSessionEvent( event ) {

			const controller = inputSourcesMap.get( event.inputSource );

			if ( controller ) {

				controller.dispatchEvent( { type: event.type, data: event.inputSource } );

			}

		}

		function onSessionEnd() {

			inputSourcesMap.forEach( function ( controller, inputSource ) {

				controller.disconnect( inputSource );

			} );

			inputSourcesMap.clear();

			_currentDepthNear = null;
			_currentDepthFar = null;

			// restore framebuffer/rendering state

			state.bindXRFramebuffer( null );
			renderer.setRenderTarget( renderer.getRenderTarget() );

			if ( glFramebuffer ) gl.deleteFramebuffer( glFramebuffer );
			if ( glMultisampledFramebuffer ) gl.deleteFramebuffer( glMultisampledFramebuffer );
			if ( glColorRenderbuffer ) gl.deleteRenderbuffer( glColorRenderbuffer );
			if ( glDepthRenderbuffer ) gl.deleteRenderbuffer( glDepthRenderbuffer );
			glFramebuffer = null;
			glMultisampledFramebuffer = null;
			glColorRenderbuffer = null;
			glDepthRenderbuffer = null;
			glBaseLayer = null;
			glProjLayer = null;
			glBinding = null;
			session = null;

			//

			animation.stop();

			scope.isPresenting = false;

			scope.dispatchEvent( { type: 'sessionend' } );

		}

		this.setFramebufferScaleFactor = function ( value ) {

			framebufferScaleFactor = value;

			if ( scope.isPresenting === true ) {

				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

			}

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

			if ( scope.isPresenting === true ) {

				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

			}

		};

		this.getReferenceSpace = function () {

			return referenceSpace;

		};

		this.getBaseLayer = function () {

			return glProjLayer !== null ? glProjLayer : glBaseLayer;

		};

		this.getBinding = function () {

			return glBinding;

		};

		this.getFrame = function () {

			return xrFrame;

		};

		this.getSession = function () {

			return session;

		};

		this.setSession = async function ( value ) {

			session = value;

			if ( session !== null ) {

				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'squeeze', onSessionEvent );
				session.addEventListener( 'squeezestart', onSessionEvent );
				session.addEventListener( 'squeezeend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );
				session.addEventListener( 'inputsourceschange', onInputSourcesChange );

				const attributes = gl.getContextAttributes();

				if ( attributes.xrCompatible !== true ) {

					await gl.makeXRCompatible();

				}

				if ( session.renderState.layers === undefined ) {

					const layerInit = {
						antialias: attributes.antialias,
						alpha: attributes.alpha,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					};

					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

					session.updateRenderState( { baseLayer: glBaseLayer } );

				} else if ( gl instanceof WebGLRenderingContext ) {

					// Use old style webgl layer because we can't use MSAA
					// WebGL2 support.

					const layerInit = {
						antialias: true,
						alpha: attributes.alpha,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					};

					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

					session.updateRenderState( { layers: [ glBaseLayer ] } );

				} else {

					isMultisample = attributes.antialias;
					let depthFormat = null;


					if ( attributes.depth ) {

						clearStyle = 256;

						if ( attributes.stencil ) clearStyle |= 1024;

						depthStyle = attributes.stencil ? 33306 : 36096;
						depthFormat = attributes.stencil ? 35056 : 33190;

					}

					const projectionlayerInit = {
						colorFormat: attributes.alpha ? 32856 : 32849,
						depthFormat: depthFormat,
						scaleFactor: framebufferScaleFactor
					};

					glBinding = new XRWebGLBinding( session, gl );

					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

					glFramebuffer = gl.createFramebuffer();

					session.updateRenderState( { layers: [ glProjLayer ] } );

					if ( isMultisample ) {

						glMultisampledFramebuffer = gl.createFramebuffer();
						glColorRenderbuffer = gl.createRenderbuffer();
						gl.bindRenderbuffer( 36161, glColorRenderbuffer );
						gl.renderbufferStorageMultisample(
							36161,
							4,
							32856,
							glProjLayer.textureWidth,
							glProjLayer.textureHeight );
						state.bindFramebuffer( 36160, glMultisampledFramebuffer );
						gl.framebufferRenderbuffer( 36160, 36064, 36161, glColorRenderbuffer );
						gl.bindRenderbuffer( 36161, null );

						if ( depthFormat !== null ) {

							glDepthRenderbuffer = gl.createRenderbuffer();
							gl.bindRenderbuffer( 36161, glDepthRenderbuffer );
							gl.renderbufferStorageMultisample( 36161, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight );
							gl.framebufferRenderbuffer( 36160, depthStyle, 36161, glDepthRenderbuffer );
							gl.bindRenderbuffer( 36161, null );

						}

						state.bindFramebuffer( 36160, null );

					}

				}

				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

				animation.setContext( session );
				animation.start();

				scope.isPresenting = true;

				scope.dispatchEvent( { type: 'sessionstart' } );

			}

		};

		function onInputSourcesChange( event ) {

			const inputSources = session.inputSources;

			// Assign inputSources to available controllers

			for ( let i = 0; i < controllers.length; i ++ ) {

				inputSourcesMap.set( inputSources[ i ], controllers[ i ] );

			}

			// Notify disconnected

			for ( let i = 0; i < event.removed.length; i ++ ) {

				const inputSource = event.removed[ i ];
				const controller = inputSourcesMap.get( inputSource );

				if ( controller ) {

					controller.dispatchEvent( { type: 'disconnected', data: inputSource } );
					inputSourcesMap.delete( inputSource );

				}

			}

			// Notify connected

			for ( let i = 0; i < event.added.length; i ++ ) {

				const inputSource = event.added[ i ];
				const controller = inputSourcesMap.get( inputSource );

				if ( controller ) {

					controller.dispatchEvent( { type: 'connected', data: inputSource } );

				}

			}

		}

		//

		const cameraLPos = new Vector3();
		const cameraRPos = new Vector3();

		/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */
		function setProjectionFromUnion( camera, cameraL, cameraR ) {

			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

			const ipd = cameraLPos.distanceTo( cameraRPos );

			const projL = cameraL.projectionMatrix.elements;
			const projR = cameraR.projectionMatrix.elements;

			// VR systems will have identical far and near planes, and
			// most likely identical top and bottom frustum extents.
			// Use the left camera for these values.
			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
			const left = near * leftFov;
			const right = near * rightFov;

			// Calculate the new camera's position offset from the
			// left camera. xOffset should be roughly half `ipd`.
			const zOffset = ipd / ( - leftFov + rightFov );
			const xOffset = zOffset * - leftFov;

			// TODO: Better way to apply this offset?
			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
			camera.translateX( xOffset );
			camera.translateZ( zOffset );
			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

			// Find the union of the frustum values of the cameras and scale
			// the values so that the near plane's position does not change in world space,
			// although must now be relative to the new union camera.
			const near2 = near + zOffset;
			const far2 = far + zOffset;
			const left2 = left - xOffset;
			const right2 = right + ( ipd - xOffset );
			const top2 = topFov * far / far2 * near2;
			const bottom2 = bottomFov * far / far2 * near2;

			camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

		}

		function updateCamera( camera, parent ) {

			if ( parent === null ) {

				camera.matrixWorld.copy( camera.matrix );

			} else {

				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

			}

			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

		}

		this.updateCamera = function ( camera ) {

			if ( session === null ) return;

			cameraVR.near = cameraR.near = cameraL.near = camera.near;
			cameraVR.far = cameraR.far = cameraL.far = camera.far;

			if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {

				// Note that the new renderState won't apply until the next frame. See #18320

				session.updateRenderState( {
					depthNear: cameraVR.near,
					depthFar: cameraVR.far
				} );

				_currentDepthNear = cameraVR.near;
				_currentDepthFar = cameraVR.far;

			}

			const parent = camera.parent;
			const cameras = cameraVR.cameras;

			updateCamera( cameraVR, parent );

			for ( let i = 0; i < cameras.length; i ++ ) {

				updateCamera( cameras[ i ], parent );

			}

			cameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );

			// update user camera and its children

			camera.position.copy( cameraVR.position );
			camera.quaternion.copy( cameraVR.quaternion );
			camera.scale.copy( cameraVR.scale );
			camera.matrix.copy( cameraVR.matrix );
			camera.matrixWorld.copy( cameraVR.matrixWorld );

			const children = camera.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( true );

			}

			// update projection matrix for proper view frustum culling

			if ( cameras.length === 2 ) {

				setProjectionFromUnion( cameraVR, cameraL, cameraR );

			} else {

				// assume single camera setup (AR)

				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

			}

		};

		this.getCamera = function () {

			return cameraVR;

		};

		this.getFoveation = function () {

			if ( glProjLayer !== null ) {

				return glProjLayer.fixedFoveation;

			}

			if ( glBaseLayer !== null ) {

				return glBaseLayer.fixedFoveation;

			}

			return undefined;

		};

		this.setFoveation = function ( foveation ) {

			// 0 = no foveation = full resolution
			// 1 = maximum foveation = the edges render at lower resolution

			if ( glProjLayer !== null ) {

				glProjLayer.fixedFoveation = foveation;

			}

			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

				glBaseLayer.fixedFoveation = foveation;

			}

		};

		// Animation Loop

		let onAnimationFrameCallback = null;

		function onAnimationFrame( time, frame ) {

			pose = frame.getViewerPose( referenceSpace );
			xrFrame = frame;

			if ( pose !== null ) {

				const views = pose.views;

				if ( glBaseLayer !== null ) {

					state.bindXRFramebuffer( glBaseLayer.framebuffer );

				}

				let cameraVRNeedsUpdate = false;

				// check if it's necessary to rebuild cameraVR's camera list

				if ( views.length !== cameraVR.cameras.length ) {

					cameraVR.cameras.length = 0;

					cameraVRNeedsUpdate = true;

				}

				for ( let i = 0; i < views.length; i ++ ) {

					const view = views[ i ];

					let viewport = null;

					if ( glBaseLayer !== null ) {

						viewport = glBaseLayer.getViewport( view );

					} else {

						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );

						state.bindXRFramebuffer( glFramebuffer );

						if ( glSubImage.depthStencilTexture !== undefined ) {

							gl.framebufferTexture2D( 36160, depthStyle, 3553, glSubImage.depthStencilTexture, 0 );

						}

						gl.framebufferTexture2D( 36160, 36064, 3553, glSubImage.colorTexture, 0 );

						viewport = glSubImage.viewport;

					}

					const camera = cameras[ i ];

					camera.matrix.fromArray( view.transform.matrix );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

					if ( i === 0 ) {

						cameraVR.matrix.copy( camera.matrix );

					}

					if ( cameraVRNeedsUpdate === true ) {

						cameraVR.cameras.push( camera );

					}

				}

				if ( isMultisample ) {

					state.bindXRFramebuffer( glMultisampledFramebuffer );

					if ( clearStyle !== null ) gl.clear( clearStyle );

				}

			}

			//

			const inputSources = session.inputSources;

			for ( let i = 0; i < controllers.length; i ++ ) {

				const controller = controllers[ i ];
				const inputSource = inputSources[ i ];

				controller.update( inputSource, frame, referenceSpace );

			}

			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

			if ( isMultisample ) {

				const width = glProjLayer.textureWidth;
				const height = glProjLayer.textureHeight;

				state.bindFramebuffer( 36008, glMultisampledFramebuffer );
				state.bindFramebuffer( 36009, glFramebuffer );
				// Invalidate the depth here to avoid flush of the depth data to main memory.
				gl.invalidateFramebuffer( 36008, [ depthStyle ] );
				gl.invalidateFramebuffer( 36009, [ depthStyle ] );
				gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, 16384, 9728 );
				// Invalidate the MSAA buffer because it's not needed anymore.
				gl.invalidateFramebuffer( 36008, [ 36064 ] );
				state.bindFramebuffer( 36008, null );
				state.bindFramebuffer( 36009, null );

				state.bindFramebuffer( 36160, glMultisampledFramebuffer );

			}

			xrFrame = null;

		}

		const animation = new WebGLAnimation();

		animation.setAnimationLoop( onAnimationFrame );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () {};

	}

}

function WebGLMaterials( properties ) {

	function refreshFogUniforms( uniforms, fog ) {

		uniforms.fogColor.value.copy( fog.color );

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

		if ( material.isMeshBasicMaterial ) {

			refreshUniformsCommon( uniforms, material );

		} else if ( material.isMeshLambertMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsLambert( uniforms, material );

		} else if ( material.isMeshToonMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsToon( uniforms, material );

		} else if ( material.isMeshPhongMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsPhong( uniforms, material );

		} else if ( material.isMeshStandardMaterial ) {

			refreshUniformsCommon( uniforms, material );

			if ( material.isMeshPhysicalMaterial ) {

				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

			} else {

				refreshUniformsStandard( uniforms, material );

			}

		} else if ( material.isMeshMatcapMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsMatcap( uniforms, material );

		} else if ( material.isMeshDepthMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsDepth( uniforms, material );

		} else if ( material.isMeshDistanceMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsDistance( uniforms, material );

		} else if ( material.isMeshNormalMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsNormal( uniforms, material );

		} else if ( material.isLineBasicMaterial ) {

			refreshUniformsLine( uniforms, material );

			if ( material.isLineDashedMaterial ) {

				refreshUniformsDash( uniforms, material );

			}

		} else if ( material.isPointsMaterial ) {

			refreshUniformsPoints( uniforms, material, pixelRatio, height );

		} else if ( material.isSpriteMaterial ) {

			refreshUniformsSprites( uniforms, material );

		} else if ( material.isShadowMaterial ) {

			uniforms.color.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

		} else if ( material.isShaderMaterial ) {

			material.uniformsNeedUpdate = false; // #15581

		}

	}

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( material.color ) {

			uniforms.diffuse.value.copy( material.color );

		}

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.specularMap ) {

			uniforms.specularMap.value = material.specularMap;

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		const envMap = properties.get( material ).envMap;

		if ( envMap ) {

			uniforms.envMap.value = envMap;

			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.ior.value = material.ior;
			uniforms.refractionRatio.value = material.refractionRatio;

			const maxMipLevel = properties.get( envMap ).__maxMipLevel;

			if ( maxMipLevel !== undefined ) {

				uniforms.maxMipLevel.value = maxMipLevel;

			}

		}

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;
			uniforms.lightMapIntensity.value = material.lightMapIntensity;

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. displacementMap map
		// 4. normal map
		// 5. bump map
		// 6. roughnessMap map
		// 7. metalnessMap map
		// 8. alphaMap map
		// 9. emissiveMap map
		// 10. clearcoat map
		// 11. clearcoat normal map
		// 12. clearcoat roughnessMap map
		// 13. specular intensity map
		// 14. specular tint map
		// 15. transmission map
		// 16. thickness map

		let uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.displacementMap ) {

			uvScaleMap = material.displacementMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.roughnessMap ) {

			uvScaleMap = material.roughnessMap;

		} else if ( material.metalnessMap ) {

			uvScaleMap = material.metalnessMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		} else if ( material.emissiveMap ) {

			uvScaleMap = material.emissiveMap;

		} else if ( material.clearcoatMap ) {

			uvScaleMap = material.clearcoatMap;

		} else if ( material.clearcoatNormalMap ) {

			uvScaleMap = material.clearcoatNormalMap;

		} else if ( material.clearcoatRoughnessMap ) {

			uvScaleMap = material.clearcoatRoughnessMap;

		} else if ( material.specularIntensityMap ) {

			uvScaleMap = material.specularIntensityMap;

		} else if ( material.specularColorMap ) {

			uvScaleMap = material.specularColorMap;

		} else if ( material.transmissionMap ) {

			uvScaleMap = material.transmissionMap;

		} else if ( material.thicknessMap ) {

			uvScaleMap = material.thicknessMap;

		} else if ( material.sheenColorMap ) {

			uvScaleMap = material.sheenColorMap;

		} else if ( material.sheenRoughnessMap ) {

			uvScaleMap = material.sheenRoughnessMap;

		}

		if ( uvScaleMap !== undefined ) {

			// backwards compatibility
			if ( uvScaleMap.isWebGLRenderTarget ) {

				uvScaleMap = uvScaleMap.texture;

			}

			if ( uvScaleMap.matrixAutoUpdate === true ) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

		}

		// uv repeat and offset setting priorities for uv2
		// 1. ao map
		// 2. light map

		let uv2ScaleMap;

		if ( material.aoMap ) {

			uv2ScaleMap = material.aoMap;

		} else if ( material.lightMap ) {

			uv2ScaleMap = material.lightMap;

		}

		if ( uv2ScaleMap !== undefined ) {

			// backwards compatibility
			if ( uv2ScaleMap.isWebGLRenderTarget ) {

				uv2ScaleMap = uv2ScaleMap.texture;

			}

			if ( uv2ScaleMap.matrixAutoUpdate === true ) {

				uv2ScaleMap.updateMatrix();

			}

			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );

		}

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * pixelRatio;
		uniforms.scale.value = height * 0.5;

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. alpha map

		let uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		}

		if ( uvScaleMap !== undefined ) {

			if ( uvScaleMap.matrixAutoUpdate === true ) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

		}

	}

	function refreshUniformsSprites( uniforms, material ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;
		uniforms.rotation.value = material.rotation;

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. alpha map

		let uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		}

		if ( uvScaleMap !== undefined ) {

			if ( uvScaleMap.matrixAutoUpdate === true ) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

		}

	}

	function refreshUniformsLambert( uniforms, material ) {

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value.copy( material.specular );
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );
			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsToon( uniforms, material ) {

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );
			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );
			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		const envMap = properties.get( material ).envMap;

		if ( envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

		refreshUniformsStandard( uniforms, material );

		uniforms.ior.value = material.ior; // also part of uniforms common

		if ( material.sheen > 0 ) {

			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

			uniforms.sheenRoughness.value = material.sheenRoughness;

			if ( material.sheenColorMap ) {

				uniforms.sheenColorMap.value = material.sheenColorMap;

			}

			if ( material.sheenRoughnessMap ) {

				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

			}

		}

		if ( material.clearcoat > 0 ) {

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

			if ( material.clearcoatMap ) {

				uniforms.clearcoatMap.value = material.clearcoatMap;

			}

			if ( material.clearcoatRoughnessMap ) {

				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

			}

			if ( material.clearcoatNormalMap ) {

				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				if ( material.side === BackSide ) {

					uniforms.clearcoatNormalScale.value.negate();

				}

			}

		}

		if ( material.transmission > 0 ) {

			uniforms.transmission.value = material.transmission;
			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

			if ( material.transmissionMap ) {

				uniforms.transmissionMap.value = material.transmissionMap;

			}

			uniforms.thickness.value = material.thickness;

			if ( material.thicknessMap ) {

				uniforms.thicknessMap.value = material.thicknessMap;

			}

			uniforms.attenuationDistance.value = material.attenuationDistance;
			uniforms.attenuationColor.value.copy( material.attenuationColor );

		}

		uniforms.specularIntensity.value = material.specularIntensity;
		uniforms.specularColor.value.copy( material.specularColor );

		if ( material.specularIntensityMap ) {

			uniforms.specularIntensityMap.value = material.specularIntensityMap;

		}

		if ( material.specularColorMap ) {

			uniforms.specularColorMap.value = material.specularColorMap;

		}

	}

	function refreshUniformsMatcap( uniforms, material ) {

		if ( material.matcap ) {

			uniforms.matcap.value = material.matcap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );
			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsDepth( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsDistance( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		uniforms.referencePosition.value.copy( material.referencePosition );
		uniforms.nearDistance.value = material.nearDistance;
		uniforms.farDistance.value = material.farDistance;

	}

	function refreshUniformsNormal( uniforms, material ) {

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );
			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	return {
		refreshFogUniforms: refreshFogUniforms,
		refreshMaterialUniforms: refreshMaterialUniforms
	};

}

function createCanvasElement() {

	const canvas = createElementNS( 'canvas' );
	canvas.style.display = 'block';
	return canvas;

}

function WebGLRenderer( parameters = {} ) {

	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

	let currentRenderList = null;
	let currentRenderState = null;

	// render() can be called from within a callback triggered by another render.
	// We track this so that the nested render call gets its list and state isolated from the parent render call.

	const renderListStack = [];
	const renderStateStack = [];

	// public properties

	this.domElement = _canvas;

	// Debug configuration container
	this.debug = {

		/**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */
		checkShaderErrors: true
	};

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.gammaFactor = 2.0;	// for backwards compatibility
	this.outputEncoding = LinearEncoding;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = NoToneMapping;
	this.toneMappingExposure = 1.0;

	// internal properties

	const _this = this;

	let _isContextLost = false;

	// internal state cache

	let _currentActiveCubeFace = 0;
	let _currentActiveMipmapLevel = 0;
	let _currentRenderTarget = null;
	let _currentMaterialId = - 1;

	let _currentCamera = null;

	const _currentViewport = new Vector4();
	const _currentScissor = new Vector4();
	let _currentScissorTest = null;

	//

	let _width = _canvas.width;
	let _height = _canvas.height;

	let _pixelRatio = 1;
	let _opaqueSort = null;
	let _transparentSort = null;

	const _viewport = new Vector4( 0, 0, _width, _height );
	const _scissor = new Vector4( 0, 0, _width, _height );
	let _scissorTest = false;

	//

	const _currentDrawBuffers = [];

	// frustum

	const _frustum = new Frustum();

	// clipping

	let _clippingEnabled = false;
	let _localClippingEnabled = false;

	// transmission

	let _transmissionRenderTarget = null;

	// camera matrices cache

	const _projScreenMatrix = new Matrix4();

	const _vector3 = new Vector3();

	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	// initialize

	let _gl = _context;

	function getContext( contextNames, contextAttributes ) {

		for ( let i = 0; i < contextNames.length; i ++ ) {

			const contextName = contextNames[ i ];
			const context = _canvas.getContext( contextName, contextAttributes );
			if ( context !== null ) return context;

		}

		return null;

	}

	try {

		const contextAttributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer,
			powerPreference: _powerPreference,
			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
		};

		// event listeners must be registered before WebGL context is created, see #12753

		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

		if ( _gl === null ) {

			const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

			if ( _this.isWebGL1Renderer === true ) {

				contextNames.shift();

			}

			_gl = getContext( contextNames, contextAttributes );

			if ( _gl === null ) {

				if ( getContext( contextNames ) ) {

					throw new Error( 'Error creating WebGL context with your selected attributes.' );

				} else {

					throw new Error( 'Error creating WebGL context.' );

				}

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

	} catch ( error ) {

		console.error( 'THREE.WebGLRenderer: ' + error.message );
		throw error;

	}

	let extensions, capabilities, state, info;
	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
	let programCache, materials, renderLists, renderStates, clipping, shadowMap;

	let background, morphtargets, bufferRenderer, indexedBufferRenderer;

	let utils, bindingStates;

	function initGLContext() {

		extensions = new WebGLExtensions( _gl );

		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		extensions.init( capabilities );

		utils = new WebGLUtils( _gl, extensions, capabilities );

		state = new WebGLState( _gl, extensions, capabilities );

		_currentDrawBuffers[ 0 ] = 1029;

		info = new WebGLInfo( _gl );
		properties = new WebGLProperties();
		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
		cubemaps = new WebGLCubeMaps( _this );
		cubeuvmaps = new WebGLCubeUVMaps( _this );
		attributes = new WebGLAttributes( _gl, capabilities );
		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
		objects = new WebGLObjects( _gl, geometries, attributes, info );
		morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
		clipping = new WebGLClipping( properties );
		programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
		materials = new WebGLMaterials( properties );
		renderLists = new WebGLRenderLists( properties );
		renderStates = new WebGLRenderStates( extensions, capabilities );
		background = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );
		shadowMap = new WebGLShadowMap( _this, objects, capabilities );

		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

		info.programs = programCache.programs;

		_this.capabilities = capabilities;
		_this.extensions = extensions;
		_this.properties = properties;
		_this.renderLists = renderLists;
		_this.shadowMap = shadowMap;
		_this.state = state;
		_this.info = info;

	}

	initGLContext();

	// xr

	const xr = new WebXRManager( _this, _gl );

	this.xr = xr;

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		const extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.loseContext();

	};

	this.forceContextRestore = function () {

		const extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.restoreContext();

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function ( value ) {

		if ( value === undefined ) return;

		_pixelRatio = value;

		this.setSize( _width, _height, false );

	};

	this.getSize = function ( target ) {

		return target.set( _width, _height );

	};

	this.setSize = function ( width, height, updateStyle ) {

		if ( xr.isPresenting ) {

			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = Math.floor( width * _pixelRatio );
		_canvas.height = Math.floor( height * _pixelRatio );

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.getDrawingBufferSize = function ( target ) {

		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

	};

	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = Math.floor( width * pixelRatio );
		_canvas.height = Math.floor( height * pixelRatio );

		this.setViewport( 0, 0, width, height );

	};

	this.getCurrentViewport = function ( target ) {

		return target.copy( _currentViewport );

	};

	this.getViewport = function ( target ) {

		return target.copy( _viewport );

	};

	this.setViewport = function ( x, y, width, height ) {

		if ( x.isVector4 ) {

			_viewport.set( x.x, x.y, x.z, x.w );

		} else {

			_viewport.set( x, y, width, height );

		}

		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

	};

	this.getScissor = function ( target ) {

		return target.copy( _scissor );

	};

	this.setScissor = function ( x, y, width, height ) {

		if ( x.isVector4 ) {

			_scissor.set( x.x, x.y, x.z, x.w );

		} else {

			_scissor.set( x, y, width, height );

		}

		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

	};

	this.getScissorTest = function () {

		return _scissorTest;

	};

	this.setScissorTest = function ( boolean ) {

		state.setScissorTest( _scissorTest = boolean );

	};

	this.setOpaqueSort = function ( method ) {

		_opaqueSort = method;

	};

	this.setTransparentSort = function ( method ) {

		_transparentSort = method;

	};

	// Clearing

	this.getClearColor = function ( target ) {

		return target.copy( background.getClearColor() );

	};

	this.setClearColor = function () {

		background.setClearColor.apply( background, arguments );

	};

	this.getClearAlpha = function () {

		return background.getClearAlpha();

	};

	this.setClearAlpha = function () {

		background.setClearAlpha.apply( background, arguments );

	};

	this.clear = function ( color, depth, stencil ) {

		let bits = 0;

		if ( color === undefined || color ) bits |= 16384;
		if ( depth === undefined || depth ) bits |= 256;
		if ( stencil === undefined || stencil ) bits |= 1024;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		this.clear( true, false, false );

	};

	this.clearDepth = function () {

		this.clear( false, true, false );

	};

	this.clearStencil = function () {

		this.clear( false, false, true );

	};

	//

	this.dispose = function () {

		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

		renderLists.dispose();
		renderStates.dispose();
		properties.dispose();
		cubemaps.dispose();
		cubeuvmaps.dispose();
		objects.dispose();
		bindingStates.dispose();

		xr.dispose();

		xr.removeEventListener( 'sessionstart', onXRSessionStart );
		xr.removeEventListener( 'sessionend', onXRSessionEnd );

		if ( _transmissionRenderTarget ) {

			_transmissionRenderTarget.dispose();
			_transmissionRenderTarget = null;

		}

		animation.stop();

	};

	// Events

	function onContextLost( event ) {

		event.preventDefault();

		console.log( 'THREE.WebGLRenderer: Context Lost.' );

		_isContextLost = true;

	}

	function onContextRestore( /* event */ ) {

		console.log( 'THREE.WebGLRenderer: Context Restored.' );

		_isContextLost = false;

		const infoAutoReset = info.autoReset;
		const shadowMapEnabled = shadowMap.enabled;
		const shadowMapAutoUpdate = shadowMap.autoUpdate;
		const shadowMapNeedsUpdate = shadowMap.needsUpdate;
		const shadowMapType = shadowMap.type;

		initGLContext();

		info.autoReset = infoAutoReset;
		shadowMap.enabled = shadowMapEnabled;
		shadowMap.autoUpdate = shadowMapAutoUpdate;
		shadowMap.needsUpdate = shadowMapNeedsUpdate;
		shadowMap.type = shadowMapType;

	}

	function onMaterialDispose( event ) {

		const material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	}

	// Buffer deallocation

	function deallocateMaterial( material ) {

		releaseMaterialProgramReferences( material );

		properties.remove( material );

	}


	function releaseMaterialProgramReferences( material ) {

		const programs = properties.get( material ).programs;

		if ( programs !== undefined ) {

			programs.forEach( function ( program ) {

				programCache.releaseProgram( program );

			} );

		}

	}

	// Buffer rendering

	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

		if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

		const program = setProgram( camera, scene, geometry, material, object );

		state.setMaterial( material, frontFaceCW );

		//

		let index = geometry.index;
		const position = geometry.attributes.position;

		//

		if ( index === null ) {

			if ( position === undefined || position.count === 0 ) return;

		} else if ( index.count === 0 ) {

			return;

		}

		//

		let rangeFactor = 1;

		if ( material.wireframe === true ) {

			index = geometries.getWireframeAttribute( geometry );
			rangeFactor = 2;

		}

		bindingStates.setup( object, material, program, geometry, index );

		let attribute;
		let renderer = bufferRenderer;

		if ( index !== null ) {

			attribute = attributes.get( index );

			renderer = indexedBufferRenderer;
			renderer.setIndex( attribute );

		}

		//

		const dataCount = ( index !== null ) ? index.count : position.count;

		const rangeStart = geometry.drawRange.start * rangeFactor;
		const rangeCount = geometry.drawRange.count * rangeFactor;

		const groupStart = group !== null ? group.start * rangeFactor : 0;
		const groupCount = group !== null ? group.count * rangeFactor : Infinity;

		const drawStart = Math.max( rangeStart, groupStart );
		const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

		const drawCount = Math.max( 0, drawEnd - drawStart + 1 );

		if ( drawCount === 0 ) return;

		//

		if ( object.isMesh ) {

			if ( material.wireframe === true ) {

				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
				renderer.setMode( 1 );

			} else {

				renderer.setMode( 4 );

			}

		} else if ( object.isLine ) {

			let lineWidth = material.linewidth;

			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

			state.setLineWidth( lineWidth * getTargetPixelRatio() );

			if ( object.isLineSegments ) {

				renderer.setMode( 1 );

			} else if ( object.isLineLoop ) {

				renderer.setMode( 2 );

			} else {

				renderer.setMode( 3 );

			}

		} else if ( object.isPoints ) {

			renderer.setMode( 0 );

		} else if ( object.isSprite ) {

			renderer.setMode( 4 );

		}

		if ( object.isInstancedMesh ) {

			renderer.renderInstances( drawStart, drawCount, object.count );

		} else if ( geometry.isInstancedBufferGeometry ) {

			const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );

			renderer.renderInstances( drawStart, drawCount, instanceCount );

		} else {

			renderer.render( drawStart, drawCount );

		}

	};

	// Compile

	this.compile = function ( scene, camera ) {

		currentRenderState = renderStates.get( scene );
		currentRenderState.init();

		renderStateStack.push( currentRenderState );

		scene.traverseVisible( function ( object ) {

			if ( object.isLight && object.layers.test( camera.layers ) ) {

				currentRenderState.pushLight( object );

				if ( object.castShadow ) {

					currentRenderState.pushShadow( object );

				}

			}

		} );

		currentRenderState.setupLights( _this.physicallyCorrectLights );

		scene.traverse( function ( object ) {

			const material = object.material;

			if ( material ) {

				if ( Array.isArray( material ) ) {

					for ( let i = 0; i < material.length; i ++ ) {

						const material2 = material[ i ];

						getProgram( material2, scene, object );

					}

				} else {

					getProgram( material, scene, object );

				}

			}

		} );

		renderStateStack.pop();
		currentRenderState = null;

	};

	// Animation Loop

	let onAnimationFrameCallback = null;

	function onAnimationFrame( time ) {

		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

	}

	function onXRSessionStart() {

		animation.stop();

	}

	function onXRSessionEnd() {

		animation.start();

	}

	const animation = new WebGLAnimation();
	animation.setAnimationLoop( onAnimationFrame );

	if ( typeof window !== 'undefined' ) animation.setContext( window );

	this.setAnimationLoop = function ( callback ) {

		onAnimationFrameCallback = callback;
		xr.setAnimationLoop( callback );

		( callback === null ) ? animation.stop() : animation.start();

	};

	xr.addEventListener( 'sessionstart', onXRSessionStart );
	xr.addEventListener( 'sessionend', onXRSessionEnd );

	// Rendering

	this.render = function ( scene, camera ) {

		if ( camera !== undefined && camera.isCamera !== true ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( _isContextLost === true ) return;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === null ) camera.updateMatrixWorld();

		if ( xr.enabled === true && xr.isPresenting === true ) {

			if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

			camera = xr.getCamera(); // use XR camera for rendering

		}

		//
		if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

		currentRenderState = renderStates.get( scene, renderStateStack.length );
		currentRenderState.init();

		renderStateStack.push( currentRenderState );

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromProjectionMatrix( _projScreenMatrix );

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

		currentRenderList = renderLists.get( scene, renderListStack.length );
		currentRenderList.init();

		renderListStack.push( currentRenderList );

		projectObject( scene, camera, 0, _this.sortObjects );

		currentRenderList.finish();

		if ( _this.sortObjects === true ) {

			currentRenderList.sort( _opaqueSort, _transparentSort );

		}

		//

		if ( _clippingEnabled === true ) clipping.beginShadows();

		const shadowsArray = currentRenderState.state.shadowsArray;

		shadowMap.render( shadowsArray, scene, camera );

		if ( _clippingEnabled === true ) clipping.endShadows();

		//

		if ( this.info.autoReset === true ) this.info.reset();

		//

		background.render( currentRenderList, scene );

		// render scene

		currentRenderState.setupLights( _this.physicallyCorrectLights );

		if ( camera.isArrayCamera ) {

			const cameras = camera.cameras;

			for ( let i = 0, l = cameras.length; i < l; i ++ ) {

				const camera2 = cameras[ i ];

				renderScene( currentRenderList, scene, camera2, camera2.viewport );

			}

		} else {

			renderScene( currentRenderList, scene, camera );

		}

		//

		if ( _currentRenderTarget !== null ) {

			// resolve multisample renderbuffers to a single-sample texture if necessary

			textures.updateMultisampleRenderTarget( _currentRenderTarget );

			// Generate mipmap if we're using any kind of mipmap filtering

			textures.updateRenderTargetMipmap( _currentRenderTarget );

		}

		//

		if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest( true );
		state.buffers.depth.setMask( true );
		state.buffers.color.setMask( true );

		state.setPolygonOffset( false );

		// _gl.finish();

		bindingStates.resetDefaultState();
		_currentMaterialId = - 1;
		_currentCamera = null;

		renderStateStack.pop();

		if ( renderStateStack.length > 0 ) {

			currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

		} else {

			currentRenderState = null;

		}

		renderListStack.pop();

		if ( renderListStack.length > 0 ) {

			currentRenderList = renderListStack[ renderListStack.length - 1 ];

		} else {

			currentRenderList = null;

		}

	};

	function projectObject( object, camera, groupOrder, sortObjects ) {

		if ( object.visible === false ) return;

		const visible = object.layers.test( camera.layers );

		if ( visible ) {

			if ( object.isGroup ) {

				groupOrder = object.renderOrder;

			} else if ( object.isLOD ) {

				if ( object.autoUpdate === true ) object.update( camera );

			} else if ( object.isLight ) {

				currentRenderState.pushLight( object );

				if ( object.castShadow ) {

					currentRenderState.pushShadow( object );

				}

			} else if ( object.isSprite ) {

				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					const geometry = objects.update( object );
					const material = object.material;

					if ( material.visible ) {

						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

					}

				}

			} else if ( object.isMesh || object.isLine || object.isPoints ) {

				if ( object.isSkinnedMesh ) {

					// update skeleton only once in a frame

					if ( object.skeleton.frame !== info.render.frame ) {

						object.skeleton.update();
						object.skeleton.frame = info.render.frame;

					}

				}

				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					const geometry = objects.update( object );
					const material = object.material;

					if ( Array.isArray( material ) ) {

						const groups = geometry.groups;

						for ( let i = 0, l = groups.length; i < l; i ++ ) {

							const group = groups[ i ];
							const groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

							}

						}

					} else if ( material.visible ) {

						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

					}

				}

			}

		}

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			projectObject( children[ i ], camera, groupOrder, sortObjects );

		}

	}

	function renderScene( currentRenderList, scene, camera, viewport ) {

		const opaqueObjects = currentRenderList.opaque;
		const transmissiveObjects = currentRenderList.transmissive;
		const transparentObjects = currentRenderList.transparent;

		currentRenderState.setupLightsView( camera );

		if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );

		if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

		if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
		if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
		if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

	}

	function renderTransmissionPass( opaqueObjects, scene, camera ) {

		if ( _transmissionRenderTarget === null ) {

			const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;
			const renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;

			_transmissionRenderTarget = new renderTargetType( 1024, 1024, {
				generateMipmaps: true,
				type: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,
				minFilter: LinearMipmapLinearFilter,
				magFilter: NearestFilter,
				wrapS: ClampToEdgeWrapping,
				wrapT: ClampToEdgeWrapping
			} );

		}

		const currentRenderTarget = _this.getRenderTarget();
		_this.setRenderTarget( _transmissionRenderTarget );
		_this.clear();

		// Turn off the features which can affect the frag color for opaque objects pass.
		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
		const currentToneMapping = _this.toneMapping;
		_this.toneMapping = NoToneMapping;

		renderObjects( opaqueObjects, scene, camera );

		_this.toneMapping = currentToneMapping;

		textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
		textures.updateRenderTargetMipmap( _transmissionRenderTarget );

		_this.setRenderTarget( currentRenderTarget );

	}

	function renderObjects( renderList, scene, camera ) {

		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

		for ( let i = 0, l = renderList.length; i < l; i ++ ) {

			const renderItem = renderList[ i ];

			const object = renderItem.object;
			const geometry = renderItem.geometry;
			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
			const group = renderItem.group;

			if ( object.layers.test( camera.layers ) ) {

				renderObject( object, scene, camera, geometry, material, group );

			}

		}

	}

	function renderObject( object, scene, camera, geometry, material, group ) {

		object.onBeforeRender( _this, scene, camera, geometry, material, group );

		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

		material.onBeforeRender( _this, scene, camera, geometry, object, group );

		if ( material.transparent === true && material.side === DoubleSide ) {

			material.side = BackSide;
			material.needsUpdate = true;
			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

			material.side = FrontSide;
			material.needsUpdate = true;
			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

			material.side = DoubleSide;

		} else {

			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

		}

		object.onAfterRender( _this, scene, camera, geometry, material, group );

	}

	function getProgram( material, scene, object ) {

		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

		const materialProperties = properties.get( material );

		const lights = currentRenderState.state.lights;
		const shadowsArray = currentRenderState.state.shadowsArray;

		const lightsStateVersion = lights.state.version;

		const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
		const programCacheKey = programCache.getProgramCacheKey( parameters );

		let programs = materialProperties.programs;

		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
		materialProperties.fog = scene.fog;
		materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );

		if ( programs === undefined ) {

			// new material

			material.addEventListener( 'dispose', onMaterialDispose );

			programs = new Map();
			materialProperties.programs = programs;

		}

		let program = programs.get( programCacheKey );

		if ( program !== undefined ) {

			// early out if program and light state is identical

			if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

				updateCommonMaterialProperties( material, parameters );

				return program;

			}

		} else {

			parameters.uniforms = programCache.getUniforms( material );

			material.onBuild( object, parameters, _this );

			material.onBeforeCompile( parameters, _this );

			program = programCache.acquireProgram( parameters, programCacheKey );
			programs.set( programCacheKey, program );

			materialProperties.uniforms = parameters.uniforms;

		}

		const uniforms = materialProperties.uniforms;

		if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

			uniforms.clippingPlanes = clipping.uniform;

		}

		updateCommonMaterialProperties( material, parameters );

		// store the light setup it was created for

		materialProperties.needsLights = materialNeedsLights( material );
		materialProperties.lightsStateVersion = lightsStateVersion;

		if ( materialProperties.needsLights ) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = lights.state.ambient;
			uniforms.lightProbe.value = lights.state.probe;
			uniforms.directionalLights.value = lights.state.directional;
			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
			uniforms.spotLights.value = lights.state.spot;
			uniforms.spotLightShadows.value = lights.state.spotShadow;
			uniforms.rectAreaLights.value = lights.state.rectArea;
			uniforms.ltc_1.value = lights.state.rectAreaLTC1;
			uniforms.ltc_2.value = lights.state.rectAreaLTC2;
			uniforms.pointLights.value = lights.state.point;
			uniforms.pointLightShadows.value = lights.state.pointShadow;
			uniforms.hemisphereLights.value = lights.state.hemi;

			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		const progUniforms = program.getUniforms();
		const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

		materialProperties.currentProgram = program;
		materialProperties.uniformsList = uniformsList;

		return program;

	}

	function updateCommonMaterialProperties( material, parameters ) {

		const materialProperties = properties.get( material );

		materialProperties.outputEncoding = parameters.outputEncoding;
		materialProperties.instancing = parameters.instancing;
		materialProperties.skinning = parameters.skinning;
		materialProperties.morphTargets = parameters.morphTargets;
		materialProperties.morphNormals = parameters.morphNormals;
		materialProperties.morphTargetsCount = parameters.morphTargetsCount;
		materialProperties.numClippingPlanes = parameters.numClippingPlanes;
		materialProperties.numIntersection = parameters.numClipIntersection;
		materialProperties.vertexAlphas = parameters.vertexAlphas;
		materialProperties.vertexTangents = parameters.vertexTangents;

	}

	function setProgram( camera, scene, geometry, material, object ) {

		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

		textures.resetTextureUnits();

		const fog = scene.fog;
		const environment = material.isMeshStandardMaterial ? scene.environment : null;
		const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
		const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
		const vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;
		const morphTargets = !! geometry.morphAttributes.position;
		const morphNormals = !! geometry.morphAttributes.normal;
		const morphTargetsCount = !! geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;

		const materialProperties = properties.get( material );
		const lights = currentRenderState.state.lights;

		if ( _clippingEnabled === true ) {

			if ( _localClippingEnabled === true || camera !== _currentCamera ) {

				const useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				clipping.setState( material, camera, useCache );

			}

		}

		//

		let needsProgramChange = false;

		if ( material.version === materialProperties.__version ) {

			if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

				needsProgramChange = true;

			} else if ( materialProperties.outputEncoding !== encoding ) {

				needsProgramChange = true;

			} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

				needsProgramChange = true;

			} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

				needsProgramChange = true;

			} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

				needsProgramChange = true;

			} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

				needsProgramChange = true;

			} else if ( materialProperties.envMap !== envMap ) {

				needsProgramChange = true;

			} else if ( material.fog && materialProperties.fog !== fog ) {

				needsProgramChange = true;

			} else if ( materialProperties.numClippingPlanes !== undefined &&
				( materialProperties.numClippingPlanes !== clipping.numPlanes ||
				materialProperties.numIntersection !== clipping.numIntersection ) ) {

				needsProgramChange = true;

			} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

				needsProgramChange = true;

			} else if ( materialProperties.vertexTangents !== vertexTangents ) {

				needsProgramChange = true;

			} else if ( materialProperties.morphTargets !== morphTargets ) {

				needsProgramChange = true;

			} else if ( materialProperties.morphNormals !== morphNormals ) {

				needsProgramChange = true;

			} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {

				needsProgramChange = true;

			}

		} else {

			needsProgramChange = true;
			materialProperties.__version = material.version;

		}

		//

		let program = materialProperties.currentProgram;

		if ( needsProgramChange === true ) {

			program = getProgram( material, scene, object );

		}

		let refreshProgram = false;
		let refreshMaterial = false;
		let refreshLights = false;

		const p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.uniforms;

		if ( state.useProgram( program.program ) ) {

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || _currentCamera !== camera ) {

			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

			if ( capabilities.logarithmicDepthBuffer ) {

				p_uniforms.setValue( _gl, 'logDepthBufFC',
					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}

			if ( _currentCamera !== camera ) {

				_currentCamera = camera;

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap ) {

				const uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl,
						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ) {

				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.isShadowMaterial ||
				object.isSkinnedMesh ) {

				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

			}

		}

		// skinning and morph target uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone and morph texture must go before other textures
		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

		if ( object.isSkinnedMesh ) {

			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

			const skeleton = object.skeleton;

			if ( skeleton ) {

				if ( capabilities.floatVertexTextures ) {

					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

				} else {

					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

				}

			}

		}

		if ( !! geometry && ( geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined ) ) {

			morphtargets.update( object, geometry, material, program );

		}


		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

			materialProperties.receiveShadow = object.receiveShadow;
			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

		}

		if ( refreshMaterial ) {

			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

			if ( materialProperties.needsLights ) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

			}

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				materials.refreshFogUniforms( m_uniforms, fog );

			}

			materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );

			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

		}

		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
			material.uniformsNeedUpdate = false;

		}

		if ( material.isSpriteMaterial ) {

			p_uniforms.setValue( _gl, 'center', object.center );

		}

		// common matrices

		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

		return program;

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate( uniforms, value ) {

		uniforms.ambientLightColor.needsUpdate = value;
		uniforms.lightProbe.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.directionalLightShadows.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.pointLightShadows.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.spotLightShadows.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	function materialNeedsLights( material ) {

		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
			material.isMeshStandardMaterial || material.isShadowMaterial ||
			( material.isShaderMaterial && material.lights === true );

	}

	this.getActiveCubeFace = function () {

		return _currentActiveCubeFace;

	};

	this.getActiveMipmapLevel = function () {

		return _currentActiveMipmapLevel;

	};

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

		_currentRenderTarget = renderTarget;
		_currentActiveCubeFace = activeCubeFace;
		_currentActiveMipmapLevel = activeMipmapLevel;

		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

			textures.setupRenderTarget( renderTarget );

		}

		let framebuffer = null;
		let isCube = false;
		let isRenderTarget3D = false;

		if ( renderTarget ) {

			const texture = renderTarget.texture;

			if ( texture.isDataTexture3D || texture.isDataTexture2DArray ) {

				isRenderTarget3D = true;

			}

			const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLCubeRenderTarget ) {

				framebuffer = __webglFramebuffer[ activeCubeFace ];
				isCube = true;

			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

			} else {

				framebuffer = __webglFramebuffer;

			}

			_currentViewport.copy( renderTarget.viewport );
			_currentScissor.copy( renderTarget.scissor );
			_currentScissorTest = renderTarget.scissorTest;

		} else {

			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
			_currentScissorTest = _scissorTest;

		}

		const framebufferBound = state.bindFramebuffer( 36160, framebuffer );

		if ( framebufferBound && capabilities.drawBuffers ) {

			let needsUpdate = false;

			if ( renderTarget ) {

				if ( renderTarget.isWebGLMultipleRenderTargets ) {

					const textures = renderTarget.texture;

					if ( _currentDrawBuffers.length !== textures.length || _currentDrawBuffers[ 0 ] !== 36064 ) {

						for ( let i = 0, il = textures.length; i < il; i ++ ) {

							_currentDrawBuffers[ i ] = 36064 + i;

						}

						_currentDrawBuffers.length = textures.length;

						needsUpdate = true;

					}

				} else {

					if ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 36064 ) {

						_currentDrawBuffers[ 0 ] = 36064;
						_currentDrawBuffers.length = 1;

						needsUpdate = true;

					}

				}

			} else {

				if ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 1029 ) {

					_currentDrawBuffers[ 0 ] = 1029;
					_currentDrawBuffers.length = 1;

					needsUpdate = true;

				}

			}

			if ( needsUpdate ) {

				if ( capabilities.isWebGL2 ) {

					_gl.drawBuffers( _currentDrawBuffers );

				} else {

					extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( _currentDrawBuffers );

				}

			}

		}

		state.viewport( _currentViewport );
		state.scissor( _currentScissor );
		state.setScissorTest( _currentScissorTest );

		if ( isCube ) {

			const textureProperties = properties.get( renderTarget.texture );
			_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

		} else if ( isRenderTarget3D ) {

			const textureProperties = properties.get( renderTarget.texture );
			const layer = activeCubeFace || 0;
			_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

		}

		_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

	};

	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
			return;

		}

		let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

			framebuffer = framebuffer[ activeCubeFaceIndex ];

		}

		if ( framebuffer ) {

			state.bindFramebuffer( 36160, framebuffer );

			try {

				const texture = renderTarget.texture;
				const textureFormat = texture.format;
				const textureType = texture.type;

				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
					return;

				}

				const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );

				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)
					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					! halfFloatSupportedByExt ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
					return;

				}

				if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

					}

				} else {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

				}

			} finally {

				// restore framebuffer of current render target if necessary

				const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
				state.bindFramebuffer( 36160, framebuffer );

			}

		}

	};

	this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {

		const levelScale = Math.pow( 2, - level );
		const width = Math.floor( texture.image.width * levelScale );
		const height = Math.floor( texture.image.height * levelScale );

		let glFormat = utils.convert( texture.format );

		if ( capabilities.isWebGL2 ) {

			// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100
			// Not needed in Chrome 93+

			if ( glFormat === 6407 ) glFormat = 32849;
			if ( glFormat === 6408 ) glFormat = 32856;

		}

		textures.setTexture2D( texture, 0 );

		_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );

		state.unbindTexture();

	};

	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {

		const width = srcTexture.image.width;
		const height = srcTexture.image.height;
		const glFormat = utils.convert( dstTexture.format );
		const glType = utils.convert( dstTexture.type );

		textures.setTexture2D( dstTexture, 0 );

		// As another texture upload may have changed pixelStorei
		// parameters, make sure they are correct for the dstTexture
		_gl.pixelStorei( 37440, dstTexture.flipY );
		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );

		if ( srcTexture.isDataTexture ) {

			_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

		} else {

			if ( srcTexture.isCompressedTexture ) {

				_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

			} else {

				_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );

			}

		}

		// Generate mipmaps only when copying level 0
		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );

		state.unbindTexture();

	};

	this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {

		if ( _this.isWebGL1Renderer ) {

			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
			return;

		}

		const width = sourceBox.max.x - sourceBox.min.x + 1;
		const height = sourceBox.max.y - sourceBox.min.y + 1;
		const depth = sourceBox.max.z - sourceBox.min.z + 1;
		const glFormat = utils.convert( dstTexture.format );
		const glType = utils.convert( dstTexture.type );
		let glTarget;

		if ( dstTexture.isDataTexture3D ) {

			textures.setTexture3D( dstTexture, 0 );
			glTarget = 32879;

		} else if ( dstTexture.isDataTexture2DArray ) {

			textures.setTexture2DArray( dstTexture, 0 );
			glTarget = 35866;

		} else {

			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
			return;

		}

		_gl.pixelStorei( 37440, dstTexture.flipY );
		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );

		const unpackRowLen = _gl.getParameter( 3314 );
		const unpackImageHeight = _gl.getParameter( 32878 );
		const unpackSkipPixels = _gl.getParameter( 3316 );
		const unpackSkipRows = _gl.getParameter( 3315 );
		const unpackSkipImages = _gl.getParameter( 32877 );

		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;

		_gl.pixelStorei( 3314, image.width );
		_gl.pixelStorei( 32878, image.height );
		_gl.pixelStorei( 3316, sourceBox.min.x );
		_gl.pixelStorei( 3315, sourceBox.min.y );
		_gl.pixelStorei( 32877, sourceBox.min.z );

		if ( srcTexture.isDataTexture || srcTexture.isDataTexture3D ) {

			_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );

		} else {

			if ( srcTexture.isCompressedTexture ) {

				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
				_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );

			} else {

				_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );

			}

		}

		_gl.pixelStorei( 3314, unpackRowLen );
		_gl.pixelStorei( 32878, unpackImageHeight );
		_gl.pixelStorei( 3316, unpackSkipPixels );
		_gl.pixelStorei( 3315, unpackSkipRows );
		_gl.pixelStorei( 32877, unpackSkipImages );

		// Generate mipmaps only when copying level 0
		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );

		state.unbindTexture();

	};

	this.initTexture = function ( texture ) {

		textures.setTexture2D( texture, 0 );

		state.unbindTexture();

	};

	this.resetState = function () {

		_currentActiveCubeFace = 0;
		_currentActiveMipmapLevel = 0;
		_currentRenderTarget = null;

		state.reset();
		bindingStates.reset();

	};

	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

	}

}

WebGLRenderer.prototype.isWebGLRenderer = true;

class WebGL1Renderer extends WebGLRenderer {}

WebGL1Renderer.prototype.isWebGL1Renderer = true;

class FogExp2 {

	constructor( color, density = 0.00025 ) {

		this.name = '';

		this.color = new Color( color );
		this.density = density;

	}

	clone() {

		return new FogExp2( this.color, this.density );

	}

	toJSON( /* meta */ ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	}

}

FogExp2.prototype.isFogExp2 = true;

class Fog {

	constructor( color, near = 1, far = 1000 ) {

		this.name = '';

		this.color = new Color( color );

		this.near = near;
		this.far = far;

	}

	clone() {

		return new Fog( this.color, this.near, this.far );

	}

	toJSON( /* meta */ ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	}

}

Fog.prototype.isFog = true;

class Scene extends Object3D {

	constructor() {

		super();

		this.type = 'Scene';

		this.background = null;
		this.environment = null;
		this.fog = null;

		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

		}

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.environment !== null ) this.environment = source.environment.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();

		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	}

}

Scene.prototype.isScene = true;

class InterleavedBuffer {

	constructor( array, stride ) {

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

		this.uuid = generateUUID();

	}

	onUploadCallback() {}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	setUsage( value ) {

		this.usage = value;

		return this;

	}

	copy( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.usage = source.usage;

		return this;

	}

	copyAt( index1, attribute, index2 ) {

		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( let i = 0, l = this.stride; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	}

	set( value, offset = 0 ) {

		this.array.set( value, offset );

		return this;

	}

	clone( data ) {

		if ( data.arrayBuffers === undefined ) {

			data.arrayBuffers = {};

		}

		if ( this.array.buffer._uuid === undefined ) {

			this.array.buffer._uuid = generateUUID();

		}

		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

		}

		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

		const ib = new this.constructor( array, this.stride );
		ib.setUsage( this.usage );

		return ib;

	}

	onUpload( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

	toJSON( data ) {

		if ( data.arrayBuffers === undefined ) {

			data.arrayBuffers = {};

		}

		// generate UUID for array buffer if necessary

		if ( this.array.buffer._uuid === undefined ) {

			this.array.buffer._uuid = generateUUID();

		}

		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

			data.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );

		}

		//

		return {
			uuid: this.uuid,
			buffer: this.array.buffer._uuid,
			type: this.array.constructor.name,
			stride: this.stride
		};

	}

}

InterleavedBuffer.prototype.isInterleavedBuffer = true;

const _vector$6 = /*@__PURE__*/ new Vector3();

class InterleavedBufferAttribute {

	constructor( interleavedBuffer, itemSize, offset, normalized = false ) {

		this.name = '';

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}

	get count() {

		return this.data.count;

	}

	get array() {

		return this.data.array;

	}

	set needsUpdate( value ) {

		this.data.needsUpdate = value;

	}

	applyMatrix4( m ) {

		for ( let i = 0, l = this.data.count; i < l; i ++ ) {

			_vector$6.x = this.getX( i );
			_vector$6.y = this.getY( i );
			_vector$6.z = this.getZ( i );

			_vector$6.applyMatrix4( m );

			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

		}

		return this;

	}

	applyNormalMatrix( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$6.x = this.getX( i );
			_vector$6.y = this.getY( i );
			_vector$6.z = this.getZ( i );

			_vector$6.applyNormalMatrix( m );

			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

		}

		return this;

	}

	transformDirection( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$6.x = this.getX( i );
			_vector$6.y = this.getY( i );
			_vector$6.z = this.getZ( i );

			_vector$6.transformDirection( m );

			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

		}

		return this;

	}

	setX( index, x ) {

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	}

	setY( index, y ) {

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	}

	setZ( index, z ) {

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	}

	setW( index, w ) {

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	}

	getX( index ) {

		return this.data.array[ index * this.data.stride + this.offset ];

	}

	getY( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	}

	getZ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	}

	getW( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	}

	setXY( index, x, y ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	}

	setXYZ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	}

	setXYZW( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

	clone( data ) {

		if ( data === undefined ) {

			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );

			const array = [];

			for ( let i = 0; i < this.count; i ++ ) {

				const index = i * this.data.stride + this.offset;

				for ( let j = 0; j < this.itemSize; j ++ ) {

					array.push( this.data.array[ index + j ] );

				}

			}

			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

		} else {

			if ( data.interleavedBuffers === undefined ) {

				data.interleavedBuffers = {};

			}

			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

			}

			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

		}

	}

	toJSON( data ) {

		if ( data === undefined ) {

			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );

			const array = [];

			for ( let i = 0; i < this.count; i ++ ) {

				const index = i * this.data.stride + this.offset;

				for ( let j = 0; j < this.itemSize; j ++ ) {

					array.push( this.data.array[ index + j ] );

				}

			}

			// deinterleave data and save it as an ordinary buffer attribute for now

			return {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: array,
				normalized: this.normalized
			};

		} else {

			// save as true interlaved attribtue

			if ( data.interleavedBuffers === undefined ) {

				data.interleavedBuffers = {};

			}

			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

			}

			return {
				isInterleavedBufferAttribute: true,
				itemSize: this.itemSize,
				data: this.data.uuid,
				offset: this.offset,
				normalized: this.normalized
			};

		}

	}

}

InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;

/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

class SpriteMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.rotation = 0;

		this.sizeAttenuation = true;

		this.transparent = true;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.rotation = source.rotation;

		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	}

}

SpriteMaterial.prototype.isSpriteMaterial = true;

let _geometry;

const _intersectPoint = /*@__PURE__*/ new Vector3();
const _worldScale = /*@__PURE__*/ new Vector3();
const _mvPosition = /*@__PURE__*/ new Vector3();

const _alignedPosition = /*@__PURE__*/ new Vector2();
const _rotatedPosition = /*@__PURE__*/ new Vector2();
const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();

const _vA = /*@__PURE__*/ new Vector3();
const _vB = /*@__PURE__*/ new Vector3();
const _vC = /*@__PURE__*/ new Vector3();

const _uvA = /*@__PURE__*/ new Vector2();
const _uvB = /*@__PURE__*/ new Vector2();
const _uvC = /*@__PURE__*/ new Vector2();

class Sprite extends Object3D {

	constructor( material ) {

		super();

		this.type = 'Sprite';

		if ( _geometry === undefined ) {

			_geometry = new BufferGeometry();

			const float32Array = new Float32Array( [
				- 0.5, - 0.5, 0, 0, 0,
				0.5, - 0.5, 0, 1, 0,
				0.5, 0.5, 0, 1, 1,
				- 0.5, 0.5, 0, 0, 1
			] );

			const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

			_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
			_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
			_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

		}

		this.geometry = _geometry;
		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

		this.center = new Vector2( 0.5, 0.5 );

	}

	raycast( raycaster, intersects ) {

		if ( raycaster.camera === null ) {

			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

		}

		_worldScale.setFromMatrixScale( this.matrixWorld );

		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

			_worldScale.multiplyScalar( - _mvPosition.z );

		}

		const rotation = this.material.rotation;
		let sin, cos;

		if ( rotation !== 0 ) {

			cos = Math.cos( rotation );
			sin = Math.sin( rotation );

		}

		const center = this.center;

		transformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
		transformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
		transformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

		_uvA.set( 0, 0 );
		_uvB.set( 1, 0 );
		_uvC.set( 1, 1 );

		// check first triangle
		let intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );

		if ( intersect === null ) {

			// check second triangle
			transformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
			_uvB.set( 0, 1 );

			intersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );
			if ( intersect === null ) {

				return;

			}

		}

		const distance = raycaster.ray.origin.distanceTo( _intersectPoint );

		if ( distance < raycaster.near || distance > raycaster.far ) return;

		intersects.push( {

			distance: distance,
			point: _intersectPoint.clone(),
			uv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),
			face: null,
			object: this

		} );

	}

	copy( source ) {

		super.copy( source );

		if ( source.center !== undefined ) this.center.copy( source.center );

		this.material = source.material;

		return this;

	}

}

Sprite.prototype.isSprite = true;

function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

	// compute position in camera space
	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

	// to check if rotation is not zero
	if ( sin !== undefined ) {

		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

	} else {

		_rotatedPosition.copy( _alignedPosition );

	}


	vertexPosition.copy( mvPosition );
	vertexPosition.x += _rotatedPosition.x;
	vertexPosition.y += _rotatedPosition.y;

	// transform to world space
	vertexPosition.applyMatrix4( _viewWorldMatrix );

}

const _v1$2 = /*@__PURE__*/ new Vector3();
const _v2$1 = /*@__PURE__*/ new Vector3();

class LOD extends Object3D {

	constructor() {

		super();

		this._currentLevel = 0;

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			},
			isLOD: {
				value: true,
			}
		} );

		this.autoUpdate = true;

	}

	copy( source ) {

		super.copy( source, false );

		const levels = source.levels;

		for ( let i = 0, l = levels.length; i < l; i ++ ) {

			const level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		this.autoUpdate = source.autoUpdate;

		return this;

	}

	addLevel( object, distance = 0 ) {

		distance = Math.abs( distance );

		const levels = this.levels;

		let l;

		for ( l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

		return this;

	}

	getCurrentLevel() {

		return this._currentLevel;

	}

	getObjectForDistance( distance ) {

		const levels = this.levels;

		if ( levels.length > 0 ) {

			let i, l;

			for ( i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		}

		return null;

	}

	raycast( raycaster, intersects ) {

		const levels = this.levels;

		if ( levels.length > 0 ) {

			_v1$2.setFromMatrixPosition( this.matrixWorld );

			const distance = raycaster.ray.origin.distanceTo( _v1$2 );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		}

	}

	update( camera ) {

		const levels = this.levels;

		if ( levels.length > 1 ) {

			_v1$2.setFromMatrixPosition( camera.matrixWorld );
			_v2$1.setFromMatrixPosition( this.matrixWorld );

			const distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;

			levels[ 0 ].object.visible = true;

			let i, l;

			for ( i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance >= levels[ i ].distance ) {

					levels[ i - 1 ].object.visible = false;
					levels[ i ].object.visible = true;

				} else {

					break;

				}

			}

			this._currentLevel = i - 1;

			for ( ; i < l; i ++ ) {

				levels[ i ].object.visible = false;

			}

		}

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		if ( this.autoUpdate === false ) data.object.autoUpdate = false;

		data.object.levels = [];

		const levels = this.levels;

		for ( let i = 0, l = levels.length; i < l; i ++ ) {

			const level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	}

}

const _basePosition = /*@__PURE__*/ new Vector3();

const _skinIndex = /*@__PURE__*/ new Vector4();
const _skinWeight = /*@__PURE__*/ new Vector4();

const _vector$5 = /*@__PURE__*/ new Vector3();
const _matrix = /*@__PURE__*/ new Matrix4();

class SkinnedMesh extends Mesh {

	constructor( geometry, material ) {

		super( geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

	}

	copy( source ) {

		super.copy( source );

		this.bindMode = source.bindMode;
		this.bindMatrix.copy( source.bindMatrix );
		this.bindMatrixInverse.copy( source.bindMatrixInverse );

		this.skeleton = source.skeleton;

		return this;

	}

	bind( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.copy( bindMatrix ).invert();

	}

	pose() {

		this.skeleton.pose();

	}

	normalizeSkinWeights() {

		const vector = new Vector4();

		const skinWeight = this.geometry.attributes.skinWeight;

		for ( let i = 0, l = skinWeight.count; i < l; i ++ ) {

			vector.x = skinWeight.getX( i );
			vector.y = skinWeight.getY( i );
			vector.z = skinWeight.getZ( i );
			vector.w = skinWeight.getW( i );

			const scale = 1.0 / vector.manhattanLength();

			if ( scale !== Infinity ) {

				vector.multiplyScalar( scale );

			} else {

				vector.set( 1, 0, 0, 0 ); // do something reasonable

			}

			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

		}

	}

	updateMatrixWorld( force ) {

		super.updateMatrixWorld( force );

		if ( this.bindMode === 'attached' ) {

			this.bindMatrixInverse.copy( this.matrixWorld ).invert();

		} else if ( this.bindMode === 'detached' ) {

			this.bindMatrixInverse.copy( this.bindMatrix ).invert();

		} else {

			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

		}

	}

	boneTransform( index, target ) {

		const skeleton = this.skeleton;
		const geometry = this.geometry;

		_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );
		_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );

		_basePosition.copy( target ).applyMatrix4( this.bindMatrix );

		target.set( 0, 0, 0 );

		for ( let i = 0; i < 4; i ++ ) {

			const weight = _skinWeight.getComponent( i );

			if ( weight !== 0 ) {

				const boneIndex = _skinIndex.getComponent( i );

				_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );

				target.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );

			}

		}

		return target.applyMatrix4( this.bindMatrixInverse );

	}

}

SkinnedMesh.prototype.isSkinnedMesh = true;

class Bone extends Object3D {

	constructor() {

		super();

		this.type = 'Bone';

	}

}

Bone.prototype.isBone = true;

class DataTexture extends Texture {

	constructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {

		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter;
		this.minFilter = minFilter;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

		this.needsUpdate = true;

	}

}

DataTexture.prototype.isDataTexture = true;

const _offsetMatrix = /*@__PURE__*/ new Matrix4();
const _identityMatrix = /*@__PURE__*/ new Matrix4();

class Skeleton {

	constructor( bones = [], boneInverses = [] ) {

		this.uuid = generateUUID();

		this.bones = bones.slice( 0 );
		this.boneInverses = boneInverses;
		this.boneMatrices = null;

		this.boneTexture = null;
		this.boneTextureSize = 0;

		this.frame = - 1;

		this.init();

	}

	init() {

		const bones = this.bones;
		const boneInverses = this.boneInverses;

		this.boneMatrices = new Float32Array( bones.length * 16 );

		// calculate inverse bone matrices if necessary

		if ( boneInverses.length === 0 ) {

			this.calculateInverses();

		} else {

			// handle special case

			if ( bones.length !== boneInverses.length ) {

				console.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );

				this.boneInverses = [];

				for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	calculateInverses() {

		this.boneInverses.length = 0;

		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

			const inverse = new Matrix4();

			if ( this.bones[ i ] ) {

				inverse.copy( this.bones[ i ].matrixWorld ).invert();

			}

			this.boneInverses.push( inverse );

		}

	}

	pose() {

		// recover the bind-time world matrices

		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

			const bone = this.bones[ i ];

			if ( bone ) {

				bone.matrixWorld.copy( this.boneInverses[ i ] ).invert();

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

			const bone = this.bones[ i ];

			if ( bone ) {

				if ( bone.parent && bone.parent.isBone ) {

					bone.matrix.copy( bone.parent.matrixWorld ).invert();
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	}

	update() {

		const bones = this.bones;
		const boneInverses = this.boneInverses;
		const boneMatrices = this.boneMatrices;
		const boneTexture = this.boneTexture;

		// flatten bone matrices to array

		for ( let i = 0, il = bones.length; i < il; i ++ ) {

			// compute the offset between the current and the original transform

			const matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
			_offsetMatrix.toArray( boneMatrices, i * 16 );

		}

		if ( boneTexture !== null ) {

			boneTexture.needsUpdate = true;

		}

	}

	clone() {

		return new Skeleton( this.bones, this.boneInverses );

	}

	computeBoneTexture() {

		// layout (1 matrix = 4 pixels)
		//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
		//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
		//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
		//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
		//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)

		let size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
		size = ceilPowerOfTwo( size );
		size = Math.max( size, 4 );

		const boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
		boneMatrices.set( this.boneMatrices ); // copy current values

		const boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

		this.boneMatrices = boneMatrices;
		this.boneTexture = boneTexture;
		this.boneTextureSize = size;

		return this;

	}

	getBoneByName( name ) {

		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {

			const bone = this.bones[ i ];

			if ( bone.name === name ) {

				return bone;

			}

		}

		return undefined;

	}

	dispose( ) {

		if ( this.boneTexture !== null ) {

			this.boneTexture.dispose();

			this.boneTexture = null;

		}

	}

	fromJSON( json, bones ) {

		this.uuid = json.uuid;

		for ( let i = 0, l = json.bones.length; i < l; i ++ ) {

			const uuid = json.bones[ i ];
			let bone = bones[ uuid ];

			if ( bone === undefined ) {

				console.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );
				bone = new Bone();

			}

			this.bones.push( bone );
			this.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );

		}

		this.init();

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.5,
				type: 'Skeleton',
				generator: 'Skeleton.toJSON'
			},
			bones: [],
			boneInverses: []
		};

		data.uuid = this.uuid;

		const bones = this.bones;
		const boneInverses = this.boneInverses;

		for ( let i = 0, l = bones.length; i < l; i ++ ) {

			const bone = bones[ i ];
			data.bones.push( bone.uuid );

			const boneInverse = boneInverses[ i ];
			data.boneInverses.push( boneInverse.toArray() );

		}

		return data;

	}

}

class InstancedBufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized, meshPerAttribute = 1 ) {

		if ( typeof normalized === 'number' ) {

			meshPerAttribute = normalized;

			normalized = false;

			console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

		}

		super( array, itemSize, normalized );

		this.meshPerAttribute = meshPerAttribute;

	}

	copy( source ) {

		super.copy( source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.meshPerAttribute = this.meshPerAttribute;

		data.isInstancedBufferAttribute = true;

		return data;

	}

}

InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();

const _instanceIntersects = [];

const _mesh = /*@__PURE__*/ new Mesh();

class InstancedMesh extends Mesh {

	constructor( geometry, material, count ) {

		super( geometry, material );

		this.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );
		this.instanceColor = null;

		this.count = count;

		this.frustumCulled = false;

	}

	copy( source ) {

		super.copy( source );

		this.instanceMatrix.copy( source.instanceMatrix );

		if ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();

		this.count = source.count;

		return this;

	}

	getColorAt( index, color ) {

		color.fromArray( this.instanceColor.array, index * 3 );

	}

	getMatrixAt( index, matrix ) {

		matrix.fromArray( this.instanceMatrix.array, index * 16 );

	}

	raycast( raycaster, intersects ) {

		const matrixWorld = this.matrixWorld;
		const raycastTimes = this.count;

		_mesh.geometry = this.geometry;
		_mesh.material = this.material;

		if ( _mesh.material === undefined ) return;

		for ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

			// calculate the world matrix for each instance

			this.getMatrixAt( instanceId, _instanceLocalMatrix );

			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

			// the mesh represents this single instance

			_mesh.matrixWorld = _instanceWorldMatrix;

			_mesh.raycast( raycaster, _instanceIntersects );

			// process the result of raycast

			for ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {

				const intersect = _instanceIntersects[ i ];
				intersect.instanceId = instanceId;
				intersect.object = this;
				intersects.push( intersect );

			}

			_instanceIntersects.length = 0;

		}

	}

	setColorAt( index, color ) {

		if ( this.instanceColor === null ) {

			this.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );

		}

		color.toArray( this.instanceColor.array, index * 3 );

	}

	setMatrixAt( index, matrix ) {

		matrix.toArray( this.instanceMatrix.array, index * 16 );

	}

	updateMorphTargets() {

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

}

InstancedMesh.prototype.isInstancedMesh = true;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

class LineBasicMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.setValues( parameters );

	}


	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	}

}

LineBasicMaterial.prototype.isLineBasicMaterial = true;

const _start$1 = /*@__PURE__*/ new Vector3();
const _end$1 = /*@__PURE__*/ new Vector3();
const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
const _ray$1 = /*@__PURE__*/ new Ray();
const _sphere$1 = /*@__PURE__*/ new Sphere();

class Line extends Object3D {

	constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {

		super();

		this.type = 'Line';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy( source ) {

		super.copy( source );

		this.material = source.material;
		this.geometry = source.geometry;

		return this;

	}

	computeLineDistances() {

		const geometry = this.geometry;

		if ( geometry.isBufferGeometry ) {

			// we assume non-indexed geometry

			if ( geometry.index === null ) {

				const positionAttribute = geometry.attributes.position;
				const lineDistances = [ 0 ];

				for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {

					_start$1.fromBufferAttribute( positionAttribute, i - 1 );
					_end$1.fromBufferAttribute( positionAttribute, i );

					lineDistances[ i ] = lineDistances[ i - 1 ];
					lineDistances[ i ] += _start$1.distanceTo( _end$1 );

				}

				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

			} else {

				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

			}

		} else if ( geometry.isGeometry ) {

			console.error( 'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

		return this;

	}

	raycast( raycaster, intersects ) {

		const geometry = this.geometry;
		const matrixWorld = this.matrixWorld;
		const threshold = raycaster.params.Line.threshold;
		const drawRange = geometry.drawRange;

		// Checking boundingSphere distance to ray

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		_sphere$1.copy( geometry.boundingSphere );
		_sphere$1.applyMatrix4( matrixWorld );
		_sphere$1.radius += threshold;

		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;

		//

		_inverseMatrix$1.copy( matrixWorld ).invert();
		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
		const localThresholdSq = localThreshold * localThreshold;

		const vStart = new Vector3();
		const vEnd = new Vector3();
		const interSegment = new Vector3();
		const interRay = new Vector3();
		const step = this.isLineSegments ? 2 : 1;

		if ( geometry.isBufferGeometry ) {

			const index = geometry.index;
			const attributes = geometry.attributes;
			const positionAttribute = attributes.position;

			if ( index !== null ) {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, l = end - 1; i < l; i += step ) {

					const a = index.getX( i );
					const b = index.getX( i + 1 );

					vStart.fromBufferAttribute( positionAttribute, a );
					vEnd.fromBufferAttribute( positionAttribute, b );

					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

					if ( distSq > localThresholdSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					const distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			} else {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, l = end - 1; i < l; i += step ) {

					vStart.fromBufferAttribute( positionAttribute, i );
					vEnd.fromBufferAttribute( positionAttribute, i + 1 );

					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

					if ( distSq > localThresholdSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					const distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		} else if ( geometry.isGeometry ) {

			console.error( 'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		if ( geometry.isBufferGeometry ) {

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			const morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				console.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

			}

		}

	}

}

Line.prototype.isLine = true;

const _start = /*@__PURE__*/ new Vector3();
const _end = /*@__PURE__*/ new Vector3();

class LineSegments extends Line {

	constructor( geometry, material ) {

		super( geometry, material );

		this.type = 'LineSegments';

	}

	computeLineDistances() {

		const geometry = this.geometry;

		if ( geometry.isBufferGeometry ) {

			// we assume non-indexed geometry

			if ( geometry.index === null ) {

				const positionAttribute = geometry.attributes.position;
				const lineDistances = [];

				for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {

					_start.fromBufferAttribute( positionAttribute, i );
					_end.fromBufferAttribute( positionAttribute, i + 1 );

					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
					lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );

				}

				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

			} else {

				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

			}

		} else if ( geometry.isGeometry ) {

			console.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

		return this;

	}

}

LineSegments.prototype.isLineSegments = true;

class LineLoop extends Line {

	constructor( geometry, material ) {

		super( geometry, material );

		this.type = 'LineLoop';

	}

}

LineLoop.prototype.isLineLoop = true;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */

class PointsMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	}

}

PointsMaterial.prototype.isPointsMaterial = true;

const _inverseMatrix = /*@__PURE__*/ new Matrix4();
const _ray = /*@__PURE__*/ new Ray();
const _sphere = /*@__PURE__*/ new Sphere();
const _position$2 = /*@__PURE__*/ new Vector3();

class Points extends Object3D {

	constructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {

		super();

		this.type = 'Points';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy( source ) {

		super.copy( source );

		this.material = source.material;
		this.geometry = source.geometry;

		return this;

	}

	raycast( raycaster, intersects ) {

		const geometry = this.geometry;
		const matrixWorld = this.matrixWorld;
		const threshold = raycaster.params.Points.threshold;
		const drawRange = geometry.drawRange;

		// Checking boundingSphere distance to ray

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		_sphere.copy( geometry.boundingSphere );
		_sphere.applyMatrix4( matrixWorld );
		_sphere.radius += threshold;

		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;

		//

		_inverseMatrix.copy( matrixWorld ).invert();
		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
		const localThresholdSq = localThreshold * localThreshold;

		if ( geometry.isBufferGeometry ) {

			const index = geometry.index;
			const attributes = geometry.attributes;
			const positionAttribute = attributes.position;

			if ( index !== null ) {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, il = end; i < il; i ++ ) {

					const a = index.getX( i );

					_position$2.fromBufferAttribute( positionAttribute, a );

					testPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

				}

			} else {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, l = end; i < l; i ++ ) {

					_position$2.fromBufferAttribute( positionAttribute, i );

					testPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );

				}

			}

		} else {

			console.error( 'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		if ( geometry.isBufferGeometry ) {

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			const morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

			}

		}

	}

}

Points.prototype.isPoints = true;

function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

	const rayPointDistanceSq = _ray.distanceSqToPoint( point );

	if ( rayPointDistanceSq < localThresholdSq ) {

		const intersectPoint = new Vector3();

		_ray.closestPointToPoint( point, intersectPoint );
		intersectPoint.applyMatrix4( matrixWorld );

		const distance = raycaster.ray.origin.distanceTo( intersectPoint );

		if ( distance < raycaster.near || distance > raycaster.far ) return;

		intersects.push( {

			distance: distance,
			distanceToRay: Math.sqrt( rayPointDistanceSq ),
			point: intersectPoint,
			index: index,
			face: null,
			object: object

		} );

	}

}

class VideoTexture extends Texture {

	constructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		super( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.format = format !== undefined ? format : RGBFormat;

		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

		this.generateMipmaps = false;

		const scope = this;

		function updateVideo() {

			scope.needsUpdate = true;
			video.requestVideoFrameCallback( updateVideo );

		}

		if ( 'requestVideoFrameCallback' in video ) {

			video.requestVideoFrameCallback( updateVideo );

		}

	}

	clone() {

		return new this.constructor( this.image ).copy( this );

	}

	update() {

		const video = this.image;
		const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;

		if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {

			this.needsUpdate = true;

		}

	}

}

VideoTexture.prototype.isVideoTexture = true;

class CompressedTexture extends Texture {

	constructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

}

CompressedTexture.prototype.isCompressedTexture = true;

class CanvasTexture extends Texture {

	constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

}

CanvasTexture.prototype.isCanvasTexture = true;

class DepthTexture extends Texture {

	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}


}

DepthTexture.prototype.isDepthTexture = true;

class CircleGeometry extends BufferGeometry {

	constructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super();

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		segments = Math.max( 3, segments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		const vertex = new Vector3();
		const uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			const segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( let i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	static fromJSON( data ) {

		return new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );

	}

}

class CylinderGeometry extends BufferGeometry {

	constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super();
		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		const scope = this;

		radialSegments = Math.floor( radialSegments );
		heightSegments = Math.floor( heightSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let index = 0;
		const indexArray = [];
		const halfHeight = height / 2;
		let groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			const normal = new Vector3();
			const vertex = new Vector3();

			let groupCount = 0;

			// this will be used to calculate the normal
			const slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( let y = 0; y <= heightSegments; y ++ ) {

				const indexRow = [];

				const v = y / heightSegments;

				// calculate the radius of the current row

				const radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( let x = 0; x <= radialSegments; x ++ ) {

					const u = x / radialSegments;

					const theta = u * thetaLength + thetaStart;

					const sinTheta = Math.sin( theta );
					const cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( let x = 0; x < radialSegments; x ++ ) {

				for ( let y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					const a = indexArray[ y ][ x ];
					const b = indexArray[ y + 1 ][ x ];
					const c = indexArray[ y + 1 ][ x + 1 ];
					const d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			// save the index of the first center vertex
			const centerIndexStart = index;

			const uv = new Vector2();
			const vertex = new Vector3();

			let groupCount = 0;

			const radius = ( top === true ) ? radiusTop : radiusBottom;
			const sign = ( top === true ) ? 1 : - 1;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( let x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex
			const centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( let x = 0; x <= radialSegments; x ++ ) {

				const u = x / radialSegments;
				const theta = u * thetaLength + thetaStart;

				const cosTheta = Math.cos( theta );
				const sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( let x = 0; x < radialSegments; x ++ ) {

				const c = centerIndexStart + x;
				const i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	static fromJSON( data ) {

		return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

	}

}

class ConeGeometry extends CylinderGeometry {

	constructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	static fromJSON( data ) {

		return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

	}

}

class PolyhedronGeometry extends BufferGeometry {

	constructor( vertices = [], indices = [], radius = 1, detail = 0 ) {

		super();

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		// default buffer data

		const vertexBuffer = [];
		const uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		applyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

		if ( detail === 0 ) {

			this.computeVertexNormals(); // flat normals

		} else {

			this.normalizeNormals(); // smooth normals

		}

		// helper functions

		function subdivide( detail ) {

			const a = new Vector3();
			const b = new Vector3();
			const c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( let i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			const cols = detail + 1;

			// we use this multidimensional array as a data structure for creating the subdivision

			const v = [];

			// construct all of the vertices for this subdivision

			for ( let i = 0; i <= cols; i ++ ) {

				v[ i ] = [];

				const aj = a.clone().lerp( c, i / cols );
				const bj = b.clone().lerp( c, i / cols );

				const rows = cols - i;

				for ( let j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( let i = 0; i < cols; i ++ ) {

				for ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					const k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function applyRadius( radius ) {

			const vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			const vertex = new Vector3();

			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				const u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				const v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( let i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				const x0 = uvBuffer[ i + 0 ];
				const x1 = uvBuffer[ i + 2 ];
				const x2 = uvBuffer[ i + 4 ];

				const max = Math.max( x0, x1, x2 );
				const min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			const stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			const a = new Vector3();
			const b = new Vector3();
			const c = new Vector3();

			const centroid = new Vector3();

			const uvA = new Vector2();
			const uvB = new Vector2();
			const uvC = new Vector2();

			for ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				const azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] = uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	static fromJSON( data ) {

		return new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );

	}

}

class DodecahedronGeometry extends PolyhedronGeometry {

	constructor( radius = 1, detail = 0 ) {

		const t = ( 1 + Math.sqrt( 5 ) ) / 2;
		const r = 1 / t;

		const vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,

			// (0, ±1/φ, ±φ)
			0, - r, - t, 0, - r, t,
			0, r, - t, 0, r, t,

			// (±1/φ, ±φ, 0)
			- r, - t, 0, - r, t, 0,
			r, - t, 0, r, t, 0,

			// (±φ, 0, ±1/φ)
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];

		const indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];

		super( vertices, indices, radius, detail );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	static fromJSON( data ) {

		return new DodecahedronGeometry( data.radius, data.detail );

	}

}

const _v0 = new Vector3();
const _v1$1 = new Vector3();
const _normal = new Vector3();
const _triangle = new Triangle();

class EdgesGeometry extends BufferGeometry {

	constructor( geometry = null, thresholdAngle = 1 ) {

		super();
		this.type = 'EdgesGeometry';

		this.parameters = {
			geometry: geometry,
			thresholdAngle: thresholdAngle
		};

		if ( geometry !== null ) {

			const precisionPoints = 4;
			const precision = Math.pow( 10, precisionPoints );
			const thresholdDot = Math.cos( DEG2RAD * thresholdAngle );

			const indexAttr = geometry.getIndex();
			const positionAttr = geometry.getAttribute( 'position' );
			const indexCount = indexAttr ? indexAttr.count : positionAttr.count;

			const indexArr = [ 0, 0, 0 ];
			const vertKeys = [ 'a', 'b', 'c' ];
			const hashes = new Array( 3 );

			const edgeData = {};
			const vertices = [];
			for ( let i = 0; i < indexCount; i += 3 ) {

				if ( indexAttr ) {

					indexArr[ 0 ] = indexAttr.getX( i );
					indexArr[ 1 ] = indexAttr.getX( i + 1 );
					indexArr[ 2 ] = indexAttr.getX( i + 2 );

				} else {

					indexArr[ 0 ] = i;
					indexArr[ 1 ] = i + 1;
					indexArr[ 2 ] = i + 2;

				}

				const { a, b, c } = _triangle;
				a.fromBufferAttribute( positionAttr, indexArr[ 0 ] );
				b.fromBufferAttribute( positionAttr, indexArr[ 1 ] );
				c.fromBufferAttribute( positionAttr, indexArr[ 2 ] );
				_triangle.getNormal( _normal );

				// create hashes for the edge from the vertices
				hashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;
				hashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;
				hashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;

				// skip degenerate triangles
				if ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {

					continue;

				}

				// iterate over every edge
				for ( let j = 0; j < 3; j ++ ) {

					// get the first and next vertex making up the edge
					const jNext = ( j + 1 ) % 3;
					const vecHash0 = hashes[ j ];
					const vecHash1 = hashes[ jNext ];
					const v0 = _triangle[ vertKeys[ j ] ];
					const v1 = _triangle[ vertKeys[ jNext ] ];

					const hash = `${ vecHash0 }_${ vecHash1 }`;
					const reverseHash = `${ vecHash1 }_${ vecHash0 }`;

					if ( reverseHash in edgeData && edgeData[ reverseHash ] ) {

						// if we found a sibling edge add it into the vertex array if
						// it meets the angle threshold and delete the edge from the map.
						if ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {

							vertices.push( v0.x, v0.y, v0.z );
							vertices.push( v1.x, v1.y, v1.z );

						}

						edgeData[ reverseHash ] = null;

					} else if ( ! ( hash in edgeData ) ) {

						// if we've already got an edge here then skip adding a new one
						edgeData[ hash ] = {

							index0: indexArr[ j ],
							index1: indexArr[ jNext ],
							normal: _normal.clone(),

						};

					}

				}

			}

			// iterate over all remaining, unmatched edges and add them to the vertex array
			for ( const key in edgeData ) {

				if ( edgeData[ key ] ) {

					const { index0, index1 } = edgeData[ key ];
					_v0.fromBufferAttribute( positionAttr, index0 );
					_v1$1.fromBufferAttribute( positionAttr, index1 );

					vertices.push( _v0.x, _v0.y, _v0.z );
					vertices.push( _v1$1.x, _v1$1.y, _v1$1.z );

				}

			}

			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

		}

	}

}

/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

class Curve {

	constructor() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	}

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	}

	// Get sequence of points using getPoint( t )

	getPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	}

	// Get sequence of points using getPointAt( u )

	getSpacedPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	}

	// Get total curve arc length

	getLength() {

		const lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	}

	// Get list of cumulative segment lengths

	getLengths( divisions = this.arcLengthDivisions ) {

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		const cache = [];
		let current, last = this.getPoint( 0 );
		let sum = 0;

		cache.push( 0 );

		for ( let p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	}

	updateArcLengths() {

		this.needsUpdate = true;
		this.getLengths();

	}

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping( u, distance ) {

		const arcLengths = this.getLengths();

		let i = 0;
		const il = arcLengths.length;

		let targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		let low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		const lengthBefore = arcLengths[ i ];
		const lengthAfter = arcLengths[ i + 1 ];

		const segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		const t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	}

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent( t, optionalTarget ) {

		const delta = 0.0001;
		let t1 = t - delta;
		let t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		const pt1 = this.getPoint( t1 );
		const pt2 = this.getPoint( t2 );

		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );

		tangent.copy( pt2 ).sub( pt1 ).normalize();

		return tangent;

	}

	getTangentAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getTangent( t, optionalTarget );

	}

	computeFrenetFrames( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		const normal = new Vector3();

		const tangents = [];
		const normals = [];
		const binormals = [];

		const vec = new Vector3();
		const mat = new Matrix4();

		// compute the tangent vectors for each segment on the curve

		for ( let i = 0; i <= segments; i ++ ) {

			const u = i / segments;

			tangents[ i ] = this.getTangentAt( u, new Vector3() );

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		let min = Number.MAX_VALUE;
		const tx = Math.abs( tangents[ 0 ].x );
		const ty = Math.abs( tangents[ 0 ].y );
		const tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( let i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( let i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.5,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	}

	fromJSON( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

}

class EllipseCurve extends Curve {

	constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {

		super();

		this.type = 'EllipseCurve';

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation;

	}

	getPoint( t, optionalTarget ) {

		const point = optionalTarget || new Vector2();

		const twoPi = Math.PI * 2;
		let deltaAngle = this.aEndAngle - this.aStartAngle;
		const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		const angle = this.aStartAngle + t * deltaAngle;
		let x = this.aX + this.xRadius * Math.cos( angle );
		let y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			const cos = Math.cos( this.aRotation );
			const sin = Math.sin( this.aRotation );

			const tx = x - this.aX;
			const ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	}

	copy( source ) {

		super.copy( source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	}

}

EllipseCurve.prototype.isEllipseCurve = true;

class ArcCurve extends EllipseCurve {

	constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.type = 'ArcCurve';

	}

}

ArcCurve.prototype.isArcCurve = true;

/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			const t2 = t * t;
			const t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

const tmp = new Vector3();
const px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

class CatmullRomCurve3 extends Curve {

	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

		super();

		this.type = 'CatmullRomCurve3';

		this.points = points;
		this.closed = closed;
		this.curveType = curveType;
		this.tension = tension;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const points = this.points;
		const l = points.length;

		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		let intPoint = Math.floor( p );
		let weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		let p0, p3; // 4 points (p1 & p2 defined below)

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		const p1 = points[ intPoint % l ];
		const p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	}

}

CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

/**
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	const v0 = ( p2 - p0 ) * 0.5;
	const v1 = ( p3 - p1 ) * 0.5;
	const t2 = t * t;
	const t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	const k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	const k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	const k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

class CubicBezierCurve extends Curve {

	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {

		super();

		this.type = 'CubicBezierCurve';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	}

}

CubicBezierCurve.prototype.isCubicBezierCurve = true;

class CubicBezierCurve3 extends Curve {

	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {

		super();

		this.type = 'CubicBezierCurve3';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	}

}

CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

class LineCurve extends Curve {

	constructor( v1 = new Vector2(), v2 = new Vector2() ) {

		super();

		this.type = 'LineCurve';

		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	}

	// Line curve is linear, so we can overwrite default getPointAt
	getPointAt( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	}

	getTangent( t, optionalTarget ) {

		const tangent = optionalTarget || new Vector2();

		tangent.copy( this.v2 ).sub( this.v1 ).normalize();

		return tangent;

	}

	copy( source ) {

		super.copy( source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

LineCurve.prototype.isLineCurve = true;

class LineCurve3 extends Curve {

	constructor( v1 = new Vector3(), v2 = new Vector3() ) {

		super();

		this.type = 'LineCurve3';
		this.isLineCurve3 = true;

		this.v1 = v1;
		this.v2 = v2;

	}
	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	}
	// Line curve is linear, so we can overwrite default getPointAt
	getPointAt( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	}
	copy( source ) {

		super.copy( source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}
	toJSON() {

		const data = super.toJSON();

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}
	fromJSON( json ) {

		super.fromJSON( json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

class QuadraticBezierCurve extends Curve {

	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {

		super();

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

class QuadraticBezierCurve3 extends Curve {

	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {

		super();

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

class SplineCurve extends Curve {

	constructor( points = [] ) {

		super();

		this.type = 'SplineCurve';

		this.points = points;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const points = this.points;
		const p = ( points.length - 1 ) * t;

		const intPoint = Math.floor( p );
		const weight = p - intPoint;

		const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		const p1 = points[ intPoint ];
		const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	}

}

SplineCurve.prototype.isSplineCurve = true;

var Curves = /*#__PURE__*/Object.freeze({
	__proto__: null,
	ArcCurve: ArcCurve,
	CatmullRomCurve3: CatmullRomCurve3,
	CubicBezierCurve: CubicBezierCurve,
	CubicBezierCurve3: CubicBezierCurve3,
	EllipseCurve: EllipseCurve,
	LineCurve: LineCurve,
	LineCurve3: LineCurve3,
	QuadraticBezierCurve: QuadraticBezierCurve,
	QuadraticBezierCurve3: QuadraticBezierCurve3,
	SplineCurve: SplineCurve
});

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

class CurvePath extends Curve {

	constructor() {

		super();

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	add( curve ) {

		this.curves.push( curve );

	}

	closePath() {

		// Add a line curve if start and end of lines are not connected
		const startPoint = this.curves[ 0 ].getPoint( 0 );
		const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	}

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint( t, optionalTarget ) {

		const d = t * this.getLength();
		const curveLengths = this.getCurveLengths();
		let i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				const diff = curveLengths[ i ] - d;
				const curve = this.curves[ i ];

				const segmentLength = curve.getLength();
				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u, optionalTarget );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	}

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength() {

		const lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	}

	// cacheLengths must be recalculated.
	updateArcLengths() {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	}

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths() {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		const lengths = [];
		let sums = 0;

		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	}

	getSpacedPoints( divisions = 40 ) {

		const points = [];

		for ( let i = 0; i <= divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	}

	getPoints( divisions = 12 ) {

		const points = [];
		let last;

		for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {

			const curve = curves[ i ];
			const resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
						: divisions;

			const pts = curve.getPoints( resolution );

			for ( let j = 0; j < pts.length; j ++ ) {

				const point = pts[ j ];

				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	}

	copy( source ) {

		super.copy( source );

		this.curves = [];

		for ( let i = 0, l = source.curves.length; i < l; i ++ ) {

			const curve = source.curves[ i ];

			this.curves.push( curve.clone() );

		}

		this.autoClose = source.autoClose;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.autoClose = this.autoClose;
		data.curves = [];

		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

			const curve = this.curves[ i ];
			data.curves.push( curve.toJSON() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.autoClose = json.autoClose;
		this.curves = [];

		for ( let i = 0, l = json.curves.length; i < l; i ++ ) {

			const curve = json.curves[ i ];
			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

		}

		return this;

	}

}

class Path extends CurvePath {

	constructor( points ) {

		super();
		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	setFromPoints( points ) {

		this.moveTo( points[ 0 ].x, points[ 0 ].y );

		for ( let i = 1, l = points.length; i < l; i ++ ) {

			this.lineTo( points[ i ].x, points[ i ].y );

		}

		return this;

	}

	moveTo( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		return this;

	}

	lineTo( x, y ) {

		const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

		return this;

	}

	quadraticCurveTo( aCPx, aCPy, aX, aY ) {

		const curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

		return this;

	}

	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		const curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

		return this;

	}

	splineThru( pts /*Array of Vector*/ ) {

		const npts = [ this.currentPoint.clone() ].concat( pts );

		const curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

		return this;

	}

	arc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		const x0 = this.currentPoint.x;
		const y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

		return this;

	}

	absarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		return this;

	}

	ellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		const x0 = this.currentPoint.x;
		const y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		return this;

	}

	absellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			const firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		const lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

		return this;

	}

	copy( source ) {

		super.copy( source );

		this.currentPoint.copy( source.currentPoint );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.currentPoint = this.currentPoint.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.currentPoint.fromArray( json.currentPoint );

		return this;

	}

}

class Shape extends Path {

	constructor( points ) {

		super( points );

		this.uuid = generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	getPointsHoles( divisions ) {

		const holesPts = [];

		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	}

	// get points of shape and holes (keypoints based on segments parameter)

	extractPoints( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	}

	copy( source ) {

		super.copy( source );

		this.holes = [];

		for ( let i = 0, l = source.holes.length; i < l; i ++ ) {

			const hole = source.holes[ i ];

			this.holes.push( hole.clone() );

		}

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.uuid = this.uuid;
		data.holes = [];

		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

			const hole = this.holes[ i ];
			data.holes.push( hole.toJSON() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.uuid = json.uuid;
		this.holes = [];

		for ( let i = 0, l = json.holes.length; i < l; i ++ ) {

			const hole = json.holes[ i ];
			this.holes.push( new Path().fromJSON( hole ) );

		}

		return this;

	}

}

/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */

const Earcut = {

	triangulate: function ( data, holeIndices, dim = 2 ) {

		const hasHoles = holeIndices && holeIndices.length;
		const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;
		let outerNode = linkedList( data, 0, outerLen, dim, true );
		const triangles = [];

		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;

		let minX, minY, maxX, maxY, x, y, invSize;

		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
		if ( data.length > 80 * dim ) {

			minX = maxX = data[ 0 ];
			minY = maxY = data[ 1 ];

			for ( let i = dim; i < outerLen; i += dim ) {

				x = data[ i ];
				y = data[ i + 1 ];
				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;

			}

			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
			invSize = Math.max( maxX - minX, maxY - minY );
			invSize = invSize !== 0 ? 1 / invSize : 0;

		}

		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

		return triangles;

	}

};

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList( data, start, end, dim, clockwise ) {

	let i, last;

	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	} else {

		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	}

	if ( last && equals( last, last.next ) ) {

		removeNode( last );
		last = last.next;

	}

	return last;

}

// eliminate colinear or duplicate points
function filterPoints( start, end ) {

	if ( ! start ) return start;
	if ( ! end ) end = start;

	let p = start,
		again;
	do {

		again = false;

		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

			removeNode( p );
			p = end = p.prev;
			if ( p === p.next ) break;
			again = true;

		} else {

			p = p.next;

		}

	} while ( again || p !== end );

	return end;

}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

	if ( ! ear ) return;

	// interlink polygon nodes in z-order
	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

	let stop = ear,
		prev, next;

	// iterate through ears, slicing them one by one
	while ( ear.prev !== ear.next ) {

		prev = ear.prev;
		next = ear.next;

		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

			// cut off the triangle
			triangles.push( prev.i / dim );
			triangles.push( ear.i / dim );
			triangles.push( next.i / dim );

			removeNode( ear );

			// skipping the next vertex leads to less sliver triangles
			ear = next.next;
			stop = next.next;

			continue;

		}

		ear = next;

		// if we looped through the whole remaining polygon and can't find any more ears
		if ( ear === stop ) {

			// try filtering points and slicing again
			if ( ! pass ) {

				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

				// if this didn't work, try curing all small self-intersections locally

			} else if ( pass === 1 ) {

				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

				// as a last resort, try splitting the remaining polygon into two

			} else if ( pass === 2 ) {

				splitEarcut( ear, triangles, dim, minX, minY, invSize );

			}

			break;

		}

	}

}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar( ear ) {

	const a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	// now make sure we don't have other points inside the potential ear
	let p = ear.next.next;

	while ( p !== ear.prev ) {

		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
			area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.next;

	}

	return true;

}

function isEarHashed( ear, minX, minY, invSize ) {

	const a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	// triangle bbox; min & max are calculated like this for speed
	const minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

	// z-order range for the current triangle bbox;
	const minZ = zOrder( minTX, minTY, minX, minY, invSize ),
		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

	let p = ear.prevZ,
		n = ear.nextZ;

	// look for points inside the triangle in both directions
	while ( p && p.z >= minZ && n && n.z <= maxZ ) {

		if ( p !== ear.prev && p !== ear.next &&
			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
			area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.prevZ;

		if ( n !== ear.prev && n !== ear.next &&
			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
			area( n.prev, n, n.next ) >= 0 ) return false;
		n = n.nextZ;

	}

	// look for remaining points in decreasing z-order
	while ( p && p.z >= minZ ) {

		if ( p !== ear.prev && p !== ear.next &&
			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
			area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.prevZ;

	}

	// look for remaining points in increasing z-order
	while ( n && n.z <= maxZ ) {

		if ( n !== ear.prev && n !== ear.next &&
			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
			area( n.prev, n, n.next ) >= 0 ) return false;
		n = n.nextZ;

	}

	return true;

}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections( start, triangles, dim ) {

	let p = start;
	do {

		const a = p.prev,
			b = p.next.next;

		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

			triangles.push( a.i / dim );
			triangles.push( p.i / dim );
			triangles.push( b.i / dim );

			// remove two nodes involved
			removeNode( p );
			removeNode( p.next );

			p = start = b;

		}

		p = p.next;

	} while ( p !== start );

	return filterPoints( p );

}

// try splitting polygon into two and triangulate them independently
function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

	// look for a valid diagonal that divides the polygon into two
	let a = start;
	do {

		let b = a.next.next;
		while ( b !== a.prev ) {

			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

				// split the polygon in two by the diagonal
				let c = splitPolygon( a, b );

				// filter colinear points around the cuts
				a = filterPoints( a, a.next );
				c = filterPoints( c, c.next );

				// run earcut on each half
				earcutLinked( a, triangles, dim, minX, minY, invSize );
				earcutLinked( c, triangles, dim, minX, minY, invSize );
				return;

			}

			b = b.next;

		}

		a = a.next;

	} while ( a !== start );

}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles( data, holeIndices, outerNode, dim ) {

	const queue = [];
	let i, len, start, end, list;

	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

		start = holeIndices[ i ] * dim;
		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
		list = linkedList( data, start, end, dim, false );
		if ( list === list.next ) list.steiner = true;
		queue.push( getLeftmost( list ) );

	}

	queue.sort( compareX );

	// process holes from left to right
	for ( i = 0; i < queue.length; i ++ ) {

		eliminateHole( queue[ i ], outerNode );
		outerNode = filterPoints( outerNode, outerNode.next );

	}

	return outerNode;

}

function compareX( a, b ) {

	return a.x - b.x;

}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole( hole, outerNode ) {

	outerNode = findHoleBridge( hole, outerNode );
	if ( outerNode ) {

		const b = splitPolygon( outerNode, hole );

		// filter collinear points around the cuts
		filterPoints( outerNode, outerNode.next );
		filterPoints( b, b.next );

	}

}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge( hole, outerNode ) {

	let p = outerNode;
	const hx = hole.x;
	const hy = hole.y;
	let qx = - Infinity, m;

	// find a segment intersected by a ray from the hole's leftmost point to the left;
	// segment's endpoint with lesser x will be potential connection point
	do {

		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

			const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
			if ( x <= hx && x > qx ) {

				qx = x;
				if ( x === hx ) {

					if ( hy === p.y ) return p;
					if ( hy === p.next.y ) return p.next;

				}

				m = p.x < p.next.x ? p : p.next;

			}

		}

		p = p.next;

	} while ( p !== outerNode );

	if ( ! m ) return null;

	if ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint

	// look for points inside the triangle of hole point, segment intersection and endpoint;
	// if there are no points found, we have a valid connection;
	// otherwise choose the point of the minimum angle with the ray as connection point

	const stop = m,
		mx = m.x,
		my = m.y;
	let tanMin = Infinity, tan;

	p = m;

	do {

		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {

				m = p;
				tanMin = tan;

			}

		}

		p = p.next;

	} while ( p !== stop );

	return m;

}

// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector( m, p ) {

	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;

}

// interlink polygon nodes in z-order
function indexCurve( start, minX, minY, invSize ) {

	let p = start;
	do {

		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
		p.prevZ = p.prev;
		p.nextZ = p.next;
		p = p.next;

	} while ( p !== start );

	p.prevZ.nextZ = null;
	p.prevZ = null;

	sortLinked( p );

}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked( list ) {

	let i, p, q, e, tail, numMerges, pSize, qSize,
		inSize = 1;

	do {

		p = list;
		list = null;
		tail = null;
		numMerges = 0;

		while ( p ) {

			numMerges ++;
			q = p;
			pSize = 0;
			for ( i = 0; i < inSize; i ++ ) {

				pSize ++;
				q = q.nextZ;
				if ( ! q ) break;

			}

			qSize = inSize;

			while ( pSize > 0 || ( qSize > 0 && q ) ) {

				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

					e = p;
					p = p.nextZ;
					pSize --;

				} else {

					e = q;
					q = q.nextZ;
					qSize --;

				}

				if ( tail ) tail.nextZ = e;
				else list = e;

				e.prevZ = tail;
				tail = e;

			}

			p = q;

		}

		tail.nextZ = null;
		inSize *= 2;

	} while ( numMerges > 1 );

	return list;

}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder( x, y, minX, minY, invSize ) {

	// coords are transformed into non-negative 15-bit integer range
	x = 32767 * ( x - minX ) * invSize;
	y = 32767 * ( y - minY ) * invSize;

	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
	x = ( x | ( x << 2 ) ) & 0x33333333;
	x = ( x | ( x << 1 ) ) & 0x55555555;

	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
	y = ( y | ( y << 2 ) ) & 0x33333333;
	y = ( y | ( y << 1 ) ) & 0x55555555;

	return x | ( y << 1 );

}

// find the leftmost node of a polygon ring
function getLeftmost( start ) {

	let p = start,
		leftmost = start;
	do {

		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
		p = p.next;

	} while ( p !== start );

	return leftmost;

}

// check if a point lies within a convex triangle
function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
			( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
			( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal( a, b ) {

	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges
		( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
		( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
		equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case

}

// signed area of a triangle
function area( p, q, r ) {

	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

}

// check if two points are equal
function equals( p1, p2 ) {

	return p1.x === p2.x && p1.y === p2.y;

}

// check if two segments intersect
function intersects( p1, q1, p2, q2 ) {

	const o1 = sign( area( p1, q1, p2 ) );
	const o2 = sign( area( p1, q1, q2 ) );
	const o3 = sign( area( p2, q2, p1 ) );
	const o4 = sign( area( p2, q2, q1 ) );

	if ( o1 !== o2 && o3 !== o4 ) return true; // general case

	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

	return false;

}

// for collinear points p, q, r, check if point q lies on segment pr
function onSegment( p, q, r ) {

	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );

}

function sign( num ) {

	return num > 0 ? 1 : num < 0 ? - 1 : 0;

}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon( a, b ) {

	let p = a;
	do {

		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
				intersects( p, p.next, a, b ) ) return true;
		p = p.next;

	} while ( p !== a );

	return false;

}

// check if a polygon diagonal is locally inside the polygon
function locallyInside( a, b ) {

	return area( a.prev, a, a.next ) < 0 ?
		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside( a, b ) {

	let p = a,
		inside = false;
	const px = ( a.x + b.x ) / 2,
		py = ( a.y + b.y ) / 2;
	do {

		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
			inside = ! inside;
		p = p.next;

	} while ( p !== a );

	return inside;

}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon( a, b ) {

	const a2 = new Node( a.i, a.x, a.y ),
		b2 = new Node( b.i, b.x, b.y ),
		an = a.next,
		bp = b.prev;

	a.next = b;
	b.prev = a;

	a2.next = an;
	an.prev = a2;

	b2.next = a2;
	a2.prev = b2;

	bp.next = b2;
	b2.prev = bp;

	return b2;

}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode( i, x, y, last ) {

	const p = new Node( i, x, y );

	if ( ! last ) {

		p.prev = p;
		p.next = p;

	} else {

		p.next = last.next;
		p.prev = last;
		last.next.prev = p;
		last.next = p;

	}

	return p;

}

function removeNode( p ) {

	p.next.prev = p.prev;
	p.prev.next = p.next;

	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

}

function Node( i, x, y ) {

	// vertex index in coordinates array
	this.i = i;

	// vertex coordinates
	this.x = x;
	this.y = y;

	// previous and next vertex nodes in a polygon ring
	this.prev = null;
	this.next = null;

	// z-order curve value
	this.z = null;

	// previous and next nodes in z-order
	this.prevZ = null;
	this.nextZ = null;

	// indicates whether this is a steiner point
	this.steiner = false;

}

function signedArea( data, start, end, dim ) {

	let sum = 0;
	for ( let i = start, j = end - dim; i < end; i += dim ) {

		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
		j = i;

	}

	return sum;

}

class ShapeUtils {

	// calculate area of the contour polygon

	static area( contour ) {

		const n = contour.length;
		let a = 0.0;

		for ( let p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	}

	static isClockWise( pts ) {

		return ShapeUtils.area( pts ) < 0;

	}

	static triangulateShape( contour, holes ) {

		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
		const holeIndices = []; // array of hole indices
		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

		removeDupEndPts( contour );
		addContour( vertices, contour );

		//

		let holeIndex = contour.length;

		holes.forEach( removeDupEndPts );

		for ( let i = 0; i < holes.length; i ++ ) {

			holeIndices.push( holeIndex );
			holeIndex += holes[ i ].length;
			addContour( vertices, holes[ i ] );

		}

		//

		const triangles = Earcut.triangulate( vertices, holeIndices );

		//

		for ( let i = 0; i < triangles.length; i += 3 ) {

			faces.push( triangles.slice( i, i + 3 ) );

		}

		return faces;

	}

}

function removeDupEndPts( points ) {

	const l = points.length;

	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

		points.pop();

	}

}

function addContour( vertices, contour ) {

	for ( let i = 0; i < contour.length; i ++ ) {

		vertices.push( contour[ i ].x );
		vertices.push( contour[ i ].y );

	}

}

/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */

class ExtrudeGeometry extends BufferGeometry {

	constructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {

		super();

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		const scope = this;

		const verticesArray = [];
		const uvArray = [];

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];
			addShape( shape );

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		this.computeVertexNormals();

		// functions

		function addShape( shape ) {

			const placeholder = [];

			// options

			const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			const steps = options.steps !== undefined ? options.steps : 1;
			let depth = options.depth !== undefined ? options.depth : 1;

			let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
			let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
			let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
			let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			const extrudePath = options.extrudePath;

			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

			// deprecated options

			if ( options.amount !== undefined ) {

				console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
				depth = options.amount;

			}

			//

			let extrudePts, extrudeByPath = false;
			let splineTube, binormal, normal, position2;

			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
				bevelOffset = 0;

			}

			// Variables initialization

			const shapePoints = shape.extractPoints( curveSegments );

			let vertices = shapePoints.shape;
			const holes = shapePoints.holes;

			const reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			const faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			const contour = vertices; // vertices has all points but contour has only points of circumference

			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

				const ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			const vlen = vertices.length, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				const v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				const v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					const v_prev_len = Math.sqrt( v_prev_lensq );
					const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					let direction_eq = false; // assumes: opposite

					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			const contourMovements = [];

			for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			const holesMovements = [];
			let oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

				const ahole = holes[ h ];

				oneHoleMovements = [];

				for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) j = 0;
					if ( k === il ) k = 0;

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( let b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				const t = b / bevelSegments;
				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( let i = 0, il = contour.length; i < il; i ++ ) {

					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( let i = 0, il = ahole.length; i < il; i ++ ) {

						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			const bs = bevelSize + bevelOffset;

			// Back facing vertices

			for ( let i = 0; i < vlen; i ++ ) {

				const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			for ( let s = 1; s <= steps; s ++ ) {

				for ( let i = 0; i < vlen; i ++ ) {

					const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, depth / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( let b = bevelSegments - 1; b >= 0; b -- ) {

				const t = b / bevelSegments;
				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( let i = 0, il = contour.length; i < il; i ++ ) {

					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );

				}

				// expand holes

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( let i = 0, il = ahole.length; i < il; i ++ ) {

						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, depth + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				const start = verticesArray.length / 3;

				if ( bevelEnabled ) {

					let layer = 0; // steps + 1
					let offset = vlen * layer;

					// Bottom faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length / 3 - start, 0 );

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				const start = verticesArray.length / 3;
				let layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length / 3 - start, 1 );


			}

			function sidewalls( contour, layeroffset ) {

				let i = contour.length;

				while ( -- i >= 0 ) {

					const j = i;
					let k = i - 1;
					if ( k < 0 ) k = contour.length - 1;

					//console.log('b', i,j, i-1, k,vertices.length);

					for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {

						const slen1 = vlen * s;
						const slen2 = vlen * ( s + 1 );

						const a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				const nextIndex = verticesArray.length / 3;
				const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				const nextIndex = verticesArray.length / 3;
				const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

		}

	}

	toJSON() {

		const data = super.toJSON();

		const shapes = this.parameters.shapes;
		const options = this.parameters.options;

		return toJSON$1( shapes, options, data );

	}

	static fromJSON( data, shapes ) {

		const geometryShapes = [];

		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

			const shape = shapes[ data.shapes[ j ] ];

			geometryShapes.push( shape );

		}

		const extrudePath = data.options.extrudePath;

		if ( extrudePath !== undefined ) {

			data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

		}

		return new ExtrudeGeometry( geometryShapes, data.options );

	}

}

const WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		const a_x = vertices[ indexA * 3 ];
		const a_y = vertices[ indexA * 3 + 1 ];
		const b_x = vertices[ indexB * 3 ];
		const b_y = vertices[ indexB * 3 + 1 ];
		const c_x = vertices[ indexC * 3 ];
		const c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		const a_x = vertices[ indexA * 3 ];
		const a_y = vertices[ indexA * 3 + 1 ];
		const a_z = vertices[ indexA * 3 + 2 ];
		const b_x = vertices[ indexB * 3 ];
		const b_y = vertices[ indexB * 3 + 1 ];
		const b_z = vertices[ indexB * 3 + 2 ];
		const c_x = vertices[ indexC * 3 ];
		const c_y = vertices[ indexC * 3 + 1 ];
		const c_z = vertices[ indexC * 3 + 2 ];
		const d_x = vertices[ indexD * 3 ];
		const d_y = vertices[ indexD * 3 + 1 ];
		const d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}

};

function toJSON$1( shapes, options, data ) {

	data.shapes = [];

	if ( Array.isArray( shapes ) ) {

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];

			data.shapes.push( shape.uuid );

		}

	} else {

		data.shapes.push( shapes.uuid );

	}

	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

	return data;

}

class IcosahedronGeometry extends PolyhedronGeometry {

	constructor( radius = 1, detail = 0 ) {

		const t = ( 1 + Math.sqrt( 5 ) ) / 2;

		const vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];

		const indices = [
			0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];

		super( vertices, indices, radius, detail );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	static fromJSON( data ) {

		return new IcosahedronGeometry( data.radius, data.detail );

	}

}

class LatheGeometry extends BufferGeometry {

	constructor( points = [ new Vector2( 0, 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, - 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {

		super();

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments );

		// clamp phiLength so it's in range of [ 0, 2PI ]

		phiLength = clamp( phiLength, 0, Math.PI * 2 );

		// buffers

		const indices = [];
		const vertices = [];
		const uvs = [];

		// helper variables

		const inverseSegments = 1.0 / segments;
		const vertex = new Vector3();
		const uv = new Vector2();

		// generate vertices and uvs

		for ( let i = 0; i <= segments; i ++ ) {

			const phi = phiStart + i * inverseSegments * phiLength;

			const sin = Math.sin( phi );
			const cos = Math.cos( phi );

			for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex

				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;

				vertices.push( vertex.x, vertex.y, vertex.z );

				// uv

				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );

				uvs.push( uv.x, uv.y );


			}

		}

		// indices

		for ( let i = 0; i < segments; i ++ ) {

			for ( let j = 0; j < ( points.length - 1 ); j ++ ) {

				const base = j + i * points.length;

				const a = base;
				const b = base + points.length;
				const c = base + points.length + 1;
				const d = base + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if ( phiLength === Math.PI * 2 ) {

			const normals = this.attributes.normal.array;
			const n1 = new Vector3();
			const n2 = new Vector3();
			const n = new Vector3();

			// this is the buffer offset for the last line of vertices

			const base = segments * points.length * 3;

			for ( let i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line

				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line

				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals

				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals

				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			}

		}

	}

	static fromJSON( data ) {

		return new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );

	}

}

class OctahedronGeometry extends PolyhedronGeometry {

	constructor( radius = 1, detail = 0 ) {

		const vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];

		const indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];

		super( vertices, indices, radius, detail );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	static fromJSON( data ) {

		return new OctahedronGeometry( data.radius, data.detail );

	}

}

class RingGeometry extends BufferGeometry {

	constructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super();

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		thetaSegments = Math.max( 3, thetaSegments );
		phiSegments = Math.max( 1, phiSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// some helper variables

		let radius = innerRadius;
		const radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		const vertex = new Vector3();
		const uv = new Vector2();

		// generate vertices, normals and uvs

		for ( let j = 0; j <= phiSegments; j ++ ) {

			for ( let i = 0; i <= thetaSegments; i ++ ) {

				// values are generate from the inside of the ring to the outside

				const segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uv

				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// increase the radius for next row of vertices

			radius += radiusStep;

		}

		// indices

		for ( let j = 0; j < phiSegments; j ++ ) {

			const thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( let i = 0; i < thetaSegments; i ++ ) {

				const segment = i + thetaSegmentLevel;

				const a = segment;
				const b = segment + thetaSegments + 1;
				const c = segment + thetaSegments + 2;
				const d = segment + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	static fromJSON( data ) {

		return new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );

	}

}

class ShapeGeometry extends BufferGeometry {

	constructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {

		super();
		this.type = 'ShapeGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let groupStart = 0;
		let groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( let i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			const indexOffset = vertices.length / 3;
			const points = shape.extractPoints( curveSegments );

			let shapeVertices = points.shape;
			const shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

			}

			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

				const shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

			const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

				const shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {

				const vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// incides

			for ( let i = 0, l = faces.length; i < l; i ++ ) {

				const face = faces[ i ];

				const a = face[ 0 ] + indexOffset;
				const b = face[ 1 ] + indexOffset;
				const c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	toJSON() {

		const data = super.toJSON();

		const shapes = this.parameters.shapes;

		return toJSON( shapes, data );

	}

	static fromJSON( data, shapes ) {

		const geometryShapes = [];

		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

			const shape = shapes[ data.shapes[ j ] ];

			geometryShapes.push( shape );

		}

		return new ShapeGeometry( geometryShapes, data.curveSegments );

	}

}

function toJSON( shapes, data ) {

	data.shapes = [];

	if ( Array.isArray( shapes ) ) {

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];

			data.shapes.push( shape.uuid );

		}

	} else {

		data.shapes.push( shapes.uuid );

	}

	return data;

}

class SphereGeometry extends BufferGeometry {

	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {

		super();
		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) );

		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

		let index = 0;
		const grid = [];

		const vertex = new Vector3();
		const normal = new Vector3();

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// generate vertices, normals and uvs

		for ( let iy = 0; iy <= heightSegments; iy ++ ) {

			const verticesRow = [];

			const v = iy / heightSegments;

			// special case for the poles

			let uOffset = 0;

			if ( iy == 0 && thetaStart == 0 ) {

				uOffset = 0.5 / widthSegments;

			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

				uOffset = - 0.5 / widthSegments;

			}

			for ( let ix = 0; ix <= widthSegments; ix ++ ) {

				const u = ix / widthSegments;

				// vertex

				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.copy( vertex ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u + uOffset, 1 - v );

				verticesRow.push( index ++ );

			}

			grid.push( verticesRow );

		}

		// indices

		for ( let iy = 0; iy < heightSegments; iy ++ ) {

			for ( let ix = 0; ix < widthSegments; ix ++ ) {

				const a = grid[ iy ][ ix + 1 ];
				const b = grid[ iy ][ ix ];
				const c = grid[ iy + 1 ][ ix ];
				const d = grid[ iy + 1 ][ ix + 1 ];

				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	static fromJSON( data ) {

		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );

	}

}

class TetrahedronGeometry extends PolyhedronGeometry {

	constructor( radius = 1, detail = 0 ) {

		const vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];

		const indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];

		super( vertices, indices, radius, detail );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	static fromJSON( data ) {

		return new TetrahedronGeometry( data.radius, data.detail );

	}

}

class TorusGeometry extends BufferGeometry {

	constructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {

		super();
		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radialSegments = Math.floor( radialSegments );
		tubularSegments = Math.floor( tubularSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		const center = new Vector3();
		const vertex = new Vector3();
		const normal = new Vector3();

		// generate vertices, normals and uvs

		for ( let j = 0; j <= radialSegments; j ++ ) {

			for ( let i = 0; i <= tubularSegments; i ++ ) {

				const u = i / tubularSegments * arc;
				const v = j / radialSegments * Math.PI * 2;

				// vertex

				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( let j = 1; j <= radialSegments; j ++ ) {

			for ( let i = 1; i <= tubularSegments; i ++ ) {

				// indices

				const a = ( tubularSegments + 1 ) * j + i - 1;
				const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				const d = ( tubularSegments + 1 ) * j + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	static fromJSON( data ) {

		return new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );

	}

}

class TorusKnotGeometry extends BufferGeometry {

	constructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {

		super();
		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		tubularSegments = Math.floor( tubularSegments );
		radialSegments = Math.floor( radialSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		const vertex = new Vector3();
		const normal = new Vector3();

		const P1 = new Vector3();
		const P2 = new Vector3();

		const B = new Vector3();
		const T = new Vector3();
		const N = new Vector3();

		// generate vertices, normals and uvs

		for ( let i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			const u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( let j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				const v = j / radialSegments * Math.PI * 2;
				const cx = - tube * Math.cos( v );
				const cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

				normal.subVectors( vertex, P1 ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( let j = 1; j <= tubularSegments; j ++ ) {

			for ( let i = 1; i <= radialSegments; i ++ ) {

				// indices

				const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				const b = ( radialSegments + 1 ) * j + ( i - 1 );
				const c = ( radialSegments + 1 ) * j + i;
				const d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			const cu = Math.cos( u );
			const su = Math.sin( u );
			const quOverP = q / p * u;
			const cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	static fromJSON( data ) {

		return new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );

	}

}

class TubeGeometry extends BufferGeometry {

	constructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {

		super();
		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		const frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		const vertex = new Vector3();
		const normal = new Vector3();
		const uv = new Vector2();
		let P = new Vector3();

		// buffer

		const vertices = [];
		const normals = [];
		const uvs = [];
		const indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( let i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			P = path.getPointAt( i / tubularSegments, P );

			// retrieve corresponding normal and binormal

			const N = frames.normals[ i ];
			const B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( let j = 0; j <= radialSegments; j ++ ) {

				const v = j / radialSegments * Math.PI * 2;

				const sin = Math.sin( v );
				const cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( let j = 1; j <= tubularSegments; j ++ ) {

				for ( let i = 1; i <= radialSegments; i ++ ) {

					const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					const b = ( radialSegments + 1 ) * j + ( i - 1 );
					const c = ( radialSegments + 1 ) * j + i;
					const d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( let i = 0; i <= tubularSegments; i ++ ) {

				for ( let j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	toJSON() {

		const data = super.toJSON();

		data.path = this.parameters.path.toJSON();

		return data;

	}

	static fromJSON( data ) {

		// This only works for built-in curves (e.g. CatmullRomCurve3).
		// User defined curves or instances of CurvePath will not be deserialized.
		return new TubeGeometry(
			new Curves[ data.path.type ]().fromJSON( data.path ),
			data.tubularSegments,
			data.radius,
			data.radialSegments,
			data.closed
		);

	}

}

class WireframeGeometry extends BufferGeometry {

	constructor( geometry = null ) {

		super();
		this.type = 'WireframeGeometry';

		this.parameters = {
			geometry: geometry
		};

		if ( geometry !== null ) {

			// buffer

			const vertices = [];
			const edges = new Set();

			// helper variables

			const start = new Vector3();
			const end = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				const position = geometry.attributes.position;
				const indices = geometry.index;
				let groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all eges without duplicates

				for ( let o = 0, ol = groups.length; o < ol; ++ o ) {

					const group = groups[ o ];

					const groupStart = group.start;
					const groupCount = group.count;

					for ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {

						for ( let j = 0; j < 3; j ++ ) {

							const index1 = indices.getX( i + j );
							const index2 = indices.getX( i + ( j + 1 ) % 3 );

							start.fromBufferAttribute( position, index1 );
							end.fromBufferAttribute( position, index2 );

							if ( isUniqueEdge( start, end, edges ) === true ) {

								vertices.push( start.x, start.y, start.z );
								vertices.push( end.x, end.y, end.z );

							}

						}

					}

				}

			} else {

				// non-indexed BufferGeometry

				const position = geometry.attributes.position;

				for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( let j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						const index1 = 3 * i + j;
						const index2 = 3 * i + ( ( j + 1 ) % 3 );

						start.fromBufferAttribute( position, index1 );
						end.fromBufferAttribute( position, index2 );

						if ( isUniqueEdge( start, end, edges ) === true ) {

							vertices.push( start.x, start.y, start.z );
							vertices.push( end.x, end.y, end.z );

						}

					}

				}

			}

			// build geometry

			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

		}

	}

}

function isUniqueEdge( start, end, edges ) {

	const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
	const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge

	if ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {

		return false;

	} else {

		edges.add( hash1, hash2 );
		return true;

	}

}

var Geometries = /*#__PURE__*/Object.freeze({
	__proto__: null,
	BoxGeometry: BoxGeometry,
	BoxBufferGeometry: BoxGeometry,
	CircleGeometry: CircleGeometry,
	CircleBufferGeometry: CircleGeometry,
	ConeGeometry: ConeGeometry,
	ConeBufferGeometry: ConeGeometry,
	CylinderGeometry: CylinderGeometry,
	CylinderBufferGeometry: CylinderGeometry,
	DodecahedronGeometry: DodecahedronGeometry,
	DodecahedronBufferGeometry: DodecahedronGeometry,
	EdgesGeometry: EdgesGeometry,
	ExtrudeGeometry: ExtrudeGeometry,
	ExtrudeBufferGeometry: ExtrudeGeometry,
	IcosahedronGeometry: IcosahedronGeometry,
	IcosahedronBufferGeometry: IcosahedronGeometry,
	LatheGeometry: LatheGeometry,
	LatheBufferGeometry: LatheGeometry,
	OctahedronGeometry: OctahedronGeometry,
	OctahedronBufferGeometry: OctahedronGeometry,
	PlaneGeometry: PlaneGeometry,
	PlaneBufferGeometry: PlaneGeometry,
	PolyhedronGeometry: PolyhedronGeometry,
	PolyhedronBufferGeometry: PolyhedronGeometry,
	RingGeometry: RingGeometry,
	RingBufferGeometry: RingGeometry,
	ShapeGeometry: ShapeGeometry,
	ShapeBufferGeometry: ShapeGeometry,
	SphereGeometry: SphereGeometry,
	SphereBufferGeometry: SphereGeometry,
	TetrahedronGeometry: TetrahedronGeometry,
	TetrahedronBufferGeometry: TetrahedronGeometry,
	TorusGeometry: TorusGeometry,
	TorusBufferGeometry: TorusGeometry,
	TorusKnotGeometry: TorusKnotGeometry,
	TorusKnotBufferGeometry: TorusKnotGeometry,
	TubeGeometry: TubeGeometry,
	TubeBufferGeometry: TubeGeometry,
	WireframeGeometry: WireframeGeometry
});

/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */

class ShadowMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'ShadowMaterial';

		this.color = new Color( 0x000000 );
		this.transparent = true;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		return this;

	}

}

ShadowMaterial.prototype.isShadowMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */

class MeshStandardMaterial extends Material {

	constructor( parameters ) {

		super();

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 1.0;
		this.metalness = 0.0;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.flatShading = false;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.flatShading = source.flatShading;

		return this;

	}

}

MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */

class MeshPhysicalMaterial extends MeshStandardMaterial {

	constructor( parameters ) {

		super();

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.type = 'MeshPhysicalMaterial';

		this.clearcoatMap = null;
		this.clearcoatRoughness = 0.0;
		this.clearcoatRoughnessMap = null;
		this.clearcoatNormalScale = new Vector2( 1, 1 );
		this.clearcoatNormalMap = null;

		this.ior = 1.5;

		Object.defineProperty( this, 'reflectivity', {
			get: function () {

				return ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );

			},
			set: function ( reflectivity ) {

				this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );

			}
		} );

		this.sheenColor = new Color( 0x000000 );
		this.sheenColorMap = null;
		this.sheenRoughness = 1.0;
		this.sheenRoughnessMap = null;

		this.transmissionMap = null;

		this.thickness = 0.01;
		this.thicknessMap = null;
		this.attenuationDistance = 0.0;
		this.attenuationColor = new Color( 1, 1, 1 );

		this.specularIntensity = 1.0;
		this.specularIntensityMap = null;
		this.specularColor = new Color( 1, 1, 1 );
		this.specularColorMap = null;

		this._sheen = 0.0;
		this._clearcoat = 0;
		this._transmission = 0;

		this.setValues( parameters );

	}

	get sheen() {

		return this._sheen;

	}

	set sheen( value ) {

		if ( this._sheen > 0 !== value > 0 ) {

			this.version ++;

		}

		this._sheen = value;

	}

	get clearcoat() {

		return this._clearcoat;

	}

	set clearcoat( value ) {

		if ( this._clearcoat > 0 !== value > 0 ) {

			this.version ++;

		}

		this._clearcoat = value;

	}

	get transmission() {

		return this._transmission;

	}

	set transmission( value ) {

		if ( this._transmission > 0 !== value > 0 ) {

			this.version ++;

		}

		this._transmission = value;

	}

	copy( source ) {

		super.copy( source );

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.clearcoat = source.clearcoat;
		this.clearcoatMap = source.clearcoatMap;
		this.clearcoatRoughness = source.clearcoatRoughness;
		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
		this.clearcoatNormalMap = source.clearcoatNormalMap;
		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

		this.ior = source.ior;

		this.sheen = source.sheen;
		this.sheenColor.copy( source.sheenColor );
		this.sheenColorMap = source.sheenColorMap;
		this.sheenRoughness = source.sheenRoughness;
		this.sheenRoughnessMap = source.sheenRoughnessMap;

		this.transmission = source.transmission;
		this.transmissionMap = source.transmissionMap;

		this.thickness = source.thickness;
		this.thicknessMap = source.thicknessMap;
		this.attenuationDistance = source.attenuationDistance;
		this.attenuationColor.copy( source.attenuationColor );

		this.specularIntensity = source.specularIntensity;
		this.specularIntensityMap = source.specularIntensityMap;
		this.specularColor.copy( source.specularColor );
		this.specularColorMap = source.specularColorMap;

		return this;

	}

}

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */

class MeshPhongMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.flatShading = false;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.flatShading = source.flatShading;

		return this;

	}

}

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */

class MeshToonMaterial extends Material {

	constructor( parameters ) {

		super();

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;
		this.gradientMap = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;
		this.gradientMap = source.gradientMap;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		return this;

	}

}

MeshToonMaterial.prototype.isMeshToonMaterial = true;

/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */

class MeshNormalMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.flatShading = false;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.flatShading = source.flatShading;

		return this;

	}

}

MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */

class MeshLambertMaterial extends Material {

	constructor( parameters ) {

		super();

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		return this;

	}

}

MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */

class MeshMatcapMaterial extends Material {

	constructor( parameters ) {

		super();

		this.defines = { 'MATCAP': '' };

		this.type = 'MeshMatcapMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.matcap = null;

		this.map = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.flatShading = false;

		this.setValues( parameters );

	}


	copy( source ) {

		super.copy( source );

		this.defines = { 'MATCAP': '' };

		this.color.copy( source.color );

		this.matcap = source.matcap;

		this.map = source.map;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.flatShading = source.flatShading;

		return this;

	}

}

MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */

class LineDashedMaterial extends LineBasicMaterial {

	constructor( parameters ) {

		super();

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	}

}

LineDashedMaterial.prototype.isLineDashedMaterial = true;

var Materials = /*#__PURE__*/Object.freeze({
	__proto__: null,
	ShadowMaterial: ShadowMaterial,
	SpriteMaterial: SpriteMaterial,
	RawShaderMaterial: RawShaderMaterial,
	ShaderMaterial: ShaderMaterial,
	PointsMaterial: PointsMaterial,
	MeshPhysicalMaterial: MeshPhysicalMaterial,
	MeshStandardMaterial: MeshStandardMaterial,
	MeshPhongMaterial: MeshPhongMaterial,
	MeshToonMaterial: MeshToonMaterial,
	MeshNormalMaterial: MeshNormalMaterial,
	MeshLambertMaterial: MeshLambertMaterial,
	MeshDepthMaterial: MeshDepthMaterial,
	MeshDistanceMaterial: MeshDistanceMaterial,
	MeshBasicMaterial: MeshBasicMaterial,
	MeshMatcapMaterial: MeshMatcapMaterial,
	LineDashedMaterial: LineDashedMaterial,
	LineBasicMaterial: LineBasicMaterial,
	Material: Material
});

const AnimationUtils = {

	// same as Array.prototype.slice, but also works on typed arrays
	arraySlice: function ( array, from, to ) {

		if ( AnimationUtils.isTypedArray( array ) ) {

			// in ios9 array.subarray(from, undefined) will return empty array
			// but array.subarray(from) or array.subarray(from, len) is correct
			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

		}

		return array.slice( from, to );

	},

	// converts an array to a specific type
	convertArray: function ( array, type, forceClone ) {

		if ( ! array || // let 'undefined' and 'null' pass
			! forceClone && array.constructor === type ) return array;

		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

			return new type( array ); // create typed array

		}

		return Array.prototype.slice.call( array ); // create Array

	},

	isTypedArray: function ( object ) {

		return ArrayBuffer.isView( object ) &&
			! ( object instanceof DataView );

	},

	// returns an array by which times and values can be sorted
	getKeyframeOrder: function ( times ) {

		function compareTime( i, j ) {

			return times[ i ] - times[ j ];

		}

		const n = times.length;
		const result = new Array( n );
		for ( let i = 0; i !== n; ++ i ) result[ i ] = i;

		result.sort( compareTime );

		return result;

	},

	// uses the array previously returned by 'getKeyframeOrder' to sort data
	sortedArray: function ( values, stride, order ) {

		const nValues = values.length;
		const result = new values.constructor( nValues );

		for ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

			const srcOffset = order[ i ] * stride;

			for ( let j = 0; j !== stride; ++ j ) {

				result[ dstOffset ++ ] = values[ srcOffset + j ];

			}

		}

		return result;

	},

	// function for parsing AOS keyframe formats
	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

		let i = 1, key = jsonKeys[ 0 ];

		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

			key = jsonKeys[ i ++ ];

		}

		if ( key === undefined ) return; // no data

		let value = key[ valuePropertyName ];
		if ( value === undefined ) return; // no data

		if ( Array.isArray( value ) ) {

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push.apply( values, value ); // push all elements

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else if ( value.toArray !== undefined ) {

			// ...assume THREE.Math-ish

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					value.toArray( values, values.length );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else {

			// otherwise push as-is

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push( value );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		}

	},

	subclip: function ( sourceClip, name, startFrame, endFrame, fps = 30 ) {

		const clip = sourceClip.clone();

		clip.name = name;

		const tracks = [];

		for ( let i = 0; i < clip.tracks.length; ++ i ) {

			const track = clip.tracks[ i ];
			const valueSize = track.getValueSize();

			const times = [];
			const values = [];

			for ( let j = 0; j < track.times.length; ++ j ) {

				const frame = track.times[ j ] * fps;

				if ( frame < startFrame || frame >= endFrame ) continue;

				times.push( track.times[ j ] );

				for ( let k = 0; k < valueSize; ++ k ) {

					values.push( track.values[ j * valueSize + k ] );

				}

			}

			if ( times.length === 0 ) continue;

			track.times = AnimationUtils.convertArray( times, track.times.constructor );
			track.values = AnimationUtils.convertArray( values, track.values.constructor );

			tracks.push( track );

		}

		clip.tracks = tracks;

		// find minimum .times value across all tracks in the trimmed clip

		let minStartTime = Infinity;

		for ( let i = 0; i < clip.tracks.length; ++ i ) {

			if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {

				minStartTime = clip.tracks[ i ].times[ 0 ];

			}

		}

		// shift all tracks such that clip begins at t=0

		for ( let i = 0; i < clip.tracks.length; ++ i ) {

			clip.tracks[ i ].shift( - 1 * minStartTime );

		}

		clip.resetDuration();

		return clip;

	},

	makeClipAdditive: function ( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {

		if ( fps <= 0 ) fps = 30;

		const numTracks = referenceClip.tracks.length;
		const referenceTime = referenceFrame / fps;

		// Make each track's values relative to the values at the reference frame
		for ( let i = 0; i < numTracks; ++ i ) {

			const referenceTrack = referenceClip.tracks[ i ];
			const referenceTrackType = referenceTrack.ValueTypeName;

			// Skip this track if it's non-numeric
			if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;

			// Find the track in the target clip whose name and type matches the reference track
			const targetTrack = targetClip.tracks.find( function ( track ) {

				return track.name === referenceTrack.name
					&& track.ValueTypeName === referenceTrackType;

			} );

			if ( targetTrack === undefined ) continue;

			let referenceOffset = 0;
			const referenceValueSize = referenceTrack.getValueSize();

			if ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {

				referenceOffset = referenceValueSize / 3;

			}

			let targetOffset = 0;
			const targetValueSize = targetTrack.getValueSize();

			if ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {

				targetOffset = targetValueSize / 3;

			}

			const lastIndex = referenceTrack.times.length - 1;
			let referenceValue;

			// Find the value to subtract out of the track
			if ( referenceTime <= referenceTrack.times[ 0 ] ) {

				// Reference frame is earlier than the first keyframe, so just use the first keyframe
				const startIndex = referenceOffset;
				const endIndex = referenceValueSize - referenceOffset;
				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );

			} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {

				// Reference frame is after the last keyframe, so just use the last keyframe
				const startIndex = lastIndex * referenceValueSize + referenceOffset;
				const endIndex = startIndex + referenceValueSize - referenceOffset;
				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );

			} else {

				// Interpolate to the reference value
				const interpolant = referenceTrack.createInterpolant();
				const startIndex = referenceOffset;
				const endIndex = referenceValueSize - referenceOffset;
				interpolant.evaluate( referenceTime );
				referenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex, endIndex );

			}

			// Conjugate the quaternion
			if ( referenceTrackType === 'quaternion' ) {

				const referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();
				referenceQuat.toArray( referenceValue );

			}

			// Subtract the reference value from all of the track values

			const numTimes = targetTrack.times.length;
			for ( let j = 0; j < numTimes; ++ j ) {

				const valueStart = j * targetValueSize + targetOffset;

				if ( referenceTrackType === 'quaternion' ) {

					// Multiply the conjugate for quaternion track types
					Quaternion.multiplyQuaternionsFlat(
						targetTrack.values,
						valueStart,
						referenceValue,
						0,
						targetTrack.values,
						valueStart
					);

				} else {

					const valueEnd = targetValueSize - targetOffset * 2;

					// Subtract each value for all other numeric track types
					for ( let k = 0; k < valueEnd; ++ k ) {

						targetTrack.values[ valueStart + k ] -= referenceValue[ k ];

					}

				}

			}

		}

		targetClip.blendMode = AdditiveAnimationBlendMode;

		return targetClip;

	}

};

/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */

class Interpolant {

	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

		this.settings = null;
		this.DefaultSettings_ = {};

	}

	evaluate( t ) {

		const pp = this.parameterPositions;
		let i1 = this._cachedIndex,
			t1 = pp[ i1 ],
			t0 = pp[ i1 - 1 ];

		validate_interval: {

			seek: {

				let right;

				linear_scan: {

					//- See http://jsperf.com/comparison-to-undefined/3
					//- slower code:
					//-
					//- 				if ( t >= t1 || t1 === undefined ) {
					forward_scan: if ( ! ( t < t1 ) ) {

						for ( let giveUpAt = i1 + 2; ; ) {

							if ( t1 === undefined ) {

								if ( t < t0 ) break forward_scan;

								// after end

								i1 = pp.length;
								this._cachedIndex = i1;
								return this.afterEnd_( i1 - 1, t, t0 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t0 = t1;
							t1 = pp[ ++ i1 ];

							if ( t < t1 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the right side of the index
						right = pp.length;
						break linear_scan;

					}

					//- slower code:
					//-					if ( t < t0 || t0 === undefined ) {
					if ( ! ( t >= t0 ) ) {

						// looping?

						const t1global = pp[ 1 ];

						if ( t < t1global ) {

							i1 = 2; // + 1, using the scan for the details
							t0 = t1global;

						}

						// linear reverse scan

						for ( let giveUpAt = i1 - 2; ; ) {

							if ( t0 === undefined ) {

								// before start

								this._cachedIndex = 0;
								return this.beforeStart_( 0, t, t1 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t1 = t0;
							t0 = pp[ -- i1 - 1 ];

							if ( t >= t0 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the left side of the index
						right = i1;
						i1 = 0;
						break linear_scan;

					}

					// the interval is valid

					break validate_interval;

				} // linear scan

				// binary search

				while ( i1 < right ) {

					const mid = ( i1 + right ) >>> 1;

					if ( t < pp[ mid ] ) {

						right = mid;

					} else {

						i1 = mid + 1;

					}

				}

				t1 = pp[ i1 ];
				t0 = pp[ i1 - 1 ];

				// check boundary cases, again

				if ( t0 === undefined ) {

					this._cachedIndex = 0;
					return this.beforeStart_( 0, t, t1 );

				}

				if ( t1 === undefined ) {

					i1 = pp.length;
					this._cachedIndex = i1;
					return this.afterEnd_( i1 - 1, t0, t );

				}

			} // seek

			this._cachedIndex = i1;

			this.intervalChanged_( i1, t0, t1 );

		} // validate_interval

		return this.interpolate_( i1, t0, t, t1 );

	}

	getSettings_() {

		return this.settings || this.DefaultSettings_;

	}

	copySampleValue_( index ) {

		// copies a sample value to the result buffer

		const result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,
			offset = index * stride;

		for ( let i = 0; i !== stride; ++ i ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	}

	// Template methods for derived classes:

	interpolate_( /* i1, t0, t, t1 */ ) {

		throw new Error( 'call to abstract method' );
		// implementations shall return this.resultBuffer

	}

	intervalChanged_( /* i1, t0, t1 */ ) {

		// empty

	}

}

// ALIAS DEFINITIONS

Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;

/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */

class CubicInterpolant extends Interpolant {

	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		super( parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;

		this.DefaultSettings_ = {

			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding

		};

	}

	intervalChanged_( i1, t0, t1 ) {

		const pp = this.parameterPositions;
		let iPrev = i1 - 2,
			iNext = i1 + 1,

			tPrev = pp[ iPrev ],
			tNext = pp[ iNext ];

		if ( tPrev === undefined ) {

			switch ( this.getSettings_().endingStart ) {

				case ZeroSlopeEnding:

					// f'(t0) = 0
					iPrev = i1;
					tPrev = 2 * t0 - t1;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iPrev = pp.length - 2;
					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(t0) = 0 a.k.a. Natural Spline
					iPrev = i1;
					tPrev = t1;

			}

		}

		if ( tNext === undefined ) {

			switch ( this.getSettings_().endingEnd ) {

				case ZeroSlopeEnding:

					// f'(tN) = 0
					iNext = i1;
					tNext = 2 * t1 - t0;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iNext = 1;
					tNext = t1 + pp[ 1 ] - pp[ 0 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(tN) = 0, a.k.a. Natural Spline
					iNext = i1 - 1;
					tNext = t0;

			}

		}

		const halfDt = ( t1 - t0 ) * 0.5,
			stride = this.valueSize;

		this._weightPrev = halfDt / ( t0 - tPrev );
		this._weightNext = halfDt / ( tNext - t1 );
		this._offsetPrev = iPrev * stride;
		this._offsetNext = iNext * stride;

	}

	interpolate_( i1, t0, t, t1 ) {

		const result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			o1 = i1 * stride,		o0 = o1 - stride,
			oP = this._offsetPrev, 	oN = this._offsetNext,
			wP = this._weightPrev,	wN = this._weightNext,

			p = ( t - t0 ) / ( t1 - t0 ),
			pp = p * p,
			ppp = pp * p;

		// evaluate polynomials

		const sP = - wP * ppp + 2 * wP * pp - wP * p;
		const s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
		const s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
		const sN = wN * ppp - wN * pp;

		// combine data linearly

		for ( let i = 0; i !== stride; ++ i ) {

			result[ i ] =
					sP * values[ oP + i ] +
					s0 * values[ o0 + i ] +
					s1 * values[ o1 + i ] +
					sN * values[ oN + i ];

		}

		return result;

	}

}

class LinearInterpolant extends Interpolant {

	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		super( parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	interpolate_( i1, t0, t, t1 ) {

		const result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset1 = i1 * stride,
			offset0 = offset1 - stride,

			weight1 = ( t - t0 ) / ( t1 - t0 ),
			weight0 = 1 - weight1;

		for ( let i = 0; i !== stride; ++ i ) {

			result[ i ] =
					values[ offset0 + i ] * weight0 +
					values[ offset1 + i ] * weight1;

		}

		return result;

	}

}

/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */

class DiscreteInterpolant extends Interpolant {

	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		super( parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	interpolate_( i1 /*, t0, t, t1 */ ) {

		return this.copySampleValue_( i1 - 1 );

	}

}

class KeyframeTrack {

	constructor( name, times, values, interpolation ) {

		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

	}

	// Serialization (in static context, because of constructor invocation
	// and automatic invocation of .toJSON):

	static toJSON( track ) {

		const trackType = track.constructor;

		let json;

		// derived classes can define a static toJSON method
		if ( trackType.toJSON !== this.toJSON ) {

			json = trackType.toJSON( track );

		} else {

			// by default, we assume the data can be serialized as-is
			json = {

				'name': track.name,
				'times': AnimationUtils.convertArray( track.times, Array ),
				'values': AnimationUtils.convertArray( track.values, Array )

			};

			const interpolation = track.getInterpolation();

			if ( interpolation !== track.DefaultInterpolation ) {

				json.interpolation = interpolation;

			}

		}

		json.type = track.ValueTypeName; // mandatory

		return json;

	}

	InterpolantFactoryMethodDiscrete( result ) {

		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

	}

	InterpolantFactoryMethodLinear( result ) {

		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

	}

	InterpolantFactoryMethodSmooth( result ) {

		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

	}

	setInterpolation( interpolation ) {

		let factoryMethod;

		switch ( interpolation ) {

			case InterpolateDiscrete:

				factoryMethod = this.InterpolantFactoryMethodDiscrete;

				break;

			case InterpolateLinear:

				factoryMethod = this.InterpolantFactoryMethodLinear;

				break;

			case InterpolateSmooth:

				factoryMethod = this.InterpolantFactoryMethodSmooth;

				break;

		}

		if ( factoryMethod === undefined ) {

			const message = 'unsupported interpolation for ' +
				this.ValueTypeName + ' keyframe track named ' + this.name;

			if ( this.createInterpolant === undefined ) {

				// fall back to default, unless the default itself is messed up
				if ( interpolation !== this.DefaultInterpolation ) {

					this.setInterpolation( this.DefaultInterpolation );

				} else {

					throw new Error( message ); // fatal, in this case

				}

			}

			console.warn( 'THREE.KeyframeTrack:', message );
			return this;

		}

		this.createInterpolant = factoryMethod;

		return this;

	}

	getInterpolation() {

		switch ( this.createInterpolant ) {

			case this.InterpolantFactoryMethodDiscrete:

				return InterpolateDiscrete;

			case this.InterpolantFactoryMethodLinear:

				return InterpolateLinear;

			case this.InterpolantFactoryMethodSmooth:

				return InterpolateSmooth;

		}

	}

	getValueSize() {

		return this.values.length / this.times.length;

	}

	// move all keyframes either forwards or backwards in time
	shift( timeOffset ) {

		if ( timeOffset !== 0.0 ) {

			const times = this.times;

			for ( let i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] += timeOffset;

			}

		}

		return this;

	}

	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	scale( timeScale ) {

		if ( timeScale !== 1.0 ) {

			const times = this.times;

			for ( let i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] *= timeScale;

			}

		}

		return this;

	}

	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	trim( startTime, endTime ) {

		const times = this.times,
			nKeys = times.length;

		let from = 0,
			to = nKeys - 1;

		while ( from !== nKeys && times[ from ] < startTime ) {

			++ from;

		}

		while ( to !== - 1 && times[ to ] > endTime ) {

			-- to;

		}

		++ to; // inclusive -> exclusive bound

		if ( from !== 0 || to !== nKeys ) {

			// empty tracks are forbidden, so keep at least one keyframe
			if ( from >= to ) {

				to = Math.max( to, 1 );
				from = to - 1;

			}

			const stride = this.getValueSize();
			this.times = AnimationUtils.arraySlice( times, from, to );
			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

		}

		return this;

	}

	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	validate() {

		let valid = true;

		const valueSize = this.getValueSize();
		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
			valid = false;

		}

		const times = this.times,
			values = this.values,

			nKeys = times.length;

		if ( nKeys === 0 ) {

			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
			valid = false;

		}

		let prevTime = null;

		for ( let i = 0; i !== nKeys; i ++ ) {

			const currTime = times[ i ];

			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
				valid = false;
				break;

			}

			if ( prevTime !== null && prevTime > currTime ) {

				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
				valid = false;
				break;

			}

			prevTime = currTime;

		}

		if ( values !== undefined ) {

			if ( AnimationUtils.isTypedArray( values ) ) {

				for ( let i = 0, n = values.length; i !== n; ++ i ) {

					const value = values[ i ];

					if ( isNaN( value ) ) {

						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
						valid = false;
						break;

					}

				}

			}

		}

		return valid;

	}

	// removes equivalent sequential keys as common in morph target sequences
	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	optimize() {

		// times or values may be shared with other tracks, so overwriting is unsafe
		const times = AnimationUtils.arraySlice( this.times ),
			values = AnimationUtils.arraySlice( this.values ),
			stride = this.getValueSize(),

			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

			lastIndex = times.length - 1;

		let writeIndex = 1;

		for ( let i = 1; i < lastIndex; ++ i ) {

			let keep = false;

			const time = times[ i ];
			const timeNext = times[ i + 1 ];

			// remove adjacent keyframes scheduled at the same time

			if ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {

				if ( ! smoothInterpolation ) {

					// remove unnecessary keyframes same as their neighbors

					const offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( let j = 0; j !== stride; ++ j ) {

						const value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
							value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				} else {

					keep = true;

				}

			}

			// in-place compaction

			if ( keep ) {

				if ( i !== writeIndex ) {

					times[ writeIndex ] = times[ i ];

					const readOffset = i * stride,
						writeOffset = writeIndex * stride;

					for ( let j = 0; j !== stride; ++ j ) {

						values[ writeOffset + j ] = values[ readOffset + j ];

					}

				}

				++ writeIndex;

			}

		}

		// flush last keyframe (compaction looks ahead)

		if ( lastIndex > 0 ) {

			times[ writeIndex ] = times[ lastIndex ];

			for ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

				values[ writeOffset + j ] = values[ readOffset + j ];

			}

			++ writeIndex;

		}

		if ( writeIndex !== times.length ) {

			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

		} else {

			this.times = times;
			this.values = values;

		}

		return this;

	}

	clone() {

		const times = AnimationUtils.arraySlice( this.times, 0 );
		const values = AnimationUtils.arraySlice( this.values, 0 );

		const TypedKeyframeTrack = this.constructor;
		const track = new TypedKeyframeTrack( this.name, times, values );

		// Interpolant argument to constructor is not saved, so copy the factory method directly.
		track.createInterpolant = this.createInterpolant;

		return track;

	}

}

KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;

/**
 * A Track of Boolean keyframe values.
 */
class BooleanKeyframeTrack extends KeyframeTrack {}

BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

/**
 * A Track of keyframe values that represent color.
 */
class ColorKeyframeTrack extends KeyframeTrack {}

ColorKeyframeTrack.prototype.ValueTypeName = 'color';

/**
 * A Track of numeric keyframe values.
 */
class NumberKeyframeTrack extends KeyframeTrack {}

NumberKeyframeTrack.prototype.ValueTypeName = 'number';

/**
 * Spherical linear unit quaternion interpolant.
 */

class QuaternionLinearInterpolant extends Interpolant {

	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		super( parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	interpolate_( i1, t0, t, t1 ) {

		const result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			alpha = ( t - t0 ) / ( t1 - t0 );

		let offset = i1 * stride;

		for ( let end = offset + stride; offset !== end; offset += 4 ) {

			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

		}

		return result;

	}

}

/**
 * A Track of quaternion keyframe values.
 */
class QuaternionKeyframeTrack extends KeyframeTrack {

	InterpolantFactoryMethodLinear( result ) {

		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

	}

}

QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
// ValueBufferType is inherited
QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

/**
 * A Track that interpolates Strings
 */
class StringKeyframeTrack extends KeyframeTrack {}

StringKeyframeTrack.prototype.ValueTypeName = 'string';
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

/**
 * A Track of vectored keyframe values.
 */
class VectorKeyframeTrack extends KeyframeTrack {}

VectorKeyframeTrack.prototype.ValueTypeName = 'vector';

class AnimationClip {

	constructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = duration;
		this.blendMode = blendMode;

		this.uuid = generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

	}


	static parse( json ) {

		const tracks = [],
			jsonTracks = json.tracks,
			frameTime = 1.0 / ( json.fps || 1.0 );

		for ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {

			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

		}

		const clip = new this( json.name, json.duration, tracks, json.blendMode );
		clip.uuid = json.uuid;

		return clip;

	}

	static toJSON( clip ) {

		const tracks = [],
			clipTracks = clip.tracks;

		const json = {

			'name': clip.name,
			'duration': clip.duration,
			'tracks': tracks,
			'uuid': clip.uuid,
			'blendMode': clip.blendMode

		};

		for ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

		}

		return json;

	}

	static CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {

		const numMorphTargets = morphTargetSequence.length;
		const tracks = [];

		for ( let i = 0; i < numMorphTargets; i ++ ) {

			let times = [];
			let values = [];

			times.push(
				( i + numMorphTargets - 1 ) % numMorphTargets,
				i,
				( i + 1 ) % numMorphTargets );

			values.push( 0, 1, 0 );

			const order = AnimationUtils.getKeyframeOrder( times );
			times = AnimationUtils.sortedArray( times, 1, order );
			values = AnimationUtils.sortedArray( values, 1, order );

			// if there is a key at the first frame, duplicate it as the
			// last frame as well for perfect loop.
			if ( ! noLoop && times[ 0 ] === 0 ) {

				times.push( numMorphTargets );
				values.push( values[ 0 ] );

			}

			tracks.push(
				new NumberKeyframeTrack(
					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
					times, values
				).scale( 1.0 / fps ) );

		}

		return new this( name, - 1, tracks );

	}

	static findByName( objectOrClipArray, name ) {

		let clipArray = objectOrClipArray;

		if ( ! Array.isArray( objectOrClipArray ) ) {

			const o = objectOrClipArray;
			clipArray = o.geometry && o.geometry.animations || o.animations;

		}

		for ( let i = 0; i < clipArray.length; i ++ ) {

			if ( clipArray[ i ].name === name ) {

				return clipArray[ i ];

			}

		}

		return null;

	}

	static CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {

		const animationToMorphTargets = {};

		// tested with https://regex101.com/ on trick sequences
		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		const pattern = /^([\w-]*?)([\d]+)$/;

		// sort morph target names into animation groups based
		// patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {

			const morphTarget = morphTargets[ i ];
			const parts = morphTarget.name.match( pattern );

			if ( parts && parts.length > 1 ) {

				const name = parts[ 1 ];

				let animationMorphTargets = animationToMorphTargets[ name ];

				if ( ! animationMorphTargets ) {

					animationToMorphTargets[ name ] = animationMorphTargets = [];

				}

				animationMorphTargets.push( morphTarget );

			}

		}

		const clips = [];

		for ( const name in animationToMorphTargets ) {

			clips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

		}

		return clips;

	}

	// parse the animation.hierarchy format
	static parseAnimation( animation, bones ) {

		if ( ! animation ) {

			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
			return null;

		}

		const addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

			// only return track if there are actually keys.
			if ( animationKeys.length !== 0 ) {

				const times = [];
				const values = [];

				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

				// empty keys are filtered out, so check again
				if ( times.length !== 0 ) {

					destTracks.push( new trackType( trackName, times, values ) );

				}

			}

		};

		const tracks = [];

		const clipName = animation.name || 'default';
		const fps = animation.fps || 30;
		const blendMode = animation.blendMode;

		// automatic length determination in AnimationClip.
		let duration = animation.length || - 1;

		const hierarchyTracks = animation.hierarchy || [];

		for ( let h = 0; h < hierarchyTracks.length; h ++ ) {

			const animationKeys = hierarchyTracks[ h ].keys;

			// skip empty tracks
			if ( ! animationKeys || animationKeys.length === 0 ) continue;

			// process morph targets
			if ( animationKeys[ 0 ].morphTargets ) {

				// figure out all morph targets used in this track
				const morphTargetNames = {};

				let k;

				for ( k = 0; k < animationKeys.length; k ++ ) {

					if ( animationKeys[ k ].morphTargets ) {

						for ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

						}

					}

				}

				// create a track for each morph target with all zero
				// morphTargetInfluences except for the keys in which
				// the morphTarget is named.
				for ( const morphTargetName in morphTargetNames ) {

					const times = [];
					const values = [];

					for ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

						const animationKey = animationKeys[ k ];

						times.push( animationKey.time );
						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

					}

					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

				}

				duration = morphTargetNames.length * ( fps || 1.0 );

			} else {

				// ...assume skeletal animation

				const boneName = '.bones[' + bones[ h ].name + ']';

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.position',
					animationKeys, 'pos', tracks );

				addNonemptyTrack(
					QuaternionKeyframeTrack, boneName + '.quaternion',
					animationKeys, 'rot', tracks );

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.scale',
					animationKeys, 'scl', tracks );

			}

		}

		if ( tracks.length === 0 ) {

			return null;

		}

		const clip = new this( clipName, duration, tracks, blendMode );

		return clip;

	}

	resetDuration() {

		const tracks = this.tracks;
		let duration = 0;

		for ( let i = 0, n = tracks.length; i !== n; ++ i ) {

			const track = this.tracks[ i ];

			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

		}

		this.duration = duration;

		return this;

	}

	trim() {

		for ( let i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].trim( 0, this.duration );

		}

		return this;

	}

	validate() {

		let valid = true;

		for ( let i = 0; i < this.tracks.length; i ++ ) {

			valid = valid && this.tracks[ i ].validate();

		}

		return valid;

	}

	optimize() {

		for ( let i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].optimize();

		}

		return this;

	}

	clone() {

		const tracks = [];

		for ( let i = 0; i < this.tracks.length; i ++ ) {

			tracks.push( this.tracks[ i ].clone() );

		}

		return new this.constructor( this.name, this.duration, tracks, this.blendMode );

	}

	toJSON() {

		return this.constructor.toJSON( this );

	}

}

function getTrackTypeForValueTypeName( typeName ) {

	switch ( typeName.toLowerCase() ) {

		case 'scalar':
		case 'double':
		case 'float':
		case 'number':
		case 'integer':

			return NumberKeyframeTrack;

		case 'vector':
		case 'vector2':
		case 'vector3':
		case 'vector4':

			return VectorKeyframeTrack;

		case 'color':

			return ColorKeyframeTrack;

		case 'quaternion':

			return QuaternionKeyframeTrack;

		case 'bool':
		case 'boolean':

			return BooleanKeyframeTrack;

		case 'string':

			return StringKeyframeTrack;

	}

	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

}

function parseKeyframeTrack( json ) {

	if ( json.type === undefined ) {

		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

	}

	const trackType = getTrackTypeForValueTypeName( json.type );

	if ( json.times === undefined ) {

		const times = [], values = [];

		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

		json.times = times;
		json.values = values;

	}

	// derived classes can define a static parse method
	if ( trackType.parse !== undefined ) {

		return trackType.parse( json );

	} else {

		// by default, we assume a constructor compatible with the base
		return new trackType( json.name, json.times, json.values, json.interpolation );

	}

}

const Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

class LoadingManager {

	constructor( onLoad, onProgress, onError ) {

		const scope = this;

		let isLoading = false;
		let itemsLoaded = 0;
		let itemsTotal = 0;
		let urlModifier = undefined;
		const handlers = [];

		// Refer to #5689 for the reason why we don't set .onStart
		// in the constructor

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;

			return this;

		};

		this.addHandler = function ( regex, loader ) {

			handlers.push( regex, loader );

			return this;

		};

		this.removeHandler = function ( regex ) {

			const index = handlers.indexOf( regex );

			if ( index !== - 1 ) {

				handlers.splice( index, 2 );

			}

			return this;

		};

		this.getHandler = function ( file ) {

			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {

				const regex = handlers[ i ];
				const loader = handlers[ i + 1 ];

				if ( regex.global ) regex.lastIndex = 0; // see #17920

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		};

	}

}

const DefaultLoadingManager = new LoadingManager();

class Loader {

	constructor( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.crossOrigin = 'anonymous';
		this.withCredentials = false;
		this.path = '';
		this.resourcePath = '';
		this.requestHeader = {};

	}

	load( /* url, onLoad, onProgress, onError */ ) {}

	loadAsync( url, onProgress ) {

		const scope = this;

		return new Promise( function ( resolve, reject ) {

			scope.load( url, resolve, onProgress, reject );

		} );

	}

	parse( /* data */ ) {}

	setCrossOrigin( crossOrigin ) {

		this.crossOrigin = crossOrigin;
		return this;

	}

	setWithCredentials( value ) {

		this.withCredentials = value;
		return this;

	}

	setPath( path ) {

		this.path = path;
		return this;

	}

	setResourcePath( resourcePath ) {

		this.resourcePath = resourcePath;
		return this;

	}

	setRequestHeader( requestHeader ) {

		this.requestHeader = requestHeader;
		return this;

	}

}

const loading = {};

class FileLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		const cached = Cache.get( url );

		if ( cached !== undefined ) {

			this.manager.itemStart( url );

			setTimeout( () => {

				if ( onLoad ) onLoad( cached );

				this.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check if request is duplicate

		if ( loading[ url ] !== undefined ) {

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			return;

		}

		// Initialise array for duplicate requests
		loading[ url ] = [];

		loading[ url ].push( {
			onLoad: onLoad,
			onProgress: onProgress,
			onError: onError,
		} );

		// create request
		const req = new Request( url, {
			headers: new Headers( this.requestHeader ),
			credentials: this.withCredentials ? 'include' : 'same-origin',
			// An abort controller could be added within a future PR
		} );

		// start the fetch
		fetch( req )
			.then( response => {

				if ( response.status === 200 || response.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					if ( response.status === 0 ) {

						console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					}

					const callbacks = loading[ url ];
					const reader = response.body.getReader();
					const contentLength = response.headers.get( 'Content-Length' );
					const total = contentLength ? parseInt( contentLength ) : 0;
					const lengthComputable = total !== 0;
					let loaded = 0;

					// periodically read data into the new stream tracking while download progress
					return new ReadableStream( {
						start( controller ) {

							readData();

							function readData() {

								reader.read().then( ( { done, value } ) => {

									if ( done ) {

										controller.close();

									} else {

										loaded += value.byteLength;

										const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );
										for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

											const callback = callbacks[ i ];
											if ( callback.onProgress ) callback.onProgress( event );

										}

										controller.enqueue( value );
										readData();

									}

								} );

							}

						}

					} );

				} else {

					throw Error( `fetch for "${response.url}" responded with ${response.status}: ${response.statusText}` );

				}

			} )
			.then( stream => {

				const response = new Response( stream );

				switch ( this.responseType ) {

					case 'arraybuffer':

						return response.arrayBuffer();

					case 'blob':

						return response.blob();

					case 'document':

						return response.text()
							.then( text => {

								const parser = new DOMParser();
								return parser.parseFromString( text, this.mimeType );

							} );

					case 'json':

						return response.json();

					default:

						return response.text();

				}

			} )
			.then( data => {

				// Add to cache only on HTTP success, so that we do not cache
				// error response bodies as proper responses to requests.
				Cache.add( url, data );

				const callbacks = loading[ url ];
				delete loading[ url ];

				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

					const callback = callbacks[ i ];
					if ( callback.onLoad ) callback.onLoad( data );

				}

				this.manager.itemEnd( url );

			} )
			.catch( err => {

				// Abort errors and other errors are handled the same

				const callbacks = loading[ url ];
				delete loading[ url ];

				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

					const callback = callbacks[ i ];
					if ( callback.onError ) callback.onError( err );

				}

				this.manager.itemError( url );
				this.manager.itemEnd( url );

			} );

		this.manager.itemStart( url );

	}

	setResponseType( value ) {

		this.responseType = value;
		return this;

	}

	setMimeType( value ) {

		this.mimeType = value;
		return this;

	}

}

class AnimationLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			try {

				onLoad( scope.parse( JSON.parse( text ) ) );

			} catch ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );

			}

		}, onProgress, onError );

	}

	parse( json ) {

		const animations = [];

		for ( let i = 0; i < json.length; i ++ ) {

			const clip = AnimationClip.parse( json[ i ] );

			animations.push( clip );

		}

		return animations;

	}

}

/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */

class CompressedTextureLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const images = [];

		const texture = new CompressedTexture();

		const loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( scope.withCredentials );

		let loaded = 0;

		function loadTexture( i ) {

			loader.load( url[ i ], function ( buffer ) {

				const texDatas = scope.parse( buffer, true );

				images[ i ] = {
					width: texDatas.width,
					height: texDatas.height,
					format: texDatas.format,
					mipmaps: texDatas.mipmaps
				};

				loaded += 1;

				if ( loaded === 6 ) {

					if ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;

					texture.image = images;
					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, onProgress, onError );

		}

		if ( Array.isArray( url ) ) {

			for ( let i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				const texDatas = scope.parse( buffer, true );

				if ( texDatas.isCubemap ) {

					const faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( let f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps: [] };

						for ( let i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

					texture.image = images;

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture );

			}, onProgress, onError );

		}

		return texture;

	}

}

class ImageLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		const scope = this;

		const cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		const image = createElementNS( 'img' );

		function onImageLoad() {

			removeEventListeners();

			Cache.add( url, this );

			if ( onLoad ) onLoad( this );

			scope.manager.itemEnd( url );

		}

		function onImageError( event ) {

			removeEventListeners();

			if ( onError ) onError( event );

			scope.manager.itemError( url );
			scope.manager.itemEnd( url );

		}

		function removeEventListeners() {

			image.removeEventListener( 'load', onImageLoad, false );
			image.removeEventListener( 'error', onImageError, false );

		}

		image.addEventListener( 'load', onImageLoad, false );
		image.addEventListener( 'error', onImageError, false );

		if ( url.substr( 0, 5 ) !== 'data:' ) {

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		}

		scope.manager.itemStart( url );

		image.src = url;

		return image;

	}

}

class CubeTextureLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( urls, onLoad, onProgress, onError ) {

		const texture = new CubeTexture();

		const loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		let loaded = 0;

		function loadTexture( i ) {

			loader.load( urls[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded ++;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, undefined, onError );

		}

		for ( let i = 0; i < urls.length; ++ i ) {

			loadTexture( i );

		}

		return texture;

	}

}

/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */

class DataTextureLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const texture = new DataTexture();

		const loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.setRequestHeader( this.requestHeader );
		loader.setPath( this.path );
		loader.setWithCredentials( scope.withCredentials );
		loader.load( url, function ( buffer ) {

			const texData = scope.parse( buffer );

			if ( ! texData ) return;

			if ( texData.image !== undefined ) {

				texture.image = texData.image;

			} else if ( texData.data !== undefined ) {

				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;

			}

			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

			if ( texData.encoding !== undefined ) {

				texture.encoding = texData.encoding;

			}

			if ( texData.flipY !== undefined ) {

				texture.flipY = texData.flipY;

			}

			if ( texData.format !== undefined ) {

				texture.format = texData.format;

			}

			if ( texData.type !== undefined ) {

				texture.type = texData.type;

			}

			if ( texData.mipmaps !== undefined ) {

				texture.mipmaps = texData.mipmaps;
				texture.minFilter = LinearMipmapLinearFilter; // presumably...

			}

			if ( texData.mipmapCount === 1 ) {

				texture.minFilter = LinearFilter;

			}

			if ( texData.generateMipmaps !== undefined ) {

				texture.generateMipmaps = texData.generateMipmaps;

			}

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture, texData );

		}, onProgress, onError );


		return texture;

	}

}

class TextureLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const texture = new Texture();

		const loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		loader.load( url, function ( image ) {

			texture.image = image;
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

		return texture;

	}

}

class Light extends Object3D {

	constructor( color, intensity = 1 ) {

		super();

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity;

	}

	dispose() {

		// Empty here in base class; some subclasses override.

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

		return data;

	}

}

Light.prototype.isLight = true;

class HemisphereLight extends Light {

	constructor( skyColor, groundColor, intensity ) {

		super( skyColor, intensity );

		this.type = 'HemisphereLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	copy( source ) {

		Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	}

}

HemisphereLight.prototype.isHemisphereLight = true;

const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
const _lookTarget$1 = /*@__PURE__*/ new Vector3();

class LightShadow {

	constructor( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.normalBias = 0;
		this.radius = 1;
		this.blurSamples = 8;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.mapPass = null;
		this.matrix = new Matrix4();

		this.autoUpdate = true;
		this.needsUpdate = false;

		this._frustum = new Frustum();
		this._frameExtents = new Vector2( 1, 1 );

		this._viewportCount = 1;

		this._viewports = [

			new Vector4( 0, 0, 1, 1 )

		];

	}

	getViewportCount() {

		return this._viewportCount;

	}

	getFrustum() {

		return this._frustum;

	}

	updateMatrices( light ) {

		const shadowCamera = this.camera;
		const shadowMatrix = this.matrix;

		_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );
		shadowCamera.position.copy( _lightPositionWorld$1 );

		_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );
		shadowCamera.lookAt( _lookTarget$1 );
		shadowCamera.updateMatrixWorld();

		_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );

		shadowMatrix.set(
			0.5, 0.0, 0.0, 0.5,
			0.0, 0.5, 0.0, 0.5,
			0.0, 0.0, 0.5, 0.5,
			0.0, 0.0, 0.0, 1.0
		);

		shadowMatrix.multiply( shadowCamera.projectionMatrix );
		shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

	}

	getViewport( viewportIndex ) {

		return this._viewports[ viewportIndex ];

	}

	getFrameExtents() {

		return this._frameExtents;

	}

	dispose() {

		if ( this.map ) {

			this.map.dispose();

		}

		if ( this.mapPass ) {

			this.mapPass.dispose();

		}

	}

	copy( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	toJSON() {

		const object = {};

		if ( this.bias !== 0 ) object.bias = this.bias;
		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
		if ( this.radius !== 1 ) object.radius = this.radius;
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

}

class SpotLightShadow extends LightShadow {

	constructor() {

		super( new PerspectiveCamera( 50, 1, 0.5, 500 ) );

		this.focus = 1;

	}

	updateMatrices( light ) {

		const camera = this.camera;

		const fov = RAD2DEG * 2 * light.angle * this.focus;
		const aspect = this.mapSize.width / this.mapSize.height;
		const far = light.distance || camera.far;

		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

			camera.fov = fov;
			camera.aspect = aspect;
			camera.far = far;
			camera.updateProjectionMatrix();

		}

		super.updateMatrices( light );

	}

	copy( source ) {

		super.copy( source );

		this.focus = source.focus;

		return this;

	}

}

SpotLightShadow.prototype.isSpotLightShadow = true;

class SpotLight extends Light {

	constructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {

		super( color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.distance = distance;
		this.angle = angle;
		this.penumbra = penumbra;
		this.decay = decay; // for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	get power() {

		// compute the light's luminous power (in lumens) from its intensity (in candela)
		// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
		return this.intensity * Math.PI;

	}

	set power( power ) {

		// set the light's intensity (in candela) from the desired luminous power (in lumens)
		this.intensity = power / Math.PI;

	}

	dispose() {

		this.shadow.dispose();

	}

	copy( source ) {

		super.copy( source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.penumbra = source.penumbra;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

}

SpotLight.prototype.isSpotLight = true;

const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld = /*@__PURE__*/ new Vector3();
const _lookTarget = /*@__PURE__*/ new Vector3();

class PointLightShadow extends LightShadow {

	constructor() {

		super( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

		this._frameExtents = new Vector2( 4, 2 );

		this._viewportCount = 6;

		this._viewports = [
			// These viewports map a cube-map onto a 2D texture with the
			// following orientation:
			//
			//  xzXZ
			//   y Y
			//
			// X - Positive x direction
			// x - Negative x direction
			// Y - Positive y direction
			// y - Negative y direction
			// Z - Positive z direction
			// z - Negative z direction

			// positive X
			new Vector4( 2, 1, 1, 1 ),
			// negative X
			new Vector4( 0, 1, 1, 1 ),
			// positive Z
			new Vector4( 3, 1, 1, 1 ),
			// negative Z
			new Vector4( 1, 1, 1, 1 ),
			// positive Y
			new Vector4( 3, 0, 1, 1 ),
			// negative Y
			new Vector4( 1, 0, 1, 1 )
		];

		this._cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		this._cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

	}

	updateMatrices( light, viewportIndex = 0 ) {

		const camera = this.camera;
		const shadowMatrix = this.matrix;

		const far = light.distance || camera.far;

		if ( far !== camera.far ) {

			camera.far = far;
			camera.updateProjectionMatrix();

		}

		_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
		camera.position.copy( _lightPositionWorld );

		_lookTarget.copy( camera.position );
		_lookTarget.add( this._cubeDirections[ viewportIndex ] );
		camera.up.copy( this._cubeUps[ viewportIndex ] );
		camera.lookAt( _lookTarget );
		camera.updateMatrixWorld();

		shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		this._frustum.setFromProjectionMatrix( _projScreenMatrix );

	}

}

PointLightShadow.prototype.isPointLightShadow = true;

class PointLight extends Light {

	constructor( color, intensity, distance = 0, decay = 1 ) {

		super( color, intensity );

		this.type = 'PointLight';

		this.distance = distance;
		this.decay = decay; // for physically correct lights, should be 2.

		this.shadow = new PointLightShadow();

	}

	get power() {

		// compute the light's luminous power (in lumens) from its intensity (in candela)
		// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
		return this.intensity * 4 * Math.PI;

	}

	set power( power ) {

		// set the light's intensity (in candela) from the desired luminous power (in lumens)
		this.intensity = power / ( 4 * Math.PI );

	}

	dispose() {

		this.shadow.dispose();

	}

	copy( source ) {

		super.copy( source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	}

}

PointLight.prototype.isPointLight = true;

class DirectionalLightShadow extends LightShadow {

	constructor() {

		super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

}

DirectionalLightShadow.prototype.isDirectionalLightShadow = true;

class DirectionalLight extends Light {

	constructor( color, intensity ) {

		super( color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	dispose() {

		this.shadow.dispose();

	}

	copy( source ) {

		super.copy( source );

		this.target = source.target.clone();
		this.shadow = source.shadow.clone();

		return this;

	}

}

DirectionalLight.prototype.isDirectionalLight = true;

class AmbientLight extends Light {

	constructor( color, intensity ) {

		super( color, intensity );

		this.type = 'AmbientLight';

	}

}

AmbientLight.prototype.isAmbientLight = true;

class RectAreaLight extends Light {

	constructor( color, intensity, width = 10, height = 10 ) {

		super( color, intensity );

		this.type = 'RectAreaLight';

		this.width = width;
		this.height = height;

	}

	get power() {

		// compute the light's luminous power (in lumens) from its intensity (in nits)
		return this.intensity * this.width * this.height * Math.PI;

	}

	set power( power ) {

		// set the light's intensity (in nits) from the desired luminous power (in lumens)
		this.intensity = power / ( this.width * this.height * Math.PI );

	}

	copy( source ) {

		super.copy( source );

		this.width = source.width;
		this.height = source.height;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.width = this.width;
		data.object.height = this.height;

		return data;

	}

}

RectAreaLight.prototype.isRectAreaLight = true;

/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */

// 3-band SH defined by 9 coefficients

class SphericalHarmonics3 {

	constructor() {

		this.coefficients = [];

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients.push( new Vector3() );

		}

	}

	set( coefficients ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].copy( coefficients[ i ] );

		}

		return this;

	}

	zero() {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].set( 0, 0, 0 );

		}

		return this;

	}

	// get the radiance in the direction of the normal
	// target is a Vector3
	getAt( normal, target ) {

		// normal is assumed to be unit length

		const x = normal.x, y = normal.y, z = normal.z;

		const coeff = this.coefficients;

		// band 0
		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

		// band 1
		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
		target.addScaledVector( coeff[ 3 ], 0.488603 * x );

		// band 2
		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

		return target;

	}

	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
	// target is a Vector3
	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
	getIrradianceAt( normal, target ) {

		// normal is assumed to be unit length

		const x = normal.x, y = normal.y, z = normal.z;

		const coeff = this.coefficients;

		// band 0
		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

		// band 1
		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );

		// band 2
		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

		return target;

	}

	add( sh ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].add( sh.coefficients[ i ] );

		}

		return this;

	}

	addScaledSH( sh, s ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );

		}

		return this;

	}

	scale( s ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].multiplyScalar( s );

		}

		return this;

	}

	lerp( sh, alpha ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

		}

		return this;

	}

	equals( sh ) {

		for ( let i = 0; i < 9; i ++ ) {

			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

				return false;

			}

		}

		return true;

	}

	copy( sh ) {

		return this.set( sh.coefficients );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	fromArray( array, offset = 0 ) {

		const coefficients = this.coefficients;

		for ( let i = 0; i < 9; i ++ ) {

			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const coefficients = this.coefficients;

		for ( let i = 0; i < 9; i ++ ) {

			coefficients[ i ].toArray( array, offset + ( i * 3 ) );

		}

		return array;

	}

	// evaluate the basis functions
	// shBasis is an Array[ 9 ]
	static getBasisAt( normal, shBasis ) {

		// normal is assumed to be unit length

		const x = normal.x, y = normal.y, z = normal.z;

		// band 0
		shBasis[ 0 ] = 0.282095;

		// band 1
		shBasis[ 1 ] = 0.488603 * y;
		shBasis[ 2 ] = 0.488603 * z;
		shBasis[ 3 ] = 0.488603 * x;

		// band 2
		shBasis[ 4 ] = 1.092548 * x * y;
		shBasis[ 5 ] = 1.092548 * y * z;
		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
		shBasis[ 7 ] = 1.092548 * x * z;
		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

	}

}

SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;

class LightProbe extends Light {

	constructor( sh = new SphericalHarmonics3(), intensity = 1 ) {

		super( undefined, intensity );

		this.sh = sh;

	}

	copy( source ) {

		super.copy( source );

		this.sh.copy( source.sh );

		return this;

	}

	fromJSON( json ) {

		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
		this.sh.fromArray( json.sh );

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.sh = this.sh.toArray();

		return data;

	}

}

LightProbe.prototype.isLightProbe = true;

class MaterialLoader extends Loader {

	constructor( manager ) {

		super( manager );
		this.textures = {};

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( scope.manager );
		loader.setPath( scope.path );
		loader.setRequestHeader( scope.requestHeader );
		loader.setWithCredentials( scope.withCredentials );
		loader.load( url, function ( text ) {

			try {

				onLoad( scope.parse( JSON.parse( text ) ) );

			} catch ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );

			}

		}, onProgress, onError );

	}

	parse( json ) {

		const textures = this.textures;

		function getTexture( name ) {

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		}

		const material = new Materials[ json.type ]();

		if ( json.uuid !== undefined ) material.uuid = json.uuid;
		if ( json.name !== undefined ) material.name = json.name;
		if ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );
		if ( json.roughness !== undefined ) material.roughness = json.roughness;
		if ( json.metalness !== undefined ) material.metalness = json.metalness;
		if ( json.sheen !== undefined ) material.sheen = json.sheen;
		if ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );
		if ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;
		if ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;
		if ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
		if ( json.transmission !== undefined ) material.transmission = json.transmission;
		if ( json.thickness !== undefined ) material.thickness = json.thickness;
		if ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;
		if ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );
		if ( json.fog !== undefined ) material.fog = json.fog;
		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.combine !== undefined ) material.combine = json.combine;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.format !== undefined ) material.format = json.format;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;

		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;

		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

		if ( json.rotation !== undefined ) material.rotation = json.rotation;

		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
		if ( json.scale !== undefined ) material.scale = json.scale;

		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;

		if ( json.dithering !== undefined ) material.dithering = json.dithering;

		if ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;
		if ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;

		if ( json.visible !== undefined ) material.visible = json.visible;

		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;

		if ( json.userData !== undefined ) material.userData = json.userData;

		if ( json.vertexColors !== undefined ) {

			if ( typeof json.vertexColors === 'number' ) {

				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;

			} else {

				material.vertexColors = json.vertexColors;

			}

		}

		// Shader Material

		if ( json.uniforms !== undefined ) {

			for ( const name in json.uniforms ) {

				const uniform = json.uniforms[ name ];

				material.uniforms[ name ] = {};

				switch ( uniform.type ) {

					case 't':
						material.uniforms[ name ].value = getTexture( uniform.value );
						break;

					case 'c':
						material.uniforms[ name ].value = new Color().setHex( uniform.value );
						break;

					case 'v2':
						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
						break;

					case 'v3':
						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
						break;

					case 'v4':
						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
						break;

					case 'm3':
						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
						break;

					case 'm4':
						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
						break;

					default:
						material.uniforms[ name ].value = uniform.value;

				}

			}

		}

		if ( json.defines !== undefined ) material.defines = json.defines;
		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;

		if ( json.extensions !== undefined ) {

			for ( const key in json.extensions ) {

				material.extensions[ key ] = json.extensions[ key ];

			}

		}

		// Deprecated

		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

		// for PointsMaterial

		if ( json.size !== undefined ) material.size = json.size;
		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

		// maps

		if ( json.map !== undefined ) material.map = getTexture( json.map );
		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );

		if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );

		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
		if ( json.normalScale !== undefined ) {

			let normalScale = json.normalScale;

			if ( Array.isArray( normalScale ) === false ) {

				// Blender exporter used to export a scalar. See #7459

				normalScale = [ normalScale, normalScale ];

			}

			material.normalScale = new Vector2().fromArray( normalScale );

		}

		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
		if ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );
		if ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );

		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;

		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;

		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

		if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );
		if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );
		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );

		if ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );
		if ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );

		if ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );
		if ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );

		return material;

	}

	setTextures( value ) {

		this.textures = value;
		return this;

	}

}

class LoaderUtils {

	static decodeText( array ) {

		if ( typeof TextDecoder !== 'undefined' ) {

			return new TextDecoder().decode( array );

		}

		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
		// throws a "maximum call stack size exceeded" error for large arrays.

		let s = '';

		for ( let i = 0, il = array.length; i < il; i ++ ) {

			// Implicitly assumes little-endian.
			s += String.fromCharCode( array[ i ] );

		}

		try {

			// merges multi-byte utf-8 characters.

			return decodeURIComponent( escape( s ) );

		} catch ( e ) { // see #16358

			return s;

		}

	}

	static extractUrlBase( url ) {

		const index = url.lastIndexOf( '/' );

		if ( index === - 1 ) return './';

		return url.substr( 0, index + 1 );

	}

	static resolveURL( url, path ) {

		// Invalid URL
		if ( typeof url !== 'string' || url === '' ) return '';

		// Host Relative URL
		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {

			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );

		}

		// Absolute URL http://,https://,//
		if ( /^(https?:)?\/\//i.test( url ) ) return url;

		// Data URI
		if ( /^data:.*,.*$/i.test( url ) ) return url;

		// Blob URL
		if ( /^blob:.*$/i.test( url ) ) return url;

		// Relative URL
		return path + url;

	}

}

class InstancedBufferGeometry extends BufferGeometry {

	constructor() {

		super();

		this.type = 'InstancedBufferGeometry';
		this.instanceCount = Infinity;

	}

	copy( source ) {

		super.copy( source );

		this.instanceCount = source.instanceCount;

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	toJSON() {

		const data = super.toJSON( this );

		data.instanceCount = this.instanceCount;

		data.isInstancedBufferGeometry = true;

		return data;

	}

}

InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

class BufferGeometryLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( scope.manager );
		loader.setPath( scope.path );
		loader.setRequestHeader( scope.requestHeader );
		loader.setWithCredentials( scope.withCredentials );
		loader.load( url, function ( text ) {

			try {

				onLoad( scope.parse( JSON.parse( text ) ) );

			} catch ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );

			}

		}, onProgress, onError );

	}

	parse( json ) {

		const interleavedBufferMap = {};
		const arrayBufferMap = {};

		function getInterleavedBuffer( json, uuid ) {

			if ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];

			const interleavedBuffers = json.interleavedBuffers;
			const interleavedBuffer = interleavedBuffers[ uuid ];

			const buffer = getArrayBuffer( json, interleavedBuffer.buffer );

			const array = getTypedArray( interleavedBuffer.type, buffer );
			const ib = new InterleavedBuffer( array, interleavedBuffer.stride );
			ib.uuid = interleavedBuffer.uuid;

			interleavedBufferMap[ uuid ] = ib;

			return ib;

		}

		function getArrayBuffer( json, uuid ) {

			if ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];

			const arrayBuffers = json.arrayBuffers;
			const arrayBuffer = arrayBuffers[ uuid ];

			const ab = new Uint32Array( arrayBuffer ).buffer;

			arrayBufferMap[ uuid ] = ab;

			return ab;

		}

		const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

		const index = json.data.index;

		if ( index !== undefined ) {

			const typedArray = getTypedArray( index.type, index.array );
			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

		}

		const attributes = json.data.attributes;

		for ( const key in attributes ) {

			const attribute = attributes[ key ];
			let bufferAttribute;

			if ( attribute.isInterleavedBufferAttribute ) {

				const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
				bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );

			} else {

				const typedArray = getTypedArray( attribute.type, attribute.array );
				const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
				bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );

			}

			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
			if ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );

			if ( attribute.updateRange !== undefined ) {

				bufferAttribute.updateRange.offset = attribute.updateRange.offset;
				bufferAttribute.updateRange.count = attribute.updateRange.count;

			}

			geometry.setAttribute( key, bufferAttribute );

		}

		const morphAttributes = json.data.morphAttributes;

		if ( morphAttributes ) {

			for ( const key in morphAttributes ) {

				const attributeArray = morphAttributes[ key ];

				const array = [];

				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

					const attribute = attributeArray[ i ];
					let bufferAttribute;

					if ( attribute.isInterleavedBufferAttribute ) {

						const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
						bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );

					} else {

						const typedArray = getTypedArray( attribute.type, attribute.array );
						bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );

					}

					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
					array.push( bufferAttribute );

				}

				geometry.morphAttributes[ key ] = array;

			}

		}

		const morphTargetsRelative = json.data.morphTargetsRelative;

		if ( morphTargetsRelative ) {

			geometry.morphTargetsRelative = true;

		}

		const groups = json.data.groups || json.data.drawcalls || json.data.offsets;

		if ( groups !== undefined ) {

			for ( let i = 0, n = groups.length; i !== n; ++ i ) {

				const group = groups[ i ];

				geometry.addGroup( group.start, group.count, group.materialIndex );

			}

		}

		const boundingSphere = json.data.boundingSphere;

		if ( boundingSphere !== undefined ) {

			const center = new Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

		}

		if ( json.name ) geometry.name = json.name;
		if ( json.userData ) geometry.userData = json.userData;

		return geometry;

	}

}

class ObjectLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
		this.resourcePath = this.resourcePath || path;

		const loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			let json = null;

			try {

				json = JSON.parse( text );

			} catch ( error ) {

				if ( onError !== undefined ) onError( error );

				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

				return;

			}

			const metadata = json.metadata;

			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
				return;

			}

			scope.parse( json, onLoad );

		}, onProgress, onError );

	}

	async loadAsync( url, onProgress ) {

		const scope = this;

		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
		this.resourcePath = this.resourcePath || path;

		const loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( this.withCredentials );

		const text = await loader.loadAsync( url, onProgress );

		const json = JSON.parse( text );

		const metadata = json.metadata;

		if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

			throw new Error( 'THREE.ObjectLoader: Can\'t load ' + url );

		}

		return await scope.parseAsync( json );

	}

	parse( json, onLoad ) {

		const animations = this.parseAnimations( json.animations );
		const shapes = this.parseShapes( json.shapes );
		const geometries = this.parseGeometries( json.geometries, shapes );

		const images = this.parseImages( json.images, function () {

			if ( onLoad !== undefined ) onLoad( object );

		} );

		const textures = this.parseTextures( json.textures, images );
		const materials = this.parseMaterials( json.materials, textures );

		const object = this.parseObject( json.object, geometries, materials, textures, animations );
		const skeletons = this.parseSkeletons( json.skeletons, object );

		this.bindSkeletons( object, skeletons );

		//

		if ( onLoad !== undefined ) {

			let hasImages = false;

			for ( const uuid in images ) {

				if ( images[ uuid ] instanceof HTMLImageElement ) {

					hasImages = true;
					break;

				}

			}

			if ( hasImages === false ) onLoad( object );

		}

		return object;

	}

	async parseAsync( json ) {

		const animations = this.parseAnimations( json.animations );
		const shapes = this.parseShapes( json.shapes );
		const geometries = this.parseGeometries( json.geometries, shapes );

		const images = await this.parseImagesAsync( json.images );

		const textures = this.parseTextures( json.textures, images );
		const materials = this.parseMaterials( json.materials, textures );

		const object = this.parseObject( json.object, geometries, materials, textures, animations );
		const skeletons = this.parseSkeletons( json.skeletons, object );

		this.bindSkeletons( object, skeletons );

		return object;

	}

	parseShapes( json ) {

		const shapes = {};

		if ( json !== undefined ) {

			for ( let i = 0, l = json.length; i < l; i ++ ) {

				const shape = new Shape().fromJSON( json[ i ] );

				shapes[ shape.uuid ] = shape;

			}

		}

		return shapes;

	}

	parseSkeletons( json, object ) {

		const skeletons = {};
		const bones = {};

		// generate bone lookup table

		object.traverse( function ( child ) {

			if ( child.isBone ) bones[ child.uuid ] = child;

		} );

		// create skeletons

		if ( json !== undefined ) {

			for ( let i = 0, l = json.length; i < l; i ++ ) {

				const skeleton = new Skeleton().fromJSON( json[ i ], bones );

				skeletons[ skeleton.uuid ] = skeleton;

			}

		}

		return skeletons;

	}

	parseGeometries( json, shapes ) {

		const geometries = {};

		if ( json !== undefined ) {

			const bufferGeometryLoader = new BufferGeometryLoader();

			for ( let i = 0, l = json.length; i < l; i ++ ) {

				let geometry;
				const data = json[ i ];

				switch ( data.type ) {

					case 'BufferGeometry':
					case 'InstancedBufferGeometry':

						geometry = bufferGeometryLoader.parse( data );

						break;

					case 'Geometry':

						console.error( 'THREE.ObjectLoader: The legacy Geometry type is no longer supported.' );

						break;

					default:

						if ( data.type in Geometries ) {

							geometry = Geometries[ data.type ].fromJSON( data, shapes );

						} else {

							console.warn( `THREE.ObjectLoader: Unsupported geometry type "${ data.type }"` );

						}

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;
				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	}

	parseMaterials( json, textures ) {

		const cache = {}; // MultiMaterial
		const materials = {};

		if ( json !== undefined ) {

			const loader = new MaterialLoader();
			loader.setTextures( textures );

			for ( let i = 0, l = json.length; i < l; i ++ ) {

				const data = json[ i ];

				if ( data.type === 'MultiMaterial' ) {

					// Deprecated

					const array = [];

					for ( let j = 0; j < data.materials.length; j ++ ) {

						const material = data.materials[ j ];

						if ( cache[ material.uuid ] === undefined ) {

							cache[ material.uuid ] = loader.parse( material );

						}

						array.push( cache[ material.uuid ] );

					}

					materials[ data.uuid ] = array;

				} else {

					if ( cache[ data.uuid ] === undefined ) {

						cache[ data.uuid ] = loader.parse( data );

					}

					materials[ data.uuid ] = cache[ data.uuid ];

				}

			}

		}

		return materials;

	}

	parseAnimations( json ) {

		const animations = {};

		if ( json !== undefined ) {

			for ( let i = 0; i < json.length; i ++ ) {

				const data = json[ i ];

				const clip = AnimationClip.parse( data );

				animations[ clip.uuid ] = clip;

			}

		}

		return animations;

	}

	parseImages( json, onLoad ) {

		const scope = this;
		const images = {};

		let loader;

		function loadImage( url ) {

			scope.manager.itemStart( url );

			return loader.load( url, function () {

				scope.manager.itemEnd( url );

			}, undefined, function () {

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			} );

		}

		function deserializeImage( image ) {

			if ( typeof image === 'string' ) {

				const url = image;

				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;

				return loadImage( path );

			} else {

				if ( image.data ) {

					return {
						data: getTypedArray( image.type, image.data ),
						width: image.width,
						height: image.height
					};

				} else {

					return null;

				}

			}

		}

		if ( json !== undefined && json.length > 0 ) {

			const manager = new LoadingManager( onLoad );

			loader = new ImageLoader( manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( let i = 0, il = json.length; i < il; i ++ ) {

				const image = json[ i ];
				const url = image.url;

				if ( Array.isArray( url ) ) {

					// load array of images e.g CubeTexture

					images[ image.uuid ] = [];

					for ( let j = 0, jl = url.length; j < jl; j ++ ) {

						const currentUrl = url[ j ];

						const deserializedImage = deserializeImage( currentUrl );

						if ( deserializedImage !== null ) {

							if ( deserializedImage instanceof HTMLImageElement ) {

								images[ image.uuid ].push( deserializedImage );

							} else {

								// special case: handle array of data textures for cube textures

								images[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );

							}

						}

					}

				} else {

					// load single image

					const deserializedImage = deserializeImage( image.url );

					if ( deserializedImage !== null ) {

						images[ image.uuid ] = deserializedImage;

					}

				}

			}

		}

		return images;

	}

	async parseImagesAsync( json ) {

		const scope = this;
		const images = {};

		let loader;

		async function deserializeImage( image ) {

			if ( typeof image === 'string' ) {

				const url = image;

				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;

				return await loader.loadAsync( path );

			} else {

				if ( image.data ) {

					return {
						data: getTypedArray( image.type, image.data ),
						width: image.width,
						height: image.height
					};

				} else {

					return null;

				}

			}

		}

		if ( json !== undefined && json.length > 0 ) {

			loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( let i = 0, il = json.length; i < il; i ++ ) {

				const image = json[ i ];
				const url = image.url;

				if ( Array.isArray( url ) ) {

					// load array of images e.g CubeTexture

					images[ image.uuid ] = [];

					for ( let j = 0, jl = url.length; j < jl; j ++ ) {

						const currentUrl = url[ j ];

						const deserializedImage = await deserializeImage( currentUrl );

						if ( deserializedImage !== null ) {

							if ( deserializedImage instanceof HTMLImageElement ) {

								images[ image.uuid ].push( deserializedImage );

							} else {

								// special case: handle array of data textures for cube textures

								images[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );

							}

						}

					}

				} else {

					// load single image

					const deserializedImage = await deserializeImage( image.url );

					if ( deserializedImage !== null ) {

						images[ image.uuid ] = deserializedImage;

					}

				}

			}

		}

		return images;

	}

	parseTextures( json, images ) {

		function parseConstant( value, type ) {

			if ( typeof value === 'number' ) return value;

			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

			return type[ value ];

		}

		const textures = {};

		if ( json !== undefined ) {

			for ( let i = 0, l = json.length; i < l; i ++ ) {

				const data = json[ i ];

				if ( data.image === undefined ) {

					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

				}

				if ( images[ data.image ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

				}

				let texture;
				const image = images[ data.image ];

				if ( Array.isArray( image ) ) {

					texture = new CubeTexture( image );

					if ( image.length === 6 ) texture.needsUpdate = true;

				} else {

					if ( image && image.data ) {

						texture = new DataTexture( image.data, image.width, image.height );

					} else {

						texture = new Texture( image );

					}

					if ( image ) texture.needsUpdate = true; // textures can have undefined image data

				}

				texture.uuid = data.uuid;

				if ( data.name !== undefined ) texture.name = data.name;

				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
				if ( data.center !== undefined ) texture.center.fromArray( data.center );
				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

				if ( data.wrap !== undefined ) {

					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

				}

				if ( data.format !== undefined ) texture.format = data.format;
				if ( data.type !== undefined ) texture.type = data.type;
				if ( data.encoding !== undefined ) texture.encoding = data.encoding;

				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;

				if ( data.userData !== undefined ) texture.userData = data.userData;

				textures[ data.uuid ] = texture;

			}

		}

		return textures;

	}

	parseObject( data, geometries, materials, textures, animations ) {

		let object;

		function getGeometry( name ) {

			if ( geometries[ name ] === undefined ) {

				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

			}

			return geometries[ name ];

		}

		function getMaterial( name ) {

			if ( name === undefined ) return undefined;

			if ( Array.isArray( name ) ) {

				const array = [];

				for ( let i = 0, l = name.length; i < l; i ++ ) {

					const uuid = name[ i ];

					if ( materials[ uuid ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

					}

					array.push( materials[ uuid ] );

				}

				return array;

			}

			if ( materials[ name ] === undefined ) {

				console.warn( 'THREE.ObjectLoader: Undefined material', name );

			}

			return materials[ name ];

		}

		function getTexture( uuid ) {

			if ( textures[ uuid ] === undefined ) {

				console.warn( 'THREE.ObjectLoader: Undefined texture', uuid );

			}

			return textures[ uuid ];

		}

		let geometry, material;

		switch ( data.type ) {

			case 'Scene':

				object = new Scene();

				if ( data.background !== undefined ) {

					if ( Number.isInteger( data.background ) ) {

						object.background = new Color( data.background );

					} else {

						object.background = getTexture( data.background );

					}

				}

				if ( data.environment !== undefined ) {

					object.environment = getTexture( data.environment );

				}

				if ( data.fog !== undefined ) {

					if ( data.fog.type === 'Fog' ) {

						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

					} else if ( data.fog.type === 'FogExp2' ) {

						object.fog = new FogExp2( data.fog.color, data.fog.density );

					}

				}

				break;

			case 'PerspectiveCamera':

				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

				if ( data.focus !== undefined ) object.focus = data.focus;
				if ( data.zoom !== undefined ) object.zoom = data.zoom;
				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

				break;

			case 'OrthographicCamera':

				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

				if ( data.zoom !== undefined ) object.zoom = data.zoom;
				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

				break;

			case 'AmbientLight':

				object = new AmbientLight( data.color, data.intensity );

				break;

			case 'DirectionalLight':

				object = new DirectionalLight( data.color, data.intensity );

				break;

			case 'PointLight':

				object = new PointLight( data.color, data.intensity, data.distance, data.decay );

				break;

			case 'RectAreaLight':

				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

				break;

			case 'SpotLight':

				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

				break;

			case 'HemisphereLight':

				object = new HemisphereLight( data.color, data.groundColor, data.intensity );

				break;

			case 'LightProbe':

				object = new LightProbe().fromJSON( data );

				break;

			case 'SkinnedMesh':

				geometry = getGeometry( data.geometry );
			 	material = getMaterial( data.material );

				object = new SkinnedMesh( geometry, material );

				if ( data.bindMode !== undefined ) object.bindMode = data.bindMode;
				if ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );
				if ( data.skeleton !== undefined ) object.skeleton = data.skeleton;

				break;

			case 'Mesh':

				geometry = getGeometry( data.geometry );
				material = getMaterial( data.material );

				object = new Mesh( geometry, material );

				break;

			case 'InstancedMesh':

				geometry = getGeometry( data.geometry );
				material = getMaterial( data.material );
				const count = data.count;
				const instanceMatrix = data.instanceMatrix;
				const instanceColor = data.instanceColor;

				object = new InstancedMesh( geometry, material, count );
				object.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );
				if ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );

				break;

			case 'LOD':

				object = new LOD();

				break;

			case 'Line':

				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );

				break;

			case 'LineLoop':

				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

				break;

			case 'LineSegments':

				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

				break;

			case 'PointCloud':
			case 'Points':

				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

				break;

			case 'Sprite':

				object = new Sprite( getMaterial( data.material ) );

				break;

			case 'Group':

				object = new Group();

				break;

			case 'Bone':

				object = new Bone();

				break;

			default:

				object = new Object3D();

		}

		object.uuid = data.uuid;

		if ( data.name !== undefined ) object.name = data.name;

		if ( data.matrix !== undefined ) {

			object.matrix.fromArray( data.matrix );

			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );

		} else {

			if ( data.position !== undefined ) object.position.fromArray( data.position );
			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

		}

		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

		if ( data.shadow ) {

			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
			if ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;
			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

		}

		if ( data.visible !== undefined ) object.visible = data.visible;
		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
		if ( data.userData !== undefined ) object.userData = data.userData;
		if ( data.layers !== undefined ) object.layers.mask = data.layers;

		if ( data.children !== undefined ) {

			const children = data.children;

			for ( let i = 0; i < children.length; i ++ ) {

				object.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );

			}

		}

		if ( data.animations !== undefined ) {

			const objectAnimations = data.animations;

			for ( let i = 0; i < objectAnimations.length; i ++ ) {

				const uuid = objectAnimations[ i ];

				object.animations.push( animations[ uuid ] );

			}

		}

		if ( data.type === 'LOD' ) {

			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;

			const levels = data.levels;

			for ( let l = 0; l < levels.length; l ++ ) {

				const level = levels[ l ];
				const child = object.getObjectByProperty( 'uuid', level.object );

				if ( child !== undefined ) {

					object.addLevel( child, level.distance );

				}

			}

		}

		return object;

	}

	bindSkeletons( object, skeletons ) {

		if ( Object.keys( skeletons ).length === 0 ) return;

		object.traverse( function ( child ) {

			if ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {

				const skeleton = skeletons[ child.skeleton ];

				if ( skeleton === undefined ) {

					console.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );

				} else {

					child.bind( skeleton, child.bindMatrix );

				}

			}

		} );

	}

	/* DEPRECATED */

	setTexturePath( value ) {

		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
		return this.setResourcePath( value );

	}

}

const TEXTURE_MAPPING = {
	UVMapping: UVMapping,
	CubeReflectionMapping: CubeReflectionMapping,
	CubeRefractionMapping: CubeRefractionMapping,
	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	CubeUVReflectionMapping: CubeUVReflectionMapping,
	CubeUVRefractionMapping: CubeUVRefractionMapping
};

const TEXTURE_WRAPPING = {
	RepeatWrapping: RepeatWrapping,
	ClampToEdgeWrapping: ClampToEdgeWrapping,
	MirroredRepeatWrapping: MirroredRepeatWrapping
};

const TEXTURE_FILTER = {
	NearestFilter: NearestFilter,
	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
	LinearFilter: LinearFilter,
	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
	LinearMipmapLinearFilter: LinearMipmapLinearFilter
};

class ImageBitmapLoader extends Loader {

	constructor( manager ) {

		super( manager );

		if ( typeof createImageBitmap === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

		}

		if ( typeof fetch === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

		}

		this.options = { premultiplyAlpha: 'none' };

	}

	setOptions( options ) {

		this.options = options;

		return this;

	}

	load( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		const scope = this;

		const cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		const fetchOptions = {};
		fetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';
		fetchOptions.headers = this.requestHeader;

		fetch( url, fetchOptions ).then( function ( res ) {

			return res.blob();

		} ).then( function ( blob ) {

			return createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );

		} ).then( function ( imageBitmap ) {

			Cache.add( url, imageBitmap );

			if ( onLoad ) onLoad( imageBitmap );

			scope.manager.itemEnd( url );

		} ).catch( function ( e ) {

			if ( onError ) onError( e );

			scope.manager.itemError( url );
			scope.manager.itemEnd( url );

		} );

		scope.manager.itemStart( url );

	}

}

ImageBitmapLoader.prototype.isImageBitmapLoader = true;

let _context;

const AudioContext = {

	getContext: function () {

		if ( _context === undefined ) {

			_context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return _context;

	},

	setContext: function ( value ) {

		_context = value;

	}

};

class AudioLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.setPath( this.path );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( buffer ) {

			try {

				// Create a copy of the buffer. The `decodeAudioData` method
				// detaches the buffer when complete, preventing reuse.
				const bufferCopy = buffer.slice( 0 );

				const context = AudioContext.getContext();
				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			} catch ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );

			}

		}, onProgress, onError );

	}

}

class HemisphereLightProbe extends LightProbe {

	constructor( skyColor, groundColor, intensity = 1 ) {

		super( undefined, intensity );

		const color1 = new Color().set( skyColor );
		const color2 = new Color().set( groundColor );

		const sky = new Vector3( color1.r, color1.g, color1.b );
		const ground = new Vector3( color2.r, color2.g, color2.b );

		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
		const c0 = Math.sqrt( Math.PI );
		const c1 = c0 * Math.sqrt( 0.75 );

		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

	}

}

HemisphereLightProbe.prototype.isHemisphereLightProbe = true;

class AmbientLightProbe extends LightProbe {

	constructor( color, intensity = 1 ) {

		super( undefined, intensity );

		const color1 = new Color().set( color );

		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

	}

}

AmbientLightProbe.prototype.isAmbientLightProbe = true;

const _eyeRight = /*@__PURE__*/ new Matrix4();
const _eyeLeft = /*@__PURE__*/ new Matrix4();

class StereoCamera {

	constructor() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

		this._cache = {
			focus: null,
			fov: null,
			aspect: null,
			near: null,
			far: null,
			zoom: null,
			eyeSep: null
		};

	}

	update( camera ) {

		const cache = this._cache;

		const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

		if ( needsUpdate ) {

			cache.focus = camera.focus;
			cache.fov = camera.fov;
			cache.aspect = camera.aspect * this.aspect;
			cache.near = camera.near;
			cache.far = camera.far;
			cache.zoom = camera.zoom;
			cache.eyeSep = this.eyeSep;

			// Off-axis stereoscopic effect based on
			// http://paulbourke.net/stereographics/stereorender/

			const projectionMatrix = camera.projectionMatrix.clone();
			const eyeSepHalf = cache.eyeSep / 2;
			const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
			const ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
			let xmin, xmax;

			// translate xOffset

			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
			_eyeRight.elements[ 12 ] = eyeSepHalf;

			// for left eye

			xmin = - ymax * cache.aspect + eyeSepOnProjection;
			xmax = ymax * cache.aspect + eyeSepOnProjection;

			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

			this.cameraL.projectionMatrix.copy( projectionMatrix );

			// for right eye

			xmin = - ymax * cache.aspect - eyeSepOnProjection;
			xmax = ymax * cache.aspect - eyeSepOnProjection;

			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

			this.cameraR.projectionMatrix.copy( projectionMatrix );

		}

		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

	}

}

class Clock {

	constructor( autoStart = true ) {

		this.autoStart = autoStart;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	start() {

		this.startTime = now();

		this.oldTime = this.startTime;
		this.elapsedTime = 0;
		this.running = true;

	}

	stop() {

		this.getElapsedTime();
		this.running = false;
		this.autoStart = false;

	}

	getElapsedTime() {

		this.getDelta();
		return this.elapsedTime;

	}

	getDelta() {

		let diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();
			return 0;

		}

		if ( this.running ) {

			const newTime = now();

			diff = ( newTime - this.oldTime ) / 1000;
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

}

function now() {

	return ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

}

const _position$1 = /*@__PURE__*/ new Vector3();
const _quaternion$1 = /*@__PURE__*/ new Quaternion();
const _scale$1 = /*@__PURE__*/ new Vector3();
const _orientation$1 = /*@__PURE__*/ new Vector3();

class AudioListener extends Object3D {

	constructor() {

		super();

		this.type = 'AudioListener';

		this.context = AudioContext.getContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

		this.timeDelta = 0;

		// private

		this._clock = new Clock();

	}

	getInput() {

		return this.gain;

	}

	removeFilter() {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

		return this;

	}

	getFilter() {

		return this.filter;

	}

	setFilter( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

		return this;

	}

	getMasterVolume() {

		return this.gain.gain.value;

	}

	setMasterVolume( value ) {

		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

		return this;

	}

	updateMatrixWorld( force ) {

		super.updateMatrixWorld( force );

		const listener = this.context.listener;
		const up = this.up;

		this.timeDelta = this._clock.getDelta();

		this.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );

		_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );

		if ( listener.positionX ) {

			// code path for Chrome (see #14393)

			const endTime = this.context.currentTime + this.timeDelta;

			listener.positionX.linearRampToValueAtTime( _position$1.x, endTime );
			listener.positionY.linearRampToValueAtTime( _position$1.y, endTime );
			listener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );
			listener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );
			listener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );
			listener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );
			listener.upX.linearRampToValueAtTime( up.x, endTime );
			listener.upY.linearRampToValueAtTime( up.y, endTime );
			listener.upZ.linearRampToValueAtTime( up.z, endTime );

		} else {

			listener.setPosition( _position$1.x, _position$1.y, _position$1.z );
			listener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );

		}

	}

}

class Audio extends Object3D {

	constructor( listener ) {

		super();

		this.type = 'Audio';

		this.listener = listener;
		this.context = listener.context;

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.buffer = null;
		this.detune = 0;
		this.loop = false;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.offset = 0;
		this.duration = undefined;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.source = null;
		this.sourceType = 'empty';

		this._startedAt = 0;
		this._progress = 0;
		this._connected = false;

		this.filters = [];

	}

	getOutput() {

		return this.gain;

	}

	setNodeSource( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	}

	setMediaElementSource( mediaElement ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'mediaNode';
		this.source = this.context.createMediaElementSource( mediaElement );
		this.connect();

		return this;

	}

	setMediaStreamSource( mediaStream ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'mediaStreamNode';
		this.source = this.context.createMediaStreamSource( mediaStream );
		this.connect();

		return this;

	}

	setBuffer( audioBuffer ) {

		this.buffer = audioBuffer;
		this.sourceType = 'buffer';

		if ( this.autoplay ) this.play();

		return this;

	}

	play( delay = 0 ) {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this._startedAt = this.context.currentTime + delay;

		const source = this.context.createBufferSource();
		source.buffer = this.buffer;
		source.loop = this.loop;
		source.loopStart = this.loopStart;
		source.loopEnd = this.loopEnd;
		source.onended = this.onEnded.bind( this );
		source.start( this._startedAt, this._progress + this.offset, this.duration );

		this.isPlaying = true;

		this.source = source;

		this.setDetune( this.detune );
		this.setPlaybackRate( this.playbackRate );

		return this.connect();

	}

	pause() {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		if ( this.isPlaying === true ) {

			// update current progress

			this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;

			if ( this.loop === true ) {

				// ensure _progress does not exceed duration with looped audios

				this._progress = this._progress % ( this.duration || this.buffer.duration );

			}

			this.source.stop();
			this.source.onended = null;

			this.isPlaying = false;

		}

		return this;

	}

	stop() {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this._progress = 0;

		this.source.stop();
		this.source.onended = null;
		this.isPlaying = false;

		return this;

	}

	connect() {

		if ( this.filters.length > 0 ) {

			this.source.connect( this.filters[ 0 ] );

			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].connect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

		this._connected = true;

		return this;

	}

	disconnect() {

		if ( this.filters.length > 0 ) {

			this.source.disconnect( this.filters[ 0 ] );

			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

		this._connected = false;

		return this;

	}

	getFilters() {

		return this.filters;

	}

	setFilters( value ) {

		if ( ! value ) value = [];

		if ( this._connected === true ) {

			this.disconnect();
			this.filters = value.slice();
			this.connect();

		} else {

			this.filters = value.slice();

		}

		return this;

	}

	setDetune( value ) {

		this.detune = value;

		if ( this.source.detune === undefined ) return; // only set detune when available

		if ( this.isPlaying === true ) {

			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

		}

		return this;

	}

	getDetune() {

		return this.detune;

	}

	getFilter() {

		return this.getFilters()[ 0 ];

	}

	setFilter( filter ) {

		return this.setFilters( filter ? [ filter ] : [] );

	}

	setPlaybackRate( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

		}

		return this;

	}

	getPlaybackRate() {

		return this.playbackRate;

	}

	onEnded() {

		this.isPlaying = false;

	}

	getLoop() {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.loop;

	}

	setLoop( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.loop = value;

		if ( this.isPlaying === true ) {

			this.source.loop = this.loop;

		}

		return this;

	}

	setLoopStart( value ) {

		this.loopStart = value;

		return this;

	}

	setLoopEnd( value ) {

		this.loopEnd = value;

		return this;

	}

	getVolume() {

		return this.gain.gain.value;

	}

	setVolume( value ) {

		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

		return this;

	}

}

const _position = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new Quaternion();
const _scale = /*@__PURE__*/ new Vector3();
const _orientation = /*@__PURE__*/ new Vector3();

class PositionalAudio extends Audio {

	constructor( listener ) {

		super( listener );

		this.panner = this.context.createPanner();
		this.panner.panningModel = 'HRTF';
		this.panner.connect( this.gain );

	}

	getOutput() {

		return this.panner;

	}

	getRefDistance() {

		return this.panner.refDistance;

	}

	setRefDistance( value ) {

		this.panner.refDistance = value;

		return this;

	}

	getRolloffFactor() {

		return this.panner.rolloffFactor;

	}

	setRolloffFactor( value ) {

		this.panner.rolloffFactor = value;

		return this;

	}

	getDistanceModel() {

		return this.panner.distanceModel;

	}

	setDistanceModel( value ) {

		this.panner.distanceModel = value;

		return this;

	}

	getMaxDistance() {

		return this.panner.maxDistance;

	}

	setMaxDistance( value ) {

		this.panner.maxDistance = value;

		return this;

	}

	setDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

		this.panner.coneInnerAngle = coneInnerAngle;
		this.panner.coneOuterAngle = coneOuterAngle;
		this.panner.coneOuterGain = coneOuterGain;

		return this;

	}

	updateMatrixWorld( force ) {

		super.updateMatrixWorld( force );

		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;

		this.matrixWorld.decompose( _position, _quaternion, _scale );

		_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );

		const panner = this.panner;

		if ( panner.positionX ) {

			// code path for Chrome and Firefox (see #14393)

			const endTime = this.context.currentTime + this.listener.timeDelta;

			panner.positionX.linearRampToValueAtTime( _position.x, endTime );
			panner.positionY.linearRampToValueAtTime( _position.y, endTime );
			panner.positionZ.linearRampToValueAtTime( _position.z, endTime );
			panner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );
			panner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );
			panner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );

		} else {

			panner.setPosition( _position.x, _position.y, _position.z );
			panner.setOrientation( _orientation.x, _orientation.y, _orientation.z );

		}

	}

}

class AudioAnalyser {

	constructor( audio, fftSize = 2048 ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}


	getFrequencyData() {

		this.analyser.getByteFrequencyData( this.data );

		return this.data;

	}

	getAverageFrequency() {

		let value = 0;
		const data = this.getFrequencyData();

		for ( let i = 0; i < data.length; i ++ ) {

			value += data[ i ];

		}

		return value / data.length;

	}

}

class PropertyMixer {

	constructor( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		let mixFunction,
			mixFunctionAdditive,
			setIdentity;

		// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property
		//
		// 'add' is used for additive cumulative results
		//
		// 'work' is optional and is only present for quaternion types. It is used
		// to store intermediate quaternion multiplication results

		switch ( typeName ) {

			case 'quaternion':
				mixFunction = this._slerp;
				mixFunctionAdditive = this._slerpAdditive;
				setIdentity = this._setAdditiveIdentityQuaternion;

				this.buffer = new Float64Array( valueSize * 6 );
				this._workIndex = 5;
				break;

			case 'string':
			case 'bool':
				mixFunction = this._select;

				// Use the regular mix function and for additive on these types,
				// additive is not relevant for non-numeric types
				mixFunctionAdditive = this._select;

				setIdentity = this._setAdditiveIdentityOther;

				this.buffer = new Array( valueSize * 5 );
				break;

			default:
				mixFunction = this._lerp;
				mixFunctionAdditive = this._lerpAdditive;
				setIdentity = this._setAdditiveIdentityNumeric;

				this.buffer = new Float64Array( valueSize * 5 );

		}

		this._mixBufferRegion = mixFunction;
		this._mixBufferRegionAdditive = mixFunctionAdditive;
		this._setIdentity = setIdentity;
		this._origIndex = 3;
		this._addIndex = 4;

		this.cumulativeWeight = 0;
		this.cumulativeWeightAdditive = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	// accumulate data in the 'incoming' region into 'accu<i>'
	accumulate( accuIndex, weight ) {

		// note: happily accumulating nothing when weight = 0, the caller knows
		// the weight and shouldn't have made the call in the first place

		const buffer = this.buffer,
			stride = this.valueSize,
			offset = accuIndex * stride + stride;

		let currentWeight = this.cumulativeWeight;

		if ( currentWeight === 0 ) {

			// accuN := incoming * weight

			for ( let i = 0; i !== stride; ++ i ) {

				buffer[ offset + i ] = buffer[ i ];

			}

			currentWeight = weight;

		} else {

			// accuN := accuN + incoming * weight

			currentWeight += weight;
			const mix = weight / currentWeight;
			this._mixBufferRegion( buffer, offset, 0, mix, stride );

		}

		this.cumulativeWeight = currentWeight;

	}

	// accumulate data in the 'incoming' region into 'add'
	accumulateAdditive( weight ) {

		const buffer = this.buffer,
			stride = this.valueSize,
			offset = stride * this._addIndex;

		if ( this.cumulativeWeightAdditive === 0 ) {

			// add = identity

			this._setIdentity();

		}

		// add := add + incoming * weight

		this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );
		this.cumulativeWeightAdditive += weight;

	}

	// apply the state of 'accu<i>' to the binding when accus differ
	apply( accuIndex ) {

		const stride = this.valueSize,
			buffer = this.buffer,
			offset = accuIndex * stride + stride,

			weight = this.cumulativeWeight,
			weightAdditive = this.cumulativeWeightAdditive,

			binding = this.binding;

		this.cumulativeWeight = 0;
		this.cumulativeWeightAdditive = 0;

		if ( weight < 1 ) {

			// accuN := accuN + original * ( 1 - cumulativeWeight )

			const originalValueOffset = stride * this._origIndex;

			this._mixBufferRegion(
				buffer, offset, originalValueOffset, 1 - weight, stride );

		}

		if ( weightAdditive > 0 ) {

			// accuN := accuN + additive accuN

			this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );

		}

		for ( let i = stride, e = stride + stride; i !== e; ++ i ) {

			if ( buffer[ i ] !== buffer[ i + stride ] ) {

				// value has changed -> update scene graph

				binding.setValue( buffer, offset );
				break;

			}

		}

	}

	// remember the state of the bound property and copy it to both accus
	saveOriginalState() {

		const binding = this.binding;

		const buffer = this.buffer,
			stride = this.valueSize,

			originalValueOffset = stride * this._origIndex;

		binding.getValue( buffer, originalValueOffset );

		// accu[0..1] := orig -- initially detect changes against the original
		for ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {

			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

		}

		// Add to identity for additive
		this._setIdentity();

		this.cumulativeWeight = 0;
		this.cumulativeWeightAdditive = 0;

	}

	// apply the state previously taken via 'saveOriginalState' to the binding
	restoreOriginalState() {

		const originalValueOffset = this.valueSize * 3;
		this.binding.setValue( this.buffer, originalValueOffset );

	}

	_setAdditiveIdentityNumeric() {

		const startIndex = this._addIndex * this.valueSize;
		const endIndex = startIndex + this.valueSize;

		for ( let i = startIndex; i < endIndex; i ++ ) {

			this.buffer[ i ] = 0;

		}

	}

	_setAdditiveIdentityQuaternion() {

		this._setAdditiveIdentityNumeric();
		this.buffer[ this._addIndex * this.valueSize + 3 ] = 1;

	}

	_setAdditiveIdentityOther() {

		const startIndex = this._origIndex * this.valueSize;
		const targetIndex = this._addIndex * this.valueSize;

		for ( let i = 0; i < this.valueSize; i ++ ) {

			this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];

		}

	}


	// mix functions

	_select( buffer, dstOffset, srcOffset, t, stride ) {

		if ( t >= 0.5 ) {

			for ( let i = 0; i !== stride; ++ i ) {

				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

			}

		}

	}

	_slerp( buffer, dstOffset, srcOffset, t ) {

		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

	}

	_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {

		const workOffset = this._workIndex * stride;

		// Store result in intermediate buffer offset
		Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );

		// Slerp to the intermediate result
		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );

	}

	_lerp( buffer, dstOffset, srcOffset, t, stride ) {

		const s = 1 - t;

		for ( let i = 0; i !== stride; ++ i ) {

			const j = dstOffset + i;

			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

		}

	}

	_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {

		for ( let i = 0; i !== stride; ++ i ) {

			const j = dstOffset + i;

			buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;

		}

	}

}

// Characters [].:/ are reserved for track binding syntax.
const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
const _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

const _trackRe = new RegExp( ''
	+ '^'
	+ _directoryRe
	+ _nodeRe
	+ _objectRe
	+ _propertyRe
	+ '$'
);

const _supportedObjectNames = [ 'material', 'materials', 'bones' ];

class Composite {

	constructor( targetGroup, path, optionalParsedPath ) {

		const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	}

	getValue( array, offset ) {

		this.bind(); // bind all binding

		const firstValidIndex = this._targetGroup.nCachedObjects_,
			binding = this._bindings[ firstValidIndex ];

		// and only call .getValue on the first
		if ( binding !== undefined ) binding.getValue( array, offset );

	}

	setValue( array, offset ) {

		const bindings = this._bindings;

		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].setValue( array, offset );

		}

	}

	bind() {

		const bindings = this._bindings;

		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].bind();

		}

	}

	unbind() {

		const bindings = this._bindings;

		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].unbind();

		}

	}

}

// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class PropertyBinding {

	constructor( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

		// initial state of these methods that calls 'bind'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}


	static create( root, path, parsedPath ) {

		if ( ! ( root && root.isAnimationObjectGroup ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	}

	/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */
	static sanitizeNodeName( name ) {

		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

	}

	static parseTrackName( trackName ) {

		const matches = _trackRe.exec( trackName );

		if ( ! matches ) {

			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

		}

		const results = {
			// directoryName: matches[ 1 ], // (tschw) currently unused
			nodeName: matches[ 2 ],
			objectName: matches[ 3 ],
			objectIndex: matches[ 4 ],
			propertyName: matches[ 5 ], // required
			propertyIndex: matches[ 6 ]
		};

		const lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

		if ( lastDot !== undefined && lastDot !== - 1 ) {

			const objectName = results.nodeName.substring( lastDot + 1 );

			// Object names must be checked against an allowlist. Otherwise, there
			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
			// 'bar' could be the objectName, or part of a nodeName (which can
			// include '.' characters).
			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

				results.nodeName = results.nodeName.substring( 0, lastDot );
				results.objectName = objectName;

			}

		}

		if ( results.propertyName === null || results.propertyName.length === 0 ) {

			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

		}

		return results;

	}

	static findNode( root, nodeName ) {

		if ( ! nodeName || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			const bone = root.skeleton.getBoneByName( nodeName );

			if ( bone !== undefined ) {

				return bone;

			}

		}

		// search into node subtree.
		if ( root.children ) {

			const searchNodeSubtree = function ( children ) {

				for ( let i = 0; i < children.length; i ++ ) {

					const childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					const result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			const subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

	// these are used to "bind" a nonexistent property
	_getValue_unavailable() {}
	_setValue_unavailable() {}

	// Getters

	_getValue_direct( buffer, offset ) {

		buffer[ offset ] = this.targetObject[ this.propertyName ];

	}

	_getValue_array( buffer, offset ) {

		const source = this.resolvedProperty;

		for ( let i = 0, n = source.length; i !== n; ++ i ) {

			buffer[ offset ++ ] = source[ i ];

		}

	}

	_getValue_arrayElement( buffer, offset ) {

		buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

	}

	_getValue_toArray( buffer, offset ) {

		this.resolvedProperty.toArray( buffer, offset );

	}

	// Direct

	_setValue_direct( buffer, offset ) {

		this.targetObject[ this.propertyName ] = buffer[ offset ];

	}

	_setValue_direct_setNeedsUpdate( buffer, offset ) {

		this.targetObject[ this.propertyName ] = buffer[ offset ];
		this.targetObject.needsUpdate = true;

	}

	_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

		this.targetObject[ this.propertyName ] = buffer[ offset ];
		this.targetObject.matrixWorldNeedsUpdate = true;

	}

	// EntireArray

	_setValue_array( buffer, offset ) {

		const dest = this.resolvedProperty;

		for ( let i = 0, n = dest.length; i !== n; ++ i ) {

			dest[ i ] = buffer[ offset ++ ];

		}

	}

	_setValue_array_setNeedsUpdate( buffer, offset ) {

		const dest = this.resolvedProperty;

		for ( let i = 0, n = dest.length; i !== n; ++ i ) {

			dest[ i ] = buffer[ offset ++ ];

		}

		this.targetObject.needsUpdate = true;

	}

	_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

		const dest = this.resolvedProperty;

		for ( let i = 0, n = dest.length; i !== n; ++ i ) {

			dest[ i ] = buffer[ offset ++ ];

		}

		this.targetObject.matrixWorldNeedsUpdate = true;

	}

	// ArrayElement

	_setValue_arrayElement( buffer, offset ) {

		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

	}

	_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
		this.targetObject.needsUpdate = true;

	}

	_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
		this.targetObject.matrixWorldNeedsUpdate = true;

	}

	// HasToFromArray

	_setValue_fromArray( buffer, offset ) {

		this.resolvedProperty.fromArray( buffer, offset );

	}

	_setValue_fromArray_setNeedsUpdate( buffer, offset ) {

		this.resolvedProperty.fromArray( buffer, offset );
		this.targetObject.needsUpdate = true;

	}

	_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

		this.resolvedProperty.fromArray( buffer, offset );
		this.targetObject.matrixWorldNeedsUpdate = true;

	}

	_getValue_unbound( targetArray, offset ) {

		this.bind();
		this.getValue( targetArray, offset );

	}

	_setValue_unbound( sourceArray, offset ) {

		this.bind();
		this.setValue( sourceArray, offset );

	}

	// create getter / setter pair for a property in the scene graph
	bind() {

		let targetObject = this.node;
		const parsedPath = this.parsedPath;

		const objectName = parsedPath.objectName;
		const propertyName = parsedPath.propertyName;
		let propertyIndex = parsedPath.propertyIndex;

		if ( ! targetObject ) {

			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

			this.node = targetObject;

		}

		// set fail state so we can just 'return' on error
		this.getValue = this._getValue_unavailable;
		this.setValue = this._setValue_unavailable;

		// ensure there is a value node
		if ( ! targetObject ) {

			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
			return;

		}

		if ( objectName ) {

			let objectIndex = parsedPath.objectIndex;

			// special cases were we need to reach deeper into the hierarchy to get the face materials....
			switch ( objectName ) {

				case 'materials':

					if ( ! targetObject.material ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
						return;

					}

					if ( ! targetObject.material.materials ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
						return;

					}

					targetObject = targetObject.material.materials;

					break;

				case 'bones':

					if ( ! targetObject.skeleton ) {

						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
						return;

					}

					// potential future optimization: skip this if propertyIndex is already an integer
					// and convert the integer string to a true integer.

					targetObject = targetObject.skeleton.bones;

					// support resolving morphTarget names into indices.
					for ( let i = 0; i < targetObject.length; i ++ ) {

						if ( targetObject[ i ].name === objectIndex ) {

							objectIndex = i;
							break;

						}

					}

					break;

				default:

					if ( targetObject[ objectName ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
						return;

					}

					targetObject = targetObject[ objectName ];

			}


			if ( objectIndex !== undefined ) {

				if ( targetObject[ objectIndex ] === undefined ) {

					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
					return;

				}

				targetObject = targetObject[ objectIndex ];

			}

		}

		// resolve property
		const nodeProperty = targetObject[ propertyName ];

		if ( nodeProperty === undefined ) {

			const nodeName = parsedPath.nodeName;

			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
				'.' + propertyName + ' but it wasn\'t found.', targetObject );
			return;

		}

		// determine versioning scheme
		let versioning = this.Versioning.None;

		this.targetObject = targetObject;

		if ( targetObject.needsUpdate !== undefined ) { // material

			versioning = this.Versioning.NeedsUpdate;

		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

			versioning = this.Versioning.MatrixWorldNeedsUpdate;

		}

		// determine how the property gets bound
		let bindingType = this.BindingType.Direct;

		if ( propertyIndex !== undefined ) {

			// access a sub element of the property array (only primitives are supported right now)

			if ( propertyName === 'morphTargetInfluences' ) {

				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

				// support resolving morphTarget names into indices.
				if ( ! targetObject.geometry ) {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
					return;

				}

				if ( targetObject.geometry.isBufferGeometry ) {

					if ( ! targetObject.geometry.morphAttributes ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
						return;

					}

					if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {

						propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];

					}


				} else {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );
					return;

				}

			}

			bindingType = this.BindingType.ArrayElement;

			this.resolvedProperty = nodeProperty;
			this.propertyIndex = propertyIndex;

		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

			// must use copy for Object3D.Euler/Quaternion

			bindingType = this.BindingType.HasFromToArray;

			this.resolvedProperty = nodeProperty;

		} else if ( Array.isArray( nodeProperty ) ) {

			bindingType = this.BindingType.EntireArray;

			this.resolvedProperty = nodeProperty;

		} else {

			this.propertyName = propertyName;

		}

		// select getter / setter
		this.getValue = this.GetterByBindingType[ bindingType ];
		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	}

	unbind() {

		this.node = null;

		// back to the prototype version of getValue / setValue
		// note: avoiding to mutate the shape of 'this' via 'delete'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}

}

PropertyBinding.Composite = Composite;

PropertyBinding.prototype.BindingType = {
	Direct: 0,
	EntireArray: 1,
	ArrayElement: 2,
	HasFromToArray: 3
};

PropertyBinding.prototype.Versioning = {
	None: 0,
	NeedsUpdate: 1,
	MatrixWorldNeedsUpdate: 2
};

PropertyBinding.prototype.GetterByBindingType = [

	PropertyBinding.prototype._getValue_direct,
	PropertyBinding.prototype._getValue_array,
	PropertyBinding.prototype._getValue_arrayElement,
	PropertyBinding.prototype._getValue_toArray,

];

PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [

	[
		// Direct
		PropertyBinding.prototype._setValue_direct,
		PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
		PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,

	], [

		// EntireArray

		PropertyBinding.prototype._setValue_array,
		PropertyBinding.prototype._setValue_array_setNeedsUpdate,
		PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,

	], [

		// ArrayElement
		PropertyBinding.prototype._setValue_arrayElement,
		PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
		PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,

	], [

		// HasToFromArray
		PropertyBinding.prototype._setValue_fromArray,
		PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
		PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,

	]

];

/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */

class AnimationObjectGroup {

	constructor() {

		this.uuid = generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0; // threshold
		// note: read by PropertyBinding.Composite

		const indices = {};
		this._indicesByUUID = indices; // for bookkeeping

		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = []; // inside: string
		this._parsedPaths = []; // inside: { we don't care, here }
		this._bindings = []; // inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; // inside: indices in these arrays

		const scope = this;

		this.stats = {

			objects: {
				get total() {

					return scope._objects.length;

				},
				get inUse() {

					return this.total - scope.nCachedObjects_;

				}
			},
			get bindingsPerObject() {

				return scope._bindings.length;

			}

		};

	}

	add() {

		const objects = this._objects,
			indicesByUUID = this._indicesByUUID,
			paths = this._paths,
			parsedPaths = this._parsedPaths,
			bindings = this._bindings,
			nBindings = bindings.length;

		let knownObject = undefined,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_;

		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

			const object = arguments[ i ],
				uuid = object.uuid;
			let index = indicesByUUID[ uuid ];

			if ( index === undefined ) {

				// unknown object -> add it to the ACTIVE region

				index = nObjects ++;
				indicesByUUID[ uuid ] = index;
				objects.push( object );

				// accounting is done, now do the same for all bindings

				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

				}

			} else if ( index < nCachedObjects ) {

				knownObject = objects[ index ];

				// move existing object to the ACTIVE region

				const firstActiveIndex = -- nCachedObjects,
					lastCachedObject = objects[ firstActiveIndex ];

				indicesByUUID[ lastCachedObject.uuid ] = index;
				objects[ index ] = lastCachedObject;

				indicesByUUID[ uuid ] = firstActiveIndex;
				objects[ firstActiveIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

					const bindingsForPath = bindings[ j ],
						lastCached = bindingsForPath[ firstActiveIndex ];

					let binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = lastCached;

					if ( binding === undefined ) {

						// since we do not bother to create new bindings
						// for objects that are cached, the binding may
						// or may not exist

						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

					}

					bindingsForPath[ firstActiveIndex ] = binding;

				}

			} else if ( objects[ index ] !== knownObject ) {

				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

			} // else the object is already where we want it to be

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	}

	remove() {

		const objects = this._objects,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		let nCachedObjects = this.nCachedObjects_;

		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

			const object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined && index >= nCachedObjects ) {

				// move existing object into the CACHED region

				const lastCachedIndex = nCachedObjects ++,
					firstActiveObject = objects[ lastCachedIndex ];

				indicesByUUID[ firstActiveObject.uuid ] = index;
				objects[ index ] = firstActiveObject;

				indicesByUUID[ uuid ] = lastCachedIndex;
				objects[ lastCachedIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( let j = 0, m = nBindings; j !== m; ++ j ) {

					const bindingsForPath = bindings[ j ],
						firstActive = bindingsForPath[ lastCachedIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = firstActive;
					bindingsForPath[ lastCachedIndex ] = binding;

				}

			}

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	}

	// remove & forget
	uncache() {

		const objects = this._objects,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		let nCachedObjects = this.nCachedObjects_,
			nObjects = objects.length;

		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {

			const object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined ) {

				delete indicesByUUID[ uuid ];

				if ( index < nCachedObjects ) {

					// object is cached, shrink the CACHED region

					const firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ],
						lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					// last cached object takes this object's place
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					// last object goes to the activated slot and pop
					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( let j = 0, m = nBindings; j !== m; ++ j ) {

						const bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							last = bindingsForPath[ lastIndex ];

						bindingsForPath[ index ] = lastCached;
						bindingsForPath[ firstActiveIndex ] = last;
						bindingsForPath.pop();

					}

				} else {

					// object is active, just swap with the last and pop

					const lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					if ( lastIndex > 0 ) {

						indicesByUUID[ lastObject.uuid ] = index;

					}

					objects[ index ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( let j = 0, m = nBindings; j !== m; ++ j ) {

						const bindingsForPath = bindings[ j ];

						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
						bindingsForPath.pop();

					}

				} // cached or active

			} // if object is known

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	}

	// Internal interface used by befriended PropertyBinding.Composite:

	subscribe_( path, parsedPath ) {

		// returns an array of bindings for the given path that is changed
		// according to the contained objects in the group

		const indicesByPath = this._bindingsIndicesByPath;
		let index = indicesByPath[ path ];
		const bindings = this._bindings;

		if ( index !== undefined ) return bindings[ index ];

		const paths = this._paths,
			parsedPaths = this._parsedPaths,
			objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			bindingsForPath = new Array( nObjects );

		index = bindings.length;

		indicesByPath[ path ] = index;

		paths.push( path );
		parsedPaths.push( parsedPath );
		bindings.push( bindingsForPath );

		for ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

			const object = objects[ i ];
			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

		}

		return bindingsForPath;

	}

	unsubscribe_( path ) {

		// tells the group to forget about a property path and no longer
		// update the array previously obtained with 'subscribe_'

		const indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ];

		if ( index !== undefined ) {

			const paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				lastBindingsIndex = bindings.length - 1,
				lastBindings = bindings[ lastBindingsIndex ],
				lastBindingsPath = path[ lastBindingsIndex ];

			indicesByPath[ lastBindingsPath ] = index;

			bindings[ index ] = lastBindings;
			bindings.pop();

			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
			parsedPaths.pop();

			paths[ index ] = paths[ lastBindingsIndex ];
			paths.pop();

		}

	}

}

AnimationObjectGroup.prototype.isAnimationObjectGroup = true;

class AnimationAction {

	constructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot;
		this.blendMode = blendMode;

		const tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		const interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};

		for ( let i = 0; i !== nTracks; ++ i ) {

			const interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants; // bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null; // for the memory manager
		this._byClipCacheIndex = null; // for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = - 1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; // no. of repetitions when looping

		this.paused = false; // true -> zero effective time scale
		this.enabled = true; // false -> zero effective weight

		this.clampWhenFinished = false;// keep feeding the last frame?

		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd = true;// clips for start, loop and end

	}

	// State & Scheduling

	play() {

		this._mixer._activateAction( this );

		return this;

	}

	stop() {

		this._mixer._deactivateAction( this );

		return this.reset();

	}

	reset() {

		this.paused = false;
		this.enabled = true;

		this.time = 0; // restart clip
		this._loopCount = - 1;// forget previous loops
		this._startTime = null;// forget scheduling

		return this.stopFading().stopWarping();

	}

	isRunning() {

		return this.enabled && ! this.paused && this.timeScale !== 0 &&
			this._startTime === null && this._mixer._isActiveAction( this );

	}

	// return true when play has been called
	isScheduled() {

		return this._mixer._isActiveAction( this );

	}

	startAt( time ) {

		this._startTime = time;

		return this;

	}

	setLoop( mode, repetitions ) {

		this.loop = mode;
		this.repetitions = repetitions;

		return this;

	}

	// Weight

	// set the weight stopping any scheduled fading
	// although .enabled = false yields an effective weight of zero, this
	// method does *not* change .enabled, because it would be confusing
	setEffectiveWeight( weight ) {

		this.weight = weight;

		// note: same logic as when updated at runtime
		this._effectiveWeight = this.enabled ? weight : 0;

		return this.stopFading();

	}

	// return the weight considering fading and .enabled
	getEffectiveWeight() {

		return this._effectiveWeight;

	}

	fadeIn( duration ) {

		return this._scheduleFading( duration, 0, 1 );

	}

	fadeOut( duration ) {

		return this._scheduleFading( duration, 1, 0 );

	}

	crossFadeFrom( fadeOutAction, duration, warp ) {

		fadeOutAction.fadeOut( duration );
		this.fadeIn( duration );

		if ( warp ) {

			const fadeInDuration = this._clip.duration,
				fadeOutDuration = fadeOutAction._clip.duration,

				startEndRatio = fadeOutDuration / fadeInDuration,
				endStartRatio = fadeInDuration / fadeOutDuration;

			fadeOutAction.warp( 1.0, startEndRatio, duration );
			this.warp( endStartRatio, 1.0, duration );

		}

		return this;

	}

	crossFadeTo( fadeInAction, duration, warp ) {

		return fadeInAction.crossFadeFrom( this, duration, warp );

	}

	stopFading() {

		const weightInterpolant = this._weightInterpolant;

		if ( weightInterpolant !== null ) {

			this._weightInterpolant = null;
			this._mixer._takeBackControlInterpolant( weightInterpolant );

		}

		return this;

	}

	// Time Scale Control

	// set the time scale stopping any scheduled warping
	// although .paused = true yields an effective time scale of zero, this
	// method does *not* change .paused, because it would be confusing
	setEffectiveTimeScale( timeScale ) {

		this.timeScale = timeScale;
		this._effectiveTimeScale = this.paused ? 0 : timeScale;

		return this.stopWarping();

	}

	// return the time scale considering warping and .paused
	getEffectiveTimeScale() {

		return this._effectiveTimeScale;

	}

	setDuration( duration ) {

		this.timeScale = this._clip.duration / duration;

		return this.stopWarping();

	}

	syncWith( action ) {

		this.time = action.time;
		this.timeScale = action.timeScale;

		return this.stopWarping();

	}

	halt( duration ) {

		return this.warp( this._effectiveTimeScale, 0, duration );

	}

	warp( startTimeScale, endTimeScale, duration ) {

		const mixer = this._mixer,
			now = mixer.time,
			timeScale = this.timeScale;

		let interpolant = this._timeScaleInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._timeScaleInterpolant = interpolant;

		}

		const times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		times[ 1 ] = now + duration;

		values[ 0 ] = startTimeScale / timeScale;
		values[ 1 ] = endTimeScale / timeScale;

		return this;

	}

	stopWarping() {

		const timeScaleInterpolant = this._timeScaleInterpolant;

		if ( timeScaleInterpolant !== null ) {

			this._timeScaleInterpolant = null;
			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

		}

		return this;

	}

	// Object Accessors

	getMixer() {

		return this._mixer;

	}

	getClip() {

		return this._clip;

	}

	getRoot() {

		return this._localRoot || this._mixer._root;

	}

	// Interna

	_update( time, deltaTime, timeDirection, accuIndex ) {

		// called by the mixer

		if ( ! this.enabled ) {

			// call ._updateWeight() to update ._effectiveWeight

			this._updateWeight( time );
			return;

		}

		const startTime = this._startTime;

		if ( startTime !== null ) {

			// check for scheduled start of action

			const timeRunning = ( time - startTime ) * timeDirection;
			if ( timeRunning < 0 || timeDirection === 0 ) {

				return; // yet to come / don't decide when delta = 0

			}

			// start

			this._startTime = null; // unschedule
			deltaTime = timeDirection * timeRunning;

		}

		// apply time scale and advance time

		deltaTime *= this._updateTimeScale( time );
		const clipTime = this._updateTime( deltaTime );

		// note: _updateTime may disable the action resulting in
		// an effective weight of 0

		const weight = this._updateWeight( time );

		if ( weight > 0 ) {

			const interpolants = this._interpolants;
			const propertyMixers = this._propertyBindings;

			switch ( this.blendMode ) {

				case AdditiveAnimationBlendMode:

					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {

						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulateAdditive( weight );

					}

					break;

				case NormalAnimationBlendMode:
				default:

					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {

						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );

					}

			}

		}

	}

	_updateWeight( time ) {

		let weight = 0;

		if ( this.enabled ) {

			weight = this.weight;
			const interpolant = this._weightInterpolant;

			if ( interpolant !== null ) {

				const interpolantValue = interpolant.evaluate( time )[ 0 ];

				weight *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopFading();

					if ( interpolantValue === 0 ) {

						// faded out, disable
						this.enabled = false;

					}

				}

			}

		}

		this._effectiveWeight = weight;
		return weight;

	}

	_updateTimeScale( time ) {

		let timeScale = 0;

		if ( ! this.paused ) {

			timeScale = this.timeScale;

			const interpolant = this._timeScaleInterpolant;

			if ( interpolant !== null ) {

				const interpolantValue = interpolant.evaluate( time )[ 0 ];

				timeScale *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopWarping();

					if ( timeScale === 0 ) {

						// motion has halted, pause
						this.paused = true;

					} else {

						// warp done - apply final time scale
						this.timeScale = timeScale;

					}

				}

			}

		}

		this._effectiveTimeScale = timeScale;
		return timeScale;

	}

	_updateTime( deltaTime ) {

		const duration = this._clip.duration;
		const loop = this.loop;

		let time = this.time + deltaTime;
		let loopCount = this._loopCount;

		const pingPong = ( loop === LoopPingPong );

		if ( deltaTime === 0 ) {

			if ( loopCount === - 1 ) return time;

			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

		}

		if ( loop === LoopOnce ) {

			if ( loopCount === - 1 ) {

				// just started

				this._loopCount = 0;
				this._setEndings( true, true, false );

			}

			handle_stop: {

				if ( time >= duration ) {

					time = duration;

				} else if ( time < 0 ) {

					time = 0;

				} else {

					this.time = time;

					break handle_stop;

				}

				if ( this.clampWhenFinished ) this.paused = true;
				else this.enabled = false;

				this.time = time;

				this._mixer.dispatchEvent( {
					type: 'finished', action: this,
					direction: deltaTime < 0 ? - 1 : 1
				} );

			}

		} else { // repetitive Repeat or PingPong

			if ( loopCount === - 1 ) {

				// just started

				if ( deltaTime >= 0 ) {

					loopCount = 0;

					this._setEndings( true, this.repetitions === 0, pingPong );

				} else {

					// when looping in reverse direction, the initial
					// transition through zero counts as a repetition,
					// so leave loopCount at -1

					this._setEndings( this.repetitions === 0, true, pingPong );

				}

			}

			if ( time >= duration || time < 0 ) {

				// wrap around

				const loopDelta = Math.floor( time / duration ); // signed
				time -= duration * loopDelta;

				loopCount += Math.abs( loopDelta );

				const pending = this.repetitions - loopCount;

				if ( pending <= 0 ) {

					// have to stop (switch state, clamp time, fire event)

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					time = deltaTime > 0 ? duration : 0;

					this.time = time;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime > 0 ? 1 : - 1
					} );

				} else {

					// keep running

					if ( pending === 1 ) {

						// entering the last round

						const atStart = deltaTime < 0;
						this._setEndings( atStart, ! atStart, pingPong );

					} else {

						this._setEndings( false, false, pingPong );

					}

					this._loopCount = loopCount;

					this.time = time;

					this._mixer.dispatchEvent( {
						type: 'loop', action: this, loopDelta: loopDelta
					} );

				}

			} else {

				this.time = time;

			}

			if ( pingPong && ( loopCount & 1 ) === 1 ) {

				// invert time for the "pong round"

				return duration - time;

			}

		}

		return time;

	}

	_setEndings( atStart, atEnd, pingPong ) {

		const settings = this._interpolantSettings;

		if ( pingPong ) {

			settings.endingStart = ZeroSlopeEnding;
			settings.endingEnd = ZeroSlopeEnding;

		} else {

			// assuming for LoopOnce atStart == atEnd == true

			if ( atStart ) {

				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingStart = WrapAroundEnding;

			}

			if ( atEnd ) {

				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingEnd 	 = WrapAroundEnding;

			}

		}

	}

	_scheduleFading( duration, weightNow, weightThen ) {

		const mixer = this._mixer, now = mixer.time;
		let interpolant = this._weightInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._weightInterpolant = interpolant;

		}

		const times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		values[ 0 ] = weightNow;
		times[ 1 ] = now + duration;
		values[ 1 ] = weightThen;

		return this;

	}

}

class AnimationMixer extends EventDispatcher {

	constructor( root ) {

		super();

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;
		this.time = 0;
		this.timeScale = 1.0;

	}

	_bindAction( action, prototypeAction ) {

		const root = action._localRoot || this._root,
			tracks = action._clip.tracks,
			nTracks = tracks.length,
			bindings = action._propertyBindings,
			interpolants = action._interpolants,
			rootUuid = root.uuid,
			bindingsByRoot = this._bindingsByRootAndName;

		let bindingsByName = bindingsByRoot[ rootUuid ];

		if ( bindingsByName === undefined ) {

			bindingsByName = {};
			bindingsByRoot[ rootUuid ] = bindingsByName;

		}

		for ( let i = 0; i !== nTracks; ++ i ) {

			const track = tracks[ i ],
				trackName = track.name;

			let binding = bindingsByName[ trackName ];

			if ( binding !== undefined ) {

				bindings[ i ] = binding;

			} else {

				binding = bindings[ i ];

				if ( binding !== undefined ) {

					// existing binding, make sure the cache knows

					if ( binding._cacheIndex === null ) {

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

					}

					continue;

				}

				const path = prototypeAction && prototypeAction.
					_propertyBindings[ i ].binding.parsedPath;

				binding = new PropertyMixer(
					PropertyBinding.create( root, trackName, path ),
					track.ValueTypeName, track.getValueSize() );

				++ binding.referenceCount;
				this._addInactiveBinding( binding, rootUuid, trackName );

				bindings[ i ] = binding;

			}

			interpolants[ i ].resultBuffer = binding.buffer;

		}

	}

	_activateAction( action ) {

		if ( ! this._isActiveAction( action ) ) {

			if ( action._cacheIndex === null ) {

				// this action has been forgotten by the cache, but the user
				// appears to be still using it -> rebind

				const rootUuid = ( action._localRoot || this._root ).uuid,
					clipUuid = action._clip.uuid,
					actionsForClip = this._actionsByClip[ clipUuid ];

				this._bindAction( action,
					actionsForClip && actionsForClip.knownActions[ 0 ] );

				this._addInactiveAction( action, clipUuid, rootUuid );

			}

			const bindings = action._propertyBindings;

			// increment reference counts / sort out state
			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

				const binding = bindings[ i ];

				if ( binding.useCount ++ === 0 ) {

					this._lendBinding( binding );
					binding.saveOriginalState();

				}

			}

			this._lendAction( action );

		}

	}

	_deactivateAction( action ) {

		if ( this._isActiveAction( action ) ) {

			const bindings = action._propertyBindings;

			// decrement reference counts / sort out state
			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

				const binding = bindings[ i ];

				if ( -- binding.useCount === 0 ) {

					binding.restoreOriginalState();
					this._takeBackBinding( binding );

				}

			}

			this._takeBackAction( action );

		}

	}

	// Memory manager

	_initMemoryManager() {

		this._actions = []; // 'nActiveActions' followed by inactive ones
		this._nActiveActions = 0;

		this._actionsByClip = {};
		// inside:
		// {
		// 	knownActions: Array< AnimationAction > - used as prototypes
		// 	actionByRoot: AnimationAction - lookup
		// }


		this._bindings = []; // 'nActiveBindings' followed by inactive ones
		this._nActiveBindings = 0;

		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


		this._controlInterpolants = []; // same game as above
		this._nActiveControlInterpolants = 0;

		const scope = this;

		this.stats = {

			actions: {
				get total() {

					return scope._actions.length;

				},
				get inUse() {

					return scope._nActiveActions;

				}
			},
			bindings: {
				get total() {

					return scope._bindings.length;

				},
				get inUse() {

					return scope._nActiveBindings;

				}
			},
			controlInterpolants: {
				get total() {

					return scope._controlInterpolants.length;

				},
				get inUse() {

					return scope._nActiveControlInterpolants;

				}
			}

		};

	}

	// Memory management for AnimationAction objects

	_isActiveAction( action ) {

		const index = action._cacheIndex;
		return index !== null && index < this._nActiveActions;

	}

	_addInactiveAction( action, clipUuid, rootUuid ) {

		const actions = this._actions,
			actionsByClip = this._actionsByClip;

		let actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip === undefined ) {

			actionsForClip = {

				knownActions: [ action ],
				actionByRoot: {}

			};

			action._byClipCacheIndex = 0;

			actionsByClip[ clipUuid ] = actionsForClip;

		} else {

			const knownActions = actionsForClip.knownActions;

			action._byClipCacheIndex = knownActions.length;
			knownActions.push( action );

		}

		action._cacheIndex = actions.length;
		actions.push( action );

		actionsForClip.actionByRoot[ rootUuid ] = action;

	}

	_removeInactiveAction( action ) {

		const actions = this._actions,
			lastInactiveAction = actions[ actions.length - 1 ],
			cacheIndex = action._cacheIndex;

		lastInactiveAction._cacheIndex = cacheIndex;
		actions[ cacheIndex ] = lastInactiveAction;
		actions.pop();

		action._cacheIndex = null;


		const clipUuid = action._clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ],
			knownActionsForClip = actionsForClip.knownActions,

			lastKnownAction =
				knownActionsForClip[ knownActionsForClip.length - 1 ],

			byClipCacheIndex = action._byClipCacheIndex;

		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
		knownActionsForClip.pop();

		action._byClipCacheIndex = null;


		const actionByRoot = actionsForClip.actionByRoot,
			rootUuid = ( action._localRoot || this._root ).uuid;

		delete actionByRoot[ rootUuid ];

		if ( knownActionsForClip.length === 0 ) {

			delete actionsByClip[ clipUuid ];

		}

		this._removeInactiveBindingsForAction( action );

	}

	_removeInactiveBindingsForAction( action ) {

		const bindings = action._propertyBindings;

		for ( let i = 0, n = bindings.length; i !== n; ++ i ) {

			const binding = bindings[ i ];

			if ( -- binding.referenceCount === 0 ) {

				this._removeInactiveBinding( binding );

			}

		}

	}

	_lendAction( action ) {

		// [ active actions |  inactive actions  ]
		// [  active actions >| inactive actions ]
		//                 s        a
		//                  <-swap->
		//                 a        s

		const actions = this._actions,
			prevIndex = action._cacheIndex,

			lastActiveIndex = this._nActiveActions ++,

			firstInactiveAction = actions[ lastActiveIndex ];

		action._cacheIndex = lastActiveIndex;
		actions[ lastActiveIndex ] = action;

		firstInactiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = firstInactiveAction;

	}

	_takeBackAction( action ) {

		// [  active actions  | inactive actions ]
		// [ active actions |< inactive actions  ]
		//        a        s
		//         <-swap->
		//        s        a

		const actions = this._actions,
			prevIndex = action._cacheIndex,

			firstInactiveIndex = -- this._nActiveActions,

			lastActiveAction = actions[ firstInactiveIndex ];

		action._cacheIndex = firstInactiveIndex;
		actions[ firstInactiveIndex ] = action;

		lastActiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = lastActiveAction;

	}

	// Memory management for PropertyMixer objects

	_addInactiveBinding( binding, rootUuid, trackName ) {

		const bindingsByRoot = this._bindingsByRootAndName,
			bindings = this._bindings;

		let bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName === undefined ) {

			bindingByName = {};
			bindingsByRoot[ rootUuid ] = bindingByName;

		}

		bindingByName[ trackName ] = binding;

		binding._cacheIndex = bindings.length;
		bindings.push( binding );

	}

	_removeInactiveBinding( binding ) {

		const bindings = this._bindings,
			propBinding = binding.binding,
			rootUuid = propBinding.rootNode.uuid,
			trackName = propBinding.path,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			lastInactiveBinding = bindings[ bindings.length - 1 ],
			cacheIndex = binding._cacheIndex;

		lastInactiveBinding._cacheIndex = cacheIndex;
		bindings[ cacheIndex ] = lastInactiveBinding;
		bindings.pop();

		delete bindingByName[ trackName ];

		if ( Object.keys( bindingByName ).length === 0 ) {

			delete bindingsByRoot[ rootUuid ];

		}

	}

	_lendBinding( binding ) {

		const bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			lastActiveIndex = this._nActiveBindings ++,

			firstInactiveBinding = bindings[ lastActiveIndex ];

		binding._cacheIndex = lastActiveIndex;
		bindings[ lastActiveIndex ] = binding;

		firstInactiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = firstInactiveBinding;

	}

	_takeBackBinding( binding ) {

		const bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			firstInactiveIndex = -- this._nActiveBindings,

			lastActiveBinding = bindings[ firstInactiveIndex ];

		binding._cacheIndex = firstInactiveIndex;
		bindings[ firstInactiveIndex ] = binding;

		lastActiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = lastActiveBinding;

	}


	// Memory management of Interpolants for weight and time scale

	_lendControlInterpolant() {

		const interpolants = this._controlInterpolants,
			lastActiveIndex = this._nActiveControlInterpolants ++;

		let interpolant = interpolants[ lastActiveIndex ];

		if ( interpolant === undefined ) {

			interpolant = new LinearInterpolant(
				new Float32Array( 2 ), new Float32Array( 2 ),
				1, this._controlInterpolantsResultBuffer );

			interpolant.__cacheIndex = lastActiveIndex;
			interpolants[ lastActiveIndex ] = interpolant;

		}

		return interpolant;

	}

	_takeBackControlInterpolant( interpolant ) {

		const interpolants = this._controlInterpolants,
			prevIndex = interpolant.__cacheIndex,

			firstInactiveIndex = -- this._nActiveControlInterpolants,

			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

		interpolant.__cacheIndex = firstInactiveIndex;
		interpolants[ firstInactiveIndex ] = interpolant;

		lastActiveInterpolant.__cacheIndex = prevIndex;
		interpolants[ prevIndex ] = lastActiveInterpolant;

	}

	// return an action for a clip optionally using a custom root target
	// object (this method allocates a lot of dynamic memory in case a
	// previously unknown clip/root combination is specified)
	clipAction( clip, optionalRoot, blendMode ) {

		const root = optionalRoot || this._root,
			rootUuid = root.uuid;

		let clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;

		const clipUuid = clipObject !== null ? clipObject.uuid : clip;

		const actionsForClip = this._actionsByClip[ clipUuid ];
		let prototypeAction = null;

		if ( blendMode === undefined ) {

			if ( clipObject !== null ) {

				blendMode = clipObject.blendMode;

			} else {

				blendMode = NormalAnimationBlendMode;

			}

		}

		if ( actionsForClip !== undefined ) {

			const existingAction = actionsForClip.actionByRoot[ rootUuid ];

			if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {

				return existingAction;

			}

			// we know the clip, so we don't have to parse all
			// the bindings again but can just copy
			prototypeAction = actionsForClip.knownActions[ 0 ];

			// also, take the clip from the prototype action
			if ( clipObject === null )
				clipObject = prototypeAction._clip;

		}

		// clip must be known when specified via string
		if ( clipObject === null ) return null;

		// allocate all resources required to run it
		const newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );

		this._bindAction( newAction, prototypeAction );

		// and make the action known to the memory manager
		this._addInactiveAction( newAction, clipUuid, rootUuid );

		return newAction;

	}

	// get an existing action
	existingAction( clip, optionalRoot ) {

		const root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			return actionsForClip.actionByRoot[ rootUuid ] || null;

		}

		return null;

	}

	// deactivates all previously scheduled actions
	stopAllAction() {

		const actions = this._actions,
			nActions = this._nActiveActions;

		for ( let i = nActions - 1; i >= 0; -- i ) {

			actions[ i ].stop();

		}

		return this;

	}

	// advance the time and update apply the animation
	update( deltaTime ) {

		deltaTime *= this.timeScale;

		const actions = this._actions,
			nActions = this._nActiveActions,

			time = this.time += deltaTime,
			timeDirection = Math.sign( deltaTime ),

			accuIndex = this._accuIndex ^= 1;

		// run active actions

		for ( let i = 0; i !== nActions; ++ i ) {

			const action = actions[ i ];

			action._update( time, deltaTime, timeDirection, accuIndex );

		}

		// update scene graph

		const bindings = this._bindings,
			nBindings = this._nActiveBindings;

		for ( let i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].apply( accuIndex );

		}

		return this;

	}

	// Allows you to seek to a specific time in an animation.
	setTime( timeInSeconds ) {

		this.time = 0; // Zero out time attribute for AnimationMixer object;
		for ( let i = 0; i < this._actions.length; i ++ ) {

			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

		}

		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

	}

	// return this mixer's root target object
	getRoot() {

		return this._root;

	}

	// free all resources specific to a particular clip
	uncacheClip( clip ) {

		const actions = this._actions,
			clipUuid = clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			// note: just calling _removeInactiveAction would mess up the
			// iteration state and also require updating the state we can
			// just throw away

			const actionsToRemove = actionsForClip.knownActions;

			for ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

				const action = actionsToRemove[ i ];

				this._deactivateAction( action );

				const cacheIndex = action._cacheIndex,
					lastInactiveAction = actions[ actions.length - 1 ];

				action._cacheIndex = null;
				action._byClipCacheIndex = null;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				this._removeInactiveBindingsForAction( action );

			}

			delete actionsByClip[ clipUuid ];

		}

	}

	// free all resources specific to a particular root target object
	uncacheRoot( root ) {

		const rootUuid = root.uuid,
			actionsByClip = this._actionsByClip;

		for ( const clipUuid in actionsByClip ) {

			const actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
				action = actionByRoot[ rootUuid ];

			if ( action !== undefined ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

		const bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName !== undefined ) {

			for ( const trackName in bindingByName ) {

				const binding = bindingByName[ trackName ];
				binding.restoreOriginalState();
				this._removeInactiveBinding( binding );

			}

		}

	}

	// remove a targeted clip from the cache
	uncacheAction( clip, optionalRoot ) {

		const action = this.existingAction( clip, optionalRoot );

		if ( action !== null ) {

			this._deactivateAction( action );
			this._removeInactiveAction( action );

		}

	}

}

AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array( 1 );

class Uniform {

	constructor( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	clone() {

		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

	}

}

class InstancedInterleavedBuffer extends InterleavedBuffer {

	constructor( array, stride, meshPerAttribute = 1 ) {

		super( array, stride );

		this.meshPerAttribute = meshPerAttribute;

	}

	copy( source ) {

		super.copy( source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

	clone( data ) {

		const ib = super.clone( data );

		ib.meshPerAttribute = this.meshPerAttribute;

		return ib;

	}

	toJSON( data ) {

		const json = super.toJSON( data );

		json.isInstancedInterleavedBuffer = true;
		json.meshPerAttribute = this.meshPerAttribute;

		return json;

	}

}

InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

class GLBufferAttribute {

	constructor( buffer, type, itemSize, elementSize, count ) {

		this.buffer = buffer;
		this.type = type;
		this.itemSize = itemSize;
		this.elementSize = elementSize;
		this.count = count;

		this.version = 0;

	}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	setBuffer( buffer ) {

		this.buffer = buffer;

		return this;

	}

	setType( type, elementSize ) {

		this.type = type;
		this.elementSize = elementSize;

		return this;

	}

	setItemSize( itemSize ) {

		this.itemSize = itemSize;

		return this;

	}

	setCount( count ) {

		this.count = count;

		return this;

	}

}

GLBufferAttribute.prototype.isGLBufferAttribute = true;

class Raycaster {

	constructor( origin, direction, near = 0, far = Infinity ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near;
		this.far = far;
		this.camera = null;
		this.layers = new Layers();

		this.params = {
			Mesh: {},
			Line: { threshold: 1 },
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

	}

	set( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	}

	setFromCamera( coords, camera ) {

		if ( camera && camera.isPerspectiveCamera ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
			this.camera = camera;

		} else if ( camera && camera.isOrthographicCamera ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
			this.camera = camera;

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );

		}

	}

	intersectObject( object, recursive = true, intersects = [] ) {

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	}

	intersectObjects( objects, recursive = true, intersects = [] ) {

		for ( let i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.layers.test( raycaster.layers ) ) {

		object.raycast( raycaster, intersects );

	}

	if ( recursive === true ) {

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */

class Spherical {

	constructor( radius = 1, phi = 0, theta = 0 ) {

		this.radius = radius;
		this.phi = phi; // polar angle
		this.theta = theta; // azimuthal angle

		return this;

	}

	set( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	}

	copy( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	}

	// restrict phi to be betwee EPS and PI-EPS
	makeSafe() {

		const EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	}

	setFromVector3( v ) {

		return this.setFromCartesianCoords( v.x, v.y, v.z );

	}

	setFromCartesianCoords( x, y, z ) {

		this.radius = Math.sqrt( x * x + y * y + z * z );

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( x, z );
			this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );

		}

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */

class Cylindrical {

	constructor( radius = 1, theta = 0, y = 0 ) {

		this.radius = radius; // distance from the origin to a point in the x-z plane
		this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = y; // height above the x-z plane

		return this;

	}

	set( radius, theta, y ) {

		this.radius = radius;
		this.theta = theta;
		this.y = y;

		return this;

	}

	copy( other ) {

		this.radius = other.radius;
		this.theta = other.theta;
		this.y = other.y;

		return this;

	}

	setFromVector3( v ) {

		return this.setFromCartesianCoords( v.x, v.y, v.z );

	}

	setFromCartesianCoords( x, y, z ) {

		this.radius = Math.sqrt( x * x + z * z );
		this.theta = Math.atan2( x, z );
		this.y = y;

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _vector$4 = /*@__PURE__*/ new Vector2();

class Box2 {

	constructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {

		this.min = min;
		this.max = max;

	}

	set( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	}

	setFromPoints( points ) {

		this.makeEmpty();

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	}

	setFromCenterAndSize( center, size ) {

		const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );
		this.min.copy( center ).sub( halfSize );
		this.max.copy( center ).add( halfSize );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	}

	makeEmpty() {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	}

	isEmpty() {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	}

	getCenter( target ) {

		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	}

	getSize( target ) {

		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

	}

	expandByPoint( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	}

	expandByVector( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	}

	expandByScalar( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	}

	containsPoint( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	}

	containsBox( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	}

	getParameter( point, target ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return target.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	}

	intersectsBox( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	}

	clampPoint( point, target ) {

		return target.copy( point ).clamp( this.min, this.max );

	}

	distanceToPoint( point ) {

		const clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );
		return clampedPoint.sub( point ).length();

	}

	intersect( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	}

	union( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	}

	translate( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	}

	equals( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

}

Box2.prototype.isBox2 = true;

const _startP = /*@__PURE__*/ new Vector3();
const _startEnd = /*@__PURE__*/ new Vector3();

class Line3 {

	constructor( start = new Vector3(), end = new Vector3() ) {

		this.start = start;
		this.end = end;

	}

	set( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	}

	copy( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	}

	getCenter( target ) {

		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	}

	delta( target ) {

		return target.subVectors( this.end, this.start );

	}

	distanceSq() {

		return this.start.distanceToSquared( this.end );

	}

	distance() {

		return this.start.distanceTo( this.end );

	}

	at( t, target ) {

		return this.delta( target ).multiplyScalar( t ).add( this.start );

	}

	closestPointToPointParameter( point, clampToLine ) {

		_startP.subVectors( point, this.start );
		_startEnd.subVectors( this.end, this.start );

		const startEnd2 = _startEnd.dot( _startEnd );
		const startEnd_startP = _startEnd.dot( _startP );

		let t = startEnd_startP / startEnd2;

		if ( clampToLine ) {

			t = clamp( t, 0, 1 );

		}

		return t;

	}

	closestPointToPoint( point, clampToLine, target ) {

		const t = this.closestPointToPointParameter( point, clampToLine );

		return this.delta( target ).multiplyScalar( t ).add( this.start );

	}

	applyMatrix4( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	}

	equals( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _vector$3 = /*@__PURE__*/ new Vector3();

class SpotLightHelper extends Object3D {

	constructor( light, color ) {

		super();
		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		const geometry = new BufferGeometry();

		const positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];

		for ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			const p1 = ( i / l ) * Math.PI * 2;
			const p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	dispose() {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	}

	update() {

		this.light.updateMatrixWorld();

		const coneLength = this.light.distance ? this.light.distance : 1000;
		const coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( _vector$3 );

		if ( this.color !== undefined ) {

			this.cone.material.color.set( this.color );

		} else {

			this.cone.material.color.copy( this.light.color );

		}

	}

}

const _vector$2 = /*@__PURE__*/ new Vector3();
const _boneMatrix = /*@__PURE__*/ new Matrix4();
const _matrixWorldInv = /*@__PURE__*/ new Matrix4();


class SkeletonHelper extends LineSegments {

	constructor( object ) {

		const bones = getBoneList( object );

		const geometry = new BufferGeometry();

		const vertices = [];
		const colors = [];

		const color1 = new Color( 0, 0, 1 );
		const color2 = new Color( 0, 1, 0 );

		for ( let i = 0; i < bones.length; i ++ ) {

			const bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );

			}

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		const material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );

		super( geometry, material );

		this.type = 'SkeletonHelper';
		this.isSkeletonHelper = true;

		this.root = object;
		this.bones = bones;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	}

	updateMatrixWorld( force ) {

		const bones = this.bones;

		const geometry = this.geometry;
		const position = geometry.getAttribute( 'position' );

		_matrixWorldInv.copy( this.root.matrixWorld ).invert();

		for ( let i = 0, j = 0; i < bones.length; i ++ ) {

			const bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
				_vector$2.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
				_vector$2.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

		super.updateMatrixWorld( force );

	}

}


function getBoneList( object ) {

	const boneList = [];

	if ( object && object.isBone ) {

		boneList.push( object );

	}

	for ( let i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

	}

	return boneList;

}

class PointLightHelper extends Mesh {

	constructor( light, sphereSize, color ) {

		const geometry = new SphereGeometry( sphereSize, 4, 2 );
		const material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );

		super( geometry, material );

		this.light = light;
		this.light.updateMatrixWorld();

		this.color = color;

		this.type = 'PointLightHelper';

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();


		/*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/

	}

	dispose() {

		this.geometry.dispose();
		this.material.dispose();

	}

	update() {

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color );

		}

		/*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	}

}

const _vector$1 = /*@__PURE__*/ new Vector3();
const _color1 = /*@__PURE__*/ new Color();
const _color2 = /*@__PURE__*/ new Color();

class HemisphereLightHelper extends Object3D {

	constructor( light, size, color ) {

		super();
		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		const geometry = new OctahedronGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );

		this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
		if ( this.color === undefined ) this.material.vertexColors = true;

		const position = geometry.getAttribute( 'position' );
		const colors = new Float32Array( position.count * 3 );

		geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

		this.add( new Mesh( geometry, this.material ) );

		this.update();

	}

	dispose() {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	}

	update() {

		const mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			const colors = mesh.geometry.getAttribute( 'color' );

			_color1.copy( this.light.color );
			_color2.copy( this.light.groundColor );

			for ( let i = 0, l = colors.count; i < l; i ++ ) {

				const color = ( i < ( l / 2 ) ) ? _color1 : _color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	}

}

class GridHelper extends LineSegments {

	constructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {

		color1 = new Color( color1 );
		color2 = new Color( color2 );

		const center = divisions / 2;
		const step = size / divisions;
		const halfSize = size / 2;

		const vertices = [], colors = [];

		for ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );

			const color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		const geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

		super( geometry, material );

		this.type = 'GridHelper';

	}

}

class PolarGridHelper extends LineSegments {

	constructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {

		color1 = new Color( color1 );
		color2 = new Color( color2 );

		const vertices = [];
		const colors = [];

		// create the radials

		for ( let i = 0; i <= radials; i ++ ) {

			const v = ( i / radials ) * ( Math.PI * 2 );

			const x = Math.sin( v ) * radius;
			const z = Math.cos( v ) * radius;

			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );

			const color = ( i & 1 ) ? color1 : color2;

			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );

		}

		// create the circles

		for ( let i = 0; i <= circles; i ++ ) {

			const color = ( i & 1 ) ? color1 : color2;

			const r = radius - ( radius / circles * i );

			for ( let j = 0; j < divisions; j ++ ) {

				// first vertex

				let v = ( j / divisions ) * ( Math.PI * 2 );

				let x = Math.sin( v ) * r;
				let z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

				// second vertex

				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

			}

		}

		const geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

		super( geometry, material );

		this.type = 'PolarGridHelper';

	}

}

const _v1 = /*@__PURE__*/ new Vector3();
const _v2 = /*@__PURE__*/ new Vector3();
const _v3 = /*@__PURE__*/ new Vector3();

class DirectionalLightHelper extends Object3D {

	constructor( light, size, color ) {

		super();
		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		if ( size === undefined ) size = 1;

		let geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );

		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );

		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	}

	dispose() {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	}

	update() {

		_v1.setFromMatrixPosition( this.light.matrixWorld );
		_v2.setFromMatrixPosition( this.light.target.matrixWorld );
		_v3.subVectors( _v2, _v1 );

		this.lightPlane.lookAt( _v2 );

		if ( this.color !== undefined ) {

			this.lightPlane.material.color.set( this.color );
			this.targetLine.material.color.set( this.color );

		} else {

			this.lightPlane.material.color.copy( this.light.color );
			this.targetLine.material.color.copy( this.light.color );

		}

		this.targetLine.lookAt( _v2 );
		this.targetLine.scale.z = _v3.length();

	}

}

const _vector = /*@__PURE__*/ new Vector3();
const _camera = /*@__PURE__*/ new Camera();

/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

class CameraHelper extends LineSegments {

	constructor( camera ) {

		const geometry = new BufferGeometry();
		const material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );

		const vertices = [];
		const colors = [];

		const pointMap = {};

		// colors

		const colorFrustum = new Color( 0xffaa00 );
		const colorCone = new Color( 0xff0000 );
		const colorUp = new Color( 0x00aaff );
		const colorTarget = new Color( 0xffffff );
		const colorCross = new Color( 0x333333 );

		// near

		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );

		// far

		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );

		// sides

		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );

		// cone

		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );

		// up

		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );

		// target

		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );

		// cross

		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );

		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );

		function addLine( a, b, color ) {

			addPoint( a, color );
			addPoint( b, color );

		}

		function addPoint( id, color ) {

			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		super( geometry, material );

		this.type = 'CameraHelper';

		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	update() {

		const geometry = this.geometry;
		const pointMap = this.pointMap;

		const w = 1, h = 1;

		// we need just camera projection matrix inverse
		// world matrix must be identity

		_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

		// center / target

		setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
		setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

		// near

		setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
		setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
		setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
		setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

		// far

		setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
		setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
		setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
		setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

		// up

		setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
		setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
		setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

		// cross

		setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
		setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
		setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
		setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

		setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
		setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
		setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
		setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	}

	dispose() {

		this.geometry.dispose();
		this.material.dispose();

	}

}


function setPoint( point, pointMap, geometry, camera, x, y, z ) {

	_vector.set( x, y, z ).unproject( camera );

	const points = pointMap[ point ];

	if ( points !== undefined ) {

		const position = geometry.getAttribute( 'position' );

		for ( let i = 0, l = points.length; i < l; i ++ ) {

			position.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );

		}

	}

}

const _box = /*@__PURE__*/ new Box3();

class BoxHelper extends LineSegments {

	constructor( object, color = 0xffff00 ) {

		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		const positions = new Float32Array( 8 * 3 );

		const geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

		this.object = object;
		this.type = 'BoxHelper';

		this.matrixAutoUpdate = false;

		this.update();

	}

	update( object ) {

		if ( object !== undefined ) {

			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

		}

		if ( this.object !== undefined ) {

			_box.setFromObject( this.object );

		}

		if ( _box.isEmpty() ) return;

		const min = _box.min;
		const max = _box.max;

		/*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

		const position = this.geometry.attributes.position;
		const array = position.array;

		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

		position.needsUpdate = true;

		this.geometry.computeBoundingSphere();


	}

	setFromObject( object ) {

		this.object = object;
		this.update();

		return this;

	}

	copy( source ) {

		LineSegments.prototype.copy.call( this, source );

		this.object = source.object;

		return this;

	}

}

class Box3Helper extends LineSegments {

	constructor( box, color = 0xffff00 ) {

		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

		const positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

		const geometry = new BufferGeometry();

		geometry.setIndex( new BufferAttribute( indices, 1 ) );

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

		this.box = box;

		this.type = 'Box3Helper';

		this.geometry.computeBoundingSphere();

	}

	updateMatrixWorld( force ) {

		const box = this.box;

		if ( box.isEmpty() ) return;

		box.getCenter( this.position );

		box.getSize( this.scale );

		this.scale.multiplyScalar( 0.5 );

		super.updateMatrixWorld( force );

	}

}

class PlaneHelper extends Line {

	constructor( plane, size = 1, hex = 0xffff00 ) {

		const color = hex;

		const positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

		const geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

		this.type = 'PlaneHelper';

		this.plane = plane;

		this.size = size;

		const positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

		const geometry2 = new BufferGeometry();
		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );

	}

	updateMatrixWorld( force ) {

		let scale = - this.plane.constant;

		if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

		this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

		this.lookAt( this.plane.normal );

		super.updateMatrixWorld( force );

	}

}

const _axis = /*@__PURE__*/ new Vector3();
let _lineGeometry, _coneGeometry;

class ArrowHelper extends Object3D {

	// dir is assumed to be normalized

	constructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {

		super();

		this.type = 'ArrowHelper';

		if ( _lineGeometry === undefined ) {

			_lineGeometry = new BufferGeometry();
			_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );
			_coneGeometry.translate( 0, - 0.5, 0 );

		}

		this.position.copy( origin );

		this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	setDirection( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			_axis.set( dir.z, 0, - dir.x ).normalize();

			const radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( _axis, radians );

		}

	}

	setLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {

		this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	}

	setColor( color ) {

		this.line.material.color.set( color );
		this.cone.material.color.set( color );

	}

	copy( source ) {

		super.copy( source, false );

		this.line.copy( source.line );
		this.cone.copy( source.cone );

		return this;

	}

}

class AxesHelper extends LineSegments {

	constructor( size = 1 ) {

		const vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];

		const colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];

		const geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

		super( geometry, material );

		this.type = 'AxesHelper';

	}

	setColors( xAxisColor, yAxisColor, zAxisColor ) {

		const color = new Color();
		const array = this.geometry.attributes.color.array;

		color.set( xAxisColor );
		color.toArray( array, 0 );
		color.toArray( array, 3 );

		color.set( yAxisColor );
		color.toArray( array, 6 );
		color.toArray( array, 9 );

		color.set( zAxisColor );
		color.toArray( array, 12 );
		color.toArray( array, 15 );

		this.geometry.attributes.color.needsUpdate = true;

		return this;

	}

	dispose() {

		this.geometry.dispose();
		this.material.dispose();

	}

}

class ShapePath {

	constructor() {

		this.type = 'ShapePath';

		this.color = new Color();

		this.subPaths = [];
		this.currentPath = null;

	}

	moveTo( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

		return this;

	}

	lineTo( x, y ) {

		this.currentPath.lineTo( x, y );

		return this;

	}

	quadraticCurveTo( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

		return this;

	}

	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

		return this;

	}

	splineThru( pts ) {

		this.currentPath.splineThru( pts );

		return this;

	}

	toShapes( isCCW, noHoles ) {

		function toShapesNoHoles( inSubpaths ) {

			const shapes = [];

			for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {

				const tmpPath = inSubpaths[ i ];

				const tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			const polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			let inside = false;
			for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				let edgeLowPt = inPolygon[ p ];
				let edgeHighPt = inPolygon[ q ];

				let edgeDx = edgeHighPt.x - edgeLowPt.x;
				let edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}

					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		const isClockWise = ShapeUtils.isClockWise;

		const subPaths = this.subPaths;
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		let solid, tmpPath, tmpShape;
		const shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		const betterShapeHoles = [];
		const newShapes = [];
		let newShapeHoles = [];
		let mainIdx = 0;
		let tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( let i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			let ambiguous = false;
			const toChange = [];

			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				const sho = newShapeHoles[ sIdx ];

				for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					const ho = sho[ hIdx ];
					let hole_unassigned = true;

					for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}

					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);

			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		let tmpHoles;

		for ( let i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

}

const _floatView = new Float32Array( 1 );
const _int32View = new Int32Array( _floatView.buffer );

class DataUtils {

	// Converts float32 to float16 (stored as uint16 value).

	static toHalfFloat( val ) {

		if ( val > 65504 ) {

			console.warn( 'THREE.DataUtils.toHalfFloat(): value exceeds 65504.' );

			val = 65504; // maximum representable value in float16

		}

		// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410

		/* This method is faster than the OpenEXR implementation (very often
		* used, eg. in Ogre), with the additional benefit of rounding, inspired
		* by James Tursa?s half-precision code. */

		_floatView[ 0 ] = val;
		const x = _int32View[ 0 ];

		let bits = ( x >> 16 ) & 0x8000; /* Get the sign */
		let m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */
		const e = ( x >> 23 ) & 0xff; /* Using int is faster here */

		/* If zero, or denormal, or exponent underflows too much for a denormal
			* half, return signed zero. */
		if ( e < 103 ) return bits;

		/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
		if ( e > 142 ) {

			bits |= 0x7c00;
			/* If exponent was 0xff and one mantissa bit was set, it means NaN,
						* not Inf, so make sure we set one mantissa bit too. */
			bits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );
			return bits;

		}

		/* If exponent underflows but not too much, return a denormal */
		if ( e < 113 ) {

			m |= 0x0800;
			/* Extra rounding may overflow and set mantissa to 0 and exponent
				* to 1, which is OK. */
			bits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );
			return bits;

		}

		bits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );
		/* Extra rounding. An overflow will set mantissa to 0 and increment
			* the exponent, which is OK. */
		bits += m & 1;
		return bits;

	}

}

const LineStrip = 0;
const LinePieces = 1;
const NoColors = 0;
const FaceColors = 1;
const VertexColors = 2;

function MeshFaceMaterial( materials ) {

	console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
	return materials;

}

function MultiMaterial( materials = [] ) {

	console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
	materials.isMultiMaterial = true;
	materials.materials = materials;
	materials.clone = function () {

		return materials.slice();

	};

	return materials;

}

function PointCloud( geometry, material ) {

	console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function Particle( material ) {

	console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
	return new Sprite( material );

}

function ParticleSystem( geometry, material ) {

	console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function PointCloudMaterial( parameters ) {

	console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleBasicMaterial( parameters ) {

	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleSystemMaterial( parameters ) {

	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function Vertex( x, y, z ) {

	console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
	return new Vector3( x, y, z );

}

//

function DynamicBufferAttribute( array, itemSize ) {

	console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );
	return new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );

}

function Int8Attribute( array, itemSize ) {

	console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
	return new Int8BufferAttribute( array, itemSize );

}

function Uint8Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
	return new Uint8BufferAttribute( array, itemSize );

}

function Uint8ClampedAttribute( array, itemSize ) {

	console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
	return new Uint8ClampedBufferAttribute( array, itemSize );

}

function Int16Attribute( array, itemSize ) {

	console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
	return new Int16BufferAttribute( array, itemSize );

}

function Uint16Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
	return new Uint16BufferAttribute( array, itemSize );

}

function Int32Attribute( array, itemSize ) {

	console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
	return new Int32BufferAttribute( array, itemSize );

}

function Uint32Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
	return new Uint32BufferAttribute( array, itemSize );

}

function Float32Attribute( array, itemSize ) {

	console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
	return new Float32BufferAttribute( array, itemSize );

}

function Float64Attribute( array, itemSize ) {

	console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
	return new Float64BufferAttribute( array, itemSize );

}

//

Curve.create = function ( construct, getPoint ) {

	console.log( 'THREE.Curve.create() has been deprecated' );

	construct.prototype = Object.create( Curve.prototype );
	construct.prototype.constructor = construct;
	construct.prototype.getPoint = getPoint;

	return construct;

};

//

Path.prototype.fromPoints = function ( points ) {

	console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
	return this.setFromPoints( points );

};

//

function AxisHelper( size ) {

	console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
	return new AxesHelper( size );

}

function BoundingBoxHelper( object, color ) {

	console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
	return new BoxHelper( object, color );

}

function EdgesHelper( object, hex ) {

	console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
	return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

GridHelper.prototype.setColors = function () {

	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

};

SkeletonHelper.prototype.update = function () {

	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

};

function WireframeHelper( object, hex ) {

	console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
	return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

//

Loader.prototype.extractUrlBase = function ( url ) {

	console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
	return LoaderUtils.extractUrlBase( url );

};

Loader.Handlers = {

	add: function ( /* regex, loader */ ) {

		console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

	},

	get: function ( /* file */ ) {

		console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

	}

};

function XHRLoader( manager ) {

	console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
	return new FileLoader( manager );

}

function BinaryTextureLoader( manager ) {

	console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
	return new DataTextureLoader( manager );

}

//

Box2.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

Box2.prototype.empty = function () {

	console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
	return this.isEmpty();

};

Box2.prototype.isIntersectionBox = function ( box ) {

	console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
	return this.intersectsBox( box );

};

Box2.prototype.size = function ( optionalTarget ) {

	console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
	return this.getSize( optionalTarget );

};

//

Box3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

Box3.prototype.empty = function () {

	console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
	return this.isEmpty();

};

Box3.prototype.isIntersectionBox = function ( box ) {

	console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
	return this.intersectsBox( box );

};

Box3.prototype.isIntersectionSphere = function ( sphere ) {

	console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
	return this.intersectsSphere( sphere );

};

Box3.prototype.size = function ( optionalTarget ) {

	console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
	return this.getSize( optionalTarget );

};

//

Sphere.prototype.empty = function () {

	console.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );
	return this.isEmpty();

};

//

Frustum.prototype.setFromMatrix = function ( m ) {

	console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );
	return this.setFromProjectionMatrix( m );

};

//

Line3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

//

Matrix3.prototype.flattenToArrayOffset = function ( array, offset ) {

	console.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );
	return this.toArray( array, offset );

};

Matrix3.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
	return vector.applyMatrix3( this );

};

Matrix3.prototype.multiplyVector3Array = function ( /* a */ ) {

	console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

};

Matrix3.prototype.applyToBufferAttribute = function ( attribute ) {

	console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );
	return attribute.applyMatrix3( this );

};

Matrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {

	console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

};

Matrix3.prototype.getInverse = function ( matrix ) {

	console.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );
	return this.copy( matrix ).invert();

};

//

Matrix4.prototype.extractPosition = function ( m ) {

	console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
	return this.copyPosition( m );

};

Matrix4.prototype.flattenToArrayOffset = function ( array, offset ) {

	console.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );
	return this.toArray( array, offset );

};

Matrix4.prototype.getPosition = function () {

	console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
	return new Vector3().setFromMatrixColumn( this, 3 );

};

Matrix4.prototype.setRotationFromQuaternion = function ( q ) {

	console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
	return this.makeRotationFromQuaternion( q );

};

Matrix4.prototype.multiplyToArray = function () {

	console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

};

Matrix4.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
	return vector.applyMatrix4( this );

};

Matrix4.prototype.multiplyVector4 = function ( vector ) {

	console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
	return vector.applyMatrix4( this );

};

Matrix4.prototype.multiplyVector3Array = function ( /* a */ ) {

	console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

};

Matrix4.prototype.rotateAxis = function ( v ) {

	console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
	v.transformDirection( this );

};

Matrix4.prototype.crossVector = function ( vector ) {

	console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
	return vector.applyMatrix4( this );

};

Matrix4.prototype.translate = function () {

	console.error( 'THREE.Matrix4: .translate() has been removed.' );

};

Matrix4.prototype.rotateX = function () {

	console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

};

Matrix4.prototype.rotateY = function () {

	console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

};

Matrix4.prototype.rotateZ = function () {

	console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

};

Matrix4.prototype.rotateByAxis = function () {

	console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

};

Matrix4.prototype.applyToBufferAttribute = function ( attribute ) {

	console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );
	return attribute.applyMatrix4( this );

};

Matrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {

	console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

};

Matrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {

	console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
	return this.makePerspective( left, right, top, bottom, near, far );

};

Matrix4.prototype.getInverse = function ( matrix ) {

	console.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );
	return this.copy( matrix ).invert();

};

//

Plane.prototype.isIntersectionLine = function ( line ) {

	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	return this.intersectsLine( line );

};

//

Quaternion.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	return vector.applyQuaternion( this );

};

Quaternion.prototype.inverse = function ( ) {

	console.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );
	return this.invert();

};

//

Ray.prototype.isIntersectionBox = function ( box ) {

	console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
	return this.intersectsBox( box );

};

Ray.prototype.isIntersectionPlane = function ( plane ) {

	console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
	return this.intersectsPlane( plane );

};

Ray.prototype.isIntersectionSphere = function ( sphere ) {

	console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
	return this.intersectsSphere( sphere );

};

//

Triangle.prototype.area = function () {

	console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
	return this.getArea();

};

Triangle.prototype.barycoordFromPoint = function ( point, target ) {

	console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
	return this.getBarycoord( point, target );

};

Triangle.prototype.midpoint = function ( target ) {

	console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
	return this.getMidpoint( target );

};

Triangle.prototypenormal = function ( target ) {

	console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
	return this.getNormal( target );

};

Triangle.prototype.plane = function ( target ) {

	console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
	return this.getPlane( target );

};

Triangle.barycoordFromPoint = function ( point, a, b, c, target ) {

	console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
	return Triangle.getBarycoord( point, a, b, c, target );

};

Triangle.normal = function ( a, b, c, target ) {

	console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
	return Triangle.getNormal( a, b, c, target );

};

//

Shape.prototype.extractAllPoints = function ( divisions ) {

	console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
	return this.extractPoints( divisions );

};

Shape.prototype.extrude = function ( options ) {

	console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
	return new ExtrudeGeometry( this, options );

};

Shape.prototype.makeGeometry = function ( options ) {

	console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
	return new ShapeGeometry( this, options );

};

//

Vector2.prototype.fromAttribute = function ( attribute, index, offset ) {

	console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
	return this.fromBufferAttribute( attribute, index, offset );

};

Vector2.prototype.distanceToManhattan = function ( v ) {

	console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
	return this.manhattanDistanceTo( v );

};

Vector2.prototype.lengthManhattan = function () {

	console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
	return this.manhattanLength();

};

//

Vector3.prototype.setEulerFromRotationMatrix = function () {

	console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

};

Vector3.prototype.setEulerFromQuaternion = function () {

	console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

};

Vector3.prototype.getPositionFromMatrix = function ( m ) {

	console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
	return this.setFromMatrixPosition( m );

};

Vector3.prototype.getScaleFromMatrix = function ( m ) {

	console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
	return this.setFromMatrixScale( m );

};

Vector3.prototype.getColumnFromMatrix = function ( index, matrix ) {

	console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
	return this.setFromMatrixColumn( matrix, index );

};

Vector3.prototype.applyProjection = function ( m ) {

	console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
	return this.applyMatrix4( m );

};

Vector3.prototype.fromAttribute = function ( attribute, index, offset ) {

	console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
	return this.fromBufferAttribute( attribute, index, offset );

};

Vector3.prototype.distanceToManhattan = function ( v ) {

	console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
	return this.manhattanDistanceTo( v );

};

Vector3.prototype.lengthManhattan = function () {

	console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
	return this.manhattanLength();

};

//

Vector4.prototype.fromAttribute = function ( attribute, index, offset ) {

	console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
	return this.fromBufferAttribute( attribute, index, offset );

};

Vector4.prototype.lengthManhattan = function () {

	console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
	return this.manhattanLength();

};

//

Object3D.prototype.getChildByName = function ( name ) {

	console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
	return this.getObjectByName( name );

};

Object3D.prototype.renderDepth = function () {

	console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

};

Object3D.prototype.translate = function ( distance, axis ) {

	console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
	return this.translateOnAxis( axis, distance );

};

Object3D.prototype.getWorldRotation = function () {

	console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

};

Object3D.prototype.applyMatrix = function ( matrix ) {

	console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );
	return this.applyMatrix4( matrix );

};

Object.defineProperties( Object3D.prototype, {

	eulerOrder: {
		get: function () {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			return this.rotation.order;

		},
		set: function ( value ) {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			this.rotation.order = value;

		}
	},
	useQuaternion: {
		get: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		},
		set: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		}
	}

} );

Mesh.prototype.setDrawMode = function () {

	console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

};

Object.defineProperties( Mesh.prototype, {

	drawMode: {
		get: function () {

			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );
			return TrianglesDrawMode;

		},
		set: function () {

			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

		}
	}

} );

SkinnedMesh.prototype.initBones = function () {

	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

};

//

PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	console.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +
			'Use .setFocalLength and .filmGauge for a photographic setup.' );

	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
	this.setFocalLength( focalLength );

};

//

Object.defineProperties( Light.prototype, {
	onlyShadow: {
		set: function () {

			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

		}
	},
	shadowCameraFov: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
			this.shadow.camera.fov = value;

		}
	},
	shadowCameraLeft: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
			this.shadow.camera.left = value;

		}
	},
	shadowCameraRight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
			this.shadow.camera.right = value;

		}
	},
	shadowCameraTop: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
			this.shadow.camera.top = value;

		}
	},
	shadowCameraBottom: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
			this.shadow.camera.bottom = value;

		}
	},
	shadowCameraNear: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
			this.shadow.camera.near = value;

		}
	},
	shadowCameraFar: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
			this.shadow.camera.far = value;

		}
	},
	shadowCameraVisible: {
		set: function () {

			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

		}
	},
	shadowBias: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
			this.shadow.bias = value;

		}
	},
	shadowDarkness: {
		set: function () {

			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

		}
	},
	shadowMapWidth: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
			this.shadow.mapSize.width = value;

		}
	},
	shadowMapHeight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
			this.shadow.mapSize.height = value;

		}
	}
} );

//

Object.defineProperties( BufferAttribute.prototype, {

	length: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
			return this.array.length;

		}
	},
	dynamic: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
			return this.usage === DynamicDrawUsage;

		},
		set: function ( /* value */ ) {

			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
			this.setUsage( DynamicDrawUsage );

		}
	}

} );

BufferAttribute.prototype.setDynamic = function ( value ) {

	console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
	this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
	return this;

};

BufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {

	console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

},

BufferAttribute.prototype.setArray = function ( /* array */ ) {

	console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

};

//

BufferGeometry.prototype.addIndex = function ( index ) {

	console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
	this.setIndex( index );

};

BufferGeometry.prototype.addAttribute = function ( name, attribute ) {

	console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

	if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

		console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

		return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

	}

	if ( name === 'index' ) {

		console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
		this.setIndex( attribute );

		return this;

	}

	return this.setAttribute( name, attribute );

};

BufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {

	if ( indexOffset !== undefined ) {

		console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

	}

	console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
	this.addGroup( start, count );

};

BufferGeometry.prototype.clearDrawCalls = function () {

	console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
	this.clearGroups();

};

BufferGeometry.prototype.computeOffsets = function () {

	console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

};

BufferGeometry.prototype.removeAttribute = function ( name ) {

	console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

	return this.deleteAttribute( name );

};

BufferGeometry.prototype.applyMatrix = function ( matrix ) {

	console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );
	return this.applyMatrix4( matrix );

};

Object.defineProperties( BufferGeometry.prototype, {

	drawcalls: {
		get: function () {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		}
	},
	offsets: {
		get: function () {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		}
	}

} );

InterleavedBuffer.prototype.setDynamic = function ( value ) {

	console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
	this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
	return this;

};

InterleavedBuffer.prototype.setArray = function ( /* array */ ) {

	console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

};

//

ExtrudeGeometry.prototype.getArrays = function () {

	console.error( 'THREE.ExtrudeGeometry: .getArrays() has been removed.' );

};

ExtrudeGeometry.prototype.addShapeList = function () {

	console.error( 'THREE.ExtrudeGeometry: .addShapeList() has been removed.' );

};

ExtrudeGeometry.prototype.addShape = function () {

	console.error( 'THREE.ExtrudeGeometry: .addShape() has been removed.' );

};

//

Scene.prototype.dispose = function () {

	console.error( 'THREE.Scene: .dispose() has been removed.' );

};

//

Uniform.prototype.onUpdate = function () {

	console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
	return this;

};

//

Object.defineProperties( Material.prototype, {

	wrapAround: {
		get: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		}
	},

	overdraw: {
		get: function () {

			console.warn( 'THREE.Material: .overdraw has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .overdraw has been removed.' );

		}
	},

	wrapRGB: {
		get: function () {

			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
			return new Color();

		}
	},

	shading: {
		get: function () {

			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

		},
		set: function ( value ) {

			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
			this.flatShading = ( value === FlatShading );

		}
	},

	stencilMask: {
		get: function () {

			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
			return this.stencilFuncMask;

		},
		set: function ( value ) {

			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
			this.stencilFuncMask = value;

		}
	},

	vertexTangents: {
		get: function () {

			console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );

		}
	},

} );

Object.defineProperties( ShaderMaterial.prototype, {

	derivatives: {
		get: function () {

			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			return this.extensions.derivatives;

		},
		set: function ( value ) {

			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			this.extensions.derivatives = value;

		}
	}

} );

//

WebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {

	console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
	this.setRenderTarget( renderTarget );
	this.clear( color, depth, stencil );

};

WebGLRenderer.prototype.animate = function ( callback ) {

	console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
	this.setAnimationLoop( callback );

};

WebGLRenderer.prototype.getCurrentRenderTarget = function () {

	console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
	return this.getRenderTarget();

};

WebGLRenderer.prototype.getMaxAnisotropy = function () {

	console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
	return this.capabilities.getMaxAnisotropy();

};

WebGLRenderer.prototype.getPrecision = function () {

	console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
	return this.capabilities.precision;

};

WebGLRenderer.prototype.resetGLState = function () {

	console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
	return this.state.reset();

};

WebGLRenderer.prototype.supportsFloatTextures = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
	return this.extensions.get( 'OES_texture_float' );

};

WebGLRenderer.prototype.supportsHalfFloatTextures = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
	return this.extensions.get( 'OES_texture_half_float' );

};

WebGLRenderer.prototype.supportsStandardDerivatives = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
	return this.extensions.get( 'OES_standard_derivatives' );

};

WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
	return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

};

WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
	return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

};

WebGLRenderer.prototype.supportsBlendMinMax = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
	return this.extensions.get( 'EXT_blend_minmax' );

};

WebGLRenderer.prototype.supportsVertexTextures = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
	return this.capabilities.vertexTextures;

};

WebGLRenderer.prototype.supportsInstancedArrays = function () {

	console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
	return this.extensions.get( 'ANGLE_instanced_arrays' );

};

WebGLRenderer.prototype.enableScissorTest = function ( boolean ) {

	console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
	this.setScissorTest( boolean );

};

WebGLRenderer.prototype.initMaterial = function () {

	console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

};

WebGLRenderer.prototype.addPrePlugin = function () {

	console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

};

WebGLRenderer.prototype.addPostPlugin = function () {

	console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

};

WebGLRenderer.prototype.updateShadowMap = function () {

	console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

};

WebGLRenderer.prototype.setFaceCulling = function () {

	console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

};

WebGLRenderer.prototype.allocTextureUnit = function () {

	console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

};

WebGLRenderer.prototype.setTexture = function () {

	console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

};

WebGLRenderer.prototype.setTexture2D = function () {

	console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

};

WebGLRenderer.prototype.setTextureCube = function () {

	console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

};

WebGLRenderer.prototype.getActiveMipMapLevel = function () {

	console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
	return this.getActiveMipmapLevel();

};

Object.defineProperties( WebGLRenderer.prototype, {

	shadowMapEnabled: {
		get: function () {

			return this.shadowMap.enabled;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
			this.shadowMap.enabled = value;

		}
	},
	shadowMapType: {
		get: function () {

			return this.shadowMap.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
			this.shadowMap.type = value;

		}
	},
	shadowMapCullFace: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
			return undefined;

		},
		set: function ( /* value */ ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

		}
	},
	context: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
			return this.getContext();

		}
	},
	vr: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );
			return this.xr;

		}
	},
	gammaInput: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
			return false;

		},
		set: function () {

			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );

		}
	},
	gammaOutput: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
			return false;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
			this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;

		}
	},
	toneMappingWhitePoint: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );
			return 1.0;

		},
		set: function () {

			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );

		}
	},

} );

Object.defineProperties( WebGLShadowMap.prototype, {

	cullFace: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
			return undefined;

		},
		set: function ( /* cullFace */ ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

		}
	},
	renderReverseSided: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
			return undefined;

		},
		set: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

		}
	},
	renderSingleSided: {
		get: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
			return undefined;

		},
		set: function () {

			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

		}
	}

} );

function WebGLRenderTargetCube( width, height, options ) {

	console.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );
	return new WebGLCubeRenderTarget( width, options );

}

//

Object.defineProperties( WebGLRenderTarget.prototype, {

	wrapS: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			return this.texture.wrapS;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			this.texture.wrapS = value;

		}
	},
	wrapT: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			return this.texture.wrapT;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			this.texture.wrapT = value;

		}
	},
	magFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			return this.texture.magFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			this.texture.magFilter = value;

		}
	},
	minFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			return this.texture.minFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			this.texture.minFilter = value;

		}
	},
	anisotropy: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			return this.texture.anisotropy;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			this.texture.anisotropy = value;

		}
	},
	offset: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			return this.texture.offset;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			this.texture.offset = value;

		}
	},
	repeat: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			return this.texture.repeat;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			this.texture.repeat = value;

		}
	},
	format: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			return this.texture.format;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			this.texture.format = value;

		}
	},
	type: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			return this.texture.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			this.texture.type = value;

		}
	},
	generateMipmaps: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			return this.texture.generateMipmaps;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			this.texture.generateMipmaps = value;

		}
	}

} );

//

Audio.prototype.load = function ( file ) {

	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
	const scope = this;
	const audioLoader = new AudioLoader();
	audioLoader.load( file, function ( buffer ) {

		scope.setBuffer( buffer );

	} );
	return this;

};


AudioAnalyser.prototype.getData = function () {

	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	return this.getFrequencyData();

};

//

CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
	return this.update( renderer, scene );

};

CubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {

	console.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );
	return this.renderTarget.clear( renderer, color, depth, stencil );

};

ImageUtils.crossOrigin = undefined;

ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

	const loader = new TextureLoader();
	loader.setCrossOrigin( this.crossOrigin );

	const texture = loader.load( url, onLoad, undefined, onError );

	if ( mapping ) texture.mapping = mapping;

	return texture;

};

ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

	const loader = new CubeTextureLoader();
	loader.setCrossOrigin( this.crossOrigin );

	const texture = loader.load( urls, onLoad, undefined, onError );

	if ( mapping ) texture.mapping = mapping;

	return texture;

};

ImageUtils.loadCompressedTexture = function () {

	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

};

ImageUtils.loadCompressedTextureCube = function () {

	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

};

//

function CanvasRenderer() {

	console.error( 'THREE.CanvasRenderer has been removed' );

}

//

function JSONLoader() {

	console.error( 'THREE.JSONLoader has been removed.' );

}

//

const SceneUtils = {

	createMultiMaterialObject: function ( /* geometry, materials */ ) {

		console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );

	},

	detach: function ( /* child, parent, scene */ ) {

		console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );

	},

	attach: function ( /* child, scene, parent */ ) {

		console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );

	}

};

//

function LensFlare() {

	console.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );

}

//

function ParametricGeometry() {

	console.error( 'THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js' );
	return new BufferGeometry();

}

function TextGeometry() {

	console.error( 'THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js' );
	return new BufferGeometry();

}

function FontLoader() {

	console.error( 'THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js' );

}

function Font() {

	console.error( 'THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js' );

}

function ImmediateRenderObject() {

	console.error( 'THREE.ImmediateRenderObject has been removed.' );

}

if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

	/* eslint-disable no-undef */
	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
		revision: REVISION,
	} } ) );
	/* eslint-enable no-undef */

}

if ( typeof window !== 'undefined' ) {

	if ( window.__THREE__ ) {

		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

	} else {

		window.__THREE__ = REVISION;

	}

}




/***/ }),

/***/ 412:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 920:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 58:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeTangents": () => (/* binding */ computeTangents),
/* harmony export */   "mergeBufferGeometries": () => (/* binding */ mergeBufferGeometries),
/* harmony export */   "mergeBufferAttributes": () => (/* binding */ mergeBufferAttributes),
/* harmony export */   "interleaveAttributes": () => (/* binding */ interleaveAttributes),
/* harmony export */   "estimateBytesUsed": () => (/* binding */ estimateBytesUsed),
/* harmony export */   "mergeVertices": () => (/* binding */ mergeVertices),
/* harmony export */   "toTrianglesDrawMode": () => (/* binding */ toTrianglesDrawMode),
/* harmony export */   "computeMorphedAttributes": () => (/* binding */ computeMorphedAttributes)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(578);



function computeTangents( geometry ) {

	geometry.computeTangents();
	console.warn( 'THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.' );

}

/**
	 * @param  {Array<BufferGeometry>} geometries
	 * @param  {Boolean} useGroups
	 * @return {BufferGeometry}
	 */
function mergeBufferGeometries( geometries, useGroups = false ) {

	const isIndexed = geometries[ 0 ].index !== null;

	const attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );
	const morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );

	const attributes = {};
	const morphAttributes = {};

	const morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;

	const mergedGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();

	let offset = 0;

	for ( let i = 0; i < geometries.length; ++ i ) {

		const geometry = geometries[ i ];
		let attributesCount = 0;

		// ensure that all geometries are indexed, or none

		if ( isIndexed !== ( geometry.index !== null ) ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );
			return null;

		}

		// gather attributes, exit early if they're different

		for ( const name in geometry.attributes ) {

			if ( ! attributesUsed.has( name ) ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.' );
				return null;

			}

			if ( attributes[ name ] === undefined ) attributes[ name ] = [];

			attributes[ name ].push( geometry.attributes[ name ] );

			attributesCount ++;

		}

		// ensure geometries have the same number of attributes

		if ( attributesCount !== attributesUsed.size ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );
			return null;

		}

		// gather morph attributes, exit early if they're different

		if ( morphTargetsRelative !== geometry.morphTargetsRelative ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );
			return null;

		}

		for ( const name in geometry.morphAttributes ) {

			if ( ! morphAttributesUsed.has( name ) ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );
				return null;

			}

			if ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];

			morphAttributes[ name ].push( geometry.morphAttributes[ name ] );

		}

		// gather .userData

		mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];
		mergedGeometry.userData.mergedUserData.push( geometry.userData );

		if ( useGroups ) {

			let count;

			if ( isIndexed ) {

				count = geometry.index.count;

			} else if ( geometry.attributes.position !== undefined ) {

				count = geometry.attributes.position.count;

			} else {

				console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );
				return null;

			}

			mergedGeometry.addGroup( offset, count, i );

			offset += count;

		}

	}

	// merge indices

	if ( isIndexed ) {

		let indexOffset = 0;
		const mergedIndex = [];

		for ( let i = 0; i < geometries.length; ++ i ) {

			const index = geometries[ i ].index;

			for ( let j = 0; j < index.count; ++ j ) {

				mergedIndex.push( index.getX( j ) + indexOffset );

			}

			indexOffset += geometries[ i ].attributes.position.count;

		}

		mergedGeometry.setIndex( mergedIndex );

	}

	// merge attributes

	for ( const name in attributes ) {

		const mergedAttribute = mergeBufferAttributes( attributes[ name ] );

		if ( ! mergedAttribute ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.' );
			return null;

		}

		mergedGeometry.setAttribute( name, mergedAttribute );

	}

	// merge morph attributes

	for ( const name in morphAttributes ) {

		const numMorphTargets = morphAttributes[ name ][ 0 ].length;

		if ( numMorphTargets === 0 ) break;

		mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
		mergedGeometry.morphAttributes[ name ] = [];

		for ( let i = 0; i < numMorphTargets; ++ i ) {

			const morphAttributesToMerge = [];

			for ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {

				morphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );

			}

			const mergedMorphAttribute = mergeBufferAttributes( morphAttributesToMerge );

			if ( ! mergedMorphAttribute ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );
				return null;

			}

			mergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );

		}

	}

	return mergedGeometry;

}

/**
 * @param {Array<BufferAttribute>} attributes
 * @return {BufferAttribute}
 */
function mergeBufferAttributes( attributes ) {

	let TypedArray;
	let itemSize;
	let normalized;
	let arrayLength = 0;

	for ( let i = 0; i < attributes.length; ++ i ) {

		const attribute = attributes[ i ];

		if ( attribute.isInterleavedBufferAttribute ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.' );
			return null;

		}

		if ( TypedArray === undefined ) TypedArray = attribute.array.constructor;
		if ( TypedArray !== attribute.array.constructor ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );
			return null;

		}

		if ( itemSize === undefined ) itemSize = attribute.itemSize;
		if ( itemSize !== attribute.itemSize ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );
			return null;

		}

		if ( normalized === undefined ) normalized = attribute.normalized;
		if ( normalized !== attribute.normalized ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );
			return null;

		}

		arrayLength += attribute.array.length;

	}

	const array = new TypedArray( arrayLength );
	let offset = 0;

	for ( let i = 0; i < attributes.length; ++ i ) {

		array.set( attributes[ i ].array, offset );

		offset += attributes[ i ].array.length;

	}

	return new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute( array, itemSize, normalized );

}

/**
 * @param {Array<BufferAttribute>} attributes
 * @return {Array<InterleavedBufferAttribute>}
 */
function interleaveAttributes( attributes ) {

	// Interleaves the provided attributes into an InterleavedBuffer and returns
	// a set of InterleavedBufferAttributes for each attribute
	let TypedArray;
	let arrayLength = 0;
	let stride = 0;

	// calculate the the length and type of the interleavedBuffer
	for ( let i = 0, l = attributes.length; i < l; ++ i ) {

		const attribute = attributes[ i ];

		if ( TypedArray === undefined ) TypedArray = attribute.array.constructor;
		if ( TypedArray !== attribute.array.constructor ) {

			console.error( 'AttributeBuffers of different types cannot be interleaved' );
			return null;

		}

		arrayLength += attribute.array.length;
		stride += attribute.itemSize;

	}

	// Create the set of buffer attributes
	const interleavedBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBuffer( new TypedArray( arrayLength ), stride );
	let offset = 0;
	const res = [];
	const getters = [ 'getX', 'getY', 'getZ', 'getW' ];
	const setters = [ 'setX', 'setY', 'setZ', 'setW' ];

	for ( let j = 0, l = attributes.length; j < l; j ++ ) {

		const attribute = attributes[ j ];
		const itemSize = attribute.itemSize;
		const count = attribute.count;
		const iba = new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );
		res.push( iba );

		offset += itemSize;

		// Move the data for each attribute into the new interleavedBuffer
		// at the appropriate offset
		for ( let c = 0; c < count; c ++ ) {

			for ( let k = 0; k < itemSize; k ++ ) {

				iba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );

			}

		}

	}

	return res;

}

/**
 * @param {Array<BufferGeometry>} geometry
 * @return {number}
 */
function estimateBytesUsed( geometry ) {

	// Return the estimated memory used by this geometry in bytes
	// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account
	// for InterleavedBufferAttributes.
	let mem = 0;
	for ( const name in geometry.attributes ) {

		const attr = geometry.getAttribute( name );
		mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;

	}

	const indices = geometry.getIndex();
	mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
	return mem;

}

/**
 * @param {BufferGeometry} geometry
 * @param {number} tolerance
 * @return {BufferGeometry>}
 */
function mergeVertices( geometry, tolerance = 1e-4 ) {

	tolerance = Math.max( tolerance, Number.EPSILON );

	// Generate an index buffer if the geometry doesn't have one, or optimize it
	// if it's already available.
	const hashToIndex = {};
	const indices = geometry.getIndex();
	const positions = geometry.getAttribute( 'position' );
	const vertexCount = indices ? indices.count : positions.count;

	// next value for triangle indices
	let nextIndex = 0;

	// attributes and new attribute arrays
	const attributeNames = Object.keys( geometry.attributes );
	const attrArrays = {};
	const morphAttrsArrays = {};
	const newIndices = [];
	const getters = [ 'getX', 'getY', 'getZ', 'getW' ];

	// initialize the arrays
	for ( let i = 0, l = attributeNames.length; i < l; i ++ ) {

		const name = attributeNames[ i ];

		attrArrays[ name ] = [];

		const morphAttr = geometry.morphAttributes[ name ];
		if ( morphAttr ) {

			morphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );

		}

	}

	// convert the error tolerance to an amount of decimal places to truncate to
	const decimalShift = Math.log10( 1 / tolerance );
	const shiftMultiplier = Math.pow( 10, decimalShift );
	for ( let i = 0; i < vertexCount; i ++ ) {

		const index = indices ? indices.getX( i ) : i;

		// Generate a hash for the vertex attributes at the current index 'i'
		let hash = '';
		for ( let j = 0, l = attributeNames.length; j < l; j ++ ) {

			const name = attributeNames[ j ];
			const attribute = geometry.getAttribute( name );
			const itemSize = attribute.itemSize;

			for ( let k = 0; k < itemSize; k ++ ) {

				// double tilde truncates the decimal value
				hash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;

			}

		}

		// Add another reference to the vertex if it's already
		// used by another index
		if ( hash in hashToIndex ) {

			newIndices.push( hashToIndex[ hash ] );

		} else {

			// copy data to the new index in the attribute arrays
			for ( let j = 0, l = attributeNames.length; j < l; j ++ ) {

				const name = attributeNames[ j ];
				const attribute = geometry.getAttribute( name );
				const morphAttr = geometry.morphAttributes[ name ];
				const itemSize = attribute.itemSize;
				const newarray = attrArrays[ name ];
				const newMorphArrays = morphAttrsArrays[ name ];

				for ( let k = 0; k < itemSize; k ++ ) {

					const getterFunc = getters[ k ];
					newarray.push( attribute[ getterFunc ]( index ) );

					if ( morphAttr ) {

						for ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {

							newMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );

						}

					}

				}

			}

			hashToIndex[ hash ] = nextIndex;
			newIndices.push( nextIndex );
			nextIndex ++;

		}

	}

	// Generate typed arrays from new attribute arrays and update
	// the attributeBuffers
	const result = geometry.clone();
	for ( let i = 0, l = attributeNames.length; i < l; i ++ ) {

		const name = attributeNames[ i ];
		const oldAttribute = geometry.getAttribute( name );

		const buffer = new oldAttribute.array.constructor( attrArrays[ name ] );
		const attribute = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );

		result.setAttribute( name, attribute );

		// Update the attribute arrays
		if ( name in morphAttrsArrays ) {

			for ( let j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {

				const oldMorphAttribute = geometry.morphAttributes[ name ][ j ];

				const buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );
				const morphAttribute = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );
				result.morphAttributes[ name ][ j ] = morphAttribute;

			}

		}

	}

	// indices

	result.setIndex( newIndices );

	return result;

}

/**
 * @param {BufferGeometry} geometry
 * @param {number} drawMode
 * @return {BufferGeometry>}
 */
function toTrianglesDrawMode( geometry, drawMode ) {

	if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TrianglesDrawMode ) {

		console.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );
		return geometry;

	}

	if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleFanDrawMode || drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleStripDrawMode ) {

		let index = geometry.getIndex();

		// generate index if not present

		if ( index === null ) {

			const indices = [];

			const position = geometry.getAttribute( 'position' );

			if ( position !== undefined ) {

				for ( let i = 0; i < position.count; i ++ ) {

					indices.push( i );

				}

				geometry.setIndex( indices );
				index = geometry.getIndex();

			} else {

				console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );
				return geometry;

			}

		}

		//

		const numberOfTriangles = index.count - 2;
		const newIndices = [];

		if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleFanDrawMode ) {

			// gl.TRIANGLE_FAN

			for ( let i = 1; i <= numberOfTriangles; i ++ ) {

				newIndices.push( index.getX( 0 ) );
				newIndices.push( index.getX( i ) );
				newIndices.push( index.getX( i + 1 ) );

			}

		} else {

			// gl.TRIANGLE_STRIP

			for ( let i = 0; i < numberOfTriangles; i ++ ) {

				if ( i % 2 === 0 ) {

					newIndices.push( index.getX( i ) );
					newIndices.push( index.getX( i + 1 ) );
					newIndices.push( index.getX( i + 2 ) );

				} else {

					newIndices.push( index.getX( i + 2 ) );
					newIndices.push( index.getX( i + 1 ) );
					newIndices.push( index.getX( i ) );

				}

			}

		}

		if ( ( newIndices.length / 3 ) !== numberOfTriangles ) {

			console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );

		}

		// build final geometry

		const newGeometry = geometry.clone();
		newGeometry.setIndex( newIndices );
		newGeometry.clearGroups();

		return newGeometry;

	} else {

		console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );
		return geometry;

	}

}

/**
 * Calculates the morphed attributes of a morphed/skinned BufferGeometry.
 * Helpful for Raytracing or Decals.
 * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.
 * @return {Object} An Object with original position/normal attributes and morphed ones.
 */
function computeMorphedAttributes( object ) {

	if ( object.geometry.isBufferGeometry !== true ) {

		console.error( 'THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.' );
		return null;

	}

	const _vA = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _vB = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _vC = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();

	const _tempA = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _tempB = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _tempC = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();

	const _morphA = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _morphB = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const _morphC = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();

	function _calculateMorphedAttributeData(
		object,
		material,
		attribute,
		morphAttribute,
		morphTargetsRelative,
		a,
		b,
		c,
		modifiedAttributeArray
	) {

		_vA.fromBufferAttribute( attribute, a );
		_vB.fromBufferAttribute( attribute, b );
		_vC.fromBufferAttribute( attribute, c );

		const morphInfluences = object.morphTargetInfluences;

		if ( material.morphTargets && morphAttribute && morphInfluences ) {

			_morphA.set( 0, 0, 0 );
			_morphB.set( 0, 0, 0 );
			_morphC.set( 0, 0, 0 );

			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

				const influence = morphInfluences[ i ];
				const morph = morphAttribute[ i ];

				if ( influence === 0 ) continue;

				_tempA.fromBufferAttribute( morph, a );
				_tempB.fromBufferAttribute( morph, b );
				_tempC.fromBufferAttribute( morph, c );

				if ( morphTargetsRelative ) {

					_morphA.addScaledVector( _tempA, influence );
					_morphB.addScaledVector( _tempB, influence );
					_morphC.addScaledVector( _tempC, influence );

				} else {

					_morphA.addScaledVector( _tempA.sub( _vA ), influence );
					_morphB.addScaledVector( _tempB.sub( _vB ), influence );
					_morphC.addScaledVector( _tempC.sub( _vC ), influence );

				}

			}

			_vA.add( _morphA );
			_vB.add( _morphB );
			_vC.add( _morphC );

		}

		if ( object.isSkinnedMesh ) {

			object.boneTransform( a, _vA );
			object.boneTransform( b, _vB );
			object.boneTransform( c, _vC );

		}

		modifiedAttributeArray[ a * 3 + 0 ] = _vA.x;
		modifiedAttributeArray[ a * 3 + 1 ] = _vA.y;
		modifiedAttributeArray[ a * 3 + 2 ] = _vA.z;
		modifiedAttributeArray[ b * 3 + 0 ] = _vB.x;
		modifiedAttributeArray[ b * 3 + 1 ] = _vB.y;
		modifiedAttributeArray[ b * 3 + 2 ] = _vB.z;
		modifiedAttributeArray[ c * 3 + 0 ] = _vC.x;
		modifiedAttributeArray[ c * 3 + 1 ] = _vC.y;
		modifiedAttributeArray[ c * 3 + 2 ] = _vC.z;

	}

	const geometry = object.geometry;
	const material = object.material;

	let a, b, c;
	const index = geometry.index;
	const positionAttribute = geometry.attributes.position;
	const morphPosition = geometry.morphAttributes.position;
	const morphTargetsRelative = geometry.morphTargetsRelative;
	const normalAttribute = geometry.attributes.normal;
	const morphNormal = geometry.morphAttributes.position;

	const groups = geometry.groups;
	const drawRange = geometry.drawRange;
	let i, j, il, jl;
	let group, groupMaterial;
	let start, end;

	const modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );
	const modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );

	if ( index !== null ) {

		// indexed buffer geometry

		if ( Array.isArray( material ) ) {

			for ( i = 0, il = groups.length; i < il; i ++ ) {

				group = groups[ i ];
				groupMaterial = material[ group.materialIndex ];

				start = Math.max( group.start, drawRange.start );
				end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

				for ( j = start, jl = end; j < jl; j += 3 ) {

					a = index.getX( j );
					b = index.getX( j + 1 );
					c = index.getX( j + 2 );

					_calculateMorphedAttributeData(
						object,
						groupMaterial,
						positionAttribute,
						morphPosition,
						morphTargetsRelative,
						a, b, c,
						modifiedPosition
					);

					_calculateMorphedAttributeData(
						object,
						groupMaterial,
						normalAttribute,
						morphNormal,
						morphTargetsRelative,
						a, b, c,
						modifiedNormal
					);

				}

			}

		} else {

			start = Math.max( 0, drawRange.start );
			end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

			for ( i = start, il = end; i < il; i += 3 ) {

				a = index.getX( i );
				b = index.getX( i + 1 );
				c = index.getX( i + 2 );

				_calculateMorphedAttributeData(
					object,
					material,
					positionAttribute,
					morphPosition,
					morphTargetsRelative,
					a, b, c,
					modifiedPosition
				);

				_calculateMorphedAttributeData(
					object,
					material,
					normalAttribute,
					morphNormal,
					morphTargetsRelative,
					a, b, c,
					modifiedNormal
				);

			}

		}

	} else if ( positionAttribute !== undefined ) {

		// non-indexed buffer geometry

		if ( Array.isArray( material ) ) {

			for ( i = 0, il = groups.length; i < il; i ++ ) {

				group = groups[ i ];
				groupMaterial = material[ group.materialIndex ];

				start = Math.max( group.start, drawRange.start );
				end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

				for ( j = start, jl = end; j < jl; j += 3 ) {

					a = j;
					b = j + 1;
					c = j + 2;

					_calculateMorphedAttributeData(
						object,
						groupMaterial,
						positionAttribute,
						morphPosition,
						morphTargetsRelative,
						a, b, c,
						modifiedPosition
					);

					_calculateMorphedAttributeData(
						object,
						groupMaterial,
						normalAttribute,
						morphNormal,
						morphTargetsRelative,
						a, b, c,
						modifiedNormal
					);

				}

			}

		} else {

			start = Math.max( 0, drawRange.start );
			end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

			for ( i = start, il = end; i < il; i += 3 ) {

				a = i;
				b = i + 1;
				c = i + 2;

				_calculateMorphedAttributeData(
					object,
					material,
					positionAttribute,
					morphPosition,
					morphTargetsRelative,
					a, b, c,
					modifiedPosition
				);

				_calculateMorphedAttributeData(
					object,
					material,
					normalAttribute,
					morphNormal,
					morphTargetsRelative,
					a, b, c,
					modifiedNormal
				);

			}

		}

	}

	const morphedPositionAttribute = new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute( modifiedPosition, 3 );
	const morphedNormalAttribute = new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute( modifiedNormal, 3 );

	return {

		positionAttribute: positionAttribute,
		normalAttribute: normalAttribute,
		morphedPositionAttribute: morphedPositionAttribute,
		morphedNormalAttribute: morphedNormalAttribute

	};

}






/***/ }),

/***/ 652:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VRButton": () => (/* binding */ VRButton)
/* harmony export */ });
class VRButton {

	static createButton( renderer, options ) {

		if ( options ) {

			console.error( 'THREE.VRButton: The "options" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.' );

		}

		const button = document.createElement( 'button' );

		function showEnterVR( /*device*/ ) {

			let currentSession = null;

			async function onSessionStarted( session ) {

				session.addEventListener( 'end', onSessionEnded );

				await renderer.xr.setSession( session );
				button.textContent = 'EXIT VR';

				currentSession = session;

			}

			function onSessionEnded( /*event*/ ) {

				currentSession.removeEventListener( 'end', onSessionEnded );

				button.textContent = 'ENTER VR';

				currentSession = null;

			}

			//

			button.style.display = '';

			button.style.cursor = 'pointer';
			button.style.left = 'calc(50% - 50px)';
			button.style.width = '100px';

			button.textContent = 'ENTER VR';

			button.onmouseenter = function () {

				button.style.opacity = '1.0';

			};

			button.onmouseleave = function () {

				button.style.opacity = '0.5';

			};

			button.onclick = function () {

				if ( currentSession === null ) {

					// WebXR's requestReferenceSpace only works if the corresponding feature
					// was requested at session creation time. For simplicity, just ask for
					// the interesting ones as optional features, but be aware that the
					// requestReferenceSpace call will fail if it turns out to be unavailable.
					// ('local' is always available for immersive sessions and doesn't need to
					// be requested separately.)

					const sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking', 'layers' ] };
					navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );

				} else {

					currentSession.end();

				}

			};

		}

		function disableButton() {

			button.style.display = '';

			button.style.cursor = 'auto';
			button.style.left = 'calc(50% - 75px)';
			button.style.width = '150px';

			button.onmouseenter = null;
			button.onmouseleave = null;

			button.onclick = null;

		}

		function showWebXRNotFound() {

			disableButton();

			button.textContent = 'VR NOT SUPPORTED';

		}

		function stylizeElement( element ) {

			element.style.position = 'absolute';
			element.style.bottom = '20px';
			element.style.padding = '12px 6px';
			element.style.border = '1px solid #fff';
			element.style.borderRadius = '4px';
			element.style.background = 'rgba(0,0,0,0.1)';
			element.style.color = '#fff';
			element.style.font = 'normal 13px sans-serif';
			element.style.textAlign = 'center';
			element.style.opacity = '0.5';
			element.style.outline = 'none';
			element.style.zIndex = '999';

		}

		if ( 'xr' in navigator ) {

			button.id = 'VRButton';
			button.style.display = 'none';

			stylizeElement( button );

			navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {

				supported ? showEnterVR() : showWebXRNotFound();

			} );

			return button;

		} else {

			const message = document.createElement( 'a' );

			if ( window.isSecureContext === false ) {

				message.href = document.location.href.replace( /^http:/, 'https:' );
				message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message

			} else {

				message.href = 'https://immersiveweb.dev/';
				message.innerHTML = 'WEBXR NOT AVAILABLE';

			}

			message.style.left = 'calc(50% - 90px)';
			message.style.width = '180px';
			message.style.textDecoration = 'none';

			stylizeElement( message );

			return message;

		}

	}

}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
const game_1 = __webpack_require__(417);
game_1.Game.make();
//# sourceMappingURL=index.js.map
})();

/******/ })()
;
//# sourceMappingURL=index.js.map